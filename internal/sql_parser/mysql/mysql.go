// Code generated by goyacc -fast-append -p mysq -o mysql.go mysql.y. DO NOT EDIT.

//line mysql.y:18
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql.y:18

import (
	"github.com/usalko/sent/internal/sql_parser/ast"
)

func setParseTree(mysqlex mysqLexer, stmt ast.Statement) {
	mysqlex.(ast.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(mysqlex mysqLexer, allow bool) {
	mysqlex.(ast.Tokenizer).SetAllowComments(allow)
}

func setDDL(mysqlex mysqLexer, node ast.Statement) {
	mysqlex.(ast.Tokenizer).SetPartialDDL(node)
}

func incNesting(mysqlex mysqLexer) bool {
	mysqlex.(ast.Tokenizer).IncNesting()
	if mysqlex.(ast.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(mysqlex mysqLexer) {
	mysqlex.(ast.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(mysqlex mysqLexer) {
	mysqlex.(ast.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(mysqlex mysqLexer, bvar string) {
	mysqlex.(ast.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const DISTINCTROW = 57380
const PARSER = 57381
const GENERATED = 57382
const ALWAYS = 57383
const OUTFILE = 57384
const S3 = 57385
const DATA = 57386
const LOAD = 57387
const LINES = 57388
const TERMINATED = 57389
const ESCAPED = 57390
const ENCLOSED = 57391
const DUMPFILE = 57392
const CSV = 57393
const HEADER = 57394
const MANIFEST = 57395
const OVERWRITE = 57396
const STARTING = 57397
const OPTIONALLY = 57398
const VALUES = 57399
const LAST_INSERT_ID = 57400
const NEXT = 57401
const VALUE = 57402
const SHARE = 57403
const MODE = 57404
const SQL_NO_CACHE = 57405
const SQL_CACHE = 57406
const SQL_CALC_FOUND_ROWS = 57407
const JOIN = 57408
const STRAIGHT_JOIN = 57409
const LEFT = 57410
const RIGHT = 57411
const INNER = 57412
const OUTER = 57413
const CROSS = 57414
const NATURAL = 57415
const USE = 57416
const FORCE = 57417
const ON = 57418
const USING = 57419
const INPLACE = 57420
const COPY = 57421
const INSTANT = 57422
const ALGORITHM = 57423
const NONE = 57424
const SHARED = 57425
const EXCLUSIVE = 57426
const SUBQUERY_AS_EXPR = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const HEX = 57431
const STRING = 57432
const NCHAR_STRING = 57433
const INTEGRAL = 57434
const FLOAT = 57435
const DECIMAL = 57436
const HEXNUM = 57437
const VALUE_ARG = 57438
const LIST_ARG = 57439
const COMMENT = 57440
const COMMENT_KEYWORD = 57441
const BIT_LITERAL = 57442
const COMPRESSION = 57443
const JSON_PRETTY = 57444
const JSON_STORAGE_SIZE = 57445
const JSON_STORAGE_FREE = 57446
const JSON_CONTAINS = 57447
const JSON_CONTAINS_PATH = 57448
const JSON_EXTRACT = 57449
const JSON_KEYS = 57450
const JSON_OVERLAPS = 57451
const JSON_SEARCH = 57452
const JSON_VALUE = 57453
const EXTRACT = 57454
const NULL = 57455
const TRUE = 57456
const FALSE = 57457
const OFF = 57458
const DISCARD = 57459
const IMPORT = 57460
const ENABLE = 57461
const DISABLE = 57462
const TABLESPACE = 57463
const VIRTUAL = 57464
const STORED = 57465
const BOTH = 57466
const LEADING = 57467
const TRAILING = 57468
const EMPTY_FROM_CLAUSE = 57469
const LOWER_THAN_CHARSET = 57470
const CHARSET = 57471
const UNIQUE = 57472
const KEY = 57473
const EXPRESSION_PREC_SETTER = 57474
const OR = 57475
const XOR = 57476
const AND = 57477
const NOT = 57478
const BETWEEN = 57479
const CASE = 57480
const WHEN = 57481
const THEN = 57482
const ELSE = 57483
const END = 57484
const LE = 57485
const GE = 57486
const NE = 57487
const NULL_SAFE_EQUAL = 57488
const IS = 57489
const LIKE = 57490
const REGEXP = 57491
const IN = 57492
const SHIFT_LEFT = 57493
const SHIFT_RIGHT = 57494
const DIV = 57495
const MOD = 57496
const UNARY = 57497
const COLLATE = 57498
const BINARY = 57499
const UNDERSCORE_ARMSCII8 = 57500
const UNDERSCORE_ASCII = 57501
const UNDERSCORE_BIG5 = 57502
const UNDERSCORE_BINARY = 57503
const UNDERSCORE_CP1250 = 57504
const UNDERSCORE_CP1251 = 57505
const UNDERSCORE_CP1256 = 57506
const UNDERSCORE_CP1257 = 57507
const UNDERSCORE_CP850 = 57508
const UNDERSCORE_CP852 = 57509
const UNDERSCORE_CP866 = 57510
const UNDERSCORE_CP932 = 57511
const UNDERSCORE_DEC8 = 57512
const UNDERSCORE_EUCJPMS = 57513
const UNDERSCORE_EUCKR = 57514
const UNDERSCORE_GB18030 = 57515
const UNDERSCORE_GB2312 = 57516
const UNDERSCORE_GBK = 57517
const UNDERSCORE_GEOSTD8 = 57518
const UNDERSCORE_GREEK = 57519
const UNDERSCORE_HEBREW = 57520
const UNDERSCORE_HP8 = 57521
const UNDERSCORE_KEYBCS2 = 57522
const UNDERSCORE_KOI8R = 57523
const UNDERSCORE_KOI8U = 57524
const UNDERSCORE_LATIN1 = 57525
const UNDERSCORE_LATIN2 = 57526
const UNDERSCORE_LATIN5 = 57527
const UNDERSCORE_LATIN7 = 57528
const UNDERSCORE_MACCE = 57529
const UNDERSCORE_MACROMAN = 57530
const UNDERSCORE_SJIS = 57531
const UNDERSCORE_SWE7 = 57532
const UNDERSCORE_TIS620 = 57533
const UNDERSCORE_UCS2 = 57534
const UNDERSCORE_UJIS = 57535
const UNDERSCORE_UTF16 = 57536
const UNDERSCORE_UTF16LE = 57537
const UNDERSCORE_UTF32 = 57538
const UNDERSCORE_UTF8 = 57539
const UNDERSCORE_UTF8MB4 = 57540
const UNDERSCORE_UTF8MB3 = 57541
const INTERVAL = 57542
const JSON_EXTRACT_OP = 57543
const JSON_UNQUOTE_EXTRACT_OP = 57544
const CREATE = 57545
const ALTER = 57546
const DROP = 57547
const RENAME = 57548
const ANALYZE = 57549
const ADD = 57550
const FLUSH = 57551
const CHANGE = 57552
const MODIFY = 57553
const DEALLOCATE = 57554
const REVERT = 57555
const SCHEMA = 57556
const TABLE = 57557
const INDEX = 57558
const VIEW = 57559
const TO = 57560
const IGNORE = 57561
const IF = 57562
const PRIMARY = 57563
const COLUMN = 57564
const SPATIAL = 57565
const FULLTEXT = 57566
const KEY_BLOCK_SIZE = 57567
const CHECK = 57568
const INDEXES = 57569
const ACTION = 57570
const CASCADE = 57571
const CONSTRAINT = 57572
const FOREIGN = 57573
const NO = 57574
const REFERENCES = 57575
const RESTRICT = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const COALESCE = 57585
const EXCHANGE = 57586
const REBUILD = 57587
const PARTITIONING = 57588
const REMOVE = 57589
const PREPARE = 57590
const EXECUTE = 57591
const MAXVALUE = 57592
const PARTITION = 57593
const REORGANIZE = 57594
const LESS = 57595
const THAN = 57596
const PROCEDURE = 57597
const TRIGGER = 57598
const VINDEX = 57599
const VINDEXES = 57600
const DIRECTORY = 57601
const NAME = 57602
const UPGRADE = 57603
const STATUS = 57604
const VARIABLES = 57605
const WARNINGS = 57606
const CASCADED = 57607
const DEFINER = 57608
const OPTION = 57609
const SQL = 57610
const UNDEFINED = 57611
const SEQUENCE = 57612
const MERGE = 57613
const TEMPORARY = 57614
const TEMPTABLE = 57615
const INVOKER = 57616
const SECURITY = 57617
const FIRST = 57618
const AFTER = 57619
const LAST = 57620
const VITESS_MIGRATION = 57621
const CANCEL = 57622
const RETRY = 57623
const COMPLETE = 57624
const CLEANUP = 57625
const THROTTLE = 57626
const UNTHROTTLE = 57627
const EXPIRE = 57628
const RATIO = 57629
const BEGIN = 57630
const START = 57631
const TRANSACTION = 57632
const COMMIT = 57633
const ROLLBACK = 57634
const SAVEPOINT = 57635
const RELEASE = 57636
const WORK = 57637
const BIT = 57638
const TINYINT = 57639
const SMALLINT = 57640
const MEDIUMINT = 57641
const INT = 57642
const INTEGER = 57643
const BIGINT = 57644
const INTNUM = 57645
const REAL = 57646
const DOUBLE = 57647
const FLOAT_TYPE = 57648
const DECIMAL_TYPE = 57649
const NUMERIC = 57650
const TIME = 57651
const TIMESTAMP = 57652
const DATETIME = 57653
const YEAR = 57654
const CHAR = 57655
const VARCHAR = 57656
const BOOL = 57657
const CHARACTER = 57658
const VARBINARY = 57659
const NCHAR = 57660
const TEXT = 57661
const TINYTEXT = 57662
const MEDIUMTEXT = 57663
const LONGTEXT = 57664
const BLOB = 57665
const TINYBLOB = 57666
const MEDIUMBLOB = 57667
const LONGBLOB = 57668
const JSON = 57669
const JSON_SCHEMA_VALID = 57670
const JSON_SCHEMA_VALIDATION_REPORT = 57671
const ENUM = 57672
const GEOMETRY = 57673
const POINT = 57674
const LINESTRING = 57675
const POLYGON = 57676
const GEOMETRYCOLLECTION = 57677
const MULTIPOINT = 57678
const MULTILINESTRING = 57679
const MULTIPOLYGON = 57680
const ASCII = 57681
const UNICODE = 57682
const NULLX = 57683
const AUTO_INCREMENT = 57684
const APPROXNUM = 57685
const SIGNED = 57686
const UNSIGNED = 57687
const ZEROFILL = 57688
const CODE = 57689
const COLLATION = 57690
const COLUMNS = 57691
const DATABASES = 57692
const ENGINES = 57693
const EVENT = 57694
const EXTENDED = 57695
const FIELDS = 57696
const FULL = 57697
const FUNCTION = 57698
const GTID_EXECUTED = 57699
const KEYSPACES = 57700
const OPEN = 57701
const PLUGINS = 57702
const PRIVILEGES = 57703
const PROCESSLIST = 57704
const SCHEMAS = 57705
const TABLES = 57706
const TRIGGERS = 57707
const USER = 57708
const VGTID_EXECUTED = 57709
const VITESS_KEYSPACES = 57710
const VITESS_METADATA = 57711
const VITESS_MIGRATIONS = 57712
const VITESS_REPLICATION_STATUS = 57713
const VITESS_SHARDS = 57714
const VITESS_TABLETS = 57715
const VITESS_TARGET = 57716
const VSCHEMA = 57717
const VITESS_THROTTLED_APPS = 57718
const NAMES = 57719
const GLOBAL = 57720
const SESSION = 57721
const ISOLATION = 57722
const LEVEL = 57723
const READ = 57724
const WRITE = 57725
const ONLY = 57726
const REPEATABLE = 57727
const COMMITTED = 57728
const UNCOMMITTED = 57729
const SERIALIZABLE = 57730
const CURRENT_TIMESTAMP = 57731
const DATABASE = 57732
const CURRENT_DATE = 57733
const NOW = 57734
const CURRENT_TIME = 57735
const LOCALTIME = 57736
const LOCALTIMESTAMP = 57737
const CURRENT_USER = 57738
const UTC_DATE = 57739
const UTC_TIME = 57740
const UTC_TIMESTAMP = 57741
const DAY = 57742
const DAY_HOUR = 57743
const DAY_MICROSECOND = 57744
const DAY_MINUTE = 57745
const DAY_SECOND = 57746
const HOUR = 57747
const HOUR_MICROSECOND = 57748
const HOUR_MINUTE = 57749
const HOUR_SECOND = 57750
const MICROSECOND = 57751
const MINUTE = 57752
const MINUTE_MICROSECOND = 57753
const MINUTE_SECOND = 57754
const MONTH = 57755
const QUARTER = 57756
const SECOND = 57757
const SECOND_MICROSECOND = 57758
const YEAR_MONTH = 57759
const WEEK = 57760
const REPLACE = 57761
const CONVERT = 57762
const CAST = 57763
const SUBSTR = 57764
const SUBSTRING = 57765
const GROUP_CONCAT = 57766
const SEPARATOR = 57767
const TIMESTAMPADD = 57768
const TIMESTAMPDIFF = 57769
const WEIGHT_STRING = 57770
const LTRIM = 57771
const RTRIM = 57772
const TRIM = 57773
const JSON_ARRAY = 57774
const JSON_OBJECT = 57775
const JSON_QUOTE = 57776
const JSON_DEPTH = 57777
const JSON_TYPE = 57778
const JSON_LENGTH = 57779
const JSON_VALID = 57780
const JSON_ARRAY_APPEND = 57781
const JSON_ARRAY_INSERT = 57782
const JSON_INSERT = 57783
const JSON_MERGE = 57784
const JSON_MERGE_PATCH = 57785
const JSON_MERGE_PRESERVE = 57786
const JSON_REMOVE = 57787
const JSON_REPLACE = 57788
const JSON_SET = 57789
const JSON_UNQUOTE = 57790
const MATCH = 57791
const AGAINST = 57792
const BOOLEAN = 57793
const LANGUAGE = 57794
const WITH = 57795
const QUERY = 57796
const EXPANSION = 57797
const WITHOUT = 57798
const VALIDATION = 57799
const UNUSED = 57800
const ARRAY = 57801
const BYTE = 57802
const CUME_DIST = 57803
const DESCRIPTION = 57804
const DENSE_RANK = 57805
const EMPTY = 57806
const EXCEPT = 57807
const FIRST_VALUE = 57808
const GROUPING = 57809
const GROUPS = 57810
const JSON_TABLE = 57811
const LAG = 57812
const LAST_VALUE = 57813
const LATERAL = 57814
const LEAD = 57815
const NTH_VALUE = 57816
const NTILE = 57817
const OF = 57818
const OVER = 57819
const PERCENT_RANK = 57820
const RANK = 57821
const RECURSIVE = 57822
const ROW_NUMBER = 57823
const SYSTEM = 57824
const WINDOW = 57825
const ACTIVE = 57826
const ADMIN = 57827
const AUTOEXTEND_SIZE = 57828
const BUCKETS = 57829
const CLONE = 57830
const COLUMN_FORMAT = 57831
const COMPONENT = 57832
const DEFINITION = 57833
const ENFORCED = 57834
const ENGINE_ATTRIBUTE = 57835
const EXCLUDE = 57836
const FOLLOWING = 57837
const GEOMCOLLECTION = 57838
const GET_MASTER_PUBLIC_KEY = 57839
const HISTOGRAM = 57840
const HISTORY = 57841
const INACTIVE = 57842
const INVISIBLE = 57843
const LOCKED = 57844
const MASTER_COMPRESSION_ALGORITHMS = 57845
const MASTER_PUBLIC_KEY_PATH = 57846
const MASTER_TLS_CIPHERSUITES = 57847
const MASTER_ZSTD_COMPRESSION_LEVEL = 57848
const NESTED = 57849
const NETWORK_NAMESPACE = 57850
const NOWAIT = 57851
const NULLS = 57852
const OJ = 57853
const OLD = 57854
const OPTIONAL = 57855
const ORDINALITY = 57856
const ORGANIZATION = 57857
const OTHERS = 57858
const PARTIAL = 57859
const PATH = 57860
const PERSIST = 57861
const PERSIST_ONLY = 57862
const PRECEDING = 57863
const PRIVILEGE_CHECKS_USER = 57864
const PROCESS = 57865
const RANDOM = 57866
const REFERENCE = 57867
const REQUIRE_ROW_FORMAT = 57868
const RESOURCE = 57869
const RESPECT = 57870
const RESTART = 57871
const RETAIN = 57872
const REUSE = 57873
const ROLE = 57874
const SECONDARY = 57875
const SECONDARY_ENGINE = 57876
const SECONDARY_ENGINE_ATTRIBUTE = 57877
const SECONDARY_LOAD = 57878
const SECONDARY_UNLOAD = 57879
const SIMPLE = 57880
const SKIP = 57881
const SRID = 57882
const THREAD_PRIORITY = 57883
const TIES = 57884
const UNBOUNDED = 57885
const VCPU = 57886
const VISIBLE = 57887
const RETURNING = 57888
const FORMAT = 57889
const TREE = 57890
const VITESS = 57891
const TRADITIONAL = 57892
const LOCAL = 57893
const LOW_PRIORITY = 57894
const NO_WRITE_TO_BINLOG = 57895
const LOGS = 57896
const ERROR = 57897
const GENERAL = 57898
const HOSTS = 57899
const OPTIMIZER_COSTS = 57900
const USER_RESOURCES = 57901
const SLOW = 57902
const CHANNEL = 57903
const RELAY = 57904
const EXPORT = 57905
const AVG_ROW_LENGTH = 57906
const CONNECTION = 57907
const CHECKSUM = 57908
const DELAY_KEY_WRITE = 57909
const ENCRYPTION = 57910
const ENGINE = 57911
const INSERT_METHOD = 57912
const MAX_ROWS = 57913
const MIN_ROWS = 57914
const PACK_KEYS = 57915
const PASSWORD = 57916
const FIXED = 57917
const DYNAMIC = 57918
const COMPRESSED = 57919
const REDUNDANT = 57920
const COMPACT = 57921
const ROW_FORMAT = 57922
const STATS_AUTO_RECALC = 57923
const STATS_PERSISTENT = 57924
const STATS_SAMPLE_PAGES = 57925
const STORAGE = 57926
const MEMORY = 57927
const DISK = 57928
const PARTITIONS = 57929
const LINEAR = 57930
const RANGE = 57931
const LIST = 57932
const SUBPARTITION = 57933
const SUBPARTITIONS = 57934
const HASH = 57935

var mysqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"VITESS_MIGRATION",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VITESS_KEYSPACES",
	"VITESS_METADATA",
	"VITESS_MIGRATIONS",
	"VITESS_REPLICATION_STATUS",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VITESS_TARGET",
	"VSCHEMA",
	"VITESS_THROTTLED_APPS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"PARTITIONS",
	"LINEAR",
	"RANGE",
	"LIST",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"HASH",
	"';'",
}

var mysqStatenames = [...]string{}

const mysqEofCode = 1
const mysqErrCode = 2
const mysqInitialStackSize = 16

//line yacctab:1
var mysqExca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	1, 145,
	611, 145,
	-2, 153,
	-1, 48,
	132, 153,
	172, 153,
	333, 153,
	-2, 498,
	-1, 55,
	35, 739,
	233, 739,
	244, 739,
	279, 753,
	280, 753,
	-2, 741,
	-1, 60,
	235, 766,
	-2, 764,
	-1, 114,
	232, 1291,
	-2, 119,
	-1, 116,
	1, 146,
	611, 146,
	-2, 153,
	-1, 127,
	133, 384,
	238, 384,
	-2, 487,
	-1, 146,
	132, 153,
	172, 153,
	333, 153,
	-2, 507,
	-1, 695,
	217, 1312,
	-2, 1308,
	-1, 696,
	217, 1313,
	-2, 1309,
	-1, 771,
	59, 834,
	-2, 849,
	-1, 808,
	148, 1720,
	-2, 112,
	-1, 809,
	148, 1561,
	-2, 113,
	-1, 815,
	148, 1645,
	-2, 1285,
	-1, 963,
	148, 1489,
	-2, 1282,
	-1, 1004,
	243, 41,
	248, 41,
	-2, 395,
	-1, 1088,
	1, 554,
	611, 554,
	-2, 153,
	-1, 1325,
	59, 835,
	-2, 854,
	-1, 1326,
	59, 836,
	-2, 855,
	-1, 1379,
	132, 153,
	172, 153,
	333, 153,
	-2, 434,
	-1, 1458,
	133, 384,
	238, 384,
	-2, 487,
	-1, 1467,
	243, 42,
	248, 42,
	-2, 396,
	-1, 1776,
	217, 1317,
	-2, 1311,
	-1, 1860,
	132, 153,
	172, 153,
	333, 153,
	-2, 435,
	-1, 1867,
	25, 174,
	-2, 176,
	-1, 2116,
	87, 39,
	-2, 891,
	-1, 2173,
	77, 94,
	87, 94,
	-2, 911,
	-1, 2241,
	586, 666,
	-2, 640,
	-1, 2380,
	49, 1253,
	-2, 1247,
	-1, 2602,
	87, 39,
	-2, 892,
	-1, 2640,
	7, 53,
	18, 53,
	20, 53,
	88, 53,
	-2, 883,
	-1, 2920,
	586, 666,
	-2, 654,
	-1, 2978,
	22, 1647,
	32, 1647,
	173, 1647,
	255, 1647,
	313, 1647,
	314, 1647,
	315, 1647,
	316, 1647,
	317, 1647,
	318, 1647,
	319, 1647,
	321, 1647,
	322, 1647,
	323, 1647,
	324, 1647,
	325, 1647,
	326, 1647,
	327, 1647,
	328, 1647,
	329, 1647,
	330, 1647,
	331, 1647,
	332, 1647,
	334, 1647,
	336, 1647,
	337, 1647,
	338, 1647,
	339, 1647,
	340, 1647,
	341, 1647,
	342, 1647,
	343, 1647,
	344, 1647,
	347, 1647,
	348, 1647,
	349, 1647,
	350, 1647,
	351, 1647,
	352, 1647,
	353, 1647,
	354, 1647,
	355, 1647,
	468, 1647,
	-2, 598,
}

const mysqPrivate = 57344

const mysqLast = 43066

var mysqAct = [...]int{
	695, 2743, 2744, 2339, 2742, 3032, 3040, 2901, 3009, 3008,
	1857, 2976, 2717, 1382, 704, 2529, 2960, 1790, 697, 2435,
	2442, 2070, 688, 37, 1151, 2393, 2854, 3, 2704, 2492,
	2497, 2483, 2494, 2493, 2491, 1810, 2496, 2495, 1792, 2757,
	2396, 96, 617, 689, 2512, 2877, 1927, 764, 1304, 2104,
	2450, 186, 2397, 2511, 186, 2394, 578, 186, 613, 2762,
	2605, 2611, 593, 2338, 186, 1830, 1340, 2301, 2337, 686,
	1814, 687, 186, 639, 2514, 2167, 2144, 610, 2391, 2381,
	2631, 2131, 786, 698, 1890, 1100, 2597, 186, 2206, 2534,
	2238, 1915, 611, 1895, 2208, 2284, 155, 966, 1846, 787,
	768, 2207, 772, 1958, 609, 1834, 2156, 38, 2137, 593,
	1835, 1327, 593, 186, 593, 2106, 605, 2123, 766, 36,
	789, 1745, 1770, 1746, 141, 1483, 1676, 2276, 1634, 1436,
	1465, 813, 1686, 810, 1129, 1936, 1822, 95, 1974, 2200,
	1897, 1914, 999, 994, 1371, 2175, 1349, 91, 622, 1837,
	1307, 1236, 1698, 1579, 1583, 1653, 1172, 1472, 970, 973,
	1912, 1002, 1563, 1005, 1012, 974, 1773, 1000, 1001, 1886,
	1143, 1370, 1354, 1815, 1368, 778, 1742, 1431, 1149, 1588,
	124, 119, 117, 118, 1084, 98, 800, 774, 125, 776,
	1457, 97, 76, 600, 85, 1783, 1239, 2910, 2231, 773,
	102, 1243, 89, 3033, 1929, 1930, 1931, 1929, 2705, 159,
	1036, 2480, 188, 189, 190, 2260, 2259, 1972, 2229, 2697,
	2660, 2292, 582, 2502, 775, 77, 2502, 8, 2293, 549,
	7, 1173, 90, 6, 2933, 794, 2499, 799, 780, 126,
	2934, 104, 105, 1041, 108, 2747, 2747, 114, 1787, 1788,
	183, 1641, 1173, 544, 967, 582, 1548, 120, 1640, 601,
	1639, 1638, 992, 1637, 1636, 87, 1619, 603, 765, 604,
	767, 2997, 2102, 760, 761, 762, 763, 2377, 2585, 771,
	1962, 2500, 814, 807, 2500, 2251, 3012, 781, 2133, 983,
	1015, 978, 788, 1016, 991, 3049, 579, 3023, 990, 989,
	988, 1628, 1334, 2506, 2986, 3007, 2506, 802, 803, 1042,
	1045, 1046, 188, 189, 190, 1960, 2254, 1646, 2984, 1051,
	2850, 2849, 1040, 3048, 1961, 2934, 120, 2990, 2991, 2710,
	2746, 2746, 2711, 1057, 1039, 2452, 2453, 1183, 78, 2970,
	3036, 80, 2985, 565, 2929, 2016, 78, 3021, 2718, 78,
	2961, 78, 1955, 2969, 1038, 563, 2928, 2300, 1183, 2981,
	582, 2567, 1446, 2432, 2433, 2103, 2268, 1054, 1055, 1056,
	2267, 1059, 1060, 1061, 1062, 2147, 1087, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 120, 560, 2431, 1136, 2775, 1138,
	2148, 1818, 2184, 2291, 574, 2183, 1852, 1853, 2185, 1372,
	2014, 1373, 2503, 2013, 1851, 2503, 87, 1119, 1789, 570,
	758, 757, 1146, 583, 87, 2902, 1107, 87, 1107, 87,
	1906, 1108, 982, 1108, 2196, 984, 1179, 1135, 1137, 1171,
	2451, 1106, 2232, 1105, 1870, 1869, 1120, 2608, 3013, 2558,
	1124, 1125, 2454, 2140, 2141, 1900, 583, 1179, 2531, 582,
	2327, 2556, 2438, 591, 1627, 1113, 582, 595, 589, 3014,
	2535, 2277, 1311, 1083, 1986, 1983, 1985, 1984, 1987, 1988,
	2263, 2239, 1980, 987, 1569, 1093, 1094, 1937, 550, 2524,
	552, 566, 1975, 585, 582, 584, 556, 2525, 554, 558,
	567, 559, 3035, 553, 1564, 564, 1058, 2439, 555, 568,
	569, 572, 575, 576, 577, 573, 571, 1096, 562, 586,
	1122, 1123, 1629, 1630, 1631, 1140, 987, 1082, 1145, 1538,
	987, 1121, 979, 2441, 1133, 1818, 1128, 1981, 1134, 981,
	980, 985, 1089, 2532, 186, 1126, 186, 2436, 1139, 186,
	1114, 2279, 1992, 2533, 1993, 1127, 1994, 2998, 2699, 1977,
	2698, 583, 1995, 2834, 2452, 2453, 1064, 1063, 2695, 87,
	1940, 2437, 1132, 1539, 1979, 1540, 1831, 996, 1034, 593,
	1153, 593, 593, 1205, 1816, 1817, 2302, 1025, 985, 1023,
	995, 1086, 1033, 1032, 996, 1899, 593, 593, 1450, 1031,
	1030, 1029, 1314, 2443, 2859, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1214, 1213, 1215, 1216, 1978, 2328, 1028, 1027,
	37, 1035, 1022, 1217, 1217, 1165, 2454, 3050, 3019, 1178,
	1175, 1176, 1177, 1182, 1184, 1181, 1103, 1180, 1109, 1110,
	1111, 1112, 971, 2014, 1174, 3044, 971, 1008, 1471, 1580,
	1178, 1175, 1176, 1177, 1182, 1184, 1181, 1007, 1180, 986,
	583, 1147, 1148, 1913, 801, 1174, 971, 583, 2304, 2451,
	969, 2107, 2109, 2909, 2230, 993, 1117, 2280, 1966, 1576,
	2694, 2454, 2283, 1159, 1959, 1047, 1014, 1085, 1570, 2473,
	2265, 587, 1571, 1572, 1053, 583, 2262, 1444, 1957, 1443,
	1442, 2249, 986, 1577, 1141, 2198, 986, 2296, 2028, 580,
	1440, 1220, 1221, 1222, 1223, 2898, 548, 543, 1816, 1817,
	2989, 1228, 2233, 1231, 581, 2275, 1218, 1219, 2274, 1302,
	2647, 1026, 2609, 1024, 2314, 2313, 2312, 2306, 1568, 2310,
	2627, 2305, 2180, 2303, 1014, 2143, 2094, 1297, 2308, 1782,
	2915, 2927, 1358, 1470, 1283, 1044, 1014, 2307, 186, 1155,
	1156, 1007, 593, 593, 2988, 1043, 81, 2504, 2505, 116,
	2504, 2505, 2253, 1224, 2309, 2311, 1098, 2138, 186, 1858,
	2508, 2658, 2659, 2508, 1217, 1013, 2745, 2745, 1317, 1216,
	2440, 2430, 1321, 2015, 1154, 1130, 1589, 593, 768, 1144,
	86, 186, 2286, 1014, 1014, 783, 593, 2285, 86, 766,
	1320, 86, 593, 86, 1102, 1318, 2252, 1550, 1549, 1551,
	1552, 1553, 77, 1903, 2923, 1168, 1303, 1037, 1166, 1014,
	810, 1167, 2690, 2108, 1095, 1241, 1092, 1242, 111, 2621,
	1104, 2286, 1976, 1013, 1245, 1573, 2285, 1315, 1374, 1007,
	1010, 1011, 1169, 971, 2320, 1013, 1699, 1004, 1008, 3042,
	1017, 1007, 3043, 1904, 3041, 1019, 2222, 1188, 1319, 1020,
	1018, 1902, 95, 2771, 1116, 1189, 2665, 1699, 1003, 2042,
	1189, 2664, 1565, 1658, 1566, 1118, 3015, 1567, 1956, 1303,
	1021, 1954, 1289, 1290, 1291, 1292, 1293, 1659, 1660, 1657,
	1187, 1188, 1013, 1013, 1052, 1905, 1944, 1308, 112, 1007,
	1010, 1011, 1480, 971, 1479, 1901, 2860, 1004, 1008, 1469,
	98, 1211, 1212, 1214, 1213, 1215, 1216, 1189, 1013, 1648,
	1650, 1651, 1952, 1017, 1007, 1949, 1025, 2444, 1019, 1131,
	1590, 2448, 1020, 1018, 1949, 2564, 1023, 2648, 2939, 2447,
	1305, 1359, 1189, 1649, 1088, 1101, 2020, 2021, 2022, 765,
	1316, 1189, 3046, 2870, 1334, 2891, 186, 1339, 767, 1336,
	1432, 1322, 1953, 1189, 2842, 1823, 1824, 1189, 3051, 814,
	1441, 1951, 1189, 2449, 3016, 1558, 1189, 2038, 2445, 1364,
	1365, 2940, 1369, 2446, 1209, 1210, 1211, 1212, 1214, 1213,
	1215, 1216, 2841, 593, 87, 1467, 2918, 1186, 2892, 1187,
	1188, 1334, 1186, 1476, 1187, 1188, 2322, 1478, 1656, 2832,
	1481, 1482, 593, 593, 2724, 593, 2725, 593, 593, 1189,
	593, 593, 593, 593, 593, 593, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1191, 1513, 1514, 1556, 593, 1205, 1557,
	2295, 186, 1519, 709, 710, 711, 2562, 1334, 1477, 1186,
	2037, 1187, 1188, 3052, 1545, 2079, 1334, 2735, 186, 2071,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1213, 1215,
	1216, 593, 1189, 186, 1186, 1512, 1187, 1188, 1515, 2734,
	2672, 1334, 2059, 1186, 1578, 1187, 1188, 593, 1703, 186,
	1463, 805, 1704, 2671, 2661, 1186, 1533, 1187, 1188, 1186,
	1555, 1187, 1188, 3017, 1186, 186, 1187, 1188, 1186, 2481,
	1187, 1188, 186, 1456, 1189, 188, 189, 190, 1544, 2655,
	2469, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	593, 1347, 2204, 1475, 1516, 188, 189, 190, 1485, 2187,
	1486, 2917, 1488, 1490, 593, 593, 1494, 1496, 1498, 1500,
	1502, 1186, 1439, 1187, 1188, 2203, 1334, 1909, 1559, 1474,
	1189, 1543, 186, 2895, 1542, 1473, 1473, 1541, 1454, 188,
	189, 190, 1466, 1925, 1445, 1343, 1452, 1531, 1453, 1207,
	1208, 1209, 1210, 1211, 1212, 1214, 1213, 1215, 1216, 1593,
	1525, 1522, 1447, 1448, 1449, 1521, 1597, 1346, 1599, 1600,
	1601, 1602, 1520, 1492, 1186, 1606, 1187, 1188, 593, 1189,
	2894, 1517, 1680, 1684, 188, 189, 190, 1618, 1923, 2893,
	1585, 1689, 593, 1683, 1683, 1344, 2837, 1681, 1681, 1189,
	1591, 1592, 2822, 2033, 1654, 1189, 2821, 593, 593, 1581,
	2770, 2768, 2731, 2032, 1596, 2669, 1186, 2654, 1187, 1188,
	2536, 1603, 1604, 1605, 188, 189, 190, 2472, 1523, 1524,
	990, 989, 988, 696, 1529, 1530, 2471, 2213, 1189, 2201,
	1661, 1700, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1595, 1662, 1652, 120, 1299,
	1970, 1969, 1186, 2906, 1187, 1188, 1813, 1743, 1774, 1795,
	186, 1617, 188, 189, 190, 593, 1921, 1620, 1616, 1586,
	1554, 1546, 1536, 1334, 187, 1532, 1528, 187, 1334, 2830,
	187, 1527, 1624, 1625, 2528, 594, 1526, 187, 1345, 186,
	1142, 1158, 593, 2129, 3034, 187, 3003, 1334, 94, 1655,
	2867, 1186, 186, 1187, 1188, 2866, 593, 2129, 2967, 1743,
	187, 186, 2691, 186, 2826, 186, 186, 593, 2129, 2947,
	593, 1186, 2825, 1187, 1188, 2145, 1189, 1186, 2716, 1187,
	1188, 593, 594, 1774, 2145, 594, 187, 594, 2129, 2943,
	2240, 810, 1685, 1867, 810, 92, 2218, 1189, 1866, 1691,
	1692, 1800, 95, 1801, 2125, 101, 93, 1334, 1778, 1779,
	1186, 2620, 1187, 1188, 2622, 1776, 100, 1185, 99, 94,
	1189, 95, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214,
	1213, 1215, 1216, 2935, 1334, 2922, 593, 1950, 1775, 1806,
	1833, 2051, 2425, 1916, 1917, 1918, 92, 2153, 1920, 1922,
	1924, 1777, 2014, 94, 1780, 1781, 2620, 93, 100, 2642,
	1189, 1334, 2129, 593, 1876, 1877, 1878, 1879, 2392, 593,
	1476, 2129, 2911, 1476, 1205, 1476, 1861, 2029, 1862, 2620,
	2583, 1948, 2153, 1189, 780, 2994, 1334, 1794, 2708, 2908,
	1776, 1805, 2581, 1334, 1844, 1949, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1214, 1213, 1215, 1216, 2581, 1186, 1938,
	1187, 1188, 1334, 1828, 1808, 1892, 593, 1871, 593, 1872,
	1873, 1874, 1875, 1865, 593, 593, 1898, 2029, 1826, 1186,
	2460, 1187, 1188, 2845, 1334, 1882, 1883, 1884, 1885, 1849,
	814, 1848, 2365, 814, 2205, 2129, 2833, 1850, 1864, 1863,
	2708, 1334, 1186, 2029, 1187, 1188, 2064, 101, 2129, 2706,
	1935, 2048, 186, 1189, 2047, 1728, 2579, 1949, 100, 186,
	99, 1949, 1334, 1908, 2625, 1334, 186, 186, 1932, 94,
	186, 1821, 186, 1185, 1334, 2064, 1334, 2462, 2461, 186,
	1893, 1338, 1186, 1785, 1187, 1188, 186, 1888, 1889, 1632,
	1943, 1907, 1911, 1946, 1575, 1947, 1919, 2458, 2459, 1189,
	2458, 2457, 2176, 1963, 1366, 1186, 1189, 1187, 1188, 2153,
	1334, 1189, 186, 1015, 998, 1893, 1016, 593, 1942, 1945,
	1941, 2029, 1334, 2530, 2014, 2261, 1473, 2950, 1334, 1435,
	2243, 997, 2031, 2484, 1965, 2152, 2570, 2236, 2237, 1189,
	1967, 1968, 1964, 1720, 1709, 1710, 1711, 1712, 1722, 1713,
	1714, 1715, 1727, 1723, 1716, 1717, 1724, 1725, 1726, 1718,
	1719, 1721, 2176, 2129, 2128, 2177, 770, 2005, 2006, 1435,
	1434, 87, 2008, 1205, 2210, 2179, 1201, 2856, 1202, 1189,
	1973, 2009, 2569, 1189, 1205, 1186, 2027, 1187, 1188, 2088,
	2153, 1654, 1203, 1204, 1200, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1214, 1213, 1215, 1216, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1214, 1213, 1215, 1216, 1380, 1379, 1341,
	2823, 1998, 2087, 2782, 2689, 2177, 2024, 2686, 2026, 2667,
	2673, 1186, 2573, 1187, 1188, 2014, 1189, 2572, 1186, 1437,
	1187, 1188, 2025, 1186, 87, 1187, 1188, 1508, 1891, 2526,
	1189, 2486, 2482, 2244, 1189, 1887, 1881, 1880, 1189, 1561,
	1468, 1087, 2086, 1464, 1189, 2857, 2085, 1433, 113, 679,
	1906, 1186, 2209, 1187, 1188, 1798, 186, 1622, 2677, 2012,
	1189, 2674, 2675, 2676, 186, 3029, 1189, 2632, 2633, 593,
	2113, 3027, 3000, 3010, 2932, 593, 1655, 2100, 1509, 1510,
	1511, 1683, 2875, 2023, 2635, 1681, 593, 187, 1504, 187,
	2478, 1186, 187, 1187, 1188, 1186, 2477, 1187, 1188, 2084,
	2210, 2476, 2111, 2638, 2117, 2678, 2679, 2680, 2392, 2223,
	186, 592, 1999, 2083, 186, 2637, 2411, 2082, 2410, 1623,
	2041, 2081, 594, 37, 594, 594, 2968, 2080, 2149, 2186,
	1812, 2039, 2169, 2414, 1342, 1505, 1506, 1507, 2415, 594,
	594, 2412, 1189, 2074, 1804, 2626, 2413, 1189, 1186, 2073,
	1187, 1188, 1189, 2416, 2130, 2162, 2163, 2057, 812, 2370,
	1189, 968, 1186, 975, 1187, 1188, 1186, 2369, 1187, 1188,
	1186, 2890, 1187, 1188, 2613, 2761, 1186, 593, 1187, 1188,
	1189, 2763, 2612, 186, 1776, 2616, 2379, 2456, 2126, 784,
	186, 2752, 1186, 2751, 1187, 1188, 2139, 785, 1186, 1574,
	1187, 1188, 756, 2194, 593, 1308, 2101, 1775, 2091, 2092,
	2214, 593, 1049, 2197, 2199, 1476, 1476, 2382, 2384, 1695,
	593, 1048, 2544, 2122, 2209, 2072, 2385, 2190, 2127, 2168,
	2069, 2289, 1157, 1696, 92, 2068, 2250, 2258, 2142, 2235,
	1189, 2750, 2174, 2067, 121, 93, 2257, 2618, 186, 186,
	186, 186, 186, 2158, 2161, 2162, 2163, 2159, 1898, 2160,
	2164, 2178, 94, 2065, 3038, 2181, 1823, 1824, 2474, 186,
	186, 2002, 2907, 2188, 1186, 2191, 1187, 1188, 2852, 1186,
	2455, 1187, 1188, 1189, 1186, 186, 1187, 1188, 2166, 92,
	99, 2202, 1186, 1809, 1187, 1188, 94, 101, 792, 793,
	93, 187, 2598, 2368, 593, 594, 594, 2211, 100, 1991,
	99, 2367, 1186, 101, 1187, 1188, 1990, 2219, 1989, 94,
	2220, 187, 2018, 2061, 100, 2256, 99, 1456, 2224, 2225,
	2226, 2158, 2161, 2162, 2163, 2159, 2882, 2160, 2164, 2881,
	594, 2632, 2633, 2769, 187, 2245, 2246, 2767, 2766, 594,
	2759, 766, 2687, 2617, 1683, 594, 1683, 2319, 1681, 1683,
	1681, 2615, 2487, 1681, 1683, 593, 2060, 1933, 1681, 2255,
	2315, 1451, 1186, 791, 1187, 1188, 100, 2758, 2606, 101,
	2212, 593, 2340, 2145, 2340, 2215, 2216, 2340, 2278, 2359,
	100, 2298, 2340, 3031, 3030, 3030, 186, 2281, 2125, 2329,
	593, 2049, 2297, 1796, 2352, 2353, 2354, 2355, 2345, 2287,
	2342, 1360, 2288, 2346, 593, 1186, 1351, 1187, 1188, 106,
	107, 593, 593, 3031, 186, 186, 186, 186, 186, 2896,
	2316, 2653, 2299, 782, 103, 88, 186, 1, 2359, 1332,
	1328, 186, 2657, 772, 186, 2983, 186, 561, 2404, 186,
	186, 186, 1786, 1306, 1329, 3011, 2979, 2980, 2333, 1547,
	2395, 2424, 2398, 1321, 2169, 2395, 1537, 2719, 1744, 2853,
	2372, 2373, 2347, 2348, 2349, 2350, 2351, 2490, 1939, 1802,
	1803, 1331, 2685, 1330, 1896, 2470, 2358, 1006, 146, 1859,
	1860, 2360, 2963, 110, 186, 964, 109, 2389, 1009, 1115,
	1934, 2709, 2195, 1868, 1386, 1384, 2364, 593, 2374, 187,
	2371, 1385, 1383, 2386, 2387, 593, 1388, 1387, 2050, 2584,
	186, 2426, 1626, 590, 2427, 2165, 184, 1375, 774, 2405,
	1352, 1050, 2408, 186, 551, 2406, 2407, 2463, 2409, 95,
	773, 2417, 2361, 2362, 2363, 1971, 594, 2403, 2428, 557,
	2510, 186, 2489, 1229, 186, 1621, 2434, 2366, 2182, 811,
	2421, 2422, 804, 1797, 2545, 594, 594, 2115, 594, 2400,
	594, 594, 2465, 594, 594, 594, 594, 594, 594, 2464,
	2466, 2610, 1585, 2378, 2380, 2132, 2383, 2376, 2889, 2760,
	594, 2518, 2948, 2517, 187, 2192, 1348, 2040, 1697, 1838,
	1647, 615, 614, 612, 2488, 1898, 2118, 2509, 1332, 1328,
	2146, 187, 1192, 699, 2105, 1361, 2521, 2157, 2155, 2154,
	2000, 1845, 2634, 1329, 594, 2630, 187, 2578, 812, 2975,
	812, 812, 1840, 1836, 2124, 623, 593, 186, 2537, 616,
	594, 2540, 187, 2542, 2543, 1160, 1162, 2539, 1325, 1326,
	1331, 608, 1330, 2650, 2516, 2264, 2527, 2266, 187, 2548,
	2193, 2554, 2523, 1170, 1324, 187, 602, 977, 1694, 2858,
	2547, 2913, 2017, 1333, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 594, 2566, 1323, 1707, 1708, 2920, 2498,
	2467, 2468, 2703, 2479, 2241, 1926, 186, 594, 594, 63,
	41, 1735, 2551, 2552, 597, 2553, 2996, 1161, 2555, 798,
	2557, 32, 2559, 31, 2656, 187, 30, 29, 2604, 2599,
	2600, 28, 23, 22, 21, 186, 20, 19, 2607, 25,
	2614, 18, 17, 16, 2501, 3006, 3037, 115, 50, 47,
	45, 123, 2619, 122, 186, 48, 44, 186, 186, 186,
	1090, 2629, 42, 27, 1300, 2639, 26, 593, 593, 2636,
	2643, 594, 15, 14, 13, 12, 11, 10, 9, 5,
	4, 2644, 35, 2645, 2646, 594, 34, 33, 2518, 1164,
	2517, 24, 2651, 2652, 2, 2228, 1928, 0, 0, 0,
	594, 594, 2692, 2693, 0, 0, 0, 0, 2668, 0,
	2670, 593, 593, 593, 593, 0, 0, 0, 0, 0,
	0, 1312, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 187, 0, 812, 0, 0, 594, 2715,
	0, 1376, 0, 0, 1683, 0, 1683, 0, 1681, 0,
	1681, 0, 186, 2713, 2714, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 594, 0, 0, 0, 2755,
	0, 0, 2340, 2727, 2340, 187, 593, 2726, 593, 594,
	0, 0, 0, 0, 187, 0, 187, 0, 187, 187,
	594, 0, 0, 594, 0, 2739, 2784, 37, 2738, 2730,
	0, 0, 2776, 2748, 594, 0, 0, 1683, 0, 2662,
	2663, 1681, 0, 2395, 0, 2756, 2398, 2778, 0, 2764,
	2398, 766, 2765, 0, 0, 2774, 2772, 2780, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 593, 0, 0, 594,
	0, 2696, 2788, 0, 0, 2700, 2701, 2702, 0, 593,
	2785, 2786, 0, 0, 0, 2831, 0, 0, 0, 0,
	0, 0, 0, 0, 2829, 182, 594, 0, 0, 2835,
	2828, 2843, 594, 2855, 2872, 2873, 0, 0, 2827, 0,
	593, 2876, 0, 2848, 593, 593, 0, 2847, 0, 121,
	0, 0, 1683, 0, 0, 0, 1681, 0, 0, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 593, 0, 0, 0, 0, 0, 594,
	0, 594, 0, 0, 0, 1300, 2886, 594, 594, 2883,
	2884, 1484, 1484, 0, 1484, 2885, 1484, 1484, 2888, 1493,
	1484, 1484, 1484, 1484, 1484, 2189, 2897, 0, 2900, 2398,
	0, 0, 1300, 0, 593, 1300, 968, 766, 0, 0,
	161, 0, 162, 2903, 0, 187, 0, 0, 0, 186,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 187,
	187, 0, 181, 187, 0, 187, 0, 593, 186, 2905,
	1560, 0, 187, 2899, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 2919, 37, 1582, 2916, 2912, 0,
	2921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2924, 0, 0, 187, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 2838, 2839,
	2840, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 2941, 593, 593, 0, 0, 0, 0, 0,
	37, 0, 0, 812, 812, 2949, 593, 0, 0, 2395,
	0, 0, 2951, 0, 0, 186, 593, 2855, 2964, 2962,
	2954, 2959, 2971, 2956, 2955, 2953, 0, 2958, 2957, 0,
	0, 165, 2974, 0, 0, 0, 2992, 0, 2982, 2987,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2999, 0, 0, 2946, 0, 0, 0,
	0, 3005, 0, 0, 0, 593, 0, 1677, 0, 0,
	0, 0, 0, 0, 593, 0, 0, 0, 0, 0,
	3025, 1690, 3020, 0, 0, 3022, 3024, 3026, 1300, 3028,
	0, 1683, 0, 182, 0, 1681, 1705, 1706, 0, 0,
	3018, 0, 0, 3039, 0, 0, 0, 0, 3045, 0,
	3047, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 3053, 0, 3055, 3056, 2873, 3054, 187,
	164, 0, 0, 812, 1683, 0, 0, 187, 1681, 0,
	0, 0, 594, 0, 0, 0, 0, 0, 594, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 594,
	0, 0, 0, 0, 1799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 187, 161, 0,
	162, 1811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 0, 812, 0,
	181, 0, 0, 0, 0, 0, 812, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 1337, 0,
	594, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 594, 975, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 975, 165,
	0, 187, 187, 187, 187, 187, 0, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 187, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 968, 0, 1677, 0, 0,
	0, 0, 0, 1677, 1677, 0, 0, 594, 0, 158,
	163, 160, 166, 167, 168, 170, 172, 173, 174, 175,
	0, 0, 0, 0, 0, 176, 178, 179, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 594, 0, 0, 2011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 594, 594, 0, 187, 187, 187,
	187, 187, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 187, 0, 0, 187, 0, 187,
	0, 0, 187, 187, 187, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 594, 157,
	0, 0, 0, 187, 153, 0, 169, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 162, 187, 0, 0, 187, 0, 0,
	0, 0, 812, 0, 0, 0, 0, 0, 177, 1459,
	1460, 152, 151, 181, 0, 0, 0, 0, 1811, 0,
	0, 0, 0, 0, 2119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2134, 0, 158, 163, 160,
	166, 167, 168, 170, 172, 173, 174, 175, 0, 0,
	0, 0, 0, 176, 178, 179, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	187, 0, 0, 0, 1701, 0, 0, 0, 1702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 1461, 154, 0, 1458, 0, 148, 149, 0, 0,
	0, 0, 165, 0, 0, 0, 2217, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 1335, 1784, 0,
	0, 0, 0, 1811, 0, 0, 0, 0, 0, 0,
	2242, 0, 0, 0, 0, 0, 0, 0, 187, 2247,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1807, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	187, 187, 187, 0, 0, 0, 0, 0, 0, 0,
	594, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 547, 0, 0, 588, 0, 0,
	0, 0, 0, 0, 547, 0, 0, 0, 0, 0,
	0, 0, 547, 0, 594, 594, 594, 594, 156, 0,
	0, 0, 0, 1677, 0, 0, 0, 779, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 797, 0, 797, 0, 0, 0, 0,
	0, 0, 1910, 547, 0, 0, 0, 0, 0, 1300,
	0, 1300, 0, 0, 1300, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 2375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 145, 812, 0, 0, 0, 1300, 0, 0,
	2402, 1484, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 1403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 1300,
	0, 0, 0, 594, 1811, 0, 0, 594, 594, 0,
	158, 163, 160, 166, 167, 168, 170, 172, 173, 174,
	175, 0, 0, 0, 0, 0, 176, 178, 179, 180,
	0, 0, 0, 0, 0, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1391, 0, 0, 0, 0, 0, 0, 2030,
	0, 0, 0, 2034, 0, 2035, 2036, 594, 0, 0,
	0, 0, 0, 0, 2044, 0, 0, 2045, 2046, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 187, 0, 0, 2052, 2053, 2054, 2055, 2056, 0,
	2058, 0, 0, 0, 0, 2375, 2062, 0, 2063, 0,
	0, 0, 2066, 0, 0, 0, 0, 0, 0, 0,
	2075, 2076, 2077, 2078, 1404, 0, 0, 0, 0, 0,
	0, 0, 594, 2089, 2090, 0, 0, 0, 0, 0,
	0, 2095, 2096, 2097, 2098, 2099, 0, 1807, 0, 0,
	0, 0, 0, 0, 0, 0, 594, 594, 2112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 594,
	0, 0, 1417, 1420, 1421, 1422, 1423, 1424, 1425, 0,
	1426, 1427, 1428, 1429, 1430, 1405, 1406, 1407, 1408, 1389,
	1390, 1418, 0, 1392, 0, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 0, 0, 1402, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 0, 1811, 1811, 594, 0,
	0, 0, 0, 0, 547, 0, 547, 594, 0, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3004, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 1403, 0, 0, 0, 0, 0, 1455, 0,
	2720, 2721, 2722, 2723, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 1300, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 162, 0, 0, 0, 0, 0,
	1300, 0, 0, 796, 0, 2777, 0, 2779, 0, 0,
	1459, 1460, 152, 151, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 0, 0, 1391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1811,
	0, 606, 0, 0, 2341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2846, 0, 0, 547, 0,
	0, 0, 0, 0, 0, 2356, 2357, 0, 812, 0,
	0, 0, 0, 790, 0, 0, 0, 0, 779, 0,
	0, 147, 1461, 154, 0, 1458, 0, 148, 149, 0,
	0, 0, 0, 165, 0, 1404, 0, 0, 0, 2879,
	0, 547, 171, 2879, 2879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2401, 0, 0, 0, 0, 0,
	0, 0, 1811, 0, 0, 0, 0, 0, 0, 0,
	0, 2419, 2420, 706, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1420, 1421, 1422, 1423, 1424, 1425,
	0, 1426, 1427, 1428, 1429, 1430, 1405, 1406, 1407, 1408,
	1389, 1390, 1418, 1811, 1392, 0, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 0, 0, 1402, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1811, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 769, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 0, 1300, 0, 2942, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 2546, 0,
	0, 0, 812, 812, 0, 2550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2972, 0, 0, 0, 2560,
	2561, 2563, 2565, 0, 0, 2977, 0, 150, 0, 2571,
	0, 0, 0, 0, 2575, 2576, 2577, 0, 1419, 0,
	0, 2580, 0, 0, 0, 0, 1301, 2582, 0, 0,
	2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595,
	144, 0, 2596, 145, 0, 0, 0, 0, 2601, 0,
	0, 0, 0, 1301, 1811, 0, 1301, 0, 0, 0,
	0, 547, 0, 2977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 1534, 0,
	169, 0, 0, 2623, 2624, 0, 0, 2628, 0, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2640, 2641, 0, 0, 1584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 547, 0, 0, 0, 0,
	0, 0, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 1607, 1608, 547, 547, 547, 547, 547, 547, 547,
	0, 158, 163, 160, 166, 167, 168, 170, 172, 173,
	174, 175, 0, 0, 0, 0, 0, 176, 178, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2707, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 797, 0, 0, 0,
	0, 0, 0, 797, 797, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 2736, 1309,
	0, 0, 2737, 0, 0, 0, 0, 0, 2741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1190, 0, 797, 1584, 797, 797, 797, 797, 797,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 1237,
	1534, 0, 0, 596, 0, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 797, 2790, 2792, 2791, 2801,
	2802, 2803, 2804, 2805, 2806, 2807, 645, 0, 0, 779,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 547, 0, 0, 0, 0, 0, 0, 1584,
	0, 547, 972, 547, 0, 547, 1847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2844, 0, 0,
	606, 0, 0, 0, 0, 0, 2851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2861, 2862, 2863, 0, 2864, 2865, 0, 0,
	0, 0, 2868, 0, 2869, 0, 2871, 2874, 0, 0,
	0, 0, 1150, 2878, 1150, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2904, 0, 0, 0, 1350, 0, 0, 769, 1225,
	1226, 1227, 0, 1230, 0, 1232, 1233, 1234, 1235, 0,
	1238, 1240, 1240, 0, 1240, 1244, 1244, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 0, 1284, 1285, 1286, 1287, 1288,
	0, 0, 2926, 0, 1244, 1244, 1244, 1244, 1244, 0,
	0, 0, 0, 0, 0, 0, 2931, 0, 0, 0,
	0, 2936, 0, 0, 0, 0, 0, 2937, 2938, 0,
	0, 0, 547, 0, 0, 0, 2796, 2797, 0, 547,
	0, 0, 0, 0, 0, 2944, 547, 547, 0, 0,
	547, 0, 2003, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 0, 0, 0, 547, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 769,
	0, 0, 2114, 769, 0, 707, 708, 0, 0, 769,
	0, 1682, 547, 0, 0, 0, 2995, 690, 0, 640,
	694, 642, 691, 692, 0, 638, 641, 693, 0, 0,
	0, 0, 0, 0, 0, 3001, 0, 0, 0, 3002,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 643, 644, 2789, 2793, 2794, 2795,
	2798, 2799, 2800, 2808, 2810, 668, 2809, 2811, 2812, 2813,
	2816, 2817, 2818, 2819, 2814, 2815, 2820, 0, 0, 0,
	0, 0, 0, 0, 0, 797, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 797, 797, 0, 0, 1587, 0, 0, 0,
	0, 0, 0, 1584, 0, 0, 547, 0, 0, 0,
	0, 0, 0, 1091, 1534, 1097, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	547, 0, 0, 0, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1642,
	1643, 1644, 1645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1687, 1688, 0, 0, 0, 0, 0, 0, 1693, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	2227, 0, 0, 1729, 1730, 1731, 1732, 1733, 1734, 1736,
	1740, 1741, 606, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 547, 547,
	547, 547, 547, 1150, 606, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 143, 0, 0, 1150, 1150, 547,
	547, 0, 0, 0, 0, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 0, 0, 0, 0,
	1819, 1820, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 0, 0, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 1856, 0,
	1363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 162, 0, 0, 0, 0,
	1301, 0, 1301, 0, 0, 1301, 0, 0, 0, 0,
	1301, 130, 131, 152, 151, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1301, 0,
	0, 0, 0, 1301, 547, 547, 547, 547, 547, 0,
	0, 0, 0, 0, 0, 0, 2418, 0, 0, 0,
	0, 547, 0, 0, 1534, 0, 547, 0, 0, 547,
	2429, 1584, 147, 128, 154, 135, 127, 0, 148, 149,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 136, 0, 0, 0, 1839, 0,
	0, 0, 0, 0, 0, 1381, 0, 0, 139, 137,
	132, 133, 134, 138, 547, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	1301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	78, 39, 40, 80, 0, 0, 0, 0, 0, 976,
	0, 547, 0, 0, 547, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 43, 69, 70, 0, 67, 71,
	1518, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1562, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 0, 0, 547, 0, 0,
	0, 1598, 0, 2043, 0, 0, 0, 0, 0, 0,
	0, 0, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1635, 0, 0, 0, 0, 547, 0, 0, 0,
	0, 144, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 547, 0, 0, 547, 547, 547,
	0, 0, 46, 49, 52, 51, 54, 0, 66, 0,
	2019, 75, 72, 0, 0, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 55, 83, 82, 0, 0, 64,
	65, 53, 0, 0, 0, 0, 0, 73, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 163, 160, 166, 167, 168, 170, 172,
	173, 174, 175, 0, 0, 0, 0, 0, 176, 178,
	179, 180, 0, 0, 0, 0, 0, 57, 58, 0,
	59, 60, 61, 62, 0, 0, 0, 0, 0, 0,
	1301, 0, 1301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1825, 1534, 0, 0, 0, 0, 0, 0, 0,
	1829, 0, 1832, 0, 0, 1635, 0, 0, 2093, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2150, 2151, 0, 0, 0, 0,
	0, 0, 0, 2170, 0, 2171, 2172, 0, 0, 0,
	0, 0, 0, 2294, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 1534, 0, 0, 0, 0, 0, 0,
	0, 2317, 2318, 0, 0, 0, 2321, 0, 0, 0,
	0, 2323, 2324, 2325, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 2330, 2331, 2332, 0, 0, 1747, 2334,
	0, 2335, 2336, 0, 0, 0, 2343, 2344, 0, 0,
	0, 0, 0, 0, 1747, 1747, 1747, 1747, 1747, 606,
	606, 606, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1635, 0, 0, 0, 0, 0, 0, 1982, 2390,
	0, 0, 0, 0, 0, 1996, 1997, 0, 0, 2001,
	0, 0, 0, 0, 0, 0, 0, 0, 2004, 1534,
	0, 0, 0, 0, 0, 2007, 2423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 0, 0, 2485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 1534, 700, 707, 708, 709,
	710, 711, 701, 703, 0, 0, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1839,
	705, 712, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2399, 0, 79, 0, 2568, 1839, 1839, 1839,
	1839, 1839, 0, 2574, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2170, 769, 2519, 2520, 0, 1839,
	707, 708, 1839, 0, 0, 0, 1682, 0, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	0, 0, 0, 606, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2507, 0, 0, 0, 0,
	0, 0, 0, 2173, 0, 2515, 0, 0, 0, 0,
	0, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 0, 2549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2688, 0, 0, 0,
	0, 0, 2221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2269, 2270, 2271,
	2272, 2273, 0, 0, 0, 0, 2728, 0, 2729, 0,
	0, 0, 0, 2732, 2733, 0, 0, 0, 1635, 2282,
	0, 0, 0, 0, 0, 0, 0, 2740, 0, 0,
	690, 0, 0, 694, 2290, 691, 692, 87, 0, 1839,
	693, 0, 0, 700, 707, 708, 709, 710, 711, 701,
	703, 0, 2649, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2773, 0, 705, 712, 713,
	0, 0, 0, 0, 0, 0, 2781, 0, 0, 2783,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2824, 0, 2519, 2520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2887, 606, 0, 0, 0, 0, 0, 0,
	0, 2749, 0, 2753, 2754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2399, 0, 79, 0,
	2399, 0, 0, 2475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 2522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2538, 0, 0, 2541, 0, 0, 0, 0, 0, 2836,
	0, 0, 0, 0, 2930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2603, 0, 0, 2399,
	0, 0, 0, 0, 2993, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 2666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2681, 0, 0, 2682, 2683, 2684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2945, 0, 0, 0,
	0, 79, 0, 362, 0, 0, 946, 931, 464, 0,
	877, 949, 846, 865, 959, 868, 871, 913, 825, 891,
	380, 862, 817, 850, 820, 857, 821, 848, 879, 251,
	845, 933, 895, 948, 335, 248, 827, 851, 394, 867,
	197, 915, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 955, 339, 901, 0,
	448, 365, 0, 0, 0, 881, 937, 889, 927, 876,
	914, 835, 900, 950, 863, 910, 951, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 2965, 0, 2966, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 859, 907, 945, 860, 909, 246,
	294, 253, 245, 468, 956, 936, 824, 888, 944, 0,
	0, 215, 947, 883, 0, 912, 0, 962, 819, 903,
	0, 822, 826, 958, 940, 854, 256, 0, 0, 0,
	0, 0, 0, 0, 880, 890, 924, 874, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 899, 0, 0,
	0, 831, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 834,
	0, 853, 925, 0, 816, 277, 828, 366, 238, 0,
	929, 939, 875, 504, 943, 873, 872, 919, 832, 935,
	866, 334, 830, 303, 192, 211, 0, 864, 376, 419,
	425, 934, 849, 858, 236, 856, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 898, 917, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 1152, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 2925, 199, 0,
	450, 492, 523, 220, 221, 223, 844, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 930,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 922, 961,
	389, 424, 226, 489, 447, 839, 843, 837, 904, 838,
	893, 894, 840, 952, 953, 954, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 926, 833, 0, 841, 842,
	0, 932, 941, 942, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 897, 191, 207, 337, 957,
	412, 269, 520, 498, 494, 818, 209, 836, 243, 847,
	855, 0, 861, 869, 870, 882, 884, 885, 886, 887,
	905, 906, 908, 916, 918, 921, 923, 928, 938, 960,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 896, 902,
	348, 262, 282, 293, 911, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 892, 920, 344, 465, 466, 289,
	362, 0, 0, 946, 931, 464, 0, 877, 949, 846,
	865, 959, 868, 871, 913, 825, 891, 380, 862, 817,
	850, 820, 857, 821, 848, 879, 251, 845, 933, 895,
	948, 335, 248, 827, 851, 394, 867, 197, 915, 438,
	235, 345, 342, 471, 263, 254, 250, 234, 290, 352,
	392, 458, 386, 955, 339, 901, 0, 448, 365, 0,
	0, 0, 881, 937, 889, 927, 876, 914, 835, 900,
	950, 863, 910, 951, 296, 233, 298, 196, 377, 449,
	267, 0, 0, 0, 0, 188, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	231, 320, 329, 328, 309, 310, 312, 314, 319, 326,
	332, 859, 907, 945, 860, 909, 246, 294, 253, 245,
	468, 956, 936, 824, 888, 944, 0, 0, 215, 947,
	883, 0, 912, 0, 962, 819, 903, 0, 822, 826,
	958, 940, 854, 256, 0, 0, 0, 0, 0, 0,
	0, 880, 890, 924, 874, 0, 0, 0, 0, 0,
	2430, 0, 852, 0, 899, 0, 0, 0, 831, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 834, 0, 853, 925,
	0, 816, 277, 828, 366, 238, 0, 929, 939, 875,
	504, 943, 873, 872, 919, 832, 935, 866, 334, 830,
	303, 192, 211, 0, 864, 376, 419, 425, 934, 849,
	858, 236, 856, 423, 390, 487, 219, 265, 416, 396,
	421, 403, 268, 898, 917, 422, 340, 473, 410, 484,
	505, 506, 244, 370, 495, 462, 501, 519, 212, 241,
	384, 455, 490, 445, 363, 469, 470, 302, 444, 275,
	195, 338, 511, 210, 431, 228, 217, 475, 493, 270,
	414, 202, 457, 482, 225, 435, 0, 0, 521, 204,
	480, 454, 359, 299, 300, 203, 0, 415, 249, 273,
	239, 379, 477, 478, 237, 522, 214, 500, 206, 1152,
	499, 372, 472, 481, 360, 350, 205, 479, 358, 349,
	305, 324, 325, 261, 284, 408, 343, 409, 285, 368,
	367, 369, 198, 491, 0, 199, 0, 450, 492, 523,
	220, 221, 223, 844, 260, 264, 272, 274, 280, 281,
	288, 336, 383, 407, 405, 411, 930, 467, 485, 496,
	503, 509, 510, 512, 513, 514, 515, 516, 518, 517,
	371, 287, 446, 304, 341, 922, 961, 389, 424, 226,
	489, 447, 839, 843, 837, 904, 838, 893, 894, 840,
	952, 953, 954, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 0, 926, 833, 0, 841, 842, 0, 932, 941,
	942, 542, 351, 437, 486, 306, 318, 321, 311, 330,
	0, 331, 307, 308, 313, 315, 316, 317, 322, 323,
	327, 333, 897, 191, 207, 337, 957, 412, 269, 520,
	498, 494, 818, 209, 836, 243, 847, 855, 0, 861,
	869, 870, 882, 884, 885, 886, 887, 905, 906, 908,
	916, 918, 921, 923, 928, 938, 960, 193, 194, 200,
	208, 218, 222, 229, 242, 257, 259, 266, 278, 283,
	286, 291, 292, 295, 301, 347, 353, 354, 355, 356,
	373, 374, 375, 378, 381, 382, 385, 387, 388, 391,
	395, 399, 400, 401, 402, 404, 406, 413, 418, 426,
	427, 428, 429, 430, 433, 434, 439, 440, 441, 442,
	443, 451, 452, 456, 474, 476, 488, 502, 507, 432,
	279, 483, 508, 0, 346, 896, 902, 348, 262, 282,
	293, 911, 497, 453, 213, 420, 271, 201, 232, 216,
	240, 255, 258, 297, 357, 364, 393, 398, 276, 252,
	230, 417, 227, 436, 459, 460, 461, 463, 361, 247,
	397, 892, 920, 344, 465, 466, 289, 362, 0, 0,
	946, 931, 464, 0, 877, 949, 846, 865, 959, 868,
	871, 913, 825, 891, 380, 862, 817, 850, 820, 857,
	821, 848, 879, 251, 845, 933, 895, 948, 335, 248,
	827, 851, 394, 867, 197, 915, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	955, 339, 901, 0, 448, 365, 0, 0, 0, 881,
	937, 889, 927, 876, 914, 835, 900, 950, 863, 910,
	951, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 859, 907,
	945, 860, 909, 246, 294, 253, 245, 468, 956, 936,
	824, 888, 944, 0, 0, 215, 947, 883, 0, 912,
	0, 962, 819, 903, 0, 822, 826, 958, 940, 854,
	256, 0, 0, 0, 0, 0, 0, 0, 880, 890,
	924, 874, 0, 0, 0, 0, 0, 2388, 0, 852,
	0, 899, 0, 0, 0, 831, 823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 834, 0, 853, 925, 0, 816, 277,
	828, 366, 238, 0, 929, 939, 875, 504, 943, 873,
	872, 919, 832, 935, 866, 334, 830, 303, 192, 211,
	0, 864, 376, 419, 425, 934, 849, 858, 236, 856,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	898, 917, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 1152, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	844, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 930, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 922, 961, 389, 424, 226, 489, 447, 839,
	843, 837, 904, 838, 893, 894, 840, 952, 953, 954,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 926,
	833, 0, 841, 842, 0, 932, 941, 942, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 897,
	191, 207, 337, 957, 412, 269, 520, 498, 494, 818,
	209, 836, 243, 847, 855, 0, 861, 869, 870, 882,
	884, 885, 886, 887, 905, 906, 908, 916, 918, 921,
	923, 928, 938, 960, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 896, 902, 348, 262, 282, 293, 911, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 892, 920,
	344, 465, 466, 289, 362, 0, 0, 946, 931, 464,
	0, 877, 949, 846, 865, 959, 868, 871, 913, 825,
	891, 380, 862, 817, 850, 820, 857, 821, 848, 879,
	251, 845, 933, 895, 948, 335, 248, 827, 851, 394,
	867, 197, 915, 438, 235, 345, 342, 471, 263, 254,
	250, 234, 290, 352, 392, 458, 386, 955, 339, 901,
	0, 448, 365, 0, 0, 0, 881, 937, 889, 927,
	876, 914, 835, 900, 950, 863, 910, 951, 296, 233,
	298, 196, 377, 449, 267, 0, 0, 0, 0, 188,
	189, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 231, 320, 329, 328, 309, 310,
	312, 314, 319, 326, 332, 859, 907, 945, 860, 909,
	246, 294, 253, 245, 468, 956, 936, 824, 888, 944,
	0, 0, 215, 947, 883, 0, 912, 0, 962, 819,
	903, 0, 822, 826, 958, 940, 854, 256, 0, 0,
	0, 0, 0, 0, 0, 880, 890, 924, 874, 0,
	0, 0, 0, 0, 1827, 0, 852, 0, 899, 0,
	0, 0, 831, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	834, 0, 853, 925, 0, 816, 277, 828, 366, 238,
	0, 929, 939, 875, 504, 943, 873, 872, 919, 832,
	935, 866, 334, 830, 303, 192, 211, 0, 864, 376,
	419, 425, 934, 849, 858, 236, 856, 423, 390, 487,
	219, 265, 416, 396, 421, 403, 268, 898, 917, 422,
	340, 473, 410, 484, 505, 506, 244, 370, 495, 462,
	501, 519, 212, 241, 384, 455, 490, 445, 363, 469,
	470, 302, 444, 275, 195, 338, 511, 210, 431, 228,
	217, 475, 493, 270, 414, 202, 457, 482, 225, 435,
	0, 0, 521, 204, 480, 454, 359, 299, 300, 203,
	0, 415, 249, 273, 239, 379, 477, 478, 237, 522,
	214, 500, 206, 1152, 499, 372, 472, 481, 360, 350,
	205, 479, 358, 349, 305, 324, 325, 261, 284, 408,
	343, 409, 285, 368, 367, 369, 198, 491, 0, 199,
	0, 450, 492, 523, 220, 221, 223, 844, 260, 264,
	272, 274, 280, 281, 288, 336, 383, 407, 405, 411,
	930, 467, 485, 496, 503, 509, 510, 512, 513, 514,
	515, 516, 518, 517, 371, 287, 446, 304, 341, 922,
	961, 389, 424, 226, 489, 447, 839, 843, 837, 904,
	838, 893, 894, 840, 952, 953, 954, 524, 525, 526,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 0, 926, 833, 0, 841,
	842, 0, 932, 941, 942, 542, 351, 437, 486, 306,
	318, 321, 311, 330, 0, 331, 307, 308, 313, 315,
	316, 317, 322, 323, 327, 333, 897, 191, 207, 337,
	957, 412, 269, 520, 498, 494, 818, 209, 836, 243,
	847, 855, 0, 861, 869, 870, 882, 884, 885, 886,
	887, 905, 906, 908, 916, 918, 921, 923, 928, 938,
	960, 193, 194, 200, 208, 218, 222, 229, 242, 257,
	259, 266, 278, 283, 286, 291, 292, 295, 301, 347,
	353, 354, 355, 356, 373, 374, 375, 378, 381, 382,
	385, 387, 388, 391, 395, 399, 400, 401, 402, 404,
	406, 413, 418, 426, 427, 428, 429, 430, 433, 434,
	439, 440, 441, 442, 443, 451, 452, 456, 474, 476,
	488, 502, 507, 432, 279, 483, 508, 0, 346, 896,
	902, 348, 262, 282, 293, 911, 497, 453, 213, 420,
	271, 201, 232, 216, 240, 255, 258, 297, 357, 364,
	393, 398, 276, 252, 230, 417, 227, 436, 459, 460,
	461, 463, 361, 247, 397, 892, 920, 344, 465, 466,
	289, 362, 0, 0, 946, 931, 464, 0, 877, 949,
	846, 865, 959, 868, 871, 913, 825, 891, 380, 862,
	817, 850, 820, 857, 821, 848, 879, 251, 845, 933,
	895, 948, 335, 248, 827, 851, 394, 867, 197, 915,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 955, 339, 901, 0, 448, 365,
	0, 0, 0, 881, 937, 889, 927, 876, 914, 835,
	900, 950, 863, 910, 951, 296, 233, 298, 196, 377,
	449, 267, 0, 87, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 859, 907, 945, 860, 909, 246, 294, 253,
	245, 468, 956, 936, 824, 888, 944, 0, 0, 215,
	947, 883, 0, 912, 0, 962, 819, 903, 0, 822,
	826, 958, 940, 854, 256, 0, 0, 0, 0, 0,
	0, 0, 880, 890, 924, 874, 0, 0, 0, 0,
	0, 0, 0, 852, 0, 899, 0, 0, 0, 831,
	823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 834, 0, 853,
	925, 0, 816, 277, 828, 366, 238, 0, 929, 939,
	875, 504, 943, 873, 872, 919, 832, 935, 866, 334,
	830, 303, 192, 211, 0, 864, 376, 419, 425, 934,
	849, 858, 236, 856, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 898, 917, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	1152, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 844, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 930, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 922, 961, 389, 424,
	226, 489, 447, 839, 843, 837, 904, 838, 893, 894,
	840, 952, 953, 954, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 926, 833, 0, 841, 842, 0, 932,
	941, 942, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 897, 191, 207, 337, 957, 412, 269,
	520, 498, 494, 818, 209, 836, 243, 847, 855, 0,
	861, 869, 870, 882, 884, 885, 886, 887, 905, 906,
	908, 916, 918, 921, 923, 928, 938, 960, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 896, 902, 348, 262,
	282, 293, 911, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 892, 920, 344, 465, 466, 289, 362, 0,
	0, 946, 931, 464, 0, 877, 949, 846, 865, 959,
	868, 871, 913, 825, 891, 380, 862, 817, 850, 820,
	857, 821, 848, 879, 251, 845, 933, 895, 948, 335,
	248, 827, 851, 394, 867, 197, 915, 438, 235, 345,
	342, 471, 263, 254, 250, 234, 290, 352, 392, 458,
	386, 955, 339, 901, 0, 448, 365, 0, 0, 0,
	881, 937, 889, 927, 876, 914, 835, 900, 950, 863,
	910, 951, 296, 233, 298, 196, 377, 449, 267, 0,
	0, 0, 0, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 231, 320,
	329, 328, 309, 310, 312, 314, 319, 326, 332, 859,
	907, 945, 860, 909, 246, 294, 253, 245, 468, 956,
	936, 824, 888, 944, 0, 0, 215, 947, 883, 0,
	912, 0, 962, 819, 903, 0, 822, 826, 958, 940,
	854, 256, 0, 0, 0, 0, 0, 0, 0, 880,
	890, 924, 874, 0, 0, 0, 0, 0, 0, 0,
	852, 0, 899, 0, 0, 0, 831, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 834, 0, 853, 925, 0, 816,
	277, 828, 366, 238, 0, 929, 939, 875, 504, 943,
	873, 872, 919, 832, 935, 866, 334, 830, 303, 192,
	211, 0, 864, 376, 419, 425, 934, 849, 858, 236,
	856, 423, 390, 487, 219, 265, 416, 396, 421, 403,
	268, 898, 917, 422, 340, 473, 410, 484, 505, 506,
	244, 370, 495, 462, 501, 519, 212, 241, 384, 455,
	490, 445, 363, 469, 470, 302, 444, 275, 195, 338,
	511, 210, 431, 228, 217, 475, 493, 270, 414, 202,
	457, 482, 225, 435, 0, 0, 521, 204, 480, 454,
	359, 299, 300, 203, 0, 415, 249, 273, 239, 379,
	477, 478, 237, 522, 214, 500, 206, 1152, 499, 372,
	472, 481, 360, 350, 205, 479, 358, 349, 305, 324,
	325, 261, 284, 408, 343, 409, 285, 368, 367, 369,
	198, 491, 0, 199, 0, 450, 492, 523, 220, 221,
	223, 844, 260, 264, 272, 274, 280, 281, 288, 336,
	383, 407, 405, 411, 930, 467, 485, 496, 503, 509,
	510, 512, 513, 514, 515, 516, 518, 517, 371, 287,
	446, 304, 341, 922, 961, 389, 424, 226, 489, 447,
	839, 843, 837, 904, 838, 893, 894, 840, 952, 953,
	954, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 0,
	926, 833, 0, 841, 842, 0, 932, 941, 942, 542,
	351, 437, 486, 306, 318, 321, 311, 330, 0, 331,
	307, 308, 313, 315, 316, 317, 322, 323, 327, 333,
	897, 191, 207, 337, 957, 412, 269, 520, 498, 494,
	818, 209, 836, 243, 847, 855, 0, 861, 869, 870,
	882, 884, 885, 886, 887, 905, 906, 908, 916, 918,
	921, 923, 928, 938, 960, 193, 194, 200, 208, 218,
	222, 229, 242, 257, 259, 266, 278, 283, 286, 291,
	292, 295, 301, 347, 353, 354, 355, 356, 373, 374,
	375, 378, 381, 382, 385, 387, 388, 391, 395, 399,
	400, 401, 402, 404, 406, 413, 418, 426, 427, 428,
	429, 430, 433, 434, 439, 440, 441, 442, 443, 451,
	452, 456, 474, 476, 488, 502, 507, 432, 279, 483,
	508, 0, 346, 896, 902, 348, 262, 282, 293, 911,
	497, 453, 213, 420, 271, 201, 232, 216, 240, 255,
	258, 297, 357, 364, 393, 398, 276, 252, 230, 417,
	227, 436, 459, 460, 461, 463, 361, 247, 397, 892,
	920, 344, 465, 466, 289, 362, 0, 0, 946, 931,
	464, 0, 877, 949, 846, 865, 959, 868, 871, 913,
	825, 891, 380, 862, 817, 850, 820, 857, 821, 848,
	879, 251, 845, 933, 895, 948, 335, 248, 827, 851,
	394, 867, 197, 915, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 955, 339,
	901, 0, 448, 365, 0, 0, 0, 881, 937, 889,
	927, 876, 914, 835, 900, 950, 863, 910, 951, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 859, 907, 945, 860,
	909, 246, 294, 253, 245, 468, 956, 936, 824, 888,
	944, 0, 0, 963, 947, 883, 0, 912, 0, 962,
	819, 903, 0, 822, 826, 958, 940, 854, 256, 0,
	0, 0, 0, 0, 0, 0, 880, 890, 924, 874,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 899,
	0, 0, 0, 831, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 834, 0, 853, 925, 0, 816, 277, 828, 366,
	238, 0, 929, 939, 875, 504, 943, 873, 872, 919,
	832, 935, 866, 334, 830, 303, 192, 211, 0, 864,
	376, 419, 425, 934, 849, 858, 236, 856, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 898, 917,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 829, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 844, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 930, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 815, 809, 808, 304, 341,
	922, 961, 389, 424, 226, 489, 447, 839, 843, 837,
	904, 838, 893, 894, 840, 952, 953, 954, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 926, 833, 0,
	841, 842, 0, 932, 941, 942, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 897, 191, 207,
	337, 957, 412, 269, 520, 498, 494, 818, 209, 836,
	243, 847, 855, 0, 861, 869, 870, 882, 884, 885,
	886, 887, 905, 906, 908, 916, 918, 921, 923, 928,
	938, 960, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	896, 902, 348, 262, 282, 293, 911, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 892, 920, 344, 465,
	466, 289, 362, 0, 0, 946, 931, 464, 0, 877,
	949, 846, 865, 959, 868, 871, 913, 825, 891, 380,
	862, 817, 850, 820, 857, 821, 848, 879, 251, 845,
	933, 895, 948, 335, 248, 827, 851, 394, 867, 197,
	915, 438, 235, 345, 342, 471, 263, 254, 250, 234,
	290, 352, 392, 458, 386, 955, 339, 901, 0, 448,
	365, 0, 0, 0, 881, 937, 889, 927, 876, 914,
	835, 900, 950, 863, 910, 951, 296, 233, 298, 196,
	377, 449, 267, 0, 0, 0, 0, 188, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 231, 320, 329, 328, 309, 310, 312, 314,
	319, 326, 332, 859, 907, 945, 860, 909, 246, 294,
	253, 245, 468, 956, 936, 824, 888, 944, 0, 0,
	963, 947, 883, 0, 912, 0, 962, 819, 903, 0,
	822, 826, 958, 940, 854, 256, 0, 0, 0, 0,
	0, 0, 0, 880, 890, 924, 874, 0, 0, 0,
	0, 0, 0, 0, 852, 0, 899, 0, 0, 0,
	831, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 834, 0,
	853, 925, 0, 816, 277, 828, 366, 238, 0, 929,
	939, 875, 504, 943, 873, 872, 919, 832, 935, 866,
	334, 830, 303, 192, 211, 0, 864, 376, 419, 425,
	934, 849, 858, 236, 856, 423, 390, 487, 219, 265,
	416, 396, 421, 403, 268, 898, 917, 422, 340, 473,
	410, 484, 505, 506, 244, 370, 495, 462, 501, 519,
	212, 241, 384, 455, 490, 445, 363, 469, 470, 302,
	444, 275, 195, 338, 511, 210, 431, 228, 217, 475,
	493, 270, 414, 202, 457, 1367, 225, 435, 0, 0,
	521, 204, 480, 454, 359, 299, 300, 203, 0, 415,
	249, 273, 239, 379, 477, 478, 237, 522, 214, 500,
	206, 829, 499, 372, 472, 481, 360, 350, 205, 479,
	358, 349, 305, 324, 325, 261, 284, 408, 343, 409,
	285, 368, 367, 369, 198, 491, 0, 199, 0, 450,
	492, 523, 220, 221, 223, 844, 260, 264, 272, 274,
	280, 281, 288, 336, 383, 407, 405, 411, 930, 467,
	485, 496, 503, 509, 510, 512, 513, 514, 515, 516,
	518, 517, 815, 809, 808, 304, 341, 922, 961, 389,
	424, 226, 489, 447, 839, 843, 837, 904, 838, 893,
	894, 840, 952, 953, 954, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 0, 926, 833, 0, 841, 842, 0,
	932, 941, 942, 542, 351, 437, 486, 306, 318, 321,
	311, 330, 0, 331, 307, 308, 313, 315, 316, 317,
	322, 323, 327, 333, 897, 191, 207, 337, 957, 412,
	269, 520, 498, 494, 818, 209, 836, 243, 847, 855,
	0, 861, 869, 870, 882, 884, 885, 886, 887, 905,
	906, 908, 916, 918, 921, 923, 928, 938, 960, 193,
	194, 200, 208, 218, 222, 229, 242, 257, 259, 266,
	278, 283, 286, 291, 292, 295, 301, 347, 353, 354,
	355, 356, 373, 374, 375, 378, 381, 382, 385, 387,
	388, 391, 395, 399, 400, 401, 402, 404, 406, 413,
	418, 426, 427, 428, 429, 430, 433, 434, 439, 440,
	441, 442, 443, 451, 452, 456, 474, 476, 488, 502,
	507, 432, 279, 483, 508, 0, 346, 896, 902, 348,
	262, 282, 293, 911, 497, 453, 213, 420, 271, 201,
	232, 216, 240, 255, 258, 297, 357, 364, 393, 398,
	276, 252, 230, 417, 227, 436, 459, 460, 461, 463,
	361, 247, 397, 892, 920, 344, 465, 466, 289, 362,
	0, 0, 946, 931, 464, 0, 877, 949, 846, 865,
	959, 868, 871, 913, 825, 891, 380, 862, 817, 850,
	820, 857, 821, 848, 879, 251, 845, 933, 895, 948,
	335, 248, 827, 851, 394, 867, 197, 915, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 955, 339, 901, 0, 448, 365, 0, 0,
	0, 881, 937, 889, 927, 876, 914, 835, 900, 950,
	863, 910, 951, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	859, 907, 945, 860, 909, 246, 294, 253, 245, 468,
	956, 936, 824, 888, 944, 0, 0, 963, 947, 883,
	0, 912, 0, 962, 819, 903, 0, 822, 826, 958,
	940, 854, 256, 0, 0, 0, 0, 0, 0, 0,
	880, 890, 924, 874, 0, 0, 0, 0, 0, 0,
	0, 852, 0, 899, 0, 0, 0, 831, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 834, 0, 853, 925, 0,
	816, 277, 828, 366, 238, 0, 929, 939, 875, 504,
	943, 873, 872, 919, 832, 935, 866, 334, 830, 303,
	192, 211, 0, 864, 376, 419, 425, 934, 849, 858,
	236, 856, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 898, 917, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 806, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 829, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 844, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 930, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 815,
	809, 808, 304, 341, 922, 961, 389, 424, 226, 489,
	447, 839, 843, 837, 904, 838, 893, 894, 840, 952,
	953, 954, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 926, 833, 0, 841, 842, 0, 932, 941, 942,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 897, 191, 207, 337, 957, 412, 269, 520, 498,
	494, 818, 209, 836, 243, 847, 855, 0, 861, 869,
	870, 882, 884, 885, 886, 887, 905, 906, 908, 916,
	918, 921, 923, 928, 938, 960, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 896, 902, 348, 262, 282, 293,
	911, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	892, 920, 344, 465, 466, 289, 362, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 0, 1771, 0, 624, 0,
	0, 0, 251, 629, 0, 0, 0, 335, 248, 0,
	1772, 394, 0, 197, 0, 438, 235, 345, 342, 471,
	263, 254, 250, 234, 290, 352, 392, 458, 386, 636,
	339, 0, 0, 448, 365, 0, 0, 0, 0, 0,
	631, 632, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 233, 298, 196, 377, 449, 267, 0, 87, 0,
	0, 188, 189, 190, 700, 707, 708, 709, 710, 711,
	701, 703, 0, 0, 224, 702, 231, 647, 649, 648,
	658, 659, 660, 661, 662, 663, 664, 645, 705, 712,
	713, 0, 246, 294, 253, 245, 468, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 607, 621, 0, 635, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 619, 795, 0, 0, 0,
	684, 0, 620, 0, 0, 628, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 630, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	366, 238, 0, 683, 0, 0, 504, 0, 0, 681,
	0, 0, 0, 0, 334, 0, 303, 192, 211, 0,
	0, 376, 419, 425, 0, 0, 0, 236, 0, 423,
	390, 487, 219, 265, 416, 396, 421, 403, 268, 0,
	0, 422, 340, 473, 410, 484, 505, 506, 244, 370,
	495, 462, 501, 519, 212, 241, 384, 455, 490, 445,
	363, 469, 470, 302, 444, 275, 195, 338, 511, 210,
	431, 228, 217, 475, 493, 270, 414, 202, 457, 482,
	225, 435, 0, 0, 521, 204, 480, 454, 359, 299,
	300, 203, 0, 415, 249, 273, 239, 379, 477, 478,
	237, 522, 214, 500, 206, 0, 499, 372, 472, 481,
	360, 350, 205, 479, 358, 349, 305, 653, 654, 261,
	284, 408, 343, 409, 285, 368, 367, 369, 198, 491,
	0, 199, 0, 450, 492, 523, 220, 221, 223, 0,
	260, 264, 272, 274, 280, 281, 288, 336, 383, 407,
	405, 411, 0, 467, 485, 496, 503, 509, 510, 512,
	513, 514, 515, 516, 518, 517, 371, 287, 446, 304,
	341, 0, 0, 389, 424, 226, 489, 447, 690, 682,
	640, 694, 642, 691, 692, 637, 638, 641, 693, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 0, 685, 627,
	626, 0, 633, 634, 0, 643, 644, 646, 650, 651,
	652, 655, 656, 657, 665, 667, 668, 666, 669, 670,
	671, 674, 675, 676, 677, 672, 673, 678, 625, 191,
	207, 337, 0, 412, 269, 520, 498, 494, 0, 209,
	0, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 194, 200, 208, 218, 222, 229,
	242, 257, 259, 266, 278, 283, 286, 291, 292, 295,
	301, 347, 353, 354, 355, 356, 373, 374, 375, 378,
	381, 382, 385, 387, 388, 391, 395, 399, 400, 401,
	402, 404, 406, 413, 418, 426, 427, 428, 429, 430,
	433, 434, 439, 440, 441, 442, 443, 451, 452, 456,
	474, 476, 488, 502, 507, 432, 279, 483, 508, 0,
	346, 0, 0, 348, 262, 282, 293, 0, 497, 453,
	213, 420, 271, 201, 232, 216, 240, 255, 258, 297,
	357, 364, 393, 398, 276, 252, 230, 417, 227, 436,
	459, 460, 461, 463, 361, 247, 397, 0, 362, 344,
	465, 466, 289, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	624, 0, 0, 0, 251, 629, 0, 0, 0, 335,
	248, 0, 0, 394, 0, 197, 0, 438, 235, 345,
	342, 471, 263, 254, 250, 234, 290, 352, 392, 458,
	386, 636, 339, 0, 0, 448, 365, 0, 0, 0,
	0, 0, 631, 632, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 233, 298, 196, 377, 449, 267, 0,
	87, 0, 0, 188, 189, 190, 700, 707, 708, 709,
	710, 711, 701, 703, 0, 0, 224, 702, 231, 647,
	649, 648, 658, 659, 660, 661, 662, 663, 664, 645,
	705, 712, 713, 0, 246, 294, 253, 245, 468, 0,
	0, 1737, 1738, 1739, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 607, 621, 0, 635, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 619, 0, 0,
	0, 0, 684, 0, 620, 0, 0, 628, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	630, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 366, 238, 0, 683, 0, 0, 504, 0,
	0, 681, 0, 0, 0, 0, 334, 0, 303, 192,
	211, 0, 0, 376, 419, 425, 0, 0, 0, 236,
	0, 423, 390, 487, 219, 265, 416, 396, 421, 403,
	268, 0, 0, 422, 340, 473, 410, 484, 505, 506,
	244, 370, 495, 462, 501, 519, 212, 241, 384, 455,
	490, 445, 363, 469, 470, 302, 444, 275, 195, 338,
	511, 210, 431, 228, 217, 475, 493, 270, 414, 202,
	457, 482, 225, 435, 0, 0, 521, 204, 480, 454,
	359, 299, 300, 203, 0, 415, 249, 273, 239, 379,
	477, 478, 237, 522, 214, 500, 206, 0, 499, 372,
	472, 481, 360, 350, 205, 479, 358, 349, 305, 653,
	654, 261, 284, 408, 343, 409, 285, 368, 367, 369,
	198, 491, 0, 199, 0, 450, 492, 523, 220, 221,
	223, 0, 260, 264, 272, 274, 280, 281, 288, 336,
	383, 407, 405, 411, 0, 467, 485, 496, 503, 509,
	510, 512, 513, 514, 515, 516, 518, 517, 371, 287,
	446, 304, 341, 0, 0, 389, 424, 226, 489, 447,
	690, 682, 640, 694, 642, 691, 692, 637, 638, 641,
	693, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 0,
	685, 627, 626, 0, 633, 634, 0, 643, 644, 646,
	650, 651, 652, 655, 656, 657, 665, 667, 668, 666,
	669, 670, 671, 674, 675, 676, 677, 672, 673, 678,
	625, 191, 207, 337, 0, 412, 269, 520, 498, 494,
	0, 209, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 200, 208, 218,
	222, 229, 242, 257, 259, 266, 278, 283, 286, 291,
	292, 295, 301, 347, 353, 354, 355, 356, 373, 374,
	375, 378, 381, 382, 385, 387, 388, 391, 395, 399,
	400, 401, 402, 404, 406, 413, 418, 426, 427, 428,
	429, 430, 433, 434, 439, 440, 441, 442, 443, 451,
	452, 456, 474, 476, 488, 502, 507, 432, 279, 483,
	508, 0, 346, 0, 0, 348, 262, 282, 293, 0,
	497, 453, 213, 420, 271, 201, 232, 216, 240, 255,
	258, 297, 357, 364, 393, 398, 276, 252, 230, 417,
	227, 436, 459, 460, 461, 463, 361, 247, 397, 0,
	362, 344, 465, 466, 289, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 0, 0,
	0, 0, 624, 0, 0, 0, 251, 629, 0, 0,
	0, 335, 248, 0, 0, 394, 0, 197, 0, 438,
	235, 345, 342, 471, 263, 254, 250, 234, 290, 352,
	392, 458, 386, 636, 339, 0, 0, 448, 365, 0,
	0, 0, 0, 0, 631, 632, 0, 0, 0, 0,
	0, 0, 1854, 0, 296, 233, 298, 196, 377, 449,
	267, 0, 87, 0, 0, 188, 189, 190, 700, 707,
	708, 709, 710, 711, 701, 703, 0, 0, 224, 702,
	231, 647, 649, 648, 658, 659, 660, 661, 662, 663,
	664, 645, 705, 712, 713, 1855, 246, 294, 253, 245,
	468, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 607, 621, 0, 635,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 619,
	0, 0, 0, 0, 684, 0, 620, 0, 0, 628,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 366, 238, 0, 683, 0, 0,
	504, 0, 0, 681, 0, 0, 0, 0, 334, 0,
	303, 192, 211, 0, 0, 376, 419, 425, 0, 0,
	0, 236, 0, 423, 390, 487, 219, 265, 416, 396,
	421, 403, 268, 0, 0, 422, 340, 473, 410, 484,
	505, 506, 244, 370, 495, 462, 501, 519, 212, 241,
	384, 455, 490, 445, 363, 469, 470, 302, 444, 275,
	195, 338, 511, 210, 431, 228, 217, 475, 493, 270,
	414, 202, 457, 482, 225, 435, 0, 0, 521, 204,
	480, 454, 359, 299, 300, 203, 0, 415, 249, 273,
	239, 379, 477, 478, 237, 522, 214, 500, 206, 0,
	499, 372, 472, 481, 360, 350, 205, 479, 358, 349,
	305, 653, 654, 261, 284, 408, 343, 409, 285, 368,
	367, 369, 198, 491, 0, 199, 0, 450, 492, 523,
	220, 221, 223, 0, 260, 264, 272, 274, 280, 281,
	288, 336, 383, 407, 405, 411, 0, 467, 485, 496,
	503, 509, 510, 512, 513, 514, 515, 516, 518, 517,
	371, 287, 446, 304, 341, 0, 0, 389, 424, 226,
	489, 447, 690, 682, 640, 694, 642, 691, 692, 637,
	638, 641, 693, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 0, 685, 627, 626, 0, 633, 634, 0, 643,
	644, 646, 650, 651, 652, 655, 656, 657, 665, 667,
	668, 666, 669, 670, 671, 674, 675, 676, 677, 672,
	673, 678, 625, 191, 207, 337, 0, 412, 269, 520,
	498, 494, 0, 209, 0, 243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 194, 200,
	208, 218, 222, 229, 242, 257, 259, 266, 278, 283,
	286, 291, 292, 295, 301, 347, 353, 354, 355, 356,
	373, 374, 375, 378, 381, 382, 385, 387, 388, 391,
	395, 399, 400, 401, 402, 404, 406, 413, 418, 426,
	427, 428, 429, 430, 433, 434, 439, 440, 441, 442,
	443, 451, 452, 456, 474, 476, 488, 502, 507, 432,
	279, 483, 508, 0, 346, 0, 0, 348, 262, 282,
	293, 0, 497, 453, 213, 420, 271, 201, 232, 216,
	240, 255, 258, 297, 357, 364, 393, 398, 276, 252,
	230, 417, 227, 436, 459, 460, 461, 463, 361, 247,
	397, 0, 0, 344, 465, 466, 289, 362, 0, 0,
	0, 78, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 624,
	0, 0, 0, 251, 629, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	636, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 87,
	0, 0, 188, 189, 190, 700, 707, 708, 709, 710,
	711, 701, 703, 0, 0, 224, 702, 231, 647, 649,
	648, 658, 659, 660, 661, 662, 663, 664, 645, 705,
	712, 713, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 607, 621, 0, 635, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 618, 619, 0, 0, 0,
	0, 684, 0, 620, 0, 0, 628, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 683, 0, 0, 504, 0, 0,
	681, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 653, 654,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 690,
	682, 640, 694, 642, 691, 692, 637, 638, 641, 693,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 685,
	627, 626, 0, 633, 634, 0, 643, 644, 646, 650,
	651, 652, 655, 656, 657, 665, 667, 668, 666, 669,
	670, 671, 674, 675, 676, 677, 672, 673, 678, 625,
	191, 207, 337, 86, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 624, 0, 0, 0, 251, 629, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 636, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 87, 0, 0, 188, 189, 190, 700, 707, 708,
	709, 710, 711, 701, 703, 0, 0, 224, 702, 231,
	647, 649, 648, 658, 659, 660, 661, 662, 663, 664,
	645, 705, 712, 713, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 607, 621, 0, 635, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 619, 0,
	0, 0, 0, 684, 0, 620, 0, 0, 628, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 683, 0, 0, 504,
	0, 0, 681, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 2952, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	653, 654, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 690, 682, 640, 694, 642, 691, 692, 637, 638,
	641, 693, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 685, 627, 626, 0, 633, 634, 0, 643, 644,
	646, 650, 651, 652, 655, 656, 657, 665, 667, 668,
	666, 669, 670, 671, 674, 675, 676, 677, 672, 673,
	678, 625, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 624, 0, 0, 0, 251, 629, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 636, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 631, 632, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 87, 0, 1334, 188, 189, 190, 700,
	707, 708, 709, 710, 711, 701, 703, 0, 0, 224,
	702, 231, 647, 649, 648, 658, 659, 660, 661, 662,
	663, 664, 645, 705, 712, 713, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 607, 621, 0,
	635, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	619, 0, 0, 0, 0, 684, 0, 620, 0, 0,
	628, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 630, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 683, 0,
	0, 504, 0, 0, 681, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 653, 654, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 690, 682, 640, 694, 642, 691, 692,
	637, 638, 641, 693, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 685, 627, 626, 0, 633, 634, 0,
	643, 644, 646, 650, 651, 652, 655, 656, 657, 665,
	667, 668, 666, 669, 670, 671, 674, 675, 676, 677,
	672, 673, 678, 625, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 624, 0, 0, 0, 251,
	629, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 636, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 631, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 87, 0, 0, 188, 189,
	190, 700, 707, 708, 709, 710, 711, 701, 703, 0,
	0, 224, 702, 231, 647, 649, 648, 658, 659, 660,
	661, 662, 663, 664, 645, 705, 712, 713, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 607,
	621, 0, 635, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 618, 619, 795, 0, 0, 0, 684, 0, 620,
	0, 0, 628, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	683, 0, 0, 504, 0, 0, 681, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 653, 654, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 690, 682, 640, 694, 642,
	691, 692, 637, 638, 641, 693, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 685, 627, 626, 0, 633,
	634, 0, 643, 644, 646, 650, 651, 652, 655, 656,
	657, 665, 667, 668, 666, 669, 670, 671, 674, 675,
	676, 677, 672, 673, 678, 625, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 624, 0, 0,
	0, 251, 629, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 636, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 631,
	632, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 87, 0, 0,
	188, 189, 190, 700, 707, 708, 709, 710, 711, 701,
	703, 0, 0, 224, 702, 231, 647, 649, 648, 658,
	659, 660, 661, 662, 663, 664, 645, 705, 712, 713,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 607, 621, 0, 635, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 619, 0, 0, 0, 0, 684,
	0, 620, 0, 0, 628, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 630, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 683, 0, 0, 504, 0, 0, 681, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 653, 654, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 690, 682, 640,
	694, 642, 691, 692, 637, 638, 641, 693, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 685, 627, 626,
	0, 633, 634, 0, 643, 644, 646, 650, 651, 652,
	655, 656, 657, 665, 667, 668, 666, 669, 670, 671,
	674, 675, 676, 677, 672, 673, 678, 625, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 624,
	0, 0, 0, 251, 629, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	636, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 87,
	0, 0, 188, 189, 190, 700, 707, 708, 709, 710,
	711, 701, 703, 0, 0, 224, 702, 231, 647, 649,
	648, 658, 659, 660, 661, 662, 663, 664, 645, 705,
	712, 713, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 621, 0, 635, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 618, 619, 0, 0, 0,
	0, 684, 0, 620, 0, 0, 628, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 683, 0, 0, 504, 0, 0,
	681, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 653, 654,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 690,
	682, 640, 694, 642, 691, 692, 637, 638, 641, 693,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 685,
	627, 626, 0, 633, 634, 0, 643, 644, 646, 650,
	651, 652, 655, 656, 657, 665, 667, 668, 666, 669,
	670, 671, 674, 675, 676, 677, 672, 673, 678, 625,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 707, 708,
	0, 0, 0, 0, 1682, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 0, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	1013, 504, 0, 0, 0, 0, 0, 1010, 1011, 334,
	971, 303, 192, 211, 1004, 1008, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 0, 344, 465, 466, 289, 362, 0,
	0, 0, 78, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 335,
	248, 0, 0, 394, 0, 197, 0, 438, 235, 345,
	342, 471, 263, 254, 250, 234, 290, 352, 392, 458,
	386, 0, 339, 0, 0, 448, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 233, 298, 196, 377, 449, 267, 0,
	87, 0, 0, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 231, 320,
	329, 328, 309, 310, 312, 314, 319, 326, 332, 0,
	0, 0, 0, 0, 246, 294, 253, 245, 468, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 366, 238, 0, 0, 0, 0, 504, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 303, 192,
	211, 0, 0, 376, 419, 425, 0, 0, 0, 236,
	0, 423, 390, 487, 219, 265, 416, 396, 421, 403,
	268, 0, 0, 422, 340, 473, 410, 484, 505, 506,
	244, 370, 495, 462, 501, 519, 212, 241, 384, 455,
	490, 445, 363, 469, 470, 302, 444, 275, 195, 338,
	511, 210, 431, 228, 217, 475, 493, 270, 414, 202,
	457, 482, 225, 435, 0, 0, 521, 204, 480, 454,
	359, 299, 300, 203, 0, 415, 249, 273, 239, 379,
	477, 478, 237, 522, 214, 500, 206, 0, 499, 372,
	472, 481, 360, 350, 205, 479, 358, 349, 305, 324,
	325, 261, 284, 408, 343, 409, 285, 368, 367, 369,
	198, 491, 0, 199, 0, 450, 492, 523, 220, 221,
	223, 0, 260, 264, 272, 274, 280, 281, 288, 336,
	383, 407, 405, 411, 0, 467, 485, 496, 503, 509,
	510, 512, 513, 514, 515, 516, 518, 517, 371, 287,
	446, 304, 341, 0, 0, 389, 424, 226, 489, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	351, 437, 486, 306, 318, 321, 311, 330, 0, 331,
	307, 308, 313, 315, 316, 317, 322, 323, 327, 333,
	0, 191, 207, 337, 86, 412, 269, 520, 498, 494,
	0, 209, 0, 243, 0, 0, 0, 0, 0, 0,
	1842, 0, 0, 1841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 200, 208, 218,
	222, 229, 242, 257, 259, 266, 278, 283, 286, 291,
	292, 295, 301, 347, 353, 354, 355, 356, 373, 374,
	375, 378, 381, 382, 385, 387, 388, 391, 395, 399,
	400, 401, 402, 404, 406, 413, 418, 426, 427, 428,
	429, 430, 433, 434, 439, 440, 441, 442, 443, 451,
	452, 456, 474, 476, 488, 502, 507, 432, 279, 483,
	508, 0, 346, 0, 0, 348, 262, 282, 293, 0,
	497, 453, 213, 420, 271, 201, 232, 216, 240, 255,
	258, 297, 357, 364, 393, 398, 276, 252, 230, 417,
	227, 436, 459, 460, 461, 463, 361, 247, 397, 0,
	1353, 344, 465, 466, 289, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 0, 0,
	0, 1355, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 335, 248, 0, 0, 394, 0, 197, 0, 438,
	235, 345, 342, 471, 263, 254, 250, 234, 290, 352,
	392, 458, 386, 0, 339, 0, 0, 448, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 233, 298, 196, 377, 449,
	267, 0, 0, 0, 0, 188, 189, 190, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	231, 320, 329, 328, 309, 310, 312, 314, 319, 326,
	332, 0, 0, 0, 0, 0, 246, 294, 253, 245,
	468, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 1186, 0, 1187, 1188, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 366, 238, 0, 0, 0, 0,
	504, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	303, 192, 211, 0, 0, 376, 419, 425, 0, 0,
	0, 236, 0, 423, 390, 487, 219, 265, 416, 396,
	421, 403, 268, 0, 0, 422, 340, 473, 410, 484,
	505, 506, 244, 370, 495, 462, 501, 519, 212, 241,
	384, 455, 490, 445, 363, 469, 470, 302, 444, 275,
	195, 338, 511, 210, 431, 228, 217, 475, 493, 270,
	414, 202, 457, 482, 225, 435, 0, 0, 521, 204,
	480, 454, 359, 299, 300, 203, 0, 415, 249, 273,
	239, 379, 477, 478, 237, 522, 214, 500, 206, 0,
	499, 372, 472, 481, 360, 350, 205, 479, 358, 349,
	305, 324, 325, 261, 284, 408, 343, 409, 285, 368,
	367, 369, 198, 491, 0, 199, 0, 450, 492, 523,
	220, 221, 223, 0, 260, 264, 272, 274, 280, 281,
	288, 336, 383, 407, 405, 411, 0, 467, 485, 496,
	503, 509, 510, 512, 513, 514, 515, 516, 518, 517,
	371, 287, 446, 304, 341, 0, 0, 389, 424, 226,
	489, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 351, 437, 486, 306, 318, 321, 311, 330,
	0, 331, 307, 308, 313, 315, 316, 317, 322, 323,
	327, 333, 0, 191, 207, 337, 0, 412, 269, 520,
	498, 494, 0, 209, 0, 243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 194, 200,
	208, 218, 222, 229, 242, 257, 259, 266, 278, 283,
	286, 291, 292, 295, 301, 347, 353, 354, 355, 356,
	373, 374, 375, 378, 381, 382, 385, 387, 388, 391,
	395, 399, 400, 401, 402, 404, 406, 413, 418, 426,
	427, 428, 429, 430, 433, 434, 439, 440, 441, 442,
	443, 451, 452, 456, 474, 476, 488, 502, 507, 432,
	279, 483, 508, 0, 346, 0, 0, 348, 262, 282,
	293, 0, 497, 453, 213, 420, 271, 201, 232, 216,
	240, 255, 258, 297, 357, 364, 393, 398, 276, 252,
	230, 417, 227, 436, 459, 460, 461, 463, 361, 247,
	397, 0, 362, 344, 465, 466, 289, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 335, 248, 0, 0, 394, 0, 197,
	0, 438, 235, 345, 342, 471, 263, 254, 250, 234,
	290, 352, 392, 458, 386, 0, 339, 0, 0, 448,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 233, 298, 196,
	377, 449, 267, 0, 0, 0, 0, 188, 189, 190,
	1296, 1299, 0, 0, 0, 0, 1295, 1298, 0, 0,
	224, 1294, 231, 320, 329, 328, 309, 310, 312, 314,
	319, 326, 332, 0, 0, 0, 0, 0, 246, 294,
	253, 245, 468, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 366, 238, 0, 0,
	0, 0, 504, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 303, 192, 211, 0, 0, 376, 419, 425,
	0, 0, 0, 236, 0, 423, 390, 487, 219, 265,
	416, 396, 421, 403, 268, 0, 0, 422, 340, 473,
	410, 484, 505, 506, 244, 370, 495, 462, 501, 519,
	212, 241, 384, 455, 490, 445, 363, 469, 470, 302,
	444, 275, 195, 338, 511, 210, 431, 228, 217, 475,
	493, 270, 414, 202, 457, 482, 225, 435, 0, 0,
	521, 204, 480, 454, 359, 299, 300, 203, 0, 415,
	249, 273, 239, 379, 477, 478, 237, 522, 214, 500,
	206, 0, 499, 372, 472, 481, 360, 350, 205, 479,
	358, 349, 305, 324, 325, 261, 284, 408, 343, 409,
	285, 368, 367, 369, 198, 491, 0, 199, 0, 450,
	492, 523, 220, 221, 223, 0, 260, 264, 272, 274,
	280, 281, 288, 336, 383, 407, 405, 411, 0, 467,
	485, 496, 503, 509, 510, 512, 513, 514, 515, 516,
	518, 517, 371, 287, 446, 304, 341, 0, 0, 389,
	424, 226, 489, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 351, 437, 486, 306, 318, 321,
	311, 330, 0, 331, 307, 308, 313, 315, 316, 317,
	322, 323, 327, 333, 0, 191, 207, 337, 0, 412,
	269, 520, 498, 494, 0, 209, 0, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	194, 200, 208, 218, 222, 229, 242, 257, 259, 266,
	278, 283, 286, 291, 292, 295, 301, 347, 353, 354,
	355, 356, 373, 374, 375, 378, 381, 382, 385, 387,
	388, 391, 395, 399, 400, 401, 402, 404, 406, 413,
	418, 426, 427, 428, 429, 430, 433, 434, 439, 440,
	441, 442, 443, 451, 452, 456, 474, 476, 488, 502,
	507, 432, 279, 483, 508, 0, 346, 0, 0, 348,
	262, 282, 293, 0, 497, 453, 213, 420, 271, 201,
	232, 216, 240, 255, 258, 297, 357, 364, 393, 398,
	276, 252, 230, 417, 227, 436, 459, 460, 461, 463,
	361, 247, 397, 0, 0, 344, 465, 466, 289, 362,
	0, 0, 0, 78, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 87, 0, 1334, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 86, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 87, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 1842, 0, 0, 1841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 1793, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 1535, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 1791, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 971, 303, 192, 211, 969, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 1793, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 1535, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 1334, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 2880, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 0, 0, 0, 188, 189, 190, 0,
	1678, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 2135, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 0, 0, 2120, 0, 0, 0,
	2121, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 1378, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 1377, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 2973, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 0, 0, 0, 188, 189, 190, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 2880, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 87, 0, 0,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 1843, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 0, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 1633,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 1503, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 1501, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 1499, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	1497, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 0, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 1495, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 1491, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 1489, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 1487, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 1462, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 1362, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 373, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 1163, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 598,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 362, 344, 465, 466, 289, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 335, 248, 0, 0, 394, 0, 197, 0,
	438, 235, 345, 342, 471, 263, 254, 250, 234, 290,
	352, 392, 458, 386, 0, 339, 0, 0, 448, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 233, 298, 196, 377,
	449, 267, 0, 0, 0, 0, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 231, 320, 329, 328, 309, 310, 312, 314, 319,
	326, 332, 0, 0, 0, 0, 0, 246, 294, 253,
	245, 468, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 366, 238, 0, 0, 545,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 303, 192, 211, 0, 0, 376, 419, 425, 0,
	0, 0, 236, 0, 423, 390, 487, 219, 265, 416,
	396, 421, 403, 268, 0, 0, 422, 340, 473, 410,
	484, 505, 506, 244, 370, 495, 462, 501, 519, 212,
	241, 384, 455, 490, 445, 363, 469, 470, 302, 444,
	275, 195, 338, 511, 210, 431, 228, 217, 475, 493,
	270, 414, 202, 457, 482, 225, 435, 0, 0, 521,
	204, 480, 454, 359, 299, 300, 203, 0, 415, 249,
	273, 239, 379, 477, 478, 237, 522, 214, 500, 206,
	0, 499, 372, 472, 481, 360, 350, 205, 479, 358,
	349, 305, 324, 325, 261, 284, 408, 343, 409, 285,
	368, 367, 369, 198, 491, 0, 199, 0, 450, 492,
	523, 220, 221, 223, 0, 260, 264, 272, 274, 280,
	281, 288, 336, 383, 407, 405, 411, 0, 467, 485,
	496, 503, 509, 510, 512, 513, 514, 515, 516, 518,
	517, 371, 287, 446, 304, 341, 0, 0, 389, 424,
	226, 489, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 351, 437, 486, 306, 318, 321, 311,
	330, 0, 331, 307, 308, 313, 315, 316, 317, 322,
	323, 327, 333, 0, 191, 207, 337, 0, 412, 269,
	520, 498, 494, 0, 209, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	200, 208, 218, 222, 229, 242, 257, 259, 266, 278,
	283, 286, 291, 292, 295, 301, 347, 353, 354, 355,
	356, 373, 374, 375, 378, 381, 382, 385, 387, 388,
	391, 395, 399, 400, 401, 402, 404, 406, 413, 418,
	426, 427, 428, 429, 430, 433, 434, 439, 440, 441,
	442, 443, 451, 452, 456, 474, 476, 488, 502, 507,
	432, 279, 483, 508, 0, 346, 0, 0, 348, 262,
	282, 293, 0, 497, 453, 213, 420, 271, 201, 232,
	216, 240, 255, 258, 297, 357, 364, 393, 398, 276,
	252, 230, 417, 227, 436, 459, 460, 461, 463, 361,
	247, 397, 0, 362, 344, 465, 466, 289, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 335, 248, 0, 0, 394, 0,
	197, 0, 438, 235, 345, 342, 471, 263, 254, 250,
	234, 290, 352, 392, 458, 386, 0, 339, 0, 0,
	448, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 233, 298,
	196, 377, 449, 267, 0, 0, 0, 0, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 231, 320, 329, 328, 309, 310, 312,
	314, 319, 326, 332, 0, 0, 0, 0, 0, 246,
	294, 253, 245, 468, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 366, 238, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 303, 192, 211, 0, 0, 376, 419,
	425, 0, 0, 0, 236, 0, 423, 390, 487, 219,
	265, 416, 396, 421, 403, 268, 0, 0, 422, 340,
	473, 410, 484, 505, 506, 244, 370, 495, 462, 501,
	519, 212, 241, 384, 455, 490, 445, 363, 469, 470,
	302, 444, 275, 195, 338, 511, 210, 431, 228, 217,
	475, 493, 270, 414, 202, 457, 482, 225, 435, 0,
	0, 521, 204, 480, 454, 359, 299, 300, 203, 0,
	415, 249, 273, 239, 379, 477, 478, 237, 522, 214,
	500, 206, 0, 499, 372, 472, 481, 360, 350, 205,
	479, 358, 349, 305, 324, 325, 261, 284, 408, 343,
	409, 285, 368, 367, 369, 198, 491, 0, 199, 0,
	450, 492, 523, 220, 221, 223, 0, 260, 264, 272,
	274, 280, 281, 288, 336, 383, 407, 405, 411, 0,
	467, 485, 496, 503, 509, 510, 512, 513, 514, 515,
	516, 518, 517, 371, 287, 446, 304, 341, 0, 0,
	389, 424, 226, 489, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 351, 437, 486, 306, 318,
	321, 311, 330, 0, 331, 307, 308, 313, 315, 316,
	317, 322, 323, 327, 333, 0, 191, 207, 337, 0,
	412, 269, 520, 498, 494, 0, 209, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 200, 208, 218, 222, 229, 242, 257, 259,
	266, 278, 283, 286, 291, 292, 295, 301, 347, 353,
	354, 355, 356, 2978, 374, 375, 378, 381, 382, 385,
	387, 388, 391, 395, 399, 400, 401, 402, 404, 406,
	413, 418, 426, 427, 428, 429, 430, 433, 434, 439,
	440, 441, 442, 443, 451, 452, 456, 474, 476, 488,
	502, 507, 432, 279, 483, 508, 0, 346, 0, 0,
	348, 262, 282, 293, 0, 497, 453, 213, 420, 271,
	201, 232, 216, 240, 255, 258, 297, 357, 364, 393,
	398, 276, 252, 230, 417, 227, 436, 459, 460, 461,
	463, 361, 247, 397, 0, 362, 344, 465, 466, 289,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 335, 248, 0, 0,
	394, 0, 197, 0, 438, 235, 345, 342, 471, 263,
	254, 250, 234, 290, 352, 392, 458, 386, 0, 339,
	0, 0, 448, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	233, 298, 196, 377, 449, 267, 0, 0, 0, 0,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 231, 320, 329, 328, 309,
	310, 312, 314, 319, 326, 332, 0, 0, 0, 0,
	0, 246, 294, 253, 245, 468, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 366,
	238, 0, 0, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 303, 192, 211, 0, 0,
	376, 419, 425, 0, 0, 0, 236, 0, 423, 390,
	487, 219, 265, 416, 396, 421, 403, 268, 0, 0,
	422, 340, 473, 410, 484, 505, 506, 244, 370, 495,
	462, 501, 519, 212, 241, 384, 455, 490, 445, 363,
	469, 470, 302, 444, 275, 195, 338, 511, 210, 431,
	228, 217, 475, 493, 270, 414, 202, 457, 482, 225,
	435, 0, 0, 521, 204, 480, 454, 359, 299, 300,
	203, 0, 415, 249, 273, 239, 379, 477, 478, 237,
	522, 214, 500, 206, 0, 499, 372, 472, 481, 360,
	350, 205, 479, 358, 349, 305, 324, 325, 261, 284,
	408, 343, 409, 285, 368, 367, 369, 198, 491, 0,
	199, 0, 450, 492, 523, 220, 221, 223, 0, 260,
	264, 272, 274, 280, 281, 288, 336, 383, 407, 405,
	411, 0, 467, 485, 496, 503, 509, 510, 512, 513,
	514, 515, 516, 518, 517, 371, 287, 446, 304, 341,
	0, 0, 389, 424, 226, 489, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 351, 437, 486,
	306, 318, 321, 311, 330, 0, 331, 307, 308, 313,
	315, 316, 317, 322, 323, 327, 333, 0, 191, 207,
	337, 0, 412, 269, 520, 498, 494, 0, 209, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 200, 208, 218, 222, 229, 242,
	257, 259, 266, 278, 283, 286, 291, 292, 295, 301,
	347, 353, 354, 355, 356, 373, 374, 375, 378, 381,
	382, 385, 387, 388, 391, 395, 399, 400, 401, 402,
	404, 406, 413, 418, 426, 427, 428, 429, 430, 433,
	434, 439, 440, 441, 442, 443, 451, 452, 456, 474,
	476, 488, 502, 507, 432, 279, 483, 508, 0, 346,
	0, 0, 348, 262, 282, 293, 0, 497, 453, 213,
	420, 271, 201, 232, 216, 240, 255, 258, 297, 357,
	364, 393, 398, 276, 252, 230, 417, 227, 436, 459,
	460, 461, 463, 361, 247, 397, 0, 362, 344, 465,
	466, 289, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 335, 248,
	0, 0, 394, 0, 197, 0, 438, 235, 345, 342,
	471, 263, 254, 250, 234, 290, 352, 392, 458, 386,
	0, 339, 0, 0, 448, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 233, 298, 196, 377, 449, 267, 0, 0,
	0, 0, 188, 2602, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 231, 320, 329,
	328, 309, 310, 312, 314, 319, 326, 332, 0, 0,
	0, 0, 0, 246, 294, 253, 245, 468, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 366, 238, 0, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 303, 192, 211,
	0, 0, 376, 419, 425, 0, 0, 0, 236, 0,
	423, 390, 487, 219, 265, 416, 396, 421, 403, 268,
	0, 0, 422, 340, 473, 410, 484, 505, 506, 244,
	370, 495, 462, 501, 519, 212, 241, 384, 455, 490,
	445, 363, 469, 470, 302, 444, 275, 195, 338, 511,
	210, 431, 228, 217, 475, 493, 270, 414, 202, 457,
	482, 225, 435, 0, 0, 521, 204, 480, 454, 359,
	299, 300, 203, 0, 415, 249, 273, 239, 379, 477,
	478, 237, 522, 214, 500, 206, 0, 499, 372, 472,
	481, 360, 350, 205, 479, 358, 349, 305, 324, 325,
	261, 284, 408, 343, 409, 285, 368, 367, 369, 198,
	491, 0, 199, 0, 450, 492, 523, 220, 221, 223,
	0, 260, 264, 272, 274, 280, 281, 288, 336, 383,
	407, 405, 411, 0, 467, 485, 496, 503, 509, 510,
	512, 513, 514, 515, 516, 518, 517, 371, 287, 446,
	304, 341, 0, 0, 389, 424, 226, 489, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 351,
	437, 486, 306, 318, 321, 311, 330, 0, 331, 307,
	308, 313, 315, 316, 317, 322, 323, 327, 333, 0,
	191, 207, 337, 0, 412, 269, 520, 498, 494, 0,
	209, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 200, 208, 218, 222,
	229, 242, 257, 259, 266, 278, 283, 286, 291, 292,
	295, 301, 347, 353, 354, 355, 356, 373, 374, 375,
	378, 381, 382, 385, 387, 388, 391, 395, 399, 400,
	401, 402, 404, 406, 413, 418, 426, 427, 428, 429,
	430, 433, 434, 439, 440, 441, 442, 443, 451, 452,
	456, 474, 476, 488, 502, 507, 432, 279, 483, 508,
	0, 346, 0, 0, 348, 262, 282, 293, 0, 497,
	453, 213, 420, 271, 201, 232, 216, 240, 255, 258,
	297, 357, 364, 393, 398, 276, 252, 230, 417, 227,
	436, 459, 460, 461, 463, 361, 247, 397, 0, 362,
	344, 465, 466, 289, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	335, 248, 0, 0, 394, 0, 197, 0, 438, 235,
	345, 342, 471, 263, 254, 250, 234, 290, 352, 392,
	458, 386, 0, 339, 0, 0, 448, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 233, 298, 196, 377, 449, 267,
	0, 0, 0, 0, 188, 2116, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 231,
	320, 329, 328, 309, 310, 312, 314, 319, 326, 332,
	0, 0, 0, 0, 0, 246, 294, 253, 245, 468,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 366, 238, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 303,
	192, 211, 0, 0, 376, 419, 425, 0, 0, 0,
	236, 0, 423, 390, 487, 219, 265, 416, 396, 421,
	403, 268, 0, 0, 422, 340, 473, 410, 484, 505,
	506, 244, 370, 495, 462, 501, 519, 212, 241, 384,
	455, 490, 445, 363, 469, 470, 302, 444, 275, 195,
	338, 511, 210, 431, 228, 217, 475, 493, 270, 414,
	202, 457, 482, 225, 435, 0, 0, 521, 204, 480,
	454, 359, 299, 300, 203, 0, 415, 249, 273, 239,
	379, 477, 478, 237, 522, 214, 500, 206, 0, 499,
	372, 472, 481, 360, 350, 205, 479, 358, 349, 305,
	324, 325, 261, 284, 408, 343, 409, 285, 368, 367,
	369, 198, 491, 0, 199, 0, 450, 492, 523, 220,
	221, 223, 0, 260, 264, 272, 274, 280, 281, 288,
	336, 383, 407, 405, 411, 0, 467, 485, 496, 503,
	509, 510, 512, 513, 514, 515, 516, 518, 517, 371,
	287, 446, 304, 341, 0, 0, 389, 424, 226, 489,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 351, 437, 486, 306, 318, 321, 311, 330, 0,
	331, 307, 308, 313, 315, 316, 317, 322, 323, 327,
	333, 0, 191, 207, 337, 0, 412, 269, 520, 498,
	494, 0, 209, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 200, 208,
	218, 222, 229, 242, 257, 259, 266, 278, 283, 286,
	291, 292, 295, 301, 347, 353, 354, 355, 356, 373,
	374, 375, 378, 381, 382, 385, 387, 388, 391, 395,
	399, 400, 401, 402, 404, 406, 413, 418, 426, 427,
	428, 429, 430, 433, 434, 439, 440, 441, 442, 443,
	451, 452, 456, 474, 476, 488, 502, 507, 432, 279,
	483, 508, 0, 346, 0, 0, 348, 262, 282, 293,
	0, 497, 453, 213, 420, 271, 201, 232, 216, 240,
	255, 258, 297, 357, 364, 393, 398, 276, 252, 230,
	417, 227, 436, 459, 460, 461, 463, 361, 247, 397,
	0, 0, 344, 465, 466, 289,
}

var mysqPact = [...]int{
	5992, -1000, -409, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1997, 2020, -1000, -1000,
	-1000, -1000, 2137, -1000, 752, 1692, -1000, 1943, 5691, -1000,
	41251, 485, -1000, 40047, 484, 123, 41251, -1000, 161, -1000,
	151, 41251, 157, 39445, -1000, -1000, -301, 17161, 1888, 40,
	39, 41251, -1000, -1000, -1000, -1000, 2102, 1668, -1000, 338,
	-1000, -1000, -1000, -1000, -1000, -1000, 38843, -1000, -1000, -1000,
	1963, 1942, 2151, 647, 1877, -1000, 2000, 1668, -1000, 17161,
	2084, 2005, 16559, -1000, 16559, 428, -1000, -1000, 12335, -1000,
	-1000, 23191, 41251, 29211, 299, -1000, 1943, -1000, -1000, -1000,
	90, -1000, 326, 1554, -1000, 1537, -1000, 610, 622, 354,
	465, 463, 351, 350, 333, 332, 331, 325, 324, 310,
	358, -1000, 679, 679, -140, -152, 3016, 522, 418, 418,
	450, 1916, 1907, -1000, 669, -1000, 679, 679, 679, 334,
	679, 679, 679, 679, 291, 290, 679, 679, 679, 679,
	679, 679, 679, 679, 679, 679, 679, 679, 679, 679,
	679, 679, 679, 295, 1943, 264, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41251, 252, 41251, -1000, 559, 41251, 799,
	799, 62, 799, 799, 799, 799, 186, 641, 36, -1000,
	167, 241, 171, 257, 781, 165, -1000, -1000, 245, 781,
	1247, -1000, 643, 147, -1000, 799, 799, -1000, 9907, 223,
	9907, 9907, -1000, 1930, -1000, -1000, -1000, -1000, 1251, -1000,
	448, -1000, -1000, -1000, -1000, 41251, 38241, 330, 704, -1000,
	-1000, -1000, 58, -1000, -1000, 1330, 957, 17161, 888, -1000,
	1546, 612, -1000, -1000, -1000, -1000, -1000, 508, 17763, 17763,
	17763, 17763, -1000, -1000, 1595, 1595, 1595, 1595, 17763, 1595,
	17763, 1595, 1595, 1595, 1595, 17161, 1595, 1595, 1595, -1000,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	537, 1595, 1595, 1595, 1595, 1595, -1000, -1000, -1000, -1000,
	1595, 1595, 1595, 1595, 1595, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 20778, -1000, 14753, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41251, -1000, 1595,
	176, 41251, 41251, 337, 2000, 1668, -1000, 2102, 2036, 338,
	-1000, 2315, 1550, 1424, 1240, 1668, 1504, 41251, -1000, 1643,
	-1000, -1000, -1000, 1803, 1142, 1245, -1000, -1000, -1000, -1000,
	1120, 17161, -1000, -1000, 2132, -1000, 20176, 535, 850, 2127,
	37639, -1000, 428, 428, 1527, 11728, 12, -1000, -1000, -1000,
	700, 26803, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1930,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1640, 41251, -1000, -1000, 3909, 1175,
	-1000, 1691, -1000, 1592, -1000, 1663, 17161, 1690, 478, 1175,
	467, 466, 464, -1000, -74, -1000, -1000, -1000, -1000, -1000,
	-1000, 679, 679, 679, -1000, 335, 2082, 5691, 4290, -1000,
	-1000, -1000, 37037, 1687, 1175, -1000, 1684, -1000, 785, 515,
	552, 552, 1175, -1000, -1000, 41251, 1175, 780, 778, 1175,
	1175, 41251, 41251, -1000, 36435, -1000, 35833, 35231, 1118, 41251,
	34629, 34027, 33425, 32823, 32221, -1000, 1787, -1000, 1726, -1000,
	-1000, -1000, 41251, 1175, 1175, 41251, 41251, 327, -1000, -1000,
	41251, 1175, -1000, -1000, 1117, 1110, 1106, 679, 679, 1105,
	1243, 1238, 1233, 679, 679, 1092, 1232, 28007, 1229, 280,
	1082, 1079, 1076, 1033, 1228, 225, 1227, 1015, 954, 1073,
	41251, 1683, 41251, -1000, 221, 662, 391, 697, 1943, 1885,
	1517, 444, 471, 1175, 412, 412, 41251, -1000, 10514, -1000,
	-1000, 1226, 17161, -1000, 782, 781, 781, -1000, -1000, -1000,
	-1000, -1000, -1000, 799, 41251, 782, -1000, -1000, -1000, 781,
	799, 41251, 799, 799, 799, 799, 781, 781, 781, 799,
	41251, 41251, 41251, 41251, 41251, 41251, 41251, 41251, 41251, 9907,
	643, 799, -305, -1000, 1224, -1000, 1773, -1000, -1000, -1000,
	-1000, -1000, -1000, 9907, 9907, -1000, -1000, -1000, -1000, 154,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -43,
	1512, 31619, -1000, -307, -308, -310, -311, -1000, -1000, -1000,
	-313, -320, -1000, -1000, -1000, 17161, 17161, 17161, 17161, -176,
	-1000, 813, 17763, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	918, 741, 17763, 17763, 17763, 17763, 17763, 17763, 17763, 17763,
	17763, 17763, 17763, 17763, 17763, 17763, 17763, 24997, 6657, 6657,
	612, 612, 612, 612, -1000, 16559, 17161, 17161, 612, -1000,
	1175, 31017, 16559, 16559, 17161, 1925, 712, 957, 41251, -1000,
	1240, -1000, -1000, -1000, 1003, -1000, 41251, 41251, 1236, 17161,
	17161, 17161, 17161, 17161, 17161, 13544, 17161, 17161, 17161, 17161,
	17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161,
	17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161,
	17161, 17161, 12942, 10514, 16559, 16559, 16559, 16559, 16559, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 532, 1398, 1373, 1496, -1000, 1506, -1000, -151, 22589,
	17161, 1216, 2119, 1708, 41251, -1000, -1000, -1000, 2000, -1000,
	2000, 1398, 2146, 1815, 16559, -1000, -1000, 2146, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1319, -1000, 41251, 1504,
	1998, 41251, 1798, 1213, 362, -1000, 17161, 17161, 1494, -1000,
	948, 41251, -1000, -176, -1000, 30415, -1000, -1000, 9300, -1000,
	41251, 308, 41251, -1000, 21987, 29813, 11121, 12, -1000, 11121,
	1460, -1000, 16, 6, 14146, 607, -1000, -1000, -1000, 3016,
	18967, 1310, 607, 83, -1000, -1000, -1000, 1663, -1000, 1663,
	1663, 1663, 1663, 362, 362, 362, 362, -1000, -1000, -1000,
	-1000, -1000, 1681, 1680, -1000, 1663, 1663, 1663, 1663, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1679, 1679, 1679, 1672,
	1672, 403, -1000, 17161, 353, 29211, 1969, 1072, 1235, 221,
	426, 1703, 1175, 1175, 1175, 426, -1000, 1223, 1135, 1090,
	-1000, -401, 1491, -1000, -1000, 2078, -1000, -1000, 670, 822,
	812, 695, 41251, 194, 302, -1000, 399, -1000, 29211, 1175,
	772, 552, 1175, -1000, 1175, -1000, -1000, -1000, -1000, -1000,
	1175, -1000, -1000, 1480, -1000, 1408, 857, 808, 848, 767,
	1480, -1000, -1000, -118, 1480, -1000, 1480, -1000, 1480, -1000,
	1480, -1000, 1480, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 666, 175, -238, 41251, 194, 24997, -1000, 443,
	-1000, -1000, -1000, 24997, 24997, -1000, -1000, -1000, -1000, 1208,
	1207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-384, 41251, -1000, 207, 694, 285, 342, 250, 41251, 177,
	2025, 2023, 2016, 266, 286, 41251, 41251, 412, 1766, 41251,
	1975, 41251, -1000, -1000, -1000, -1000, -1000, 957, 41251, -1000,
	-1000, 799, 799, -1000, -1000, 41251, 799, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 799, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41251, -1000, -1000, -1000, -1000, 41251, -1000, -1000, -1000,
	-1000, -1000, 79, 14, 323, -1000, -1000, -1000, -1000, -1000,
	2030, -1000, 957, 762, 728, -1000, 1595, -1000, -1000, 840,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 918, 17763, 17763,
	17763, 1557, 452, 1337, 1263, 1029, 832, 832, 757, 757,
	620, 620, 620, 620, 620, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1206, -1000, 1544, -1000, 1617, 1166, 1240,
	-1000, 1544, 1544, 973, 16559, -1000, -1000, 733, -1000, 17161,
	1240, -1000, -1000, 1240, 1240, 1477, 1474, 2117, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1416,
	1235, 1235, 1235, 1235, 1235, 17161, 1078, -1000, -1000, -1000,
	2009, 1966, 1240, 1330, 1240, 1469, -1000, 1906, 1235, 1886,
	1878, 1873, 982, 1868, 1792, 1786, 1235, 1235, 1235, 978,
	1770, 1764, 1760, 1756, 1742, 1689, 1685, 1645, 1612, 1235,
	1240, 16559, 16559, 1466, 1595, 529, -1000, 1544, 1240, 1240,
	1544, 1544, 10514, 1240, -1000, 41251, -1000, -296, -1000, -35,
	597, 1595, -1000, 28007, 1240, -1000, 5252, -1000, 42455, -1000,
	-1000, -1000, -1000, -1000, 26201, 1390, 2146, -1000, -1000, 1595,
	1586, -1000, -1000, 362, 60, 25599, 604, 604, 97, 957,
	957, 17161, -1000, -1000, -1000, -1000, -1000, -1000, 528, 2098,
	343, 1595, -1000, 1613, 1917, -1000, -1000, -1000, 1993, 19574,
	-1000, 1595, 1595, 41251, 1658, 1598, -1000, 525, -1000, 1460,
	12, 3, -1000, -1000, -1000, -1000, 957, -1000, 1056, 309,
	2728, -1000, 423, -1000, -1000, -1000, -1000, 1893, 71, -1000,
	-1000, -1000, 228, 362, -1000, -1000, -1000, -1000, -1000, -1000,
	1186, 1186, -1000, -1000, -1000, -1000, -1000, 1070, -1000, -1000,
	-1000, 1047, -1000, -1000, 1456, 1749, 353, -1000, -1000, 679,
	1184, -1000, -1000, 1901, 679, 679, 41251, -1000, -1000, 1308,
	1969, 207, 41251, 726, 1763, -1000, 1703, 1703, 1703, 41251,
	-1000, -1000, -1000, -1000, -1000, -1000, -386, 64, 356, -1000,
	-1000, -1000, 3449, 41251, 1560, -1000, 187, -1000, 1302, -1000,
	41251, -1000, 1552, 1677, 1175, 1175, -1000, -1000, -1000, 41251,
	1595, -1000, -1000, -1000, -1000, 469, 1935, 254, -1000, -1000,
	-193, -1000, -1000, 194, 187, 607, 1175, -1000, -1000, -1000,
	-1000, -1000, -387, 1547, 462, 188, 277, 41251, 41251, 41251,
	41251, 41251, 503, -1000, -1000, -1000, -1000, 168, -1000, -1000,
	168, -1000, -1000, -1000, -1000, 274, 442, -1000, 41251, 41251,
	595, -1000, -1000, -1000, 781, -1000, -1000, 781, -1000, -1000,
	-1000, -1000, -1000, 1928, 41251, 4, -359, -1000, -350, 17161,
	-1000, -1000, -1000, -1000, 911, 451, 1337, 17763, 17763, 16559,
	-110, 413, 413, 24997, -1000, -1000, -1000, 17161, 17161, 1440,
	707, -1000, 17161, 871, -1000, -1000, -1000, 17161, 17161, 17161,
	1240, 287, -1000, -1000, -1000, -1000, -1000, 2115, -1000, 17161,
	17161, 17161, -1000, -1000, 17161, 17161, -1000, 17161, 17161, 18365,
	1240, 18365, 17161, 17161, 18365, -1000, -1000, -1000, -1000, 18365,
	17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161, 17161, -1000,
	-1000, 1544, 1544, 16559, 10514, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 597, -1000, 552, 552, 552,
	41251, -1000, -1000, -1000, -1000, -1000, -1000, 1455, 2019, -1000,
	1840, 1832, 2114, 2098, -1000, 21987, 2146, -1000, -1000, 41251,
	-287, -1000, 1870, 1900, 604, 604, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8693, 2000, 17161, 1762, 41251, 1595, -1000,
	21385, 41251, 41251, 21987, 21987, 21987, 21987, 21987, -1000, 1782,
	1780, -1000, 1805, 1797, 1817, 41251, -1000, 1532, 1240, 2036,
	19574, 338, 17161, 23793, 1365, 21987, -1000, -1000, 21987, 41251,
	8086, -1000, -1000, -3, -40, -1000, -1000, -1000, -1000, 3016,
	-1000, -1000, 431, 1985, 1876, -1000, -1000, -1000, -1000, -1000,
	1523, -1000, 1520, 1443, 1500, 175, -1000, 1603, 1921, 679,
	679, -1000, 1035, -1000, 1175, 1183, 1174, -1000, -1000, -1000,
	455, -1000, 1972, 41251, 1755, 1750, 1744, -1000, -397, 1024,
	1676, 1562, 17161, 1675, 2073, 1375, 41251, -1000, -1000, 41251,
	-1000, 179, -1000, 353, 41251, -1000, -1000, -1000, 302, 41251,
	-1000, 6911, -1000, -1000, -1000, 187, -1000, -1000, -1000, -1000,
	-1000, -1000, 41251, 206, -1000, 1673, 1244, -1000, -1000, 1556,
	-1000, -1000, -1000, -1000, 184, 279, 166, 1167, 166, -1000,
	41251, 556, 1749, 41251, -1000, -1000, -1000, 799, 799, -1000,
	-1000, 1919, -1000, 1175, 1235, 17763, 17763, -1000, 612, -1000,
	1595, 1240, 1663, 1663, -1000, 1663, 1672, -1000, 1663, 143,
	1663, 131, 1663, -1000, -1000, 1240, 1240, 969, 923, -81,
	-1000, 957, 17161, 1605, 1559, 1235, -1000, 1661, 1656, 17161,
	1235, 1235, 1235, -1000, 957, 982, 1479, 1405, -1000, -1000,
	-1000, -1000, 1420, 1235, 1393, -285, 1240, 1498, 1498, 1498,
	1498, 1498, 1496, 1496, 1496, 1496, -1000, -1000, 1240, -1000,
	-1000, 2010, 2010, 2010, 1484, 41853, 41251, -1000, -1000, -1000,
	-1000, 2098, 2092, 1395, -1000, -1000, 60, 396, -1000, 1857,
	1900, -1000, 2072, 1866, 2064, -1000, -1000, -1000, -1000, -1000,
	957, -1000, 1947, 1392, -1000, 691, 1327, -1000, -1000, 15957,
	1487, 1818, 523, 1484, 1369, 1917, 1721, 1738, 1995, -1000,
	-1000, -1000, -1000, 1779, -1000, 1767, -1000, -1000, 1643, -1000,
	-1000, 1373, 1240, 1372, 308, 21987, 1360, 1360, -1000, 513,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 831, 6584, 2149,
	-1000, 1164, -1000, 1036, 189, 1009, -1000, -1000, 679, 679,
	-1000, 747, 742, -1000, 41251, 1653, -1000, 362, 1162, 362,
	1008, -1000, 995, -1000, -1000, -1000, -1000, 1709, 1757, -1000,
	-1000, -1000, -1000, 41251, -1000, -1000, 41251, 41251, 41251, 1651,
	2063, -1000, 17161, 1648, 684, 1274, 41251, 41251, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410,
	679, -367, 284, 282, 679, 679, 679, -400, -1000, -1000,
	1471, 1463, -1000, -141, -1000, 17161, -1000, -1000, -1000, 958,
	958, -1000, 1643, -1000, -1000, -1000, 1290, -1000, -1000, -122,
	41251, 41251, 41251, 41251, -1000, 929, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 612, 17763,
	-1000, -1000, 362, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17161, -1000, 17161, -1000, 2000, 1159, 957, 17161,
	17161, -1000, 994, 972, 1235, -1000, -1000, -1000, 1240, 18365,
	-1000, 18365, -1000, 17161, 214, 413, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1595, 1905, 1595,
	1595, 23793, -1000, -1000, 2092, 2090, 2061, 1852, 1859, 1859,
	1857, -1000, 2059, 2058, -1000, 1158, 2054, 1157, 739, -1000,
	41251, 17161, 1595, -1000, 341, 41251, 1595, 41251, -1000, 2088,
	-1000, -1000, 17161, 1647, -1000, 17161, -1000, -1000, -1000, -1000,
	-1000, -1000, 6657, 2098, 1360, -1000, -1000, 627, -1000, 17161,
	-1000, -1000, -1000, 4951, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1153, 1149, -1000, -1000, 1644, 17161, -1000, -1000,
	-1000, 1284, 1276, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1643, -1000, -1000, -1000, -1000, 302, -398, 1241, 41251,
	924, -1000, 1458, 1375, 292, 1595, 1143, 679, 679, 679,
	907, 879, 28007, 1446, -1000, 41251, 376, -1000, 302, -1000,
	-153, -154, 1235, -1000, -1000, 1983, -1000, -1000, 10514, -1000,
	-1000, 1601, 1698, -1000, -1000, -1000, 446, -1000, 1235, 1235,
	1240, -1000, 1235, 1235, 1267, 1262, -1000, -1000, 1405, -1000,
	876, -1000, 214, 1240, 1736, -1000, -1000, 6657, -1000, 24395,
	-1000, 2050, 2047, 28609, 28609, 597, 2090, -1000, 17161, 17161,
	1847, 889, -1000, -1000, -1000, -1000, 1136, 1127, -1000, 1080,
	-1000, 2147, -1000, 957, -1000, 1595, -1000, 498, 1327, -1000,
	2000, 957, 41251, 957, 59, 2088, -1000, 1235, -1000, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
	1595, -1000, -1000, 41251, 1215, -1000, -1000, 1977, 1401, 63,
	-1000, 1384, -1000, -1000, 483, -1000, 17161, -1000, 28007, 1058,
	913, -1000, -1000, -1000, -1000, -400, -1000, -1000, -1000, -1000,
	-1000, -1000, 338, 1348, -1000, 676, 41251, 41251, 1240, 283,
	-127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17161, -1000, 1240, 1728, -1000, -247, -1000, 1346, -1000, -1000,
	-1000, -1000, -1000, 1346, 1346, -1000, -1000, 957, 1330, -1000,
	872, -1000, -1000, -1000, -1000, -1000, 41251, 1327, 41251, -1000,
	1301, 1240, 1595, 2000, -1000, 1281, -1000, 338, -1000, 1551,
	1562, -1000, -1000, -1000, 15355, -1000, -1000, -1000, -1000, -1000,
	182, -120, 10514, 7479, 1270, -1000, -1000, 1794, -116, -133,
	982, -1000, -332, -1000, -1000, 27405, -1000, -1000, -1000, -1000,
	-1000, 1324, -1000, -1000, 23793, 40649, -1000, -107, 202, -120,
	17161, 1399, 1240, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -11, -1000, -1000, -1000, -1000, -1000, 1556, -1000, 1740,
	-1000, 1240, -1000, -1000, -1000, 1259, -1000, 4270, -230, 1727,
	-1000, -86, -1000, -1000, -1000, 770, 891, -1000, -1000, -1000,
	-1000, -1000, -1000, 1025, 41251, -1000, 385, -1000, -1000, -122,
	-123, -1000, -1000, 40649, -234, 607, 6657, -1000, 1725, 1719,
	2111, -1000, -1000, -1000, -1000, -1000, -1000, -406, 1256, 218,
	-1000, -131, -1000, -1000, 1968, 59, -1000, 2141, -1000, 2112,
	613, 613, -1000, 867, -406, -1000, -149, -240, -1000, -1000,
	-1000, -1000, -1000, 382, 947, -1000, -1000, -1000, -1000, 6657,
	-1000, -1000, -1000, 215, 215, -1000, -1000,
}

var mysqPgo = [...]int{
	0, 2516, 2515, 31, 5, 37, 36, 2514, 22, 119,
	192, 27, 194, 107, 2511, 2509, 2507, 2506, 2502, 2500,
	2499, 233, 230, 227, 2498, 2497, 2496, 2495, 2494, 2493,
	2492, 2486, 2483, 2482, 224, 175, 189, 2480, 2476, 2475,
	124, 190, 101, 94, 188, 2473, 2471, 88, 2470, 2469,
	2468, 183, 182, 181, 769, 2467, 209, 135, 46, 2466,
	2465, 2464, 2463, 2462, 2461, 2459, 2457, 2456, 2454, 2453,
	2452, 2451, 2447, 2446, 2443, 2441, 200, 2439, 2437, 16,
	2436, 95, 2434, 2431, 2430, 2429, 143, 2425, 2424, 2423,
	28, 2422, 2419, 2418, 2417, 2416, 2415, 2414, 156, 2402,
	2401, 2399, 2398, 191, 2397, 2396, 166, 122, 132, 2394,
	2393, 111, 184, 2392, 138, 2390, 2387, 2386, 162, 2385,
	4403, 2384, 74, 71, 2383, 77, 92, 69, 83, 18,
	3, 2381, 2369, 73, 104, 2365, 117, 75, 2364, 105,
	110, 2363, 2362, 11, 7, 2359, 1, 4, 2, 80,
	2355, 2352, 128, 2351, 2350, 2349, 106, 2348, 2347, 4979,
	2345, 98, 149, 115, 86, 2344, 49, 76, 2343, 2342,
	2340, 2336, 2333, 58, 2332, 2331, 2330, 155, 48, 176,
	40, 43, 52, 148, 2329, 42, 90, 2328, 152, 151,
	2327, 60, 39, 47, 2326, 41, 146, 136, 82, 99,
	147, 2325, 2322, 59, 81, 2319, 2318, 2317, 2316, 2315,
	2314, 79, 2313, 61, 2311, 195, 2299, 35, 2297, 66,
	45, 2293, 65, 125, 78, 25, 2292, 173, 2289, 55,
	174, 144, 171, 2288, 2287, 2285, 2283, 186, 288, 2279,
	2275, 85, 170, 153, 160, 103, 2267, 291, 2264, 2261,
	131, 1273, 1779, 24, 172, 2260, 2257, 3730, 154, 38,
	17, 2256, 134, 2255, 2253, 2252, 193, 178, 126, 992,
	67, 2249, 2248, 13, 2247, 2246, 2242, 2241, 2235, 2234,
	129, 34, 33, 32, 201, 70, 10, 108, 169, 84,
	2233, 2232, 2231, 139, 97, 2230, 168, 167, 142, 164,
	2229, 179, 157, 130, 2228, 210, 30, 2226, 2225, 2223,
	2222, 96, 2220, 2219, 2218, 2217, 165, 159, 140, 91,
	2214, 93, 141, 163, 158, 53, 2212, 44, 2208, 2207,
	29, 180, 26, 2199, 12, 63, 68, 21, 123, 121,
	2198, 0, 2197, 15, 177, 289, 161, 2196, 2189, 6,
	9, 8, 2187, 2186, 2185, 2183, 150, 2182, 2177, 2175,
	2172, 20, 50, 19, 14, 127, 89, 2167, 2165, 4573,
	2403, 145, 2164, 196,
}

//line mysql.y:7128
type mysqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	yys               int
}

func (st *mysqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *mysqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *mysqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *mysqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *mysqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *mysqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *mysqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *mysqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *mysqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *mysqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *mysqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *mysqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *mysqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *mysqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *mysqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *mysqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *mysqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *mysqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *mysqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *mysqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *mysqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *mysqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *mysqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *mysqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *mysqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *mysqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *mysqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *mysqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *mysqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *mysqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *mysqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *mysqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *mysqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *mysqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *mysqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *mysqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *mysqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *mysqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *mysqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *mysqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *mysqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *mysqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *mysqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *mysqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *mysqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *mysqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *mysqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *mysqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *mysqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *mysqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *mysqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *mysqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *mysqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *mysqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *mysqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *mysqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *mysqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *mysqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *mysqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *mysqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *mysqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *mysqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *mysqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *mysqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *mysqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *mysqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *mysqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *mysqSymType) partDefUnion() *ast.PartitionDefinition {
	v, _ := st.union.(*ast.PartitionDefinition)
	return v
}

func (st *mysqSymType) partDefsUnion() []*ast.PartitionDefinition {
	v, _ := st.union.([]*ast.PartitionDefinition)
	return v
}

func (st *mysqSymType) partSpecUnion() *ast.PartitionSpec {
	v, _ := st.union.(*ast.PartitionSpec)
	return v
}

func (st *mysqSymType) partSpecsUnion() []*ast.PartitionSpec {
	v, _ := st.union.([]*ast.PartitionSpec)
	return v
}

func (st *mysqSymType) partitionByTypeUnion() ast.PartitionByType {
	v, _ := st.union.(ast.PartitionByType)
	return v
}

func (st *mysqSymType) partitionDefinitionOptionsUnion() *ast.PartitionDefinitionOptions {
	v, _ := st.union.(*ast.PartitionDefinitionOptions)
	return v
}

func (st *mysqSymType) partitionEngineUnion() *ast.PartitionEngine {
	v, _ := st.union.(*ast.PartitionEngine)
	return v
}

func (st *mysqSymType) partitionOptionUnion() *ast.PartitionOption {
	v, _ := st.union.(*ast.PartitionOption)
	return v
}

func (st *mysqSymType) partitionValueRangeUnion() *ast.PartitionValueRange {
	v, _ := st.union.(*ast.PartitionValueRange)
	return v
}

func (st *mysqSymType) partitionsUnion() ast.Partitions {
	v, _ := st.union.(ast.Partitions)
	return v
}

func (st *mysqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *mysqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *mysqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *mysqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *mysqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *mysqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *mysqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *mysqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *mysqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *mysqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *mysqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *mysqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *mysqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *mysqSymType) subPartitionUnion() *ast.SubPartition {
	v, _ := st.union.(*ast.SubPartition)
	return v
}

func (st *mysqSymType) subPartitionDefinitionUnion() *ast.SubPartitionDefinition {
	v, _ := st.union.(*ast.SubPartitionDefinition)
	return v
}

func (st *mysqSymType) subPartitionDefinitionOptionsUnion() *ast.SubPartitionDefinitionOptions {
	v, _ := st.union.(*ast.SubPartitionDefinitionOptions)
	return v
}

func (st *mysqSymType) subPartitionDefinitionsUnion() ast.SubPartitionDefinitions {
	v, _ := st.union.(ast.SubPartitionDefinitions)
	return v
}

func (st *mysqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *mysqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *mysqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *mysqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *mysqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *mysqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *mysqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *mysqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *mysqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *mysqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *mysqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *mysqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *mysqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *mysqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *mysqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *mysqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *mysqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *mysqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var mysqR1 = [...]int{
	0, 367, 368, 368, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 341, 341,
	341, 344, 344, 32, 71, 34, 34, 33, 33, 36,
	36, 35, 8, 8, 8, 9, 9, 9, 9, 9,
	9, 9, 9, 10, 10, 10, 10, 10, 11, 11,
	11, 11, 13, 13, 13, 13, 13, 19, 20, 12,
	12, 21, 21, 84, 84, 22, 23, 23, 23, 23,
	371, 371, 154, 154, 152, 152, 153, 153, 222, 222,
	24, 25, 25, 232, 232, 231, 231, 231, 233, 233,
	233, 233, 269, 269, 26, 26, 26, 26, 26, 104,
	104, 343, 343, 342, 334, 334, 333, 333, 332, 340,
	340, 339, 339, 338, 38, 39, 48, 48, 48, 48,
	49, 50, 345, 345, 307, 55, 55, 54, 54, 54,
	54, 54, 54, 56, 56, 52, 52, 51, 51, 53,
	53, 309, 309, 295, 295, 308, 308, 308, 308, 308,
	308, 308, 294, 294, 115, 115, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 360, 360, 360, 359, 359, 202, 202,
	202, 202, 202, 202, 202, 202, 124, 124, 133, 133,
	133, 133, 133, 122, 122, 123, 121, 121, 121, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 132, 132, 128, 128, 128, 129, 129,
	129, 130, 130, 361, 361, 361, 361, 273, 273, 273,
	273, 276, 276, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 275, 275, 275, 275, 275, 277, 277, 277,
	277, 277, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 279, 279,
	279, 279, 279, 279, 279, 279, 293, 293, 280, 280,
	288, 288, 289, 289, 289, 290, 290, 290, 291, 291,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 287,
	287, 286, 286, 286, 296, 321, 321, 320, 320, 318,
	318, 318, 318, 318, 318, 318, 318, 305, 305, 315,
	315, 315, 315, 315, 304, 304, 300, 300, 300, 301,
	301, 302, 302, 299, 299, 303, 303, 317, 317, 316,
	316, 297, 297, 298, 298, 323, 362, 362, 362, 362,
	362, 363, 363, 324, 352, 354, 354, 354, 353, 353,
	350, 351, 349, 349, 349, 349, 349, 81, 81, 81,
	245, 245, 246, 246, 313, 313, 312, 312, 312, 314,
	314, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 240, 240, 240, 348, 348, 348, 348, 348,
	348, 347, 347, 347, 310, 310, 310, 346, 346, 57,
	57, 186, 186, 365, 365, 366, 366, 366, 45, 45,
	45, 45, 45, 45, 44, 44, 44, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 46, 46, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 86, 86, 87, 87, 87, 87, 89,
	89, 89, 326, 326, 58, 58, 3, 3, 142, 144,
	145, 145, 143, 143, 143, 143, 143, 143, 60, 60,
	59, 59, 147, 146, 148, 148, 148, 1, 1, 2,
	2, 4, 4, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 292, 292, 292, 325, 325,
	327, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 92, 91, 91, 90, 93, 93, 93, 93, 93,
	93, 93, 93, 329, 329, 329, 61, 61, 330, 281,
	282, 283, 5, 6, 306, 328, 100, 100, 28, 37,
	37, 29, 29, 29, 29, 30, 30, 62, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 239,
	239, 248, 248, 238, 238, 262, 262, 262, 241, 241,
	241, 242, 242, 358, 358, 358, 235, 235, 64, 64,
	64, 66, 66, 67, 68, 68, 264, 264, 265, 265,
	69, 70, 82, 82, 82, 82, 82, 82, 85, 85,
	85, 15, 15, 15, 15, 78, 78, 78, 14, 14,
	65, 65, 72, 355, 355, 356, 357, 357, 357, 357,
	73, 75, 31, 31, 31, 31, 31, 31, 110, 110,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 105, 105, 105, 99, 99, 372, 76, 77,
	77, 103, 103, 103, 96, 96, 96, 102, 102, 102,
	16, 16, 17, 221, 221, 18, 18, 107, 107, 109,
	109, 109, 109, 109, 111, 111, 111, 111, 111, 111,
	111, 106, 106, 108, 108, 108, 108, 255, 255, 255,
	254, 254, 136, 136, 138, 137, 137, 139, 139, 140,
	140, 140, 140, 184, 184, 162, 162, 219, 219, 217,
	217, 218, 218, 220, 220, 220, 220, 223, 223, 141,
	141, 141, 141, 149, 149, 150, 150, 151, 151, 263,
	263, 260, 260, 260, 259, 259, 155, 155, 155, 157,
	156, 156, 156, 156, 158, 158, 160, 160, 159, 159,
	161, 166, 166, 165, 165, 163, 163, 163, 163, 164,
	164, 164, 164, 167, 167, 120, 120, 120, 120, 120,
	120, 120, 131, 131, 131, 131, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 83, 83, 83, 236, 236, 168, 168,
	176, 176, 176, 176, 169, 169, 169, 169, 169, 169,
	169, 177, 177, 177, 183, 178, 178, 174, 174, 174,
	174, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 271,
	271, 337, 337, 336, 336, 335, 335, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 373, 373,
	284, 284, 284, 284, 175, 175, 175, 175, 175, 101,
	101, 101, 101, 101, 268, 268, 268, 272, 272, 272,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 189, 189, 97, 97, 187,
	187, 188, 190, 190, 185, 185, 185, 171, 171, 171,
	191, 191, 192, 192, 193, 193, 195, 194, 194, 196,
	197, 197, 197, 198, 198, 199, 199, 199, 47, 47,
	47, 47, 47, 42, 42, 42, 42, 43, 43, 43,
	43, 112, 112, 112, 112, 114, 114, 113, 113, 79,
	79, 80, 80, 80, 118, 118, 119, 119, 119, 116,
	116, 117, 117, 215, 215, 200, 200, 200, 207, 207,
	207, 203, 203, 205, 205, 205, 206, 206, 206, 204,
	212, 212, 214, 214, 213, 213, 209, 209, 210, 210,
	211, 211, 211, 208, 208, 170, 170, 170, 170, 170,
	216, 216, 216, 216, 224, 224, 180, 180, 182, 182,
	181, 135, 225, 225, 229, 226, 226, 230, 230, 230,
	230, 230, 227, 227, 228, 228, 256, 256, 256, 234,
	234, 247, 247, 243, 243, 244, 244, 237, 237, 249,
	249, 249, 74, 179, 179, 322, 322, 319, 252, 252,
	253, 253, 257, 257, 261, 261, 258, 258, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 369, 370, 266,
	267, 267, 267,
}

var mysqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 3, 3, 2, 5, 7, 9,
	8, 7, 8, 1, 1, 10, 11, 9, 8, 8,
	1, 1, 1, 3, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 6, 12, 2, 0,
	2, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	1, 1, 3, 3, 6, 4, 7, 8, 8, 8,
	6, 3, 1, 1, 5, 0, 1, 1, 1, 1,
	2, 2, 2, 0, 1, 4, 4, 4, 4, 4,
	4, 2, 4, 1, 3, 1, 1, 3, 4, 3,
	3, 3, 5, 10, 0, 2, 0, 2, 3, 5,
	3, 4, 2, 3, 2, 3, 3, 3, 3, 2,
	2, 4, 4, 1, 1, 1, 1, 1, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 5, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	0, 3, 3, 2, 2, 2, 1, 2, 2, 0,
	1, 0, 2, 2, 5, 0, 1, 1, 2, 1,
	3, 2, 1, 1, 3, 3, 3, 0, 1, 4,
	3, 3, 4, 2, 0, 2, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 0, 1, 1, 3, 3,
	4, 3, 1, 3, 1, 7, 6, 7, 7, 8,
	8, 0, 1, 5, 2, 1, 1, 1, 0, 1,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 1,
	1, 2, 0, 1, 0, 1, 1, 3, 2, 1,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 0, 2, 0, 2, 0, 2, 2, 0, 1,
	5, 1, 3, 7, 1, 3, 3, 1, 2, 2,
	2, 5, 5, 5, 6, 8, 5, 5, 4, 4,
	4, 6, 5, 5, 2, 2, 2, 2, 3, 3,
	3, 4, 3, 3, 1, 3, 5, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 4, 2, 11, 3, 6, 8, 6, 6, 6,
	13, 8, 6, 10, 5, 5, 5, 5, 5, 7,
	7, 5, 5, 0, 6, 5, 6, 4, 5, 0,
	8, 9, 0, 3, 0, 1, 0, 3, 8, 4,
	1, 3, 3, 6, 7, 7, 8, 4, 0, 1,
	0, 1, 3, 3, 1, 1, 2, 1, 1, 0,
	2, 0, 2, 5, 3, 7, 4, 4, 4, 4,
	3, 3, 3, 7, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 0, 2, 2, 1, 3,
	2, 0, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 3, 3, 0, 2, 2, 2, 2,
	2, 2, 2, 4, 4, 3, 0, 1, 4, 3,
	4, 4, 3, 3, 3, 2, 1, 3, 3, 3,
	5, 7, 7, 6, 5, 3, 2, 3, 3, 3,
	7, 3, 3, 3, 3, 4, 7, 5, 2, 4,
	4, 4, 4, 4, 5, 5, 4, 4, 4, 4,
	4, 4, 4, 4, 2, 2, 4, 4, 4, 4,
	4, 2, 3, 3, 3, 5, 2, 3, 3, 2,
	3, 4, 4, 4, 3, 4, 4, 5, 3, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 1, 1, 2, 1,
	3, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 4, 3, 3, 6, 4, 7, 6, 1, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 2, 1,
	1, 1, 0, 1, 1, 0, 3, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	5, 5, 4, 0, 2, 4, 4, 0, 1, 0,
	1, 2, 3, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 3, 1, 1, 1,
	4, 3, 1, 3, 4, 3, 7, 0, 3, 1,
	3, 1, 3, 1, 1, 3, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 1, 1, 2, 6, 5, 6, 6, 0,
	2, 3, 3, 0, 2, 3, 3, 3, 2, 3,
	1, 6, 3, 4, 3, 1, 3, 4, 5, 6,
	3, 4, 5, 6, 3, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 3, 1, 1, 2, 2, 2,
	2, 1, 1, 2, 9, 6, 6, 6, 2, 2,
	3, 3, 3, 1, 1, 1, 0, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 5, 5,
	6, 4, 4, 8, 6, 8, 6, 8, 5, 4,
	2, 2, 1, 2, 2, 2, 8, 8, 6, 5,
	4, 4, 4, 4, 4, 7, 4, 6, 6, 6,
	4, 4, 4, 7, 8, 6, 5, 6, 8, 11,
	7, 8, 8, 9, 4, 4, 4, 4, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
	2, 0, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 2, 3, 3, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 1, 0, 5, 5,
	2, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 2, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 2, 2,
	0, 3, 0, 2, 0, 1, 3, 1, 3, 2,
	0, 1, 1, 0, 1, 2, 4, 4, 0, 2,
	2, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 3, 3, 3, 0, 3, 1, 1, 0,
	4, 0, 1, 1, 0, 3, 1, 3, 2, 1,
	1, 0, 1, 2, 4, 9, 3, 5, 0, 3,
	3, 0, 1, 0, 2, 2, 0, 2, 2, 2,
	0, 2, 1, 2, 3, 3, 0, 2, 1, 2,
	3, 4, 3, 0, 1, 2, 1, 5, 4, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 0, 3, 0, 1, 0,
	1, 1, 5, 0, 1, 0, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var mysqChk = [...]int{
	-1000, -367, -7, -11, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -62, -63, -64, -66,
	-67, -68, -69, -70, -14, -65, -31, -32, -71, -72,
	-73, -74, -75, -16, -17, -18, -9, -8, -13, 9,
	10, -84, -33, 32, -38, -48, 220, -49, -39, 221,
	-50, 223, 222, 259, 224, 252, 74, 305, 306, 308,
	309, 310, 311, -85, 257, 258, 226, 36, 45, 33,
	34, 37, 230, 265, 266, 229, -10, -34, 8, -369,
	11, 436, 254, 253, 28, -12, 470, 86, -368, 611,
	-215, -200, 22, 33, 29, -199, -195, -103, -200, 20,
	18, 7, -76, -372, -76, -76, 12, 13, -76, -307,
	-309, 86, 156, 86, -76, -55, -54, -52, -51, -53,
	-56, 31, -45, -46, -331, -44, -41, 225, 222, 269,
	120, 121, 259, 260, 261, 224, 243, 258, 262, 257,
	278, -40, 81, 33, 470, 473, -314, 221, 227, 228,
	437, 123, 122, 75, 223, -311, 359, 503, 581, -56,
	583, 102, 104, 582, 44, 233, 584, 585, 586, 510,
	587, 242, 588, 589, 590, 591, 597, 552, 598, 599,
	600, 124, 7, -76, -261, -257, -341, -251, 89, 90,
	91, 467, 245, 501, 502, 294, 81, 41, 356, 359,
	503, 581, 305, 319, 313, 340, 332, 468, 504, 477,
	297, 246, 282, 578, 330, 132, 583, 300, 505, 260,
	364, 365, 506, 366, 102, 308, 403, 596, 299, 507,
	594, 104, 582, 79, 51, 44, 255, 328, 229, 324,
	584, 283, 508, 479, 276, 123, 120, 603, 36, 322,
	50, 30, 593, 122, 49, 585, 147, 509, 586, 510,
	368, 347, 572, 48, 369, 261, 511, 84, 266, 472,
	303, 580, 370, 323, 371, 293, 592, 226, 512, 564,
	372, 373, 573, 513, 348, 352, 514, 395, 374, 610,
	52, 515, 516, 574, 121, 517, 78, 587, 80, 317,
	318, 518, 291, 244, 397, 344, 449, 456, 457, 108,
	109, 452, 110, 458, 111, 459, 460, 461, 450, 112,
	105, 451, 462, 463, 345, 346, 113, 464, 107, 106,
	453, 455, 114, 465, 242, 35, 375, 469, 295, 58,
	270, 398, 46, 350, 607, 45, 568, 519, 571, 343,
	339, 446, 53, 520, 521, 522, 523, 588, 342, 316,
	338, 602, 4, 288, 589, 62, 228, 354, 353, 355,
	277, 394, 335, 524, 525, 526, 249, 82, 527, 325,
	21, 528, 529, 376, 284, 530, 56, 531, 532, 401,
	258, 533, 54, 590, 39, 534, 263, 604, 591, 535,
	536, 537, 538, 265, 539, 378, 540, 377, 349, 351,
	272, 379, 471, 541, 304, 321, 262, 595, 542, 250,
	579, 264, 269, 257, 402, 251, 543, 544, 545, 546,
	547, 298, 563, 548, 549, 309, 597, 447, 43, 550,
	551, 552, 553, 554, 292, 287, 396, 405, 61, 83,
	361, 555, 556, 577, 315, 285, 557, 306, 55, 598,
	599, 600, 279, 601, 9, 608, 609, 381, 124, 289,
	290, 47, 336, 271, 558, 301, 559, 326, 327, 341,
	314, 337, 307, 565, 273, 382, 448, 259, 560, 404,
	286, 357, 362, 302, 475, 278, 383, 576, 474, 334,
	331, 280, 561, 384, 234, 274, 275, 562, 566, 385,
	386, 296, 387, 388, 389, 390, 391, 393, 392, 281,
	473, 312, 329, 363, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 445, 232, -76, 232, -159, -257, 232, -227,
	365, -248, 367, 380, 375, 385, 373, -239, 376, 378,
	272, -358, 395, 232, 382, 220, 368, 377, 386, 387,
	296, 393, 388, 392, 281, 389, 390, 391, -341, 173,
	586, 601, 132, 333, 372, 370, 396, 568, -257, 307,
	-264, 312, -252, -341, -251, 310, -159, -82, 564, 224,
	-266, -266, -105, 568, 570, -178, -120, 140, -131, -134,
	-125, -126, -172, -173, -174, -175, -132, -185, 162, 163,
	170, 141, -183, -135, 26, 466, 438, 437, 173, 31,
	216, 68, 69, 440, 441, 143, 57, 413, 414, -133,
	408, 415, 410, 443, 444, 115, 445, 105, 107, 106,
	446, 447, 448, 345, 346, 449, 450, 451, 108, 109,
	110, 111, 112, 113, 114, 452, 455, 453, 454, 456,
	457, 458, 463, 464, 459, 460, 461, 462, 465, -252,
	-257, 237, 407, 231, 168, 436, -127, -123, -8, -181,
	406, 411, 412, 416, 409, -341, -251, -129, -128, -168,
	92, 98, 103, 99, -364, 116, -369, 93, 94, 95,
	96, 97, 117, 118, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 44, 381, 381, -159,
	-76, -76, -76, -76, -193, -103, -195, -10, -8, -369,
	8, -76, -8, -9, -13, -34, -36, 497, -35, -257,
	-200, -215, 12, 158, 42, 50, -198, -199, -12, -8,
	-120, 19, 23, 24, -108, 164, -120, -257, -77, -108,
	-237, 236, -76, -76, -226, -269, 307, -230, 396, 395,
	-253, -228, -252, -250, -227, 394, 225, 23, 476, 139,
	25, 27, 142, 173, 127, 19, 143, 37, 227, 333,
	243, 172, 239, 437, 220, 72, 478, 408, 410, 406,
	413, 439, 440, 407, 367, 31, 13, 480, 28, 253,
	24, 38, 166, 222, 146, 481, 256, 26, 254, 115,
	118, 483, 22, 75, 248, 14, 241, 40, 16, 484,
	485, 17, 237, 236, 158, 233, 70, 11, 216, 29,
	155, 66, 486, 134, 487, 488, 489, 490, 128, 68,
	156, 20, 605, 411, 412, 33, 569, 466, 267, 168,
	73, 59, 570, 140, 409, 491, 492, 116, 493, 119,
	76, 575, 136, 18, 71, 42, 494, 268, 495, 238,
	606, 496, 399, 497, 157, 223, 436, 69, 498, 231,
	380, 8, 442, 32, 252, 240, 126, 67, 499, 232,
	145, 443, 444, 235, 129, 117, 7, 133, 34, 12,
	74, 77, 414, 415, 416, 57, 125, 470, 144, 15,
	500, 400, 138, 132, -308, 156, -294, -298, -252, 247,
	-324, 243, -159, -317, -316, -252, -369, -104, -247, 233,
	241, 240, 133, -345, 136, 289, 407, 231, -51, -52,
	-53, -227, 172, 585, -86, 264, 268, 87, 87, -298,
	-297, -296, -346, 268, 247, -323, -315, 239, 248, -304,
	240, 241, -299, 233, 134, -346, -299, 238, 248, 243,
	247, 268, 268, 124, 268, 124, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 263, -305, 148, -305, 474,
	474, -311, -346, 243, 233, -346, -346, 235, 35, 35,
	-249, -299, 235, 25, -305, -305, -305, -227, 172, -305,
	-305, -305, -305, 276, 276, -305, -305, -305, -305, -305,
	-305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
	-305, -305, 232, -345, -112, 392, 296, 81, -54, 278,
	-37, -159, -247, 233, 234, -345, 265, -159, 217, -159,
	-241, 156, 15, -241, -238, 381, 379, 366, 371, -241,
	-241, -241, -241, 279, 364, -300, 233, 35, 244, 381,
	279, 364, 279, 280, 279, 280, 374, 384, 279, -262,
	14, 158, 407, 369, 373, 272, 232, 273, 234, 383,
	280, -262, 93, -242, 156, 381, 275, -241, -241, -267,
	-369, -253, 333, -341, 571, -267, -267, 32, 90, 235,
	-252, -78, -252, 93, -15, -11, -22, -21, -23, 148,
	-110, 381, -98, 173, 586, 572, 573, 574, 571, 378,
	579, 577, 575, 279, 576, 87, 136, 138, 139, 4,
	-120, 155, -169, 148, 149, 150, 151, 152, 153, 154,
	158, 140, 142, 156, 157, 137, 159, 160, 161, 162,
	163, 164, 165, 167, 166, 168, 169, 172, 218, 219,
	-126, -126, -126, -126, -183, -369, -369, -369, -126, -236,
	-369, -126, -369, -369, -369, -369, -189, -120, -369, -373,
	-369, -373, -373, -284, -369, -284, -369, -369, -369, -369,
	-369, -369, -369, -369, -369, -369, -369, -369, -369, -369,
	-369, -369, -369, -369, -369, -369, -369, -369, -369, -369,
	-369, -369, -369, -369, -369, -369, -369, -369, -369, -369,
	-369, -369, -369, 217, -369, -369, -369, -369, -369, -284,
	-284, -284, -284, -284, 103, 98, 92, -185, 99, 93,
	-252, -257, -8, -9, -178, -266, -355, -356, -162, -159,
	-369, 296, -252, -252, 265, -198, -12, -8, -193, -199,
	-195, -8, -76, -96, -109, 63, 64, -111, 24, 38,
	67, 65, 23, -370, 88, -370, -215, -370, 87, -36,
	-219, 86, 61, 43, 93, 93, 87, 21, -194, -196,
	-120, 14, -255, 4, -254, 25, -252, 93, 217, 101,
	14, -160, 29, -159, -237, -237, 87, 307, -230, -269,
	-232, -231, 397, 399, 148, -256, -252, 93, 31, 88,
	87, -159, -273, -276, -278, -277, -279, -274, -275, 330,
	331, 173, 334, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 347, 32, 255, 326, 327, 328, 329, 348,
	349, 350, 351, 352, 353, 354, 355, 313, 332, 468,
	314, 315, 316, 317, 318, 319, 321, 322, 323, 324,
	325, -344, -341, 86, 88, 87, -280, 86, -120, -112,
	232, -341, 233, 233, 233, -76, 436, -305, -305, -305,
	263, 19, -44, -41, -331, 18, -40, -41, 225, 120,
	121, 222, 86, -294, 86, -303, -344, -341, 86, 134,
	238, 133, -302, -299, -302, -303, -341, -185, -341, 134,
	134, -341, -341, -223, -252, -223, -223, 23, -223, 23,
	-223, 23, 95, -252, -223, 23, -223, 23, -223, 23,
	-223, 23, -223, 23, 31, 78, 79, 80, 31, 82,
	83, 84, -185, -341, -341, -185, -294, -227, -159, -341,
	95, 95, 95, -305, -305, 95, 93, 93, 93, -305,
	-305, 95, 93, -259, -257, 93, 93, -347, 249, 293,
	295, 95, 95, 95, 95, 31, 93, -348, 31, 593,
	592, 594, 595, 596, 93, 95, 31, 95, 31, 95,
	-252, 86, -159, -118, 283, 220, 222, 225, 76, 93,
	297, 301, 302, 148, 44, 87, 235, 232, -341, -243,
	237, -243, -252, -258, -257, -250, 93, -120, -301, 14,
	158, -262, -262, -241, -159, -301, -262, -241, -159, -241,
	-241, -241, -241, -262, -262, -262, -241, -257, -257, -159,
	-159, -159, -159, -159, -159, -159, -267, -242, -241, 571,
	93, -235, 14, 76, -267, -267, -265, 310, 344, 565,
	566, 567, 87, 470, -152, -159, 571, 571, 571, 571,
	571, 571, -120, -120, -120, -120, 493, -176, 116, 140,
	117, 118, -134, -177, -181, -183, 100, 158, 142, 156,
	157, -125, -126, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -268, -252, 93, 173,
	-130, -129, 99, -364, -130, -106, -108, -120, -120, -341,
	-252, -106, -106, -120, -102, 24, 38, -187, -188, 144,
	-185, -370, -370, 95, 99, -252, -252, -95, -94, 418,
	419, 420, 421, 423, 424, 425, 428, 429, 433, 434,
	417, 435, 422, 427, 430, 431, 432, 426, 329, -120,
	-120, -120, -120, -120, -120, -83, -120, 127, 128, 129,
	-120, -120, -179, -178, -340, -339, -338, -120, -120, -120,
	-120, -120, -120, -120, -120, -120, -120, -120, -120, -120,
	-120, -120, -120, -120, -120, -120, -120, -120, -120, -120,
	-107, 24, 38, -106, -253, -258, -250, -106, -107, -107,
	-106, -106, 217, -215, -370, 87, -357, 399, 400, 569,
	-260, 268, -259, 25, -179, 93, 14, -221, 77, -252,
	-198, -198, 63, 64, 59, -106, -111, -370, -35, 25,
	-217, -252, 62, 93, -285, -227, 356, 357, 173, -120,
	-120, 87, -197, 27, 28, -159, -254, 164, -258, -159,
	-222, 268, -159, -137, -139, -140, -141, -162, -184, -369,
	-142, 489, 486, 14, -152, -153, -161, -257, -230, -232,
	87, 398, 400, 401, 76, 119, -120, -286, 172, -313,
	-312, -311, -294, -296, -297, -298, 88, -286, -290, 362,
	361, -280, -280, -280, -280, -280, -285, -285, -285, -285,
	86, 86, -280, -280, -280, -280, -288, 86, -288, -288,
	-289, 86, -289, -324, -120, -321, -320, -318, -319, 242,
	102, 562, 518, 470, 510, 552, 77, -316, -197, 95,
	-370, -118, -244, 237, -322, -319, -341, -341, -341, -244,
	-341, 93, -341, 93, -341, 93, -87, -58, -1, 605,
	606, 607, 87, 19, -295, -294, -57, 293, -327, -328,
	268, -323, -317, -303, 134, -302, -303, -303, -341, 87,
	29, 124, 124, 124, 124, 470, 222, 32, -245, 509,
	140, 562, 518, -294, -57, -268, 235, -268, -268, 93,
	93, -240, 601, -152, -114, 285, 148, 274, 274, 232,
	232, 287, -159, 298, 300, 299, 297, 301, 302, 23,
	23, 23, 286, 288, 290, 276, -159, -159, -243, 76,
	-154, -159, 26, -257, -159, -241, -241, -159, -241, -241,
	-159, -252, -98, 399, 87, 470, 22, -99, 22, -369,
	116, 117, 118, -177, -125, -126, -125, 139, 256, 87,
	-370, 25, 87, 77, -370, -370, -370, 87, 14, -106,
	-190, -188, 146, -120, -370, -370, -370, 87, 87, 14,
	-272, 25, -370, -370, -370, -370, -370, -189, -370, 14,
	87, 87, -370, -370, 87, 87, -370, 87, 87, 87,
	-337, 87, 87, 87, 87, -370, -370, -370, -370, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, -370,
	-370, -106, -106, -369, 217, -370, -370, -370, -370, -370,
	-253, -356, 568, 400, -166, -165, -163, 74, 236, 75,
	-369, -259, -370, -130, 90, -218, 90, -217, -171, -252,
	95, 99, -200, -136, -138, 14, -111, -183, 88, 87,
	-285, -204, -209, -238, -252, 93, 173, -287, 173, -287,
	356, 357, -196, 217, -167, 15, -170, 32, 57, -11,
	-369, -369, 32, 87, -155, -157, -156, -158, 66, 70,
	72, 67, 68, 69, 73, -263, 25, -137, -9, -8,
	-369, -369, -369, -159, -152, -371, 14, 77, -371, 87,
	217, -231, -233, 402, 399, 405, -341, 93, -86, 87,
	-311, -298, -201, -115, 40, -291, 363, -285, 477, -285,
	-293, 93, -293, 95, 95, 88, -47, -42, -43, 33,
	81, -318, -305, 93, 39, -305, -305, -252, 88, -197,
	-114, -159, 140, 76, -322, -322, -322, -257, -2, 604,
	610, 134, 86, 366, 18, -217, 87, 88, -186, 294,
	88, -88, -252, 88, 86, -303, -303, -252, -369, 232,
	31, 31, 562, 518, 509, -57, -186, -286, -341, 603,
	602, 88, 234, 292, -119, 413, -116, 93, 89, -159,
	-159, -159, -159, -159, 225, 222, -365, 303, -365, 277,
	235, -152, -159, 87, -81, 251, 246, -262, -262, 33,
	-159, 399, 580, 578, -120, 139, 256, -134, -126, -108,
	467, -270, 173, 330, 255, 328, 324, 344, 335, 361,
	326, 362, 323, 322, 321, -270, -268, -120, -120, -193,
	147, -120, 145, -120, -120, -120, -370, 173, 330, 14,
	-120, -120, -120, -338, -120, -120, -120, -336, -335, -130,
	-185, -370, -336, -120, -120, -335, -335, -339, -339, -339,
	-339, -339, -178, -178, -178, -178, -370, -370, -107, -253,
	-163, -299, -299, -299, -223, 87, -234, 22, 14, 57,
	57, -136, -167, -137, -111, -252, -207, 564, -212, 46,
	-210, -211, 47, -208, 48, 56, -287, -287, 164, -198,
	-120, -224, 76, -225, -229, -185, -180, -182, -181, -369,
	-216, -370, -252, -223, -225, -139, -140, -140, -139, -140,
	66, 66, 66, 71, 66, 71, 66, -156, -257, -370,
	-370, -9, -9, -120, -260, 77, -137, -137, -161, -257,
	164, 399, 403, 404, -311, -363, 116, 140, 31, 76,
	359, 102, -361, 172, 506, 557, 562, 518, 510, 552,
	-362, 238, 133, 134, 250, 25, 41, 88, 87, 88,
	87, 88, 87, -246, -245, -43, -42, -305, -305, 95,
	-341, 93, 93, 234, 26, -159, 76, 76, 76, -89,
	608, 95, 86, -3, 81, -120, 86, 19, -294, -185,
	-329, -281, -330, -282, -283, -5, -6, -306, -92, 57,
	102, -61, 44, 233, 588, 589, 124, -369, 601, -321,
	-217, -325, -327, -159, -122, -369, -121, -123, -127, 162,
	163, -186, -159, -113, 283, 291, 86, -117, 90, -343,
	77, 274, 359, 274, -366, 304, 93, -366, -159, -81,
	-47, -159, -241, -241, 33, -341, -370, -134, -126, -369,
	-370, -280, -280, -280, -289, -280, 318, -280, 318, -280,
	-370, -370, 87, -370, 22, -370, -97, 442, -120, 87,
	87, -370, 86, 86, -120, -370, -370, -370, -337, 87,
	-370, 87, -370, 87, -271, 563, -370, -370, -370, -370,
	-370, -370, -370, -370, -370, -370, -370, -164, 22, -164,
	-164, -370, 90, -159, -167, -191, 16, -204, 51, 336,
	-214, -213, 55, 47, -211, 19, 49, 19, 30, -224,
	87, 148, 87, -370, -370, 87, 57, 217, -370, -167,
	-150, -149, 76, 77, -151, 76, -149, 66, 66, -219,
	-370, -370, 87, -222, -137, -167, -167, 217, 116, -369,
	-124, -133, -122, 12, 93, 93, -341, -360, 592, 593,
	31, 95, -305, -305, 134, 134, -159, 86, -285, 93,
	-285, 95, 95, 31, 82, 83, 84, 31, 78, 79,
	80, -159, -159, -159, -159, -326, 86, 19, -120, 86,
	148, 88, -217, -217, 270, 158, -305, 586, 276, 276,
	-305, -305, -305, -91, -90, 608, 88, -370, 87, -292,
	470, 473, -120, -128, -128, -219, 88, -334, 470, -342,
	-252, -252, -252, -252, 95, 97, -125, -285, -120, -120,
	-198, 93, -120, -120, 95, 95, -370, -370, -336, -335,
	-120, -370, -147, -146, -148, 572, 116, 31, -270, -369,
	66, 18, 16, -369, -369, -260, -191, -192, 17, 19,
	-205, 53, -203, 52, -203, -213, 19, 19, 93, 19,
	93, 134, -229, -120, -182, 57, -11, -252, -180, -252,
	-193, -120, 86, -120, -130, -167, -167, -120, -173, 445,
	105, 107, 106, 446, 447, 448, 345, 346, 449, 450,
	451, 108, 109, 110, 111, 112, 113, 114, 452, 455,
	453, 456, 457, 458, 463, 464, 459, 460, 461, 462,
	465, 93, 93, 86, -120, 88, 88, -219, -325, -58,
	88, -217, 95, 88, 271, -181, -369, 93, -305, -305,
	-305, 95, 95, -259, -370, 87, -252, -362, -327, 474,
	474, -370, 25, -333, -332, -253, 86, 77, -101, 158,
	470, -370, -370, -370, -370, -370, 88, 88, -370, -370,
	87, -370, -146, -148, -370, 76, -130, -220, -370, -252,
	238, 19, 19, -220, -220, -166, -192, -120, -178, -206,
	54, 76, 119, 93, 93, 93, 12, -180, 217, -198,
	-217, -144, 366, -193, -370, -217, 88, 25, 88, 610,
	134, 88, -181, -100, -369, 267, -259, 93, 93, -90,
	-93, -11, 87, 148, -217, -159, -370, 468, 73, 471,
	-120, -370, 76, 481, 572, 87, -370, -370, -370, 76,
	119, -225, -252, 88, -370, -369, -198, 88, -202, -11,
	86, -3, 267, -281, -330, -282, -283, -5, -6, -306,
	-79, 470, -332, -310, -253, 93, 95, 88, 62, 469,
	472, -337, -252, 238, -260, -145, -143, -252, 524, -353,
	-352, 466, -363, -359, 116, 140, 102, -361, 562, 518,
	125, 126, -79, -120, 86, -370, -80, 282, 568, -343,
	62, -370, -370, 87, 22, -273, -60, 535, -350, -351,
	76, -354, 372, 534, 555, 116, 93, 88, -217, 243,
	-334, 470, -143, 531, -286, -130, -351, 76, -350, 76,
	13, 12, -4, 609, 88, 284, 471, -59, 26, -144,
	-349, 251, 246, 249, 32, -349, 95, -4, 472, 535,
	245, 31, 116, -130, -147, -146, -146,
}

var mysqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 827,
	827, 827, 0, 827, 0, 0, 827, -2, -2, 827,
	1314, 0, 827, 0, 0, -2, 759, 761, 0, 763,
	-2, 0, 0, 772, 1819, 1819, 822, 0, 0, 0,
	0, 0, 827, 827, 827, 827, 1174, 48, 827, 0,
	83, 84, 778, 779, 780, 63, 0, 1817, 1, 3,
	69, 73, 0, 0, 0, 56, 1183, 0, 76, 0,
	0, 831, 0, 829, 0, 1297, 827, 827, 0, 114,
	115, 0, 0, 0, -2, 118, -2, 147, 148, 149,
	0, 154, 573, 501, 552, 499, 537, -2, 487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 504, 377, 377, 0, 0, -2, 487, 487, 487,
	0, 0, 0, 534, 1299, 439, 377, 377, 377, 0,
	377, 377, 377, 377, 0, 0, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 1201, 153, 1315, 1312, 1313, 38, 39,
	40, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 0, 1291, 0, 686, 928, 0, 748,
	748, 0, 748, 748, 748, 748, 0, 0, 0, 698,
	0, 0, 0, 0, 745, 0, 714, 715, 0, 745,
	0, 721, 751, 0, 726, 748, 748, 729, 1820, 0,
	1820, 1820, 1282, 0, 742, 740, 754, 755, 758, 762,
	0, 767, 770, 1308, 1309, 0, 785, 47, 1553, 777,
	790, 791, 0, 823, 824, 43, 1025, 0, 950, 955,
	966, 979, 980, 981, 982, 983, 985, 986, 0, 0,
	0, 0, 991, 992, 0, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 1155, 0, 1118, 1118, 1042,
	1118, 1120, 1120, 0, 0, 0, 1816, 1594, 1602, 1603,
	1625, 1711, 1760, 1598, 1599, 1580, 1592, 1595, 1583, 1584,
	1586, 1588, 1593, 1600, 1606, 1585, 1605, 1604, 0, 1581,
	1582, 1587, 1597, 1601, 1589, 1590, 1591, 1596, 1607, 1164,
	0, 0, 0, 0, 0, 0, 273, 274, 1024, 1271,
	1120, 1120, 1120, 1120, 1120, -2, -2, 219, 220, 221,
	222, 223, 224, 225, 0, 215, 0, 278, 279, 275,
	276, 277, 1008, 1009, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 1819, 0, 800, 0,
	0, 0, 0, 0, 1183, 0, 1175, 1174, 61, 0,
	827, -2, 0, 0, 0, 0, 45, 0, 50, 887,
	75, 74, 1223, 0, 0, 0, 57, 1184, 65, 67,
	1185, 0, 832, 833, 0, 863, 867, 0, 828, 0,
	0, 1298, 1297, 1297, 100, 0, 1756, 1275, -2, -2,
	0, 0, 1310, 1311, 1284, -2, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, -2, 0, 0, 165, 166, 0, 41,
	404, 0, 161, 0, 397, 338, 0, 1201, 0, 0,
	0, 0, 0, 827, 0, 1292, 142, 143, 150, 151,
	152, 377, 377, 377, 549, 0, 0, 153, 153, 508,
	509, 510, 0, 0, -2, 402, 0, 488, 0, 0,
	391, 391, 395, 393, 394, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 0, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 634, 0, 378, 0, 547,
	548, 440, 0, 0, 0, 0, 0, 0, 524, 525,
	0, 0, 1300, 1301, 0, 0, 0, 377, 377, 0,
	0, 0, 0, 377, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 1214, 0, 0, 0, -2, 0,
	678, 0, 0, 0, 1293, 1293, 0, 685, 0, 687,
	688, 0, 0, 689, 0, 745, 745, 743, 744, 691,
	692, 693, 694, 748, 0, 0, 386, 387, 388, 745,
	748, 0, 748, 748, 748, 748, 745, 745, 745, 748,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1820,
	751, 748, 0, 722, 0, 723, 724, 727, 728, 730,
	1821, 1822, 1331, 1820, 1820, 734, 738, 1283, 760, 768,
	771, 788, 786, 787, 789, 781, 782, 783, 784, 0,
	802, 803, 808, 0, 0, 0, 0, 814, 815, 816,
	0, 0, 819, 820, 821, 0, 0, 0, 0, 0,
	948, 0, 0, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 988, 989, 990, 993, 0, 0, 0, 998, 999,
	0, 0, 0, 0, 0, 837, 0, 1156, 0, 1040,
	0, 1041, 1043, 1044, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1303, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 0, 0, 847, 847, 0, 0, 208,
	209, 210, 211, 212, 226, 227, 228, 229, 230, 280,
	1164, 0, 1024, 0, 0, 44, 792, 793, 0, 911,
	1303, 0, 0, 843, 0, 55, 64, 66, 1183, 59,
	1183, 0, 849, 0, 0, -2, -2, 850, 856, 857,
	858, 859, 860, 52, 1818, 53, 0, 72, 0, 46,
	0, 0, 0, 0, 350, 1226, 0, 0, 1176, 1177,
	1180, 0, 864, 1636, 868, 0, 870, 871, 0, 830,
	0, 98, 0, 927, 0, 0, 0, 1756, 1281, 0,
	102, 103, 0, 0, 0, 361, 1286, 1287, 1288, -2,
	384, 0, 361, 345, 288, 289, 290, 338, 292, 338,
	338, 338, 338, 350, 350, 350, 350, 321, 322, 323,
	324, 325, 0, 0, 307, 338, 338, 338, 338, 328,
	329, 330, 331, 332, 333, 334, 335, 293, 294, 295,
	296, 297, 298, 299, 300, 301, 340, 340, 340, 342,
	342, 0, 42, 0, 365, 0, 1180, 0, 0, 1214,
	1295, 1305, 0, 0, 0, 1295, 120, 0, 0, 0,
	550, 584, 502, 538, 551, 0, 505, 506, -2, 0,
	0, 487, 0, 489, 0, 385, 0, -2, 0, 395,
	0, 391, 395, 392, 395, 383, 396, 528, 529, 530,
	0, 532, 533, 614, 897, 0, 0, 0, 0, 0,
	620, 621, 622, 0, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 539, 540, 541, 542, 543, 544,
	545, 546, 0, 0, 0, 0, 489, 0, 535, 0,
	441, 442, 443, 0, 0, 446, 447, 448, 449, 0,
	0, 452, 453, 454, 914, 915, 455, 456, 481, 482,
	483, 457, 458, 459, 460, 461, 462, 463, 475, 476,
	477, 478, 479, 480, 464, 465, 466, 467, 468, 469,
	472, 0, 135, 1205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1293, 0, 0,
	0, 0, 846, 929, 1316, 1317, 749, 750, 0, 389,
	390, 748, 748, 695, 735, 0, 748, 699, 736, 700,
	702, 701, 703, 716, 717, 748, 706, 746, 747, 707,
	708, 709, 710, 711, 712, 713, 731, 718, 719, 720,
	752, 0, 756, 757, 732, 733, 0, 769, 773, 774,
	775, 776, 0, 0, 805, 94, 810, 811, 812, 813,
	825, 818, 1026, 945, 946, 947, 0, 949, 952, 0,
	1010, 1012, 954, 956, 1021, 1022, 1023, 0, 0, 0,
	0, 0, 960, 964, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 984, 1134, 1135, 1136,
	1001, 281, 282, 0, 1002, 0, 861, 0, 0, 0,
	1000, 0, 0, 0, 0, 838, 839, 1162, 1159, 0,
	0, 1119, 1121, 0, 0, 0, 0, 0, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1137,
	0, 0, 0, 0, 0, 1155, 0, 1003, 1004, 1005,
	0, 0, 0, 1304, 0, 130, 131, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 1165, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 795, 796, 798, 0,
	931, 0, 912, 0, 0, 801, 0, 842, 0, 845,
	58, 60, 854, 855, 0, 872, 851, 54, 49, 0,
	0, 889, 1224, 350, 1246, 0, 359, 359, 356, 1186,
	1187, 0, 1179, 1181, 1182, 77, 869, 865, 0, 943,
	0, 0, 926, 0, 875, 877, 878, 879, 909, 0,
	882, 0, 0, 0, 0, 0, 96, 928, 1276, 101,
	0, 0, 106, 107, 1277, 1278, 1279, 1280, 0, 573,
	-2, 436, 167, 169, 170, 171, 162, -2, 348, 346,
	347, 291, 350, 350, 315, 316, 317, 318, 319, 320,
	0, 0, 308, 309, 310, 311, 302, 0, 303, 304,
	305, 0, 306, 403, 0, 1188, 366, 367, 369, 377,
	0, 372, 373, 0, 377, 377, 0, 398, 399, 0,
	1180, 1205, 0, 0, 0, 1306, 1305, 1305, 1305, 0,
	155, 156, 157, 158, 159, 160, 609, 0, 0, 585,
	607, 608, 153, 0, 0, 163, 491, 490, 0, 641,
	0, 401, 0, 0, 395, 395, 380, 381, 531, 0,
	0, 616, 617, 618, 619, 0, 0, 0, 518, 430,
	0, 519, 520, 489, 491, 361, 0, 444, 445, 450,
	451, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 566, 567, 493, 571, 568,
	493, 572, 1202, 1203, 1204, 0, 0, 679, 0, 0,
	427, 92, 1294, 684, 745, 705, 737, 745, 697, 704,
	725, 765, 809, 0, 0, 0, 0, 817, 0, 0,
	953, 1011, 1013, 957, 0, 961, 965, 0, 0, 0,
	0, 0, 0, 0, 1007, 1031, 1032, 0, 0, 1174,
	0, 1160, 0, 0, 1039, 1122, 1123, 0, 0, 0,
	0, 0, 1050, 1051, 1052, 1053, 1054, 0, 1056, 0,
	0, 0, 1060, 1061, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 1075, 1076, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	1027, 0, 0, 847, 0, 1124, 1125, 1126, 1127, 1128,
	1165, 794, 797, 799, 885, 932, 933, 0, 0, 0,
	0, 913, 1302, 840, 841, 844, -2, 0, 0, 1167,
	0, 0, 872, 943, 873, 0, 852, 51, 888, 0,
	1228, 1227, 1240, 1253, 359, 359, 353, 354, 360, 355,
	357, 358, 1178, 0, 1183, 0, 1264, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 919, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 90, 91, 0, 0,
	0, 104, 105, 0, 0, 111, 362, 363, 144, 153,
	438, 168, 411, 0, 0, 287, 349, 312, 313, 314,
	0, 336, 0, 0, 0, 432, 116, 1192, 1191, 377,
	377, 368, 0, 371, 0, 0, 0, 1307, 339, 400,
	0, 134, 0, 0, 0, 0, 0, 140, 579, 0,
	0, 586, 0, 0, 0, 500, 0, 511, 512, 0,
	613, -2, 675, 365, 0, 379, 382, 898, 0, 0,
	513, 0, 516, 517, 431, 491, 522, 523, 536, 473,
	474, 471, 0, 0, 1215, 1216, 1221, 1219, 1220, 121,
	557, 559, 558, 562, 0, 0, 495, 0, 495, 555,
	0, 427, 1188, 0, 683, 428, 429, 748, 748, 804,
	95, 0, 807, 0, 0, 0, 0, 958, 962, 862,
	0, 0, 338, 338, 1142, 338, 342, 1145, 338, 1147,
	338, 1150, 338, 1153, 1154, 0, 0, 0, 0, 1157,
	1038, 1163, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 132, 133, 1091, 0, 0, 1093, 1095,
	1096, 1066, 1092, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1028, 1029, 0, 1166,
	934, 939, 939, 939, 0, 0, 0, 1289, 1290, 1168,
	1169, 943, 1170, 874, 853, 890, 1246, 0, 1239, 0,
	-2, 1248, 0, 0, 0, 1254, 351, 352, 866, 78,
	944, 81, 0, 1264, 1272, 0, 1255, 1266, 1268, 0,
	0, 0, 1260, 0, 943, 876, 905, 907, 0, 902,
	917, 918, 920, 0, 922, 0, 924, 925, 887, 881,
	883, 0, 0, 0, 98, 0, 943, 943, 97, 0,
	930, 108, 109, 110, 437, 172, 177, 0, 0, 0,
	182, 0, 184, 0, 0, 0, 189, 190, 377, 377,
	412, 0, 284, 286, 0, 0, 175, 350, 0, 350,
	0, 343, 0, 413, 433, 1189, 1190, 0, 0, 370,
	374, 375, 376, 0, 1296, 136, 0, 0, 0, 582,
	0, 610, 0, 0, 0, 0, 0, 0, 164, 492,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 0,
	377, 0, 0, 0, 377, 377, 377, 0, 667, 364,
	0, 0, 638, 635, 514, 0, 213, 214, 216, 0,
	0, 521, 887, 1206, 1207, 1208, 0, 1218, 1222, 124,
	0, 0, 0, 0, 569, 0, 494, 570, 680, 681,
	682, 93, 690, 696, 806, 826, 951, 959, 963, 0,
	995, 1140, 350, 1143, 1144, 1146, 1148, 1149, 1151, 1152,
	996, 997, 0, 1034, 0, 1036, 1183, 0, 1161, 0,
	0, 1048, 0, 0, 0, 1057, 1058, 1059, 0, 0,
	1065, 0, 1067, 0, 0, 0, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1030, 0, 0, 0,
	0, 911, -2, 62, 1170, 1172, 0, 1233, 1231, 1231,
	1241, 1242, 0, 0, 1249, 0, 0, 0, 0, 82,
	0, 0, 0, 1269, 0, 0, 0, 0, 99, 1174,
	899, 906, 0, 0, 900, 0, 901, 921, 923, 880,
	-2, 884, 0, 943, 943, 88, 89, 0, 178, 0,
	180, 206, 207, 0, 183, 185, 186, 187, 193, 194,
	195, 188, 0, 0, 283, 285, 0, 0, 326, 337,
	327, 0, 0, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 887, 137, 138, 139, 574, 0, 584, 0, 0,
	0, 577, 0, 503, 0, 0, 0, 377, 377, 377,
	0, 0, 0, 0, 652, 0, 0, 615, 0, 623,
	0, 0, 0, 217, 218, 0, 1217, 556, 0, 122,
	123, 0, 0, 561, 496, 497, 1129, 1141, 0, 0,
	0, 1158, 0, 0, 0, 0, 1055, 1063, 0, 1094,
	0, 1070, 0, 0, 0, 604, 605, 0, 1090, 0,
	940, 0, 0, 0, 0, 931, 1172, 80, 0, 0,
	1236, 0, 1229, 1232, 1230, 1243, 0, 0, 1250, 0,
	1252, 0, 1273, 1274, 1267, 0, 1259, 1262, 1258, 1261,
	1183, 903, 0, 908, 0, 1174, 87, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 0, 0, 341, 344, 0, 0, 0,
	575, 0, 587, 578, 0, 665, 0, 669, 0, 0,
	0, 672, 673, 674, 651, 0, 655, 405, 639, 636,
	637, 515, 0, 125, 126, 0, 0, 0, 0, 0,
	0, 1033, 1035, 1037, 1046, 1047, 1138, 1139, 1064, 1068,
	0, 1071, 0, 0, 1072, 0, 606, 0, 936, 893,
	894, 941, 942, 0, 0, 886, 79, 1173, 1171, 1225,
	0, 1234, 1235, 1244, 1245, 1251, 0, 1257, 0, 85,
	0, 0, 0, 1183, 179, 0, 198, 0, 583, 0,
	586, 576, 663, 664, 0, 676, 668, 670, 671, 653,
	-2, 1209, 0, 0, 0, 563, 994, 0, 0, 0,
	1091, 1073, 0, 602, 603, 0, 935, 937, 938, 1237,
	1238, 1265, 1263, 904, 911, 0, 86, 418, 411, 1209,
	0, 0, 0, 656, 657, 658, 659, 660, 661, 662,
	553, 1211, 127, 128, 484, 485, 486, 121, 1130, 0,
	1133, 0, 895, 896, 588, 0, 590, 0, -2, 406,
	419, 0, 173, 199, 200, 0, 0, 203, 204, 205,
	196, 197, 117, 0, 0, 677, 0, 1212, 1213, 124,
	1131, 1069, 589, 0, 0, 361, 0, 599, 407, 408,
	0, 414, 415, 416, 417, 201, 202, 611, 0, 0,
	560, 0, 591, 592, 600, 0, 409, 0, 410, 0,
	0, 0, 580, 0, 611, 1210, 0, 0, 601, 597,
	420, 422, 423, 0, 0, 421, 612, 581, 1132, 0,
	424, 425, 426, 593, 594, 595, 596,
}

var mysqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 141, 3, 3, 3, 167, 159, 3,
	86, 88, 164, 162, 87, 163, 217, 165, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 611,
	149, 148, 150, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 169, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 137, 3, 170,
}

var mysqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 138, 139, 140, 142, 143, 144, 145, 146,
	147, 151, 152, 153, 154, 155, 156, 157, 158, 160,
	161, 166, 168, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var mysqTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 0,
}

var mysqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func mysqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	mysqDebug        = 0
	mysqErrorVerbose = false
)

type mysqLexer interface {
	Lex(lval *mysqSymType) int
	Error(s string)
}

type mysqParser interface {
	Parse(mysqLexer) int
	Lookahead() int
}

type mysqParserImpl struct {
	lval  mysqSymType
	stack [mysqInitialStackSize]mysqSymType
	char  int
}

func (p *mysqParserImpl) Lookahead() int {
	return p.char
}

func mysqNewParser() mysqParser {
	return &mysqParserImpl{}
}

const mysqFlag = -1000

func mysqTokname(c int) string {
	if c >= 1 && c-1 < len(mysqToknames) {
		if mysqToknames[c-1] != "" {
			return mysqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mysqStatname(s int) string {
	if s >= 0 && s < len(mysqStatenames) {
		if mysqStatenames[s] != "" {
			return mysqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mysqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mysqErrorVerbose {
		return "syntax error"
	}

	for _, e := range mysqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mysqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := mysqPact[state]
	for tok := TOKSTART; tok-1 < len(mysqToknames); tok++ {
		if n := base + tok; n >= 0 && n < mysqLast && mysqChk[mysqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mysqDef[state] == -2 {
		i := 0
		for mysqExca[i] != -1 || mysqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mysqExca[i] >= 0; i += 2 {
			tok := mysqExca[i]
			if tok < TOKSTART || mysqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mysqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mysqTokname(tok)
	}
	return res
}

func mysqlex1(lex mysqLexer, lval *mysqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = mysqTok1[0]
		goto out
	}
	if char < len(mysqTok1) {
		token = mysqTok1[char]
		goto out
	}
	if char >= mysqPrivate {
		if char < mysqPrivate+len(mysqTok2) {
			token = mysqTok2[char-mysqPrivate]
			goto out
		}
	}
	for i := 0; i < len(mysqTok3); i += 2 {
		token = mysqTok3[i+0]
		if token == char {
			token = mysqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = mysqTok2[1] /* unknown char */
	}
	if mysqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", mysqTokname(token), uint(char))
	}
	return char, token
}

func mysqParse(mysqlex mysqLexer) int {
	return mysqNewParser().Parse(mysqlex)
}

func (mysqrcvr *mysqParserImpl) Parse(mysqlex mysqLexer) int {
	var mysqn int
	var mysqVAL mysqSymType
	var mysqDollar []mysqSymType
	_ = mysqDollar // silence set and not used
	mysqS := mysqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mysqstate := 0
	mysqrcvr.char = -1
	mysqtoken := -1 // mysqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mysqstate = -1
		mysqrcvr.char = -1
		mysqtoken = -1
	}()
	mysqp := -1
	goto mysqstack

ret0:
	return 0

ret1:
	return 1

mysqstack:
	/* put a state and value onto the stack */
	if mysqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mysqTokname(mysqtoken), mysqStatname(mysqstate))
	}

	mysqp++
	if mysqp >= len(mysqS) {
		nyys := make([]mysqSymType, len(mysqS)*2)
		copy(nyys, mysqS)
		mysqS = nyys
	}
	mysqS[mysqp] = mysqVAL
	mysqS[mysqp].yys = mysqstate

mysqnewstate:
	mysqn = mysqPact[mysqstate]
	if mysqn <= mysqFlag {
		goto mysqdefault /* simple state */
	}
	if mysqrcvr.char < 0 {
		mysqrcvr.char, mysqtoken = mysqlex1(mysqlex, &mysqrcvr.lval)
	}
	mysqn += mysqtoken
	if mysqn < 0 || mysqn >= mysqLast {
		goto mysqdefault
	}
	mysqn = mysqAct[mysqn]
	if mysqChk[mysqn] == mysqtoken { /* valid shift */
		mysqrcvr.char = -1
		mysqtoken = -1
		mysqVAL = mysqrcvr.lval
		mysqstate = mysqn
		if Errflag > 0 {
			Errflag--
		}
		goto mysqstack
	}

mysqdefault:
	/* default state action */
	mysqn = mysqDef[mysqstate]
	if mysqn == -2 {
		if mysqrcvr.char < 0 {
			mysqrcvr.char, mysqtoken = mysqlex1(mysqlex, &mysqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mysqExca[xi+0] == -1 && mysqExca[xi+1] == mysqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mysqn = mysqExca[xi+0]
			if mysqn < 0 || mysqn == mysqtoken {
				break
			}
		}
		mysqn = mysqExca[xi+1]
		if mysqn < 0 {
			goto ret0
		}
	}
	if mysqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mysqlex.Error(mysqErrorMessage(mysqstate, mysqtoken))
			Nerrs++
			if mysqDebug >= 1 {
				__yyfmt__.Printf("%s", mysqStatname(mysqstate))
				__yyfmt__.Printf(" saw %s\n", mysqTokname(mysqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mysqp >= 0 {
				mysqn = mysqPact[mysqS[mysqp].yys] + mysqErrCode
				if mysqn >= 0 && mysqn < mysqLast {
					mysqstate = mysqAct[mysqn] /* simulate a shift of "error" */
					if mysqChk[mysqstate] == mysqErrCode {
						goto mysqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mysqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", mysqS[mysqp].yys)
				}
				mysqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mysqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mysqTokname(mysqtoken))
			}
			if mysqtoken == mysqEofCode {
				goto ret1
			}
			mysqrcvr.char = -1
			mysqtoken = -1
			goto mysqnewstate /* try again in the same state */
		}
	}

	/* reduction by production mysqn */
	if mysqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mysqn, mysqStatname(mysqstate))
	}

	mysqnt := mysqn
	mysqpt := mysqp
	_ = mysqpt // guard against "declared and not used"

	mysqp -= mysqR2[mysqn]
	// mysqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if mysqp+1 >= len(mysqS) {
		nyys := make([]mysqSymType, len(mysqS)*2)
		copy(nyys, mysqS)
		mysqS = nyys
	}
	mysqVAL = mysqS[mysqp+1]

	/* consult goto table to find next state */
	mysqn = mysqR1[mysqn]
	mysqg := mysqPgo[mysqn]
	mysqj := mysqg + mysqS[mysqp].yys + 1

	if mysqj >= mysqLast {
		mysqstate = mysqAct[mysqg]
	} else {
		mysqstate = mysqAct[mysqj]
		if mysqChk[mysqstate] != -mysqn {
			mysqstate = mysqAct[mysqg]
		}
	}
	// dummy call; replaced with literal code
	switch mysqnt {

	case 1:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:536
		{
			setParseTree(mysqlex, mysqDollar[1].statementUnion())
		}
	case 2:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:541
		{
		}
	case 3:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:542
		{
		}
	case 4:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:546
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 37:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:582
		{
			setParseTree(mysqlex, nil)
		}
	case 38:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:588
		{
			mysqVAL.colIdent = NewColIdentWithAt(string(mysqDollar[1].str), NoAt)
		}
	case 39:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:592
		{
			mysqVAL.colIdent = NewColIdentWithAt(string(mysqDollar[1].str), SingleAt)
		}
	case 40:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:596
		{
			mysqVAL.colIdent = NewColIdentWithAt(string(mysqDollar[1].str), DoubleAt)
		}
	case 41:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:601
		{
			mysqVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 42:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:605
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 43:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:611
		{
			mysqLOCAL = &OtherAdmin{}
		}
		mysqVAL.union = mysqLOCAL
	case 44:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:617
		{
			mysqLOCAL = &Load{}
		}
		mysqVAL.union = mysqLOCAL
	case 45:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:623
		{
			mysqLOCAL = &With{ctes: mysqDollar[2].ctesUnion(), Recursive: false}
		}
		mysqVAL.union = mysqLOCAL
	case 46:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:627
		{
			mysqLOCAL = &With{ctes: mysqDollar[3].ctesUnion(), Recursive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 47:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:632
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 48:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:636
		{
			mysqLOCAL = mysqDollar[1].withUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 49:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:642
		{
			mysqSLICE := (*[]*ast.CommonTableExpr)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].cteUnion())
		}
	case 50:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.CommonTableExpr
//line mysql.y:646
		{
			mysqLOCAL = []*CommonTableExpr{mysqDollar[1].cteUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 51:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.CommonTableExpr
//line mysql.y:652
		{
			mysqLOCAL = &CommonTableExpr{TableID: mysqDollar[1].tableIdent, Columns: mysqDollar[2].columnsUnion(), Subquery: mysqDollar[4].subqueryUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 52:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:658
		{
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 53:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:662
		{
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 54:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:666
		{
			setLockInSelect(mysqDollar[2].selStmtUnion(), mysqDollar[3].lockUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 55:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:689
		{
			mysqDollar[1].selStmtUnion().SetOrderBy(mysqDollar[2].orderByUnion())
			mysqDollar[1].selStmtUnion().SetLimit(mysqDollar[3].limitUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 56:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:695
		{
			mysqDollar[1].selStmtUnion().SetLimit(mysqDollar[2].limitUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 57:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:700
		{
			mysqDollar[1].selStmtUnion().SetOrderBy(mysqDollar[2].orderByUnion())
			mysqDollar[1].selStmtUnion().SetLimit(mysqDollar[3].limitUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 58:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:706
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
			mysqDollar[2].selStmtUnion().SetOrderBy(mysqDollar[3].orderByUnion())
			mysqDollar[2].selStmtUnion().SetLimit(mysqDollar[4].limitUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 59:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:713
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
			mysqDollar[2].selStmtUnion().SetLimit(mysqDollar[3].limitUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 60:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:719
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
			mysqDollar[2].selStmtUnion().SetOrderBy(mysqDollar[3].orderByUnion())
			mysqDollar[2].selStmtUnion().SetLimit(mysqDollar[4].limitUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 61:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:726
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
		}
	case 62:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:730
		{
			mysqLOCAL = NewSelect(Comments(mysqDollar[2].strs), SelectExprs{&Nextval{Expr: mysqDollar[5].exprUnion()}}, []string{mysqDollar[3].str} /*options*/, nil, TableExprs{&AliasedTableExpr{Expr: mysqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		mysqVAL.union = mysqLOCAL
	case 63:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:736
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 64:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:740
		{
			mysqLOCAL = &Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 65:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:744
		{
			mysqLOCAL = &Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 66:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:748
		{
			mysqLOCAL = &Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 67:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:752
		{
			mysqLOCAL = &Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 68:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:758
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 69:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:762
		{
			setLockInSelect(mysqDollar[1].selStmtUnion(), mysqDollar[2].lockUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 70:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:767
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 71:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:771
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 72:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:777
		{
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 73:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:781
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[2].selectIntoUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 74:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:786
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[2].selectIntoUnion())
			mysqDollar[1].selStmtUnion().SetLock(mysqDollar[3].lockUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 75:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:792
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[3].selectIntoUnion())
			mysqDollar[1].selStmtUnion().SetLock(mysqDollar[2].lockUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 76:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:798
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[2].selectIntoUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 77:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:805
		{
			mysqLOCAL = &Stream{Comments: Comments(mysqDollar[2].strs).Parsed(), SelectExpr: mysqDollar[3].selectExprUnion(), Table: mysqDollar[5].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 78:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:811
		{
			mysqLOCAL = &VStream{Comments: Comments(mysqDollar[2].strs).Parsed(), SelectExpr: mysqDollar[3].selectExprUnion(), Table: mysqDollar[5].tableName, Where: NewWhere(WhereClause, mysqDollar[6].exprUnion()), Limit: mysqDollar[7].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 79:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:819
		{
			mysqLOCAL = NewSelect(Comments(mysqDollar[2].strs), mysqDollar[4].selectExprsUnion() /*SelectExprs*/, mysqDollar[3].strs /*options*/, mysqDollar[5].selectIntoUnion() /*into*/, mysqDollar[6].tableExprsUnion() /*from*/, NewWhere(WhereClause, mysqDollar[7].exprUnion()), GroupBy(mysqDollar[8].exprsUnion()), NewWhere(HavingClause, mysqDollar[9].exprUnion()))
		}
		mysqVAL.union = mysqLOCAL
	case 80:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:823
		{
			mysqLOCAL = NewSelect(Comments(mysqDollar[2].strs), mysqDollar[4].selectExprsUnion() /*SelectExprs*/, mysqDollar[3].strs /*options*/, nil, mysqDollar[5].tableExprsUnion() /*from*/, NewWhere(WhereClause, mysqDollar[6].exprUnion()), GroupBy(mysqDollar[7].exprsUnion()), NewWhere(HavingClause, mysqDollar[8].exprUnion()))
		}
		mysqVAL.union = mysqLOCAL
	case 81:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:831
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := mysqDollar[6].insUnion()
			ins.Action = mysqDollar[1].insertActionUnion()
			ins.Comments = Comments(mysqDollar[2].strs).Parsed()
			ins.Ignore = mysqDollar[3].ignoreUnion()
			ins.Table = mysqDollar[4].tableName
			ins.Partitions = mysqDollar[5].partitionsUnion()
			ins.OnDup = OnDup(mysqDollar[7].updateExprsUnion())
			mysqLOCAL = ins
		}
		mysqVAL.union = mysqLOCAL
	case 82:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:843
		{
			cols := make(Columns, 0, len(mysqDollar[7].updateExprsUnion()))
			vals := make(ValTuple, 0, len(mysqDollar[8].updateExprsUnion()))
			for _, updateList := range mysqDollar[7].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			mysqLOCAL = &Insert{Action: mysqDollar[1].insertActionUnion(), Comments: Comments(mysqDollar[2].strs).Parsed(), Ignore: mysqDollar[3].ignoreUnion(), Table: mysqDollar[4].tableName, Partitions: mysqDollar[5].partitionsUnion(), Columns: cols, Rows: Values{vals}, OnDup: OnDup(mysqDollar[8].updateExprsUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 83:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.InsertAction
//line mysql.y:855
		{
			mysqLOCAL = InsertAct
		}
		mysqVAL.union = mysqLOCAL
	case 84:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.InsertAction
//line mysql.y:859
		{
			mysqLOCAL = ReplaceAct
		}
		mysqVAL.union = mysqLOCAL
	case 85:
		mysqDollar = mysqS[mysqpt-10 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:865
		{
			mysqLOCAL = &Update{With: mysqDollar[1].withUnion(), Comments: Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), TableExprs: mysqDollar[5].tableExprsUnion(), Exprs: mysqDollar[7].updateExprsUnion(), Where: NewWhere(WhereClause, mysqDollar[8].exprUnion()), OrderBy: mysqDollar[9].orderByUnion(), Limit: mysqDollar[10].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 86:
		mysqDollar = mysqS[mysqpt-11 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:871
		{
			mysqLOCAL = &Delete{With: mysqDollar[1].withUnion(), Comments: Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), TableExprs: TableExprs{&AliasedTableExpr{Expr: mysqDollar[6].tableName, As: mysqDollar[7].tableIdent}}, Partitions: mysqDollar[8].partitionsUnion(), Where: NewWhere(WhereClause, mysqDollar[9].exprUnion()), OrderBy: mysqDollar[10].orderByUnion(), Limit: mysqDollar[11].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 87:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:875
		{
			mysqLOCAL = &Delete{With: mysqDollar[1].withUnion(), Comments: Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), Targets: mysqDollar[6].tableNamesUnion(), TableExprs: mysqDollar[8].tableExprsUnion(), Where: NewWhere(WhereClause, mysqDollar[9].exprUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 88:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:879
		{
			mysqLOCAL = &Delete{With: mysqDollar[1].withUnion(), Comments: Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), Targets: mysqDollar[5].tableNamesUnion(), TableExprs: mysqDollar[7].tableExprsUnion(), Where: NewWhere(WhereClause, mysqDollar[8].exprUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 89:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:883
		{
			mysqLOCAL = &Delete{With: mysqDollar[1].withUnion(), Comments: Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), Targets: mysqDollar[5].tableNamesUnion(), TableExprs: mysqDollar[7].tableExprsUnion(), Where: NewWhere(WhereClause, mysqDollar[8].exprUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 90:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:888
		{
		}
	case 91:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:889
		{
		}
	case 92:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableNames
//line mysql.y:893
		{
			mysqLOCAL = TableNames{mysqDollar[1].tableName.ToViewName()}
		}
		mysqVAL.union = mysqLOCAL
	case 93:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:897
		{
			mysqSLICE := (*ast.TableNames)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableName.ToViewName())
		}
	case 94:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableNames
//line mysql.y:903
		{
			mysqLOCAL = TableNames{mysqDollar[1].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 95:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:907
		{
			mysqSLICE := (*ast.TableNames)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableName)
		}
	case 96:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableNames
//line mysql.y:913
		{
			mysqLOCAL = TableNames{mysqDollar[1].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 97:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:917
		{
			mysqSLICE := (*ast.TableNames)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableName)
		}
	case 98:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Partitions
//line mysql.y:922
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 99:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Partitions
//line mysql.y:926
		{
			mysqLOCAL = mysqDollar[3].partitionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 100:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:932
		{
			mysqLOCAL = &Set{Comments: Comments(mysqDollar[2].strs).Parsed(), Exprs: mysqDollar[3].setExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 101:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:938
		{
			mysqLOCAL = &SetTransaction{Comments: Comments(mysqDollar[2].strs).Parsed(), Scope: mysqDollar[3].scopeUnion(), Characteristics: mysqDollar[5].characteristicsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 102:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:942
		{
			mysqLOCAL = &SetTransaction{Comments: Comments(mysqDollar[2].strs).Parsed(), Characteristics: mysqDollar[4].characteristicsUnion(), Scope: ImplicitScope}
		}
		mysqVAL.union = mysqLOCAL
	case 103:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.Characteristic
//line mysql.y:948
		{
			mysqLOCAL = []Characteristic{mysqDollar[1].characteristicUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 104:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:952
		{
			mysqSLICE := (*[]ast.Characteristic)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].characteristicUnion())
		}
	case 105:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Characteristic
//line mysql.y:958
		{
			mysqLOCAL = mysqDollar[3].isolationLevelUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 106:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Characteristic
//line mysql.y:962
		{
			mysqLOCAL = ReadWrite
		}
		mysqVAL.union = mysqLOCAL
	case 107:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Characteristic
//line mysql.y:966
		{
			mysqLOCAL = ReadOnly
		}
		mysqVAL.union = mysqLOCAL
	case 108:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:972
		{
			mysqLOCAL = RepeatableRead
		}
		mysqVAL.union = mysqLOCAL
	case 109:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:976
		{
			mysqLOCAL = ReadCommitted
		}
		mysqVAL.union = mysqLOCAL
	case 110:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:980
		{
			mysqLOCAL = ReadUncommitted
		}
		mysqVAL.union = mysqLOCAL
	case 111:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:984
		{
			mysqLOCAL = Serializable
		}
		mysqVAL.union = mysqLOCAL
	case 112:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Scope
//line mysql.y:990
		{
			mysqLOCAL = SessionScope
		}
		mysqVAL.union = mysqLOCAL
	case 113:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Scope
//line mysql.y:994
		{
			mysqLOCAL = GlobalScope
		}
		mysqVAL.union = mysqLOCAL
	case 114:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1000
		{
			mysqDollar[1].createTableUnion().TableSpec = mysqDollar[2].tableSpecUnion()
			mysqDollar[1].createTableUnion().FullyParsed = true
			mysqLOCAL = mysqDollar[1].createTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 115:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1006
		{
			// Create table [name] like [name]
			mysqDollar[1].createTableUnion().OptLike = mysqDollar[2].optLikeUnion()
			mysqDollar[1].createTableUnion().FullyParsed = true
			mysqLOCAL = mysqDollar[1].createTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 116:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1013
		{
			indexDef := mysqDollar[1].alterTableUnion().AlterOptions[0].(*AddIndexDefinition).IndexDefinition
			indexDef.Columns = mysqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, mysqDollar[5].indexOptionsUnion()...)
			mysqDollar[1].alterTableUnion().AlterOptions = append(mysqDollar[1].alterTableUnion().AlterOptions, mysqDollar[6].alterOptionsUnion()...)
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 117:
		mysqDollar = mysqS[mysqpt-12 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1022
		{
			mysqLOCAL = &CreateView{ViewName: mysqDollar[8].tableName.ToViewName(), Comments: Comments(mysqDollar[2].strs).Parsed(), IsReplace: mysqDollar[3].booleanUnion(), Algorithm: mysqDollar[4].str, Definer: mysqDollar[5].definerUnion(), Security: mysqDollar[6].str, Columns: mysqDollar[9].columnsUnion(), Select: mysqDollar[11].selStmtUnion(), CheckOption: mysqDollar[12].str}
		}
		mysqVAL.union = mysqLOCAL
	case 118:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1026
		{
			mysqDollar[1].createDatabaseUnion().FullyParsed = true
			mysqDollar[1].createDatabaseUnion().CreateOptions = mysqDollar[2].databaseOptionsUnion()
			mysqLOCAL = mysqDollar[1].createDatabaseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 119:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1033
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 120:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1037
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 121:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:1042
		{
			mysqVAL.colIdent = NewColIdent("")
		}
	case 122:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1046
		{
			mysqVAL.colIdent = mysqDollar[2].colIdent
		}
	case 123:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1052
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 124:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.VindexParam
//line mysql.y:1057
		{
			var v []VindexParam
			mysqLOCAL = v
		}
		mysqVAL.union = mysqLOCAL
	case 125:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.VindexParam
//line mysql.y:1062
		{
			mysqLOCAL = mysqDollar[2].vindexParamsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 126:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.VindexParam
//line mysql.y:1068
		{
			mysqLOCAL = make([]VindexParam, 0, 4)
			mysqLOCAL = append(mysqLOCAL, mysqDollar[1].vindexParam)
		}
		mysqVAL.union = mysqLOCAL
	case 127:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1073
		{
			mysqSLICE := (*[]ast.VindexParam)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].vindexParam)
		}
	case 128:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1079
		{
			mysqVAL.vindexParam = VindexParam{Key: mysqDollar[1].colIdent, Val: mysqDollar[3].str}
		}
	case 129:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.JSONObjectParam
//line mysql.y:1084
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 130:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.JSONObjectParam
//line mysql.y:1088
		{
			mysqLOCAL = mysqDollar[1].jsonObjectParamsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 131:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.JSONObjectParam
//line mysql.y:1094
		{
			mysqLOCAL = []*JSONObjectParam{mysqDollar[1].jsonObjectParam}
		}
		mysqVAL.union = mysqLOCAL
	case 132:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1098
		{
			mysqSLICE := (*[]*ast.JSONObjectParam)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].jsonObjectParam)
		}
	case 133:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1104
		{
			mysqVAL.jsonObjectParam = &JSONObjectParam{Key: mysqDollar[1].exprUnion(), Value: mysqDollar[3].exprUnion()}
		}
	case 134:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.CreateTable
//line mysql.y:1110
		{
			mysqLOCAL = &CreateTable{Comments: Comments(mysqDollar[2].strs).Parsed(), Table: mysqDollar[6].tableName, IfNotExists: mysqDollar[5].booleanUnion(), Temp: mysqDollar[3].booleanUnion()}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 135:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1117
		{
			mysqLOCAL = &AlterTable{Comments: Comments(mysqDollar[2].strs).Parsed(), Table: mysqDollar[4].tableName}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 136:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1124
		{
			mysqLOCAL = &AlterTable{Table: mysqDollar[7].tableName, AlterOptions: []AlterOption{&AddIndexDefinition{IndexDefinition: &IndexDefinition{Info: &IndexInfo{Name: mysqDollar[4].colIdent, Type: string(mysqDollar[3].str)}, Options: mysqDollar[5].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 137:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1129
		{
			mysqLOCAL = &AlterTable{Table: mysqDollar[8].tableName, AlterOptions: []AlterOption{&AddIndexDefinition{IndexDefinition: &IndexDefinition{Info: &IndexInfo{Name: mysqDollar[5].colIdent, Type: string(mysqDollar[3].str) + " " + string(mysqDollar[4].str), Fulltext: true}, Options: mysqDollar[6].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 138:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1134
		{
			mysqLOCAL = &AlterTable{Table: mysqDollar[8].tableName, AlterOptions: []AlterOption{&AddIndexDefinition{IndexDefinition: &IndexDefinition{Info: &IndexInfo{Name: mysqDollar[5].colIdent, Type: string(mysqDollar[3].str) + " " + string(mysqDollar[4].str), Spatial: true}, Options: mysqDollar[6].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 139:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1139
		{
			mysqLOCAL = &AlterTable{Table: mysqDollar[8].tableName, AlterOptions: []AlterOption{&AddIndexDefinition{IndexDefinition: &IndexDefinition{Info: &IndexInfo{Name: mysqDollar[5].colIdent, Type: string(mysqDollar[3].str) + " " + string(mysqDollar[4].str), Unique: true}, Options: mysqDollar[6].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 140:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.CreateDatabase
//line mysql.y:1146
		{
			mysqLOCAL = &CreateDatabase{Comments: Comments(mysqDollar[4].strs).Parsed(), DBName: mysqDollar[6].tableIdent, IfNotExists: mysqDollar[5].booleanUnion()}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 141:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.AlterDatabase
//line mysql.y:1153
		{
			mysqLOCAL = &AlterDatabase{}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 144:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.TableSpec
//line mysql.y:1164
		{
			mysqLOCAL = mysqDollar[2].tableSpecUnion()
			mysqLOCAL.Options = mysqDollar[4].tableOptionsUnion()
			mysqLOCAL.PartitionOption = mysqDollar[5].partitionOptionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 145:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1171
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 146:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1175
		{
			mysqLOCAL = mysqDollar[1].databaseOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 147:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1181
		{
			mysqLOCAL = []DatabaseOption{mysqDollar[1].databaseOption}
		}
		mysqVAL.union = mysqLOCAL
	case 148:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1185
		{
			mysqLOCAL = []DatabaseOption{mysqDollar[1].databaseOption}
		}
		mysqVAL.union = mysqLOCAL
	case 149:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1189
		{
			mysqLOCAL = []DatabaseOption{mysqDollar[1].databaseOption}
		}
		mysqVAL.union = mysqLOCAL
	case 150:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1193
		{
			mysqSLICE := (*[]ast.DatabaseOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].databaseOption)
		}
	case 151:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1197
		{
			mysqSLICE := (*[]ast.DatabaseOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].databaseOption)
		}
	case 152:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1201
		{
			mysqSLICE := (*[]ast.DatabaseOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].databaseOption)
		}
	case 153:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1207
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 154:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1211
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 155:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1217
		{
			mysqVAL.databaseOption = DatabaseOption{Type: CharacterSetType, Value: (mysqDollar[4].colIdent.String()), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 156:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1221
		{
			mysqVAL.databaseOption = DatabaseOption{Type: CharacterSetType, Value: (encodeSQLString(mysqDollar[4].str)), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 157:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1227
		{
			mysqVAL.databaseOption = DatabaseOption{Type: CollateType, Value: (mysqDollar[4].colIdent.String()), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 158:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1231
		{
			mysqVAL.databaseOption = DatabaseOption{Type: CollateType, Value: (encodeSQLString(mysqDollar[4].str)), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 159:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1237
		{
			mysqVAL.databaseOption = DatabaseOption{Type: EncryptionType, Value: (mysqDollar[4].colIdent.String()), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 160:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1241
		{
			mysqVAL.databaseOption = DatabaseOption{Type: EncryptionType, Value: (encodeSQLString(mysqDollar[4].str)), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 161:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.OptLike
//line mysql.y:1247
		{
			mysqLOCAL = &OptLike{LikeTable: mysqDollar[2].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 162:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.OptLike
//line mysql.y:1251
		{
			mysqLOCAL = &OptLike{LikeTable: mysqDollar[3].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 163:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.ColumnDefinition
//line mysql.y:1257
		{
			mysqLOCAL = []*ColumnDefinition{mysqDollar[1].columnDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 164:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1261
		{
			mysqSLICE := (*[]*ast.ColumnDefinition)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].columnDefinitionUnion())
		}
	case 165:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.TableSpec
//line mysql.y:1267
		{
			mysqLOCAL = &TableSpec{}
			mysqLOCAL.AddColumn(mysqDollar[1].columnDefinitionUnion())
		}
		mysqVAL.union = mysqLOCAL
	case 166:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.TableSpec
//line mysql.y:1272
		{
			mysqLOCAL = &TableSpec{}
			mysqLOCAL.AddConstraint(mysqDollar[1].constraintDefinitionUnion())
		}
		mysqVAL.union = mysqLOCAL
	case 167:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1277
		{
			mysqVAL.tableSpecUnion().AddColumn(mysqDollar[3].columnDefinitionUnion())
		}
	case 168:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1281
		{
			mysqVAL.tableSpecUnion().AddColumn(mysqDollar[3].columnDefinitionUnion())
			mysqVAL.tableSpecUnion().AddConstraint(mysqDollar[4].constraintDefinitionUnion())
		}
	case 169:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1286
		{
			mysqVAL.tableSpecUnion().AddIndex(mysqDollar[3].indexDefinitionUnion())
		}
	case 170:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1290
		{
			mysqVAL.tableSpecUnion().AddConstraint(mysqDollar[3].constraintDefinitionUnion())
		}
	case 171:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1294
		{
			mysqVAL.tableSpecUnion().AddConstraint(mysqDollar[3].constraintDefinitionUnion())
		}
	case 172:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ColumnDefinition
//line mysql.y:1305
		{
			mysqDollar[2].columnType.Options = mysqDollar[4].columnTypeOptionsUnion()
			if mysqDollar[2].columnType.Options.Collate == "" {
				mysqDollar[2].columnType.Options.Collate = mysqDollar[3].str
			}
			mysqDollar[2].columnType.Options.Reference = mysqDollar[5].referenceDefinitionUnion()
			mysqLOCAL = &ColumnDefinition{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType}
		}
		mysqVAL.union = mysqLOCAL
	case 173:
		mysqDollar = mysqS[mysqpt-10 : mysqpt+1]
		var mysqLOCAL *ast.ColumnDefinition
//line mysql.y:1314
		{
			mysqDollar[2].columnType.Options = mysqDollar[9].columnTypeOptionsUnion()
			mysqDollar[2].columnType.Options.As = mysqDollar[7].exprUnion()
			mysqDollar[2].columnType.Options.Reference = mysqDollar[10].referenceDefinitionUnion()
			mysqDollar[2].columnType.Options.Collate = mysqDollar[3].str
			mysqLOCAL = &ColumnDefinition{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType}
		}
		mysqVAL.union = mysqLOCAL
	case 174:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:1323
		{
			mysqVAL.str = ""
		}
	case 175:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1327
		{
			mysqVAL.str = ""
		}
	case 176:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1336
		{
			mysqLOCAL = &ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: colKeyNone, Comment: nil, As: nil, Invisible: nil, Format: UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		mysqVAL.union = mysqLOCAL
	case 177:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1340
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 178:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1346
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 179:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1352
		{
			mysqDollar[1].columnTypeOptionsUnion().Default = mysqDollar[4].exprUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 180:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1357
		{
			mysqDollar[1].columnTypeOptionsUnion().Default = mysqDollar[3].exprUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 181:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1362
		{
			mysqDollar[1].columnTypeOptionsUnion().OnUpdate = mysqDollar[4].exprUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 182:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1367
		{
			mysqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 183:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1372
		{
			mysqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(mysqDollar[3].str)
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 184:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1377
		{
			mysqDollar[1].columnTypeOptionsUnion().KeyOpt = mysqDollar[2].colKeyOptUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 185:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1382
		{
			mysqDollar[1].columnTypeOptionsUnion().Collate = encodeSQLString(mysqDollar[3].str)
		}
	case 186:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1386
		{
			mysqDollar[1].columnTypeOptionsUnion().Collate = string(mysqDollar[3].colIdent.String())
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 187:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1391
		{
			mysqDollar[1].columnTypeOptionsUnion().Format = mysqDollar[3].columnFormatUnion()
		}
	case 188:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1395
		{
			mysqDollar[1].columnTypeOptionsUnion().SRID = NewIntLiteral(mysqDollar[3].str)
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 189:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1400
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 190:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1406
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 191:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1412
		{
			mysqDollar[1].columnTypeOptionsUnion().EngineAttribute = ast.NewStrLiteral(mysqDollar[4].str)
		}
	case 192:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1416
		{
			mysqDollar[1].columnTypeOptionsUnion().SecondaryEngineAttribute = ast.NewStrLiteral(mysqDollar[4].str)
		}
	case 193:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnFormat
//line mysql.y:1422
		{
			mysqLOCAL = FixedFormat
		}
		mysqVAL.union = mysqLOCAL
	case 194:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnFormat
//line mysql.y:1426
		{
			mysqLOCAL = DynamicFormat
		}
		mysqVAL.union = mysqLOCAL
	case 195:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnFormat
//line mysql.y:1430
		{
			mysqLOCAL = DefaultFormat
		}
		mysqVAL.union = mysqLOCAL
	case 196:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnStorage
//line mysql.y:1436
		{
			mysqLOCAL = VirtualStorage
		}
		mysqVAL.union = mysqLOCAL
	case 197:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnStorage
//line mysql.y:1440
		{
			mysqLOCAL = StoredStorage
		}
		mysqVAL.union = mysqLOCAL
	case 198:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1445
		{
			mysqLOCAL = &ColumnTypeOptions{}
		}
		mysqVAL.union = mysqLOCAL
	case 199:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1449
		{
			mysqDollar[1].columnTypeOptionsUnion().Storage = mysqDollar[2].columnStorageUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 200:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1454
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 201:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1460
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 202:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1466
		{
			mysqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(mysqDollar[3].str)
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 203:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1471
		{
			mysqDollar[1].columnTypeOptionsUnion().KeyOpt = mysqDollar[2].colKeyOptUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 204:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1476
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 205:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1482
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 206:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1490
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 208:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1497
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 209:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1501
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 210:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1505
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 211:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1509
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 212:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1513
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("now"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 215:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1524
		{
			mysqLOCAL = &NullVal{}
		}
		mysqVAL.union = mysqLOCAL
	case 217:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1531
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 218:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1535
		{
			mysqLOCAL = &UnaryExpr{Operator: UMinusOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 219:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1541
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 220:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1545
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 221:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1549
		{
			mysqLOCAL = mysqDollar[1].boolValUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 222:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1553
		{
			mysqLOCAL = NewHexLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 223:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1557
		{
			mysqLOCAL = NewHexNumLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 224:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1561
		{
			mysqLOCAL = NewBitLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 225:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1565
		{
			mysqLOCAL = NewArgument(mysqDollar[1].str[1:])
			bindVariable(mysqlex, mysqDollar[1].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 226:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1570
		{
			mysqLOCAL = &IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: NewBitLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 227:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1574
		{
			mysqLOCAL = &IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: NewHexNumLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 228:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1578
		{
			mysqLOCAL = &IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: NewHexLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 229:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1582
		{
			mysqLOCAL = &IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: mysqDollar[2].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 230:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1586
		{
			bindVariable(mysqlex, mysqDollar[2].str[1:])
			mysqLOCAL = &IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: NewArgument(mysqDollar[2].str[1:])}
		}
		mysqVAL.union = mysqLOCAL
	case 231:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1593
		{
			mysqVAL.str = Armscii8Str
		}
	case 232:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1597
		{
			mysqVAL.str = ASCIIStr
		}
	case 233:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1601
		{
			mysqVAL.str = Big5Str
		}
	case 234:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1605
		{
			mysqVAL.str = UBinaryStr
		}
	case 235:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1609
		{
			mysqVAL.str = Cp1250Str
		}
	case 236:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1613
		{
			mysqVAL.str = Cp1251Str
		}
	case 237:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1617
		{
			mysqVAL.str = Cp1256Str
		}
	case 238:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1621
		{
			mysqVAL.str = Cp1257Str
		}
	case 239:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1625
		{
			mysqVAL.str = Cp850Str
		}
	case 240:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1629
		{
			mysqVAL.str = Cp852Str
		}
	case 241:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1633
		{
			mysqVAL.str = Cp866Str
		}
	case 242:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1637
		{
			mysqVAL.str = Cp932Str
		}
	case 243:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1641
		{
			mysqVAL.str = Dec8Str
		}
	case 244:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1645
		{
			mysqVAL.str = EucjpmsStr
		}
	case 245:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1649
		{
			mysqVAL.str = EuckrStr
		}
	case 246:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1653
		{
			mysqVAL.str = Gb18030Str
		}
	case 247:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1657
		{
			mysqVAL.str = Gb2312Str
		}
	case 248:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1661
		{
			mysqVAL.str = GbkStr
		}
	case 249:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1665
		{
			mysqVAL.str = Geostd8Str
		}
	case 250:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1669
		{
			mysqVAL.str = GreekStr
		}
	case 251:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1673
		{
			mysqVAL.str = HebrewStr
		}
	case 252:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1677
		{
			mysqVAL.str = Hp8Str
		}
	case 253:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1681
		{
			mysqVAL.str = Keybcs2Str
		}
	case 254:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1685
		{
			mysqVAL.str = Koi8rStr
		}
	case 255:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1689
		{
			mysqVAL.str = Koi8uStr
		}
	case 256:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1693
		{
			mysqVAL.str = Latin1Str
		}
	case 257:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1697
		{
			mysqVAL.str = Latin2Str
		}
	case 258:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1701
		{
			mysqVAL.str = Latin5Str
		}
	case 259:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1705
		{
			mysqVAL.str = Latin7Str
		}
	case 260:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1709
		{
			mysqVAL.str = MacceStr
		}
	case 261:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1713
		{
			mysqVAL.str = MacromanStr
		}
	case 262:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1717
		{
			mysqVAL.str = SjisStr
		}
	case 263:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1721
		{
			mysqVAL.str = Swe7Str
		}
	case 264:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1725
		{
			mysqVAL.str = Tis620Str
		}
	case 265:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1729
		{
			mysqVAL.str = Ucs2Str
		}
	case 266:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1733
		{
			mysqVAL.str = UjisStr
		}
	case 267:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1737
		{
			mysqVAL.str = Utf16Str
		}
	case 268:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1741
		{
			mysqVAL.str = Utf16leStr
		}
	case 269:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1745
		{
			mysqVAL.str = Utf32Str
		}
	case 270:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1749
		{
			mysqVAL.str = Utf8Str
		}
	case 271:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1753
		{
			mysqVAL.str = Utf8mb4Str
		}
	case 272:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1757
		{
			mysqVAL.str = Utf8Str
		}
	case 275:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1767
		{
			mysqLOCAL = NewIntLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 276:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1771
		{
			mysqLOCAL = NewFloatLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 277:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1775
		{
			mysqLOCAL = NewDecimalLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 278:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1781
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 279:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1785
		{
			mysqLOCAL = &UnaryExpr{Operator: NStringOp, Expr: ast.NewStrLiteral(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 280:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1789
		{
			mysqLOCAL = &IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: ast.NewStrLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 281:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1795
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 282:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1799
		{
			mysqLOCAL = NewArgument(mysqDollar[1].str[1:])
			bindVariable(mysqlex, mysqDollar[1].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 283:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1806
		{
			mysqLOCAL = colKeyPrimary
		}
		mysqVAL.union = mysqLOCAL
	case 284:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1810
		{
			mysqLOCAL = colKeyUnique
		}
		mysqVAL.union = mysqLOCAL
	case 285:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1814
		{
			mysqLOCAL = colKeyUniqueKey
		}
		mysqVAL.union = mysqLOCAL
	case 286:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1818
		{
			mysqLOCAL = colKey
		}
		mysqVAL.union = mysqLOCAL
	case 287:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1824
		{
			mysqVAL.columnType = mysqDollar[1].columnType
			mysqVAL.columnType.Unsigned = mysqDollar[2].booleanUnion()
			mysqVAL.columnType.Zerofill = mysqDollar[3].booleanUnion()
		}
	case 291:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1835
		{
			mysqVAL.columnType = mysqDollar[1].columnType
			mysqVAL.columnType.Length = mysqDollar[2].literalUnion()
		}
	case 292:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1840
		{
			mysqVAL.columnType = mysqDollar[1].columnType
		}
	case 293:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1846
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 294:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1850
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 295:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1854
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 296:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1858
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 297:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1862
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 298:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1866
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 299:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1870
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 300:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1874
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 301:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1878
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 302:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1884
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 303:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1890
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 304:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1896
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 305:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1902
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 306:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1908
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 307:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1916
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 308:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1920
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 309:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1924
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 310:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1928
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 311:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1932
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 312:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1938
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion(), Charset: mysqDollar[3].columnCharset}
		}
	case 313:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1942
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html
			mysqVAL.columnType = ColumnType{Type: "binary", Length: mysqDollar[2].literalUnion()}
		}
	case 314:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1948
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion(), Charset: mysqDollar[3].columnCharset}
		}
	case 315:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1952
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 316:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1956
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 317:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1960
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 318:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1964
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 319:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1968
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 320:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1972
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 321:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1976
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 322:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1980
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 323:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1984
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 324:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1988
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 325:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1992
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 326:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:1996
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), EnumValues: mysqDollar[3].strs, Charset: mysqDollar[5].columnCharset}
		}
	case 327:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2001
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str), EnumValues: mysqDollar[3].strs, Charset: mysqDollar[5].columnCharset}
		}
	case 328:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2007
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 329:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2011
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 330:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2015
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 331:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2019
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 332:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2023
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 333:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2027
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 334:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2031
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 335:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2035
		{
			mysqVAL.columnType = ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 336:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2041
		{
			mysqVAL.strs = make([]string, 0, 4)
			mysqVAL.strs = append(mysqVAL.strs, encodeSQLString(mysqDollar[1].str))
		}
	case 337:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2046
		{
			mysqVAL.strs = append(mysqDollar[1].strs, encodeSQLString(mysqDollar[3].str))
		}
	case 338:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2051
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 339:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2055
		{
			mysqLOCAL = NewIntLiteral(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 340:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2060
		{
			mysqVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 341:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2064
		{
			mysqVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(mysqDollar[2].str),
				Scale:  NewIntLiteral(mysqDollar[4].str),
			}
		}
	case 342:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2072
		{
			mysqVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 343:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2076
		{
			mysqVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(mysqDollar[2].str),
			}
		}
	case 344:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2082
		{
			mysqVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(mysqDollar[2].str),
				Scale:  NewIntLiteral(mysqDollar[4].str),
			}
		}
	case 345:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2090
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 346:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2094
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 347:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2098
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 348:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2103
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 349:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2107
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 350:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2112
		{
			mysqVAL.columnCharset = ColumnCharset{}
		}
	case 351:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2116
		{
			mysqVAL.columnCharset = ColumnCharset{Name: string(mysqDollar[2].colIdent.String()), Binary: mysqDollar[3].booleanUnion()}
		}
	case 352:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2120
		{
			mysqVAL.columnCharset = ColumnCharset{Name: encodeSQLString(mysqDollar[2].str), Binary: mysqDollar[3].booleanUnion()}
		}
	case 353:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2124
		{
			mysqVAL.columnCharset = ColumnCharset{Name: string(mysqDollar[2].str)}
		}
	case 354:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2128
		{
			// ASCII: Shorthand for CHARACTER SET latin1.
			mysqVAL.columnCharset = ColumnCharset{Name: "latin1", Binary: mysqDollar[2].booleanUnion()}
		}
	case 355:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2133
		{
			// UNICODE: Shorthand for CHARACTER SET ucs2.
			mysqVAL.columnCharset = ColumnCharset{Name: "ucs2", Binary: mysqDollar[2].booleanUnion()}
		}
	case 356:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2138
		{
			// BINARY: Shorthand for default CHARACTER SET but with binary collation
			mysqVAL.columnCharset = ColumnCharset{Name: "", Binary: true}
		}
	case 357:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2143
		{
			// BINARY ASCII: Shorthand for CHARACTER SET latin1 with binary collation
			mysqVAL.columnCharset = ColumnCharset{Name: "latin1", Binary: true}
		}
	case 358:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2148
		{
			// BINARY UNICODE: Shorthand for CHARACTER SET ucs2 with binary collation
			mysqVAL.columnCharset = ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 359:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2154
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 360:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2158
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 361:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2163
		{
			mysqVAL.str = ""
		}
	case 362:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2167
		{
			mysqVAL.str = string(mysqDollar[2].colIdent.String())
		}
	case 363:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2171
		{
			mysqVAL.str = encodeSQLString(mysqDollar[2].str)
		}
	case 364:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.IndexDefinition
//line mysql.y:2178
		{
			mysqLOCAL = &IndexDefinition{Info: mysqDollar[1].indexInfoUnion(), Columns: mysqDollar[3].indexColumnsUnion(), Options: mysqDollar[5].indexOptionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 365:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:2183
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 366:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:2187
		{
			mysqLOCAL = mysqDollar[1].indexOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 367:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:2193
		{
			mysqLOCAL = []*IndexOption{mysqDollar[1].indexOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 368:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2197
		{
			mysqSLICE := (*[]*ast.IndexOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].indexOptionUnion())
		}
	case 369:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2203
		{
			mysqLOCAL = mysqDollar[1].indexOptionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 370:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2207
		{
			// should not be string
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 371:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2212
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 372:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2216
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 373:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2220
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 374:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2224
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str) + " " + string(mysqDollar[2].str), String: mysqDollar[3].colIdent.String()}
		}
		mysqVAL.union = mysqLOCAL
	case 375:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2228
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 376:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2232
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 377:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2238
		{
			mysqVAL.str = ""
		}
	case 378:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2242
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 379:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2248
		{
			mysqLOCAL = &IndexInfo{Type: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str), ConstraintName: NewColIdent(mysqDollar[1].str), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		mysqVAL.union = mysqLOCAL
	case 380:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2252
		{
			mysqLOCAL = &IndexInfo{Type: string(mysqDollar[1].str) + " " + string(mysqDollar[2].str), Name: NewColIdent(mysqDollar[3].str), Spatial: true, Unique: false}
		}
		mysqVAL.union = mysqLOCAL
	case 381:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2256
		{
			mysqLOCAL = &IndexInfo{Type: string(mysqDollar[1].str) + " " + string(mysqDollar[2].str), Name: NewColIdent(mysqDollar[3].str), Fulltext: true, Unique: false}
		}
		mysqVAL.union = mysqLOCAL
	case 382:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2260
		{
			mysqLOCAL = &IndexInfo{Type: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str), ConstraintName: NewColIdent(mysqDollar[1].str), Name: NewColIdent(mysqDollar[4].str), Unique: true}
		}
		mysqVAL.union = mysqLOCAL
	case 383:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2264
		{
			mysqLOCAL = &IndexInfo{Type: string(mysqDollar[1].str), Name: NewColIdent(mysqDollar[2].str), Unique: false}
		}
		mysqVAL.union = mysqLOCAL
	case 384:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2269
		{
			mysqVAL.str = ""
		}
	case 385:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2273
		{
			mysqVAL.str = mysqDollar[2].str
		}
	case 386:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2279
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 387:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2283
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 388:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2287
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 389:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2294
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 390:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2298
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 391:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2303
		{
			mysqVAL.str = "key"
		}
	case 392:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2307
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 393:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2313
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 394:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2317
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 395:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2322
		{
			mysqVAL.str = ""
		}
	case 396:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2326
		{
			mysqVAL.str = string(mysqDollar[1].colIdent.String())
		}
	case 397:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexColumn
//line mysql.y:2332
		{
			mysqLOCAL = []*IndexColumn{mysqDollar[1].indexColumnUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 398:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2336
		{
			mysqSLICE := (*[]*ast.IndexColumn)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].indexColumnUnion())
		}
	case 399:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexColumn
//line mysql.y:2342
		{
			mysqLOCAL = &IndexColumn{Column: mysqDollar[1].colIdent, Length: mysqDollar[2].literalUnion(), Direction: mysqDollar[3].orderDirectionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 400:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.IndexColumn
//line mysql.y:2346
		{
			mysqLOCAL = &IndexColumn{Expression: mysqDollar[2].exprUnion(), Direction: mysqDollar[4].orderDirectionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 401:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2352
		{
			mysqLOCAL = &ConstraintDefinition{Name: mysqDollar[2].colIdent, Details: mysqDollar[3].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 402:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2356
		{
			mysqLOCAL = &ConstraintDefinition{Details: mysqDollar[1].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 403:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2362
		{
			mysqLOCAL = &ConstraintDefinition{Name: mysqDollar[2].colIdent, Details: mysqDollar[3].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 404:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2366
		{
			mysqLOCAL = &ConstraintDefinition{Details: mysqDollar[1].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 405:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.ConstraintInfo
//line mysql.y:2372
		{
			mysqLOCAL = &ForeignKeyDefinition{IndexName: NewColIdent(mysqDollar[3].str), Source: mysqDollar[5].columnsUnion(), ReferenceDefinition: mysqDollar[7].referenceDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 406:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2378
		{
			mysqLOCAL = &ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 407:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2382
		{
			mysqLOCAL = &ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnDelete: mysqDollar[7].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 408:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2386
		{
			mysqLOCAL = &ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnUpdate: mysqDollar[7].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 409:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2390
		{
			mysqLOCAL = &ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnDelete: mysqDollar[7].referenceActionUnion(), OnUpdate: mysqDollar[8].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 410:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2394
		{
			mysqLOCAL = &ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnUpdate: mysqDollar[7].referenceActionUnion(), OnDelete: mysqDollar[8].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 411:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2399
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 412:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2403
		{
			mysqLOCAL = mysqDollar[1].referenceDefinitionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 413:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.ConstraintInfo
//line mysql.y:2409
		{
			mysqLOCAL = &CheckConstraintDefinition{Expr: mysqDollar[3].exprUnion(), Enforced: mysqDollar[5].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 414:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2415
		{
			mysqLOCAL = mysqDollar[2].matchActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 415:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2421
		{
			mysqLOCAL = Full
		}
		mysqVAL.union = mysqLOCAL
	case 416:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2425
		{
			mysqLOCAL = Partial
		}
		mysqVAL.union = mysqLOCAL
	case 417:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2429
		{
			mysqLOCAL = Simple
		}
		mysqVAL.union = mysqLOCAL
	case 418:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2434
		{
			mysqLOCAL = DefaultMatch
		}
		mysqVAL.union = mysqLOCAL
	case 419:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2438
		{
			mysqLOCAL = mysqDollar[1].matchActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 420:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2444
		{
			mysqLOCAL = mysqDollar[3].referenceActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 421:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2450
		{
			mysqLOCAL = mysqDollar[3].referenceActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 422:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2456
		{
			mysqLOCAL = Restrict
		}
		mysqVAL.union = mysqLOCAL
	case 423:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2460
		{
			mysqLOCAL = Cascade
		}
		mysqVAL.union = mysqLOCAL
	case 424:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2464
		{
			mysqLOCAL = NoAction
		}
		mysqVAL.union = mysqLOCAL
	case 425:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2468
		{
			mysqLOCAL = SetDefault
		}
		mysqVAL.union = mysqLOCAL
	case 426:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2472
		{
			mysqLOCAL = SetNull
		}
		mysqVAL.union = mysqLOCAL
	case 427:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2477
		{
			mysqVAL.str = ""
		}
	case 428:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2481
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 429:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2485
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 430:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2491
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 431:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2495
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 432:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2500
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 433:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2504
		{
			mysqLOCAL = mysqDollar[1].booleanUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 434:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2509
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 435:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2513
		{
			mysqLOCAL = mysqDollar[1].tableOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 436:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2519
		{
			mysqLOCAL = TableOptions{mysqDollar[1].tableOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 437:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2523
		{
			mysqSLICE := (*ast.TableOptions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableOptionUnion())
		}
	case 438:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2527
		{
			mysqSLICE := (*ast.TableOptions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].tableOptionUnion())
		}
	case 439:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2533
		{
			mysqLOCAL = TableOptions{mysqDollar[1].tableOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 440:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2537
		{
			mysqSLICE := (*ast.TableOptions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].tableOptionUnion())
		}
	case 441:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2543
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 442:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2547
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 443:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2551
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 444:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2555
		{
			mysqLOCAL = &TableOption{Name: (string(mysqDollar[2].str)), String: mysqDollar[4].str, CaseSensitive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 445:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2559
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[2].str), String: mysqDollar[4].str, CaseSensitive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 446:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2563
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 447:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2567
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 448:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2571
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 449:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2575
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 450:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2579
		{
			mysqLOCAL = &TableOption{Name: (string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)), Value: NewStrLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 451:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2583
		{
			mysqLOCAL = &TableOption{Name: (string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)), Value: NewStrLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 452:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2587
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 453:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2591
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 454:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2595
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: mysqDollar[3].tableIdent.String(), CaseSensitive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 455:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2599
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 456:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2603
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 457:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2607
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 458:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2611
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 459:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2615
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 460:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2619
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 461:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2623
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 462:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2627
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 463:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2631
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 464:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2635
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 465:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2639
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 466:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2643
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 467:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2647
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 468:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2651
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 469:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2655
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Value: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 470:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2659
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), String: (mysqDollar[3].colIdent.String() + mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 471:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2663
		{
			mysqLOCAL = &TableOption{Name: string(mysqDollar[1].str), Tables: mysqDollar[4].tableNamesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 472:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2668
		{
			mysqVAL.str = ""
		}
	case 473:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2672
		{
			mysqVAL.str = " " + string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 474:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2676
		{
			mysqVAL.str = " " + string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 484:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2695
		{
			mysqVAL.str = mysqDollar[1].colIdent.String()
		}
	case 485:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2699
		{
			mysqVAL.str = encodeSQLString(mysqDollar[1].str)
		}
	case 486:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2703
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 487:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2708
		{
			mysqVAL.str = ""
		}
	case 489:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2714
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 490:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2718
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 491:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:2723
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 492:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:2727
		{
			mysqLOCAL = mysqDollar[2].colNameUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 493:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2732
		{
			mysqVAL.str = ""
		}
	case 494:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2736
		{
			mysqVAL.str = string(mysqDollar[2].str)
		}
	case 495:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2741
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 496:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2745
		{
			mysqLOCAL = NewIntLiteral(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 497:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2749
		{
			mysqLOCAL = NewDecimalLiteral(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 498:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2754
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 499:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2758
		{
			mysqLOCAL = mysqDollar[1].alterOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 500:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2762
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, &OrderByOption{Cols: mysqDollar[5].columnsUnion()})
		}
	case 501:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2766
		{
			mysqLOCAL = mysqDollar[1].alterOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 502:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2770
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionsUnion()...)
		}
	case 503:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2774
		{
			mysqLOCAL = append(append(mysqDollar[1].alterOptionsUnion(), mysqDollar[3].alterOptionsUnion()...), &OrderByOption{Cols: mysqDollar[7].columnsUnion()})
		}
		mysqVAL.union = mysqLOCAL
	case 504:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2780
		{
			mysqLOCAL = []AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 505:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2784
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionUnion())
		}
	case 506:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2788
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionUnion())
		}
	case 507:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2794
		{
			mysqLOCAL = mysqDollar[1].tableOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 508:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2798
		{
			mysqLOCAL = &AddConstraintDefinition{ConstraintDefinition: mysqDollar[2].constraintDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 509:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2802
		{
			mysqLOCAL = &AddConstraintDefinition{ConstraintDefinition: mysqDollar[2].constraintDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 510:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2806
		{
			mysqLOCAL = &AddIndexDefinition{IndexDefinition: mysqDollar[2].indexDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 511:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2810
		{
			mysqLOCAL = &AddColumns{Columns: mysqDollar[4].columnDefinitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 512:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2814
		{
			mysqLOCAL = &AddColumns{Columns: []*ColumnDefinition{mysqDollar[3].columnDefinitionUnion()}, First: mysqDollar[4].booleanUnion(), After: mysqDollar[5].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 513:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2818
		{
			mysqLOCAL = &AlterColumn{Column: mysqDollar[3].colNameUnion(), DropDefault: true}
		}
		mysqVAL.union = mysqLOCAL
	case 514:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2822
		{
			mysqLOCAL = &AlterColumn{Column: mysqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 515:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2826
		{
			mysqLOCAL = &AlterColumn{Column: mysqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 516:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2830
		{
			val := false
			mysqLOCAL = &AlterColumn{Column: mysqDollar[3].colNameUnion(), Invisible: &val}
		}
		mysqVAL.union = mysqLOCAL
	case 517:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2835
		{
			val := true
			mysqLOCAL = &AlterColumn{Column: mysqDollar[3].colNameUnion(), Invisible: &val}
		}
		mysqVAL.union = mysqLOCAL
	case 518:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2840
		{
			mysqLOCAL = &AlterCheck{Name: mysqDollar[3].colIdent, Enforced: mysqDollar[4].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 519:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2844
		{
			mysqLOCAL = &AlterIndex{Name: mysqDollar[3].colIdent, Invisible: false}
		}
		mysqVAL.union = mysqLOCAL
	case 520:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2848
		{
			mysqLOCAL = &AlterIndex{Name: mysqDollar[3].colIdent, Invisible: true}
		}
		mysqVAL.union = mysqLOCAL
	case 521:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2852
		{
			mysqLOCAL = &ChangeColumn{OldColumn: mysqDollar[3].colNameUnion(), NewColDefinition: mysqDollar[4].columnDefinitionUnion(), First: mysqDollar[5].booleanUnion(), After: mysqDollar[6].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 522:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2856
		{
			mysqLOCAL = &ModifyColumn{NewColDefinition: mysqDollar[3].columnDefinitionUnion(), First: mysqDollar[4].booleanUnion(), After: mysqDollar[5].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 523:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2860
		{
			mysqLOCAL = &AlterCharset{CharacterSet: mysqDollar[4].str, Collate: mysqDollar[5].str}
		}
		mysqVAL.union = mysqLOCAL
	case 524:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2864
		{
			mysqLOCAL = &KeyState{Enable: false}
		}
		mysqVAL.union = mysqLOCAL
	case 525:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2868
		{
			mysqLOCAL = &KeyState{Enable: true}
		}
		mysqVAL.union = mysqLOCAL
	case 526:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2872
		{
			mysqLOCAL = &TablespaceOperation{Import: false}
		}
		mysqVAL.union = mysqLOCAL
	case 527:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2876
		{
			mysqLOCAL = &TablespaceOperation{Import: true}
		}
		mysqVAL.union = mysqLOCAL
	case 528:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2880
		{
			mysqLOCAL = &DropColumn{Name: mysqDollar[3].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 529:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2884
		{
			mysqLOCAL = &DropKey{Type: NormalKeyType, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 530:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2888
		{
			mysqLOCAL = &DropKey{Type: PrimaryKeyType}
		}
		mysqVAL.union = mysqLOCAL
	case 531:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2892
		{
			mysqLOCAL = &DropKey{Type: ForeignKeyType, Name: mysqDollar[4].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 532:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2896
		{
			mysqLOCAL = &DropKey{Type: CheckKeyType, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 533:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2900
		{
			mysqLOCAL = &DropKey{Type: CheckKeyType, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 534:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2904
		{
			mysqLOCAL = &Force{}
		}
		mysqVAL.union = mysqLOCAL
	case 535:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2908
		{
			mysqLOCAL = &RenameTableName{Table: mysqDollar[3].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 536:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2912
		{
			mysqLOCAL = &RenameIndex{OldName: mysqDollar[3].colIdent, NewName: mysqDollar[5].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 537:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2918
		{
			mysqLOCAL = []AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 538:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2922
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionUnion())
		}
	case 539:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2928
		{
			mysqLOCAL = AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 540:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2932
		{
			mysqLOCAL = AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 541:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2936
		{
			mysqLOCAL = AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 542:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2940
		{
			mysqLOCAL = AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 543:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2944
		{
			mysqLOCAL = &LockOption{Type: DefaultType}
		}
		mysqVAL.union = mysqLOCAL
	case 544:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2948
		{
			mysqLOCAL = &LockOption{Type: NoneType}
		}
		mysqVAL.union = mysqLOCAL
	case 545:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2952
		{
			mysqLOCAL = &LockOption{Type: SharedType}
		}
		mysqVAL.union = mysqLOCAL
	case 546:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2956
		{
			mysqLOCAL = &LockOption{Type: ExclusiveType}
		}
		mysqVAL.union = mysqLOCAL
	case 547:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2960
		{
			mysqLOCAL = &Validation{With: true}
		}
		mysqVAL.union = mysqLOCAL
	case 548:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2964
		{
			mysqLOCAL = &Validation{With: false}
		}
		mysqVAL.union = mysqLOCAL
	case 549:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2970
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().AlterOptions = mysqDollar[2].alterOptionsUnion()
			mysqDollar[1].alterTableUnion().PartitionOption = mysqDollar[3].partitionOptionUnion()
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 550:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2977
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().AlterOptions = mysqDollar[2].alterOptionsUnion()
			mysqDollar[1].alterTableUnion().PartitionSpec = &PartitionSpec{Action: RemoveAction}
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 551:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2984
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().AlterOptions = mysqDollar[2].alterOptionsUnion()
			mysqDollar[1].alterTableUnion().PartitionSpec = mysqDollar[4].partSpecUnion()
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 552:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2991
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().PartitionSpec = mysqDollar[2].partSpecUnion()
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 553:
		mysqDollar = mysqS[mysqpt-11 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2997
		{
			mysqLOCAL = &AlterView{ViewName: mysqDollar[7].tableName.ToViewName(), Comments: Comments(mysqDollar[2].strs).Parsed(), Algorithm: mysqDollar[3].str, Definer: mysqDollar[4].definerUnion(), Security: mysqDollar[5].str, Columns: mysqDollar[8].columnsUnion(), Select: mysqDollar[10].selStmtUnion(), CheckOption: mysqDollar[11].str}
		}
		mysqVAL.union = mysqLOCAL
	case 554:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3007
		{
			mysqDollar[1].alterDatabaseUnion().FullyParsed = true
			mysqDollar[1].alterDatabaseUnion().DBName = mysqDollar[2].tableIdent
			mysqDollar[1].alterDatabaseUnion().AlterOptions = mysqDollar[3].databaseOptionsUnion()
			mysqLOCAL = mysqDollar[1].alterDatabaseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 555:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3014
		{
			mysqDollar[1].alterDatabaseUnion().FullyParsed = true
			mysqDollar[1].alterDatabaseUnion().DBName = mysqDollar[2].tableIdent
			mysqDollar[1].alterDatabaseUnion().UpdateDataDirectory = true
			mysqLOCAL = mysqDollar[1].alterDatabaseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 556:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3021
		{
			mysqLOCAL = &AlterVschema{
				Action: CreateVindexDDLAction,
				Table:  mysqDollar[6].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(mysqDollar[6].tableName.Name.String()),
					Type:   mysqDollar[7].colIdent,
					Params: mysqDollar[8].vindexParamsUnion(),
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 557:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3033
		{
			mysqLOCAL = &AlterVschema{
				Action: DropVindexDDLAction,
				Table:  mysqDollar[6].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(mysqDollar[6].tableName.Name.String()),
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 558:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3043
		{
			mysqLOCAL = &AlterVschema{Action: AddVschemaTableDDLAction, Table: mysqDollar[6].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 559:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3047
		{
			mysqLOCAL = &AlterVschema{Action: DropVschemaTableDDLAction, Table: mysqDollar[6].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 560:
		mysqDollar = mysqS[mysqpt-13 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3051
		{
			mysqLOCAL = &AlterVschema{
				Action: AddColVindexDDLAction,
				Table:  mysqDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   mysqDollar[8].colIdent,
					Type:   mysqDollar[12].colIdent,
					Params: mysqDollar[13].vindexParamsUnion(),
				},
				VindexCols: mysqDollar[10].columnsUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 561:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3064
		{
			mysqLOCAL = &AlterVschema{
				Action: DropColVindexDDLAction,
				Table:  mysqDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: mysqDollar[8].colIdent,
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 562:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3074
		{
			mysqLOCAL = &AlterVschema{Action: AddSequenceDDLAction, Table: mysqDollar[6].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 563:
		mysqDollar = mysqS[mysqpt-10 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3078
		{
			mysqLOCAL = &AlterVschema{
				Action: AddAutoIncDDLAction,
				Table:  mysqDollar[5].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   mysqDollar[8].colIdent,
					Sequence: mysqDollar[10].tableName,
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 564:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3089
		{
			mysqLOCAL = &AlterMigration{
				Type: RetryMigrationType,
				UUID: string(mysqDollar[4].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 565:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3096
		{
			mysqLOCAL = &AlterMigration{
				Type: CleanupMigrationType,
				UUID: string(mysqDollar[4].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 566:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3103
		{
			mysqLOCAL = &AlterMigration{
				Type: CompleteMigrationType,
				UUID: string(mysqDollar[4].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 567:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3110
		{
			mysqLOCAL = &AlterMigration{
				Type: CancelMigrationType,
				UUID: string(mysqDollar[4].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 568:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3117
		{
			mysqLOCAL = &AlterMigration{
				Type: CancelAllMigrationType,
			}
		}
		mysqVAL.union = mysqLOCAL
	case 569:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3123
		{
			mysqLOCAL = &AlterMigration{
				Type:   ThrottleMigrationType,
				UUID:   string(mysqDollar[4].str),
				Expire: mysqDollar[6].str,
				Ratio:  mysqDollar[7].literalUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 570:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3132
		{
			mysqLOCAL = &AlterMigration{
				Type:   ThrottleAllMigrationType,
				Expire: mysqDollar[6].str,
				Ratio:  mysqDollar[7].literalUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 571:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3140
		{
			mysqLOCAL = &AlterMigration{
				Type: UnthrottleMigrationType,
				UUID: string(mysqDollar[4].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 572:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3147
		{
			mysqLOCAL = &AlterMigration{
				Type: UnthrottleAllMigrationType,
			}
		}
		mysqVAL.union = mysqLOCAL
	case 573:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3154
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 574:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3158
		{
			mysqDollar[3].partitionOptionUnion().Partitions = mysqDollar[4].integerUnion()
			mysqDollar[3].partitionOptionUnion().SubPartition = mysqDollar[5].subPartitionUnion()
			mysqDollar[3].partitionOptionUnion().Definitions = mysqDollar[6].partDefsUnion()
			mysqLOCAL = mysqDollar[3].partitionOptionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 575:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3167
		{
			mysqLOCAL = &PartitionOption{
				IsLinear: mysqDollar[1].booleanUnion(),
				Type:     HashType,
				Expr:     mysqDollar[4].exprUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 576:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3175
		{
			mysqLOCAL = &PartitionOption{
				IsLinear:     mysqDollar[1].booleanUnion(),
				Type:         KeyType,
				KeyAlgorithm: mysqDollar[3].integerUnion(),
				ColList:      mysqDollar[5].columnsUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 577:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3184
		{
			mysqLOCAL = &PartitionOption{
				Type: mysqDollar[1].partitionByTypeUnion(),
				Expr: mysqDollar[3].exprUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 578:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3191
		{
			mysqLOCAL = &PartitionOption{
				Type:    mysqDollar[1].partitionByTypeUnion(),
				ColList: mysqDollar[4].columnsUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 579:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.SubPartition
//line mysql.y:3199
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 580:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.SubPartition
//line mysql.y:3203
		{
			mysqLOCAL = &SubPartition{
				IsLinear:      mysqDollar[3].booleanUnion(),
				Type:          HashType,
				Expr:          mysqDollar[6].exprUnion(),
				SubPartitions: mysqDollar[8].integerUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 581:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL *ast.SubPartition
//line mysql.y:3212
		{
			mysqLOCAL = &SubPartition{
				IsLinear:      mysqDollar[3].booleanUnion(),
				Type:          KeyType,
				KeyAlgorithm:  mysqDollar[5].integerUnion(),
				ColList:       mysqDollar[7].columnsUnion(),
				SubPartitions: mysqDollar[9].integerUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 582:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.PartitionDefinition
//line mysql.y:3223
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 583:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL []*ast.PartitionDefinition
//line mysql.y:3227
		{
			mysqLOCAL = mysqDollar[2].partDefsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 584:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3232
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 585:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3236
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 586:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3241
		{
			mysqLOCAL = 0
		}
		mysqVAL.union = mysqLOCAL
	case 587:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3245
		{
			mysqLOCAL = convertStringToInt(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 588:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:3251
		{
			mysqLOCAL = &JSONTableExpr{Expr: mysqDollar[3].exprUnion(), Filter: mysqDollar[5].exprUnion(), Columns: mysqDollar[6].jtColumnListUnion(), Alias: mysqDollar[8].tableIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 589:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL []*ast.JtColumnDefinition
//line mysql.y:3257
		{
			mysqLOCAL = mysqDollar[3].jtColumnListUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 590:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.JtColumnDefinition
//line mysql.y:3263
		{
			mysqLOCAL = []*JtColumnDefinition{mysqDollar[1].jtColumnDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 591:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3267
		{
			mysqSLICE := (*[]*ast.JtColumnDefinition)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].jtColumnDefinitionUnion())
		}
	case 592:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3273
		{
			mysqLOCAL = &JtColumnDefinition{JtOrdinal: &JtOrdinalColDef{Name: mysqDollar[1].colIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 593:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3277
		{
			mysqDollar[2].columnType.Options = &ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion()}
			mysqLOCAL = &JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 594:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3283
		{
			mysqDollar[2].columnType.Options = &ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion()}
			mysqLOCAL = &JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 595:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3289
		{
			mysqDollar[2].columnType.Options = &ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion(), ErrorOnResponse: mysqDollar[7].jtOnResponseUnion()}
			mysqLOCAL = &JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 596:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3295
		{
			mysqDollar[2].columnType.Options = &ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion(), ErrorOnResponse: mysqDollar[8].jtOnResponseUnion()}
			mysqLOCAL = &JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 597:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3301
		{
			jtNestedPath := &JtNestedPathColDef{Path: mysqDollar[3].exprUnion(), Columns: mysqDollar[4].jtColumnListUnion()}
			mysqLOCAL = &JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		mysqVAL.union = mysqLOCAL
	case 598:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3307
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 599:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3311
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 600:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3315
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 601:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3319
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 602:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3325
		{
			mysqLOCAL = mysqDollar[1].jtOnResponseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 603:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3331
		{
			mysqLOCAL = mysqDollar[1].jtOnResponseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 604:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3337
		{
			mysqLOCAL = &JtOnResponse{ResponseType: ErrorJSONType}
		}
		mysqVAL.union = mysqLOCAL
	case 605:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3341
		{
			mysqLOCAL = &JtOnResponse{ResponseType: NullJSONType}
		}
		mysqVAL.union = mysqLOCAL
	case 606:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3345
		{
			mysqLOCAL = &JtOnResponse{ResponseType: DefaultJSONType, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 607:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.PartitionByType
//line mysql.y:3351
		{
			mysqLOCAL = RangeType
		}
		mysqVAL.union = mysqLOCAL
	case 608:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.PartitionByType
//line mysql.y:3355
		{
			mysqLOCAL = ListType
		}
		mysqVAL.union = mysqLOCAL
	case 609:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3360
		{
			mysqLOCAL = -1
		}
		mysqVAL.union = mysqLOCAL
	case 610:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3364
		{
			mysqLOCAL = convertStringToInt(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 611:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3369
		{
			mysqLOCAL = -1
		}
		mysqVAL.union = mysqLOCAL
	case 612:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3373
		{
			mysqLOCAL = convertStringToInt(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 613:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3379
		{
			mysqLOCAL = &PartitionSpec{Action: AddAction, Definitions: []*PartitionDefinition{mysqDollar[4].partDefUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 614:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3383
		{
			mysqLOCAL = &PartitionSpec{Action: DropAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 615:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3387
		{
			mysqLOCAL = &PartitionSpec{Action: ReorganizeAction, Names: mysqDollar[3].partitionsUnion(), Definitions: mysqDollar[6].partDefsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 616:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3391
		{
			mysqLOCAL = &PartitionSpec{Action: DiscardAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 617:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3395
		{
			mysqLOCAL = &PartitionSpec{Action: DiscardAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 618:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3399
		{
			mysqLOCAL = &PartitionSpec{Action: ImportAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 619:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3403
		{
			mysqLOCAL = &PartitionSpec{Action: ImportAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 620:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3407
		{
			mysqLOCAL = &PartitionSpec{Action: TruncateAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 621:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3411
		{
			mysqLOCAL = &PartitionSpec{Action: TruncateAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 622:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3415
		{
			mysqLOCAL = &PartitionSpec{Action: CoalesceAction, Number: NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 623:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3419
		{
			mysqLOCAL = &PartitionSpec{Action: ExchangeAction, Names: Partitions{mysqDollar[3].colIdent}, TableName: mysqDollar[6].tableName, WithoutValidation: mysqDollar[7].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 624:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3423
		{
			mysqLOCAL = &PartitionSpec{Action: AnalyzeAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 625:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3427
		{
			mysqLOCAL = &PartitionSpec{Action: AnalyzeAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 626:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3431
		{
			mysqLOCAL = &PartitionSpec{Action: CheckAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 627:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3435
		{
			mysqLOCAL = &PartitionSpec{Action: CheckAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 628:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3439
		{
			mysqLOCAL = &PartitionSpec{Action: OptimizeAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 629:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3443
		{
			mysqLOCAL = &PartitionSpec{Action: OptimizeAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 630:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3447
		{
			mysqLOCAL = &PartitionSpec{Action: RebuildAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 631:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3451
		{
			mysqLOCAL = &PartitionSpec{Action: RebuildAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 632:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3455
		{
			mysqLOCAL = &PartitionSpec{Action: RepairAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 633:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3459
		{
			mysqLOCAL = &PartitionSpec{Action: RepairAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 634:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3463
		{
			mysqLOCAL = &PartitionSpec{Action: UpgradeAction}
		}
		mysqVAL.union = mysqLOCAL
	case 635:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3468
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 636:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3472
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 637:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3476
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 638:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.PartitionDefinition
//line mysql.y:3483
		{
			mysqLOCAL = []*PartitionDefinition{mysqDollar[1].partDefUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 639:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3487
		{
			mysqSLICE := (*[]*ast.PartitionDefinition)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].partDefUnion())
		}
	case 640:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:3493
		{
			mysqVAL.partDefUnion().Options = mysqDollar[2].partitionDefinitionOptionsUnion()
		}
	case 641:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3498
		{
			mysqLOCAL = &PartitionDefinitionOptions{}
		}
		mysqVAL.union = mysqLOCAL
	case 642:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3502
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().ValueRange = mysqDollar[2].partitionValueRangeUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 643:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3507
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().Comment = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 644:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3512
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().Engine = mysqDollar[2].partitionEngineUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 645:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3517
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().DataDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 646:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3522
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().IndexDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 647:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3527
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].partitionDefinitionOptionsUnion().MaxRows = &val
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 648:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3533
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].partitionDefinitionOptionsUnion().MinRows = &val
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 649:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3539
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().TableSpace = mysqDollar[2].str
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 650:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3544
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().SubPartitionDefinitions = mysqDollar[2].subPartitionDefinitionsUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 651:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SubPartitionDefinitions
//line mysql.y:3550
		{
			mysqLOCAL = mysqDollar[2].subPartitionDefinitionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 652:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SubPartitionDefinitions
//line mysql.y:3556
		{
			mysqLOCAL = SubPartitionDefinitions{mysqDollar[1].subPartitionDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 653:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3560
		{
			mysqSLICE := (*ast.SubPartitionDefinitions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].subPartitionDefinitionUnion())
		}
	case 654:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinition
//line mysql.y:3566
		{
			mysqLOCAL = &SubPartitionDefinition{Name: mysqDollar[2].colIdent, Options: mysqDollar[3].subPartitionDefinitionOptionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 655:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3571
		{
			mysqLOCAL = &SubPartitionDefinitionOptions{}
		}
		mysqVAL.union = mysqLOCAL
	case 656:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3575
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().Comment = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 657:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3580
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().Engine = mysqDollar[2].partitionEngineUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 658:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3585
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().DataDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 659:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3590
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().IndexDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 660:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3595
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].subPartitionDefinitionOptionsUnion().MaxRows = &val
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 661:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3601
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].subPartitionDefinitionOptionsUnion().MinRows = &val
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 662:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3607
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().TableSpace = mysqDollar[2].str
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 663:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionValueRange
//line mysql.y:3614
		{
			mysqLOCAL = &PartitionValueRange{
				Type:  LessThanType,
				Range: mysqDollar[4].valTupleUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 664:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionValueRange
//line mysql.y:3621
		{
			mysqLOCAL = &PartitionValueRange{
				Type:     LessThanType,
				Maxvalue: true,
			}
		}
		mysqVAL.union = mysqLOCAL
	case 665:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionValueRange
//line mysql.y:3628
		{
			mysqLOCAL = &PartitionValueRange{
				Type:  InType,
				Range: mysqDollar[3].valTupleUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 666:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3636
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 667:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3640
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 668:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionEngine
//line mysql.y:3646
		{
			mysqLOCAL = &PartitionEngine{Storage: mysqDollar[1].booleanUnion(), Name: mysqDollar[4].tableIdent.String()}
		}
		mysqVAL.union = mysqLOCAL
	case 669:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:3652
		{
			mysqLOCAL = NewStrLiteral(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 670:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:3658
		{
			mysqLOCAL = NewStrLiteral(mysqDollar[4].str)
		}
		mysqVAL.union = mysqLOCAL
	case 671:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:3664
		{
			mysqLOCAL = NewStrLiteral(mysqDollar[4].str)
		}
		mysqVAL.union = mysqLOCAL
	case 672:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3670
		{
			mysqLOCAL = convertStringToInt(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 673:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3676
		{
			mysqLOCAL = convertStringToInt(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 674:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3682
		{
			mysqVAL.str = mysqDollar[3].tableIdent.String()
		}
	case 675:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinition
//line mysql.y:3688
		{
			mysqLOCAL = &PartitionDefinition{Name: mysqDollar[2].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 676:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3694
		{
			mysqVAL.str = ""
		}
	case 677:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3698
		{
			mysqVAL.str = ""
		}
	case 678:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3704
		{
			mysqLOCAL = &RenameTable{TablePairs: mysqDollar[3].renameTablePairsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 679:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL []*ast.RenameTablePair
//line mysql.y:3710
		{
			mysqLOCAL = []*RenameTablePair{{FromTable: mysqDollar[1].tableName, ToTable: mysqDollar[3].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 680:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:3714
		{
			mysqSLICE := (*[]*ast.RenameTablePair)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, &RenameTablePair{FromTable: mysqDollar[3].tableName, ToTable: mysqDollar[5].tableName})
		}
	case 681:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3720
		{
			mysqLOCAL = &DropTable{FromTables: mysqDollar[6].tableNamesUnion(), IfExists: mysqDollar[5].booleanUnion(), Comments: Comments(mysqDollar[2].strs).Parsed(), Temp: mysqDollar[3].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 682:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3724
		{
			// Change this to an alter statement
			if mysqDollar[4].colIdent.Lowered() == "primary" {
				mysqLOCAL = &AlterTable{FullyParsed: true, Table: mysqDollar[6].tableName, AlterOptions: append([]AlterOption{&DropKey{Type: PrimaryKeyType}}, mysqDollar[7].alterOptionsUnion()...)}
			} else {
				mysqLOCAL = &AlterTable{FullyParsed: true, Table: mysqDollar[6].tableName, AlterOptions: append([]AlterOption{&DropKey{Type: NormalKeyType, Name: mysqDollar[4].colIdent}}, mysqDollar[7].alterOptionsUnion()...)}
			}
		}
		mysqVAL.union = mysqLOCAL
	case 683:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3733
		{
			mysqLOCAL = &DropView{FromTables: mysqDollar[5].tableNamesUnion(), Comments: Comments(mysqDollar[2].strs).Parsed(), IfExists: mysqDollar[4].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 684:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3737
		{
			mysqLOCAL = &DropDatabase{Comments: Comments(mysqDollar[2].strs).Parsed(), DBName: mysqDollar[5].tableIdent, IfExists: mysqDollar[4].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 685:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3743
		{
			mysqLOCAL = &TruncateTable{Table: mysqDollar[3].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 686:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3747
		{
			mysqLOCAL = &TruncateTable{Table: mysqDollar[2].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 687:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3752
		{
			mysqLOCAL = &OtherRead{}
		}
		mysqVAL.union = mysqLOCAL
	case 688:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3758
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Charset, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 689:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3762
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Collation, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 690:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3766
		{
			mysqLOCAL = &Show{&ShowBasic{Full: mysqDollar[2].booleanUnion(), Command: Column, Tbl: mysqDollar[5].tableName, DbName: mysqDollar[6].tableIdent, Filter: mysqDollar[7].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 691:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3770
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Database, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 692:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3774
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Database, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 693:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3778
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Keyspace, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 694:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3782
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Keyspace, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 695:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3786
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Function, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 696:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3790
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Index, Tbl: mysqDollar[5].tableName, DbName: mysqDollar[6].tableIdent, Filter: mysqDollar[7].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 697:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3794
		{
			mysqLOCAL = &Show{&ShowBasic{Command: OpenTable, DbName: mysqDollar[4].tableIdent, Filter: mysqDollar[5].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 698:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3798
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Privilege}}
		}
		mysqVAL.union = mysqLOCAL
	case 699:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3802
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Procedure, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 700:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3806
		{
			mysqLOCAL = &Show{&ShowBasic{Command: StatusSession, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 701:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3810
		{
			mysqLOCAL = &Show{&ShowBasic{Command: StatusGlobal, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 702:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3814
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VariableSession, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 703:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3818
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VariableGlobal, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 704:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3822
		{
			mysqLOCAL = &Show{&ShowBasic{Command: TableStatus, DbName: mysqDollar[4].tableIdent, Filter: mysqDollar[5].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 705:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3826
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Table, Full: mysqDollar[2].booleanUnion(), DbName: mysqDollar[4].tableIdent, Filter: mysqDollar[5].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 706:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3830
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Trigger, DbName: mysqDollar[3].tableIdent, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 707:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3834
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateDb, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 708:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3838
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateE, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 709:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3842
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateF, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 710:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3846
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateProc, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 711:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3850
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateTbl, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 712:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3854
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateTr, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 713:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3858
		{
			mysqLOCAL = &Show{&ShowCreate{Command: CreateV, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 714:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3862
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Engines}}
		}
		mysqVAL.union = mysqLOCAL
	case 715:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3866
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Plugins}}
		}
		mysqVAL.union = mysqLOCAL
	case 716:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3870
		{
			mysqLOCAL = &Show{&ShowBasic{Command: GtidExecGlobal, DbName: mysqDollar[4].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 717:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3874
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VGtidExecGlobal, DbName: mysqDollar[4].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 718:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3878
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VitessVariables, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 719:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3882
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VitessMigrations, Filter: mysqDollar[4].showFilterUnion(), DbName: mysqDollar[3].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 720:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3886
		{
			mysqLOCAL = &ShowMigrationLogs{UUID: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 721:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3890
		{
			mysqLOCAL = &ShowThrottledApps{}
		}
		mysqVAL.union = mysqLOCAL
	case 722:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3894
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VitessReplicationStatus, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 723:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3898
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VschemaTables}}
		}
		mysqVAL.union = mysqLOCAL
	case 724:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3902
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VschemaVindexes}}
		}
		mysqVAL.union = mysqLOCAL
	case 725:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3906
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VschemaVindexes, Tbl: mysqDollar[5].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 726:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3910
		{
			mysqLOCAL = &Show{&ShowBasic{Command: Warnings}}
		}
		mysqVAL.union = mysqLOCAL
	case 727:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3914
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VitessShards, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 728:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3918
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VitessTablets, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 729:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3922
		{
			mysqLOCAL = &Show{&ShowBasic{Command: VitessTarget}}
		}
		mysqVAL.union = mysqLOCAL
	case 730:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3929
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].colIdent.String())}}
		}
		mysqVAL.union = mysqLOCAL
	case 731:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3933
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 732:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3937
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str) + " " + mysqDollar[3].colIdent.String()}}
		}
		mysqVAL.union = mysqLOCAL
	case 733:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3941
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 734:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3945
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 735:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3949
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str) + " " + String(mysqDollar[4].tableName)}}
		}
		mysqVAL.union = mysqLOCAL
	case 736:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3953
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str) + " " + String(mysqDollar[4].tableName)}}
		}
		mysqVAL.union = mysqLOCAL
	case 737:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3957
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[3].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 738:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3961
		{
			mysqLOCAL = &Show{&ShowOther{Command: string(mysqDollar[2].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 739:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3967
		{
			mysqVAL.str = ""
		}
	case 740:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3971
		{
			mysqVAL.str = "extended "
		}
	case 741:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3977
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 742:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3981
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 743:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3987
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 744:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3991
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 745:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3997
		{
			mysqVAL.tableIdent = NewTableIdent("")
		}
	case 746:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4001
		{
			mysqVAL.tableIdent = mysqDollar[2].tableIdent
		}
	case 747:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4005
		{
			mysqVAL.tableIdent = mysqDollar[2].tableIdent
		}
	case 748:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:4011
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 749:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:4015
		{
			mysqLOCAL = &ShowFilter{Like: string(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 750:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:4019
		{
			mysqLOCAL = &ShowFilter{Filter: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 751:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:4025
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 752:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:4029
		{
			mysqLOCAL = &ShowFilter{Like: string(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 753:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4035
		{
			mysqVAL.empty = struct{}{}
		}
	case 754:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4039
		{
			mysqVAL.empty = struct{}{}
		}
	case 755:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4043
		{
			mysqVAL.empty = struct{}{}
		}
	case 756:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4049
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 757:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4053
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 758:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4059
		{
			mysqLOCAL = &Use{DBName: mysqDollar[2].tableIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 759:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4063
		{
			mysqLOCAL = &Use{DBName: TableIdent{v: ""}}
		}
		mysqVAL.union = mysqLOCAL
	case 760:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4067
		{
			mysqLOCAL = &Use{DBName: NewTableIdent(mysqDollar[2].tableIdent.String() + "@" + string(mysqDollar[3].str))}
		}
		mysqVAL.union = mysqLOCAL
	case 761:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4073
		{
			mysqLOCAL = &Begin{}
		}
		mysqVAL.union = mysqLOCAL
	case 762:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4077
		{
			mysqLOCAL = &Begin{}
		}
		mysqVAL.union = mysqLOCAL
	case 763:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4083
		{
			mysqLOCAL = &Commit{}
		}
		mysqVAL.union = mysqLOCAL
	case 764:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4089
		{
			mysqLOCAL = &Rollback{}
		}
		mysqVAL.union = mysqLOCAL
	case 765:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4093
		{
			mysqLOCAL = &SRollback{Name: mysqDollar[5].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 766:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4098
		{
			mysqVAL.empty = struct{}{}
		}
	case 767:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4100
		{
			mysqVAL.empty = struct{}{}
		}
	case 768:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4103
		{
			mysqVAL.empty = struct{}{}
		}
	case 769:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4105
		{
			mysqVAL.empty = struct{}{}
		}
	case 770:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4110
		{
			mysqLOCAL = &Savepoint{Name: mysqDollar[2].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 771:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4116
		{
			mysqLOCAL = &Release{Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 772:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4121
		{
			mysqLOCAL = EmptyType
		}
		mysqVAL.union = mysqLOCAL
	case 773:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4125
		{
			mysqLOCAL = JSONType
		}
		mysqVAL.union = mysqLOCAL
	case 774:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4129
		{
			mysqLOCAL = TreeType
		}
		mysqVAL.union = mysqLOCAL
	case 775:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4133
		{
			mysqLOCAL = VitessType
		}
		mysqVAL.union = mysqLOCAL
	case 776:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4137
		{
			mysqLOCAL = TraditionalType
		}
		mysqVAL.union = mysqLOCAL
	case 777:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4141
		{
			mysqLOCAL = AnalyzeType
		}
		mysqVAL.union = mysqLOCAL
	case 778:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4147
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 779:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4151
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 780:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4155
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 781:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4161
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 782:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4165
		{
			mysqLOCAL = mysqDollar[1].statementUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 783:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4169
		{
			mysqLOCAL = mysqDollar[1].statementUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 784:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4173
		{
			mysqLOCAL = mysqDollar[1].statementUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 785:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4178
		{
			mysqVAL.str = ""
		}
	case 786:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4182
		{
			mysqVAL.str = mysqDollar[1].colIdent.val
		}
	case 787:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4186
		{
			mysqVAL.str = encodeSQLString(mysqDollar[1].str)
		}
	case 788:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4192
		{
			mysqLOCAL = &ExplainTab{Table: mysqDollar[2].tableName, Wild: mysqDollar[3].str}
		}
		mysqVAL.union = mysqLOCAL
	case 789:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4196
		{
			mysqLOCAL = &ExplainStmt{Type: mysqDollar[2].explainTypeUnion(), Statement: mysqDollar[3].statementUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 790:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4202
		{
			mysqLOCAL = &OtherAdmin{}
		}
		mysqVAL.union = mysqLOCAL
	case 791:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4206
		{
			mysqLOCAL = &OtherAdmin{}
		}
		mysqVAL.union = mysqLOCAL
	case 792:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4212
		{
			mysqLOCAL = &LockTables{Tables: mysqDollar[3].tableAndLockTypesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 793:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableAndLockTypes
//line mysql.y:4218
		{
			mysqLOCAL = TableAndLockTypes{mysqDollar[1].tableAndLockTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 794:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4222
		{
			mysqSLICE := (*ast.TableAndLockTypes)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableAndLockTypeUnion())
		}
	case 795:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.TableAndLockType
//line mysql.y:4228
		{
			mysqLOCAL = &TableAndLockType{Table: mysqDollar[1].aliasedTableNameUnion(), Lock: mysqDollar[2].lockTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 796:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4234
		{
			mysqLOCAL = Read
		}
		mysqVAL.union = mysqLOCAL
	case 797:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4238
		{
			mysqLOCAL = ReadLocal
		}
		mysqVAL.union = mysqLOCAL
	case 798:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4242
		{
			mysqLOCAL = Write
		}
		mysqVAL.union = mysqLOCAL
	case 799:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4246
		{
			mysqLOCAL = LowPriorityWrite
		}
		mysqVAL.union = mysqLOCAL
	case 800:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4252
		{
			mysqLOCAL = &UnlockTables{}
		}
		mysqVAL.union = mysqLOCAL
	case 801:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4258
		{
			mysqLOCAL = &RevertMigration{Comments: Comments(mysqDollar[2].strs).Parsed(), UUID: string(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 802:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4264
		{
			mysqLOCAL = &Flush{IsLocal: mysqDollar[2].booleanUnion(), FlushOptions: mysqDollar[3].strs}
		}
		mysqVAL.union = mysqLOCAL
	case 803:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4268
		{
			mysqLOCAL = &Flush{IsLocal: mysqDollar[2].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 804:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4272
		{
			mysqLOCAL = &Flush{IsLocal: mysqDollar[2].booleanUnion(), WithLock: true}
		}
		mysqVAL.union = mysqLOCAL
	case 805:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4276
		{
			mysqLOCAL = &Flush{IsLocal: mysqDollar[2].booleanUnion(), TableNames: mysqDollar[4].tableNamesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 806:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4280
		{
			mysqLOCAL = &Flush{IsLocal: mysqDollar[2].booleanUnion(), TableNames: mysqDollar[4].tableNamesUnion(), WithLock: true}
		}
		mysqVAL.union = mysqLOCAL
	case 807:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4284
		{
			mysqLOCAL = &Flush{IsLocal: mysqDollar[2].booleanUnion(), TableNames: mysqDollar[4].tableNamesUnion(), ForExport: true}
		}
		mysqVAL.union = mysqLOCAL
	case 808:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4290
		{
			mysqVAL.strs = []string{mysqDollar[1].str}
		}
	case 809:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4294
		{
			mysqVAL.strs = append(mysqDollar[1].strs, mysqDollar[3].str)
		}
	case 810:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4300
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 811:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4304
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 812:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4308
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 813:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4312
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 814:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4316
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 815:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4320
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 816:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4324
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 817:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4328
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str) + mysqDollar[3].str
		}
	case 818:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4332
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 819:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4336
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 820:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4340
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 821:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4344
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 822:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4349
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 823:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4353
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 824:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4357
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 825:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4362
		{
			mysqVAL.str = ""
		}
	case 826:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4366
		{
			mysqVAL.str = " " + string(mysqDollar[1].str) + " " + string(mysqDollar[2].str) + " " + mysqDollar[3].colIdent.String()
		}
	case 827:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4371
		{
			setAllowComments(mysqlex, true)
		}
	case 828:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4375
		{
			mysqVAL.strs = mysqDollar[2].strs
			setAllowComments(mysqlex, false)
		}
	case 829:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4381
		{
			mysqVAL.strs = nil
		}
	case 830:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4385
		{
			mysqVAL.strs = append(mysqDollar[1].strs, mysqDollar[2].str)
		}
	case 831:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4391
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 832:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4395
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 833:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4399
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 834:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4404
		{
			mysqVAL.str = ""
		}
	case 835:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4408
		{
			mysqVAL.str = SQLNoCacheStr
		}
	case 836:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4412
		{
			mysqVAL.str = SQLCacheStr
		}
	case 837:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4417
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 838:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4421
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 839:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4425
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 840:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4431
		{
			mysqLOCAL = &PrepareStmt{Name: mysqDollar[3].colIdent, Comments: Comments(mysqDollar[2].strs).Parsed(), Statement: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 841:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4435
		{
			mysqLOCAL = &PrepareStmt{
				Name:     mysqDollar[3].colIdent,
				Comments: Comments(mysqDollar[2].strs).Parsed(),
				Statement: &ColName{
					Name: NewColIdentWithAt(string(mysqDollar[5].str), SingleAt),
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 842:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4447
		{
			mysqLOCAL = &ExecuteStmt{Name: mysqDollar[3].colIdent, Comments: Comments(mysqDollar[2].strs).Parsed(), Arguments: mysqDollar[4].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 843:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4452
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 844:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4456
		{
			mysqLOCAL = mysqDollar[2].columnsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 845:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4462
		{
			mysqLOCAL = &DeallocateStmt{Type: DeallocateType, Comments: Comments(mysqDollar[2].strs).Parsed(), Name: mysqDollar[4].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 846:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4466
		{
			mysqLOCAL = &DeallocateStmt{Type: DropType, Comments: Comments(mysqDollar[2].strs).Parsed(), Name: mysqDollar[4].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 847:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.SelectExprs
//line mysql.y:4471
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 848:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectExprs
//line mysql.y:4475
		{
			mysqLOCAL = mysqDollar[1].selectExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 849:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4480
		{
			mysqVAL.strs = nil
		}
	case 850:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4484
		{
			mysqVAL.strs = []string{mysqDollar[1].str}
		}
	case 851:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4488
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			mysqVAL.strs = []string{mysqDollar[1].str, mysqDollar[2].str}
		}
	case 852:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4492
		{
			mysqVAL.strs = []string{mysqDollar[1].str, mysqDollar[2].str, mysqDollar[3].str}
		}
	case 853:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:4496
		{
			mysqVAL.strs = []string{mysqDollar[1].str, mysqDollar[2].str, mysqDollar[3].str, mysqDollar[4].str}
		}
	case 854:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4502
		{
			mysqVAL.str = SQLNoCacheStr
		}
	case 855:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4506
		{
			mysqVAL.str = SQLCacheStr
		}
	case 856:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4510
		{
			mysqVAL.str = DistinctStr
		}
	case 857:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4514
		{
			mysqVAL.str = DistinctStr
		}
	case 858:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4518
		{
			mysqVAL.str = StraightJoinHint
		}
	case 859:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4522
		{
			mysqVAL.str = SQLCalcFoundRowsStr
		}
	case 860:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4526
		{
			mysqVAL.str = AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 861:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectExprs
//line mysql.y:4532
		{
			mysqLOCAL = SelectExprs{mysqDollar[1].selectExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 862:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4536
		{
			mysqSLICE := (*ast.SelectExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].selectExprUnion())
		}
	case 863:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4542
		{
			mysqLOCAL = &StarExpr{}
		}
		mysqVAL.union = mysqLOCAL
	case 864:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4546
		{
			mysqLOCAL = &AliasedExpr{Expr: mysqDollar[1].exprUnion(), As: mysqDollar[2].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 865:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4550
		{
			mysqLOCAL = &StarExpr{TableName: TableName{Name: mysqDollar[1].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 866:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4554
		{
			mysqLOCAL = &StarExpr{TableName: TableName{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 867:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4559
		{
			mysqVAL.colIdent = ColIdent{}
		}
	case 868:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4563
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 869:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4567
		{
			mysqVAL.colIdent = mysqDollar[2].colIdent
		}
	case 871:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4574
		{
			mysqVAL.colIdent = NewColIdent(string(mysqDollar[1].str))
		}
	case 872:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4579
		{
			mysqLOCAL = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
		mysqVAL.union = mysqLOCAL
	case 873:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4583
		{
			mysqLOCAL = mysqDollar[1].tableExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 874:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4589
		{
			mysqLOCAL = mysqDollar[2].tableExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 875:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4595
		{
			mysqLOCAL = TableExprs{mysqDollar[1].tableExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 876:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4599
		{
			mysqSLICE := (*ast.TableExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableExprUnion())
		}
	case 879:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4609
		{
			mysqLOCAL = mysqDollar[1].aliasedTableNameUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 880:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4613
		{
			mysqLOCAL = &AliasedTableExpr{Expr: mysqDollar[1].derivedTableUnion(), As: mysqDollar[3].tableIdent, Columns: mysqDollar[4].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 881:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4617
		{
			mysqLOCAL = &ParenTableExpr{Exprs: mysqDollar[2].tableExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 882:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4621
		{
			mysqLOCAL = mysqDollar[1].tableExprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 883:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.DerivedTable
//line mysql.y:4627
		{
			mysqLOCAL = &DerivedTable{Lateral: false, Select: mysqDollar[2].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 884:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.DerivedTable
//line mysql.y:4631
		{
			mysqLOCAL = &DerivedTable{Lateral: true, Select: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 885:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.AliasedTableExpr
//line mysql.y:4637
		{
			mysqLOCAL = &AliasedTableExpr{Expr: mysqDollar[1].tableName, As: mysqDollar[2].tableIdent, Hints: mysqDollar[3].indexHintsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 886:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.AliasedTableExpr
//line mysql.y:4641
		{
			mysqLOCAL = &AliasedTableExpr{Expr: mysqDollar[1].tableName, Partitions: mysqDollar[4].partitionsUnion(), As: mysqDollar[6].tableIdent, Hints: mysqDollar[7].indexHintsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 887:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4646
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 888:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4650
		{
			mysqLOCAL = mysqDollar[2].columnsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 889:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4656
		{
			mysqLOCAL = Columns{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 890:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4660
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 891:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4666
		{
			mysqLOCAL = Columns{NewColIdentWithAt(string(mysqDollar[1].str), SingleAt)}
		}
		mysqVAL.union = mysqLOCAL
	case 892:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4670
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, NewColIdentWithAt(string(mysqDollar[3].str), SingleAt))
		}
	case 893:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4676
		{
			mysqLOCAL = Columns{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 894:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4680
		{
			mysqLOCAL = Columns{NewColIdent(string(mysqDollar[1].str))}
		}
		mysqVAL.union = mysqLOCAL
	case 895:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4684
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 896:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4688
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, NewColIdent(string(mysqDollar[3].str)))
		}
	case 897:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Partitions
//line mysql.y:4694
		{
			mysqLOCAL = Partitions{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 898:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4698
		{
			mysqSLICE := (*ast.Partitions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 899:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4711
		{
			mysqLOCAL = &JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion(), Condition: mysqDollar[4].joinCondition}
		}
		mysqVAL.union = mysqLOCAL
	case 900:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4715
		{
			mysqLOCAL = &JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion(), Condition: mysqDollar[4].joinCondition}
		}
		mysqVAL.union = mysqLOCAL
	case 901:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4719
		{
			mysqLOCAL = &JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion(), Condition: mysqDollar[4].joinCondition}
		}
		mysqVAL.union = mysqLOCAL
	case 902:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4723
		{
			mysqLOCAL = &JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 903:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4729
		{
			mysqVAL.joinCondition = &JoinCondition{On: mysqDollar[2].exprUnion()}
		}
	case 904:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:4731
		{
			mysqVAL.joinCondition = &JoinCondition{Using: mysqDollar[3].columnsUnion()}
		}
	case 905:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4735
		{
			mysqVAL.joinCondition = &JoinCondition{}
		}
	case 906:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4737
		{
			mysqVAL.joinCondition = mysqDollar[1].joinCondition
		}
	case 907:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4741
		{
			mysqVAL.joinCondition = &JoinCondition{}
		}
	case 908:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4743
		{
			mysqVAL.joinCondition = &JoinCondition{On: mysqDollar[2].exprUnion()}
		}
	case 909:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4746
		{
			mysqVAL.empty = struct{}{}
		}
	case 910:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4748
		{
			mysqVAL.empty = struct{}{}
		}
	case 911:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4751
		{
			mysqVAL.tableIdent = NewTableIdent("")
		}
	case 912:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4755
		{
			mysqVAL.tableIdent = mysqDollar[1].tableIdent
		}
	case 913:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4759
		{
			mysqVAL.tableIdent = mysqDollar[2].tableIdent
		}
	case 915:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4766
		{
			mysqVAL.tableIdent = NewTableIdent(string(mysqDollar[1].str))
		}
	case 916:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4772
		{
			mysqLOCAL = NormalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 917:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4776
		{
			mysqLOCAL = NormalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 918:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4780
		{
			mysqLOCAL = NormalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 919:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4786
		{
			mysqLOCAL = StraightJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 920:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4792
		{
			mysqLOCAL = LeftJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 921:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4796
		{
			mysqLOCAL = LeftJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 922:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4800
		{
			mysqLOCAL = RightJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 923:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4804
		{
			mysqLOCAL = RightJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 924:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4810
		{
			mysqLOCAL = NaturalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 925:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4814
		{
			if mysqDollar[2].joinTypeUnion() == LeftJoinType {
				mysqLOCAL = NaturalLeftJoinType
			} else {
				mysqLOCAL = NaturalRightJoinType
			}
		}
		mysqVAL.union = mysqLOCAL
	case 926:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4824
		{
			mysqVAL.tableName = mysqDollar[2].tableName
		}
	case 927:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4828
		{
			mysqVAL.tableName = mysqDollar[1].tableName
		}
	case 928:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4834
		{
			mysqVAL.tableName = TableName{Name: mysqDollar[1].tableIdent}
		}
	case 929:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4838
		{
			mysqVAL.tableName = TableName{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].tableIdent}
		}
	case 930:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4844
		{
			mysqVAL.tableName = TableName{Name: mysqDollar[1].tableIdent}
		}
	case 931:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.IndexHints
//line mysql.y:4849
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 932:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IndexHints
//line mysql.y:4853
		{
			mysqLOCAL = mysqDollar[1].indexHintsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 933:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IndexHints
//line mysql.y:4859
		{
			mysqLOCAL = IndexHints{mysqDollar[1].indexHintUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 934:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4863
		{
			mysqSLICE := (*ast.IndexHints)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].indexHintUnion())
		}
	case 935:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4869
		{
			mysqLOCAL = &IndexHint{Type: UseOp, ForType: mysqDollar[3].indexHintForTypeUnion(), Indexes: mysqDollar[5].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 936:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4873
		{
			mysqLOCAL = &IndexHint{Type: UseOp, ForType: mysqDollar[3].indexHintForTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 937:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4877
		{
			mysqLOCAL = &IndexHint{Type: IgnoreOp, ForType: mysqDollar[3].indexHintForTypeUnion(), Indexes: mysqDollar[5].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 938:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4881
		{
			mysqLOCAL = &IndexHint{Type: ForceOp, ForType: mysqDollar[3].indexHintForTypeUnion(), Indexes: mysqDollar[5].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 939:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4886
		{
			mysqLOCAL = NoForType
		}
		mysqVAL.union = mysqLOCAL
	case 940:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4890
		{
			mysqLOCAL = JoinForType
		}
		mysqVAL.union = mysqLOCAL
	case 941:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4894
		{
			mysqLOCAL = OrderByForType
		}
		mysqVAL.union = mysqLOCAL
	case 942:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4898
		{
			mysqLOCAL = GroupByForType
		}
		mysqVAL.union = mysqLOCAL
	case 943:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4904
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 944:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4908
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 945:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4915
		{
			mysqLOCAL = &OrExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 946:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4919
		{
			mysqLOCAL = &XorExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 947:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4923
		{
			mysqLOCAL = &AndExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 948:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4927
		{
			mysqLOCAL = &NotExpr{Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 949:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4931
		{
			mysqLOCAL = &IsExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].isExprOperatorUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 950:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4935
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 951:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4939
		{
			mysqLOCAL = &MemberOfExpr{Value: mysqDollar[1].exprUnion(), JSONArr: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 952:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4946
		{
			mysqLOCAL = &IsExpr{Left: mysqDollar[1].exprUnion(), Right: IsNullOp}
		}
		mysqVAL.union = mysqLOCAL
	case 953:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4950
		{
			mysqLOCAL = &IsExpr{Left: mysqDollar[1].exprUnion(), Right: IsNotNullOp}
		}
		mysqVAL.union = mysqLOCAL
	case 954:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4954
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: mysqDollar[2].comparisonExprOperatorUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 955:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4958
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 956:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4964
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: InOp, Right: mysqDollar[3].colTupleUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 957:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4968
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: NotInOp, Right: mysqDollar[4].colTupleUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 958:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4972
		{
			mysqLOCAL = &BetweenExpr{Left: mysqDollar[1].exprUnion(), IsBetween: true, From: mysqDollar[3].exprUnion(), To: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 959:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4976
		{
			mysqLOCAL = &BetweenExpr{Left: mysqDollar[1].exprUnion(), IsBetween: false, From: mysqDollar[4].exprUnion(), To: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 960:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4980
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: LikeOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 961:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4984
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: NotLikeOp, Right: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 962:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4988
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: LikeOp, Right: mysqDollar[3].exprUnion(), Escape: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 963:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4992
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: NotLikeOp, Right: mysqDollar[4].exprUnion(), Escape: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 964:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4996
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: RegexpOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 965:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5000
		{
			mysqLOCAL = &ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: NotRegexpOp, Right: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 966:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5004
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 967:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5010
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: BitOrOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 968:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5014
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: BitAndOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 969:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5018
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ShiftLeftOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 970:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5022
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ShiftRightOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 971:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5026
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: PlusOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 972:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5030
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: MinusOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 973:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5034
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: MultOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 974:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5038
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: DivOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 975:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5042
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ModOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 976:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5046
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: IntDivOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 977:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5050
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ModOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 978:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5054
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: BitXorOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 979:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5058
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 980:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5064
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 981:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5068
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 982:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5072
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 983:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5076
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 984:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5080
		{
			mysqLOCAL = &CollateExpr{Expr: mysqDollar[1].exprUnion(), Collation: mysqDollar[3].str}
		}
		mysqVAL.union = mysqLOCAL
	case 985:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5084
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 986:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5088
		{
			mysqLOCAL = mysqDollar[1].colNameUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 987:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5092
		{
			mysqLOCAL = mysqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		mysqVAL.union = mysqLOCAL
	case 988:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5096
		{
			mysqLOCAL = &UnaryExpr{Operator: UMinusOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 989:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5100
		{
			mysqLOCAL = &UnaryExpr{Operator: TildaOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 990:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5104
		{
			mysqLOCAL = &UnaryExpr{Operator: BangOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 991:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5108
		{
			mysqLOCAL = mysqDollar[1].subqueryUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 992:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5112
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 993:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5116
		{
			mysqLOCAL = &ExistsExpr{Subquery: mysqDollar[2].subqueryUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 994:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5120
		{
			mysqLOCAL = &MatchExpr{Columns: mysqDollar[3].selectExprsUnion(), Expr: mysqDollar[7].exprUnion(), Option: mysqDollar[8].matchExprOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 995:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5124
		{
			mysqLOCAL = &ConvertExpr{Expr: mysqDollar[3].exprUnion(), Type: mysqDollar[5].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 996:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5128
		{
			mysqLOCAL = &ConvertExpr{Expr: mysqDollar[3].exprUnion(), Type: mysqDollar[5].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 997:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5132
		{
			mysqLOCAL = &ConvertUsingExpr{Expr: mysqDollar[3].exprUnion(), Type: mysqDollar[5].str}
		}
		mysqVAL.union = mysqLOCAL
	case 998:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5136
		{
			// From: https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			mysqLOCAL = &ConvertExpr{Expr: mysqDollar[2].exprUnion(), Type: &ConvertType{Type: mysqDollar[1].str}}
		}
		mysqVAL.union = mysqLOCAL
	case 999:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5144
		{
			mysqLOCAL = &Default{ColName: mysqDollar[2].str}
		}
		mysqVAL.union = mysqLOCAL
	case 1000:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5148
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			mysqLOCAL = &IntervalExpr{Expr: mysqDollar[2].exprUnion(), Unit: mysqDollar[3].colIdent.String()}
		}
		mysqVAL.union = mysqLOCAL
	case 1001:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5156
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].colNameUnion(), Operator: JSONExtractOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1002:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5160
		{
			mysqLOCAL = &BinaryExpr{Left: mysqDollar[1].colNameUnion(), Operator: JSONUnquoteExtractOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1003:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TrimType
//line mysql.y:5166
		{
			mysqLOCAL = BothTrimType
		}
		mysqVAL.union = mysqLOCAL
	case 1004:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TrimType
//line mysql.y:5170
		{
			mysqLOCAL = LeadingTrimType
		}
		mysqVAL.union = mysqLOCAL
	case 1005:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TrimType
//line mysql.y:5174
		{
			mysqLOCAL = TrailingTrimType
		}
		mysqVAL.union = mysqLOCAL
	case 1006:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5180
		{
			mysqVAL.str = ""
		}
	case 1007:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5184
		{
			mysqVAL.str = string(mysqDollar[2].colIdent.String())
		}
	case 1008:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.BoolVal
//line mysql.y:5190
		{
			mysqLOCAL = BoolVal(true)
		}
		mysqVAL.union = mysqLOCAL
	case 1009:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.BoolVal
//line mysql.y:5194
		{
			mysqLOCAL = BoolVal(false)
		}
		mysqVAL.union = mysqLOCAL
	case 1010:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5201
		{
			mysqLOCAL = IsTrueOp
		}
		mysqVAL.union = mysqLOCAL
	case 1011:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5205
		{
			mysqLOCAL = IsNotTrueOp
		}
		mysqVAL.union = mysqLOCAL
	case 1012:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5209
		{
			mysqLOCAL = IsFalseOp
		}
		mysqVAL.union = mysqLOCAL
	case 1013:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5213
		{
			mysqLOCAL = IsNotFalseOp
		}
		mysqVAL.union = mysqLOCAL
	case 1014:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5219
		{
			mysqLOCAL = EqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 1015:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5223
		{
			mysqLOCAL = LessThanOp
		}
		mysqVAL.union = mysqLOCAL
	case 1016:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5227
		{
			mysqLOCAL = GreaterThanOp
		}
		mysqVAL.union = mysqLOCAL
	case 1017:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5231
		{
			mysqLOCAL = LessEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 1018:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5235
		{
			mysqLOCAL = GreaterEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 1019:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5239
		{
			mysqLOCAL = NotEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 1020:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5243
		{
			mysqLOCAL = NullSafeEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 1021:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColTuple
//line mysql.y:5249
		{
			mysqLOCAL = mysqDollar[1].valTupleUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1022:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColTuple
//line mysql.y:5253
		{
			mysqLOCAL = mysqDollar[1].subqueryUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1023:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColTuple
//line mysql.y:5257
		{
			mysqLOCAL = ListArg(mysqDollar[1].str[2:])
			bindVariable(mysqlex, mysqDollar[1].str[2:])
		}
		mysqVAL.union = mysqLOCAL
	case 1024:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Subquery
//line mysql.y:5264
		{
			mysqLOCAL = &Subquery{mysqDollar[1].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1025:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:5270
		{
			mysqLOCAL = Exprs{mysqDollar[1].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1026:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5274
		{
			mysqSLICE := (*ast.Exprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].exprUnion())
		}
	case 1027:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5284
		{
			mysqLOCAL = &FuncExpr{Name: mysqDollar[1].colIdent, Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1028:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5288
		{
			mysqLOCAL = &FuncExpr{Name: mysqDollar[1].colIdent, Distinct: true, Exprs: mysqDollar[4].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1029:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5292
		{
			mysqLOCAL = &FuncExpr{Name: mysqDollar[1].colIdent, Distinct: true, Exprs: mysqDollar[4].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1030:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5296
		{
			mysqLOCAL = &FuncExpr{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].colIdent, Exprs: mysqDollar[5].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1031:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5306
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("left"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1032:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5310
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("right"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1033:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5314
		{
			mysqLOCAL = &SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion(), To: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1034:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5318
		{
			mysqLOCAL = &SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1035:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5322
		{
			mysqLOCAL = &SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion(), To: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1036:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5326
		{
			mysqLOCAL = &SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1037:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5330
		{
			mysqLOCAL = &GroupConcatExpr{Distinct: mysqDollar[3].booleanUnion(), Exprs: mysqDollar[4].selectExprsUnion(), OrderBy: mysqDollar[5].orderByUnion(), Separator: mysqDollar[6].str, Limit: mysqDollar[7].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1038:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5334
		{
			mysqLOCAL = &CaseExpr{Expr: mysqDollar[2].exprUnion(), Whens: mysqDollar[3].whensUnion(), Else: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1039:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5338
		{
			mysqLOCAL = &ValuesFuncExpr{Name: mysqDollar[3].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1040:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5342
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1041:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5353
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("utc_date")}
		}
		mysqVAL.union = mysqLOCAL
	case 1042:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5357
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1043:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5363
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("current_date")}
		}
		mysqVAL.union = mysqLOCAL
	case 1044:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5367
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1045:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5372
		{
			mysqLOCAL = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1046:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5376
		{
			mysqLOCAL = &TimestampFuncExpr{Name: string("timestampadd"), Unit: mysqDollar[3].colIdent.String(), Expr1: mysqDollar[5].exprUnion(), Expr2: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1047:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5380
		{
			mysqLOCAL = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: mysqDollar[3].colIdent.String(), Expr1: mysqDollar[5].exprUnion(), Expr2: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1048:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5384
		{
			mysqLOCAL = &ExtractFuncExpr{IntervalTypes: mysqDollar[3].intervalTypeUnion(), Expr: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1049:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5388
		{
			mysqLOCAL = &WeightStringFuncExpr{Expr: mysqDollar[3].exprUnion(), As: mysqDollar[4].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1050:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5392
		{
			mysqLOCAL = &JSONPrettyExpr{JSONVal: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1051:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5396
		{
			mysqLOCAL = &JSONStorageFreeExpr{JSONVal: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1052:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5400
		{
			mysqLOCAL = &JSONStorageSizeExpr{JSONVal: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1053:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5404
		{
			mysqLOCAL = &TrimFuncExpr{TrimFuncType: LTrimType, StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1054:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5408
		{
			mysqLOCAL = &TrimFuncExpr{TrimFuncType: RTrimType, StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1055:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5412
		{
			mysqLOCAL = &TrimFuncExpr{Type: mysqDollar[3].trimTypeUnion(), TrimArg: mysqDollar[4].exprUnion(), StringArg: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1056:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5416
		{
			mysqLOCAL = &TrimFuncExpr{StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1057:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5420
		{
			mysqLOCAL = &TrimFuncExpr{TrimArg: mysqDollar[3].exprUnion(), StringArg: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1058:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5424
		{
			mysqLOCAL = &JSONSchemaValidFuncExpr{Schema: mysqDollar[3].exprUnion(), Document: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1059:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5428
		{
			mysqLOCAL = &JSONSchemaValidationReportFuncExpr{Schema: mysqDollar[3].exprUnion(), Document: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1060:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5432
		{
			mysqLOCAL = &JSONArrayExpr{Params: mysqDollar[3].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1061:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5436
		{
			mysqLOCAL = &JSONObjectExpr{Params: mysqDollar[3].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1062:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5440
		{
			mysqLOCAL = &JSONQuoteExpr{StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1063:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5444
		{
			mysqLOCAL = &JSONContainsExpr{Target: mysqDollar[3].exprUnion(), Candidate: mysqDollar[5].exprUnion(), PathList: mysqDollar[6].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1064:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5448
		{
			mysqLOCAL = &JSONContainsPathExpr{JSONDoc: mysqDollar[3].exprUnion(), OneOrAll: mysqDollar[5].exprUnion(), PathList: mysqDollar[7].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1065:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5452
		{
			mysqLOCAL = &JSONExtractExpr{JSONDoc: mysqDollar[3].exprUnion(), PathList: mysqDollar[5].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1066:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5456
		{
			mysqLOCAL = &JSONKeysExpr{JSONDoc: mysqDollar[3].exprUnion(), PathList: mysqDollar[4].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1067:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5460
		{
			mysqLOCAL = &JSONOverlapsExpr{JSONDoc1: mysqDollar[3].exprUnion(), JSONDoc2: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1068:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5464
		{
			mysqLOCAL = &JSONSearchExpr{JSONDoc: mysqDollar[3].exprUnion(), OneOrAll: mysqDollar[5].exprUnion(), SearchStr: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1069:
		mysqDollar = mysqS[mysqpt-11 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5468
		{
			mysqLOCAL = &JSONSearchExpr{JSONDoc: mysqDollar[3].exprUnion(), OneOrAll: mysqDollar[5].exprUnion(), SearchStr: mysqDollar[7].exprUnion(), EscapeChar: mysqDollar[9].exprUnion(), PathList: mysqDollar[10].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1070:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5472
		{
			mysqLOCAL = &JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1071:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5476
		{
			mysqLOCAL = &JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1072:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5480
		{
			mysqLOCAL = &JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion(), ErrorOnResponse: mysqDollar[7].jtOnResponseUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1073:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5484
		{
			mysqLOCAL = &JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion(), ErrorOnResponse: mysqDollar[8].jtOnResponseUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1074:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5488
		{
			mysqLOCAL = &JSONAttributesExpr{Type: DepthAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1075:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5492
		{
			mysqLOCAL = &JSONAttributesExpr{Type: ValidAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1076:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5496
		{
			mysqLOCAL = &JSONAttributesExpr{Type: TypeAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1077:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5500
		{
			mysqLOCAL = &JSONAttributesExpr{Type: LengthAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1078:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5504
		{
			mysqLOCAL = &JSONAttributesExpr{Type: LengthAttributeType, JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam}
		}
		mysqVAL.union = mysqLOCAL
	case 1079:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5508
		{
			mysqLOCAL = &JSONValueModifierExpr{Type: JSONArrayAppendType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1080:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5512
		{
			mysqLOCAL = &JSONValueModifierExpr{Type: JSONArrayInsertType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1081:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5516
		{
			mysqLOCAL = &JSONValueModifierExpr{Type: JSONInsertType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1082:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5520
		{
			mysqLOCAL = &JSONValueModifierExpr{Type: JSONReplaceType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1083:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5524
		{
			mysqLOCAL = &JSONValueModifierExpr{Type: JSONSetType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1084:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5528
		{
			mysqLOCAL = &JSONValueMergeExpr{Type: JSONMergeType, JSONDoc: mysqDollar[3].exprUnion(), JSONDocList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1085:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5532
		{
			mysqLOCAL = &JSONValueMergeExpr{Type: JSONMergePatchType, JSONDoc: mysqDollar[3].exprUnion(), JSONDocList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1086:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5536
		{
			mysqLOCAL = &JSONValueMergeExpr{Type: JSONMergePreserveType, JSONDoc: mysqDollar[3].exprUnion(), JSONDocList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1087:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5540
		{
			mysqLOCAL = &JSONRemoveExpr{JSONDoc: mysqDollar[3].exprUnion(), PathList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1088:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5544
		{
			mysqLOCAL = &JSONUnquoteExpr{JSONValue: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1089:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5549
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1090:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5553
		{
			mysqLOCAL = mysqDollar[2].convertTypeUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1091:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.JSONPathParam
//line mysql.y:5558
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1092:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.JSONPathParam
//line mysql.y:5562
		{
			mysqLOCAL = mysqDollar[2].jsonPathParamsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1093:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.JSONPathParam
//line mysql.y:5568
		{
			mysqLOCAL = []JSONPathParam{mysqDollar[1].jsonPathParam}
		}
		mysqVAL.union = mysqLOCAL
	case 1094:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5572
		{
			mysqSLICE := (*[]ast.JSONPathParam)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].jsonPathParam)
		}
	case 1095:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5578
		{
			mysqVAL.jsonPathParam = JSONPathParam(mysqDollar[1].exprUnion())
		}
	case 1096:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5582
		{
			mysqVAL.jsonPathParam = JSONPathParam(mysqDollar[1].colNameUnion())
		}
	case 1097:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5588
		{
		}
	case 1098:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5590
		{
			mysqLOCAL = IntervalDayHour
		}
		mysqVAL.union = mysqLOCAL
	case 1099:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5594
		{
			mysqLOCAL = IntervalDayMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1100:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5598
		{
			mysqLOCAL = IntervalDayMinute
		}
		mysqVAL.union = mysqLOCAL
	case 1101:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5602
		{
			mysqLOCAL = IntervalDaySecond
		}
		mysqVAL.union = mysqLOCAL
	case 1102:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5606
		{
			mysqLOCAL = IntervalHourMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1103:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5610
		{
			mysqLOCAL = IntervalHourMinute
		}
		mysqVAL.union = mysqLOCAL
	case 1104:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5614
		{
			mysqLOCAL = IntervalHourSecond
		}
		mysqVAL.union = mysqLOCAL
	case 1105:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5618
		{
			mysqLOCAL = IntervalMinuteMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1106:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5622
		{
			mysqLOCAL = IntervalMinuteSecond
		}
		mysqVAL.union = mysqLOCAL
	case 1107:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5626
		{
			mysqLOCAL = IntervalSecondMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1108:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5630
		{
			mysqLOCAL = IntervalYearMonth
		}
		mysqVAL.union = mysqLOCAL
	case 1109:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5636
		{
			mysqLOCAL = IntervalDay
		}
		mysqVAL.union = mysqLOCAL
	case 1110:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5640
		{
			mysqLOCAL = IntervalWeek
		}
		mysqVAL.union = mysqLOCAL
	case 1111:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5644
		{
			mysqLOCAL = IntervalHour
		}
		mysqVAL.union = mysqLOCAL
	case 1112:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5648
		{
			mysqLOCAL = IntervalMinute
		}
		mysqVAL.union = mysqLOCAL
	case 1113:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5652
		{
			mysqLOCAL = IntervalMonth
		}
		mysqVAL.union = mysqLOCAL
	case 1114:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5656
		{
			mysqLOCAL = IntervalQuarter
		}
		mysqVAL.union = mysqLOCAL
	case 1115:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5660
		{
			mysqLOCAL = IntervalSecond
		}
		mysqVAL.union = mysqLOCAL
	case 1116:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5664
		{
			mysqLOCAL = IntervalMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1117:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5668
		{
			mysqLOCAL = IntervalYear
		}
		mysqVAL.union = mysqLOCAL
	case 1120:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5678
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1121:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5682
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1122:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5686
		{
			mysqLOCAL = NewIntLiteral(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1123:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5690
		{
			mysqLOCAL = NewArgument(mysqDollar[2].str[1:])
			bindVariable(mysqlex, mysqDollar[2].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 1124:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5701
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("if"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1125:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5705
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("database"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1126:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5709
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("schema"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1127:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5713
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("mod"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1128:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5717
		{
			mysqLOCAL = &FuncExpr{Name: NewColIdent("replace"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1129:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5723
		{
			mysqLOCAL = NoOption
		}
		mysqVAL.union = mysqLOCAL
	case 1130:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5727
		{
			mysqLOCAL = BooleanModeOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1131:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5731
		{
			mysqLOCAL = NaturalLanguageModeOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1132:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5735
		{
			mysqLOCAL = NaturalLanguageModeWithQueryExpansionOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1133:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5739
		{
			mysqLOCAL = QueryExpansionOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1134:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5745
		{
			mysqVAL.str = string(mysqDollar[1].colIdent.String())
		}
	case 1135:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5749
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1136:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5753
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1137:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5759
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1138:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5763
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[2].str), Length: NewIntLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1139:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5767
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[2].str), Length: NewIntLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1140:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5773
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1141:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5777
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion(), Charset: mysqDollar[3].columnCharset}
		}
		mysqVAL.union = mysqLOCAL
	case 1142:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5781
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1143:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5785
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1144:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5789
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
			mysqLOCAL.Length = mysqDollar[2].LengthScaleOption.Length
			mysqLOCAL.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
		mysqVAL.union = mysqLOCAL
	case 1145:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5795
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1146:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5799
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1147:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5803
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1148:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5807
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1149:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5811
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1150:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5815
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1151:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5819
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1152:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5823
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1153:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5827
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1154:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5831
		{
			mysqLOCAL = &ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1155:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5837
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1156:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5841
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1157:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5846
		{
			mysqVAL.str = string("")
		}
	case 1158:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:5850
		{
			mysqVAL.str = " separator " + encodeSQLString(mysqDollar[2].str)
		}
	case 1159:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.When
//line mysql.y:5856
		{
			mysqLOCAL = []*When{mysqDollar[1].whenUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1160:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:5860
		{
			mysqSLICE := (*[]*ast.When)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].whenUnion())
		}
	case 1161:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.When
//line mysql.y:5866
		{
			mysqLOCAL = &When{Cond: mysqDollar[2].exprUnion(), Val: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1162:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5871
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1163:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5875
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1164:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:5881
		{
			mysqLOCAL = &ColName{Name: mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1165:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:5885
		{
			mysqLOCAL = &ColName{Qualifier: TableName{Name: mysqDollar[1].tableIdent}, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1166:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:5889
		{
			mysqLOCAL = &ColName{Qualifier: TableName{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].tableIdent}, Name: mysqDollar[5].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1167:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5895
		{
			// TODO(sougou): Deprecate this construct.
			if mysqDollar[1].colIdent.Lowered() != "value" {
				mysqlex.Error("expecting value after next")
				return 1
			}
			mysqLOCAL = NewIntLiteral("1")
		}
		mysqVAL.union = mysqLOCAL
	case 1168:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5904
		{
			mysqLOCAL = NewIntLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1169:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5908
		{
			mysqLOCAL = NewArgument(mysqDollar[1].str[1:])
			bindVariable(mysqlex, mysqDollar[1].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 1170:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:5914
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1171:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:5918
		{
			mysqLOCAL = mysqDollar[3].exprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1172:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5923
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1173:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5927
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1174:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5932
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1175:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5936
		{
			mysqLOCAL = mysqDollar[1].orderByUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1176:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5942
		{
			mysqLOCAL = mysqDollar[3].orderByUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1177:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5948
		{
			mysqLOCAL = OrderBy{mysqDollar[1].orderUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1178:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5952
		{
			mysqSLICE := (*ast.OrderBy)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].orderUnion())
		}
	case 1179:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Order
//line mysql.y:5958
		{
			mysqLOCAL = &Order{Expr: mysqDollar[1].exprUnion(), Direction: mysqDollar[2].orderDirectionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1180:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.OrderDirection
//line mysql.y:5963
		{
			mysqLOCAL = AscOrder
		}
		mysqVAL.union = mysqLOCAL
	case 1181:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderDirection
//line mysql.y:5967
		{
			mysqLOCAL = AscOrder
		}
		mysqVAL.union = mysqLOCAL
	case 1182:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderDirection
//line mysql.y:5971
		{
			mysqLOCAL = DescOrder
		}
		mysqVAL.union = mysqLOCAL
	case 1183:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5976
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1184:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5980
		{
			mysqLOCAL = mysqDollar[1].limitUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1185:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5986
		{
			mysqLOCAL = &Limit{Rowcount: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1186:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5990
		{
			mysqLOCAL = &Limit{Offset: mysqDollar[2].exprUnion(), Rowcount: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1187:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5994
		{
			mysqLOCAL = &Limit{Offset: mysqDollar[4].exprUnion(), Rowcount: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1188:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:5999
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1189:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:6003
		{
			mysqLOCAL = []AlterOption{mysqDollar[1].alterOptionUnion(), mysqDollar[2].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1190:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:6007
		{
			mysqLOCAL = []AlterOption{mysqDollar[1].alterOptionUnion(), mysqDollar[2].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1191:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:6011
		{
			mysqLOCAL = []AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1192:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:6015
		{
			mysqLOCAL = []AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1193:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6022
		{
			mysqLOCAL = &LockOption{Type: DefaultType}
		}
		mysqVAL.union = mysqLOCAL
	case 1194:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6026
		{
			mysqLOCAL = &LockOption{Type: NoneType}
		}
		mysqVAL.union = mysqLOCAL
	case 1195:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6030
		{
			mysqLOCAL = &LockOption{Type: SharedType}
		}
		mysqVAL.union = mysqLOCAL
	case 1196:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6034
		{
			mysqLOCAL = &LockOption{Type: ExclusiveType}
		}
		mysqVAL.union = mysqLOCAL
	case 1197:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6040
		{
			mysqLOCAL = AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1198:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6044
		{
			mysqLOCAL = AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1199:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6048
		{
			mysqLOCAL = AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1200:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:6052
		{
			mysqLOCAL = AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1201:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6057
		{
			mysqVAL.str = ""
		}
	case 1202:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6061
		{
			mysqVAL.str = string(mysqDollar[3].str)
		}
	case 1203:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6065
		{
			mysqVAL.str = string(mysqDollar[3].str)
		}
	case 1204:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6069
		{
			mysqVAL.str = string(mysqDollar[3].str)
		}
	case 1205:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6074
		{
			mysqVAL.str = ""
		}
	case 1206:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6078
		{
			mysqVAL.str = mysqDollar[3].str
		}
	case 1207:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6084
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1208:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6088
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1209:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6093
		{
			mysqVAL.str = ""
		}
	case 1210:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:6097
		{
			mysqVAL.str = mysqDollar[2].str
		}
	case 1211:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6102
		{
			mysqVAL.str = "cascaded"
		}
	case 1212:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6106
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1213:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6110
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1214:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:6115
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1215:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:6119
		{
			mysqLOCAL = mysqDollar[3].definerUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1216:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:6125
		{
			mysqLOCAL = &Definer{
				Name: string(mysqDollar[1].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1217:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:6131
		{
			mysqLOCAL = &Definer{
				Name: string(mysqDollar[1].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1218:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:6137
		{
			mysqLOCAL = &Definer{
				Name:    mysqDollar[1].str,
				Address: mysqDollar[2].str,
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1219:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6146
		{
			mysqVAL.str = encodeSQLString(mysqDollar[1].str)
		}
	case 1220:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6150
		{
			mysqVAL.str = formatIdentifier(mysqDollar[1].str)
		}
	case 1221:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6155
		{
			mysqVAL.str = ""
		}
	case 1222:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6159
		{
			mysqVAL.str = formatAddress(mysqDollar[1].str)
		}
	case 1223:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Lock
//line mysql.y:6165
		{
			mysqLOCAL = ForUpdateLock
		}
		mysqVAL.union = mysqLOCAL
	case 1224:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Lock
//line mysql.y:6169
		{
			mysqLOCAL = ShareModeLock
		}
		mysqVAL.union = mysqLOCAL
	case 1225:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL *ast.SelectInto
//line mysql.y:6175
		{
			mysqLOCAL = &SelectInto{Type: IntoOutfileS3, FileName: encodeSQLString(mysqDollar[4].str), Charset: mysqDollar[5].columnCharset, FormatOption: mysqDollar[6].str, ExportOption: mysqDollar[7].str, Manifest: mysqDollar[8].str, Overwrite: mysqDollar[9].str}
		}
		mysqVAL.union = mysqLOCAL
	case 1226:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SelectInto
//line mysql.y:6179
		{
			mysqLOCAL = &SelectInto{Type: IntoDumpfile, FileName: encodeSQLString(mysqDollar[3].str), Charset: ColumnCharset{}, FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
		mysqVAL.union = mysqLOCAL
	case 1227:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.SelectInto
//line mysql.y:6183
		{
			mysqLOCAL = &SelectInto{Type: IntoOutfile, FileName: encodeSQLString(mysqDollar[3].str), Charset: mysqDollar[4].columnCharset, FormatOption: "", ExportOption: mysqDollar[5].str, Manifest: "", Overwrite: ""}
		}
		mysqVAL.union = mysqLOCAL
	case 1228:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6188
		{
			mysqVAL.str = ""
		}
	case 1229:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6192
		{
			mysqVAL.str = " format csv" + mysqDollar[3].str
		}
	case 1230:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6196
		{
			mysqVAL.str = " format text" + mysqDollar[3].str
		}
	case 1231:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6201
		{
			mysqVAL.str = ""
		}
	case 1232:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6205
		{
			mysqVAL.str = " header"
		}
	case 1233:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6210
		{
			mysqVAL.str = ""
		}
	case 1234:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6214
		{
			mysqVAL.str = " manifest on"
		}
	case 1235:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6218
		{
			mysqVAL.str = " manifest off"
		}
	case 1236:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6223
		{
			mysqVAL.str = ""
		}
	case 1237:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6227
		{
			mysqVAL.str = " overwrite on"
		}
	case 1238:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6231
		{
			mysqVAL.str = " overwrite off"
		}
	case 1239:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6237
		{
			mysqVAL.str = mysqDollar[1].str + mysqDollar[2].str
		}
	case 1240:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6242
		{
			mysqVAL.str = ""
		}
	case 1241:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6246
		{
			mysqVAL.str = " lines" + mysqDollar[2].str
		}
	case 1242:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6252
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 1243:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6256
		{
			mysqVAL.str = mysqDollar[1].str + mysqDollar[2].str
		}
	case 1244:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6262
		{
			mysqVAL.str = " starting by " + encodeSQLString(mysqDollar[3].str)
		}
	case 1245:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6266
		{
			mysqVAL.str = " terminated by " + encodeSQLString(mysqDollar[3].str)
		}
	case 1246:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6271
		{
			mysqVAL.str = ""
		}
	case 1247:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6275
		{
			mysqVAL.str = " " + mysqDollar[1].str + mysqDollar[2].str
		}
	case 1248:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6281
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 1249:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6285
		{
			mysqVAL.str = mysqDollar[1].str + mysqDollar[2].str
		}
	case 1250:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6291
		{
			mysqVAL.str = " terminated by " + encodeSQLString(mysqDollar[3].str)
		}
	case 1251:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:6295
		{
			mysqVAL.str = mysqDollar[1].str + " enclosed by " + encodeSQLString(mysqDollar[4].str)
		}
	case 1252:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6299
		{
			mysqVAL.str = " escaped by " + encodeSQLString(mysqDollar[3].str)
		}
	case 1253:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6304
		{
			mysqVAL.str = ""
		}
	case 1254:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6308
		{
			mysqVAL.str = " optionally"
		}
	case 1255:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6321
		{
			mysqLOCAL = &Insert{Rows: mysqDollar[2].valuesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1256:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6325
		{
			mysqLOCAL = &Insert{Rows: mysqDollar[1].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1257:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6329
		{
			mysqLOCAL = &Insert{Columns: mysqDollar[2].columnsUnion(), Rows: mysqDollar[5].valuesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1258:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6333
		{
			mysqLOCAL = &Insert{Rows: mysqDollar[4].valuesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1259:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6337
		{
			mysqLOCAL = &Insert{Columns: mysqDollar[2].columnsUnion(), Rows: mysqDollar[4].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1260:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:6343
		{
			mysqLOCAL = Columns{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1261:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:6347
		{
			mysqLOCAL = Columns{mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1262:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6351
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 1263:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:6355
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[5].colIdent)
		}
	case 1264:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.UpdateExprs
//line mysql.y:6360
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1265:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.UpdateExprs
//line mysql.y:6364
		{
			mysqLOCAL = mysqDollar[5].updateExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1266:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Values
//line mysql.y:6370
		{
			mysqLOCAL = Values{mysqDollar[1].valTupleUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1267:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6374
		{
			mysqSLICE := (*ast.Values)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].valTupleUnion())
		}
	case 1268:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ValTuple
//line mysql.y:6380
		{
			mysqLOCAL = mysqDollar[1].valTupleUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1269:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ValTuple
//line mysql.y:6384
		{
			mysqLOCAL = ValTuple{}
		}
		mysqVAL.union = mysqLOCAL
	case 1270:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ValTuple
//line mysql.y:6390
		{
			mysqLOCAL = ValTuple(mysqDollar[2].exprsUnion())
		}
		mysqVAL.union = mysqLOCAL
	case 1271:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6395
		{
			if len(mysqDollar[1].valTupleUnion()) == 1 {
				mysqLOCAL = mysqDollar[1].valTupleUnion()[0]
			} else {
				mysqLOCAL = mysqDollar[1].valTupleUnion()
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1272:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.UpdateExprs
//line mysql.y:6405
		{
			mysqLOCAL = UpdateExprs{mysqDollar[1].updateExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1273:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6409
		{
			mysqSLICE := (*ast.UpdateExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].updateExprUnion())
		}
	case 1274:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.UpdateExpr
//line mysql.y:6415
		{
			mysqLOCAL = &UpdateExpr{Name: mysqDollar[1].colNameUnion(), Expr: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1275:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SetExprs
//line mysql.y:6421
		{
			mysqLOCAL = SetExprs{mysqDollar[1].setExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1276:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6425
		{
			mysqSLICE := (*ast.SetExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].setExprUnion())
		}
	case 1277:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6431
		{
			mysqLOCAL = &SetExpr{Name: mysqDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral("on")}
		}
		mysqVAL.union = mysqLOCAL
	case 1278:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6435
		{
			mysqLOCAL = &SetExpr{Name: mysqDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral("off")}
		}
		mysqVAL.union = mysqLOCAL
	case 1279:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6439
		{
			mysqLOCAL = &SetExpr{Name: mysqDollar[1].colIdent, Scope: ImplicitScope, Expr: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1280:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6443
		{
			mysqLOCAL = &SetExpr{Name: NewColIdent(string(mysqDollar[1].str)), Scope: ImplicitScope, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1281:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6447
		{
			mysqDollar[2].setExprUnion().Scope = mysqDollar[1].scopeUnion()
			mysqLOCAL = mysqDollar[2].setExprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1283:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6455
		{
			mysqVAL.str = "charset"
		}
	case 1286:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6465
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[1].colIdent.String())
		}
		mysqVAL.union = mysqLOCAL
	case 1287:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6469
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1288:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6473
		{
			mysqLOCAL = &Default{}
		}
		mysqVAL.union = mysqLOCAL
	case 1291:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6482
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1292:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6484
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1293:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6487
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1294:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6489
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1295:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6492
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1296:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6494
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1297:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Ignore
//line mysql.y:6497
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1298:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Ignore
//line mysql.y:6499
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1299:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6502
		{
			mysqVAL.empty = struct{}{}
		}
	case 1300:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6504
		{
			mysqVAL.empty = struct{}{}
		}
	case 1301:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6506
		{
			mysqVAL.empty = struct{}{}
		}
	case 1302:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:6510
		{
			mysqLOCAL = &CallProc{Name: mysqDollar[2].tableName, Params: mysqDollar[4].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1303:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:6515
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1304:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:6519
		{
			mysqLOCAL = mysqDollar[1].exprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1305:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:6524
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1306:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:6526
		{
			mysqLOCAL = []*IndexOption{mysqDollar[1].indexOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1307:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:6530
		{
			mysqLOCAL = &IndexOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[2].colIdent.String())}
		}
		mysqVAL.union = mysqLOCAL
	case 1308:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6536
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 1309:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6540
		{
			mysqVAL.colIdent = NewColIdent(string(mysqDollar[1].str))
		}
	case 1311:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6547
		{
			mysqVAL.colIdent = NewColIdent(string(mysqDollar[1].str))
		}
	case 1312:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6553
		{
			mysqVAL.tableIdent = NewTableIdent(string(mysqDollar[1].colIdent.String()))
		}
	case 1313:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6557
		{
			mysqVAL.tableIdent = NewTableIdent(string(mysqDollar[1].str))
		}
	case 1314:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6563
		{
			mysqVAL.tableIdent = NewTableIdent("")
		}
	case 1315:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6567
		{
			mysqVAL.tableIdent = mysqDollar[1].tableIdent
		}
	case 1317:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6574
		{
			mysqVAL.tableIdent = NewTableIdent(string(mysqDollar[1].str))
		}
	case 1817:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:7098
		{
			if incNesting(mysqlex) {
				mysqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1818:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:7107
		{
			decNesting(mysqlex)
		}
	case 1819:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:7112
		{
			skipToEnd(mysqlex)
		}
	case 1820:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:7117
		{
			skipToEnd(mysqlex)
		}
	case 1821:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:7121
		{
			skipToEnd(mysqlex)
		}
	case 1822:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:7125
		{
			skipToEnd(mysqlex)
		}
	}
	goto mysqstack /* stack new state and value */
}
