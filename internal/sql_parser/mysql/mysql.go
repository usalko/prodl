// Code generated by goyacc -v y.output -fast-append -p mysq -o mysql.go mysql.y. DO NOT EDIT.

//line mysql.y:18
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql.y:18

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(mysqlex mysqLexer, stmt ast.Statement) {
	mysqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(mysqlex mysqLexer, allow bool) {
	mysqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(mysqlex mysqLexer, node ast.Statement) {
	mysqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(mysqlex mysqLexer) bool {
	mysqlex.(tokenizer.Tokenizer).IncNesting()
	if mysqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(mysqlex mysqLexer) {
	mysqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(mysqlex mysqLexer) {
	mysqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(mysqlex mysqLexer, bvar string) {
	mysqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const DISTINCTROW = 57380
const PARSER = 57381
const GENERATED = 57382
const ALWAYS = 57383
const OUTFILE = 57384
const S3 = 57385
const DATA = 57386
const LOAD = 57387
const LINES = 57388
const TERMINATED = 57389
const ESCAPED = 57390
const ENCLOSED = 57391
const DUMPFILE = 57392
const CSV = 57393
const HEADER = 57394
const MANIFEST = 57395
const OVERWRITE = 57396
const STARTING = 57397
const OPTIONALLY = 57398
const VALUES = 57399
const LAST_INSERT_ID = 57400
const NEXT = 57401
const VALUE = 57402
const SHARE = 57403
const MODE = 57404
const SQL_NO_CACHE = 57405
const SQL_CACHE = 57406
const SQL_CALC_FOUND_ROWS = 57407
const JOIN = 57408
const STRAIGHT_JOIN = 57409
const LEFT = 57410
const RIGHT = 57411
const INNER = 57412
const OUTER = 57413
const CROSS = 57414
const NATURAL = 57415
const USE = 57416
const FORCE = 57417
const ON = 57418
const USING = 57419
const INPLACE = 57420
const COPY = 57421
const INSTANT = 57422
const ALGORITHM = 57423
const NONE = 57424
const SHARED = 57425
const EXCLUSIVE = 57426
const SUBQUERY_AS_EXPR = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const HEX = 57431
const STRING = 57432
const NCHAR_STRING = 57433
const INTEGRAL = 57434
const FLOAT = 57435
const DECIMAL = 57436
const HEXNUM = 57437
const VALUE_ARG = 57438
const LIST_ARG = 57439
const COMMENT = 57440
const COMMENT_KEYWORD = 57441
const BIT_LITERAL = 57442
const COMPRESSION = 57443
const JSON_PRETTY = 57444
const JSON_STORAGE_SIZE = 57445
const JSON_STORAGE_FREE = 57446
const JSON_CONTAINS = 57447
const JSON_CONTAINS_PATH = 57448
const JSON_EXTRACT = 57449
const JSON_KEYS = 57450
const JSON_OVERLAPS = 57451
const JSON_SEARCH = 57452
const JSON_VALUE = 57453
const EXTRACT = 57454
const NULL = 57455
const TRUE = 57456
const FALSE = 57457
const OFF = 57458
const DISCARD = 57459
const IMPORT = 57460
const ENABLE = 57461
const DISABLE = 57462
const TABLESPACE = 57463
const VIRTUAL = 57464
const STORED = 57465
const BOTH = 57466
const LEADING = 57467
const TRAILING = 57468
const EMPTY_FROM_CLAUSE = 57469
const LOWER_THAN_CHARSET = 57470
const CHARSET = 57471
const UNIQUE = 57472
const KEY = 57473
const EXPRESSION_PREC_SETTER = 57474
const OR = 57475
const XOR = 57476
const AND = 57477
const NOT = 57478
const BETWEEN = 57479
const CASE = 57480
const WHEN = 57481
const THEN = 57482
const ELSE = 57483
const END = 57484
const LE = 57485
const GE = 57486
const NE = 57487
const NULL_SAFE_EQUAL = 57488
const IS = 57489
const LIKE = 57490
const REGEXP = 57491
const IN = 57492
const SHIFT_LEFT = 57493
const SHIFT_RIGHT = 57494
const DIV = 57495
const MOD = 57496
const UNARY = 57497
const COLLATE = 57498
const BINARY = 57499
const UNDERSCORE_ARMSCII8 = 57500
const UNDERSCORE_ASCII = 57501
const UNDERSCORE_BIG5 = 57502
const UNDERSCORE_BINARY = 57503
const UNDERSCORE_CP1250 = 57504
const UNDERSCORE_CP1251 = 57505
const UNDERSCORE_CP1256 = 57506
const UNDERSCORE_CP1257 = 57507
const UNDERSCORE_CP850 = 57508
const UNDERSCORE_CP852 = 57509
const UNDERSCORE_CP866 = 57510
const UNDERSCORE_CP932 = 57511
const UNDERSCORE_DEC8 = 57512
const UNDERSCORE_EUCJPMS = 57513
const UNDERSCORE_EUCKR = 57514
const UNDERSCORE_GB18030 = 57515
const UNDERSCORE_GB2312 = 57516
const UNDERSCORE_GBK = 57517
const UNDERSCORE_GEOSTD8 = 57518
const UNDERSCORE_GREEK = 57519
const UNDERSCORE_HEBREW = 57520
const UNDERSCORE_HP8 = 57521
const UNDERSCORE_KEYBCS2 = 57522
const UNDERSCORE_KOI8R = 57523
const UNDERSCORE_KOI8U = 57524
const UNDERSCORE_LATIN1 = 57525
const UNDERSCORE_LATIN2 = 57526
const UNDERSCORE_LATIN5 = 57527
const UNDERSCORE_LATIN7 = 57528
const UNDERSCORE_MACCE = 57529
const UNDERSCORE_MACROMAN = 57530
const UNDERSCORE_SJIS = 57531
const UNDERSCORE_SWE7 = 57532
const UNDERSCORE_TIS620 = 57533
const UNDERSCORE_UCS2 = 57534
const UNDERSCORE_UJIS = 57535
const UNDERSCORE_UTF16 = 57536
const UNDERSCORE_UTF16LE = 57537
const UNDERSCORE_UTF32 = 57538
const UNDERSCORE_UTF8 = 57539
const UNDERSCORE_UTF8MB4 = 57540
const UNDERSCORE_UTF8MB3 = 57541
const INTERVAL = 57542
const JSON_EXTRACT_OP = 57543
const JSON_UNQUOTE_EXTRACT_OP = 57544
const CREATE = 57545
const ALTER = 57546
const DROP = 57547
const RENAME = 57548
const ANALYZE = 57549
const ADD = 57550
const FLUSH = 57551
const CHANGE = 57552
const MODIFY = 57553
const DEALLOCATE = 57554
const REVERT = 57555
const SCHEMA = 57556
const TABLE = 57557
const INDEX = 57558
const VIEW = 57559
const TO = 57560
const IGNORE = 57561
const IF = 57562
const PRIMARY = 57563
const COLUMN = 57564
const SPATIAL = 57565
const FULLTEXT = 57566
const KEY_BLOCK_SIZE = 57567
const CHECK = 57568
const INDEXES = 57569
const ACTION = 57570
const CASCADE = 57571
const CONSTRAINT = 57572
const FOREIGN = 57573
const NO = 57574
const REFERENCES = 57575
const RESTRICT = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const COALESCE = 57585
const EXCHANGE = 57586
const REBUILD = 57587
const PARTITIONING = 57588
const REMOVE = 57589
const PREPARE = 57590
const EXECUTE = 57591
const MAXVALUE = 57592
const PARTITION = 57593
const REORGANIZE = 57594
const LESS = 57595
const THAN = 57596
const PROCEDURE = 57597
const TRIGGER = 57598
const VINDEX = 57599
const VINDEXES = 57600
const DIRECTORY = 57601
const NAME = 57602
const UPGRADE = 57603
const STATUS = 57604
const VARIABLES = 57605
const WARNINGS = 57606
const CASCADED = 57607
const DEFINER = 57608
const OPTION = 57609
const SQL = 57610
const UNDEFINED = 57611
const SEQUENCE = 57612
const MERGE = 57613
const TEMPORARY = 57614
const TEMPTABLE = 57615
const INVOKER = 57616
const SECURITY = 57617
const FIRST = 57618
const AFTER = 57619
const LAST = 57620
const CANCEL = 57621
const RETRY = 57622
const COMPLETE = 57623
const CLEANUP = 57624
const THROTTLE = 57625
const UNTHROTTLE = 57626
const EXPIRE = 57627
const RATIO = 57628
const BEGIN = 57629
const START = 57630
const TRANSACTION = 57631
const COMMIT = 57632
const ROLLBACK = 57633
const SAVEPOINT = 57634
const RELEASE = 57635
const WORK = 57636
const BIT = 57637
const TINYINT = 57638
const SMALLINT = 57639
const MEDIUMINT = 57640
const INT = 57641
const INTEGER = 57642
const BIGINT = 57643
const INTNUM = 57644
const REAL = 57645
const DOUBLE = 57646
const FLOAT_TYPE = 57647
const DECIMAL_TYPE = 57648
const NUMERIC = 57649
const TIME = 57650
const TIMESTAMP = 57651
const DATETIME = 57652
const YEAR = 57653
const CHAR = 57654
const VARCHAR = 57655
const BOOL = 57656
const CHARACTER = 57657
const VARBINARY = 57658
const NCHAR = 57659
const TEXT = 57660
const TINYTEXT = 57661
const MEDIUMTEXT = 57662
const LONGTEXT = 57663
const BLOB = 57664
const TINYBLOB = 57665
const MEDIUMBLOB = 57666
const LONGBLOB = 57667
const JSON = 57668
const JSON_SCHEMA_VALID = 57669
const JSON_SCHEMA_VALIDATION_REPORT = 57670
const ENUM = 57671
const GEOMETRY = 57672
const POINT = 57673
const LINESTRING = 57674
const POLYGON = 57675
const GEOMETRYCOLLECTION = 57676
const MULTIPOINT = 57677
const MULTILINESTRING = 57678
const MULTIPOLYGON = 57679
const ASCII = 57680
const UNICODE = 57681
const NULLX = 57682
const AUTO_INCREMENT = 57683
const APPROXNUM = 57684
const SIGNED = 57685
const UNSIGNED = 57686
const ZEROFILL = 57687
const CODE = 57688
const COLLATION = 57689
const COLUMNS = 57690
const DATABASES = 57691
const ENGINES = 57692
const EVENT = 57693
const EXTENDED = 57694
const FIELDS = 57695
const FULL = 57696
const FUNCTION = 57697
const GTID_EXECUTED = 57698
const KEYSPACES = 57699
const OPEN = 57700
const PLUGINS = 57701
const PRIVILEGES = 57702
const PROCESSLIST = 57703
const SCHEMAS = 57704
const TABLES = 57705
const TRIGGERS = 57706
const USER = 57707
const VGTID_EXECUTED = 57708
const VSCHEMA = 57709
const NAMES = 57710
const GLOBAL = 57711
const SESSION = 57712
const ISOLATION = 57713
const LEVEL = 57714
const READ = 57715
const WRITE = 57716
const ONLY = 57717
const REPEATABLE = 57718
const COMMITTED = 57719
const UNCOMMITTED = 57720
const SERIALIZABLE = 57721
const CURRENT_TIMESTAMP = 57722
const DATABASE = 57723
const CURRENT_DATE = 57724
const NOW = 57725
const CURRENT_TIME = 57726
const LOCALTIME = 57727
const LOCALTIMESTAMP = 57728
const CURRENT_USER = 57729
const UTC_DATE = 57730
const UTC_TIME = 57731
const UTC_TIMESTAMP = 57732
const DAY = 57733
const DAY_HOUR = 57734
const DAY_MICROSECOND = 57735
const DAY_MINUTE = 57736
const DAY_SECOND = 57737
const HOUR = 57738
const HOUR_MICROSECOND = 57739
const HOUR_MINUTE = 57740
const HOUR_SECOND = 57741
const MICROSECOND = 57742
const MINUTE = 57743
const MINUTE_MICROSECOND = 57744
const MINUTE_SECOND = 57745
const MONTH = 57746
const QUARTER = 57747
const SECOND = 57748
const SECOND_MICROSECOND = 57749
const YEAR_MONTH = 57750
const WEEK = 57751
const REPLACE = 57752
const CONVERT = 57753
const CAST = 57754
const SUBSTR = 57755
const SUBSTRING = 57756
const GROUP_CONCAT = 57757
const SEPARATOR = 57758
const TIMESTAMPADD = 57759
const TIMESTAMPDIFF = 57760
const WEIGHT_STRING = 57761
const LTRIM = 57762
const RTRIM = 57763
const TRIM = 57764
const JSON_ARRAY = 57765
const JSON_OBJECT = 57766
const JSON_QUOTE = 57767
const JSON_DEPTH = 57768
const JSON_TYPE = 57769
const JSON_LENGTH = 57770
const JSON_VALID = 57771
const JSON_ARRAY_APPEND = 57772
const JSON_ARRAY_INSERT = 57773
const JSON_INSERT = 57774
const JSON_MERGE = 57775
const JSON_MERGE_PATCH = 57776
const JSON_MERGE_PRESERVE = 57777
const JSON_REMOVE = 57778
const JSON_REPLACE = 57779
const JSON_SET = 57780
const JSON_UNQUOTE = 57781
const MATCH = 57782
const AGAINST = 57783
const BOOLEAN = 57784
const LANGUAGE = 57785
const WITH = 57786
const QUERY = 57787
const EXPANSION = 57788
const WITHOUT = 57789
const VALIDATION = 57790
const UNUSED = 57791
const ARRAY = 57792
const BYTE = 57793
const CUME_DIST = 57794
const DESCRIPTION = 57795
const DENSE_RANK = 57796
const EMPTY = 57797
const EXCEPT = 57798
const FIRST_VALUE = 57799
const GROUPING = 57800
const GROUPS = 57801
const JSON_TABLE = 57802
const LAG = 57803
const LAST_VALUE = 57804
const LATERAL = 57805
const LEAD = 57806
const NTH_VALUE = 57807
const NTILE = 57808
const OF = 57809
const OVER = 57810
const PERCENT_RANK = 57811
const RANK = 57812
const RECURSIVE = 57813
const ROW_NUMBER = 57814
const SYSTEM = 57815
const WINDOW = 57816
const ACTIVE = 57817
const ADMIN = 57818
const AUTOEXTEND_SIZE = 57819
const BUCKETS = 57820
const CLONE = 57821
const COLUMN_FORMAT = 57822
const COMPONENT = 57823
const DEFINITION = 57824
const ENFORCED = 57825
const ENGINE_ATTRIBUTE = 57826
const EXCLUDE = 57827
const FOLLOWING = 57828
const GEOMCOLLECTION = 57829
const GET_MASTER_PUBLIC_KEY = 57830
const HISTOGRAM = 57831
const HISTORY = 57832
const INACTIVE = 57833
const INVISIBLE = 57834
const LOCKED = 57835
const MASTER_COMPRESSION_ALGORITHMS = 57836
const MASTER_PUBLIC_KEY_PATH = 57837
const MASTER_TLS_CIPHERSUITES = 57838
const MASTER_ZSTD_COMPRESSION_LEVEL = 57839
const NESTED = 57840
const NETWORK_NAMESPACE = 57841
const NOWAIT = 57842
const NULLS = 57843
const OJ = 57844
const OLD = 57845
const OPTIONAL = 57846
const ORDINALITY = 57847
const ORGANIZATION = 57848
const OTHERS = 57849
const PARTIAL = 57850
const PATH = 57851
const PERSIST = 57852
const PERSIST_ONLY = 57853
const PRECEDING = 57854
const PRIVILEGE_CHECKS_USER = 57855
const PROCESS = 57856
const RANDOM = 57857
const REFERENCE = 57858
const REQUIRE_ROW_FORMAT = 57859
const RESOURCE = 57860
const RESPECT = 57861
const RESTART = 57862
const RETAIN = 57863
const REUSE = 57864
const ROLE = 57865
const SECONDARY = 57866
const SECONDARY_ENGINE = 57867
const SECONDARY_ENGINE_ATTRIBUTE = 57868
const SECONDARY_LOAD = 57869
const SECONDARY_UNLOAD = 57870
const SIMPLE = 57871
const SKIP = 57872
const SRID = 57873
const THREAD_PRIORITY = 57874
const TIES = 57875
const UNBOUNDED = 57876
const VCPU = 57877
const VISIBLE = 57878
const RETURNING = 57879
const FORMAT = 57880
const TREE = 57881
const TRADITIONAL = 57882
const LOCAL = 57883
const LOW_PRIORITY = 57884
const NO_WRITE_TO_BINLOG = 57885
const LOGS = 57886
const ERROR = 57887
const GENERAL = 57888
const HOSTS = 57889
const OPTIMIZER_COSTS = 57890
const USER_RESOURCES = 57891
const SLOW = 57892
const CHANNEL = 57893
const RELAY = 57894
const EXPORT = 57895
const AVG_ROW_LENGTH = 57896
const CONNECTION = 57897
const CHECKSUM = 57898
const DELAY_KEY_WRITE = 57899
const ENCRYPTION = 57900
const ENGINE = 57901
const INSERT_METHOD = 57902
const MAX_ROWS = 57903
const MIN_ROWS = 57904
const PACK_KEYS = 57905
const PASSWORD = 57906
const FIXED = 57907
const DYNAMIC = 57908
const COMPRESSED = 57909
const REDUNDANT = 57910
const COMPACT = 57911
const ROW_FORMAT = 57912
const STATS_AUTO_RECALC = 57913
const STATS_PERSISTENT = 57914
const STATS_SAMPLE_PAGES = 57915
const STORAGE = 57916
const MEMORY = 57917
const DISK = 57918
const PARTITIONS = 57919
const LINEAR = 57920
const RANGE = 57921
const LIST = 57922
const SUBPARTITION = 57923
const SUBPARTITIONS = 57924
const HASH = 57925

var mysqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"PARTITIONS",
	"LINEAR",
	"RANGE",
	"LIST",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"HASH",
	"';'",
}

var mysqStatenames = [...]string{}

const mysqEofCode = 1
const mysqErrCode = 2
const mysqInitialStackSize = 16

//line yacctab:1
var mysqExca = [...]int{
	-1, 0,
	12, 46,
	13, 46,
	-2, 36,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 144,
	601, 144,
	-2, 152,
	-1, 47,
	132, 152,
	172, 152,
	332, 152,
	-2, 492,
	-1, 54,
	35, 715,
	233, 715,
	244, 715,
	279, 727,
	280, 727,
	-2, 717,
	-1, 59,
	235, 740,
	-2, 738,
	-1, 112,
	232, 1263,
	-2, 118,
	-1, 114,
	1, 145,
	601, 145,
	-2, 152,
	-1, 125,
	133, 383,
	238, 383,
	-2, 486,
	-1, 144,
	132, 152,
	172, 152,
	332, 152,
	-2, 501,
	-1, 674,
	217, 1284,
	-2, 1280,
	-1, 675,
	217, 1285,
	-2, 1281,
	-1, 749,
	59, 806,
	-2, 821,
	-1, 786,
	148, 1692,
	-2, 111,
	-1, 787,
	148, 1533,
	-2, 112,
	-1, 793,
	148, 1617,
	-2, 1257,
	-1, 941,
	148, 1461,
	-2, 1254,
	-1, 982,
	243, 40,
	248, 40,
	-2, 394,
	-1, 1065,
	1, 548,
	601, 548,
	-2, 152,
	-1, 1293,
	59, 807,
	-2, 826,
	-1, 1294,
	59, 808,
	-2, 827,
	-1, 1347,
	132, 152,
	172, 152,
	332, 152,
	-2, 433,
	-1, 1426,
	133, 383,
	238, 383,
	-2, 486,
	-1, 1435,
	243, 41,
	248, 41,
	-2, 395,
	-1, 1735,
	217, 1289,
	-2, 1283,
	-1, 1818,
	132, 152,
	172, 152,
	332, 152,
	-2, 434,
	-1, 1825,
	25, 173,
	-2, 175,
	-1, 2065,
	87, 38,
	-2, 863,
	-1, 2122,
	77, 93,
	87, 93,
	-2, 883,
	-1, 2190,
	576, 651,
	-2, 625,
	-1, 2326,
	49, 1225,
	-2, 1219,
	-1, 2544,
	87, 38,
	-2, 864,
	-1, 2582,
	7, 52,
	18, 52,
	20, 52,
	88, 52,
	-2, 855,
	-1, 2860,
	576, 651,
	-2, 639,
	-1, 2918,
	22, 1619,
	32, 1619,
	173, 1619,
	255, 1619,
	312, 1619,
	313, 1619,
	314, 1619,
	315, 1619,
	316, 1619,
	317, 1619,
	318, 1619,
	320, 1619,
	321, 1619,
	322, 1619,
	323, 1619,
	324, 1619,
	325, 1619,
	326, 1619,
	327, 1619,
	328, 1619,
	329, 1619,
	330, 1619,
	331, 1619,
	333, 1619,
	335, 1619,
	336, 1619,
	337, 1619,
	338, 1619,
	339, 1619,
	340, 1619,
	341, 1619,
	342, 1619,
	343, 1619,
	346, 1619,
	347, 1619,
	348, 1619,
	349, 1619,
	350, 1619,
	351, 1619,
	352, 1619,
	353, 1619,
	354, 1619,
	459, 1619,
	-2, 583,
}

const mysqPrivate = 57344

const mysqLast = 42975

var mysqAct = [...]int{
	674, 683, 2683, 2684, 2285, 2682, 2980, 2972, 2841, 2948,
	2916, 2949, 2659, 1350, 1768, 2475, 2900, 676, 2381, 1815,
	2388, 2019, 2429, 1749, 667, 36, 2438, 2443, 2794, 3,
	596, 2339, 2440, 2439, 2437, 2442, 2441, 2646, 1120, 1751,
	94, 668, 2342, 742, 2697, 2817, 2053, 2458, 2396, 2457,
	184, 1885, 1273, 184, 764, 557, 184, 592, 2343, 2340,
	2547, 572, 1772, 184, 1308, 2553, 2247, 2702, 2284, 677,
	665, 184, 666, 2283, 1788, 2573, 2093, 589, 618, 2460,
	1848, 2116, 2539, 2230, 2327, 184, 588, 2155, 2337, 2080,
	2187, 590, 1873, 1853, 2156, 1916, 1404, 944, 2157, 1804,
	746, 791, 750, 153, 2105, 765, 2086, 572, 1792, 1295,
	572, 184, 572, 35, 2055, 744, 1793, 37, 1894, 584,
	767, 2072, 1077, 1729, 1451, 1593, 1705, 1704, 1635, 1645,
	1433, 1872, 1855, 1780, 1932, 2149, 972, 1339, 2124, 977,
	139, 1317, 93, 1795, 601, 788, 1276, 1547, 1657, 1732,
	1205, 1612, 1141, 1440, 1543, 951, 948, 1531, 1870, 983,
	980, 1844, 89, 952, 978, 979, 1338, 1322, 1336, 756,
	1118, 157, 1399, 1552, 1425, 122, 117, 115, 990, 116,
	123, 1773, 1701, 1062, 754, 778, 95, 74, 579, 83,
	1742, 751, 1212, 1105, 2850, 752, 2180, 1208, 87, 96,
	2973, 1887, 1888, 1889, 1014, 2647, 2426, 1887, 2178, 186,
	187, 188, 2209, 2208, 1930, 2639, 561, 2238, 118, 2448,
	1142, 8, 124, 7, 100, 2602, 88, 2239, 2687, 6,
	772, 2873, 777, 753, 75, 2874, 537, 1142, 2687, 1600,
	1516, 186, 187, 188, 1599, 1746, 1747, 1598, 1019, 945,
	1597, 758, 561, 580, 1596, 1595, 970, 582, 1588, 583,
	2937, 743, 2051, 745, 102, 103, 2323, 106, 2527, 2448,
	112, 1920, 2952, 181, 2200, 785, 532, 2446, 2082, 2989,
	759, 2947, 2445, 2963, 2203, 766, 118, 993, 792, 1918,
	956, 968, 967, 558, 966, 1302, 739, 740, 741, 2452,
	969, 749, 1605, 561, 2790, 994, 1020, 1023, 1024, 2789,
	1018, 85, 1017, 2686, 2652, 1919, 961, 2653, 180, 2988,
	2910, 2874, 1965, 2686, 2976, 2869, 1152, 2446, 76, 780,
	781, 1029, 76, 2961, 2660, 78, 2901, 1913, 2909, 1035,
	552, 2868, 119, 1152, 1776, 2246, 1016, 2921, 1414, 2452,
	2509, 2052, 550, 2217, 118, 162, 76, 2216, 2377, 1032,
	1033, 1034, 2237, 1037, 1038, 1039, 1040, 1064, 1809, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1962, 1963, 1112, 1340,
	1114, 1341, 547, 2133, 2378, 2379, 2132, 76, 2138, 2134,
	1117, 556, 1810, 1811, 1095, 2715, 85, 1084, 2449, 737,
	85, 736, 1085, 159, 1748, 160, 562, 1100, 1101, 2926,
	1083, 2096, 1082, 2181, 1148, 1096, 2953, 1140, 1111, 1113,
	2842, 1084, 2145, 2924, 85, 179, 1085, 2384, 1174, 1089,
	2500, 1148, 2930, 2931, 2089, 2090, 2097, 2954, 1828, 1827,
	2398, 2399, 562, 561, 2550, 561, 2498, 2925, 2449, 2799,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1182, 1184,
	1185, 1589, 1590, 2477, 570, 85, 2273, 1587, 574, 568,
	2188, 1895, 2385, 2212, 538, 1864, 540, 553, 1938, 564,
	1933, 563, 543, 1036, 542, 545, 554, 546, 1061, 541,
	1687, 551, 2975, 562, 555, 1116, 549, 565, 2387, 1097,
	1858, 1102, 2470, 965, 1532, 1070, 1071, 965, 1060, 1506,
	2471, 1103, 2382, 1090, 1109, 1104, 1774, 1775, 1110, 1098,
	1099, 1941, 184, 1942, 184, 1943, 2938, 184, 1115, 2398,
	2399, 1066, 2225, 1939, 163, 2641, 2383, 1073, 2640, 1944,
	1042, 1041, 2479, 169, 1108, 2397, 2774, 2478, 572, 1122,
	572, 572, 1937, 1507, 1935, 1508, 973, 2400, 1003, 2637,
	974, 963, 1001, 1898, 85, 572, 572, 1789, 2389, 1282,
	1679, 1668, 1669, 1670, 1671, 1681, 1672, 1673, 1674, 1686,
	1682, 1675, 1676, 1683, 1684, 1685, 1677, 1678, 1680, 974,
	1012, 36, 1011, 1010, 1936, 1418, 1134, 561, 1147, 1144,
	1145, 1146, 1151, 1153, 1150, 1009, 1149, 1008, 1007, 1006,
	1005, 1000, 1013, 1143, 1186, 1147, 1144, 1145, 1146, 1151,
	1153, 1150, 2274, 1149, 1186, 2400, 949, 2990, 949, 2147,
	1143, 986, 947, 2959, 2397, 949, 985, 1544, 1776, 1917,
	1857, 1871, 1439, 562, 779, 562, 2400, 2226, 1924, 971,
	2849, 1080, 2179, 1086, 1087, 1088, 1022, 1540, 2214, 154,
	1063, 1031, 985, 1128, 2056, 2058, 1021, 1025, 566, 1963,
	964, 2636, 1412, 2229, 964, 2248, 1915, 2419, 2211, 1189,
	1190, 1191, 1192, 1411, 1410, 1093, 559, 2984, 2198, 1197,
	1541, 1200, 2182, 992, 1408, 536, 531, 2838, 2242, 2589,
	1271, 560, 1004, 1123, 1266, 2569, 1002, 2224, 1977, 2129,
	2223, 960, 1187, 1188, 962, 2092, 2043, 2867, 1741, 2087,
	1124, 1125, 1326, 1252, 1075, 1816, 1186, 184, 2551, 1185,
	572, 572, 114, 2376, 761, 2863, 1015, 2632, 1193, 2563,
	1106, 79, 2202, 2450, 2451, 2855, 184, 1438, 1553, 2685,
	1934, 1964, 2800, 1537, 2386, 1079, 2454, 2250, 1285, 2685,
	109, 1342, 1289, 1138, 2266, 572, 2600, 2601, 746, 184,
	992, 84, 1658, 2171, 572, 84, 744, 1288, 1157, 1286,
	572, 1518, 1517, 1519, 1520, 1521, 2201, 1283, 1137, 1272,
	1135, 2711, 991, 2450, 2451, 155, 1136, 562, 2607, 84,
	75, 1536, 167, 992, 1214, 1210, 2454, 1211, 1081, 965,
	2606, 957, 788, 1069, 1902, 1658, 2929, 1991, 959, 958,
	1774, 1775, 2260, 2259, 2258, 2252, 2057, 2256, 2232, 2251,
	110, 2249, 2232, 2231, 1617, 1448, 2254, 2231, 1447, 1072,
	84, 1437, 1287, 2879, 175, 2253, 93, 1912, 1618, 1619,
	1616, 1272, 1258, 1259, 1260, 1261, 1262, 1156, 1157, 1861,
	2928, 992, 2255, 2257, 2955, 1910, 1914, 963, 1003, 991,
	1277, 1030, 156, 161, 158, 164, 165, 166, 168, 170,
	171, 172, 173, 1092, 1107, 1001, 2880, 1907, 174, 176,
	177, 178, 1554, 2390, 1094, 2991, 1078, 2394, 1907, 1862,
	2831, 2982, 991, 96, 2983, 2393, 2981, 1860, 985, 988,
	989, 1158, 949, 2590, 1274, 1065, 982, 986, 992, 85,
	1327, 1987, 743, 1284, 1911, 992, 1337, 2986, 1158, 1302,
	1307, 745, 1304, 1615, 184, 1909, 1662, 981, 1400, 2395,
	1663, 1863, 1158, 2832, 2391, 1533, 2782, 1534, 1409, 2392,
	1535, 1859, 1969, 1970, 1971, 792, 1332, 1333, 2781, 1302,
	991, 2772, 2675, 1290, 2674, 2614, 985, 988, 989, 2613,
	949, 572, 2603, 1435, 982, 986, 964, 688, 689, 690,
	2992, 1444, 186, 187, 188, 1446, 2597, 2427, 1449, 1450,
	572, 572, 2415, 572, 1986, 572, 572, 2153, 572, 572,
	572, 572, 572, 572, 1178, 1179, 1180, 1181, 1183, 1182,
	1184, 1185, 1481, 1482, 1445, 572, 2152, 991, 1867, 184,
	1487, 1527, 995, 985, 991, 2810, 1302, 997, 1158, 995,
	985, 998, 996, 783, 997, 1511, 184, 1510, 998, 996,
	1509, 1480, 1499, 1155, 1483, 1156, 1157, 1493, 1490, 572,
	1489, 184, 999, 1180, 1181, 1183, 1182, 1184, 1185, 1488,
	1155, 1542, 1156, 1157, 572, 1460, 184, 2956, 1431, 2268,
	2858, 1311, 2857, 1526, 1155, 1501, 1156, 1157, 186, 187,
	188, 184, 2136, 2835, 1607, 1609, 1610, 1158, 184, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1160, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 572, 1424, 1608, 1524,
	2834, 1443, 1484, 572, 572, 1453, 2833, 1454, 2777, 1456,
	1458, 1312, 1513, 1462, 1464, 1466, 1468, 1470, 2762, 1407,
	2761, 184, 2710, 1442, 186, 187, 188, 1525, 1883, 2708,
	1421, 1422, 2671, 1158, 2611, 1434, 1420, 1176, 1177, 1178,
	1179, 1180, 1181, 1183, 1182, 1184, 1185, 1441, 1441, 2596,
	1155, 1158, 1156, 1157, 1415, 1416, 1417, 1549, 2418, 2417,
	2504, 1302, 2162, 1523, 1158, 2150, 1413, 572, 1268, 1642,
	1642, 1158, 1639, 1643, 1781, 1782, 1512, 186, 187, 188,
	1648, 572, 2506, 1928, 1927, 1640, 1640, 1485, 1771, 1550,
	1522, 1613, 1557, 1158, 1514, 1504, 572, 572, 1500, 1561,
	1496, 1563, 1564, 1565, 1566, 1158, 1982, 1545, 1570, 1155,
	1495, 1156, 1157, 1494, 2000, 2008, 1981, 118, 1659, 1313,
	1491, 1492, 968, 967, 2474, 966, 1497, 1498, 1611, 1620,
	1127, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1621, 1559, 2807, 1158, 1302, 2806,
	90, 90, 2078, 2974, 2028, 1302, 1555, 1556, 92, 184,
	1702, 91, 91, 572, 1315, 1155, 1580, 1156, 1157, 1560,
	2125, 1733, 2766, 1584, 1585, 2765, 1567, 1568, 1569, 92,
	1158, 2943, 1302, 1155, 2658, 1156, 1157, 184, 2189, 1302,
	572, 186, 187, 188, 1614, 1881, 1155, 99, 1156, 1157,
	184, 1980, 2094, 1155, 572, 1156, 1157, 98, 98, 184,
	97, 184, 1702, 184, 184, 572, 1302, 1302, 572, 92,
	2167, 1758, 1824, 1759, 1644, 1155, 2371, 1156, 1157, 572,
	1314, 1650, 1651, 2126, 1735, 1158, 1963, 1155, 1302, 1156,
	1157, 1174, 1158, 2128, 1170, 1733, 1171, 186, 187, 188,
	1825, 1879, 2562, 788, 2078, 2907, 788, 93, 1737, 1738,
	1172, 1173, 1169, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1183, 1182, 1184, 1185, 2102, 93, 1978, 675, 1302, 1155,
	1734, 1156, 1157, 1736, 572, 1764, 1739, 1740, 2078, 2887,
	2564, 1874, 1875, 1876, 1791, 1158, 1878, 1880, 1882, 2078,
	2883, 2875, 1302, 1908, 1834, 1835, 1836, 1837, 1735, 1158,
	2101, 572, 1155, 1154, 1156, 1157, 2862, 572, 1444, 2957,
	2078, 1444, 1763, 1444, 1158, 2020, 1820, 185, 2102, 1906,
	185, 1819, 1829, 185, 1830, 1831, 1832, 1833, 573, 1802,
	185, 2523, 1753, 2406, 1158, 2078, 2851, 758, 185, 2311,
	1840, 1841, 1842, 1843, 1786, 1158, 1766, 2650, 2848, 1850,
	1896, 1907, 185, 1808, 572, 2102, 572, 1155, 1823, 1156,
	1157, 1784, 572, 572, 1155, 1856, 1156, 1157, 2934, 2846,
	2523, 1302, 1807, 1806, 573, 2785, 1302, 573, 185, 573,
	2078, 2773, 2584, 1822, 1821, 1978, 792, 1158, 2013, 792,
	2650, 1302, 1158, 2078, 2648, 1907, 1302, 2525, 1893, 1158,
	184, 2567, 1302, 1154, 1302, 2013, 1302, 184, 1866, 1997,
	184, 184, 2408, 2407, 184, 2094, 184, 1155, 1302, 1156,
	1157, 2404, 2405, 184, 2404, 2403, 1851, 1846, 1847, 2770,
	184, 1155, 1996, 1156, 1157, 1869, 1158, 1865, 1901, 2338,
	1158, 1904, 1877, 1905, 2102, 1302, 1155, 1907, 1156, 1157,
	2562, 1921, 184, 1978, 1302, 1963, 2210, 572, 1403, 2192,
	993, 1851, 1900, 1903, 1899, 1890, 1155, 1158, 1156, 1157,
	1174, 2633, 2241, 1922, 1158, 2521, 1779, 1155, 994, 1156,
	1157, 1174, 2512, 1976, 1923, 1306, 1158, 2562, 1441, 1744,
	1925, 1926, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183,
	1182, 1184, 1185, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1183, 1182, 1184, 1185, 1174, 2185, 2186, 1158, 1591, 1155,
	2154, 1156, 1157, 2511, 1155, 1931, 1156, 1157, 1613, 1158,
	1539, 1155, 2125, 1156, 1157, 1334, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1183, 1182, 1184, 1185, 1158, 1954, 1955,
	2037, 2078, 2077, 1957, 1403, 1402, 976, 2036, 1348, 1347,
	975, 2074, 1958, 1158, 2890, 1973, 1947, 1975, 1155, 2035,
	1156, 1157, 1155, 1158, 1156, 1157, 92, 1301, 85, 748,
	1974, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1182,
	1184, 1185, 2796, 1158, 1309, 2126, 2763, 1158, 2722, 1155,
	2034, 1156, 1157, 2631, 2430, 1963, 1155, 2628, 1156, 1157,
	2609, 1158, 2033, 2515, 1961, 184, 2514, 1405, 1155, 1849,
	1156, 1157, 2472, 184, 2432, 2428, 1642, 572, 2193, 2062,
	2032, 1614, 1845, 572, 1978, 1839, 1158, 1838, 1972, 1529,
	1436, 2066, 1640, 1432, 572, 2158, 2031, 1401, 111, 1155,
	2049, 1156, 1157, 1158, 2159, 1064, 2030, 85, 99, 2615,
	2476, 1155, 2060, 1156, 1157, 2797, 2574, 2575, 184, 98,
	1476, 97, 184, 1988, 1864, 1990, 2029, 1756, 1582, 1155,
	2023, 1156, 1157, 36, 2969, 2967, 2950, 2135, 2098, 2872,
	2815, 2577, 2118, 2159, 2022, 1155, 2424, 1156, 1157, 2423,
	2422, 1158, 2338, 2172, 2079, 1155, 1158, 1156, 1157, 1948,
	2616, 2617, 2618, 1735, 2580, 2006, 2579, 1158, 2619, 2021,
	2357, 1477, 1478, 1479, 2356, 1155, 1310, 1156, 1157, 1155,
	2940, 1156, 1157, 2360, 2908, 572, 2018, 2358, 2361, 1302,
	1583, 184, 2359, 1155, 2075, 1156, 1157, 1770, 184, 1762,
	2040, 2041, 2088, 2692, 1158, 2691, 2568, 2316, 1277, 1734,
	2315, 2050, 572, 2146, 2148, 2620, 2621, 2622, 1155, 572,
	1156, 1157, 2830, 1444, 1444, 2555, 2184, 2362, 572, 2111,
	2112, 2117, 2076, 2554, 2017, 1155, 2701, 1156, 1157, 2016,
	2703, 2091, 2139, 2328, 2330, 2207, 2071, 2123, 2558, 185,
	2014, 185, 2331, 2690, 185, 2325, 184, 184, 184, 184,
	184, 1538, 2127, 2206, 762, 735, 2130, 1856, 184, 184,
	2402, 2143, 763, 2163, 2137, 573, 1027, 573, 573, 1026,
	2140, 2486, 1472, 1155, 184, 1156, 1157, 2010, 1155, 90,
	1156, 1157, 573, 573, 90, 2151, 92, 2158, 1158, 1155,
	91, 1156, 1157, 572, 2235, 91, 1654, 2160, 2107, 2110,
	2111, 2112, 2108, 1126, 2109, 2113, 2199, 119, 2574, 2575,
	1655, 99, 2168, 2560, 2169, 92, 2173, 2174, 2175, 1473,
	1474, 1475, 98, 2205, 97, 2978, 1155, 2420, 1156, 1157,
	1642, 1951, 1642, 92, 2540, 1642, 1781, 1782, 2847, 744,
	1642, 1424, 2265, 2194, 2195, 2792, 1640, 2401, 1640, 2115,
	2204, 1640, 1767, 1967, 572, 99, 1640, 2314, 2261, 2286,
	97, 2286, 770, 771, 2286, 2313, 98, 98, 97, 2286,
	572, 2009, 2161, 2243, 2822, 2821, 2709, 2164, 2165, 2244,
	2707, 2706, 2699, 2227, 2629, 184, 2559, 2557, 2433, 572,
	1891, 1419, 2305, 769, 99, 2698, 2548, 2298, 2299, 2300,
	2301, 2094, 2291, 572, 2288, 98, 2074, 2292, 2971, 2970,
	572, 572, 2275, 184, 184, 184, 184, 184, 2245, 1998,
	1155, 2262, 1156, 1157, 1754, 184, 1328, 1319, 104, 105,
	184, 2970, 2971, 184, 750, 184, 2836, 2341, 184, 184,
	184, 2305, 2341, 2350, 185, 2595, 760, 573, 573, 2344,
	2279, 101, 86, 1, 1289, 2118, 2370, 2233, 2335, 2318,
	2234, 2599, 2923, 185, 548, 1745, 2319, 2293, 2294, 2295,
	2296, 2297, 1275, 2951, 2416, 2919, 2304, 2920, 1515, 2306,
	1505, 2661, 573, 184, 1703, 2793, 185, 2436, 1897, 2627,
	1854, 573, 984, 144, 2310, 2320, 572, 573, 1817, 1818,
	2332, 2333, 2903, 2317, 572, 108, 942, 107, 987, 184,
	1091, 1892, 2651, 2144, 1826, 1354, 2372, 1352, 2456, 2373,
	1353, 2351, 184, 751, 2354, 1351, 1356, 752, 2363, 2435,
	2352, 2353, 1355, 2355, 93, 2349, 1999, 184, 2374, 2526,
	184, 1549, 1586, 2367, 2368, 2307, 2308, 2309, 1300, 1296,
	2487, 569, 2380, 2114, 182, 1343, 1320, 1028, 539, 2409,
	2410, 1929, 2412, 1297, 544, 2411, 2107, 2110, 2111, 2112,
	2108, 1198, 2109, 2113, 1581, 2312, 1300, 1296, 2131, 789,
	782, 2464, 1755, 2463, 2064, 2346, 2552, 2324, 1760, 1761,
	1299, 1297, 1298, 2434, 2326, 1856, 2455, 2081, 2329, 2322,
	2829, 2700, 2888, 2141, 1316, 2467, 1989, 1656, 1796, 1606,
	594, 593, 591, 2520, 2067, 2095, 1293, 1294, 1299, 1161,
	1298, 2481, 572, 184, 678, 2054, 2482, 1329, 2106, 2104,
	2103, 1949, 1803, 2576, 2572, 2915, 1798, 1794, 2489, 2073,
	602, 595, 587, 2496, 2490, 2592, 2462, 2213, 2473, 2215,
	2142, 185, 2469, 1139, 1292, 2493, 2494, 581, 2495, 955,
	1653, 2497, 2798, 2499, 2853, 2501, 2484, 2485, 1966, 2508,
	1291, 1666, 1667, 2413, 2414, 2860, 2444, 2645, 2425, 2190,
	1884, 62, 184, 40, 1694, 576, 2936, 1130, 573, 776,
	31, 30, 29, 28, 23, 22, 21, 20, 19, 25,
	2598, 2541, 2542, 18, 2546, 17, 16, 573, 573, 2447,
	573, 184, 573, 573, 2946, 573, 573, 573, 573, 573,
	573, 2556, 2549, 2977, 113, 49, 46, 44, 121, 120,
	184, 47, 573, 184, 184, 184, 185, 2571, 2561, 2581,
	2578, 43, 1067, 572, 572, 41, 27, 26, 15, 14,
	13, 12, 11, 185, 10, 2585, 9, 2634, 2635, 2587,
	2588, 5, 4, 2586, 34, 2464, 573, 2463, 185, 1303,
	1305, 33, 32, 2593, 2594, 1133, 2610, 24, 2612, 2,
	2177, 573, 1886, 185, 0, 0, 0, 572, 572, 572,
	572, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 573, 0, 0, 0, 0, 0, 0,
	573, 573, 0, 1642, 0, 1642, 0, 0, 0, 658,
	0, 0, 0, 2657, 0, 2655, 2656, 0, 185, 1640,
	0, 1640, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 2286, 0, 2286, 0, 0, 2667, 0, 0,
	0, 0, 0, 2670, 0, 0, 0, 2695, 572, 2666,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 1642, 0, 0, 2724,
	571, 36, 2679, 2341, 2688, 2678, 2716, 0, 573, 2604,
	2605, 0, 1640, 0, 0, 0, 2344, 2696, 0, 0,
	2344, 2718, 744, 573, 573, 2720, 0, 0, 2705, 2704,
	0, 0, 2712, 2714, 0, 0, 0, 0, 0, 0,
	0, 0, 572, 0, 0, 0, 790, 0, 0, 946,
	0, 953, 0, 0, 0, 184, 2771, 0, 572, 0,
	0, 2638, 0, 2728, 0, 2642, 2643, 2644, 0, 0,
	0, 572, 2725, 2726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 2768, 2775,
	573, 2769, 0, 0, 2783, 2812, 2813, 0, 2767, 1642,
	572, 0, 2816, 0, 572, 572, 0, 2787, 2788, 2795,
	0, 0, 0, 0, 185, 1640, 0, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 573, 0, 572, 0, 0, 185, 0, 185, 0,
	185, 185, 573, 2944, 0, 573, 0, 2840, 0, 2823,
	2824, 2826, 2825, 1371, 0, 0, 573, 0, 0, 0,
	0, 0, 2828, 0, 0, 0, 0, 2344, 2837, 0,
	0, 0, 0, 0, 572, 0, 744, 0, 0, 2843,
	0, 0, 0, 0, 0, 2839, 0, 0, 2845, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 572, 184, 0,
	0, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2864, 0, 0, 0, 0, 2852, 36, 2856, 0,
	0, 0, 2861, 2859, 0, 0, 0, 0, 573, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 2778, 2779, 2780, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 572, 572, 0, 0, 2341, 2881, 0,
	0, 0, 36, 2891, 0, 0, 572, 2889, 0, 0,
	0, 573, 0, 573, 1359, 184, 572, 2894, 2899, 573,
	573, 2902, 2911, 2896, 2895, 2893, 2898, 2897, 2886, 0,
	0, 2795, 2904, 0, 0, 0, 2932, 2922, 2914, 2927,
	0, 0, 0, 0, 0, 0, 0, 1660, 0, 0,
	0, 1661, 0, 2939, 0, 0, 0, 185, 0, 0,
	0, 2945, 0, 0, 185, 572, 0, 185, 185, 0,
	0, 185, 0, 185, 572, 0, 0, 0, 1642, 2958,
	185, 2965, 2960, 0, 2962, 0, 0, 185, 0, 2968,
	2966, 0, 0, 0, 1640, 2964, 1372, 0, 0, 0,
	0, 0, 0, 0, 2979, 0, 0, 0, 2985, 185,
	1303, 1743, 2987, 0, 573, 0, 0, 0, 0, 0,
	0, 1642, 0, 0, 2993, 0, 2995, 2996, 2813, 2994,
	0, 0, 0, 0, 0, 0, 0, 1640, 0, 0,
	0, 0, 1765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1385, 1388, 1389, 1390, 1391, 1392, 1393,
	0, 1394, 1395, 1396, 1397, 1398, 1373, 1374, 1375, 1376,
	1357, 1358, 1386, 0, 1360, 0, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 0, 0, 1370, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 790, 0, 790,
	790, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1129, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 1868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 573, 119, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	1387, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 0, 0, 0, 0, 0, 185, 1280,
	1281, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 0, 0, 573, 0, 0, 0,
	0, 0, 0, 0, 1324, 573, 0, 0, 0, 0,
	0, 0, 0, 790, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 185, 185, 185, 185, 0, 0,
	0, 0, 0, 0, 0, 185, 185, 0, 0, 0,
	0, 0, 1979, 0, 0, 0, 1983, 163, 1984, 1985,
	0, 185, 0, 0, 0, 0, 169, 1993, 0, 0,
	1994, 1995, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2001, 2002, 2003,
	2004, 2005, 0, 2007, 0, 0, 0, 0, 0, 2011,
	0, 2012, 0, 0, 0, 2015, 0, 0, 0, 0,
	0, 0, 0, 2024, 2025, 2026, 2027, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2038, 2039, 0, 0,
	0, 573, 0, 0, 2044, 2045, 2046, 2047, 2048, 0,
	1765, 0, 0, 0, 0, 0, 0, 573, 0, 0,
	0, 2061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 573, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 0, 0, 573, 573, 0,
	185, 185, 185, 185, 185, 0, 0, 0, 0, 0,
	946, 0, 185, 0, 0, 0, 0, 185, 0, 0,
	185, 0, 185, 1269, 0, 185, 185, 185, 0, 1452,
	1452, 0, 1452, 0, 1452, 1452, 0, 1461, 1452, 1452,
	1452, 1452, 1452, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 0, 1269, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 2183, 0, 0, 0, 1528, 0,
	0, 573, 0, 0, 0, 0, 185, 119, 0, 141,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 185,
	162, 0, 0, 183, 0, 0, 535, 0, 155, 567,
	0, 0, 0, 0, 185, 167, 535, 185, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 790, 0, 140, 757, 0,
	0, 0, 790, 790, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 775, 0, 775, 175, 159, 0,
	160, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 150, 149,
	179, 0, 0, 0, 0, 156, 161, 158, 164, 165,
	166, 168, 170, 171, 172, 173, 0, 2272, 0, 573,
	185, 174, 176, 177, 178, 0, 1636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2287, 0, 0,
	1649, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 0, 0, 0, 0, 1664, 1665, 0, 2302, 2303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 790, 0, 0, 0, 0, 145, 1429, 152,
	0, 1426, 0, 146, 147, 0, 0, 0, 185, 163,
	0, 0, 1278, 0, 0, 0, 0, 2347, 169, 0,
	0, 0, 1757, 0, 0, 0, 0, 185, 0, 0,
	185, 185, 185, 0, 2365, 2366, 0, 0, 0, 0,
	573, 573, 0, 0, 0, 0, 0, 0, 0, 1769,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 534, 790, 0, 0, 0,
	0, 0, 0, 0, 790, 575, 0, 790, 0, 0,
	0, 0, 0, 738, 573, 573, 573, 573, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 2488, 0,
	0, 0, 0, 0, 0, 2492, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 573, 953, 573, 0, 2502,
	2503, 2505, 2507, 0, 0, 0, 0, 0, 0, 2513,
	0, 0, 0, 0, 2517, 2518, 2519, 0, 0, 0,
	0, 2522, 0, 0, 148, 0, 0, 2524, 0, 0,
	2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
	0, 0, 2538, 946, 0, 1636, 0, 0, 2543, 0,
	0, 1636, 1636, 0, 0, 0, 0, 142, 0, 573,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 573, 0, 0, 0, 0,
	0, 0, 0, 2565, 2566, 0, 0, 2570, 573, 0,
	155, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 0, 0, 0, 2582, 2583, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 0, 0,
	0, 573, 573, 0, 0, 535, 0, 535, 0, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 1960, 0, 0, 0,
	573, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 161, 158,
	164, 165, 166, 168, 170, 171, 172, 173, 0, 0,
	0, 0, 0, 174, 176, 177, 178, 0, 0, 0,
	0, 573, 0, 0, 0, 2649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1371, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2676, 0, 0, 0, 2677, 0,
	0, 0, 0, 0, 2681, 0, 573, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 790, 0, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 573, 0, 0, 1769, 0, 0, 0,
	0, 0, 2068, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 2083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1359, 0, 0, 757,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 0, 1068, 0, 1074, 0, 0, 1076,
	0, 573, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2784, 0, 0, 0, 0, 0, 0,
	0, 0, 2791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2801, 2802, 2803, 0,
	2804, 2805, 0, 0, 0, 0, 2808, 0, 2809, 0,
	2811, 2814, 0, 0, 2166, 0, 0, 2818, 1372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1769, 0, 0, 0, 0, 0, 0, 2191, 0,
	0, 0, 0, 0, 0, 2844, 0, 2196, 0, 0,
	0, 0, 0, 2730, 2732, 2731, 2741, 2742, 2743, 2744,
	2745, 2746, 2747, 624, 0, 1385, 1388, 1389, 1390, 1391,
	1392, 1393, 0, 1394, 1395, 1396, 1397, 1398, 1373, 1374,
	1375, 1376, 1357, 1358, 1386, 0, 1360, 0, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 0, 0, 1370,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 0, 0,
	0, 0, 0, 0, 0, 0, 2866, 535, 0, 0,
	0, 0, 1636, 0, 0, 0, 0, 0, 0, 0,
	2871, 0, 0, 0, 0, 2876, 0, 0, 0, 0,
	0, 2877, 2878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 2884,
	1269, 0, 0, 1269, 0, 0, 0, 1270, 1269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 790, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 1270, 0, 0, 1270, 0, 1452,
	0, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	2935, 0, 1387, 0, 0, 0, 0, 0, 2321, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2941,
	0, 0, 790, 2942, 535, 0, 1269, 0, 0, 2348,
	1452, 1269, 0, 0, 0, 0, 0, 0, 0, 1548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	1571, 1572, 535, 535, 535, 535, 535, 535, 535, 0,
	0, 0, 2736, 2737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 1269, 0,
	0, 0, 0, 1769, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 619, 673, 621,
	670, 671, 0, 617, 620, 672, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 775, 0,
	0, 0, 0, 0, 0, 775, 775, 0, 0, 0,
	0, 1270, 622, 623, 2729, 2733, 2734, 2735, 2738, 2739,
	2740, 2748, 2750, 647, 2749, 2751, 2752, 2753, 2756, 2757,
	2758, 2759, 2754, 2755, 2760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 775, 1548, 775, 775, 775,
	775, 775, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2321, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 775, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 535, 0, 0, 0, 0, 0, 0,
	1548, 0, 535, 1558, 535, 0, 535, 1805, 0, 0,
	1562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 0, 1594, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1769, 1769, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 2662, 2663, 2664, 2665,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 160, 0, 0, 0,
	0, 1269, 0, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 129, 150, 149, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 535, 0, 0, 0, 2717, 0, 2719,
	535, 0, 0, 535, 535, 0, 0, 535, 0, 1952,
	0, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 0, 1783, 535, 0, 0, 0, 0, 0, 0,
	0, 1787, 0, 1790, 0, 0, 1594, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1769, 0, 145, 126, 152, 133, 125, 0, 146,
	147, 0, 0, 0, 0, 163, 0, 2786, 0, 0,
	0, 0, 0, 0, 169, 134, 0, 0, 0, 0,
	790, 0, 0, 0, 0, 685, 77, 0, 0, 137,
	135, 130, 131, 132, 136, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 775, 0, 2819,
	138, 0, 0, 2819, 2819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 38, 39,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1769, 0, 0, 0, 0, 82, 0, 0,
	0, 42, 68, 69, 0, 66, 70, 0, 0, 0,
	0, 747, 0, 77, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 1769, 775, 775, 0, 0, 0, 0,
	154, 0, 0, 55, 0, 1548, 0, 954, 535, 0,
	0, 0, 0, 0, 0, 85, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1769, 0, 0, 0,
	0, 0, 1594, 0, 0, 0, 0, 0, 0, 1940,
	0, 0, 1945, 1946, 0, 0, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 1953, 0, 0, 0, 0,
	0, 535, 1956, 0, 0, 535, 1269, 0, 2882, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1959, 0, 0, 0, 0, 0,
	0, 0, 790, 790, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 2912, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 2917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 155, 0, 0, 0,
	0, 2176, 0, 167, 0, 0, 0, 0, 0, 45,
	48, 51, 50, 53, 0, 65, 0, 0, 73, 0,
	0, 0, 0, 0, 1769, 0, 0, 0, 0, 0,
	0, 0, 0, 2917, 0, 0, 0, 0, 0, 0,
	0, 54, 81, 80, 0, 175, 63, 64, 52, 0,
	0, 0, 0, 0, 71, 72, 0, 0, 0, 535,
	535, 535, 535, 535, 0, 0, 0, 0, 0, 0,
	0, 535, 535, 156, 161, 158, 164, 165, 166, 168,
	170, 171, 172, 173, 0, 1159, 0, 535, 0, 174,
	176, 177, 178, 56, 57, 0, 58, 59, 60, 61,
	0, 0, 775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1270, 0, 1270, 0, 0, 1270, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2122, 0, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	1270, 0, 0, 0, 0, 1270, 535, 535, 535, 535,
	535, 0, 0, 2170, 0, 0, 0, 0, 2364, 0,
	0, 0, 0, 535, 0, 0, 1502, 0, 535, 0,
	84, 535, 2375, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 535, 0, 2218, 2219,
	2220, 2221, 2222, 0, 0, 0, 0, 0, 0, 0,
	1594, 2228, 1270, 1119, 0, 1119, 1119, 0, 0, 0,
	0, 0, 535, 0, 0, 0, 2236, 0, 0, 0,
	0, 0, 77, 0, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 535, 0, 0, 0, 0, 0, 747,
	1194, 1195, 1196, 0, 1199, 0, 1201, 1202, 1203, 1204,
	0, 1207, 1209, 1209, 0, 1209, 1213, 1213, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 0, 1253, 1254, 1255, 1256,
	1257, 0, 0, 180, 0, 1213, 1213, 1213, 1213, 1213,
	0, 0, 0, 0, 1423, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 141,
	0, 0, 0, 1406, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 1279, 535, 0, 140, 0, 747,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 747,
	2063, 0, 0, 686, 687, 0, 0, 0, 159, 1641,
	160, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2421, 1427, 1428, 150, 149,
	179, 0, 0, 535, 0, 0, 535, 535, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2468, 0, 0, 0, 1551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2480,
	0, 0, 2483, 0, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 0, 145, 1429, 152,
	0, 1426, 0, 146, 147, 1270, 0, 1270, 0, 163,
	0, 0, 0, 1601, 1602, 1603, 1604, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 2545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 0, 1646, 1647, 0, 0, 0, 0,
	0, 0, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1688, 1689, 1690,
	1691, 1692, 1693, 1695, 1699, 1700, 585, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2608, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 585, 0,
	0, 0, 2623, 0, 0, 2624, 2625, 2626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1777, 1778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1814, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 142, 1119, 1119,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1852, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 535, 85, 0, 0, 0, 0, 0, 679, 686,
	687, 688, 689, 690, 680, 682, 0, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 691, 692, 0, 0, 0, 0, 175,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 161, 158,
	164, 165, 166, 168, 170, 171, 172, 173, 2465, 2466,
	0, 0, 0, 174, 176, 177, 178, 0, 1502, 0,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1992, 0, 954,
	2865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 954, 1206, 0, 0, 0, 679, 686, 687,
	688, 689, 690, 680, 682, 0, 0, 0, 681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 684, 691, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 673, 0, 670, 671,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2465, 2466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 686, 687, 0, 0, 0, 0, 1641, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2263, 2264, 0, 0, 2042,
	2267, 0, 0, 0, 0, 2269, 2270, 2271, 0, 0,
	0, 0, 0, 0, 0, 0, 2059, 2276, 2277, 2278,
	0, 0, 1706, 2280, 0, 2281, 2282, 0, 0, 0,
	2289, 2290, 0, 747, 0, 0, 0, 0, 1706, 1706,
	1706, 1706, 1706, 585, 585, 585, 585, 0, 0, 0,
	0, 0, 0, 0, 2099, 2100, 0, 0, 0, 0,
	0, 0, 0, 2119, 0, 2120, 2121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2510, 0, 0,
	0, 0, 0, 0, 2516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1797, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 2345, 0, 77, 0, 0, 1797, 1797,
	1797, 1797, 1797, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2119, 747, 0, 0, 0,
	1797, 0, 0, 1797, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2630, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2461, 0, 0, 0,
	2654, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2491, 2668, 0, 2669, 0, 0, 0, 0,
	2672, 2673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2721, 0, 0, 2723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1797, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2827, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2689, 0, 2693, 2694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2345, 0, 77, 0, 2345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2933,
	0, 0, 0, 2776, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 0, 924, 909, 462, 77, 855,
	927, 824, 843, 937, 846, 849, 891, 803, 869, 378,
	840, 795, 828, 798, 835, 799, 826, 857, 249, 823,
	911, 873, 926, 333, 246, 805, 829, 392, 845, 195,
	893, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 933, 337, 879, 2885, 446,
	363, 0, 0, 77, 859, 915, 867, 905, 854, 892,
	813, 878, 928, 841, 888, 929, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 2905, 0, 2906, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 837, 885, 923, 838, 887, 244, 292,
	251, 243, 466, 934, 914, 802, 866, 922, 0, 0,
	213, 925, 861, 0, 890, 0, 940, 797, 881, 0,
	800, 804, 936, 918, 832, 254, 0, 0, 0, 0,
	0, 0, 0, 858, 868, 902, 852, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 877, 0, 0, 0,
	809, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 812, 0,
	831, 903, 0, 794, 275, 806, 364, 236, 0, 907,
	917, 853, 502, 921, 851, 850, 897, 810, 913, 844,
	332, 808, 301, 190, 209, 0, 842, 374, 417, 423,
	912, 827, 836, 234, 834, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 876, 895, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	1121, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 822, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 908, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 900, 939,
	387, 422, 224, 487, 445, 817, 821, 815, 882, 816,
	871, 872, 818, 930, 931, 932, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 904, 811, 0, 819, 820,
	0, 910, 919, 920, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 875, 189, 205, 335, 935,
	410, 267, 508, 496, 492, 796, 207, 814, 241, 825,
	833, 0, 839, 847, 848, 860, 862, 863, 864, 865,
	883, 884, 886, 894, 896, 899, 901, 906, 916, 938,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 874, 880, 346,
	260, 280, 291, 889, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 870, 898, 342, 463, 464, 287, 360,
	0, 0, 924, 909, 462, 0, 855, 927, 824, 843,
	937, 846, 849, 891, 803, 869, 378, 840, 795, 828,
	798, 835, 799, 826, 857, 249, 823, 911, 873, 926,
	333, 246, 805, 829, 392, 845, 195, 893, 436, 233,
	343, 340, 469, 261, 252, 248, 232, 288, 350, 390,
	456, 384, 933, 337, 879, 0, 446, 363, 0, 0,
	0, 859, 915, 867, 905, 854, 892, 813, 878, 928,
	841, 888, 929, 294, 231, 296, 194, 375, 447, 265,
	0, 0, 0, 0, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 229,
	318, 327, 326, 307, 308, 310, 312, 317, 324, 330,
	837, 885, 923, 838, 887, 244, 292, 251, 243, 466,
	934, 914, 802, 866, 922, 0, 0, 213, 925, 861,
	0, 890, 0, 940, 797, 881, 0, 800, 804, 936,
	918, 832, 254, 0, 0, 0, 0, 0, 0, 0,
	858, 868, 902, 852, 0, 0, 0, 0, 0, 2376,
	0, 830, 0, 877, 0, 0, 0, 809, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 812, 0, 831, 903, 0,
	794, 275, 806, 364, 236, 0, 907, 917, 853, 502,
	921, 851, 850, 897, 810, 913, 844, 332, 808, 301,
	190, 209, 0, 842, 374, 417, 423, 912, 827, 836,
	234, 834, 421, 388, 485, 217, 263, 414, 394, 419,
	401, 266, 876, 895, 420, 338, 471, 408, 482, 503,
	504, 242, 368, 493, 460, 499, 507, 210, 239, 382,
	453, 488, 443, 361, 467, 468, 300, 442, 273, 193,
	336, 208, 429, 226, 215, 473, 491, 268, 412, 200,
	455, 480, 223, 433, 0, 0, 509, 202, 478, 452,
	357, 297, 298, 201, 0, 413, 247, 271, 237, 377,
	475, 476, 235, 510, 212, 498, 204, 1121, 497, 370,
	470, 479, 358, 348, 203, 477, 356, 347, 303, 322,
	323, 259, 282, 406, 341, 407, 283, 366, 365, 367,
	196, 489, 0, 197, 0, 448, 490, 511, 218, 219,
	221, 822, 258, 262, 270, 272, 278, 279, 286, 334,
	381, 405, 403, 409, 908, 465, 483, 494, 501, 506,
	369, 285, 444, 302, 339, 900, 939, 387, 422, 224,
	487, 445, 817, 821, 815, 882, 816, 871, 872, 818,
	930, 931, 932, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 0, 904, 811, 0, 819, 820, 0, 910, 919,
	920, 530, 349, 435, 484, 304, 316, 319, 309, 328,
	0, 329, 305, 306, 311, 313, 314, 315, 320, 321,
	325, 331, 875, 189, 205, 335, 935, 410, 267, 508,
	496, 492, 796, 207, 814, 241, 825, 833, 0, 839,
	847, 848, 860, 862, 863, 864, 865, 883, 884, 886,
	894, 896, 899, 901, 906, 916, 938, 191, 192, 198,
	206, 216, 220, 227, 240, 255, 257, 264, 276, 281,
	284, 289, 290, 293, 299, 345, 351, 352, 353, 354,
	371, 372, 373, 376, 379, 380, 383, 385, 386, 389,
	393, 397, 398, 399, 400, 402, 404, 411, 416, 424,
	425, 426, 427, 428, 431, 432, 437, 438, 439, 440,
	441, 449, 450, 454, 472, 474, 486, 500, 505, 430,
	277, 481, 0, 344, 874, 880, 346, 260, 280, 291,
	889, 495, 451, 211, 418, 269, 199, 230, 214, 238,
	253, 256, 295, 355, 362, 391, 396, 274, 250, 228,
	415, 225, 434, 457, 458, 459, 461, 359, 245, 395,
	870, 898, 342, 463, 464, 287, 360, 0, 0, 924,
	909, 462, 0, 855, 927, 824, 843, 937, 846, 849,
	891, 803, 869, 378, 840, 795, 828, 798, 835, 799,
	826, 857, 249, 823, 911, 873, 926, 333, 246, 805,
	829, 392, 845, 195, 893, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 933,
	337, 879, 0, 446, 363, 0, 0, 0, 859, 915,
	867, 905, 854, 892, 813, 878, 928, 841, 888, 929,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 837, 885, 923,
	838, 887, 244, 292, 251, 243, 466, 934, 914, 802,
	866, 922, 0, 0, 213, 925, 861, 0, 890, 0,
	940, 797, 881, 0, 800, 804, 936, 918, 832, 254,
	0, 0, 0, 0, 0, 0, 0, 858, 868, 902,
	852, 0, 0, 0, 0, 0, 2334, 0, 830, 0,
	877, 0, 0, 0, 809, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 812, 0, 831, 903, 0, 794, 275, 806,
	364, 236, 0, 907, 917, 853, 502, 921, 851, 850,
	897, 810, 913, 844, 332, 808, 301, 190, 209, 0,
	842, 374, 417, 423, 912, 827, 836, 234, 834, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 876,
	895, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 1121, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 822, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 908, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 900, 939, 387, 422, 224, 487, 445, 817,
	821, 815, 882, 816, 871, 872, 818, 930, 931, 932,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 904,
	811, 0, 819, 820, 0, 910, 919, 920, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 875,
	189, 205, 335, 935, 410, 267, 508, 496, 492, 796,
	207, 814, 241, 825, 833, 0, 839, 847, 848, 860,
	862, 863, 864, 865, 883, 884, 886, 894, 896, 899,
	901, 906, 916, 938, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 874, 880, 346, 260, 280, 291, 889, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 870, 898, 342,
	463, 464, 287, 360, 0, 0, 924, 909, 462, 0,
	855, 927, 824, 843, 937, 846, 849, 891, 803, 869,
	378, 840, 795, 828, 798, 835, 799, 826, 857, 249,
	823, 911, 873, 926, 333, 246, 805, 829, 392, 845,
	195, 893, 436, 233, 343, 340, 469, 261, 252, 248,
	232, 288, 350, 390, 456, 384, 933, 337, 879, 0,
	446, 363, 0, 0, 0, 859, 915, 867, 905, 854,
	892, 813, 878, 928, 841, 888, 929, 294, 231, 296,
	194, 375, 447, 265, 0, 0, 0, 0, 186, 187,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 229, 318, 327, 326, 307, 308, 310,
	312, 317, 324, 330, 837, 885, 923, 838, 887, 244,
	292, 251, 243, 466, 934, 914, 802, 866, 922, 0,
	0, 213, 925, 861, 0, 890, 0, 940, 797, 881,
	0, 800, 804, 936, 918, 832, 254, 0, 0, 0,
	0, 0, 0, 0, 858, 868, 902, 852, 0, 0,
	0, 0, 0, 1785, 0, 830, 0, 877, 0, 0,
	0, 809, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 812,
	0, 831, 903, 0, 794, 275, 806, 364, 236, 0,
	907, 917, 853, 502, 921, 851, 850, 897, 810, 913,
	844, 332, 808, 301, 190, 209, 0, 842, 374, 417,
	423, 912, 827, 836, 234, 834, 421, 388, 485, 217,
	263, 414, 394, 419, 401, 266, 876, 895, 420, 338,
	471, 408, 482, 503, 504, 242, 368, 493, 460, 499,
	507, 210, 239, 382, 453, 488, 443, 361, 467, 468,
	300, 442, 273, 193, 336, 208, 429, 226, 215, 473,
	491, 268, 412, 200, 455, 480, 223, 433, 0, 0,
	509, 202, 478, 452, 357, 297, 298, 201, 0, 413,
	247, 271, 237, 377, 475, 476, 235, 510, 212, 498,
	204, 1121, 497, 370, 470, 479, 358, 348, 203, 477,
	356, 347, 303, 322, 323, 259, 282, 406, 341, 407,
	283, 366, 365, 367, 196, 489, 0, 197, 0, 448,
	490, 511, 218, 219, 221, 822, 258, 262, 270, 272,
	278, 279, 286, 334, 381, 405, 403, 409, 908, 465,
	483, 494, 501, 506, 369, 285, 444, 302, 339, 900,
	939, 387, 422, 224, 487, 445, 817, 821, 815, 882,
	816, 871, 872, 818, 930, 931, 932, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 0, 904, 811, 0, 819,
	820, 0, 910, 919, 920, 530, 349, 435, 484, 304,
	316, 319, 309, 328, 0, 329, 305, 306, 311, 313,
	314, 315, 320, 321, 325, 331, 875, 189, 205, 335,
	935, 410, 267, 508, 496, 492, 796, 207, 814, 241,
	825, 833, 0, 839, 847, 848, 860, 862, 863, 864,
	865, 883, 884, 886, 894, 896, 899, 901, 906, 916,
	938, 191, 192, 198, 206, 216, 220, 227, 240, 255,
	257, 264, 276, 281, 284, 289, 290, 293, 299, 345,
	351, 352, 353, 354, 371, 372, 373, 376, 379, 380,
	383, 385, 386, 389, 393, 397, 398, 399, 400, 402,
	404, 411, 416, 424, 425, 426, 427, 428, 431, 432,
	437, 438, 439, 440, 441, 449, 450, 454, 472, 474,
	486, 500, 505, 430, 277, 481, 0, 344, 874, 880,
	346, 260, 280, 291, 889, 495, 451, 211, 418, 269,
	199, 230, 214, 238, 253, 256, 295, 355, 362, 391,
	396, 274, 250, 228, 415, 225, 434, 457, 458, 459,
	461, 359, 245, 395, 870, 898, 342, 463, 464, 287,
	360, 0, 0, 924, 909, 462, 0, 855, 927, 824,
	843, 937, 846, 849, 891, 803, 869, 378, 840, 795,
	828, 798, 835, 799, 826, 857, 249, 823, 911, 873,
	926, 333, 246, 805, 829, 392, 845, 195, 893, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 933, 337, 879, 0, 446, 363, 0,
	0, 0, 859, 915, 867, 905, 854, 892, 813, 878,
	928, 841, 888, 929, 294, 231, 296, 194, 375, 447,
	265, 0, 85, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 837, 885, 923, 838, 887, 244, 292, 251, 243,
	466, 934, 914, 802, 866, 922, 0, 0, 213, 925,
	861, 0, 890, 0, 940, 797, 881, 0, 800, 804,
	936, 918, 832, 254, 0, 0, 0, 0, 0, 0,
	0, 858, 868, 902, 852, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 877, 0, 0, 0, 809, 801,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 812, 0, 831, 903,
	0, 794, 275, 806, 364, 236, 0, 907, 917, 853,
	502, 921, 851, 850, 897, 810, 913, 844, 332, 808,
	301, 190, 209, 0, 842, 374, 417, 423, 912, 827,
	836, 234, 834, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 876, 895, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 1121, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 822, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 908, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 900, 939, 387, 422,
	224, 487, 445, 817, 821, 815, 882, 816, 871, 872,
	818, 930, 931, 932, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 904, 811, 0, 819, 820, 0, 910,
	919, 920, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 875, 189, 205, 335, 935, 410, 267,
	508, 496, 492, 796, 207, 814, 241, 825, 833, 0,
	839, 847, 848, 860, 862, 863, 864, 865, 883, 884,
	886, 894, 896, 899, 901, 906, 916, 938, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 874, 880, 346, 260, 280,
	291, 889, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 870, 898, 342, 463, 464, 287, 360, 0, 0,
	924, 909, 462, 0, 855, 927, 824, 843, 937, 846,
	849, 891, 803, 869, 378, 840, 795, 828, 798, 835,
	799, 826, 857, 249, 823, 911, 873, 926, 333, 246,
	805, 829, 392, 845, 195, 893, 436, 233, 343, 340,
	469, 261, 252, 248, 232, 288, 350, 390, 456, 384,
	933, 337, 879, 0, 446, 363, 0, 0, 0, 859,
	915, 867, 905, 854, 892, 813, 878, 928, 841, 888,
	929, 294, 231, 296, 194, 375, 447, 265, 0, 0,
	0, 0, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 229, 318, 327,
	326, 307, 308, 310, 312, 317, 324, 330, 837, 885,
	923, 838, 887, 244, 292, 251, 243, 466, 934, 914,
	802, 866, 922, 0, 0, 213, 925, 861, 0, 890,
	0, 940, 797, 881, 0, 800, 804, 936, 918, 832,
	254, 0, 0, 0, 0, 0, 0, 0, 858, 868,
	902, 852, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 877, 0, 0, 0, 809, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 812, 0, 831, 903, 0, 794, 275,
	806, 364, 236, 0, 907, 917, 853, 502, 921, 851,
	850, 897, 810, 913, 844, 332, 808, 301, 190, 209,
	0, 842, 374, 417, 423, 912, 827, 836, 234, 834,
	421, 388, 485, 217, 263, 414, 394, 419, 401, 266,
	876, 895, 420, 338, 471, 408, 482, 503, 504, 242,
	368, 493, 460, 499, 507, 210, 239, 382, 453, 488,
	443, 361, 467, 468, 300, 442, 273, 193, 336, 208,
	429, 226, 215, 473, 491, 268, 412, 200, 455, 480,
	223, 433, 0, 0, 509, 202, 478, 452, 357, 297,
	298, 201, 0, 413, 247, 271, 237, 377, 475, 476,
	235, 510, 212, 498, 204, 1121, 497, 370, 470, 479,
	358, 348, 203, 477, 356, 347, 303, 322, 323, 259,
	282, 406, 341, 407, 283, 366, 365, 367, 196, 489,
	0, 197, 0, 448, 490, 511, 218, 219, 221, 822,
	258, 262, 270, 272, 278, 279, 286, 334, 381, 405,
	403, 409, 908, 465, 483, 494, 501, 506, 369, 285,
	444, 302, 339, 900, 939, 387, 422, 224, 487, 445,
	817, 821, 815, 882, 816, 871, 872, 818, 930, 931,
	932, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 0,
	904, 811, 0, 819, 820, 0, 910, 919, 920, 530,
	349, 435, 484, 304, 316, 319, 309, 328, 0, 329,
	305, 306, 311, 313, 314, 315, 320, 321, 325, 331,
	875, 189, 205, 335, 935, 410, 267, 508, 496, 492,
	796, 207, 814, 241, 825, 833, 0, 839, 847, 848,
	860, 862, 863, 864, 865, 883, 884, 886, 894, 896,
	899, 901, 906, 916, 938, 191, 192, 198, 206, 216,
	220, 227, 240, 255, 257, 264, 276, 281, 284, 289,
	290, 293, 299, 345, 351, 352, 353, 354, 371, 372,
	373, 376, 379, 380, 383, 385, 386, 389, 393, 397,
	398, 399, 400, 402, 404, 411, 416, 424, 425, 426,
	427, 428, 431, 432, 437, 438, 439, 440, 441, 449,
	450, 454, 472, 474, 486, 500, 505, 430, 277, 481,
	0, 344, 874, 880, 346, 260, 280, 291, 889, 495,
	451, 211, 418, 269, 199, 230, 214, 238, 253, 256,
	295, 355, 362, 391, 396, 274, 250, 228, 415, 225,
	434, 457, 458, 459, 461, 359, 245, 395, 870, 898,
	342, 463, 464, 287, 360, 0, 0, 924, 909, 462,
	0, 855, 927, 824, 843, 937, 846, 849, 891, 803,
	869, 378, 840, 795, 828, 798, 835, 799, 826, 857,
	249, 823, 911, 873, 926, 333, 246, 805, 829, 392,
	845, 195, 893, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 933, 337, 879,
	0, 446, 363, 0, 0, 0, 859, 915, 867, 905,
	854, 892, 813, 878, 928, 841, 888, 929, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 837, 885, 923, 838, 887,
	244, 292, 251, 243, 466, 934, 914, 802, 866, 922,
	0, 0, 941, 925, 861, 0, 890, 0, 940, 797,
	881, 0, 800, 804, 936, 918, 832, 254, 0, 0,
	0, 0, 0, 0, 0, 858, 868, 902, 852, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 877, 0,
	0, 0, 809, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	812, 0, 831, 903, 0, 794, 275, 806, 364, 236,
	0, 907, 917, 853, 502, 921, 851, 850, 897, 810,
	913, 844, 332, 808, 301, 190, 209, 0, 842, 374,
	417, 423, 912, 827, 836, 234, 834, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 876, 895, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 807, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 822, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 908,
	465, 483, 494, 501, 506, 793, 787, 786, 302, 339,
	900, 939, 387, 422, 224, 487, 445, 817, 821, 815,
	882, 816, 871, 872, 818, 930, 931, 932, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 904, 811, 0,
	819, 820, 0, 910, 919, 920, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 875, 189, 205,
	335, 935, 410, 267, 508, 496, 492, 796, 207, 814,
	241, 825, 833, 0, 839, 847, 848, 860, 862, 863,
	864, 865, 883, 884, 886, 894, 896, 899, 901, 906,
	916, 938, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 874,
	880, 346, 260, 280, 291, 889, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 870, 898, 342, 463, 464,
	287, 360, 0, 0, 924, 909, 462, 0, 855, 927,
	824, 843, 937, 846, 849, 891, 803, 869, 378, 840,
	795, 828, 798, 835, 799, 826, 857, 249, 823, 911,
	873, 926, 333, 246, 805, 829, 392, 845, 195, 893,
	436, 233, 343, 340, 469, 261, 252, 248, 232, 288,
	350, 390, 456, 384, 933, 337, 879, 0, 446, 363,
	0, 0, 0, 859, 915, 867, 905, 854, 892, 813,
	878, 928, 841, 888, 929, 294, 231, 296, 194, 375,
	447, 265, 0, 0, 0, 0, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 229, 318, 327, 326, 307, 308, 310, 312, 317,
	324, 330, 837, 885, 923, 838, 887, 244, 292, 251,
	243, 466, 934, 914, 802, 866, 922, 0, 0, 941,
	925, 861, 0, 890, 0, 940, 797, 881, 0, 800,
	804, 936, 918, 832, 254, 0, 0, 0, 0, 0,
	0, 0, 858, 868, 902, 852, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 877, 0, 0, 0, 809,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 812, 0, 831,
	903, 0, 794, 275, 806, 364, 236, 0, 907, 917,
	853, 502, 921, 851, 850, 897, 810, 913, 844, 332,
	808, 301, 190, 209, 0, 842, 374, 417, 423, 912,
	827, 836, 234, 834, 421, 388, 485, 217, 263, 414,
	394, 419, 401, 266, 876, 895, 420, 338, 471, 408,
	482, 503, 504, 242, 368, 493, 460, 499, 507, 210,
	239, 382, 453, 488, 443, 361, 467, 468, 300, 442,
	273, 193, 336, 208, 429, 226, 215, 473, 491, 268,
	412, 200, 455, 1335, 223, 433, 0, 0, 509, 202,
	478, 452, 357, 297, 298, 201, 0, 413, 247, 271,
	237, 377, 475, 476, 235, 510, 212, 498, 204, 807,
	497, 370, 470, 479, 358, 348, 203, 477, 356, 347,
	303, 322, 323, 259, 282, 406, 341, 407, 283, 366,
	365, 367, 196, 489, 0, 197, 0, 448, 490, 511,
	218, 219, 221, 822, 258, 262, 270, 272, 278, 279,
	286, 334, 381, 405, 403, 409, 908, 465, 483, 494,
	501, 506, 793, 787, 786, 302, 339, 900, 939, 387,
	422, 224, 487, 445, 817, 821, 815, 882, 816, 871,
	872, 818, 930, 931, 932, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 0, 904, 811, 0, 819, 820, 0,
	910, 919, 920, 530, 349, 435, 484, 304, 316, 319,
	309, 328, 0, 329, 305, 306, 311, 313, 314, 315,
	320, 321, 325, 331, 875, 189, 205, 335, 935, 410,
	267, 508, 496, 492, 796, 207, 814, 241, 825, 833,
	0, 839, 847, 848, 860, 862, 863, 864, 865, 883,
	884, 886, 894, 896, 899, 901, 906, 916, 938, 191,
	192, 198, 206, 216, 220, 227, 240, 255, 257, 264,
	276, 281, 284, 289, 290, 293, 299, 345, 351, 352,
	353, 354, 371, 372, 373, 376, 379, 380, 383, 385,
	386, 389, 393, 397, 398, 399, 400, 402, 404, 411,
	416, 424, 425, 426, 427, 428, 431, 432, 437, 438,
	439, 440, 441, 449, 450, 454, 472, 474, 486, 500,
	505, 430, 277, 481, 0, 344, 874, 880, 346, 260,
	280, 291, 889, 495, 451, 211, 418, 269, 199, 230,
	214, 238, 253, 256, 295, 355, 362, 391, 396, 274,
	250, 228, 415, 225, 434, 457, 458, 459, 461, 359,
	245, 395, 870, 898, 342, 463, 464, 287, 360, 0,
	0, 924, 909, 462, 0, 855, 927, 824, 843, 937,
	846, 849, 891, 803, 869, 378, 840, 795, 828, 798,
	835, 799, 826, 857, 249, 823, 911, 873, 926, 333,
	246, 805, 829, 392, 845, 195, 893, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 933, 337, 879, 0, 446, 363, 0, 0, 0,
	859, 915, 867, 905, 854, 892, 813, 878, 928, 841,
	888, 929, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 837,
	885, 923, 838, 887, 244, 292, 251, 243, 466, 934,
	914, 802, 866, 922, 0, 0, 941, 925, 861, 0,
	890, 0, 940, 797, 881, 0, 800, 804, 936, 918,
	832, 254, 0, 0, 0, 0, 0, 0, 0, 858,
	868, 902, 852, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 877, 0, 0, 0, 809, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 812, 0, 831, 903, 0, 794,
	275, 806, 364, 236, 0, 907, 917, 853, 502, 921,
	851, 850, 897, 810, 913, 844, 332, 808, 301, 190,
	209, 0, 842, 374, 417, 423, 912, 827, 836, 234,
	834, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 876, 895, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	784, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 807, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	822, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 908, 465, 483, 494, 501, 506, 793,
	787, 786, 302, 339, 900, 939, 387, 422, 224, 487,
	445, 817, 821, 815, 882, 816, 871, 872, 818, 930,
	931, 932, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 904, 811, 0, 819, 820, 0, 910, 919, 920,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 875, 189, 205, 335, 935, 410, 267, 508, 496,
	492, 796, 207, 814, 241, 825, 833, 0, 839, 847,
	848, 860, 862, 863, 864, 865, 883, 884, 886, 894,
	896, 899, 901, 906, 916, 938, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 874, 880, 346, 260, 280, 291, 889,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 870,
	898, 342, 463, 464, 287, 360, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 0, 0, 1730, 0, 603, 0, 0,
	0, 249, 608, 0, 0, 0, 333, 246, 0, 1731,
	392, 0, 195, 0, 436, 233, 343, 340, 469, 261,
	252, 248, 232, 288, 350, 390, 456, 384, 615, 337,
	0, 0, 446, 363, 0, 0, 0, 0, 0, 610,
	611, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	231, 296, 194, 375, 447, 265, 0, 85, 0, 0,
	186, 187, 188, 679, 686, 687, 688, 689, 690, 680,
	682, 0, 0, 222, 681, 229, 626, 628, 627, 637,
	638, 639, 640, 641, 642, 643, 624, 684, 691, 692,
	0, 244, 292, 251, 243, 466, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 586, 600, 0, 614, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 598, 773, 0, 0, 0, 663,
	0, 599, 0, 0, 607, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 364,
	236, 0, 662, 0, 0, 502, 0, 0, 660, 0,
	0, 0, 0, 332, 0, 301, 190, 209, 0, 0,
	374, 417, 423, 0, 0, 0, 234, 0, 421, 388,
	485, 217, 263, 414, 394, 419, 401, 266, 0, 0,
	420, 338, 471, 408, 482, 503, 504, 242, 368, 493,
	460, 499, 507, 210, 239, 382, 453, 488, 443, 361,
	467, 468, 300, 442, 273, 193, 336, 208, 429, 226,
	215, 473, 491, 268, 412, 200, 455, 480, 223, 433,
	0, 0, 509, 202, 478, 452, 357, 297, 298, 201,
	0, 413, 247, 271, 237, 377, 475, 476, 235, 510,
	212, 498, 204, 0, 497, 370, 470, 479, 358, 348,
	203, 477, 356, 347, 303, 632, 633, 259, 282, 406,
	341, 407, 283, 366, 365, 367, 196, 489, 0, 197,
	0, 448, 490, 511, 218, 219, 221, 0, 258, 262,
	270, 272, 278, 279, 286, 334, 381, 405, 403, 409,
	0, 465, 483, 494, 501, 506, 369, 285, 444, 302,
	339, 0, 0, 387, 422, 224, 487, 445, 669, 661,
	619, 673, 621, 670, 671, 616, 617, 620, 672, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 0, 664, 606,
	605, 0, 612, 613, 0, 622, 623, 625, 629, 630,
	631, 634, 635, 636, 644, 646, 647, 645, 648, 649,
	650, 653, 654, 655, 656, 651, 652, 657, 604, 189,
	205, 335, 0, 410, 267, 508, 496, 492, 0, 207,
	0, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 192, 198, 206, 216, 220, 227,
	240, 255, 257, 264, 276, 281, 284, 289, 290, 293,
	299, 345, 351, 352, 353, 354, 371, 372, 373, 376,
	379, 380, 383, 385, 386, 389, 393, 397, 398, 399,
	400, 402, 404, 411, 416, 424, 425, 426, 427, 428,
	431, 432, 437, 438, 439, 440, 441, 449, 450, 454,
	472, 474, 486, 500, 505, 430, 277, 481, 0, 344,
	0, 0, 346, 260, 280, 291, 0, 495, 451, 211,
	418, 269, 199, 230, 214, 238, 253, 256, 295, 355,
	362, 391, 396, 274, 250, 228, 415, 225, 434, 457,
	458, 459, 461, 359, 245, 395, 0, 360, 342, 463,
	464, 287, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 0, 0, 0, 0, 603,
	0, 0, 0, 249, 608, 0, 0, 0, 333, 246,
	0, 0, 392, 0, 195, 0, 436, 233, 343, 340,
	469, 261, 252, 248, 232, 288, 350, 390, 456, 384,
	615, 337, 0, 0, 446, 363, 0, 0, 0, 0,
	0, 610, 611, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 231, 296, 194, 375, 447, 265, 0, 85,
	0, 0, 186, 187, 188, 679, 686, 687, 688, 689,
	690, 680, 682, 0, 0, 222, 681, 229, 626, 628,
	627, 637, 638, 639, 640, 641, 642, 643, 624, 684,
	691, 692, 0, 244, 292, 251, 243, 466, 0, 0,
	1696, 1697, 1698, 0, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 586, 600, 0, 614, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 598, 0, 0, 0,
	0, 663, 0, 599, 0, 0, 607, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 609,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	0, 364, 236, 0, 662, 0, 0, 502, 0, 0,
	660, 0, 0, 0, 0, 332, 0, 301, 190, 209,
	0, 0, 374, 417, 423, 0, 0, 0, 234, 0,
	421, 388, 485, 217, 263, 414, 394, 419, 401, 266,
	0, 0, 420, 338, 471, 408, 482, 503, 504, 242,
	368, 493, 460, 499, 507, 210, 239, 382, 453, 488,
	443, 361, 467, 468, 300, 442, 273, 193, 336, 208,
	429, 226, 215, 473, 491, 268, 412, 200, 455, 480,
	223, 433, 0, 0, 509, 202, 478, 452, 357, 297,
	298, 201, 0, 413, 247, 271, 237, 377, 475, 476,
	235, 510, 212, 498, 204, 0, 497, 370, 470, 479,
	358, 348, 203, 477, 356, 347, 303, 632, 633, 259,
	282, 406, 341, 407, 283, 366, 365, 367, 196, 489,
	0, 197, 0, 448, 490, 511, 218, 219, 221, 0,
	258, 262, 270, 272, 278, 279, 286, 334, 381, 405,
	403, 409, 0, 465, 483, 494, 501, 506, 369, 285,
	444, 302, 339, 0, 0, 387, 422, 224, 487, 445,
	669, 661, 619, 673, 621, 670, 671, 616, 617, 620,
	672, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 0,
	664, 606, 605, 0, 612, 613, 0, 622, 623, 625,
	629, 630, 631, 634, 635, 636, 644, 646, 647, 645,
	648, 649, 650, 653, 654, 655, 656, 651, 652, 657,
	604, 189, 205, 335, 0, 410, 267, 508, 496, 492,
	0, 207, 0, 241, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 198, 206, 216,
	220, 227, 240, 255, 257, 264, 276, 281, 284, 289,
	290, 293, 299, 345, 351, 352, 353, 354, 371, 372,
	373, 376, 379, 380, 383, 385, 386, 389, 393, 397,
	398, 399, 400, 402, 404, 411, 416, 424, 425, 426,
	427, 428, 431, 432, 437, 438, 439, 440, 441, 449,
	450, 454, 472, 474, 486, 500, 505, 430, 277, 481,
	0, 344, 0, 0, 346, 260, 280, 291, 0, 495,
	451, 211, 418, 269, 199, 230, 214, 238, 253, 256,
	295, 355, 362, 391, 396, 274, 250, 228, 415, 225,
	434, 457, 458, 459, 461, 359, 245, 395, 0, 360,
	342, 463, 464, 287, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 603, 0, 0, 0, 249, 608, 0, 0, 0,
	333, 246, 0, 0, 392, 0, 195, 0, 436, 233,
	343, 340, 469, 261, 252, 248, 232, 288, 350, 390,
	456, 384, 615, 337, 0, 0, 446, 363, 0, 0,
	0, 0, 0, 610, 611, 0, 0, 0, 0, 0,
	0, 1812, 0, 294, 231, 296, 194, 375, 447, 265,
	0, 85, 0, 0, 186, 187, 188, 679, 686, 687,
	688, 689, 690, 680, 682, 0, 0, 222, 681, 229,
	626, 628, 627, 637, 638, 639, 640, 641, 642, 643,
	624, 684, 691, 692, 1813, 244, 292, 251, 243, 466,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 586, 600, 0, 614, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 598, 0,
	0, 0, 0, 663, 0, 599, 0, 0, 607, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 609, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 364, 236, 0, 662, 0, 0, 502,
	0, 0, 660, 0, 0, 0, 0, 332, 0, 301,
	190, 209, 0, 0, 374, 417, 423, 0, 0, 0,
	234, 0, 421, 388, 485, 217, 263, 414, 394, 419,
	401, 266, 0, 0, 420, 338, 471, 408, 482, 503,
	504, 242, 368, 493, 460, 499, 507, 210, 239, 382,
	453, 488, 443, 361, 467, 468, 300, 442, 273, 193,
	336, 208, 429, 226, 215, 473, 491, 268, 412, 200,
	455, 480, 223, 433, 0, 0, 509, 202, 478, 452,
	357, 297, 298, 201, 0, 413, 247, 271, 237, 377,
	475, 476, 235, 510, 212, 498, 204, 0, 497, 370,
	470, 479, 358, 348, 203, 477, 356, 347, 303, 632,
	633, 259, 282, 406, 341, 407, 283, 366, 365, 367,
	196, 489, 0, 197, 0, 448, 490, 511, 218, 219,
	221, 0, 258, 262, 270, 272, 278, 279, 286, 334,
	381, 405, 403, 409, 0, 465, 483, 494, 501, 506,
	369, 285, 444, 302, 339, 0, 0, 387, 422, 224,
	487, 445, 669, 661, 619, 673, 621, 670, 671, 616,
	617, 620, 672, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 0, 664, 606, 605, 0, 612, 613, 0, 622,
	623, 625, 629, 630, 631, 634, 635, 636, 644, 646,
	647, 645, 648, 649, 650, 653, 654, 655, 656, 651,
	652, 657, 604, 189, 205, 335, 0, 410, 267, 508,
	496, 492, 0, 207, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 198,
	206, 216, 220, 227, 240, 255, 257, 264, 276, 281,
	284, 289, 290, 293, 299, 345, 351, 352, 353, 354,
	371, 372, 373, 376, 379, 380, 383, 385, 386, 389,
	393, 397, 398, 399, 400, 402, 404, 411, 416, 424,
	425, 426, 427, 428, 431, 432, 437, 438, 439, 440,
	441, 449, 450, 454, 472, 474, 486, 500, 505, 430,
	277, 481, 0, 344, 0, 0, 346, 260, 280, 291,
	0, 495, 451, 211, 418, 269, 199, 230, 214, 238,
	253, 256, 295, 355, 362, 391, 396, 274, 250, 228,
	415, 225, 434, 457, 458, 459, 461, 359, 245, 395,
	0, 0, 342, 463, 464, 287, 360, 0, 0, 0,
	76, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 603, 0,
	0, 0, 249, 608, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 615,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	610, 611, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 85, 0,
	0, 186, 187, 188, 679, 686, 687, 688, 689, 690,
	680, 682, 0, 0, 222, 681, 229, 626, 628, 627,
	637, 638, 639, 640, 641, 642, 643, 624, 684, 691,
	692, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 586, 600, 0, 614, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 598, 0, 0, 0, 0,
	663, 0, 599, 0, 0, 607, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 662, 0, 0, 502, 0, 0, 660,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 632, 633, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 669,
	661, 619, 673, 621, 670, 671, 616, 617, 620, 672,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 664,
	606, 605, 0, 612, 613, 0, 622, 623, 625, 629,
	630, 631, 634, 635, 636, 644, 646, 647, 645, 648,
	649, 650, 653, 654, 655, 656, 651, 652, 657, 604,
	189, 205, 335, 84, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	603, 0, 0, 0, 249, 608, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 615, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 610, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	85, 0, 0, 186, 187, 188, 679, 686, 687, 688,
	689, 690, 680, 682, 0, 0, 222, 681, 229, 626,
	628, 627, 637, 638, 639, 640, 641, 642, 643, 624,
	684, 691, 692, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 586, 600, 0, 614, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 598, 0, 0,
	0, 0, 663, 0, 599, 0, 0, 607, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 662, 0, 0, 502, 0,
	0, 660, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 2892, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 632, 633,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 669, 661, 619, 673, 621, 670, 671, 616, 617,
	620, 672, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 664, 606, 605, 0, 612, 613, 0, 622, 623,
	625, 629, 630, 631, 634, 635, 636, 644, 646, 647,
	645, 648, 649, 650, 653, 654, 655, 656, 651, 652,
	657, 604, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 603, 0, 0, 0, 249, 608, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 615, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 610, 611, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 85, 0, 1302, 186, 187, 188, 679, 686,
	687, 688, 689, 690, 680, 682, 0, 0, 222, 681,
	229, 626, 628, 627, 637, 638, 639, 640, 641, 642,
	643, 624, 684, 691, 692, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 586, 600, 0, 614,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 598,
	0, 0, 0, 0, 663, 0, 599, 0, 0, 607,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 662, 0, 0,
	502, 0, 0, 660, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	632, 633, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 669, 661, 619, 673, 621, 670, 671,
	616, 617, 620, 672, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 664, 606, 605, 0, 612, 613, 0,
	622, 623, 625, 629, 630, 631, 634, 635, 636, 644,
	646, 647, 645, 648, 649, 650, 653, 654, 655, 656,
	651, 652, 657, 604, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 603, 0, 0, 0, 249, 608,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 615, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 610, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 85, 0, 0, 186, 187, 188,
	679, 686, 687, 688, 689, 690, 680, 682, 0, 0,
	222, 681, 229, 626, 628, 627, 637, 638, 639, 640,
	641, 642, 643, 624, 684, 691, 692, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 586, 600,
	0, 614, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 598, 773, 0, 0, 0, 663, 0, 599, 0,
	0, 607, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 609, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 662,
	0, 0, 502, 0, 0, 660, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 632, 633, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 669, 661, 619, 673, 621,
	670, 671, 616, 617, 620, 672, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 664, 606, 605, 0, 612,
	613, 0, 622, 623, 625, 629, 630, 631, 634, 635,
	636, 644, 646, 647, 645, 648, 649, 650, 653, 654,
	655, 656, 651, 652, 657, 604, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 603, 0, 0, 0,
	249, 608, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 615, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 610, 611,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 85, 0, 0, 186,
	187, 188, 679, 686, 687, 688, 689, 690, 680, 682,
	0, 0, 222, 681, 229, 626, 628, 627, 637, 638,
	639, 640, 641, 642, 643, 624, 684, 691, 692, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	586, 600, 0, 614, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 598, 0, 0, 0, 0, 663, 0,
	599, 0, 0, 607, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 662, 0, 0, 502, 0, 0, 660, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 632, 633, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 669, 661, 619,
	673, 621, 670, 671, 616, 617, 620, 672, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 664, 606, 605,
	0, 612, 613, 0, 622, 623, 625, 629, 630, 631,
	634, 635, 636, 644, 646, 647, 645, 648, 649, 650,
	653, 654, 655, 656, 651, 652, 657, 604, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 603, 0,
	0, 0, 249, 608, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 615,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	610, 611, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 85, 0,
	0, 186, 187, 188, 679, 686, 687, 688, 689, 690,
	680, 682, 0, 0, 222, 681, 229, 626, 628, 627,
	637, 638, 639, 640, 641, 642, 643, 624, 684, 691,
	692, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 614, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 598, 0, 0, 0, 0,
	663, 0, 599, 0, 0, 607, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 662, 0, 0, 502, 0, 0, 660,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 632, 633, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 669,
	661, 619, 673, 621, 670, 671, 616, 617, 620, 672,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 664,
	606, 605, 0, 612, 613, 0, 622, 623, 625, 629,
	630, 631, 634, 635, 636, 644, 646, 647, 645, 648,
	649, 650, 653, 654, 655, 656, 651, 652, 657, 604,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 686, 687, 0,
	0, 0, 0, 1641, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 0, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 991,
	502, 0, 0, 0, 0, 0, 988, 989, 332, 949,
	301, 190, 209, 982, 986, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 0, 342, 463, 464, 287, 360, 0, 0,
	0, 76, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 333, 246,
	0, 0, 392, 0, 195, 0, 436, 233, 343, 340,
	469, 261, 252, 248, 232, 288, 350, 390, 456, 384,
	0, 337, 0, 0, 446, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 231, 296, 194, 375, 447, 265, 0, 85,
	0, 0, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 229, 318, 327,
	326, 307, 308, 310, 312, 317, 324, 330, 0, 0,
	0, 0, 0, 244, 292, 251, 243, 466, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	0, 364, 236, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 301, 190, 209,
	0, 0, 374, 417, 423, 0, 0, 0, 234, 0,
	421, 388, 485, 217, 263, 414, 394, 419, 401, 266,
	0, 0, 420, 338, 471, 408, 482, 503, 504, 242,
	368, 493, 460, 499, 507, 210, 239, 382, 453, 488,
	443, 361, 467, 468, 300, 442, 273, 193, 336, 208,
	429, 226, 215, 473, 491, 268, 412, 200, 455, 480,
	223, 433, 0, 0, 509, 202, 478, 452, 357, 297,
	298, 201, 0, 413, 247, 271, 237, 377, 475, 476,
	235, 510, 212, 498, 204, 0, 497, 370, 470, 479,
	358, 348, 203, 477, 356, 347, 303, 322, 323, 259,
	282, 406, 341, 407, 283, 366, 365, 367, 196, 489,
	0, 197, 0, 448, 490, 511, 218, 219, 221, 0,
	258, 262, 270, 272, 278, 279, 286, 334, 381, 405,
	403, 409, 0, 465, 483, 494, 501, 506, 369, 285,
	444, 302, 339, 0, 0, 387, 422, 224, 487, 445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	349, 435, 484, 304, 316, 319, 309, 328, 0, 329,
	305, 306, 311, 313, 314, 315, 320, 321, 325, 331,
	0, 189, 205, 335, 84, 410, 267, 508, 496, 492,
	0, 207, 0, 241, 0, 0, 0, 0, 0, 0,
	1800, 0, 0, 1799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 198, 206, 216,
	220, 227, 240, 255, 257, 264, 276, 281, 284, 289,
	290, 293, 299, 345, 351, 352, 353, 354, 371, 372,
	373, 376, 379, 380, 383, 385, 386, 389, 393, 397,
	398, 399, 400, 402, 404, 411, 416, 424, 425, 426,
	427, 428, 431, 432, 437, 438, 439, 440, 441, 449,
	450, 454, 472, 474, 486, 500, 505, 430, 277, 481,
	0, 344, 0, 0, 346, 260, 280, 291, 0, 495,
	451, 211, 418, 269, 199, 230, 214, 238, 253, 256,
	295, 355, 362, 391, 396, 274, 250, 228, 415, 225,
	434, 457, 458, 459, 461, 359, 245, 395, 0, 1321,
	342, 463, 464, 287, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	1323, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	333, 246, 0, 0, 392, 0, 195, 0, 436, 233,
	343, 340, 469, 261, 252, 248, 232, 288, 350, 390,
	456, 384, 0, 337, 0, 0, 446, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 231, 296, 194, 375, 447, 265,
	0, 0, 0, 0, 186, 187, 188, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 229,
	318, 327, 326, 307, 308, 310, 312, 317, 324, 330,
	0, 0, 0, 0, 0, 244, 292, 251, 243, 466,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 0,
	0, 1155, 0, 1156, 1157, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 364, 236, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 301,
	190, 209, 0, 0, 374, 417, 423, 0, 0, 0,
	234, 0, 421, 388, 485, 217, 263, 414, 394, 419,
	401, 266, 0, 0, 420, 338, 471, 408, 482, 503,
	504, 242, 368, 493, 460, 499, 507, 210, 239, 382,
	453, 488, 443, 361, 467, 468, 300, 442, 273, 193,
	336, 208, 429, 226, 215, 473, 491, 268, 412, 200,
	455, 480, 223, 433, 0, 0, 509, 202, 478, 452,
	357, 297, 298, 201, 0, 413, 247, 271, 237, 377,
	475, 476, 235, 510, 212, 498, 204, 0, 497, 370,
	470, 479, 358, 348, 203, 477, 356, 347, 303, 322,
	323, 259, 282, 406, 341, 407, 283, 366, 365, 367,
	196, 489, 0, 197, 0, 448, 490, 511, 218, 219,
	221, 0, 258, 262, 270, 272, 278, 279, 286, 334,
	381, 405, 403, 409, 0, 465, 483, 494, 501, 506,
	369, 285, 444, 302, 339, 0, 0, 387, 422, 224,
	487, 445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 349, 435, 484, 304, 316, 319, 309, 328,
	0, 329, 305, 306, 311, 313, 314, 315, 320, 321,
	325, 331, 0, 189, 205, 335, 0, 410, 267, 508,
	496, 492, 0, 207, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 198,
	206, 216, 220, 227, 240, 255, 257, 264, 276, 281,
	284, 289, 290, 293, 299, 345, 351, 352, 353, 354,
	371, 372, 373, 376, 379, 380, 383, 385, 386, 389,
	393, 397, 398, 399, 400, 402, 404, 411, 416, 424,
	425, 426, 427, 428, 431, 432, 437, 438, 439, 440,
	441, 449, 450, 454, 472, 474, 486, 500, 505, 430,
	277, 481, 0, 344, 0, 0, 346, 260, 280, 291,
	0, 495, 451, 211, 418, 269, 199, 230, 214, 238,
	253, 256, 295, 355, 362, 391, 396, 274, 250, 228,
	415, 225, 434, 457, 458, 459, 461, 359, 245, 395,
	0, 360, 342, 463, 464, 287, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 333, 246, 0, 0, 392, 0, 195, 0,
	436, 233, 343, 340, 469, 261, 252, 248, 232, 288,
	350, 390, 456, 384, 0, 337, 0, 0, 446, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 231, 296, 194, 375,
	447, 265, 0, 0, 0, 0, 186, 187, 188, 1265,
	1268, 0, 0, 0, 0, 1264, 1267, 0, 0, 222,
	1263, 229, 318, 327, 326, 307, 308, 310, 312, 317,
	324, 330, 0, 0, 0, 0, 0, 244, 292, 251,
	243, 466, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 0, 364, 236, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 301, 190, 209, 0, 0, 374, 417, 423, 0,
	0, 0, 234, 0, 421, 388, 485, 217, 263, 414,
	394, 419, 401, 266, 0, 0, 420, 338, 471, 408,
	482, 503, 504, 242, 368, 493, 460, 499, 507, 210,
	239, 382, 453, 488, 443, 361, 467, 468, 300, 442,
	273, 193, 336, 208, 429, 226, 215, 473, 491, 268,
	412, 200, 455, 480, 223, 433, 0, 0, 509, 202,
	478, 452, 357, 297, 298, 201, 0, 413, 247, 271,
	237, 377, 475, 476, 235, 510, 212, 498, 204, 0,
	497, 370, 470, 479, 358, 348, 203, 477, 356, 347,
	303, 322, 323, 259, 282, 406, 341, 407, 283, 366,
	365, 367, 196, 489, 0, 197, 0, 448, 490, 511,
	218, 219, 221, 0, 258, 262, 270, 272, 278, 279,
	286, 334, 381, 405, 403, 409, 0, 465, 483, 494,
	501, 506, 369, 285, 444, 302, 339, 0, 0, 387,
	422, 224, 487, 445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 349, 435, 484, 304, 316, 319,
	309, 328, 0, 329, 305, 306, 311, 313, 314, 315,
	320, 321, 325, 331, 0, 189, 205, 335, 0, 410,
	267, 508, 496, 492, 0, 207, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	192, 198, 206, 216, 220, 227, 240, 255, 257, 264,
	276, 281, 284, 289, 290, 293, 299, 345, 351, 352,
	353, 354, 371, 372, 373, 376, 379, 380, 383, 385,
	386, 389, 393, 397, 398, 399, 400, 402, 404, 411,
	416, 424, 425, 426, 427, 428, 431, 432, 437, 438,
	439, 440, 441, 449, 450, 454, 472, 474, 486, 500,
	505, 430, 277, 481, 0, 344, 0, 0, 346, 260,
	280, 291, 0, 495, 451, 211, 418, 269, 199, 230,
	214, 238, 253, 256, 295, 355, 362, 391, 396, 274,
	250, 228, 415, 225, 434, 457, 458, 459, 461, 359,
	245, 395, 0, 0, 342, 463, 464, 287, 360, 0,
	0, 0, 76, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	85, 0, 1302, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 84, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 85, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 1800, 0, 0, 1799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 1752, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 1750, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 949, 301, 190, 209, 947, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 1752, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 1302, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 2820, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 0, 0, 0, 186, 187, 188, 0, 1637,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 2084, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 0, 0, 2069, 0, 0, 0, 2070,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 1346, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 2913, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 0, 0, 0, 186, 187, 188, 0, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 2820, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 85, 0, 0, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 1801, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 0, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 1592,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 1471, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 1469, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 1467, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 1465,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 0, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 1463, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 1459, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 1457, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 1455, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 1430, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 1330, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 371, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 578, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 577,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	360, 342, 463, 464, 287, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 333, 246, 0, 0, 392, 0, 195, 0, 436,
	233, 343, 340, 469, 261, 252, 248, 232, 288, 350,
	390, 456, 384, 0, 337, 0, 0, 446, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 231, 296, 194, 375, 447,
	265, 0, 0, 0, 0, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	229, 318, 327, 326, 307, 308, 310, 312, 317, 324,
	330, 0, 0, 0, 0, 0, 244, 292, 251, 243,
	466, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 364, 236, 0, 0, 533, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	301, 190, 209, 0, 0, 374, 417, 423, 0, 0,
	0, 234, 0, 421, 388, 485, 217, 263, 414, 394,
	419, 401, 266, 0, 0, 420, 338, 471, 408, 482,
	503, 504, 242, 368, 493, 460, 499, 507, 210, 239,
	382, 453, 488, 443, 361, 467, 468, 300, 442, 273,
	193, 336, 208, 429, 226, 215, 473, 491, 268, 412,
	200, 455, 480, 223, 433, 0, 0, 509, 202, 478,
	452, 357, 297, 298, 201, 0, 413, 247, 271, 237,
	377, 475, 476, 235, 510, 212, 498, 204, 0, 497,
	370, 470, 479, 358, 348, 203, 477, 356, 347, 303,
	322, 323, 259, 282, 406, 341, 407, 283, 366, 365,
	367, 196, 489, 0, 197, 0, 448, 490, 511, 218,
	219, 221, 0, 258, 262, 270, 272, 278, 279, 286,
	334, 381, 405, 403, 409, 0, 465, 483, 494, 501,
	506, 369, 285, 444, 302, 339, 0, 0, 387, 422,
	224, 487, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 349, 435, 484, 304, 316, 319, 309,
	328, 0, 329, 305, 306, 311, 313, 314, 315, 320,
	321, 325, 331, 0, 189, 205, 335, 0, 410, 267,
	508, 496, 492, 0, 207, 0, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	198, 206, 216, 220, 227, 240, 255, 257, 264, 276,
	281, 284, 289, 290, 293, 299, 345, 351, 352, 353,
	354, 371, 372, 373, 376, 379, 380, 383, 385, 386,
	389, 393, 397, 398, 399, 400, 402, 404, 411, 416,
	424, 425, 426, 427, 428, 431, 432, 437, 438, 439,
	440, 441, 449, 450, 454, 472, 474, 486, 500, 505,
	430, 277, 481, 0, 344, 0, 0, 346, 260, 280,
	291, 0, 495, 451, 211, 418, 269, 199, 230, 214,
	238, 253, 256, 295, 355, 362, 391, 396, 274, 250,
	228, 415, 225, 434, 457, 458, 459, 461, 359, 245,
	395, 0, 360, 342, 463, 464, 287, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 333, 246, 0, 0, 392, 0, 195,
	0, 436, 233, 343, 340, 469, 261, 252, 248, 232,
	288, 350, 390, 456, 384, 0, 337, 0, 0, 446,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 231, 296, 194,
	375, 447, 265, 0, 0, 0, 0, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 229, 318, 327, 326, 307, 308, 310, 312,
	317, 324, 330, 0, 0, 0, 0, 0, 244, 292,
	251, 243, 466, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 364, 236, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 301, 190, 209, 0, 0, 374, 417, 423,
	0, 0, 0, 234, 0, 421, 388, 485, 217, 263,
	414, 394, 419, 401, 266, 0, 0, 420, 338, 471,
	408, 482, 503, 504, 242, 368, 493, 460, 499, 507,
	210, 239, 382, 453, 488, 443, 361, 467, 468, 300,
	442, 273, 193, 336, 208, 429, 226, 215, 473, 491,
	268, 412, 200, 455, 480, 223, 433, 0, 0, 509,
	202, 478, 452, 357, 297, 298, 201, 0, 413, 247,
	271, 237, 377, 475, 476, 235, 510, 212, 498, 204,
	0, 497, 370, 470, 479, 358, 348, 203, 477, 356,
	347, 303, 322, 323, 259, 282, 406, 341, 407, 283,
	366, 365, 367, 196, 489, 0, 197, 0, 448, 490,
	511, 218, 219, 221, 0, 258, 262, 270, 272, 278,
	279, 286, 334, 381, 405, 403, 409, 0, 465, 483,
	494, 501, 506, 369, 285, 444, 302, 339, 0, 0,
	387, 422, 224, 487, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 349, 435, 484, 304, 316,
	319, 309, 328, 0, 329, 305, 306, 311, 313, 314,
	315, 320, 321, 325, 331, 0, 189, 205, 335, 0,
	410, 267, 508, 496, 492, 0, 207, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 198, 206, 216, 220, 227, 240, 255, 257,
	264, 276, 281, 284, 289, 290, 293, 299, 345, 351,
	352, 353, 354, 2918, 372, 373, 376, 379, 380, 383,
	385, 386, 389, 393, 397, 398, 399, 400, 402, 404,
	411, 416, 424, 425, 426, 427, 428, 431, 432, 437,
	438, 439, 440, 441, 449, 450, 454, 472, 474, 486,
	500, 505, 430, 277, 481, 0, 344, 0, 0, 346,
	260, 280, 291, 0, 495, 451, 211, 418, 269, 199,
	230, 214, 238, 253, 256, 295, 355, 362, 391, 396,
	274, 250, 228, 415, 225, 434, 457, 458, 459, 461,
	359, 245, 395, 0, 360, 342, 463, 464, 287, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 333, 246, 0, 0, 392,
	0, 195, 0, 436, 233, 343, 340, 469, 261, 252,
	248, 232, 288, 350, 390, 456, 384, 0, 337, 0,
	0, 446, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 231,
	296, 194, 375, 447, 265, 0, 0, 0, 0, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 229, 318, 327, 326, 307, 308,
	310, 312, 317, 324, 330, 0, 0, 0, 0, 0,
	244, 292, 251, 243, 466, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 364, 236,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 301, 190, 209, 0, 0, 374,
	417, 423, 0, 0, 0, 234, 0, 421, 388, 485,
	217, 263, 414, 394, 419, 401, 266, 0, 0, 420,
	338, 471, 408, 482, 503, 504, 242, 368, 493, 460,
	499, 507, 210, 239, 382, 453, 488, 443, 361, 467,
	468, 300, 442, 273, 193, 336, 208, 429, 226, 215,
	473, 491, 268, 412, 200, 455, 480, 223, 433, 0,
	0, 509, 202, 478, 452, 357, 297, 298, 201, 0,
	413, 247, 271, 237, 377, 475, 476, 235, 510, 212,
	498, 204, 0, 497, 370, 470, 479, 358, 348, 203,
	477, 356, 347, 303, 322, 323, 259, 282, 406, 341,
	407, 283, 366, 365, 367, 196, 489, 0, 197, 0,
	448, 490, 511, 218, 219, 221, 0, 258, 262, 270,
	272, 278, 279, 286, 334, 381, 405, 403, 409, 0,
	465, 483, 494, 501, 506, 369, 285, 444, 302, 339,
	0, 0, 387, 422, 224, 487, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 349, 435, 484,
	304, 316, 319, 309, 328, 0, 329, 305, 306, 311,
	313, 314, 315, 320, 321, 325, 331, 0, 189, 205,
	335, 0, 410, 267, 508, 496, 492, 0, 207, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 198, 206, 216, 220, 227, 240,
	255, 257, 264, 276, 281, 284, 289, 290, 293, 299,
	345, 351, 352, 353, 354, 371, 372, 373, 376, 379,
	380, 383, 385, 386, 389, 393, 397, 398, 399, 400,
	402, 404, 411, 416, 424, 425, 426, 427, 428, 431,
	432, 437, 438, 439, 440, 441, 449, 450, 454, 472,
	474, 486, 500, 505, 430, 277, 481, 0, 344, 0,
	0, 346, 260, 280, 291, 0, 495, 451, 211, 418,
	269, 199, 230, 214, 238, 253, 256, 295, 355, 362,
	391, 396, 274, 250, 228, 415, 225, 434, 457, 458,
	459, 461, 359, 245, 395, 0, 360, 342, 463, 464,
	287, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 333, 246, 0,
	0, 392, 0, 195, 0, 436, 233, 343, 340, 469,
	261, 252, 248, 232, 288, 350, 390, 456, 384, 0,
	337, 0, 0, 446, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 231, 296, 194, 375, 447, 265, 0, 0, 0,
	0, 186, 2544, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 229, 318, 327, 326,
	307, 308, 310, 312, 317, 324, 330, 0, 0, 0,
	0, 0, 244, 292, 251, 243, 466, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	364, 236, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 301, 190, 209, 0,
	0, 374, 417, 423, 0, 0, 0, 234, 0, 421,
	388, 485, 217, 263, 414, 394, 419, 401, 266, 0,
	0, 420, 338, 471, 408, 482, 503, 504, 242, 368,
	493, 460, 499, 507, 210, 239, 382, 453, 488, 443,
	361, 467, 468, 300, 442, 273, 193, 336, 208, 429,
	226, 215, 473, 491, 268, 412, 200, 455, 480, 223,
	433, 0, 0, 509, 202, 478, 452, 357, 297, 298,
	201, 0, 413, 247, 271, 237, 377, 475, 476, 235,
	510, 212, 498, 204, 0, 497, 370, 470, 479, 358,
	348, 203, 477, 356, 347, 303, 322, 323, 259, 282,
	406, 341, 407, 283, 366, 365, 367, 196, 489, 0,
	197, 0, 448, 490, 511, 218, 219, 221, 0, 258,
	262, 270, 272, 278, 279, 286, 334, 381, 405, 403,
	409, 0, 465, 483, 494, 501, 506, 369, 285, 444,
	302, 339, 0, 0, 387, 422, 224, 487, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 349,
	435, 484, 304, 316, 319, 309, 328, 0, 329, 305,
	306, 311, 313, 314, 315, 320, 321, 325, 331, 0,
	189, 205, 335, 0, 410, 267, 508, 496, 492, 0,
	207, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 198, 206, 216, 220,
	227, 240, 255, 257, 264, 276, 281, 284, 289, 290,
	293, 299, 345, 351, 352, 353, 354, 371, 372, 373,
	376, 379, 380, 383, 385, 386, 389, 393, 397, 398,
	399, 400, 402, 404, 411, 416, 424, 425, 426, 427,
	428, 431, 432, 437, 438, 439, 440, 441, 449, 450,
	454, 472, 474, 486, 500, 505, 430, 277, 481, 0,
	344, 0, 0, 346, 260, 280, 291, 0, 495, 451,
	211, 418, 269, 199, 230, 214, 238, 253, 256, 295,
	355, 362, 391, 396, 274, 250, 228, 415, 225, 434,
	457, 458, 459, 461, 359, 245, 395, 0, 360, 342,
	463, 464, 287, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 333,
	246, 0, 0, 392, 0, 195, 0, 436, 233, 343,
	340, 469, 261, 252, 248, 232, 288, 350, 390, 456,
	384, 0, 337, 0, 0, 446, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 231, 296, 194, 375, 447, 265, 0,
	0, 0, 0, 186, 2065, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 229, 318,
	327, 326, 307, 308, 310, 312, 317, 324, 330, 0,
	0, 0, 0, 0, 244, 292, 251, 243, 466, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 364, 236, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 301, 190,
	209, 0, 0, 374, 417, 423, 0, 0, 0, 234,
	0, 421, 388, 485, 217, 263, 414, 394, 419, 401,
	266, 0, 0, 420, 338, 471, 408, 482, 503, 504,
	242, 368, 493, 460, 499, 507, 210, 239, 382, 453,
	488, 443, 361, 467, 468, 300, 442, 273, 193, 336,
	208, 429, 226, 215, 473, 491, 268, 412, 200, 455,
	480, 223, 433, 0, 0, 509, 202, 478, 452, 357,
	297, 298, 201, 0, 413, 247, 271, 237, 377, 475,
	476, 235, 510, 212, 498, 204, 0, 497, 370, 470,
	479, 358, 348, 203, 477, 356, 347, 303, 322, 323,
	259, 282, 406, 341, 407, 283, 366, 365, 367, 196,
	489, 0, 197, 0, 448, 490, 511, 218, 219, 221,
	0, 258, 262, 270, 272, 278, 279, 286, 334, 381,
	405, 403, 409, 0, 465, 483, 494, 501, 506, 369,
	285, 444, 302, 339, 0, 0, 387, 422, 224, 487,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 349, 435, 484, 304, 316, 319, 309, 328, 0,
	329, 305, 306, 311, 313, 314, 315, 320, 321, 325,
	331, 0, 189, 205, 335, 0, 410, 267, 508, 496,
	492, 0, 207, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 198, 206,
	216, 220, 227, 240, 255, 257, 264, 276, 281, 284,
	289, 290, 293, 299, 345, 351, 352, 353, 354, 371,
	372, 373, 376, 379, 380, 383, 385, 386, 389, 393,
	397, 398, 399, 400, 402, 404, 411, 416, 424, 425,
	426, 427, 428, 431, 432, 437, 438, 439, 440, 441,
	449, 450, 454, 472, 474, 486, 500, 505, 430, 277,
	481, 0, 344, 0, 0, 346, 260, 280, 291, 0,
	495, 451, 211, 418, 269, 199, 230, 214, 238, 253,
	256, 295, 355, 362, 391, 396, 274, 250, 228, 415,
	225, 434, 457, 458, 459, 461, 359, 245, 395, 0,
	0, 342, 463, 464, 287,
}

var mysqPact = [...]int{
	5229, -1000, -403, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1947, 1994, -1000, -1000, -1000,
	-1000, 2106, -1000, 684, 1692, -1000, 1966, 4942, -1000, 41190,
	474, -1000, 40006, 473, 120, 41190, -1000, 173, -1000, 163,
	41190, 169, 39414, -1000, -1000, -301, 17500, 1901, 31, 29,
	41190, -1000, -1000, -1000, 2077, 1701, -1000, 320, -1000, -1000,
	-1000, -1000, -1000, -1000, 38822, -1000, -1000, -1000, 1976, 1952,
	2124, 586, 1902, -1000, 2030, 1701, -1000, 17500, 2064, 2029,
	16908, -1000, 16908, 418, -1000, -1000, 12754, -1000, -1000, 23430,
	41190, 29350, 588, -1000, 1966, -1000, -1000, -1000, 84, -1000,
	302, 1603, -1000, 1599, -1000, 679, 794, 353, 448, 444,
	352, 351, 350, 349, 347, 335, 334, 332, 359, -1000,
	598, 598, -153, -155, 3124, 433, 407, 407, 442, 1924,
	1921, -1000, 646, -1000, 598, 598, 598, 321, 598, 598,
	598, 598, 275, 274, 598, 598, 598, 598, 598, 598,
	598, 598, 598, 598, 598, 598, 598, 598, 598, 598,
	598, 286, 1966, 263, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41190, 282, 41190, -1000, 517, 41190, 750, 750, 42,
	750, 750, 750, 160, 660, 24, -1000, 146, 250, 138,
	246, 736, 156, -1000, -1000, 125, -1000, 10366, 152, 10366,
	10366, -1000, 1961, -1000, -1000, -1000, -1000, 1160, -1000, 438,
	-1000, -1000, -1000, -1000, 41190, 38230, 324, 625, -1000, -1000,
	-1000, 47, -1000, -1000, 1346, 1034, 17500, 951, -1000, 1224,
	564, -1000, -1000, -1000, -1000, -1000, 504, 18092, 18092, 18092,
	18092, -1000, -1000, 1622, 1622, 1622, 1622, 18092, 1622, 18092,
	1622, 1622, 1622, 1622, 17500, 1622, 1622, 1622, -1000, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 516,
	1622, 1622, 1622, 1622, 1622, -1000, -1000, -1000, -1000, 1622,
	1622, 1622, 1622, 1622, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21057, -1000, 15132, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41190, -1000, 1622, 41190,
	41190, 314, 2030, 1701, -1000, 2077, 2038, 320, -1000, 2243,
	1310, 1249, 881, 1701, 1528, 41190, -1000, 1638, -1000, -1000,
	-1000, 1795, 1038, 1146, -1000, -1000, -1000, -1000, 1263, 17500,
	-1000, -1000, 2103, -1000, 20465, 515, 829, 2102, 37638, -1000,
	418, 418, 1578, 12157, 1, -1000, -1000, -1000, 623, 26982,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1961, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1601, 41190, -1000, -1000, 4143, 1108, -1000, 1691,
	-1000, 1597, -1000, 1661, 17500, 1704, 472, 1108, 461, 460,
	449, -1000, -79, -1000, -1000, -1000, -1000, -1000, -1000, 598,
	598, 598, -1000, 342, 2062, 4942, 5856, -1000, -1000, -1000,
	37046, 1687, 1108, -1000, 1684, -1000, 717, 519, 569, 569,
	1108, -1000, -1000, 41190, 1108, 714, 711, 1108, 1108, 41190,
	41190, -1000, 36454, -1000, 35862, 35270, 980, 41190, 34678, 34086,
	33494, 32902, 32310, -1000, 1931, -1000, 1769, -1000, -1000, -1000,
	41190, 1108, 1108, 41190, 41190, 323, -1000, -1000, 41190, 1108,
	-1000, -1000, 974, 965, 963, 598, 598, 962, 1140, 1137,
	1127, 598, 598, 957, 1125, 28166, 1122, 270, 955, 952,
	950, 1101, 1121, 209, 1117, 1088, 1052, 936, 41190, 1683,
	41190, -1000, 231, 735, 615, 1966, 1897, 1573, 432, 468,
	1108, 410, 410, 41190, -1000, 10963, -1000, -1000, 1116, 17500,
	-1000, 744, 736, 736, -1000, -1000, -1000, -1000, -1000, 750,
	41190, 744, -1000, -1000, -1000, 736, 750, 41190, 750, 750,
	750, 750, 736, 736, 736, 750, 41190, 41190, 41190, 41190,
	41190, 41190, 41190, 41190, 41190, 10366, -1000, 1794, -1000, -1000,
	-1000, -1000, 10366, 10366, -1000, -1000, -1000, -1000, 168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -85, 1561,
	31718, -1000, -306, -307, -311, -314, -1000, -1000, -1000, -317,
	-322, -1000, -1000, -1000, 17500, 17500, 17500, 17500, -182, -1000,
	978, 18092, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 843,
	702, 18092, 18092, 18092, 18092, 18092, 18092, 18092, 18092, 18092,
	18092, 18092, 18092, 18092, 18092, 18092, 25206, 6668, 6668, 564,
	564, 564, 564, -1000, 16908, 17500, 17500, 564, -1000, 1108,
	31126, 16908, 16908, 17500, 1962, 638, 1034, 41190, -1000, 881,
	-1000, -1000, -1000, 851, -1000, 41190, 41190, 172, 17500, 17500,
	17500, 17500, 17500, 17500, 13943, 17500, 17500, 17500, 17500, 17500,
	17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500,
	17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500,
	17500, 13351, 10963, 16908, 16908, 16908, 16908, 16908, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	511, 1781, 1248, 1446, -1000, 1532, -1000, -145, 22838, 17500,
	2100, 1730, 41190, -1000, -1000, -1000, 2030, -1000, 2030, 1781,
	2215, 1820, 16908, -1000, -1000, 2215, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1270, -1000, 41190, 1528, 2017, 41190,
	1815, 1115, 475, -1000, 17500, 17500, 1519, -1000, 1167, 41190,
	-1000, -182, -1000, 30534, -1000, -1000, 9769, -1000, 41190, 309,
	41190, -1000, 22246, 29942, 11560, 1, -1000, 11560, 1396, -1000,
	-21, 11, 14535, 563, -1000, -1000, -1000, 3124, 19276, 1254,
	563, 88, -1000, -1000, -1000, 1661, -1000, 1661, 1661, 1661,
	1661, 475, 475, 475, 475, -1000, -1000, -1000, -1000, -1000,
	1681, 1679, -1000, 1661, 1661, 1661, 1661, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1676, 1676, 1676, 1663, 1663, 402,
	-1000, 17500, 408, 29350, 1999, 933, 1460, 231, 414, 1727,
	1108, 1108, 1108, 414, -1000, 1278, 1222, 1055, -1000, -394,
	1508, -1000, -1000, 2061, -1000, -1000, 737, 771, 754, 801,
	41190, 188, 305, -1000, 393, -1000, 29350, 1108, 690, 569,
	1108, -1000, 1108, -1000, -1000, -1000, -1000, -1000, 1108, -1000,
	-1000, 1490, -1000, 1394, 821, 751, 810, 733, 1490, -1000,
	-1000, -124, 1490, -1000, 1490, -1000, 1490, -1000, 1490, -1000,
	1490, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	654, 149, -238, 41190, 188, 25206, -1000, 423, -1000, -1000,
	-1000, 25206, 25206, -1000, -1000, -1000, -1000, 1111, 1110, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -377, 41190,
	-1000, 205, 612, 290, 330, 256, 41190, 245, 273, 41190,
	41190, 410, 1763, 41190, 1995, 41190, -1000, -1000, -1000, -1000,
	-1000, 1034, 41190, -1000, -1000, 750, 750, -1000, -1000, 41190,
	750, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 750,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41190, -1000, -1000, -1000, -1000, 41190, -1000, -1000, -1000,
	-1000, 64, -4, 300, -1000, -1000, -1000, -1000, -1000, 2021,
	-1000, 1034, 729, 649, -1000, 1622, -1000, -1000, 846, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 843, 18092, 18092, 18092,
	1474, 462, 1507, 1552, 997, 852, 852, 899, 899, 570,
	570, 570, 570, 570, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1095, -1000, 1496, -1000, 1296, 1149, 881, -1000,
	1496, 1496, 917, 16908, -1000, -1000, 681, -1000, 17500, 881,
	-1000, -1000, 881, 881, 1475, 1452, 2095, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1209, 1460,
	1460, 1460, 1460, 1460, 17500, 1221, -1000, -1000, -1000, 1974,
	1880, 881, 1346, 881, 1431, -1000, 1843, 1460, 1832, 1827,
	1779, 1358, 1762, 1737, 1723, 1460, 1460, 1460, 1187, 1719,
	1699, 1689, 1673, 1655, 1643, 1612, 1600, 1593, 1460, 881,
	16908, 16908, 1428, 1622, 509, -1000, 1496, 881, 881, 1496,
	1496, 10963, 881, -1000, 41190, -1000, -296, -1000, -40, 600,
	1622, -1000, 28166, 881, 5860, -1000, 42374, -1000, -1000, -1000,
	-1000, -1000, 26390, 1677, 2215, -1000, -1000, 1622, 1594, -1000,
	-1000, 475, 66, 25798, 556, 556, 89, 1034, 1034, 17500,
	-1000, -1000, -1000, -1000, -1000, -1000, 508, 2076, 389, 1622,
	-1000, 1398, 2190, -1000, -1000, -1000, 2014, 19873, -1000, 1622,
	1622, 41190, 1648, 1276, -1000, 502, -1000, 1396, 1, 3,
	-1000, -1000, -1000, -1000, 1034, -1000, 999, 331, 311, -1000,
	395, -1000, -1000, -1000, -1000, 1911, 70, -1000, -1000, -1000,
	171, 475, -1000, -1000, -1000, -1000, -1000, -1000, 1092, 1092,
	-1000, -1000, -1000, -1000, -1000, 931, -1000, -1000, -1000, 912,
	-1000, -1000, 1562, 1742, 408, -1000, -1000, 598, 1089, -1000,
	-1000, 1914, 598, 598, 41190, -1000, -1000, 1252, 1999, 205,
	41190, 643, 1757, -1000, 1727, 1727, 1727, 41190, -1000, -1000,
	-1000, -1000, -1000, -1000, -386, 62, 337, -1000, -1000, -1000,
	3566, 41190, 1558, -1000, 186, -1000, 1220, -1000, 41190, -1000,
	1501, 1672, 1108, 1108, -1000, -1000, -1000, 41190, 1622, -1000,
	-1000, -1000, -1000, 466, 1965, 243, -1000, -1000, -216, -1000,
	-1000, 188, 186, 563, 1108, -1000, -1000, -1000, -1000, -1000,
	-380, 1498, 454, 191, 264, 41190, 41190, 41190, 41190, 41190,
	495, -1000, -1000, -1000, 265, 422, -1000, 41190, 41190, 596,
	-1000, -1000, -1000, 736, -1000, -1000, 736, -1000, -1000, -1000,
	-1000, -1000, 1951, 41190, -28, -353, -1000, -341, 17500, -1000,
	-1000, -1000, -1000, 1463, 452, 1507, 18092, 18092, 16908, -113,
	512, 512, 25206, -1000, -1000, -1000, 17500, 17500, 1309, 627,
	-1000, 17500, 934, -1000, -1000, -1000, 17500, 17500, 17500, 881,
	303, -1000, -1000, -1000, -1000, -1000, 2088, -1000, 17500, 17500,
	17500, -1000, -1000, 17500, 17500, -1000, 17500, 17500, 18684, 881,
	18684, 17500, 17500, 18684, -1000, -1000, -1000, -1000, 18684, 17500,
	17500, 17500, 17500, 17500, 17500, 17500, 17500, 17500, -1000, -1000,
	1496, 1496, 16908, 10963, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 600, -1000, 569, 569, 569, 41190,
	-1000, -1000, -1000, -1000, -1000, -1000, 1382, 2033, -1000, 1833,
	1830, 2082, 2076, -1000, 22246, 2215, -1000, -1000, 41190, -289,
	-1000, 1889, 1876, 556, 556, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9172, 2030, 17500, 1756, 41190, 1622, -1000, 21654,
	41190, 41190, 22246, 22246, 22246, 22246, 22246, -1000, 1788, 1784,
	-1000, 1801, 1797, 1841, 41190, -1000, 1487, 881, 2038, 19873,
	320, 17500, 24022, 1269, 22246, -1000, -1000, 22246, 41190, 8575,
	-1000, -1000, -32, 0, -1000, -1000, -1000, -1000, 3124, -1000,
	-1000, 406, 2012, 1909, -1000, -1000, -1000, -1000, -1000, 1467,
	-1000, 1464, 1376, 1455, 149, -1000, 1703, 1944, 598, 598,
	-1000, 907, -1000, 1108, 1086, 1085, -1000, -1000, -1000, 453,
	-1000, 1991, 41190, 1754, 1753, 1750, -1000, -392, 902, 1669,
	1653, 17500, 1668, 2059, 1353, 41190, -1000, -1000, 41190, -1000,
	225, -1000, 408, 41190, -1000, -1000, -1000, 305, 41190, -1000,
	6545, -1000, -1000, -1000, 186, -1000, -1000, -1000, -1000, -1000,
	-1000, 41190, 229, -1000, 1666, 1154, -1000, -1000, 1713, -1000,
	-1000, -1000, -1000, 199, 278, -1000, 41190, 592, 1742, 41190,
	-1000, -1000, -1000, 750, 750, -1000, -1000, 1928, -1000, 1108,
	1460, 18092, 18092, -1000, 564, -1000, 1622, 881, 1661, 1661,
	-1000, 1661, 1663, -1000, 1661, 139, 1661, 123, 1661, -1000,
	-1000, 881, 881, 1093, 1180, -83, -1000, 1034, 17500, 1566,
	1525, 1460, -1000, 1660, 1657, 17500, 1460, 1460, 1460, -1000,
	1034, 1358, 1518, 1413, -1000, -1000, -1000, -1000, 1374, 1460,
	1440, -286, 881, 1448, 1448, 1448, 1448, 1448, 1446, 1446,
	1446, 1446, -1000, -1000, 881, -1000, -1000, 2002, 2002, 2002,
	1438, 41782, 41190, -1000, -1000, -1000, -1000, 2076, 2070, 1361,
	-1000, -1000, 66, 403, -1000, 1858, 1876, -1000, 2058, 1879,
	2057, -1000, -1000, -1000, -1000, -1000, 1034, -1000, 1973, 1493,
	-1000, 601, 1323, -1000, -1000, 16316, 1444, 1829, 498, 1438,
	1530, 2190, 1720, 1745, 1922, -1000, -1000, -1000, -1000, 1780,
	-1000, 1778, -1000, -1000, 1638, -1000, -1000, 1248, 881, 1425,
	309, 22246, 1307, 1307, -1000, 492, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 807, 6276, 2123, -1000, 1076, -1000, 903,
	194, 887, -1000, -1000, 598, 598, -1000, 686, 674, -1000,
	41190, 1654, -1000, 475, 1061, 475, 884, -1000, 880, -1000,
	-1000, -1000, -1000, 1758, 1817, -1000, -1000, -1000, -1000, 41190,
	-1000, -1000, 41190, 41190, 41190, 1651, 2055, -1000, 17500, 1647,
	599, 1513, 41190, 41190, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 411, 598, -361, 272, 269,
	598, 598, 598, -393, -1000, -1000, 1436, 1433, -1000, -147,
	-1000, 17500, -1000, -1000, -1000, 892, 892, -1000, 1638, -1000,
	-1000, -1000, 1216, -1000, -1000, -127, 41190, 41190, 41190, 41190,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	564, 18092, -1000, -1000, 475, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17500, -1000, 17500, -1000, 2030, 1059,
	1034, 17500, 17500, -1000, 879, 877, 1460, -1000, -1000, -1000,
	881, 18684, -1000, 18684, -1000, 17500, 207, 512, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1622,
	1867, 1622, 1622, 24022, -1000, -1000, 2070, 2068, 2053, 1863,
	1868, 1868, 1858, -1000, 2052, 2051, -1000, 1056, 2047, 1049,
	667, -1000, 41190, 17500, 1622, -1000, 348, 41190, 1622, 41190,
	-1000, 2039, -1000, -1000, 17500, 1642, -1000, 17500, -1000, -1000,
	-1000, -1000, -1000, -1000, 6668, 2076, 1307, -1000, -1000, 579,
	-1000, 17500, -1000, -1000, -1000, 4338, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1047, 1045, -1000, -1000, 1640, 17500,
	-1000, -1000, -1000, 1207, 1204, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1638, -1000, -1000, -1000, -1000, 305, -388,
	1471, 41190, 876, -1000, 1423, 1353, 285, 1622, 1035, 598,
	598, 598, 873, 861, 28166, 1418, -1000, 41190, 385, -1000,
	305, -1000, -156, -161, 1460, -1000, -1000, 2010, -1000, -1000,
	10963, -1000, -1000, 1636, 1718, -1000, 301, -1000, 1460, 1460,
	881, -1000, 1460, 1460, 1181, 1178, -1000, -1000, 1413, -1000,
	948, -1000, 207, 881, 1744, -1000, -1000, 6668, -1000, 24614,
	-1000, 2046, 2045, 28758, 28758, 600, 2068, -1000, 17500, 17500,
	1848, 834, -1000, -1000, -1000, -1000, 1033, 1027, -1000, 1000,
	-1000, 2114, -1000, 1034, -1000, 1622, -1000, 490, 1323, -1000,
	2030, 1034, 41190, 1034, 65, 2039, -1000, 1460, -1000, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, -1000, -1000, 41190, 1411, -1000, -1000, 2003, 1390, 60,
	-1000, 1378, -1000, -1000, 488, -1000, 17500, -1000, 28166, 989,
	987, -1000, -1000, -1000, -1000, -393, -1000, -1000, -1000, -1000,
	-1000, -1000, 320, 1349, -1000, 597, 41190, 41190, 881, 268,
	-137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17500, -1000, 881, 1743, -1000, -241, -1000, 1334, -1000, -1000,
	-1000, -1000, -1000, 1334, 1334, -1000, -1000, 1034, 1346, -1000,
	777, -1000, -1000, -1000, -1000, -1000, 41190, 1323, 41190, -1000,
	1332, 881, 1622, 2030, -1000, 1321, -1000, 320, -1000, 1608,
	1653, -1000, -1000, -1000, 15724, -1000, -1000, -1000, -1000, -1000,
	175, -125, 10963, 7978, 1287, -1000, -1000, 1802, -122, -143,
	1358, -1000, -327, -1000, -1000, 27574, -1000, -1000, -1000, -1000,
	-1000, 1285, -1000, -1000, 24022, 40598, -1000, -110, 317, -125,
	17500, 1412, 881, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -22, -1000, -1000, -1000, -1000, -1000, 1713, -1000, 1798,
	-1000, 881, -1000, -1000, -1000, 1214, -1000, 2711, -245, 1740,
	-1000, -99, -1000, -1000, -1000, 758, 984, -1000, -1000, -1000,
	-1000, -1000, -1000, 1351, 41190, -1000, 400, -1000, -1000, -127,
	-128, -1000, -1000, 40598, -239, 563, 6668, -1000, 1739, 1738,
	2086, -1000, -1000, -1000, -1000, -1000, -1000, -399, 1185, 218,
	-1000, -138, -1000, -1000, 1989, 65, -1000, 2110, -1000, 2108,
	665, 665, -1000, 842, -399, -1000, -144, -247, -1000, -1000,
	-1000, -1000, -1000, 392, 874, -1000, -1000, -1000, -1000, 6668,
	-1000, -1000, -1000, 197, 197, -1000, -1000,
}

var mysqPgo = [...]int{
	0, 2472, 2470, 22, 7, 36, 35, 2469, 24, 113,
	187, 29, 189, 117, 2467, 2465, 2462, 2461, 2454, 2452,
	2451, 229, 223, 221, 2446, 2444, 2442, 2441, 2440, 2439,
	2438, 2437, 2436, 2435, 233, 169, 184, 2432, 2431, 2421,
	140, 174, 94, 98, 180, 2419, 2418, 87, 2417, 2416,
	2415, 179, 177, 176, 742, 2414, 171, 118, 51, 2413,
	2404, 2399, 2396, 2395, 2393, 2389, 2388, 2387, 2386, 2385,
	2384, 2383, 2382, 2381, 2380, 224, 2379, 2377, 16, 2376,
	83, 2375, 2374, 2373, 2371, 136, 2370, 2369, 2368, 37,
	2367, 2366, 2365, 2362, 2361, 2360, 2359, 152, 2358, 2354,
	2352, 2350, 186, 2349, 2347, 149, 123, 129, 2344, 2343,
	109, 183, 2342, 134, 2340, 2339, 2338, 157, 2337, 4938,
	2336, 79, 72, 2335, 77, 91, 70, 69, 17, 4,
	2332, 2331, 78, 86, 2330, 121, 81, 2329, 108, 116,
	2327, 2326, 10, 8, 2325, 2, 5, 3, 75, 2324,
	2323, 125, 2322, 2321, 2320, 104, 2319, 2318, 3802, 2317,
	99, 143, 114, 82, 2315, 46, 76, 2314, 2309, 2305,
	2304, 2302, 57, 2301, 2300, 2299, 151, 52, 182, 42,
	41, 58, 144, 2298, 30, 90, 2297, 148, 150, 2296,
	60, 44, 43, 2294, 40, 141, 133, 54, 105, 162,
	2293, 2292, 67, 89, 2291, 2290, 2289, 2288, 2287, 2284,
	84, 2277, 65, 2276, 190, 2275, 14, 2274, 64, 45,
	2272, 74, 124, 88, 31, 2270, 181, 2269, 59, 168,
	137, 166, 2268, 2265, 2264, 2261, 185, 278, 2254, 2251,
	122, 154, 158, 95, 2249, 290, 2248, 2247, 101, 1397,
	2529, 38, 167, 2246, 2245, 3563, 147, 39, 23, 2244,
	193, 2243, 2241, 2232, 188, 170, 128, 936, 66, 2229,
	2226, 13, 2222, 2216, 2215, 2210, 2207, 2205, 96, 34,
	33, 32, 192, 62, 19, 106, 161, 80, 2204, 2203,
	2202, 135, 97, 2201, 165, 164, 139, 178, 2200, 173,
	153, 130, 2198, 204, 27, 2197, 2196, 2195, 2192, 103,
	2189, 2188, 2183, 2182, 163, 155, 132, 92, 2180, 93,
	131, 159, 156, 49, 2179, 47, 2178, 2177, 26, 175,
	28, 2175, 12, 68, 73, 21, 126, 127, 2174, 0,
	2171, 15, 172, 316, 160, 2170, 2168, 6, 9, 11,
	2167, 2165, 2163, 2162, 146, 2155, 2154, 2152, 2151, 20,
	48, 18, 1, 2143, 2142, 5195, 1707, 138, 2141, 197,
}

//line mysql.y:6972
type mysqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	yys               int
}

func (st *mysqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *mysqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *mysqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *mysqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *mysqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *mysqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *mysqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *mysqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *mysqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *mysqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *mysqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *mysqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *mysqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *mysqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *mysqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *mysqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *mysqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *mysqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *mysqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *mysqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *mysqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *mysqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *mysqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *mysqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *mysqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *mysqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *mysqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *mysqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *mysqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *mysqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *mysqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *mysqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *mysqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *mysqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *mysqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *mysqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *mysqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *mysqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *mysqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *mysqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *mysqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *mysqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *mysqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *mysqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *mysqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *mysqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *mysqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *mysqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *mysqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *mysqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *mysqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *mysqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *mysqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *mysqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *mysqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *mysqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *mysqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *mysqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *mysqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *mysqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *mysqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *mysqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *mysqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *mysqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *mysqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *mysqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *mysqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *mysqSymType) partDefUnion() *ast.PartitionDefinition {
	v, _ := st.union.(*ast.PartitionDefinition)
	return v
}

func (st *mysqSymType) partDefsUnion() []*ast.PartitionDefinition {
	v, _ := st.union.([]*ast.PartitionDefinition)
	return v
}

func (st *mysqSymType) partSpecUnion() *ast.PartitionSpec {
	v, _ := st.union.(*ast.PartitionSpec)
	return v
}

func (st *mysqSymType) partSpecsUnion() []*ast.PartitionSpec {
	v, _ := st.union.([]*ast.PartitionSpec)
	return v
}

func (st *mysqSymType) partitionByTypeUnion() ast.PartitionByType {
	v, _ := st.union.(ast.PartitionByType)
	return v
}

func (st *mysqSymType) partitionDefinitionOptionsUnion() *ast.PartitionDefinitionOptions {
	v, _ := st.union.(*ast.PartitionDefinitionOptions)
	return v
}

func (st *mysqSymType) partitionEngineUnion() *ast.PartitionEngine {
	v, _ := st.union.(*ast.PartitionEngine)
	return v
}

func (st *mysqSymType) partitionOptionUnion() *ast.PartitionOption {
	v, _ := st.union.(*ast.PartitionOption)
	return v
}

func (st *mysqSymType) partitionValueRangeUnion() *ast.PartitionValueRange {
	v, _ := st.union.(*ast.PartitionValueRange)
	return v
}

func (st *mysqSymType) partitionsUnion() ast.Partitions {
	v, _ := st.union.(ast.Partitions)
	return v
}

func (st *mysqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *mysqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *mysqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *mysqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *mysqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *mysqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *mysqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *mysqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *mysqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *mysqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *mysqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *mysqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *mysqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *mysqSymType) subPartitionUnion() *ast.SubPartition {
	v, _ := st.union.(*ast.SubPartition)
	return v
}

func (st *mysqSymType) subPartitionDefinitionUnion() *ast.SubPartitionDefinition {
	v, _ := st.union.(*ast.SubPartitionDefinition)
	return v
}

func (st *mysqSymType) subPartitionDefinitionOptionsUnion() *ast.SubPartitionDefinitionOptions {
	v, _ := st.union.(*ast.SubPartitionDefinitionOptions)
	return v
}

func (st *mysqSymType) subPartitionDefinitionsUnion() ast.SubPartitionDefinitions {
	v, _ := st.union.(ast.SubPartitionDefinitions)
	return v
}

func (st *mysqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *mysqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *mysqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *mysqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *mysqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *mysqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *mysqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *mysqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *mysqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *mysqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *mysqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *mysqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *mysqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *mysqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *mysqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *mysqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *mysqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *mysqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var mysqR1 = [...]int{
	0, 363, 364, 364, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 339, 339, 339,
	342, 342, 32, 71, 34, 34, 33, 33, 36, 36,
	35, 8, 8, 8, 9, 9, 9, 9, 9, 9,
	9, 9, 10, 10, 10, 10, 10, 11, 11, 11,
	11, 13, 13, 13, 13, 13, 19, 20, 12, 12,
	21, 21, 83, 83, 22, 23, 23, 23, 23, 367,
	367, 153, 153, 151, 151, 152, 152, 221, 221, 24,
	25, 25, 231, 231, 230, 230, 230, 232, 232, 232,
	232, 267, 267, 26, 26, 26, 26, 26, 103, 103,
	341, 341, 340, 332, 332, 331, 331, 330, 338, 338,
	337, 337, 336, 38, 39, 48, 48, 48, 48, 49,
	50, 343, 343, 305, 55, 55, 54, 54, 54, 54,
	54, 54, 56, 56, 52, 52, 51, 51, 53, 53,
	307, 307, 293, 293, 306, 306, 306, 306, 306, 306,
	306, 292, 292, 114, 114, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 358, 358, 358, 357, 357, 201, 201, 201,
	201, 201, 201, 201, 201, 123, 123, 132, 132, 132,
	132, 132, 121, 121, 122, 120, 120, 120, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 131, 131, 127, 127, 127, 128, 128, 128,
	129, 129, 359, 359, 359, 359, 271, 271, 271, 271,
	274, 274, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 273, 273, 273, 273, 273, 275, 275, 275, 275,
	275, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 277, 277, 277,
	277, 277, 277, 277, 277, 291, 291, 278, 278, 286,
	286, 287, 287, 287, 288, 288, 288, 289, 289, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 285, 285,
	284, 284, 284, 294, 319, 319, 318, 318, 316, 316,
	316, 316, 316, 316, 316, 316, 303, 303, 313, 313,
	313, 313, 313, 302, 302, 298, 298, 298, 299, 299,
	300, 300, 297, 297, 301, 301, 315, 315, 314, 314,
	295, 295, 296, 296, 321, 360, 360, 360, 360, 360,
	361, 361, 322, 350, 352, 352, 352, 351, 351, 348,
	349, 347, 347, 347, 347, 347, 80, 80, 80, 243,
	243, 244, 244, 311, 311, 310, 310, 310, 312, 312,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 239, 239, 239, 346, 346, 346, 346, 346, 346,
	345, 345, 345, 308, 308, 308, 344, 344, 57, 57,
	185, 185, 45, 45, 45, 45, 45, 45, 44, 44,
	44, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 46, 46, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 85, 85,
	86, 86, 86, 86, 88, 88, 88, 324, 324, 58,
	58, 3, 3, 141, 143, 144, 144, 142, 142, 142,
	142, 142, 142, 60, 60, 59, 59, 146, 145, 147,
	147, 147, 1, 1, 2, 2, 4, 4, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	290, 290, 290, 323, 323, 325, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 91, 90, 90, 89,
	92, 92, 92, 92, 92, 92, 92, 92, 327, 327,
	327, 61, 61, 328, 279, 280, 281, 5, 6, 304,
	326, 99, 99, 28, 37, 37, 29, 29, 29, 29,
	30, 30, 62, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 238, 238, 246, 246, 237,
	237, 260, 260, 260, 240, 240, 240, 356, 356, 356,
	234, 234, 64, 64, 64, 66, 66, 67, 68, 68,
	262, 262, 263, 263, 69, 70, 81, 81, 81, 81,
	81, 84, 84, 84, 15, 15, 15, 15, 77, 77,
	77, 14, 14, 65, 65, 72, 353, 353, 354, 355,
	355, 355, 355, 73, 31, 31, 31, 31, 31, 31,
	109, 109, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 104, 104, 104, 98, 98, 368,
	75, 76, 76, 102, 102, 102, 95, 95, 95, 101,
	101, 101, 16, 16, 17, 220, 220, 18, 18, 106,
	106, 108, 108, 108, 108, 108, 110, 110, 110, 110,
	110, 110, 110, 105, 105, 107, 107, 107, 107, 253,
	253, 253, 252, 252, 135, 135, 137, 136, 136, 138,
	138, 139, 139, 139, 139, 183, 183, 161, 161, 218,
	218, 216, 216, 217, 217, 219, 219, 219, 219, 222,
	222, 140, 140, 140, 140, 148, 148, 149, 149, 150,
	150, 261, 261, 258, 258, 258, 257, 257, 154, 154,
	154, 156, 155, 155, 155, 155, 157, 157, 159, 159,
	158, 158, 160, 165, 165, 164, 164, 162, 162, 162,
	162, 163, 163, 163, 163, 166, 166, 119, 119, 119,
	119, 119, 119, 119, 130, 130, 130, 130, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 82, 82, 82, 235, 235,
	167, 167, 175, 175, 175, 175, 168, 168, 168, 168,
	168, 168, 168, 176, 176, 176, 182, 177, 177, 173,
	173, 173, 173, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 269, 269, 335, 335, 334, 334, 333, 333, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	369, 369, 282, 282, 282, 282, 174, 174, 174, 174,
	174, 100, 100, 100, 100, 100, 266, 266, 266, 270,
	270, 270, 268, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 268, 268, 188, 188, 96,
	96, 186, 186, 187, 189, 189, 184, 184, 184, 170,
	170, 170, 190, 190, 191, 191, 192, 192, 194, 193,
	193, 195, 196, 196, 196, 197, 197, 198, 198, 198,
	47, 47, 47, 47, 47, 42, 42, 42, 42, 43,
	43, 43, 43, 111, 111, 111, 111, 113, 113, 112,
	112, 78, 78, 79, 79, 79, 117, 117, 118, 118,
	118, 115, 115, 116, 116, 214, 214, 199, 199, 199,
	206, 206, 206, 202, 202, 204, 204, 204, 205, 205,
	205, 203, 211, 211, 213, 213, 212, 212, 208, 208,
	209, 209, 210, 210, 210, 207, 207, 169, 169, 169,
	169, 169, 215, 215, 215, 215, 223, 223, 179, 179,
	181, 181, 180, 134, 224, 224, 228, 225, 225, 229,
	229, 229, 229, 229, 226, 226, 227, 227, 254, 254,
	254, 233, 233, 245, 245, 241, 241, 242, 242, 236,
	236, 247, 247, 247, 74, 178, 178, 320, 320, 317,
	250, 250, 251, 251, 255, 255, 259, 259, 256, 256,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 365,
	366, 264, 265, 265, 265,
}

var mysqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	0, 1, 2, 3, 2, 3, 0, 1, 3, 1,
	4, 3, 3, 4, 3, 2, 3, 4, 3, 4,
	2, 7, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 3, 2, 3, 3, 2, 5, 7, 9, 8,
	7, 8, 1, 1, 10, 11, 9, 8, 8, 1,
	1, 1, 3, 1, 3, 1, 3, 0, 4, 3,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 2, 6, 12, 2, 0, 2,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 1,
	1, 3, 3, 6, 4, 7, 8, 8, 8, 6,
	3, 1, 1, 5, 0, 1, 1, 1, 1, 2,
	2, 2, 0, 1, 4, 4, 4, 4, 4, 4,
	2, 4, 1, 3, 1, 1, 3, 4, 3, 3,
	3, 5, 10, 0, 2, 0, 2, 3, 5, 3,
	4, 2, 3, 2, 3, 3, 3, 3, 2, 2,
	4, 4, 1, 1, 1, 1, 1, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 5, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 0,
	3, 3, 2, 2, 2, 1, 2, 2, 0, 1,
	0, 2, 2, 5, 0, 1, 1, 2, 1, 3,
	2, 1, 1, 3, 3, 3, 0, 1, 4, 3,
	3, 4, 2, 0, 2, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 1, 1, 3, 3, 4,
	3, 1, 3, 1, 7, 6, 7, 7, 8, 8,
	0, 1, 5, 2, 1, 1, 1, 0, 1, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 1, 1,
	2, 0, 1, 0, 1, 1, 3, 2, 1, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	5, 0, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	0, 2, 0, 1, 5, 1, 3, 7, 1, 3,
	3, 1, 2, 2, 2, 5, 5, 5, 6, 8,
	5, 5, 4, 4, 4, 6, 5, 5, 2, 2,
	2, 2, 3, 3, 3, 4, 3, 3, 1, 3,
	5, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 4, 2, 11, 3, 6,
	8, 6, 6, 6, 13, 8, 6, 10, 0, 6,
	5, 6, 4, 5, 0, 8, 9, 0, 3, 0,
	1, 0, 3, 8, 4, 1, 3, 3, 6, 7,
	7, 8, 4, 0, 1, 0, 1, 3, 3, 1,
	1, 2, 1, 1, 0, 2, 0, 2, 5, 3,
	7, 4, 4, 4, 4, 3, 3, 3, 7, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	0, 2, 2, 1, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 3, 3,
	0, 2, 2, 2, 2, 2, 2, 2, 4, 4,
	3, 0, 1, 4, 3, 4, 4, 3, 3, 3,
	2, 1, 3, 3, 3, 5, 7, 7, 6, 5,
	3, 2, 3, 3, 3, 7, 3, 3, 3, 4,
	7, 5, 2, 4, 4, 4, 4, 4, 5, 5,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 2,
	4, 4, 3, 3, 5, 2, 3, 4, 4, 4,
	3, 4, 4, 5, 3, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	1, 1, 2, 1, 3, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 3, 3, 6, 4, 7, 6,
	1, 3, 2, 2, 2, 2, 1, 1, 1, 3,
	2, 1, 1, 1, 0, 1, 1, 0, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 5, 5, 4, 0, 2, 4, 4, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 3, 1,
	1, 1, 4, 3, 1, 3, 4, 3, 7, 0,
	3, 1, 3, 1, 3, 1, 1, 3, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 1, 1, 2, 6, 5, 6,
	6, 0, 2, 3, 3, 0, 2, 3, 3, 3,
	2, 3, 1, 6, 3, 4, 3, 1, 3, 4,
	5, 6, 3, 4, 5, 6, 3, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 3, 1, 1, 2,
	2, 2, 2, 1, 1, 2, 9, 6, 6, 6,
	2, 2, 3, 3, 3, 1, 1, 1, 0, 3,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	5, 5, 6, 4, 4, 8, 6, 8, 6, 8,
	5, 4, 2, 2, 1, 2, 2, 2, 8, 8,
	6, 5, 4, 4, 4, 4, 4, 7, 4, 6,
	6, 6, 4, 4, 4, 7, 8, 6, 5, 6,
	8, 11, 7, 8, 8, 9, 4, 4, 4, 4,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	4, 0, 2, 0, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 2, 3, 3, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 1, 0,
	5, 5, 2, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 2, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	2, 2, 0, 3, 0, 2, 0, 1, 3, 1,
	3, 2, 0, 1, 1, 0, 1, 2, 4, 4,
	0, 2, 2, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 3, 3, 3, 0, 3, 1,
	1, 0, 4, 0, 1, 1, 0, 3, 1, 3,
	2, 1, 1, 0, 1, 2, 4, 9, 3, 5,
	0, 3, 3, 0, 1, 0, 2, 2, 0, 2,
	2, 2, 0, 2, 1, 2, 3, 3, 0, 2,
	1, 2, 3, 4, 3, 0, 1, 2, 1, 5,
	4, 4, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 0, 3, 0,
	1, 0, 1, 1, 5, 0, 1, 0, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var mysqChk = [...]int{
	-1000, -363, -7, -11, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -62, -63, -64, -66,
	-67, -68, -69, -70, -14, -65, -31, -32, -71, -72,
	-73, -74, -16, -17, -18, -9, -8, -13, 9, 10,
	-83, -33, 32, -38, -48, 220, -49, -39, 221, -50,
	223, 222, 259, 224, 252, 74, 304, 305, 307, 308,
	309, 310, -84, 257, 258, 226, 36, 45, 33, 34,
	37, 265, 266, 229, -10, -34, 8, -365, 11, 427,
	254, 253, 28, -12, 461, 86, -364, 601, -214, -199,
	22, 33, 29, -198, -194, -102, -199, 20, 18, 7,
	-75, -368, -75, -75, 12, 13, -75, -305, -307, 86,
	156, 86, -75, -55, -54, -52, -51, -53, -56, 31,
	-45, -46, -329, -44, -41, 225, 222, 269, 120, 121,
	259, 260, 261, 224, 243, 258, 262, 257, 278, -40,
	81, 33, 461, 464, -312, 221, 227, 228, 428, 123,
	122, 75, 223, -309, 358, 494, 571, -56, 573, 102,
	104, 572, 44, 233, 574, 575, 576, 501, 577, 242,
	578, 579, 580, 581, 587, 543, 588, 589, 590, 124,
	7, -75, -259, -255, -339, -249, 89, 90, 91, 458,
	245, 492, 493, 294, 81, 41, 355, 358, 494, 571,
	304, 318, 312, 339, 331, 459, 495, 468, 296, 246,
	282, 568, 329, 132, 573, 299, 496, 260, 363, 364,
	497, 365, 102, 307, 394, 586, 298, 498, 584, 104,
	572, 79, 51, 44, 255, 327, 229, 323, 574, 283,
	499, 470, 276, 123, 120, 593, 36, 321, 50, 30,
	583, 122, 49, 575, 147, 500, 576, 501, 367, 346,
	562, 48, 368, 261, 502, 84, 266, 463, 302, 570,
	369, 322, 370, 293, 582, 226, 503, 555, 371, 372,
	563, 504, 347, 351, 505, 386, 373, 600, 52, 506,
	507, 564, 121, 508, 78, 577, 80, 316, 317, 509,
	291, 244, 388, 343, 440, 447, 448, 108, 109, 443,
	110, 449, 111, 450, 451, 452, 441, 112, 105, 442,
	453, 454, 344, 345, 113, 455, 107, 106, 444, 446,
	114, 456, 242, 35, 374, 460, 295, 58, 270, 389,
	46, 349, 597, 45, 558, 510, 561, 342, 338, 437,
	53, 511, 512, 513, 514, 578, 341, 315, 337, 592,
	4, 288, 579, 62, 228, 353, 352, 354, 277, 385,
	334, 515, 516, 517, 249, 82, 518, 324, 21, 519,
	520, 375, 284, 521, 56, 522, 523, 392, 258, 524,
	54, 580, 39, 525, 263, 594, 581, 526, 527, 528,
	529, 265, 530, 377, 531, 376, 348, 350, 272, 378,
	462, 532, 303, 320, 262, 585, 533, 250, 569, 264,
	269, 257, 393, 251, 534, 535, 536, 537, 538, 297,
	554, 539, 540, 308, 587, 438, 43, 541, 542, 543,
	544, 545, 292, 287, 387, 396, 61, 83, 360, 546,
	547, 567, 314, 285, 548, 305, 55, 588, 589, 590,
	279, 591, 9, 598, 599, 380, 124, 289, 290, 47,
	335, 271, 549, 300, 550, 325, 326, 340, 313, 336,
	306, 556, 273, 381, 439, 259, 551, 395, 286, 356,
	361, 301, 466, 278, 382, 566, 465, 333, 330, 280,
	552, 383, 234, 274, 275, 553, 384, 281, 464, 311,
	328, 362, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	436, 232, -75, 232, -158, -255, 232, -226, 364, -246,
	366, 379, 374, 372, -238, 375, 377, 272, -356, 386,
	232, 381, 220, 367, 376, 384, 281, -339, 173, 576,
	591, 132, 332, 371, 369, 387, 558, -255, 306, -262,
	311, -250, -339, -249, 309, -158, -81, 555, 224, -264,
	-264, -104, 558, 560, -177, -119, 140, -130, -133, -124,
	-125, -171, -172, -173, -174, -131, -184, 162, 163, 170,
	141, -182, -134, 26, 457, 429, 428, 173, 31, 216,
	68, 69, 431, 432, 143, 57, 404, 405, -132, 399,
	406, 401, 434, 435, 115, 436, 105, 107, 106, 437,
	438, 439, 344, 345, 440, 441, 442, 108, 109, 110,
	111, 112, 113, 114, 443, 446, 444, 445, 447, 448,
	449, 454, 455, 450, 451, 452, 453, 456, -250, -255,
	237, 398, 231, 168, 427, -126, -122, -8, -180, 397,
	402, 403, 407, 400, -339, -249, -128, -127, -167, 92,
	98, 103, 99, -362, 116, -365, 93, 94, 95, 96,
	97, 117, 118, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 44, 380, 380, -158, -75,
	-75, -75, -192, -102, -194, -10, -8, -365, 8, -75,
	-8, -9, -13, -34, -36, 488, -35, -255, -199, -214,
	12, 158, 42, 50, -197, -198, -12, -8, -119, 19,
	23, 24, -107, 164, -119, -255, -76, -107, -236, 236,
	-75, -75, -225, -267, 306, -229, 387, 386, -251, -227,
	-250, -248, -226, 385, 225, 23, 467, 139, 25, 27,
	142, 173, 127, 19, 143, 37, 227, 332, 243, 172,
	239, 428, 220, 72, 469, 399, 401, 397, 404, 430,
	431, 398, 366, 31, 13, 471, 28, 253, 24, 38,
	166, 222, 146, 472, 256, 26, 254, 115, 118, 474,
	22, 75, 248, 14, 241, 40, 16, 475, 476, 17,
	237, 236, 158, 233, 70, 11, 216, 29, 155, 66,
	477, 134, 478, 479, 480, 481, 128, 68, 156, 20,
	595, 402, 403, 33, 559, 457, 267, 168, 73, 59,
	560, 140, 400, 482, 483, 116, 484, 119, 76, 565,
	136, 18, 71, 42, 485, 268, 486, 238, 596, 487,
	390, 488, 157, 223, 427, 69, 489, 231, 379, 8,
	433, 32, 252, 240, 126, 67, 490, 232, 145, 434,
	435, 235, 129, 117, 7, 133, 34, 12, 74, 77,
	405, 406, 407, 57, 125, 461, 144, 15, 491, 391,
	138, 132, -306, 156, -292, -296, -250, 247, -322, 243,
	-158, -315, -314, -250, -365, -103, -245, 233, 241, 240,
	133, -343, 136, 289, 398, 231, -51, -52, -53, -226,
	172, 575, -85, 264, 268, 87, 87, -296, -295, -294,
	-344, 268, 247, -321, -313, 239, 248, -302, 240, 241,
	-297, 233, 134, -344, -297, 238, 248, 243, 247, 268,
	268, 124, 268, 124, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 263, -303, 148, -303, 465, 465, -309,
	-344, 243, 233, -344, -344, 235, 35, 35, -247, -297,
	235, 25, -303, -303, -303, -226, 172, -303, -303, -303,
	-303, 276, 276, -303, -303, -303, -303, -303, -303, -303,
	-303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
	232, -343, -111, 384, 81, -54, 278, -37, -158, -245,
	233, 234, -343, 265, -158, 217, -158, -240, 156, 15,
	-240, -237, 380, 378, 365, 370, -240, -240, -240, 279,
	363, -298, 233, 35, 244, 380, 279, 363, 279, 280,
	279, 280, 373, 383, 279, -260, 14, 158, 398, 368,
	372, 272, 232, 273, 234, 382, 380, 275, -265, -365,
	-251, 332, -339, 561, -265, -265, 32, 90, 235, -250,
	-77, -250, 93, -15, -11, -22, -21, -23, 148, -109,
	380, -97, 173, 576, 562, 563, 564, 561, 377, 569,
	567, 565, 279, 566, 87, 136, 138, 139, 4, -119,
	155, -168, 148, 149, 150, 151, 152, 153, 154, 158,
	140, 142, 156, 157, 137, 159, 160, 161, 162, 163,
	164, 165, 167, 166, 168, 169, 172, 218, 219, -125,
	-125, -125, -125, -182, -365, -365, -365, -125, -235, -365,
	-125, -365, -365, -365, -365, -188, -119, -365, -369, -365,
	-369, -369, -282, -365, -282, -365, -365, -365, -365, -365,
	-365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
	-365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
	-365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
	-365, -365, 217, -365, -365, -365, -365, -365, -282, -282,
	-282, -282, -282, 103, 98, 92, -184, 99, 93, -250,
	-255, -8, -9, -177, -264, -353, -354, -161, -158, -365,
	-250, -250, 265, -197, -12, -8, -192, -198, -194, -8,
	-75, -95, -108, 63, 64, -110, 24, 38, 67, 65,
	23, -366, 88, -366, -214, -366, 87, -36, -218, 86,
	61, 43, 93, 93, 87, 21, -193, -195, -119, 14,
	-253, 4, -252, 25, -250, 93, 217, 101, 14, -159,
	29, -158, -236, -236, 87, 306, -229, -267, -231, -230,
	388, 390, 148, -254, -250, 93, 31, 88, 87, -158,
	-271, -274, -276, -275, -277, -272, -273, 329, 330, 173,
	333, 335, 336, 337, 338, 339, 340, 341, 342, 343,
	346, 32, 255, 325, 326, 327, 328, 347, 348, 349,
	350, 351, 352, 353, 354, 312, 331, 459, 313, 314,
	315, 316, 317, 318, 320, 321, 322, 323, 324, -342,
	-339, 86, 88, 87, -278, 86, -119, -111, 232, -339,
	233, 233, 233, -75, 427, -303, -303, -303, 263, 19,
	-44, -41, -329, 18, -40, -41, 225, 120, 121, 222,
	86, -292, 86, -301, -342, -339, 86, 134, 238, 133,
	-300, -297, -300, -301, -339, -184, -339, 134, 134, -339,
	-339, -222, -250, -222, -222, 23, -222, 23, -222, 23,
	95, -250, -222, 23, -222, 23, -222, 23, -222, 23,
	-222, 23, 31, 78, 79, 80, 31, 82, 83, 84,
	-184, -339, -339, -184, -292, -226, -158, -339, 95, 95,
	95, -303, -303, 95, 93, 93, 93, -303, -303, 95,
	93, -257, -255, 93, 93, -345, 249, 293, 295, 95,
	95, 95, 95, 31, 93, -346, 31, 583, 582, 584,
	585, 586, 93, 95, 31, 95, 31, 95, -250, 86,
	-158, -117, 283, 220, 222, 225, 76, 148, 44, 87,
	235, 232, -339, -241, 237, -241, -250, -256, -255, -248,
	93, -119, -299, 14, 158, -260, -260, -240, -158, -299,
	-260, -240, -158, -240, -240, -240, -240, -260, -260, -260,
	-240, -255, -255, -158, -158, -158, -158, -158, -158, -158,
	-265, -234, 14, 76, -265, -265, -263, 309, 343, 556,
	557, 87, 461, -151, -158, 561, 561, 561, 561, 561,
	561, -119, -119, -119, -119, 484, -175, 116, 140, 117,
	118, -133, -176, -180, -182, 100, 158, 142, 156, 157,
	-124, -125, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -266, -250, 93, 173, -129,
	-128, 99, -362, -129, -105, -107, -119, -119, -339, -250,
	-105, -105, -119, -101, 24, 38, -186, -187, 144, -184,
	-366, -366, 95, 99, -250, -250, -94, -93, 409, 410,
	411, 412, 414, 415, 416, 419, 420, 424, 425, 408,
	426, 413, 418, 421, 422, 423, 417, 328, -119, -119,
	-119, -119, -119, -119, -82, -119, 127, 128, 129, -119,
	-119, -178, -177, -338, -337, -336, -119, -119, -119, -119,
	-119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
	-119, -119, -119, -119, -119, -119, -119, -119, -119, -106,
	24, 38, -105, -251, -256, -248, -105, -106, -106, -105,
	-105, 217, -214, -366, 87, -355, 390, 391, 559, -258,
	268, -257, 25, -178, 14, -220, 77, -250, -197, -197,
	63, 64, 59, -105, -110, -366, -35, 25, -216, -250,
	62, 93, -283, -226, 355, 356, 173, -119, -119, 87,
	-196, 27, 28, -158, -252, 164, -256, -158, -221, 268,
	-158, -136, -138, -139, -140, -161, -183, -365, -141, 480,
	477, 14, -151, -152, -160, -255, -229, -231, 87, 389,
	391, 392, 76, 119, -119, -284, 172, -311, -310, -309,
	-292, -294, -295, -296, 88, -284, -288, 361, 360, -278,
	-278, -278, -278, -278, -283, -283, -283, -283, 86, 86,
	-278, -278, -278, -278, -286, 86, -286, -286, -287, 86,
	-287, -322, -119, -319, -318, -316, -317, 242, 102, 553,
	509, 461, 501, 543, 77, -314, -196, 95, -366, -117,
	-242, 237, -320, -317, -339, -339, -339, -242, -339, 93,
	-339, 93, -339, 93, -86, -58, -1, 595, 596, 597,
	87, 19, -293, -292, -57, 293, -325, -326, 268, -321,
	-315, -301, 134, -300, -301, -301, -339, 87, 29, 124,
	124, 124, 124, 461, 222, 32, -243, 500, 140, 553,
	509, -292, -57, -266, 235, -266, -266, 93, 93, -239,
	591, -151, -113, 285, 148, 274, 274, 232, 232, 287,
	-158, 286, 288, 290, 276, -158, -158, -241, 76, -153,
	-158, 26, -255, -158, -240, -240, -158, -240, -240, -158,
	-250, -97, 390, 87, 461, 22, -98, 22, -365, 116,
	117, 118, -176, -124, -125, -124, 139, 256, 87, -366,
	25, 87, 77, -366, -366, -366, 87, 14, -105, -189,
	-187, 146, -119, -366, -366, -366, 87, 87, 14, -270,
	25, -366, -366, -366, -366, -366, -188, -366, 14, 87,
	87, -366, -366, 87, 87, -366, 87, 87, 87, -335,
	87, 87, 87, 87, -366, -366, -366, -366, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, -366, -366,
	-105, -105, -365, 217, -366, -366, -366, -366, -366, -251,
	-354, 558, 391, -165, -164, -162, 74, 236, 75, -365,
	-257, -366, -129, 90, -217, 90, -216, -170, -250, 95,
	99, -199, -135, -137, 14, -110, -182, 88, 87, -283,
	-203, -208, -237, -250, 93, 173, -285, 173, -285, 355,
	356, -195, 217, -166, 15, -169, 32, 57, -11, -365,
	-365, 32, 87, -154, -156, -155, -157, 66, 70, 72,
	67, 68, 69, 73, -261, 25, -136, -9, -8, -365,
	-365, -365, -158, -151, -367, 14, 77, -367, 87, 217,
	-230, -232, 393, 390, 396, -339, 93, -85, 87, -309,
	-296, -200, -114, 40, -289, 362, -283, 468, -283, -291,
	93, -291, 95, 95, 88, -47, -42, -43, 33, 81,
	-316, -303, 93, 39, -303, -303, -250, 88, -196, -113,
	-158, 140, 76, -320, -320, -320, -255, -2, 594, 600,
	134, 86, 365, 18, -216, 87, 88, -185, 294, 88,
	-87, -250, 88, 86, -301, -301, -250, -365, 232, 31,
	31, 553, 509, 500, -57, -185, -284, -339, 593, 592,
	88, 234, 292, -118, 404, -115, 93, 89, -158, -158,
	-158, -158, -158, 225, 222, 277, 235, -151, -158, 87,
	-80, 251, 246, -260, -260, 33, -158, 390, 570, 568,
	-119, 139, 256, -133, -125, -107, 458, -268, 173, 329,
	255, 327, 323, 343, 334, 360, 325, 361, 322, 321,
	320, -268, -266, -119, -119, -192, 147, -119, 145, -119,
	-119, -119, -366, 173, 329, 14, -119, -119, -119, -336,
	-119, -119, -119, -334, -333, -129, -184, -366, -334, -119,
	-119, -333, -333, -337, -337, -337, -337, -337, -177, -177,
	-177, -177, -366, -366, -106, -251, -162, -297, -297, -297,
	-222, 87, -233, 22, 14, 57, 57, -135, -166, -136,
	-110, -250, -206, 555, -211, 46, -209, -210, 47, -207,
	48, 56, -285, -285, 164, -197, -119, -223, 76, -224,
	-228, -184, -179, -181, -180, -365, -215, -366, -250, -222,
	-224, -138, -139, -139, -138, -139, 66, 66, 66, 71,
	66, 71, 66, -155, -255, -366, -366, -9, -9, -119,
	-258, 77, -136, -136, -160, -255, 164, 390, 394, 395,
	-309, -361, 116, 140, 31, 76, 358, 102, -359, 172,
	497, 548, 553, 509, 501, 543, -360, 238, 133, 134,
	250, 25, 41, 88, 87, 88, 87, 88, 87, -244,
	-243, -43, -42, -303, -303, 95, -339, 93, 93, 234,
	26, -158, 76, 76, 76, -88, 598, 95, 86, -3,
	81, -119, 86, 19, -292, -184, -327, -279, -328, -280,
	-281, -5, -6, -304, -91, 57, 102, -61, 44, 233,
	578, 579, 124, -365, 591, -319, -216, -323, -325, -158,
	-121, -365, -120, -122, -126, 162, 163, -185, -158, -112,
	283, 291, 86, -116, 90, -341, 77, 274, 358, 274,
	-158, -80, -47, -158, -240, -240, 33, -339, -366, -133,
	-125, -365, -366, -278, -278, -278, -287, -278, 317, -278,
	317, -278, -366, -366, 87, -366, 22, -366, -96, 433,
	-119, 87, 87, -366, 86, 86, -119, -366, -366, -366,
	-335, 87, -366, 87, -366, 87, -269, 554, -366, -366,
	-366, -366, -366, -366, -366, -366, -366, -366, -366, -163,
	22, -163, -163, -366, 90, -158, -166, -190, 16, -203,
	51, 335, -213, -212, 55, 47, -210, 19, 49, 19,
	30, -223, 87, 148, 87, -366, -366, 87, 57, 217,
	-366, -166, -149, -148, 76, 77, -150, 76, -148, 66,
	66, -218, -366, -366, 87, -221, -136, -166, -166, 217,
	116, -365, -123, -132, -121, 12, 93, 93, -339, -358,
	582, 583, 31, 95, -303, -303, 134, 134, -158, 86,
	-283, 93, -283, 95, 95, 31, 82, 83, 84, 31,
	78, 79, 80, -158, -158, -158, -158, -324, 86, 19,
	-119, 86, 148, 88, -216, -216, 270, 158, -303, 576,
	276, 276, -303, -303, -303, -90, -89, 598, 88, -366,
	87, -290, 461, 464, -119, -127, -127, -218, 88, -332,
	461, -340, -250, -250, -250, -250, -124, -283, -119, -119,
	-197, 93, -119, -119, 95, 95, -366, -366, -334, -333,
	-119, -366, -146, -145, -147, 562, 116, 31, -268, -365,
	66, 18, 16, -365, -365, -258, -190, -191, 17, 19,
	-204, 53, -202, 52, -202, -212, 19, 19, 93, 19,
	93, 134, -228, -119, -181, 57, -11, -250, -179, -250,
	-192, -119, 86, -119, -129, -166, -166, -119, -172, 436,
	105, 107, 106, 437, 438, 439, 344, 345, 440, 441,
	442, 108, 109, 110, 111, 112, 113, 114, 443, 446,
	444, 447, 448, 449, 454, 455, 450, 451, 452, 453,
	456, 93, 93, 86, -119, 88, 88, -218, -323, -58,
	88, -216, 95, 88, 271, -180, -365, 93, -303, -303,
	-303, 95, 95, -257, -366, 87, -250, -360, -325, 465,
	465, -366, 25, -331, -330, -251, 86, 77, -100, 158,
	461, -366, -366, -366, -366, -366, 88, 88, -366, -366,
	87, -366, -145, -147, -366, 76, -129, -219, -366, -250,
	238, 19, 19, -219, -219, -165, -191, -119, -177, -205,
	54, 76, 119, 93, 93, 93, 12, -179, 217, -197,
	-216, -143, 365, -192, -366, -216, 88, 25, 88, 600,
	134, 88, -180, -99, -365, 267, -257, 93, 93, -89,
	-92, -11, 87, 148, -216, -158, -366, 459, 73, 462,
	-119, -366, 76, 472, 562, 87, -366, -366, -366, 76,
	119, -224, -250, 88, -366, -365, -197, 88, -201, -11,
	86, -3, 267, -279, -328, -280, -281, -5, -6, -304,
	-78, 461, -330, -308, -251, 93, 95, 88, 62, 460,
	463, -335, -250, 238, -258, -144, -142, -250, 515, -351,
	-350, 457, -361, -357, 116, 140, 102, -359, 553, 509,
	125, 126, -78, -119, 86, -366, -79, 282, 558, -341,
	62, -366, -366, 87, 22, -271, -60, 526, -348, -349,
	76, -352, 371, 525, 546, 116, 93, 88, -216, 243,
	-332, 461, -142, 522, -284, -129, -349, 76, -348, 76,
	13, 12, -4, 599, 88, 284, 462, -59, 26, -143,
	-347, 251, 246, 249, 32, -347, 95, -4, 463, 526,
	245, 31, 116, -129, -146, -145, -145,
}

var mysqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 67, 69, 70, 799, 799,
	799, 0, 799, 0, 0, 799, -2, -2, 799, 1286,
	0, 799, 0, 0, -2, 733, 735, 0, 737, -2,
	0, 0, 746, 1781, 1781, 794, 0, 0, 0, 0,
	0, 799, 799, 799, 1146, 47, 799, 0, 82, 83,
	751, 752, 753, 62, 0, 1779, 1, 3, 68, 72,
	0, 0, 0, 55, 1155, 0, 75, 0, 0, 803,
	0, 801, 0, 1269, 799, 799, 0, 113, 114, 0,
	0, 0, -2, 117, -2, 146, 147, 148, 0, 153,
	558, 495, 546, 493, 531, -2, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 498,
	376, 376, 0, 0, -2, 486, 486, 486, 0, 0,
	0, 528, 1271, 438, 376, 376, 376, 0, 376, 376,
	376, 376, 0, 0, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 1173, 152, 1287, 1284, 1285, 37, 38, 39, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 0, 1263, 0, 671, 900, 0, 724, 724, 0,
	724, 724, 724, 0, 0, 0, 682, 0, 0, 0,
	0, 721, 0, 698, 699, 0, 705, 1782, 0, 1782,
	1782, 1254, 0, 718, 716, 728, 729, 732, 736, 0,
	741, 744, 1280, 1281, 0, 758, 46, 1525, 750, 763,
	764, 0, 795, 796, 42, 997, 0, 922, 927, 938,
	951, 952, 953, 954, 955, 957, 958, 0, 0, 0,
	0, 963, 964, 0, 0, 0, 0, 0, 978, 0,
	0, 0, 0, 0, 1127, 0, 1090, 1090, 1014, 1090,
	1092, 1092, 0, 0, 0, 1778, 1566, 1574, 1575, 1597,
	1683, 1732, 1570, 1571, 1552, 1564, 1567, 1555, 1556, 1558,
	1560, 1565, 1572, 1578, 1557, 1577, 1576, 0, 1553, 1554,
	1559, 1569, 1573, 1561, 1562, 1563, 1568, 1579, 1136, 0,
	0, 0, 0, 0, 0, 272, 273, 996, 1243, 1092,
	1092, 1092, 1092, 1092, -2, -2, 218, 219, 220, 221,
	222, 223, 224, 0, 214, 0, 277, 278, 274, 275,
	276, 980, 981, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 1781, 0, 773, 0, 0,
	0, 0, 1155, 0, 1147, 1146, 60, 0, 799, -2,
	0, 0, 0, 0, 44, 0, 49, 859, 74, 73,
	1195, 0, 0, 0, 56, 1156, 64, 66, 1157, 0,
	804, 805, 0, 835, 839, 0, 800, 0, 0, 1270,
	1269, 1269, 99, 0, 1728, 1247, -2, -2, 0, 0,
	1282, 1283, 1256, -2, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, -2, 0, 0, 164, 165, 0, 40, 403, 0,
	160, 0, 396, 337, 0, 1173, 0, 0, 0, 0,
	0, 799, 0, 1264, 141, 142, 149, 150, 151, 376,
	376, 376, 543, 0, 0, 152, 152, 502, 503, 504,
	0, 0, -2, 401, 0, 487, 0, 0, 390, 390,
	394, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	0, 520, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 0, 377, 0, 541, 542, 439,
	0, 0, 0, 0, 0, 0, 518, 519, 0, 0,
	1272, 1273, 0, 0, 0, 376, 376, 0, 0, 0,
	0, 376, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 1186, 0, 0, -2, 0, 663, 0, 0,
	0, 1265, 1265, 0, 670, 0, 672, 673, 0, 0,
	674, 0, 721, 721, 719, 720, 676, 677, 678, 724,
	0, 0, 385, 386, 387, 721, 724, 0, 724, 724,
	724, 724, 721, 721, 721, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1782, 702, 703, 706, 1783,
	1784, 1303, 1782, 1782, 710, 714, 1255, 734, 742, 745,
	761, 759, 760, 762, 754, 755, 756, 757, 0, 774,
	775, 780, 0, 0, 0, 0, 786, 787, 788, 0,
	0, 791, 792, 793, 0, 0, 0, 0, 0, 920,
	0, 0, 986, 987, 988, 989, 990, 991, 992, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	960, 961, 962, 965, 0, 0, 0, 970, 971, 0,
	0, 0, 0, 0, 809, 0, 1128, 0, 1012, 0,
	1013, 1015, 1016, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 819, 819, 0, 0, 207, 208,
	209, 210, 211, 225, 226, 227, 228, 229, 279, 1136,
	0, 996, 0, 0, 43, 765, 766, 0, 883, 1275,
	0, 815, 0, 54, 63, 65, 1155, 58, 1155, 0,
	821, 0, 0, -2, -2, 822, 828, 829, 830, 831,
	832, 51, 1780, 52, 0, 71, 0, 45, 0, 0,
	0, 0, 349, 1198, 0, 0, 1148, 1149, 1152, 0,
	836, 1608, 840, 0, 842, 843, 0, 802, 0, 97,
	0, 899, 0, 0, 0, 1728, 1253, 0, 101, 102,
	0, 0, 0, 360, 1258, 1259, 1260, -2, 383, 0,
	360, 344, 287, 288, 289, 337, 291, 337, 337, 337,
	337, 349, 349, 349, 349, 320, 321, 322, 323, 324,
	0, 0, 306, 337, 337, 337, 337, 327, 328, 329,
	330, 331, 332, 333, 334, 292, 293, 294, 295, 296,
	297, 298, 299, 300, 339, 339, 339, 341, 341, 0,
	41, 0, 364, 0, 1152, 0, 0, 1186, 1267, 1277,
	0, 0, 0, 1267, 119, 0, 0, 0, 544, 569,
	496, 532, 545, 0, 499, 500, -2, 0, 0, 486,
	0, 488, 0, 384, 0, -2, 0, 394, 0, 390,
	394, 391, 394, 382, 395, 522, 523, 524, 0, 526,
	527, 599, 869, 0, 0, 0, 0, 0, 605, 606,
	607, 0, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 533, 534, 535, 536, 537, 538, 539, 540,
	0, 0, 0, 0, 488, 0, 529, 0, 440, 441,
	442, 0, 0, 445, 446, 447, 448, 0, 0, 451,
	452, 453, 886, 887, 454, 455, 480, 481, 482, 456,
	457, 458, 459, 460, 461, 462, 474, 475, 476, 477,
	478, 479, 463, 464, 465, 466, 467, 468, 471, 0,
	134, 1177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 818, 901, 1288, 1289,
	725, 726, 0, 388, 389, 724, 724, 679, 711, 0,
	724, 683, 712, 684, 686, 685, 687, 700, 701, 724,
	690, 722, 723, 691, 692, 693, 694, 695, 696, 697,
	707, 0, 730, 731, 708, 709, 0, 743, 747, 748,
	749, 0, 0, 777, 93, 782, 783, 784, 785, 797,
	790, 998, 917, 918, 919, 0, 921, 924, 0, 982,
	984, 926, 928, 993, 994, 995, 0, 0, 0, 0,
	0, 932, 936, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 956, 1106, 1107, 1108, 973,
	280, 281, 0, 974, 0, 833, 0, 0, 0, 972,
	0, 0, 0, 0, 810, 811, 1134, 1131, 0, 0,
	1091, 1093, 0, 0, 0, 0, 0, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1109, 0,
	0, 0, 0, 0, 1127, 0, 975, 976, 977, 0,
	0, 0, 1276, 0, 129, 130, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 820, 1137, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 1242, 0, 768, 769, 771, 0, 903,
	0, 884, 0, 0, 0, 814, 0, 817, 57, 59,
	826, 827, 0, 844, 823, 53, 48, 0, 0, 861,
	1196, 349, 1218, 0, 358, 358, 355, 1158, 1159, 0,
	1151, 1153, 1154, 76, 841, 837, 0, 915, 0, 0,
	898, 0, 847, 849, 850, 851, 881, 0, 854, 0,
	0, 0, 0, 0, 95, 900, 1248, 100, 0, 0,
	105, 106, 1249, 1250, 1251, 1252, 0, 558, -2, 435,
	166, 168, 169, 170, 161, -2, 347, 345, 346, 290,
	349, 349, 314, 315, 316, 317, 318, 319, 0, 0,
	307, 308, 309, 310, 301, 0, 302, 303, 304, 0,
	305, 402, 0, 1160, 365, 366, 368, 376, 0, 371,
	372, 0, 376, 376, 0, 397, 398, 0, 1152, 1177,
	0, 0, 0, 1278, 1277, 1277, 1277, 0, 154, 155,
	156, 157, 158, 159, 594, 0, 0, 570, 592, 593,
	152, 0, 0, 162, 490, 489, 0, 626, 0, 400,
	0, 0, 394, 394, 379, 380, 525, 0, 0, 601,
	602, 603, 604, 0, 0, 0, 512, 429, 0, 513,
	514, 488, 490, 360, 0, 443, 444, 449, 450, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1174, 1175, 1176, 0, 0, 664, 0, 0, 426,
	91, 1266, 669, 721, 689, 713, 721, 681, 688, 704,
	739, 781, 0, 0, 0, 0, 789, 0, 0, 925,
	983, 985, 929, 0, 933, 937, 0, 0, 0, 0,
	0, 0, 0, 979, 1003, 1004, 0, 0, 1146, 0,
	1132, 0, 0, 1011, 1094, 1095, 0, 0, 0, 0,
	0, 1022, 1023, 1024, 1025, 1026, 0, 1028, 0, 0,
	0, 1032, 1033, 0, 0, 1034, 0, 0, 0, 0,
	0, 0, 0, 0, 1046, 1047, 1048, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 999,
	0, 0, 819, 0, 1096, 1097, 1098, 1099, 1100, 1137,
	767, 770, 772, 857, 904, 905, 0, 0, 0, 0,
	885, 1274, 812, 813, 816, -2, 0, 0, 1139, 0,
	0, 844, 915, 845, 0, 824, 50, 860, 0, 1200,
	1199, 1212, 1225, 358, 358, 352, 353, 359, 354, 356,
	357, 1150, 0, 1155, 0, 1236, 0, 0, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 0,
	891, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 89, 90, 0, 0, 0,
	103, 104, 0, 0, 110, 361, 362, 143, 152, 437,
	167, 410, 0, 0, 286, 348, 311, 312, 313, 0,
	335, 0, 0, 0, 431, 115, 1164, 1163, 376, 376,
	367, 0, 370, 0, 0, 0, 1279, 338, 399, 0,
	133, 0, 0, 0, 0, 0, 139, 564, 0, 0,
	571, 0, 0, 0, 494, 0, 505, 506, 0, 598,
	-2, 660, 364, 0, 378, 381, 870, 0, 0, 507,
	0, 510, 511, 430, 490, 516, 517, 530, 472, 473,
	470, 0, 0, 1187, 1188, 1193, 1191, 1192, 120, 551,
	553, 552, 556, 0, 0, 549, 0, 426, 1160, 0,
	668, 427, 428, 724, 724, 776, 94, 0, 779, 0,
	0, 0, 0, 930, 934, 834, 0, 0, 337, 337,
	1114, 337, 341, 1117, 337, 1119, 337, 1122, 337, 1125,
	1126, 0, 0, 0, 0, 1129, 1010, 1135, 0, 0,
	0, 0, 1021, 0, 0, 0, 0, 0, 0, 131,
	132, 1063, 0, 0, 1065, 1067, 1068, 1038, 1064, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 1001, 0, 1138, 906, 911, 911, 911,
	0, 0, 0, 1261, 1262, 1140, 1141, 915, 1142, 846,
	825, 862, 1218, 0, 1211, 0, -2, 1220, 0, 0,
	0, 1226, 350, 351, 838, 77, 916, 80, 0, 1236,
	1244, 0, 1227, 1238, 1240, 0, 0, 0, 1232, 0,
	915, 848, 877, 879, 0, 874, 889, 890, 892, 0,
	894, 0, 896, 897, 859, 853, 855, 0, 0, 0,
	97, 0, 915, 915, 96, 0, 902, 107, 108, 109,
	436, 171, 176, 0, 0, 0, 181, 0, 183, 0,
	0, 0, 188, 189, 376, 376, 411, 0, 283, 285,
	0, 0, 174, 349, 0, 349, 0, 342, 0, 412,
	432, 1161, 1162, 0, 0, 369, 373, 374, 375, 0,
	1268, 135, 0, 0, 0, 567, 0, 595, 0, 0,
	0, 0, 0, 0, 163, 491, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 0, 376, 0, 0, 0,
	376, 376, 376, 0, 652, 363, 0, 0, 623, 620,
	508, 0, 212, 213, 215, 0, 0, 515, 859, 1178,
	1179, 1180, 0, 1190, 1194, 123, 0, 0, 0, 0,
	665, 666, 667, 92, 675, 680, 778, 798, 923, 931,
	935, 0, 967, 1112, 349, 1115, 1116, 1118, 1120, 1121,
	1123, 1124, 968, 969, 0, 1006, 0, 1008, 1155, 0,
	1133, 0, 0, 1020, 0, 0, 0, 1029, 1030, 1031,
	0, 0, 1037, 0, 1039, 0, 0, 0, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1002, 0,
	0, 0, 0, 883, -2, 61, 1142, 1144, 0, 1205,
	1203, 1203, 1213, 1214, 0, 0, 1221, 0, 0, 0,
	0, 81, 0, 0, 0, 1241, 0, 0, 0, 0,
	98, 1146, 871, 878, 0, 0, 872, 0, 873, 893,
	895, 852, -2, 856, 0, 915, 915, 87, 88, 0,
	177, 0, 179, 205, 206, 0, 182, 184, 185, 186,
	192, 193, 194, 187, 0, 0, 282, 284, 0, 0,
	325, 336, 326, 0, 0, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 859, 136, 137, 138, 559, 0, 569,
	0, 0, 0, 562, 0, 497, 0, 0, 0, 376,
	376, 376, 0, 0, 0, 0, 637, 0, 0, 600,
	0, 608, 0, 0, 0, 216, 217, 0, 1189, 550,
	0, 121, 122, 0, 0, 555, 1101, 1113, 0, 0,
	0, 1130, 0, 0, 0, 0, 1027, 1035, 0, 1066,
	0, 1042, 0, 0, 0, 589, 590, 0, 1062, 0,
	912, 0, 0, 0, 0, 903, 1144, 79, 0, 0,
	1208, 0, 1201, 1204, 1202, 1215, 0, 0, 1222, 0,
	1224, 0, 1245, 1246, 1239, 0, 1231, 1234, 1230, 1233,
	1155, 875, 0, 880, 0, 1146, 86, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 191, 0, 0, 340, 343, 0, 0, 0,
	560, 0, 572, 563, 0, 650, 0, 654, 0, 0,
	0, 657, 658, 659, 636, 0, 640, 404, 624, 621,
	622, 509, 0, 124, 125, 0, 0, 0, 0, 0,
	0, 1005, 1007, 1009, 1018, 1019, 1110, 1111, 1036, 1040,
	0, 1043, 0, 0, 1044, 0, 591, 0, 908, 865,
	866, 913, 914, 0, 0, 858, 78, 1145, 1143, 1197,
	0, 1206, 1207, 1216, 1217, 1223, 0, 1229, 0, 84,
	0, 0, 0, 1155, 178, 0, 197, 0, 568, 0,
	571, 561, 648, 649, 0, 661, 653, 655, 656, 638,
	-2, 1181, 0, 0, 0, 557, 966, 0, 0, 0,
	1063, 1045, 0, 587, 588, 0, 907, 909, 910, 1209,
	1210, 1237, 1235, 876, 883, 0, 85, 417, 410, 1181,
	0, 0, 0, 641, 642, 643, 644, 645, 646, 647,
	547, 1183, 126, 127, 483, 484, 485, 120, 1102, 0,
	1105, 0, 867, 868, 573, 0, 575, 0, -2, 405,
	418, 0, 172, 198, 199, 0, 0, 202, 203, 204,
	195, 196, 116, 0, 0, 662, 0, 1184, 1185, 123,
	1103, 1041, 574, 0, 0, 360, 0, 584, 406, 407,
	0, 413, 414, 415, 416, 200, 201, 596, 0, 0,
	554, 0, 576, 577, 585, 0, 408, 0, 409, 0,
	0, 0, 565, 0, 596, 1182, 0, 0, 586, 582,
	419, 421, 422, 0, 0, 420, 597, 566, 1104, 0,
	423, 424, 425, 578, 579, 580, 581,
}

var mysqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 141, 3, 3, 3, 167, 159, 3,
	86, 88, 164, 162, 87, 163, 217, 165, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 601,
	149, 148, 150, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 169, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 137, 3, 170,
}

var mysqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 138, 139, 140, 142, 143, 144, 145, 146,
	147, 151, 152, 153, 154, 155, 156, 157, 158, 160,
	161, 166, 168, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var mysqTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 0,
}

var mysqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func mysqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	mysqDebug        = 0
	mysqErrorVerbose = true
)

type mysqLexer interface {
	Lex(lval *mysqSymType) int
	Error(s string)
}

type mysqParser interface {
	Parse(mysqLexer) int
	Lookahead() int
}

type mysqParserImpl struct {
	lval  mysqSymType
	stack [mysqInitialStackSize]mysqSymType
	char  int
}

func (p *mysqParserImpl) Lookahead() int {
	return p.char
}

func mysqNewParser() mysqParser {
	return &mysqParserImpl{}
}

const mysqFlag = -1000

func mysqTokname(c int) string {
	if c >= 1 && c-1 < len(mysqToknames) {
		if mysqToknames[c-1] != "" {
			return mysqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mysqStatname(s int) string {
	if s >= 0 && s < len(mysqStatenames) {
		if mysqStatenames[s] != "" {
			return mysqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mysqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mysqErrorVerbose {
		return "syntax error"
	}

	for _, e := range mysqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mysqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := mysqPact[state]
	for tok := TOKSTART; tok-1 < len(mysqToknames); tok++ {
		if n := base + tok; n >= 0 && n < mysqLast && mysqChk[mysqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mysqDef[state] == -2 {
		i := 0
		for mysqExca[i] != -1 || mysqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mysqExca[i] >= 0; i += 2 {
			tok := mysqExca[i]
			if tok < TOKSTART || mysqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mysqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mysqTokname(tok)
	}
	return res
}

func mysqlex1(lex mysqLexer, lval *mysqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if mysqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = mysqTok1[0]
		goto out
	}
	if char < len(mysqTok1) {
		token = mysqTok1[char]
		goto out
	}
	if char >= mysqPrivate {
		if char < mysqPrivate+len(mysqTok2) {
			token = mysqTok2[char-mysqPrivate]
			goto out
		}
	}
	for i := 0; i < len(mysqTok3); i += 2 {
		token = mysqTok3[i+0]
		if token == char {
			token = mysqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = mysqTok2[1] /* unknown char */
	}
	if mysqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", mysqTokname(token), uint(char), token)
	}
	return char, token
}

func mysqParse(mysqlex mysqLexer) int {
	return mysqNewParser().Parse(mysqlex)
}

func (mysqrcvr *mysqParserImpl) Parse(mysqlex mysqLexer) int {
	var mysqn int
	var mysqVAL mysqSymType
	var mysqDollar []mysqSymType
	_ = mysqDollar // silence set and not used
	mysqS := mysqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mysqstate := 0
	mysqrcvr.char = -1
	mysqtoken := -1 // mysqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mysqstate = -1
		mysqrcvr.char = -1
		mysqtoken = -1
	}()
	mysqp := -1
	goto mysqstack

ret0:
	return 0

ret1:
	return 1

mysqstack:
	/* put a state and value onto the stack */
	if mysqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mysqTokname(mysqtoken), mysqStatname(mysqstate))
	}

	mysqp++
	if mysqp >= len(mysqS) {
		nyys := make([]mysqSymType, len(mysqS)*2)
		copy(nyys, mysqS)
		mysqS = nyys
	}
	mysqS[mysqp] = mysqVAL
	mysqS[mysqp].yys = mysqstate

mysqnewstate:
	mysqn = mysqPact[mysqstate]
	if mysqn <= mysqFlag {
		goto mysqdefault /* simple state */
	}
	if mysqrcvr.char < 0 {
		mysqrcvr.char, mysqtoken = mysqlex1(mysqlex, &mysqrcvr.lval)
	}
	mysqn += mysqtoken
	if mysqn < 0 || mysqn >= mysqLast {
		goto mysqdefault
	}
	mysqn = mysqAct[mysqn]
	if mysqChk[mysqn] == mysqtoken { /* valid shift */
		mysqrcvr.char = -1
		mysqtoken = -1
		mysqVAL = mysqrcvr.lval
		mysqstate = mysqn
		if Errflag > 0 {
			Errflag--
		}
		goto mysqstack
	}

mysqdefault:
	/* default state action */
	mysqn = mysqDef[mysqstate]
	if mysqn == -2 {
		if mysqrcvr.char < 0 {
			mysqrcvr.char, mysqtoken = mysqlex1(mysqlex, &mysqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mysqExca[xi+0] == -1 && mysqExca[xi+1] == mysqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mysqn = mysqExca[xi+0]
			if mysqn < 0 || mysqn == mysqtoken {
				break
			}
		}
		mysqn = mysqExca[xi+1]
		if mysqn < 0 {
			goto ret0
		}
	}
	if mysqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mysqlex.Error(mysqErrorMessage(mysqstate, mysqtoken))
			Nerrs++
			if mysqDebug >= 1 {
				__yyfmt__.Printf("%s", mysqStatname(mysqstate))
				__yyfmt__.Printf(" saw %s\n", mysqTokname(mysqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mysqp >= 0 {
				mysqn = mysqPact[mysqS[mysqp].yys] + mysqErrCode
				if mysqn >= 0 && mysqn < mysqLast {
					mysqstate = mysqAct[mysqn] /* simulate a shift of "error" */
					if mysqChk[mysqstate] == mysqErrCode {
						goto mysqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mysqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state-%d\n", mysqS[mysqp].yys)
				}
				mysqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mysqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mysqTokname(mysqtoken))
			}
			if mysqtoken == mysqEofCode {
				goto ret1
			}
			mysqrcvr.char = -1
			mysqtoken = -1
			goto mysqnewstate /* try again in the same state */
		}
	}

	/* reduction by production mysqn */
	if mysqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mysqn, mysqStatname(mysqstate))
	}

	mysqnt := mysqn
	mysqpt := mysqp
	_ = mysqpt // guard against "declared and not used"

	mysqp -= mysqR2[mysqn]
	// mysqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if mysqp+1 >= len(mysqS) {
		nyys := make([]mysqSymType, len(mysqS)*2)
		copy(nyys, mysqS)
		mysqS = nyys
	}
	mysqVAL = mysqS[mysqp+1]

	/* consult goto table to find next state */
	mysqn = mysqR1[mysqn]
	mysqg := mysqPgo[mysqn]
	mysqj := mysqg + mysqS[mysqp].yys + 1

	if mysqj >= mysqLast {
		mysqstate = mysqAct[mysqg]
	} else {
		mysqstate = mysqAct[mysqj]
		if mysqChk[mysqstate] != -mysqn {
			mysqstate = mysqAct[mysqg]
		}
	}
	// dummy call; replaced with literal code
	switch mysqnt {

	case 1:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:533
		{
			setParseTree(mysqlex, mysqDollar[1].statementUnion())
		}
	case 2:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:538
		{
		}
	case 3:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:539
		{
		}
	case 4:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:543
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 36:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:578
		{
			setParseTree(mysqlex, nil)
		}
	case 37:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:584
		{
			mysqVAL.colIdent = ast.NewColIdentWithAt(string(mysqDollar[1].str), ast.NoAt)
		}
	case 38:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:588
		{
			mysqVAL.colIdent = ast.NewColIdentWithAt(string(mysqDollar[1].str), ast.SingleAt)
		}
	case 39:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:592
		{
			mysqVAL.colIdent = ast.NewColIdentWithAt(string(mysqDollar[1].str), ast.DoubleAt)
		}
	case 40:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:597
		{
			mysqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 41:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:601
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 42:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:607
		{
			mysqLOCAL = &ast.OtherAdmin{}
		}
		mysqVAL.union = mysqLOCAL
	case 43:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:613
		{
			mysqLOCAL = &ast.Load{}
		}
		mysqVAL.union = mysqLOCAL
	case 44:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:619
		{
			mysqLOCAL = &ast.With{Ctes: mysqDollar[2].ctesUnion(), Recursive: false}
		}
		mysqVAL.union = mysqLOCAL
	case 45:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:623
		{
			mysqLOCAL = &ast.With{Ctes: mysqDollar[3].ctesUnion(), Recursive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 46:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:628
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 47:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.With
//line mysql.y:632
		{
			mysqLOCAL = mysqDollar[1].withUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 48:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:638
		{
			mysqSLICE := (*[]*ast.CommonTableExpr)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].cteUnion())
		}
	case 49:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.CommonTableExpr
//line mysql.y:642
		{
			mysqLOCAL = []*ast.CommonTableExpr{mysqDollar[1].cteUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 50:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.CommonTableExpr
//line mysql.y:648
		{
			mysqLOCAL = &ast.CommonTableExpr{TableID: mysqDollar[1].tableIdent, Columns: mysqDollar[2].columnsUnion(), Subquery: mysqDollar[4].subqueryUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 51:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:654
		{
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 52:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:658
		{
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 53:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:662
		{
			ast.SetLockInSelect(mysqDollar[2].selStmtUnion(), mysqDollar[3].lockUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 54:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:685
		{
			mysqDollar[1].selStmtUnion().SetOrderBy(mysqDollar[2].orderByUnion())
			mysqDollar[1].selStmtUnion().SetLimit(mysqDollar[3].limitUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 55:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:691
		{
			mysqDollar[1].selStmtUnion().SetLimit(mysqDollar[2].limitUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 56:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:696
		{
			mysqDollar[1].selStmtUnion().SetOrderBy(mysqDollar[2].orderByUnion())
			mysqDollar[1].selStmtUnion().SetLimit(mysqDollar[3].limitUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 57:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:702
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
			mysqDollar[2].selStmtUnion().SetOrderBy(mysqDollar[3].orderByUnion())
			mysqDollar[2].selStmtUnion().SetLimit(mysqDollar[4].limitUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 58:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:709
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
			mysqDollar[2].selStmtUnion().SetLimit(mysqDollar[3].limitUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 59:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:715
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
			mysqDollar[2].selStmtUnion().SetOrderBy(mysqDollar[3].orderByUnion())
			mysqDollar[2].selStmtUnion().SetLimit(mysqDollar[4].limitUnion())
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 60:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:722
		{
			mysqDollar[2].selStmtUnion().SetWith(mysqDollar[1].withUnion())
		}
	case 61:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:726
		{
			mysqLOCAL = ast.NewSelect(ast.Comments(mysqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: mysqDollar[5].exprUnion()}}, []string{mysqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: mysqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		mysqVAL.union = mysqLOCAL
	case 62:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:732
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 63:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:736
		{
			mysqLOCAL = &ast.Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 64:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:740
		{
			mysqLOCAL = &ast.Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 65:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:744
		{
			mysqLOCAL = &ast.Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 66:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:748
		{
			mysqLOCAL = &ast.Union{Left: mysqDollar[1].selStmtUnion(), Distinct: mysqDollar[2].booleanUnion(), Right: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 67:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:754
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 68:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:758
		{
			ast.SetLockInSelect(mysqDollar[1].selStmtUnion(), mysqDollar[2].lockUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 69:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:763
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 70:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:767
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 71:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:773
		{
			mysqLOCAL = mysqDollar[2].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 72:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:777
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[2].selectIntoUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 73:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:782
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[2].selectIntoUnion())
			mysqDollar[1].selStmtUnion().SetLock(mysqDollar[3].lockUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 74:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:788
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[3].selectIntoUnion())
			mysqDollar[1].selStmtUnion().SetLock(mysqDollar[2].lockUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 75:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:794
		{
			mysqDollar[1].selStmtUnion().SetInto(mysqDollar[2].selectIntoUnion())
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 76:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:801
		{
			mysqLOCAL = &ast.Stream{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), SelectExpr: mysqDollar[3].selectExprUnion(), Table: mysqDollar[5].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 77:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:807
		{
			mysqLOCAL = &ast.VStream{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), SelectExpr: mysqDollar[3].selectExprUnion(), Table: mysqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, mysqDollar[6].exprUnion()), Limit: mysqDollar[7].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 78:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:815
		{
			mysqLOCAL = ast.NewSelect(ast.Comments(mysqDollar[2].strs), mysqDollar[4].selectExprsUnion() /*SelectExprs*/, mysqDollar[3].strs /*options*/, mysqDollar[5].selectIntoUnion() /*into*/, mysqDollar[6].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, mysqDollar[7].exprUnion()), ast.GroupBy(mysqDollar[8].exprsUnion()), ast.NewWhere(ast.HavingClause, mysqDollar[9].exprUnion()))
		}
		mysqVAL.union = mysqLOCAL
	case 79:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.SelectStatement
//line mysql.y:819
		{
			mysqLOCAL = ast.NewSelect(ast.Comments(mysqDollar[2].strs), mysqDollar[4].selectExprsUnion() /*SelectExprs*/, mysqDollar[3].strs /*options*/, nil, mysqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, mysqDollar[6].exprUnion()), ast.GroupBy(mysqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, mysqDollar[8].exprUnion()))
		}
		mysqVAL.union = mysqLOCAL
	case 80:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:827
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := mysqDollar[6].insUnion()
			ins.Action = mysqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(mysqDollar[2].strs).Parsed()
			ins.Ignore = mysqDollar[3].ignoreUnion()
			ins.Table = mysqDollar[4].tableName
			ins.Partitions = mysqDollar[5].partitionsUnion()
			ins.OnDup = ast.OnDup(mysqDollar[7].updateExprsUnion())
			mysqLOCAL = ins
		}
		mysqVAL.union = mysqLOCAL
	case 81:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:839
		{
			cols := make(ast.Columns, 0, len(mysqDollar[7].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(mysqDollar[8].updateExprsUnion()))
			for _, updateList := range mysqDollar[7].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			mysqLOCAL = &ast.Insert{Action: mysqDollar[1].insertActionUnion(), Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Ignore: mysqDollar[3].ignoreUnion(), Table: mysqDollar[4].tableName, Partitions: mysqDollar[5].partitionsUnion(), Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(mysqDollar[8].updateExprsUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 82:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.InsertAction
//line mysql.y:851
		{
			mysqLOCAL = ast.InsertAct
		}
		mysqVAL.union = mysqLOCAL
	case 83:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.InsertAction
//line mysql.y:855
		{
			mysqLOCAL = ast.ReplaceAct
		}
		mysqVAL.union = mysqLOCAL
	case 84:
		mysqDollar = mysqS[mysqpt-10 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:861
		{
			mysqLOCAL = &ast.Update{With: mysqDollar[1].withUnion(), Comments: ast.Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), TableExprs: mysqDollar[5].tableExprsUnion(), Exprs: mysqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, mysqDollar[8].exprUnion()), OrderBy: mysqDollar[9].orderByUnion(), Limit: mysqDollar[10].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 85:
		mysqDollar = mysqS[mysqpt-11 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:867
		{
			mysqLOCAL = &ast.Delete{With: mysqDollar[1].withUnion(), Comments: ast.Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: mysqDollar[6].tableName, As: mysqDollar[7].tableIdent}}, Partitions: mysqDollar[8].partitionsUnion(), Where: ast.NewWhere(ast.WhereClause, mysqDollar[9].exprUnion()), OrderBy: mysqDollar[10].orderByUnion(), Limit: mysqDollar[11].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 86:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:871
		{
			mysqLOCAL = &ast.Delete{With: mysqDollar[1].withUnion(), Comments: ast.Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), Targets: mysqDollar[6].tableNamesUnion(), TableExprs: mysqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, mysqDollar[9].exprUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 87:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:875
		{
			mysqLOCAL = &ast.Delete{With: mysqDollar[1].withUnion(), Comments: ast.Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), Targets: mysqDollar[5].tableNamesUnion(), TableExprs: mysqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, mysqDollar[8].exprUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 88:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:879
		{
			mysqLOCAL = &ast.Delete{With: mysqDollar[1].withUnion(), Comments: ast.Comments(mysqDollar[3].strs).Parsed(), Ignore: mysqDollar[4].ignoreUnion(), Targets: mysqDollar[5].tableNamesUnion(), TableExprs: mysqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, mysqDollar[8].exprUnion())}
		}
		mysqVAL.union = mysqLOCAL
	case 89:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:884
		{
		}
	case 90:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:885
		{
		}
	case 91:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableNames
//line mysql.y:889
		{
			mysqLOCAL = ast.TableNames{mysqDollar[1].tableName.ToViewName()}
		}
		mysqVAL.union = mysqLOCAL
	case 92:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:893
		{
			mysqSLICE := (*ast.TableNames)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableName.ToViewName())
		}
	case 93:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableNames
//line mysql.y:899
		{
			mysqLOCAL = ast.TableNames{mysqDollar[1].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 94:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:903
		{
			mysqSLICE := (*ast.TableNames)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableName)
		}
	case 95:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableNames
//line mysql.y:909
		{
			mysqLOCAL = ast.TableNames{mysqDollar[1].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 96:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:913
		{
			mysqSLICE := (*ast.TableNames)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableName)
		}
	case 97:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Partitions
//line mysql.y:918
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 98:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Partitions
//line mysql.y:922
		{
			mysqLOCAL = mysqDollar[3].partitionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 99:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:928
		{
			mysqLOCAL = &ast.Set{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Exprs: mysqDollar[3].setExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 100:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:934
		{
			mysqLOCAL = &ast.SetTransaction{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Scope: mysqDollar[3].scopeUnion(), Characteristics: mysqDollar[5].characteristicsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 101:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:938
		{
			mysqLOCAL = &ast.SetTransaction{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Characteristics: mysqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		mysqVAL.union = mysqLOCAL
	case 102:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.Characteristic
//line mysql.y:944
		{
			mysqLOCAL = []ast.Characteristic{mysqDollar[1].characteristicUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 103:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:948
		{
			mysqSLICE := (*[]ast.Characteristic)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].characteristicUnion())
		}
	case 104:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Characteristic
//line mysql.y:954
		{
			mysqLOCAL = mysqDollar[3].isolationLevelUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 105:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Characteristic
//line mysql.y:958
		{
			mysqLOCAL = ast.ReadWrite
		}
		mysqVAL.union = mysqLOCAL
	case 106:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Characteristic
//line mysql.y:962
		{
			mysqLOCAL = ast.ReadOnly
		}
		mysqVAL.union = mysqLOCAL
	case 107:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:968
		{
			mysqLOCAL = ast.RepeatableRead
		}
		mysqVAL.union = mysqLOCAL
	case 108:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:972
		{
			mysqLOCAL = ast.ReadCommitted
		}
		mysqVAL.union = mysqLOCAL
	case 109:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:976
		{
			mysqLOCAL = ast.ReadUncommitted
		}
		mysqVAL.union = mysqLOCAL
	case 110:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IsolationLevel
//line mysql.y:980
		{
			mysqLOCAL = ast.Serializable
		}
		mysqVAL.union = mysqLOCAL
	case 111:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Scope
//line mysql.y:986
		{
			mysqLOCAL = ast.SessionScope
		}
		mysqVAL.union = mysqLOCAL
	case 112:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Scope
//line mysql.y:990
		{
			mysqLOCAL = ast.GlobalScope
		}
		mysqVAL.union = mysqLOCAL
	case 113:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:996
		{
			mysqDollar[1].createTableUnion().TableSpec = mysqDollar[2].tableSpecUnion()
			mysqDollar[1].createTableUnion().FullyParsed = true
			mysqLOCAL = mysqDollar[1].createTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 114:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1002
		{
			// Create table [name] like [name]
			mysqDollar[1].createTableUnion().OptLike = mysqDollar[2].optLikeUnion()
			mysqDollar[1].createTableUnion().FullyParsed = true
			mysqLOCAL = mysqDollar[1].createTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 115:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1009
		{
			indexDef := mysqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = mysqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, mysqDollar[5].indexOptionsUnion()...)
			mysqDollar[1].alterTableUnion().AlterOptions = append(mysqDollar[1].alterTableUnion().AlterOptions, mysqDollar[6].alterOptionsUnion()...)
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 116:
		mysqDollar = mysqS[mysqpt-12 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1018
		{
			mysqLOCAL = &ast.CreateView{ViewName: mysqDollar[8].tableName.ToViewName(), Comments: ast.Comments(mysqDollar[2].strs).Parsed(), IsReplace: mysqDollar[3].booleanUnion(), Algorithm: mysqDollar[4].str, Definer: mysqDollar[5].definerUnion(), Security: mysqDollar[6].str, Columns: mysqDollar[9].columnsUnion(), Select: mysqDollar[11].selStmtUnion(), CheckOption: mysqDollar[12].str}
		}
		mysqVAL.union = mysqLOCAL
	case 117:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:1022
		{
			mysqDollar[1].createDatabaseUnion().FullyParsed = true
			mysqDollar[1].createDatabaseUnion().CreateOptions = mysqDollar[2].databaseOptionsUnion()
			mysqLOCAL = mysqDollar[1].createDatabaseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 118:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1029
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 119:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1033
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 120:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:1038
		{
			mysqVAL.colIdent = ast.NewColIdent("")
		}
	case 121:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1042
		{
			mysqVAL.colIdent = mysqDollar[2].colIdent
		}
	case 122:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1048
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 123:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.VindexParam
//line mysql.y:1053
		{
			var v []ast.VindexParam
			mysqLOCAL = v
		}
		mysqVAL.union = mysqLOCAL
	case 124:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.VindexParam
//line mysql.y:1058
		{
			mysqLOCAL = mysqDollar[2].vindexParamsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 125:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.VindexParam
//line mysql.y:1064
		{
			mysqLOCAL = make([]ast.VindexParam, 0, 4)
			mysqLOCAL = append(mysqLOCAL, mysqDollar[1].vindexParam)
		}
		mysqVAL.union = mysqLOCAL
	case 126:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1069
		{
			mysqSLICE := (*[]ast.VindexParam)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].vindexParam)
		}
	case 127:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1075
		{
			mysqVAL.vindexParam = ast.VindexParam{Key: mysqDollar[1].colIdent, Val: mysqDollar[3].str}
		}
	case 128:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.JSONObjectParam
//line mysql.y:1080
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 129:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.JSONObjectParam
//line mysql.y:1084
		{
			mysqLOCAL = mysqDollar[1].jsonObjectParamsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 130:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.JSONObjectParam
//line mysql.y:1090
		{
			mysqLOCAL = []*ast.JSONObjectParam{mysqDollar[1].jsonObjectParam}
		}
		mysqVAL.union = mysqLOCAL
	case 131:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1094
		{
			mysqSLICE := (*[]*ast.JSONObjectParam)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].jsonObjectParam)
		}
	case 132:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1100
		{
			mysqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: mysqDollar[1].exprUnion(), Value: mysqDollar[3].exprUnion()}
		}
	case 133:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.CreateTable
//line mysql.y:1106
		{
			mysqLOCAL = &ast.CreateTable{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Table: mysqDollar[6].tableName, IfNotExists: mysqDollar[5].booleanUnion(), Temp: mysqDollar[3].booleanUnion()}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 134:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1113
		{
			mysqLOCAL = &ast.AlterTable{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Table: mysqDollar[4].tableName}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 135:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1120
		{
			mysqLOCAL = &ast.AlterTable{Table: mysqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: mysqDollar[4].colIdent, Type: string(mysqDollar[3].str)}, Options: mysqDollar[5].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 136:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1125
		{
			mysqLOCAL = &ast.AlterTable{Table: mysqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: mysqDollar[5].colIdent, Type: string(mysqDollar[3].str) + " " + string(mysqDollar[4].str), Fulltext: true}, Options: mysqDollar[6].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 137:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1130
		{
			mysqLOCAL = &ast.AlterTable{Table: mysqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: mysqDollar[5].colIdent, Type: string(mysqDollar[3].str) + " " + string(mysqDollar[4].str), Spatial: true}, Options: mysqDollar[6].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 138:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.AlterTable
//line mysql.y:1135
		{
			mysqLOCAL = &ast.AlterTable{Table: mysqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: mysqDollar[5].colIdent, Type: string(mysqDollar[3].str) + " " + string(mysqDollar[4].str), Unique: true}, Options: mysqDollar[6].indexOptionsUnion()}}}}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 139:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.CreateDatabase
//line mysql.y:1142
		{
			mysqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(mysqDollar[4].strs).Parsed(), DBName: mysqDollar[6].tableIdent, IfNotExists: mysqDollar[5].booleanUnion()}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 140:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.AlterDatabase
//line mysql.y:1149
		{
			mysqLOCAL = &ast.AlterDatabase{}
			setDDL(mysqlex, mysqLOCAL)
		}
		mysqVAL.union = mysqLOCAL
	case 143:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.TableSpec
//line mysql.y:1160
		{
			mysqLOCAL = mysqDollar[2].tableSpecUnion()
			mysqLOCAL.Options = mysqDollar[4].tableOptionsUnion()
			mysqLOCAL.PartitionOption = mysqDollar[5].partitionOptionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 144:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1167
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 145:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1171
		{
			mysqLOCAL = mysqDollar[1].databaseOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 146:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1177
		{
			mysqLOCAL = []ast.DatabaseOption{mysqDollar[1].databaseOption}
		}
		mysqVAL.union = mysqLOCAL
	case 147:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1181
		{
			mysqLOCAL = []ast.DatabaseOption{mysqDollar[1].databaseOption}
		}
		mysqVAL.union = mysqLOCAL
	case 148:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.DatabaseOption
//line mysql.y:1185
		{
			mysqLOCAL = []ast.DatabaseOption{mysqDollar[1].databaseOption}
		}
		mysqVAL.union = mysqLOCAL
	case 149:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1189
		{
			mysqSLICE := (*[]ast.DatabaseOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].databaseOption)
		}
	case 150:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1193
		{
			mysqSLICE := (*[]ast.DatabaseOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].databaseOption)
		}
	case 151:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1197
		{
			mysqSLICE := (*[]ast.DatabaseOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].databaseOption)
		}
	case 152:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1203
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 153:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:1207
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 154:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1213
		{
			mysqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (mysqDollar[4].colIdent.String()), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 155:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1217
		{
			mysqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(mysqDollar[4].str)), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 156:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1223
		{
			mysqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (mysqDollar[4].colIdent.String()), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 157:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1227
		{
			mysqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(mysqDollar[4].str)), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 158:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1233
		{
			mysqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (mysqDollar[4].colIdent.String()), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 159:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1237
		{
			mysqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(mysqDollar[4].str)), IsDefault: mysqDollar[1].booleanUnion()}
		}
	case 160:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.OptLike
//line mysql.y:1243
		{
			mysqLOCAL = &ast.OptLike{LikeTable: mysqDollar[2].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 161:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.OptLike
//line mysql.y:1247
		{
			mysqLOCAL = &ast.OptLike{LikeTable: mysqDollar[3].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 162:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.ColumnDefinition
//line mysql.y:1253
		{
			mysqLOCAL = []*ast.ColumnDefinition{mysqDollar[1].columnDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 163:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1257
		{
			mysqSLICE := (*[]*ast.ColumnDefinition)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].columnDefinitionUnion())
		}
	case 164:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.TableSpec
//line mysql.y:1263
		{
			mysqLOCAL = &ast.TableSpec{}
			mysqLOCAL.AddColumn(mysqDollar[1].columnDefinitionUnion())
		}
		mysqVAL.union = mysqLOCAL
	case 165:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.TableSpec
//line mysql.y:1268
		{
			mysqLOCAL = &ast.TableSpec{}
			mysqLOCAL.AddConstraint(mysqDollar[1].constraintDefinitionUnion())
		}
		mysqVAL.union = mysqLOCAL
	case 166:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1273
		{
			mysqVAL.tableSpecUnion().AddColumn(mysqDollar[3].columnDefinitionUnion())
		}
	case 167:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1277
		{
			mysqVAL.tableSpecUnion().AddColumn(mysqDollar[3].columnDefinitionUnion())
			mysqVAL.tableSpecUnion().AddConstraint(mysqDollar[4].constraintDefinitionUnion())
		}
	case 168:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1282
		{
			mysqVAL.tableSpecUnion().AddIndex(mysqDollar[3].indexDefinitionUnion())
		}
	case 169:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1286
		{
			mysqVAL.tableSpecUnion().AddConstraint(mysqDollar[3].constraintDefinitionUnion())
		}
	case 170:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1290
		{
			mysqVAL.tableSpecUnion().AddConstraint(mysqDollar[3].constraintDefinitionUnion())
		}
	case 171:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ColumnDefinition
//line mysql.y:1301
		{
			mysqDollar[2].columnType.Options = mysqDollar[4].columnTypeOptionsUnion()
			if mysqDollar[2].columnType.Options.Collate == "" {
				mysqDollar[2].columnType.Options.Collate = mysqDollar[3].str
			}
			mysqDollar[2].columnType.Options.Reference = mysqDollar[5].referenceDefinitionUnion()
			mysqLOCAL = &ast.ColumnDefinition{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType}
		}
		mysqVAL.union = mysqLOCAL
	case 172:
		mysqDollar = mysqS[mysqpt-10 : mysqpt+1]
		var mysqLOCAL *ast.ColumnDefinition
//line mysql.y:1310
		{
			mysqDollar[2].columnType.Options = mysqDollar[9].columnTypeOptionsUnion()
			mysqDollar[2].columnType.Options.As = mysqDollar[7].exprUnion()
			mysqDollar[2].columnType.Options.Reference = mysqDollar[10].referenceDefinitionUnion()
			mysqDollar[2].columnType.Options.Collate = mysqDollar[3].str
			mysqLOCAL = &ast.ColumnDefinition{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType}
		}
		mysqVAL.union = mysqLOCAL
	case 173:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:1319
		{
			mysqVAL.str = ""
		}
	case 174:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1323
		{
			mysqVAL.str = ""
		}
	case 175:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1332
		{
			mysqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		mysqVAL.union = mysqLOCAL
	case 176:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1336
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 177:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1342
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 178:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1348
		{
			mysqDollar[1].columnTypeOptionsUnion().Default = mysqDollar[4].exprUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 179:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1353
		{
			mysqDollar[1].columnTypeOptionsUnion().Default = mysqDollar[3].exprUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 180:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1358
		{
			mysqDollar[1].columnTypeOptionsUnion().OnUpdate = mysqDollar[4].exprUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 181:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1363
		{
			mysqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 182:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1368
		{
			mysqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(mysqDollar[3].str)
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 183:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1373
		{
			mysqDollar[1].columnTypeOptionsUnion().KeyOpt = mysqDollar[2].colKeyOptUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 184:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1378
		{
			mysqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(mysqDollar[3].str)
		}
	case 185:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1382
		{
			mysqDollar[1].columnTypeOptionsUnion().Collate = string(mysqDollar[3].colIdent.String())
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 186:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1387
		{
			mysqDollar[1].columnTypeOptionsUnion().Format = mysqDollar[3].columnFormatUnion()
		}
	case 187:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1391
		{
			mysqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(mysqDollar[3].str)
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 188:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1396
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 189:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1402
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 190:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1408
		{
			mysqDollar[1].columnTypeOptionsUnion().EngineAttribute = ast.NewStrLiteral(mysqDollar[4].str)
		}
	case 191:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:1412
		{
			mysqDollar[1].columnTypeOptionsUnion().SecondaryEngineAttribute = ast.NewStrLiteral(mysqDollar[4].str)
		}
	case 192:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnFormat
//line mysql.y:1418
		{
			mysqLOCAL = ast.FixedFormat
		}
		mysqVAL.union = mysqLOCAL
	case 193:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnFormat
//line mysql.y:1422
		{
			mysqLOCAL = ast.DynamicFormat
		}
		mysqVAL.union = mysqLOCAL
	case 194:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnFormat
//line mysql.y:1426
		{
			mysqLOCAL = ast.DefaultFormat
		}
		mysqVAL.union = mysqLOCAL
	case 195:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnStorage
//line mysql.y:1432
		{
			mysqLOCAL = ast.VirtualStorage
		}
		mysqVAL.union = mysqLOCAL
	case 196:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnStorage
//line mysql.y:1436
		{
			mysqLOCAL = ast.StoredStorage
		}
		mysqVAL.union = mysqLOCAL
	case 197:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1441
		{
			mysqLOCAL = &ast.ColumnTypeOptions{}
		}
		mysqVAL.union = mysqLOCAL
	case 198:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1445
		{
			mysqDollar[1].columnTypeOptionsUnion().Storage = mysqDollar[2].columnStorageUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 199:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1450
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 200:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1456
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Null = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 201:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1462
		{
			mysqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(mysqDollar[3].str)
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 202:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1467
		{
			mysqDollar[1].columnTypeOptionsUnion().KeyOpt = mysqDollar[2].colKeyOptUnion()
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 203:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1472
		{
			val := false
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 204:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColumnTypeOptions
//line mysql.y:1478
		{
			val := true
			mysqDollar[1].columnTypeOptionsUnion().Invisible = &val
			mysqLOCAL = mysqDollar[1].columnTypeOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 205:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1486
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 207:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1493
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 208:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1497
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 209:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1501
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 210:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1505
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 211:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1509
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 214:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1520
		{
			mysqLOCAL = &ast.NullVal{}
		}
		mysqVAL.union = mysqLOCAL
	case 216:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1527
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 217:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1531
		{
			mysqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 218:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1537
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 219:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1541
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 220:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1545
		{
			mysqLOCAL = mysqDollar[1].boolValUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 221:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1549
		{
			mysqLOCAL = ast.NewHexLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 222:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1553
		{
			mysqLOCAL = ast.NewHexNumLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 223:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1557
		{
			mysqLOCAL = ast.NewBitLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 224:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1561
		{
			mysqLOCAL = ast.NewArgument(mysqDollar[1].str[1:])
			bindVariable(mysqlex, mysqDollar[1].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 225:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1566
		{
			mysqLOCAL = &ast.IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: ast.NewBitLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 226:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1570
		{
			mysqLOCAL = &ast.IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: ast.NewHexNumLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 227:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1574
		{
			mysqLOCAL = &ast.IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: ast.NewHexLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 228:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1578
		{
			mysqLOCAL = &ast.IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: mysqDollar[2].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 229:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1582
		{
			bindVariable(mysqlex, mysqDollar[2].str[1:])
			mysqLOCAL = &ast.IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: ast.NewArgument(mysqDollar[2].str[1:])}
		}
		mysqVAL.union = mysqLOCAL
	case 230:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1589
		{
			mysqVAL.str = ast.Armscii8Str
		}
	case 231:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1593
		{
			mysqVAL.str = ast.ASCIIStr
		}
	case 232:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1597
		{
			mysqVAL.str = ast.Big5Str
		}
	case 233:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1601
		{
			mysqVAL.str = ast.UBinaryStr
		}
	case 234:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1605
		{
			mysqVAL.str = ast.Cp1250Str
		}
	case 235:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1609
		{
			mysqVAL.str = ast.Cp1251Str
		}
	case 236:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1613
		{
			mysqVAL.str = ast.Cp1256Str
		}
	case 237:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1617
		{
			mysqVAL.str = ast.Cp1257Str
		}
	case 238:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1621
		{
			mysqVAL.str = ast.Cp850Str
		}
	case 239:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1625
		{
			mysqVAL.str = ast.Cp852Str
		}
	case 240:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1629
		{
			mysqVAL.str = ast.Cp866Str
		}
	case 241:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1633
		{
			mysqVAL.str = ast.Cp932Str
		}
	case 242:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1637
		{
			mysqVAL.str = ast.Dec8Str
		}
	case 243:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1641
		{
			mysqVAL.str = ast.EucjpmsStr
		}
	case 244:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1645
		{
			mysqVAL.str = ast.EuckrStr
		}
	case 245:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1649
		{
			mysqVAL.str = ast.Gb18030Str
		}
	case 246:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1653
		{
			mysqVAL.str = ast.Gb2312Str
		}
	case 247:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1657
		{
			mysqVAL.str = ast.GbkStr
		}
	case 248:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1661
		{
			mysqVAL.str = ast.Geostd8Str
		}
	case 249:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1665
		{
			mysqVAL.str = ast.GreekStr
		}
	case 250:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1669
		{
			mysqVAL.str = ast.HebrewStr
		}
	case 251:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1673
		{
			mysqVAL.str = ast.Hp8Str
		}
	case 252:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1677
		{
			mysqVAL.str = ast.Keybcs2Str
		}
	case 253:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1681
		{
			mysqVAL.str = ast.Koi8rStr
		}
	case 254:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1685
		{
			mysqVAL.str = ast.Koi8uStr
		}
	case 255:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1689
		{
			mysqVAL.str = ast.Latin1Str
		}
	case 256:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1693
		{
			mysqVAL.str = ast.Latin2Str
		}
	case 257:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1697
		{
			mysqVAL.str = ast.Latin5Str
		}
	case 258:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1701
		{
			mysqVAL.str = ast.Latin7Str
		}
	case 259:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1705
		{
			mysqVAL.str = ast.MacceStr
		}
	case 260:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1709
		{
			mysqVAL.str = ast.MacromanStr
		}
	case 261:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1713
		{
			mysqVAL.str = ast.SjisStr
		}
	case 262:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1717
		{
			mysqVAL.str = ast.Swe7Str
		}
	case 263:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1721
		{
			mysqVAL.str = ast.Tis620Str
		}
	case 264:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1725
		{
			mysqVAL.str = ast.Ucs2Str
		}
	case 265:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1729
		{
			mysqVAL.str = ast.UjisStr
		}
	case 266:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1733
		{
			mysqVAL.str = ast.Utf16Str
		}
	case 267:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1737
		{
			mysqVAL.str = ast.Utf16leStr
		}
	case 268:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1741
		{
			mysqVAL.str = ast.Utf32Str
		}
	case 269:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1745
		{
			mysqVAL.str = ast.Utf8Str
		}
	case 270:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1749
		{
			mysqVAL.str = ast.Utf8mb4Str
		}
	case 271:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1753
		{
			mysqVAL.str = ast.Utf8Str
		}
	case 274:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1763
		{
			mysqLOCAL = ast.NewIntLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 275:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1767
		{
			mysqLOCAL = ast.NewFloatLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 276:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1771
		{
			mysqLOCAL = ast.NewDecimalLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 277:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1777
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 278:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1781
		{
			mysqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 279:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1785
		{
			mysqLOCAL = &ast.IntroducerExpr{CharacterSet: mysqDollar[1].str, Expr: ast.NewStrLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 280:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1791
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 281:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:1795
		{
			mysqLOCAL = ast.NewArgument(mysqDollar[1].str[1:])
			bindVariable(mysqlex, mysqDollar[1].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 282:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1802
		{
			mysqLOCAL = ast.ColKeyPrimary
		}
		mysqVAL.union = mysqLOCAL
	case 283:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1806
		{
			mysqLOCAL = ast.ColKeyUnique
		}
		mysqVAL.union = mysqLOCAL
	case 284:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1810
		{
			mysqLOCAL = ast.ColKeyUniqueKey
		}
		mysqVAL.union = mysqLOCAL
	case 285:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColumnKeyOption
//line mysql.y:1814
		{
			mysqLOCAL = ast.ColKey
		}
		mysqVAL.union = mysqLOCAL
	case 286:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1820
		{
			mysqVAL.columnType = mysqDollar[1].columnType
			mysqVAL.columnType.Unsigned = mysqDollar[2].booleanUnion()
			mysqVAL.columnType.Zerofill = mysqDollar[3].booleanUnion()
		}
	case 290:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1831
		{
			mysqVAL.columnType = mysqDollar[1].columnType
			mysqVAL.columnType.Length = mysqDollar[2].literalUnion()
		}
	case 291:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1836
		{
			mysqVAL.columnType = mysqDollar[1].columnType
		}
	case 292:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1842
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 293:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1846
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 294:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1850
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 295:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1854
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 296:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1858
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 297:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1862
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 298:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1866
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 299:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1870
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 300:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1874
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 301:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1880
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 302:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1886
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 303:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1892
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 304:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1898
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 305:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1904
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
			mysqVAL.columnType.Length = mysqDollar[2].LengthScaleOption.Length
			mysqVAL.columnType.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
	case 306:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1912
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 307:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1916
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 308:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1920
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 309:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1924
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 310:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1928
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 311:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1934
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion(), Charset: mysqDollar[3].columnCharset}
		}
	case 312:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1938
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html
			mysqVAL.columnType = ast.ColumnType{Type: "binary", Length: mysqDollar[2].literalUnion()}
		}
	case 313:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:1944
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion(), Charset: mysqDollar[3].columnCharset}
		}
	case 314:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1948
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 315:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1952
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
	case 316:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1956
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 317:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1960
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 318:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1964
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 319:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:1968
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), Charset: mysqDollar[2].columnCharset}
		}
	case 320:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1972
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 321:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1976
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 322:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1980
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 323:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1984
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 324:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:1988
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 325:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:1992
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), EnumValues: mysqDollar[3].strs, Charset: mysqDollar[5].columnCharset}
		}
	case 326:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:1997
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str), EnumValues: mysqDollar[3].strs, Charset: mysqDollar[5].columnCharset}
		}
	case 327:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2003
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 328:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2007
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 329:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2011
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 330:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2015
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 331:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2019
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 332:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2023
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 333:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2027
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 334:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2031
		{
			mysqVAL.columnType = ast.ColumnType{Type: string(mysqDollar[1].str)}
		}
	case 335:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2037
		{
			mysqVAL.strs = make([]string, 0, 4)
			mysqVAL.strs = append(mysqVAL.strs, sql_types.EncodeStringSQL(mysqDollar[1].str))
		}
	case 336:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2042
		{
			mysqVAL.strs = append(mysqDollar[1].strs, sql_types.EncodeStringSQL(mysqDollar[3].str))
		}
	case 337:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2047
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 338:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:2051
		{
			mysqLOCAL = ast.NewIntLiteral(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 339:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2056
		{
			mysqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 340:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2060
		{
			mysqVAL.LengthScaleOption = ast.LengthScaleOption{
				Length: ast.NewIntLiteral(mysqDollar[2].str),
				Scale:  ast.NewIntLiteral(mysqDollar[4].str),
			}
		}
	case 341:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2068
		{
			mysqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 342:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2072
		{
			mysqVAL.LengthScaleOption = ast.LengthScaleOption{
				Length: ast.NewIntLiteral(mysqDollar[2].str),
			}
		}
	case 343:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2078
		{
			mysqVAL.LengthScaleOption = ast.LengthScaleOption{
				Length: ast.NewIntLiteral(mysqDollar[2].str),
				Scale:  ast.NewIntLiteral(mysqDollar[4].str),
			}
		}
	case 344:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2086
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 345:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2090
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 346:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2094
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 347:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2099
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 348:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2103
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 349:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2108
		{
			mysqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 350:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2112
		{
			mysqVAL.columnCharset = ast.ColumnCharset{Name: string(mysqDollar[2].colIdent.String()), Binary: mysqDollar[3].booleanUnion()}
		}
	case 351:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2116
		{
			mysqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(mysqDollar[2].str), Binary: mysqDollar[3].booleanUnion()}
		}
	case 352:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2120
		{
			mysqVAL.columnCharset = ast.ColumnCharset{Name: string(mysqDollar[2].str)}
		}
	case 353:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2124
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			mysqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: mysqDollar[2].booleanUnion()}
		}
	case 354:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2129
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			mysqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: mysqDollar[2].booleanUnion()}
		}
	case 355:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2134
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			mysqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 356:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2139
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			mysqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 357:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2144
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			mysqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 358:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2150
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 359:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2154
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 360:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2159
		{
			mysqVAL.str = ""
		}
	case 361:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2163
		{
			mysqVAL.str = string(mysqDollar[2].colIdent.String())
		}
	case 362:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2167
		{
			mysqVAL.str = sql_types.EncodeStringSQL(mysqDollar[2].str)
		}
	case 363:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.IndexDefinition
//line mysql.y:2174
		{
			mysqLOCAL = &ast.IndexDefinition{Info: mysqDollar[1].indexInfoUnion(), Columns: mysqDollar[3].indexColumnsUnion(), Options: mysqDollar[5].indexOptionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 364:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:2179
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 365:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:2183
		{
			mysqLOCAL = mysqDollar[1].indexOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 366:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:2189
		{
			mysqLOCAL = []*ast.IndexOption{mysqDollar[1].indexOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 367:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2193
		{
			mysqSLICE := (*[]*ast.IndexOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].indexOptionUnion())
		}
	case 368:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2199
		{
			mysqLOCAL = mysqDollar[1].indexOptionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 369:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2203
		{
			// should not be string
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 370:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2208
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 371:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2212
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 372:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2216
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 373:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2220
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str) + " " + string(mysqDollar[2].str), String: mysqDollar[3].colIdent.String()}
		}
		mysqVAL.union = mysqLOCAL
	case 374:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2224
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 375:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:2228
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 376:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2234
		{
			mysqVAL.str = ""
		}
	case 377:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2238
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 378:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2244
		{
			mysqLOCAL = &ast.IndexInfo{Type: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str), ConstraintName: ast.NewColIdent(mysqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		mysqVAL.union = mysqLOCAL
	case 379:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2248
		{
			mysqLOCAL = &ast.IndexInfo{Type: string(mysqDollar[1].str) + " " + string(mysqDollar[2].str), Name: ast.NewColIdent(mysqDollar[3].str), Spatial: true, Unique: false}
		}
		mysqVAL.union = mysqLOCAL
	case 380:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2252
		{
			mysqLOCAL = &ast.IndexInfo{Type: string(mysqDollar[1].str) + " " + string(mysqDollar[2].str), Name: ast.NewColIdent(mysqDollar[3].str), Fulltext: true, Unique: false}
		}
		mysqVAL.union = mysqLOCAL
	case 381:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2256
		{
			mysqLOCAL = &ast.IndexInfo{Type: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str), ConstraintName: ast.NewColIdent(mysqDollar[1].str), Name: ast.NewColIdent(mysqDollar[4].str), Unique: true}
		}
		mysqVAL.union = mysqLOCAL
	case 382:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.IndexInfo
//line mysql.y:2260
		{
			mysqLOCAL = &ast.IndexInfo{Type: string(mysqDollar[1].str), Name: ast.NewColIdent(mysqDollar[2].str), Unique: false}
		}
		mysqVAL.union = mysqLOCAL
	case 383:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2265
		{
			mysqVAL.str = ""
		}
	case 384:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2269
		{
			mysqVAL.str = mysqDollar[2].str
		}
	case 385:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2275
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 386:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2279
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 387:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2283
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 388:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2290
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 389:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2294
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 390:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2299
		{
			mysqVAL.str = "key"
		}
	case 391:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2303
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 392:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2309
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 393:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2313
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 394:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2318
		{
			mysqVAL.str = ""
		}
	case 395:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2322
		{
			mysqVAL.str = string(mysqDollar[1].colIdent.String())
		}
	case 396:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexColumn
//line mysql.y:2328
		{
			mysqLOCAL = []*ast.IndexColumn{mysqDollar[1].indexColumnUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 397:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2332
		{
			mysqSLICE := (*[]*ast.IndexColumn)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].indexColumnUnion())
		}
	case 398:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.IndexColumn
//line mysql.y:2338
		{
			mysqLOCAL = &ast.IndexColumn{Column: mysqDollar[1].colIdent, Length: mysqDollar[2].literalUnion(), Direction: mysqDollar[3].orderDirectionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 399:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.IndexColumn
//line mysql.y:2342
		{
			mysqLOCAL = &ast.IndexColumn{Expression: mysqDollar[2].exprUnion(), Direction: mysqDollar[4].orderDirectionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 400:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2348
		{
			mysqLOCAL = &ast.ConstraintDefinition{Name: mysqDollar[2].colIdent, Details: mysqDollar[3].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 401:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2352
		{
			mysqLOCAL = &ast.ConstraintDefinition{Details: mysqDollar[1].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 402:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2358
		{
			mysqLOCAL = &ast.ConstraintDefinition{Name: mysqDollar[2].colIdent, Details: mysqDollar[3].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 403:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConstraintDefinition
//line mysql.y:2362
		{
			mysqLOCAL = &ast.ConstraintDefinition{Details: mysqDollar[1].constraintInfoUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 404:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.ConstraintInfo
//line mysql.y:2368
		{
			mysqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(mysqDollar[3].str), Source: mysqDollar[5].columnsUnion(), ReferenceDefinition: mysqDollar[7].referenceDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 405:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2374
		{
			mysqLOCAL = &ast.ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 406:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2378
		{
			mysqLOCAL = &ast.ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnDelete: mysqDollar[7].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 407:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2382
		{
			mysqLOCAL = &ast.ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnUpdate: mysqDollar[7].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 408:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2386
		{
			mysqLOCAL = &ast.ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnDelete: mysqDollar[7].referenceActionUnion(), OnUpdate: mysqDollar[8].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 409:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2390
		{
			mysqLOCAL = &ast.ReferenceDefinition{ReferencedTable: mysqDollar[2].tableName, ReferencedColumns: mysqDollar[4].columnsUnion(), Match: mysqDollar[6].matchActionUnion(), OnUpdate: mysqDollar[7].referenceActionUnion(), OnDelete: mysqDollar[8].referenceActionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 410:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2395
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 411:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ReferenceDefinition
//line mysql.y:2399
		{
			mysqLOCAL = mysqDollar[1].referenceDefinitionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 412:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.ConstraintInfo
//line mysql.y:2405
		{
			mysqLOCAL = &ast.CheckConstraintDefinition{Expr: mysqDollar[3].exprUnion(), Enforced: mysqDollar[5].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 413:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2411
		{
			mysqLOCAL = mysqDollar[2].matchActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 414:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2417
		{
			mysqLOCAL = ast.Full
		}
		mysqVAL.union = mysqLOCAL
	case 415:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2421
		{
			mysqLOCAL = ast.Partial
		}
		mysqVAL.union = mysqLOCAL
	case 416:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2425
		{
			mysqLOCAL = ast.Simple
		}
		mysqVAL.union = mysqLOCAL
	case 417:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2430
		{
			mysqLOCAL = ast.DefaultMatch
		}
		mysqVAL.union = mysqLOCAL
	case 418:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.MatchAction
//line mysql.y:2434
		{
			mysqLOCAL = mysqDollar[1].matchActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 419:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2440
		{
			mysqLOCAL = mysqDollar[3].referenceActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 420:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2446
		{
			mysqLOCAL = mysqDollar[3].referenceActionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 421:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2452
		{
			mysqLOCAL = ast.Restrict
		}
		mysqVAL.union = mysqLOCAL
	case 422:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2456
		{
			mysqLOCAL = ast.Cascade
		}
		mysqVAL.union = mysqLOCAL
	case 423:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2460
		{
			mysqLOCAL = ast.NoAction
		}
		mysqVAL.union = mysqLOCAL
	case 424:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2464
		{
			mysqLOCAL = ast.SetDefault
		}
		mysqVAL.union = mysqLOCAL
	case 425:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ReferenceAction
//line mysql.y:2468
		{
			mysqLOCAL = ast.SetNull
		}
		mysqVAL.union = mysqLOCAL
	case 426:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2473
		{
			mysqVAL.str = ""
		}
	case 427:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2477
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 428:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2481
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 429:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2487
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 430:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2491
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 431:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2496
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 432:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2500
		{
			mysqLOCAL = mysqDollar[1].booleanUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 433:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2505
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 434:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2509
		{
			mysqLOCAL = mysqDollar[1].tableOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 435:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2515
		{
			mysqLOCAL = ast.TableOptions{mysqDollar[1].tableOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 436:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2519
		{
			mysqSLICE := (*ast.TableOptions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableOptionUnion())
		}
	case 437:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2523
		{
			mysqSLICE := (*ast.TableOptions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].tableOptionUnion())
		}
	case 438:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableOptions
//line mysql.y:2529
		{
			mysqLOCAL = ast.TableOptions{mysqDollar[1].tableOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 439:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2533
		{
			mysqSLICE := (*ast.TableOptions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].tableOptionUnion())
		}
	case 440:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2539
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 441:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2543
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 442:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2547
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 443:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2551
		{
			mysqLOCAL = &ast.TableOption{Name: (string(mysqDollar[2].str)), String: mysqDollar[4].str, CaseSensitive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 444:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2555
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[2].str), String: mysqDollar[4].str, CaseSensitive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 445:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2559
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 446:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2563
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 447:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2567
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 448:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2571
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 449:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2575
		{
			mysqLOCAL = &ast.TableOption{Name: (string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)), Value: ast.NewStrLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 450:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2579
		{
			mysqLOCAL = &ast.TableOption{Name: (string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)), Value: ast.NewStrLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 451:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2583
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 452:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2587
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 453:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2591
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: mysqDollar[3].tableIdent.String(), CaseSensitive: true}
		}
		mysqVAL.union = mysqLOCAL
	case 454:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2595
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 455:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2599
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 456:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2603
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 457:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2607
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 458:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2611
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 459:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2615
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 460:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2619
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 461:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2623
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 462:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2627
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 463:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2631
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewStrLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 464:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2635
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 465:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2639
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 466:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2643
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 467:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2647
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 468:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2651
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Value: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 469:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2655
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), String: (mysqDollar[3].colIdent.String() + mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 470:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.TableOption
//line mysql.y:2659
		{
			mysqLOCAL = &ast.TableOption{Name: string(mysqDollar[1].str), Tables: mysqDollar[4].tableNamesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 471:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2664
		{
			mysqVAL.str = ""
		}
	case 472:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2668
		{
			mysqVAL.str = " " + string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 473:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:2672
		{
			mysqVAL.str = " " + string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 483:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2691
		{
			mysqVAL.str = mysqDollar[1].colIdent.String()
		}
	case 484:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2695
		{
			mysqVAL.str = sql_types.EncodeStringSQL(mysqDollar[1].str)
		}
	case 485:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:2699
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 486:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:2704
		{
			mysqVAL.str = ""
		}
	case 488:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2710
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 489:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:2714
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 490:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:2719
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 491:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:2723
		{
			mysqLOCAL = mysqDollar[2].colNameUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 492:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2728
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 493:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2732
		{
			mysqLOCAL = mysqDollar[1].alterOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 494:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:2736
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, &ast.OrderByOption{Cols: mysqDollar[5].columnsUnion()})
		}
	case 495:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2740
		{
			mysqLOCAL = mysqDollar[1].alterOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 496:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2744
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionsUnion()...)
		}
	case 497:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2748
		{
			mysqLOCAL = append(append(mysqDollar[1].alterOptionsUnion(), mysqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: mysqDollar[7].columnsUnion()})
		}
		mysqVAL.union = mysqLOCAL
	case 498:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2754
		{
			mysqLOCAL = []ast.AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 499:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2758
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionUnion())
		}
	case 500:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2762
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionUnion())
		}
	case 501:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2768
		{
			mysqLOCAL = mysqDollar[1].tableOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 502:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2772
		{
			mysqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: mysqDollar[2].constraintDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 503:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2776
		{
			mysqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: mysqDollar[2].constraintDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 504:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2780
		{
			mysqLOCAL = &ast.AddIndexDefinition{IndexDefinition: mysqDollar[2].indexDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 505:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2784
		{
			mysqLOCAL = &ast.AddColumns{Columns: mysqDollar[4].columnDefinitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 506:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2788
		{
			mysqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{mysqDollar[3].columnDefinitionUnion()}, First: mysqDollar[4].booleanUnion(), After: mysqDollar[5].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 507:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2792
		{
			mysqLOCAL = &ast.AlterColumn{Column: mysqDollar[3].colNameUnion(), DropDefault: true}
		}
		mysqVAL.union = mysqLOCAL
	case 508:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2796
		{
			mysqLOCAL = &ast.AlterColumn{Column: mysqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 509:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2800
		{
			mysqLOCAL = &ast.AlterColumn{Column: mysqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 510:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2804
		{
			val := false
			mysqLOCAL = &ast.AlterColumn{Column: mysqDollar[3].colNameUnion(), Invisible: &val}
		}
		mysqVAL.union = mysqLOCAL
	case 511:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2809
		{
			val := true
			mysqLOCAL = &ast.AlterColumn{Column: mysqDollar[3].colNameUnion(), Invisible: &val}
		}
		mysqVAL.union = mysqLOCAL
	case 512:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2814
		{
			mysqLOCAL = &ast.AlterCheck{Name: mysqDollar[3].colIdent, Enforced: mysqDollar[4].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 513:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2818
		{
			mysqLOCAL = &ast.AlterIndex{Name: mysqDollar[3].colIdent, Invisible: false}
		}
		mysqVAL.union = mysqLOCAL
	case 514:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2822
		{
			mysqLOCAL = &ast.AlterIndex{Name: mysqDollar[3].colIdent, Invisible: true}
		}
		mysqVAL.union = mysqLOCAL
	case 515:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2826
		{
			mysqLOCAL = &ast.ChangeColumn{OldColumn: mysqDollar[3].colNameUnion(), NewColDefinition: mysqDollar[4].columnDefinitionUnion(), First: mysqDollar[5].booleanUnion(), After: mysqDollar[6].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 516:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2830
		{
			mysqLOCAL = &ast.ModifyColumn{NewColDefinition: mysqDollar[3].columnDefinitionUnion(), First: mysqDollar[4].booleanUnion(), After: mysqDollar[5].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 517:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2834
		{
			mysqLOCAL = &ast.AlterCharset{CharacterSet: mysqDollar[4].str, Collate: mysqDollar[5].str}
		}
		mysqVAL.union = mysqLOCAL
	case 518:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2838
		{
			mysqLOCAL = &ast.KeyState{Enable: false}
		}
		mysqVAL.union = mysqLOCAL
	case 519:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2842
		{
			mysqLOCAL = &ast.KeyState{Enable: true}
		}
		mysqVAL.union = mysqLOCAL
	case 520:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2846
		{
			mysqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		mysqVAL.union = mysqLOCAL
	case 521:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2850
		{
			mysqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		mysqVAL.union = mysqLOCAL
	case 522:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2854
		{
			mysqLOCAL = &ast.DropColumn{Name: mysqDollar[3].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 523:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2858
		{
			mysqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 524:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2862
		{
			mysqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		mysqVAL.union = mysqLOCAL
	case 525:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2866
		{
			mysqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: mysqDollar[4].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 526:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2870
		{
			mysqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 527:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2874
		{
			mysqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 528:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2878
		{
			mysqLOCAL = &ast.Force{}
		}
		mysqVAL.union = mysqLOCAL
	case 529:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2882
		{
			mysqLOCAL = &ast.RenameTableName{Table: mysqDollar[3].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 530:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2886
		{
			mysqLOCAL = &ast.RenameIndex{OldName: mysqDollar[3].colIdent, NewName: mysqDollar[5].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 531:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:2892
		{
			mysqLOCAL = []ast.AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 532:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:2896
		{
			mysqSLICE := (*[]ast.AlterOption)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].alterOptionUnion())
		}
	case 533:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2902
		{
			mysqLOCAL = ast.AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 534:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2906
		{
			mysqLOCAL = ast.AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 535:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2910
		{
			mysqLOCAL = ast.AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 536:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2914
		{
			mysqLOCAL = ast.AlgorithmValue(string(mysqDollar[3].str))
		}
		mysqVAL.union = mysqLOCAL
	case 537:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2918
		{
			mysqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		mysqVAL.union = mysqLOCAL
	case 538:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2922
		{
			mysqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		mysqVAL.union = mysqLOCAL
	case 539:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2926
		{
			mysqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		mysqVAL.union = mysqLOCAL
	case 540:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2930
		{
			mysqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		mysqVAL.union = mysqLOCAL
	case 541:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2934
		{
			mysqLOCAL = &ast.Validation{With: true}
		}
		mysqVAL.union = mysqLOCAL
	case 542:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:2938
		{
			mysqLOCAL = &ast.Validation{With: false}
		}
		mysqVAL.union = mysqLOCAL
	case 543:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2944
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().AlterOptions = mysqDollar[2].alterOptionsUnion()
			mysqDollar[1].alterTableUnion().PartitionOption = mysqDollar[3].partitionOptionUnion()
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 544:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2951
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().AlterOptions = mysqDollar[2].alterOptionsUnion()
			mysqDollar[1].alterTableUnion().PartitionSpec = &ast.PartitionSpec{Action: ast.RemoveAction}
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 545:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2958
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().AlterOptions = mysqDollar[2].alterOptionsUnion()
			mysqDollar[1].alterTableUnion().PartitionSpec = mysqDollar[4].partSpecUnion()
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 546:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2965
		{
			mysqDollar[1].alterTableUnion().FullyParsed = true
			mysqDollar[1].alterTableUnion().PartitionSpec = mysqDollar[2].partSpecUnion()
			mysqLOCAL = mysqDollar[1].alterTableUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 547:
		mysqDollar = mysqS[mysqpt-11 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2971
		{
			mysqLOCAL = &ast.AlterView{ViewName: mysqDollar[7].tableName.ToViewName(), Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Algorithm: mysqDollar[3].str, Definer: mysqDollar[4].definerUnion(), Security: mysqDollar[5].str, Columns: mysqDollar[8].columnsUnion(), Select: mysqDollar[10].selStmtUnion(), CheckOption: mysqDollar[11].str}
		}
		mysqVAL.union = mysqLOCAL
	case 548:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2981
		{
			mysqDollar[1].alterDatabaseUnion().FullyParsed = true
			mysqDollar[1].alterDatabaseUnion().DBName = mysqDollar[2].tableIdent
			mysqDollar[1].alterDatabaseUnion().AlterOptions = mysqDollar[3].databaseOptionsUnion()
			mysqLOCAL = mysqDollar[1].alterDatabaseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 549:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2988
		{
			mysqDollar[1].alterDatabaseUnion().FullyParsed = true
			mysqDollar[1].alterDatabaseUnion().DBName = mysqDollar[2].tableIdent
			mysqDollar[1].alterDatabaseUnion().UpdateDataDirectory = true
			mysqLOCAL = mysqDollar[1].alterDatabaseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 550:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:2995
		{
			mysqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  mysqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(mysqDollar[6].tableName.Name.String()),
					Type:   mysqDollar[7].colIdent,
					Params: mysqDollar[8].vindexParamsUnion(),
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 551:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3007
		{
			mysqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  mysqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(mysqDollar[6].tableName.Name.String()),
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 552:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3017
		{
			mysqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: mysqDollar[6].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 553:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3021
		{
			mysqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: mysqDollar[6].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 554:
		mysqDollar = mysqS[mysqpt-13 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3025
		{
			mysqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  mysqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   mysqDollar[8].colIdent,
					Type:   mysqDollar[12].colIdent,
					Params: mysqDollar[13].vindexParamsUnion(),
				},
				VindexCols: mysqDollar[10].columnsUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 555:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3038
		{
			mysqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  mysqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: mysqDollar[8].colIdent,
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 556:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3048
		{
			mysqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: mysqDollar[6].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 557:
		mysqDollar = mysqS[mysqpt-10 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3052
		{
			mysqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  mysqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   mysqDollar[8].colIdent,
					Sequence: mysqDollar[10].tableName,
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 558:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3064
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 559:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3068
		{
			mysqDollar[3].partitionOptionUnion().Partitions = mysqDollar[4].integerUnion()
			mysqDollar[3].partitionOptionUnion().SubPartition = mysqDollar[5].subPartitionUnion()
			mysqDollar[3].partitionOptionUnion().Definitions = mysqDollar[6].partDefsUnion()
			mysqLOCAL = mysqDollar[3].partitionOptionUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 560:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3077
		{
			mysqLOCAL = &ast.PartitionOption{
				IsLinear: mysqDollar[1].booleanUnion(),
				Type:     ast.HashType,
				Expr:     mysqDollar[4].exprUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 561:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3085
		{
			mysqLOCAL = &ast.PartitionOption{
				IsLinear:     mysqDollar[1].booleanUnion(),
				Type:         ast.KeyType,
				KeyAlgorithm: mysqDollar[3].integerUnion(),
				ColList:      mysqDollar[5].columnsUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 562:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3094
		{
			mysqLOCAL = &ast.PartitionOption{
				Type: mysqDollar[1].partitionByTypeUnion(),
				Expr: mysqDollar[3].exprUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 563:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.PartitionOption
//line mysql.y:3101
		{
			mysqLOCAL = &ast.PartitionOption{
				Type:    mysqDollar[1].partitionByTypeUnion(),
				ColList: mysqDollar[4].columnsUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 564:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.SubPartition
//line mysql.y:3109
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 565:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.SubPartition
//line mysql.y:3113
		{
			mysqLOCAL = &ast.SubPartition{
				IsLinear:      mysqDollar[3].booleanUnion(),
				Type:          ast.HashType,
				Expr:          mysqDollar[6].exprUnion(),
				SubPartitions: mysqDollar[8].integerUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 566:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL *ast.SubPartition
//line mysql.y:3122
		{
			mysqLOCAL = &ast.SubPartition{
				IsLinear:      mysqDollar[3].booleanUnion(),
				Type:          ast.KeyType,
				KeyAlgorithm:  mysqDollar[5].integerUnion(),
				ColList:       mysqDollar[7].columnsUnion(),
				SubPartitions: mysqDollar[9].integerUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 567:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.PartitionDefinition
//line mysql.y:3133
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 568:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL []*ast.PartitionDefinition
//line mysql.y:3137
		{
			mysqLOCAL = mysqDollar[2].partDefsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 569:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3142
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 570:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3146
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 571:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3151
		{
			mysqLOCAL = 0
		}
		mysqVAL.union = mysqLOCAL
	case 572:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3155
		{
			mysqLOCAL = ast.ConvertStringToInt(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 573:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:3161
		{
			mysqLOCAL = &ast.JSONTableExpr{Expr: mysqDollar[3].exprUnion(), Filter: mysqDollar[5].exprUnion(), Columns: mysqDollar[6].jtColumnListUnion(), Alias: mysqDollar[8].tableIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 574:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL []*ast.JtColumnDefinition
//line mysql.y:3167
		{
			mysqLOCAL = mysqDollar[3].jtColumnListUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 575:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.JtColumnDefinition
//line mysql.y:3173
		{
			mysqLOCAL = []*ast.JtColumnDefinition{mysqDollar[1].jtColumnDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 576:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3177
		{
			mysqSLICE := (*[]*ast.JtColumnDefinition)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].jtColumnDefinitionUnion())
		}
	case 577:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3183
		{
			mysqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: mysqDollar[1].colIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 578:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3187
		{
			mysqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion()}
			mysqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 579:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3193
		{
			mysqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion()}
			mysqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 580:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3199
		{
			mysqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion(), ErrorOnResponse: mysqDollar[7].jtOnResponseUnion()}
			mysqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 581:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3205
		{
			mysqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: mysqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: mysqDollar[1].colIdent, Type: mysqDollar[2].columnType, JtColExists: mysqDollar[4].booleanUnion(), Path: mysqDollar[6].exprUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion(), ErrorOnResponse: mysqDollar[8].jtOnResponseUnion()}
			mysqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		mysqVAL.union = mysqLOCAL
	case 582:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.JtColumnDefinition
//line mysql.y:3211
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: mysqDollar[3].exprUnion(), Columns: mysqDollar[4].jtColumnListUnion()}
			mysqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		mysqVAL.union = mysqLOCAL
	case 583:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3217
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 584:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3221
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 585:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3225
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 586:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3229
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 587:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3235
		{
			mysqLOCAL = mysqDollar[1].jtOnResponseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 588:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3241
		{
			mysqLOCAL = mysqDollar[1].jtOnResponseUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 589:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3247
		{
			mysqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		mysqVAL.union = mysqLOCAL
	case 590:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3251
		{
			mysqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		mysqVAL.union = mysqLOCAL
	case 591:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.JtOnResponse
//line mysql.y:3255
		{
			mysqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 592:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.PartitionByType
//line mysql.y:3261
		{
			mysqLOCAL = ast.RangeType
		}
		mysqVAL.union = mysqLOCAL
	case 593:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.PartitionByType
//line mysql.y:3265
		{
			mysqLOCAL = ast.ListType
		}
		mysqVAL.union = mysqLOCAL
	case 594:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3270
		{
			mysqLOCAL = -1
		}
		mysqVAL.union = mysqLOCAL
	case 595:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3274
		{
			mysqLOCAL = ast.ConvertStringToInt(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 596:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3279
		{
			mysqLOCAL = -1
		}
		mysqVAL.union = mysqLOCAL
	case 597:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3283
		{
			mysqLOCAL = ast.ConvertStringToInt(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 598:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3289
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.AddAction, Definitions: []*ast.PartitionDefinition{mysqDollar[4].partDefUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 599:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3293
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.DropAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 600:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3297
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.ReorganizeAction, Names: mysqDollar[3].partitionsUnion(), Definitions: mysqDollar[6].partDefsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 601:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3301
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.DiscardAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 602:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3305
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.DiscardAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 603:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3309
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.ImportAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 604:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3313
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.ImportAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 605:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3317
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.TruncateAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 606:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3321
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.TruncateAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 607:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3325
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.CoalesceAction, Number: ast.NewIntLiteral(mysqDollar[3].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 608:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3329
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.ExchangeAction, Names: ast.Partitions{mysqDollar[3].colIdent}, TableName: mysqDollar[6].tableName, WithoutValidation: mysqDollar[7].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 609:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3333
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.AnalyzeAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 610:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3337
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.AnalyzeAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 611:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3341
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.CheckAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 612:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3345
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.CheckAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 613:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3349
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.OptimizeAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 614:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3353
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.OptimizeAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 615:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3357
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.RebuildAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 616:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3361
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.RebuildAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 617:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3365
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.RepairAction, Names: mysqDollar[3].partitionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 618:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3369
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.RepairAction, IsAll: true}
		}
		mysqVAL.union = mysqLOCAL
	case 619:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionSpec
//line mysql.y:3373
		{
			mysqLOCAL = &ast.PartitionSpec{Action: ast.UpgradeAction}
		}
		mysqVAL.union = mysqLOCAL
	case 620:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3378
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 621:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3382
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 622:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3386
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 623:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.PartitionDefinition
//line mysql.y:3393
		{
			mysqLOCAL = []*ast.PartitionDefinition{mysqDollar[1].partDefUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 624:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3397
		{
			mysqSLICE := (*[]*ast.PartitionDefinition)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].partDefUnion())
		}
	case 625:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:3403
		{
			mysqVAL.partDefUnion().Options = mysqDollar[2].partitionDefinitionOptionsUnion()
		}
	case 626:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3408
		{
			mysqLOCAL = &ast.PartitionDefinitionOptions{}
		}
		mysqVAL.union = mysqLOCAL
	case 627:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3412
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().ValueRange = mysqDollar[2].partitionValueRangeUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 628:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3417
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().Comment = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 629:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3422
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().Engine = mysqDollar[2].partitionEngineUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 630:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3427
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().DataDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 631:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3432
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().IndexDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 632:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3437
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].partitionDefinitionOptionsUnion().MaxRows = &val
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 633:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3443
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].partitionDefinitionOptionsUnion().MinRows = &val
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 634:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3449
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().TableSpace = mysqDollar[2].str
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 635:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinitionOptions
//line mysql.y:3454
		{
			mysqDollar[1].partitionDefinitionOptionsUnion().SubPartitionDefinitions = mysqDollar[2].subPartitionDefinitionsUnion()
			mysqLOCAL = mysqDollar[1].partitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 636:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SubPartitionDefinitions
//line mysql.y:3460
		{
			mysqLOCAL = mysqDollar[2].subPartitionDefinitionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 637:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SubPartitionDefinitions
//line mysql.y:3466
		{
			mysqLOCAL = ast.SubPartitionDefinitions{mysqDollar[1].subPartitionDefinitionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 638:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3470
		{
			mysqSLICE := (*ast.SubPartitionDefinitions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].subPartitionDefinitionUnion())
		}
	case 639:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinition
//line mysql.y:3476
		{
			mysqLOCAL = &ast.SubPartitionDefinition{Name: mysqDollar[2].colIdent, Options: mysqDollar[3].subPartitionDefinitionOptionsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 640:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3481
		{
			mysqLOCAL = &ast.SubPartitionDefinitionOptions{}
		}
		mysqVAL.union = mysqLOCAL
	case 641:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3485
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().Comment = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 642:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3490
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().Engine = mysqDollar[2].partitionEngineUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 643:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3495
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().DataDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 644:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3500
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().IndexDirectory = mysqDollar[2].literalUnion()
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 645:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3505
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].subPartitionDefinitionOptionsUnion().MaxRows = &val
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 646:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3511
		{
			val := mysqDollar[2].integerUnion()
			mysqDollar[1].subPartitionDefinitionOptionsUnion().MinRows = &val
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 647:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SubPartitionDefinitionOptions
//line mysql.y:3517
		{
			mysqDollar[1].subPartitionDefinitionOptionsUnion().TableSpace = mysqDollar[2].str
			mysqLOCAL = mysqDollar[1].subPartitionDefinitionOptionsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 648:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionValueRange
//line mysql.y:3524
		{
			mysqLOCAL = &ast.PartitionValueRange{
				Type:  ast.LessThanType,
				Range: mysqDollar[4].valTupleUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 649:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionValueRange
//line mysql.y:3531
		{
			mysqLOCAL = &ast.PartitionValueRange{
				Type:     ast.LessThanType,
				Maxvalue: true,
			}
		}
		mysqVAL.union = mysqLOCAL
	case 650:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.PartitionValueRange
//line mysql.y:3538
		{
			mysqLOCAL = &ast.PartitionValueRange{
				Type:  ast.InType,
				Range: mysqDollar[3].valTupleUnion(),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 651:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3546
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 652:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3550
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 653:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.PartitionEngine
//line mysql.y:3556
		{
			mysqLOCAL = &ast.PartitionEngine{Storage: mysqDollar[1].booleanUnion(), Name: mysqDollar[4].tableIdent.String()}
		}
		mysqVAL.union = mysqLOCAL
	case 654:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:3562
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 655:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:3568
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[4].str)
		}
		mysqVAL.union = mysqLOCAL
	case 656:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Literal
//line mysql.y:3574
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[4].str)
		}
		mysqVAL.union = mysqLOCAL
	case 657:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3580
		{
			mysqLOCAL = ast.ConvertStringToInt(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 658:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL int
//line mysql.y:3586
		{
			mysqLOCAL = ast.ConvertStringToInt(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 659:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3592
		{
			mysqVAL.str = mysqDollar[3].tableIdent.String()
		}
	case 660:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.PartitionDefinition
//line mysql.y:3598
		{
			mysqLOCAL = &ast.PartitionDefinition{Name: mysqDollar[2].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 661:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3604
		{
			mysqVAL.str = ""
		}
	case 662:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:3608
		{
			mysqVAL.str = ""
		}
	case 663:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3614
		{
			mysqLOCAL = &ast.RenameTable{TablePairs: mysqDollar[3].renameTablePairsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 664:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL []*ast.RenameTablePair
//line mysql.y:3620
		{
			mysqLOCAL = []*ast.RenameTablePair{{FromTable: mysqDollar[1].tableName, ToTable: mysqDollar[3].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 665:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:3624
		{
			mysqSLICE := (*[]*ast.RenameTablePair)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, &ast.RenameTablePair{FromTable: mysqDollar[3].tableName, ToTable: mysqDollar[5].tableName})
		}
	case 666:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3630
		{
			mysqLOCAL = &ast.DropTable{FromTables: mysqDollar[6].tableNamesUnion(), IfExists: mysqDollar[5].booleanUnion(), Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Temp: mysqDollar[3].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 667:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3634
		{
			// Change this to an alter statement
			if mysqDollar[4].colIdent.Lowered() == "primary" {
				mysqLOCAL = &ast.AlterTable{FullyParsed: true, Table: mysqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, mysqDollar[7].alterOptionsUnion()...)}
			} else {
				mysqLOCAL = &ast.AlterTable{FullyParsed: true, Table: mysqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: mysqDollar[4].colIdent}}, mysqDollar[7].alterOptionsUnion()...)}
			}
		}
		mysqVAL.union = mysqLOCAL
	case 668:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3643
		{
			mysqLOCAL = &ast.DropView{FromTables: mysqDollar[5].tableNamesUnion(), Comments: ast.Comments(mysqDollar[2].strs).Parsed(), IfExists: mysqDollar[4].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 669:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3647
		{
			mysqLOCAL = &ast.DropDatabase{Comments: ast.Comments(mysqDollar[2].strs).Parsed(), DBName: mysqDollar[5].tableIdent, IfExists: mysqDollar[4].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 670:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3653
		{
			mysqLOCAL = &ast.TruncateTable{Table: mysqDollar[3].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 671:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3657
		{
			mysqLOCAL = &ast.TruncateTable{Table: mysqDollar[2].tableName}
		}
		mysqVAL.union = mysqLOCAL
	case 672:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3662
		{
			mysqLOCAL = &ast.OtherRead{}
		}
		mysqVAL.union = mysqLOCAL
	case 673:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3668
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 674:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3672
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 675:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3676
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: mysqDollar[2].booleanUnion(), Command: ast.Column, Tbl: mysqDollar[5].tableName, DbName: mysqDollar[6].tableIdent, Filter: mysqDollar[7].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 676:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3680
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 677:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3684
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 678:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3688
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: mysqDollar[3].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 679:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3692
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 680:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3696
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: mysqDollar[5].tableName, DbName: mysqDollar[6].tableIdent, Filter: mysqDollar[7].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 681:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3700
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: mysqDollar[4].tableIdent, Filter: mysqDollar[5].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 682:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3704
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		mysqVAL.union = mysqLOCAL
	case 683:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3708
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 684:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3712
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 685:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3716
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 686:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3720
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 687:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3724
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 688:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3728
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: mysqDollar[4].tableIdent, Filter: mysqDollar[5].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 689:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3732
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: mysqDollar[2].booleanUnion(), DbName: mysqDollar[4].tableIdent, Filter: mysqDollar[5].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 690:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3736
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: mysqDollar[3].tableIdent, Filter: mysqDollar[4].showFilterUnion()}}
		}
		mysqVAL.union = mysqLOCAL
	case 691:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3740
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 692:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3744
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 693:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3748
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 694:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3752
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 695:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3756
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 696:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3760
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 697:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3764
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: mysqDollar[4].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 698:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3768
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Engines}}
		}
		mysqVAL.union = mysqLOCAL
	case 699:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3772
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		mysqVAL.union = mysqLOCAL
	case 700:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3776
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: mysqDollar[4].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 701:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3780
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: mysqDollar[4].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 702:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3784
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		mysqVAL.union = mysqLOCAL
	case 703:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3788
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		mysqVAL.union = mysqLOCAL
	case 704:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3792
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: mysqDollar[5].tableName}}
		}
		mysqVAL.union = mysqLOCAL
	case 705:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3796
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		mysqVAL.union = mysqLOCAL
	case 706:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3803
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].colIdent.String())}}
		}
		mysqVAL.union = mysqLOCAL
	case 707:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3807
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 708:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3811
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str) + " " + mysqDollar[3].colIdent.String()}}
		}
		mysqVAL.union = mysqLOCAL
	case 709:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3815
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 710:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3819
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 711:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3823
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str) + " " + ast.String(mysqDollar[4].tableName)}}
		}
		mysqVAL.union = mysqLOCAL
	case 712:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3827
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str) + " " + string(mysqDollar[3].str) + " " + ast.String(mysqDollar[4].tableName)}}
		}
		mysqVAL.union = mysqLOCAL
	case 713:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3831
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[3].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 714:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3835
		{
			mysqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(mysqDollar[2].str)}}
		}
		mysqVAL.union = mysqLOCAL
	case 715:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3841
		{
			mysqVAL.str = ""
		}
	case 716:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3845
		{
			mysqVAL.str = "extended "
		}
	case 717:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3851
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 718:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:3855
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 719:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3861
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 720:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3865
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 721:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3871
		{
			mysqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 722:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:3875
		{
			mysqVAL.tableIdent = mysqDollar[2].tableIdent
		}
	case 723:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:3879
		{
			mysqVAL.tableIdent = mysqDollar[2].tableIdent
		}
	case 724:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:3885
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 725:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:3889
		{
			mysqLOCAL = &ast.ShowFilter{Like: string(mysqDollar[2].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 726:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ShowFilter
//line mysql.y:3893
		{
			mysqLOCAL = &ast.ShowFilter{Filter: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 727:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3899
		{
			mysqVAL.empty = struct{}{}
		}
	case 728:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3903
		{
			mysqVAL.empty = struct{}{}
		}
	case 729:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3907
		{
			mysqVAL.empty = struct{}{}
		}
	case 730:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3913
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 731:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3917
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 732:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3923
		{
			mysqLOCAL = &ast.Use{DBName: mysqDollar[2].tableIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 733:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3927
		{
			mysqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		mysqVAL.union = mysqLOCAL
	case 734:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3931
		{
			mysqLOCAL = &ast.Use{DBName: ast.NewTableIdent(mysqDollar[2].tableIdent.String() + "@" + string(mysqDollar[3].str))}
		}
		mysqVAL.union = mysqLOCAL
	case 735:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3937
		{
			mysqLOCAL = &ast.Begin{}
		}
		mysqVAL.union = mysqLOCAL
	case 736:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3941
		{
			mysqLOCAL = &ast.Begin{}
		}
		mysqVAL.union = mysqLOCAL
	case 737:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3947
		{
			mysqLOCAL = &ast.Commit{}
		}
		mysqVAL.union = mysqLOCAL
	case 738:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3953
		{
			mysqLOCAL = &ast.Rollback{}
		}
		mysqVAL.union = mysqLOCAL
	case 739:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3957
		{
			mysqLOCAL = &ast.SRollback{Name: mysqDollar[5].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 740:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3962
		{
			mysqVAL.empty = struct{}{}
		}
	case 741:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3964
		{
			mysqVAL.empty = struct{}{}
		}
	case 742:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:3967
		{
			mysqVAL.empty = struct{}{}
		}
	case 743:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:3969
		{
			mysqVAL.empty = struct{}{}
		}
	case 744:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3974
		{
			mysqLOCAL = &ast.Savepoint{Name: mysqDollar[2].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 745:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:3980
		{
			mysqLOCAL = &ast.Release{Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 746:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:3985
		{
			mysqLOCAL = ast.EmptyType
		}
		mysqVAL.union = mysqLOCAL
	case 747:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:3989
		{
			mysqLOCAL = ast.JSONType
		}
		mysqVAL.union = mysqLOCAL
	case 748:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:3993
		{
			mysqLOCAL = ast.TreeType
		}
		mysqVAL.union = mysqLOCAL
	case 749:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:3997
		{
			mysqLOCAL = ast.TraditionalType
		}
		mysqVAL.union = mysqLOCAL
	case 750:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ExplainType
//line mysql.y:4001
		{
			mysqLOCAL = ast.AnalyzeType
		}
		mysqVAL.union = mysqLOCAL
	case 751:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4007
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 752:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4011
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 753:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4015
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 754:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4021
		{
			mysqLOCAL = mysqDollar[1].selStmtUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 755:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4025
		{
			mysqLOCAL = mysqDollar[1].statementUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 756:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4029
		{
			mysqLOCAL = mysqDollar[1].statementUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 757:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4033
		{
			mysqLOCAL = mysqDollar[1].statementUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 758:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4038
		{
			mysqVAL.str = ""
		}
	case 759:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4042
		{
			mysqVAL.str = mysqDollar[1].colIdent.Val
		}
	case 760:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4046
		{
			mysqVAL.str = sql_types.EncodeStringSQL(mysqDollar[1].str)
		}
	case 761:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4052
		{
			mysqLOCAL = &ast.ExplainTab{Table: mysqDollar[2].tableName, Wild: mysqDollar[3].str}
		}
		mysqVAL.union = mysqLOCAL
	case 762:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4056
		{
			mysqLOCAL = &ast.ExplainStmt{Type: mysqDollar[2].explainTypeUnion(), Statement: mysqDollar[3].statementUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 763:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4062
		{
			mysqLOCAL = &ast.OtherAdmin{}
		}
		mysqVAL.union = mysqLOCAL
	case 764:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4066
		{
			mysqLOCAL = &ast.OtherAdmin{}
		}
		mysqVAL.union = mysqLOCAL
	case 765:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4072
		{
			mysqLOCAL = &ast.LockTables{Tables: mysqDollar[3].tableAndLockTypesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 766:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableAndLockTypes
//line mysql.y:4078
		{
			mysqLOCAL = ast.TableAndLockTypes{mysqDollar[1].tableAndLockTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 767:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4082
		{
			mysqSLICE := (*ast.TableAndLockTypes)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableAndLockTypeUnion())
		}
	case 768:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.TableAndLockType
//line mysql.y:4088
		{
			mysqLOCAL = &ast.TableAndLockType{Table: mysqDollar[1].aliasedTableNameUnion(), Lock: mysqDollar[2].lockTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 769:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4094
		{
			mysqLOCAL = ast.Read
		}
		mysqVAL.union = mysqLOCAL
	case 770:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4098
		{
			mysqLOCAL = ast.ReadLocal
		}
		mysqVAL.union = mysqLOCAL
	case 771:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4102
		{
			mysqLOCAL = ast.Write
		}
		mysqVAL.union = mysqLOCAL
	case 772:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.LockType
//line mysql.y:4106
		{
			mysqLOCAL = ast.LowPriorityWrite
		}
		mysqVAL.union = mysqLOCAL
	case 773:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4112
		{
			mysqLOCAL = &ast.UnlockTables{}
		}
		mysqVAL.union = mysqLOCAL
	case 774:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4118
		{
			mysqLOCAL = &ast.Flush{IsLocal: mysqDollar[2].booleanUnion(), FlushOptions: mysqDollar[3].strs}
		}
		mysqVAL.union = mysqLOCAL
	case 775:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4122
		{
			mysqLOCAL = &ast.Flush{IsLocal: mysqDollar[2].booleanUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 776:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4126
		{
			mysqLOCAL = &ast.Flush{IsLocal: mysqDollar[2].booleanUnion(), WithLock: true}
		}
		mysqVAL.union = mysqLOCAL
	case 777:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4130
		{
			mysqLOCAL = &ast.Flush{IsLocal: mysqDollar[2].booleanUnion(), TableNames: mysqDollar[4].tableNamesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 778:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4134
		{
			mysqLOCAL = &ast.Flush{IsLocal: mysqDollar[2].booleanUnion(), TableNames: mysqDollar[4].tableNamesUnion(), WithLock: true}
		}
		mysqVAL.union = mysqLOCAL
	case 779:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4138
		{
			mysqLOCAL = &ast.Flush{IsLocal: mysqDollar[2].booleanUnion(), TableNames: mysqDollar[4].tableNamesUnion(), ForExport: true}
		}
		mysqVAL.union = mysqLOCAL
	case 780:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4144
		{
			mysqVAL.strs = []string{mysqDollar[1].str}
		}
	case 781:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4148
		{
			mysqVAL.strs = append(mysqDollar[1].strs, mysqDollar[3].str)
		}
	case 782:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4154
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 783:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4158
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 784:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4162
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 785:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4166
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 786:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4170
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 787:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4174
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 788:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4178
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 789:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4182
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str) + mysqDollar[3].str
		}
	case 790:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4186
		{
			mysqVAL.str = string(mysqDollar[1].str) + " " + string(mysqDollar[2].str)
		}
	case 791:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4190
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 792:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4194
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 793:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4198
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 794:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4203
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 795:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4207
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 796:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4211
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 797:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4216
		{
			mysqVAL.str = ""
		}
	case 798:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4220
		{
			mysqVAL.str = " " + string(mysqDollar[1].str) + " " + string(mysqDollar[2].str) + " " + mysqDollar[3].colIdent.String()
		}
	case 799:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4225
		{
			setAllowComments(mysqlex, true)
		}
	case 800:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4229
		{
			mysqVAL.strs = mysqDollar[2].strs
			setAllowComments(mysqlex, false)
		}
	case 801:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4235
		{
			mysqVAL.strs = nil
		}
	case 802:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4239
		{
			mysqVAL.strs = append(mysqDollar[1].strs, mysqDollar[2].str)
		}
	case 803:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4245
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 804:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4249
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 805:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4253
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 806:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4258
		{
			mysqVAL.str = ""
		}
	case 807:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4262
		{
			mysqVAL.str = ast.SQLNoCacheStr
		}
	case 808:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4266
		{
			mysqVAL.str = ast.SQLCacheStr
		}
	case 809:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4271
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 810:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4275
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 811:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:4279
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 812:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4285
		{
			mysqLOCAL = &ast.PrepareStmt{Name: mysqDollar[3].colIdent, Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Statement: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 813:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4289
		{
			mysqLOCAL = &ast.PrepareStmt{
				Name:     mysqDollar[3].colIdent,
				Comments: ast.Comments(mysqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(mysqDollar[5].str), ast.SingleAt),
				},
			}
		}
		mysqVAL.union = mysqLOCAL
	case 814:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4301
		{
			mysqLOCAL = &ast.ExecuteStmt{Name: mysqDollar[3].colIdent, Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Arguments: mysqDollar[4].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 815:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4306
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 816:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4310
		{
			mysqLOCAL = mysqDollar[2].columnsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 817:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4316
		{
			mysqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Name: mysqDollar[4].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 818:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:4320
		{
			mysqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(mysqDollar[2].strs).Parsed(), Name: mysqDollar[4].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 819:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.SelectExprs
//line mysql.y:4325
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 820:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectExprs
//line mysql.y:4329
		{
			mysqLOCAL = mysqDollar[1].selectExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 821:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4334
		{
			mysqVAL.strs = nil
		}
	case 822:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4338
		{
			mysqVAL.strs = []string{mysqDollar[1].str}
		}
	case 823:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4342
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			mysqVAL.strs = []string{mysqDollar[1].str, mysqDollar[2].str}
		}
	case 824:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4346
		{
			mysqVAL.strs = []string{mysqDollar[1].str, mysqDollar[2].str, mysqDollar[3].str}
		}
	case 825:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:4350
		{
			mysqVAL.strs = []string{mysqDollar[1].str, mysqDollar[2].str, mysqDollar[3].str, mysqDollar[4].str}
		}
	case 826:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4356
		{
			mysqVAL.str = ast.SQLNoCacheStr
		}
	case 827:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4360
		{
			mysqVAL.str = ast.SQLCacheStr
		}
	case 828:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4364
		{
			mysqVAL.str = ast.DistinctStr
		}
	case 829:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4368
		{
			mysqVAL.str = ast.DistinctStr
		}
	case 830:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4372
		{
			mysqVAL.str = ast.StraightJoinHint
		}
	case 831:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4376
		{
			mysqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 832:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4380
		{
			mysqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 833:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectExprs
//line mysql.y:4386
		{
			mysqLOCAL = ast.SelectExprs{mysqDollar[1].selectExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 834:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4390
		{
			mysqSLICE := (*ast.SelectExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].selectExprUnion())
		}
	case 835:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4396
		{
			mysqLOCAL = &ast.StarExpr{}
		}
		mysqVAL.union = mysqLOCAL
	case 836:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4400
		{
			mysqLOCAL = &ast.AliasedExpr{Expr: mysqDollar[1].exprUnion(), As: mysqDollar[2].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 837:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4404
		{
			mysqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: mysqDollar[1].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 838:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.SelectExpr
//line mysql.y:4408
		{
			mysqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].tableIdent}}
		}
		mysqVAL.union = mysqLOCAL
	case 839:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4413
		{
			mysqVAL.colIdent = ast.ColIdent{}
		}
	case 840:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4417
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 841:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4421
		{
			mysqVAL.colIdent = mysqDollar[2].colIdent
		}
	case 843:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4428
		{
			mysqVAL.colIdent = ast.NewColIdent(string(mysqDollar[1].str))
		}
	case 844:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4433
		{
			mysqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		mysqVAL.union = mysqLOCAL
	case 845:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4437
		{
			mysqLOCAL = mysqDollar[1].tableExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 846:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4443
		{
			mysqLOCAL = mysqDollar[2].tableExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 847:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExprs
//line mysql.y:4449
		{
			mysqLOCAL = ast.TableExprs{mysqDollar[1].tableExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 848:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4453
		{
			mysqSLICE := (*ast.TableExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].tableExprUnion())
		}
	case 851:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4463
		{
			mysqLOCAL = mysqDollar[1].aliasedTableNameUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 852:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4467
		{
			mysqLOCAL = &ast.AliasedTableExpr{Expr: mysqDollar[1].derivedTableUnion(), As: mysqDollar[3].tableIdent, Columns: mysqDollar[4].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 853:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4471
		{
			mysqLOCAL = &ast.ParenTableExpr{Exprs: mysqDollar[2].tableExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 854:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4475
		{
			mysqLOCAL = mysqDollar[1].tableExprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 855:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.DerivedTable
//line mysql.y:4481
		{
			mysqLOCAL = &ast.DerivedTable{Lateral: false, Select: mysqDollar[2].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 856:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.DerivedTable
//line mysql.y:4485
		{
			mysqLOCAL = &ast.DerivedTable{Lateral: true, Select: mysqDollar[3].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 857:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.AliasedTableExpr
//line mysql.y:4491
		{
			mysqLOCAL = &ast.AliasedTableExpr{Expr: mysqDollar[1].tableName, As: mysqDollar[2].tableIdent, Hints: mysqDollar[3].indexHintsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 858:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL *ast.AliasedTableExpr
//line mysql.y:4495
		{
			mysqLOCAL = &ast.AliasedTableExpr{Expr: mysqDollar[1].tableName, Partitions: mysqDollar[4].partitionsUnion(), As: mysqDollar[6].tableIdent, Hints: mysqDollar[7].indexHintsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 859:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4500
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 860:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4504
		{
			mysqLOCAL = mysqDollar[2].columnsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 861:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4510
		{
			mysqLOCAL = ast.Columns{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 862:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4514
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 863:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4520
		{
			mysqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(mysqDollar[1].str), ast.SingleAt)}
		}
		mysqVAL.union = mysqLOCAL
	case 864:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4524
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, ast.NewColIdentWithAt(string(mysqDollar[3].str), ast.SingleAt))
		}
	case 865:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4530
		{
			mysqLOCAL = ast.Columns{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 866:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:4534
		{
			mysqLOCAL = ast.Columns{ast.NewColIdent(string(mysqDollar[1].str))}
		}
		mysqVAL.union = mysqLOCAL
	case 867:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4538
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 868:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4542
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, ast.NewColIdent(string(mysqDollar[3].str)))
		}
	case 869:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Partitions
//line mysql.y:4548
		{
			mysqLOCAL = ast.Partitions{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 870:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4552
		{
			mysqSLICE := (*ast.Partitions)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 871:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4565
		{
			mysqLOCAL = &ast.JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion(), Condition: mysqDollar[4].joinCondition}
		}
		mysqVAL.union = mysqLOCAL
	case 872:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4569
		{
			mysqLOCAL = &ast.JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion(), Condition: mysqDollar[4].joinCondition}
		}
		mysqVAL.union = mysqLOCAL
	case 873:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4573
		{
			mysqLOCAL = &ast.JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion(), Condition: mysqDollar[4].joinCondition}
		}
		mysqVAL.union = mysqLOCAL
	case 874:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.TableExpr
//line mysql.y:4577
		{
			mysqLOCAL = &ast.JoinTableExpr{LeftExpr: mysqDollar[1].tableExprUnion(), Join: mysqDollar[2].joinTypeUnion(), RightExpr: mysqDollar[3].tableExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 875:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4583
		{
			mysqVAL.joinCondition = &ast.JoinCondition{On: mysqDollar[2].exprUnion()}
		}
	case 876:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:4585
		{
			mysqVAL.joinCondition = &ast.JoinCondition{Using: mysqDollar[3].columnsUnion()}
		}
	case 877:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4589
		{
			mysqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 878:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4591
		{
			mysqVAL.joinCondition = mysqDollar[1].joinCondition
		}
	case 879:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4595
		{
			mysqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 880:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4597
		{
			mysqVAL.joinCondition = &ast.JoinCondition{On: mysqDollar[2].exprUnion()}
		}
	case 881:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4600
		{
			mysqVAL.empty = struct{}{}
		}
	case 882:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4602
		{
			mysqVAL.empty = struct{}{}
		}
	case 883:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:4605
		{
			mysqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 884:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4609
		{
			mysqVAL.tableIdent = mysqDollar[1].tableIdent
		}
	case 885:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4613
		{
			mysqVAL.tableIdent = mysqDollar[2].tableIdent
		}
	case 887:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4620
		{
			mysqVAL.tableIdent = ast.NewTableIdent(string(mysqDollar[1].str))
		}
	case 888:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4626
		{
			mysqLOCAL = ast.NormalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 889:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4630
		{
			mysqLOCAL = ast.NormalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 890:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4634
		{
			mysqLOCAL = ast.NormalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 891:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4640
		{
			mysqLOCAL = ast.StraightJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 892:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4646
		{
			mysqLOCAL = ast.LeftJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 893:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4650
		{
			mysqLOCAL = ast.LeftJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 894:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4654
		{
			mysqLOCAL = ast.RightJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 895:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4658
		{
			mysqLOCAL = ast.RightJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 896:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4664
		{
			mysqLOCAL = ast.NaturalJoinType
		}
		mysqVAL.union = mysqLOCAL
	case 897:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.JoinType
//line mysql.y:4668
		{
			if mysqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				mysqLOCAL = ast.NaturalLeftJoinType
			} else {
				mysqLOCAL = ast.NaturalRightJoinType
			}
		}
		mysqVAL.union = mysqLOCAL
	case 898:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4678
		{
			mysqVAL.tableName = mysqDollar[2].tableName
		}
	case 899:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4682
		{
			mysqVAL.tableName = mysqDollar[1].tableName
		}
	case 900:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:4688
		{
			mysqVAL.tableName = ast.TableName{Name: mysqDollar[1].tableIdent}
		}
	case 901:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4692
		{
			mysqVAL.tableName = ast.TableName{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].tableIdent}
		}
	case 902:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:4698
		{
			mysqVAL.tableName = ast.TableName{Name: mysqDollar[1].tableIdent}
		}
	case 903:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.IndexHints
//line mysql.y:4703
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 904:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IndexHints
//line mysql.y:4707
		{
			mysqLOCAL = mysqDollar[1].indexHintsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 905:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IndexHints
//line mysql.y:4713
		{
			mysqLOCAL = ast.IndexHints{mysqDollar[1].indexHintUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 906:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:4717
		{
			mysqSLICE := (*ast.IndexHints)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].indexHintUnion())
		}
	case 907:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4723
		{
			mysqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: mysqDollar[3].indexHintForTypeUnion(), Indexes: mysqDollar[5].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 908:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4727
		{
			mysqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: mysqDollar[3].indexHintForTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 909:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4731
		{
			mysqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: mysqDollar[3].indexHintForTypeUnion(), Indexes: mysqDollar[5].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 910:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL *ast.IndexHint
//line mysql.y:4735
		{
			mysqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: mysqDollar[3].indexHintForTypeUnion(), Indexes: mysqDollar[5].columnsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 911:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4740
		{
			mysqLOCAL = ast.NoForType
		}
		mysqVAL.union = mysqLOCAL
	case 912:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4744
		{
			mysqLOCAL = ast.JoinForType
		}
		mysqVAL.union = mysqLOCAL
	case 913:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4748
		{
			mysqLOCAL = ast.OrderByForType
		}
		mysqVAL.union = mysqLOCAL
	case 914:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.IndexHintForType
//line mysql.y:4752
		{
			mysqLOCAL = ast.GroupByForType
		}
		mysqVAL.union = mysqLOCAL
	case 915:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4758
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 916:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4762
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 917:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4769
		{
			mysqLOCAL = &ast.OrExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 918:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4773
		{
			mysqLOCAL = &ast.XorExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 919:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4777
		{
			mysqLOCAL = &ast.AndExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 920:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4781
		{
			mysqLOCAL = &ast.NotExpr{Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 921:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4785
		{
			mysqLOCAL = &ast.IsExpr{Left: mysqDollar[1].exprUnion(), Right: mysqDollar[3].isExprOperatorUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 922:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4789
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 923:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4793
		{
			mysqLOCAL = &ast.MemberOfExpr{Value: mysqDollar[1].exprUnion(), JSONArr: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 924:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4800
		{
			mysqLOCAL = &ast.IsExpr{Left: mysqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		mysqVAL.union = mysqLOCAL
	case 925:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4804
		{
			mysqLOCAL = &ast.IsExpr{Left: mysqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		mysqVAL.union = mysqLOCAL
	case 926:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4808
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: mysqDollar[2].comparisonExprOperatorUnion(), Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 927:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4812
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 928:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4818
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.InOp, Right: mysqDollar[3].colTupleUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 929:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4822
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: mysqDollar[4].colTupleUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 930:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4826
		{
			mysqLOCAL = &ast.BetweenExpr{Left: mysqDollar[1].exprUnion(), IsBetween: true, From: mysqDollar[3].exprUnion(), To: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 931:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4830
		{
			mysqLOCAL = &ast.BetweenExpr{Left: mysqDollar[1].exprUnion(), IsBetween: false, From: mysqDollar[4].exprUnion(), To: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 932:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4834
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 933:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4838
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 934:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4842
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: mysqDollar[3].exprUnion(), Escape: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 935:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4846
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: mysqDollar[4].exprUnion(), Escape: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 936:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4850
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 937:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4854
		{
			mysqLOCAL = &ast.ComparisonExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 938:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4858
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 939:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4864
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 940:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4868
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 941:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4872
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 942:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4876
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 943:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4880
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 944:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4884
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 945:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4888
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.MultOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 946:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4892
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.DivOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 947:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4896
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.ModOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 948:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4900
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 949:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4904
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.ModOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 950:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4908
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 951:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4912
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 952:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4918
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 953:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4922
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 954:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4926
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 955:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4930
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 956:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4934
		{
			mysqLOCAL = &ast.CollateExpr{Expr: mysqDollar[1].exprUnion(), Collation: mysqDollar[3].str}
		}
		mysqVAL.union = mysqLOCAL
	case 957:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4938
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 958:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4942
		{
			mysqLOCAL = mysqDollar[1].colNameUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 959:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4946
		{
			mysqLOCAL = mysqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		mysqVAL.union = mysqLOCAL
	case 960:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4950
		{
			mysqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 961:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4954
		{
			mysqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 962:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4958
		{
			mysqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 963:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4962
		{
			mysqLOCAL = mysqDollar[1].subqueryUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 964:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4966
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 965:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4970
		{
			mysqLOCAL = &ast.ExistsExpr{Subquery: mysqDollar[2].subqueryUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 966:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4974
		{
			mysqLOCAL = &ast.MatchExpr{Columns: mysqDollar[3].selectExprsUnion(), Expr: mysqDollar[7].exprUnion(), Option: mysqDollar[8].matchExprOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 967:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4978
		{
			mysqLOCAL = &ast.ConvertExpr{Expr: mysqDollar[3].exprUnion(), Type: mysqDollar[5].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 968:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4982
		{
			mysqLOCAL = &ast.ConvertExpr{Expr: mysqDollar[3].exprUnion(), Type: mysqDollar[5].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 969:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4986
		{
			mysqLOCAL = &ast.ConvertUsingExpr{Expr: mysqDollar[3].exprUnion(), Type: mysqDollar[5].str}
		}
		mysqVAL.union = mysqLOCAL
	case 970:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4990
		{
			// From: https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			mysqLOCAL = &ast.ConvertExpr{Expr: mysqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: mysqDollar[1].str}}
		}
		mysqVAL.union = mysqLOCAL
	case 971:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:4998
		{
			mysqLOCAL = &ast.Default{ColName: mysqDollar[2].str}
		}
		mysqVAL.union = mysqLOCAL
	case 972:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5002
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			mysqLOCAL = &ast.IntervalExpr{Expr: mysqDollar[2].exprUnion(), Unit: mysqDollar[3].colIdent.String()}
		}
		mysqVAL.union = mysqLOCAL
	case 973:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5010
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 974:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5014
		{
			mysqLOCAL = &ast.BinaryExpr{Left: mysqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 975:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TrimType
//line mysql.y:5020
		{
			mysqLOCAL = ast.BothTrimType
		}
		mysqVAL.union = mysqLOCAL
	case 976:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TrimType
//line mysql.y:5024
		{
			mysqLOCAL = ast.LeadingTrimType
		}
		mysqVAL.union = mysqLOCAL
	case 977:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.TrimType
//line mysql.y:5028
		{
			mysqLOCAL = ast.TrailingTrimType
		}
		mysqVAL.union = mysqLOCAL
	case 978:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5034
		{
			mysqVAL.str = ""
		}
	case 979:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5038
		{
			mysqVAL.str = string(mysqDollar[2].colIdent.String())
		}
	case 980:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.BoolVal
//line mysql.y:5044
		{
			mysqLOCAL = ast.BoolVal(true)
		}
		mysqVAL.union = mysqLOCAL
	case 981:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.BoolVal
//line mysql.y:5048
		{
			mysqLOCAL = ast.BoolVal(false)
		}
		mysqVAL.union = mysqLOCAL
	case 982:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5055
		{
			mysqLOCAL = ast.IsTrueOp
		}
		mysqVAL.union = mysqLOCAL
	case 983:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5059
		{
			mysqLOCAL = ast.IsNotTrueOp
		}
		mysqVAL.union = mysqLOCAL
	case 984:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5063
		{
			mysqLOCAL = ast.IsFalseOp
		}
		mysqVAL.union = mysqLOCAL
	case 985:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.IsExprOperator
//line mysql.y:5067
		{
			mysqLOCAL = ast.IsNotFalseOp
		}
		mysqVAL.union = mysqLOCAL
	case 986:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5073
		{
			mysqLOCAL = ast.EqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 987:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5077
		{
			mysqLOCAL = ast.LessThanOp
		}
		mysqVAL.union = mysqLOCAL
	case 988:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5081
		{
			mysqLOCAL = ast.GreaterThanOp
		}
		mysqVAL.union = mysqLOCAL
	case 989:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5085
		{
			mysqLOCAL = ast.LessEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 990:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5089
		{
			mysqLOCAL = ast.GreaterEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 991:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5093
		{
			mysqLOCAL = ast.NotEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 992:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ComparisonExprOperator
//line mysql.y:5097
		{
			mysqLOCAL = ast.NullSafeEqualOp
		}
		mysqVAL.union = mysqLOCAL
	case 993:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColTuple
//line mysql.y:5103
		{
			mysqLOCAL = mysqDollar[1].valTupleUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 994:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColTuple
//line mysql.y:5107
		{
			mysqLOCAL = mysqDollar[1].subqueryUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 995:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ColTuple
//line mysql.y:5111
		{
			mysqLOCAL = ast.ListArg(mysqDollar[1].str[2:])
			bindVariable(mysqlex, mysqDollar[1].str[2:])
		}
		mysqVAL.union = mysqLOCAL
	case 996:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Subquery
//line mysql.y:5118
		{
			mysqLOCAL = &ast.Subquery{mysqDollar[1].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 997:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:5124
		{
			mysqLOCAL = ast.Exprs{mysqDollar[1].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 998:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5128
		{
			mysqSLICE := (*ast.Exprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].exprUnion())
		}
	case 999:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5138
		{
			mysqLOCAL = &ast.FuncExpr{Name: mysqDollar[1].colIdent, Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1000:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5142
		{
			mysqLOCAL = &ast.FuncExpr{Name: mysqDollar[1].colIdent, Distinct: true, Exprs: mysqDollar[4].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1001:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5146
		{
			mysqLOCAL = &ast.FuncExpr{Name: mysqDollar[1].colIdent, Distinct: true, Exprs: mysqDollar[4].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1002:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5150
		{
			mysqLOCAL = &ast.FuncExpr{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].colIdent, Exprs: mysqDollar[5].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1003:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5160
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1004:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5164
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1005:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5168
		{
			mysqLOCAL = &ast.SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion(), To: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1006:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5172
		{
			mysqLOCAL = &ast.SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1007:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5176
		{
			mysqLOCAL = &ast.SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion(), To: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1008:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5180
		{
			mysqLOCAL = &ast.SubstrExpr{Name: mysqDollar[3].exprUnion(), From: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1009:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5184
		{
			mysqLOCAL = &ast.GroupConcatExpr{Distinct: mysqDollar[3].booleanUnion(), Exprs: mysqDollar[4].selectExprsUnion(), OrderBy: mysqDollar[5].orderByUnion(), Separator: mysqDollar[6].str, Limit: mysqDollar[7].limitUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1010:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5188
		{
			mysqLOCAL = &ast.CaseExpr{Expr: mysqDollar[2].exprUnion(), Whens: mysqDollar[3].whensUnion(), Else: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1011:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5192
		{
			mysqLOCAL = &ast.ValuesFuncExpr{Name: mysqDollar[3].colNameUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1012:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5196
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1013:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5207
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		mysqVAL.union = mysqLOCAL
	case 1014:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5211
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1015:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5217
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		mysqVAL.union = mysqLOCAL
	case 1016:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5221
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1017:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5226
		{
			mysqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1018:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5230
		{
			mysqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: mysqDollar[3].colIdent.String(), Expr1: mysqDollar[5].exprUnion(), Expr2: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1019:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5234
		{
			mysqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: mysqDollar[3].colIdent.String(), Expr1: mysqDollar[5].exprUnion(), Expr2: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1020:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5238
		{
			mysqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: mysqDollar[3].intervalTypeUnion(), Expr: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1021:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5242
		{
			mysqLOCAL = &ast.WeightStringFuncExpr{Expr: mysqDollar[3].exprUnion(), As: mysqDollar[4].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1022:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5246
		{
			mysqLOCAL = &ast.JSONPrettyExpr{JSONVal: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1023:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5250
		{
			mysqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1024:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5254
		{
			mysqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1025:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5258
		{
			mysqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1026:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5262
		{
			mysqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1027:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5266
		{
			mysqLOCAL = &ast.TrimFuncExpr{Type: mysqDollar[3].trimTypeUnion(), TrimArg: mysqDollar[4].exprUnion(), StringArg: mysqDollar[6].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1028:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5270
		{
			mysqLOCAL = &ast.TrimFuncExpr{StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1029:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5274
		{
			mysqLOCAL = &ast.TrimFuncExpr{TrimArg: mysqDollar[3].exprUnion(), StringArg: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1030:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5278
		{
			mysqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: mysqDollar[3].exprUnion(), Document: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1031:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5282
		{
			mysqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: mysqDollar[3].exprUnion(), Document: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1032:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5286
		{
			mysqLOCAL = &ast.JSONArrayExpr{Params: mysqDollar[3].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1033:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5290
		{
			mysqLOCAL = &ast.JSONObjectExpr{Params: mysqDollar[3].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1034:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5294
		{
			mysqLOCAL = &ast.JSONQuoteExpr{StringArg: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1035:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5298
		{
			mysqLOCAL = &ast.JSONContainsExpr{Target: mysqDollar[3].exprUnion(), Candidate: mysqDollar[5].exprUnion(), PathList: mysqDollar[6].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1036:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5302
		{
			mysqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: mysqDollar[3].exprUnion(), OneOrAll: mysqDollar[5].exprUnion(), PathList: mysqDollar[7].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1037:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5306
		{
			mysqLOCAL = &ast.JSONExtractExpr{JSONDoc: mysqDollar[3].exprUnion(), PathList: mysqDollar[5].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1038:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5310
		{
			mysqLOCAL = &ast.JSONKeysExpr{JSONDoc: mysqDollar[3].exprUnion(), PathList: mysqDollar[4].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1039:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5314
		{
			mysqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: mysqDollar[3].exprUnion(), JSONDoc2: mysqDollar[5].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1040:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5318
		{
			mysqLOCAL = &ast.JSONSearchExpr{JSONDoc: mysqDollar[3].exprUnion(), OneOrAll: mysqDollar[5].exprUnion(), SearchStr: mysqDollar[7].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1041:
		mysqDollar = mysqS[mysqpt-11 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5322
		{
			mysqLOCAL = &ast.JSONSearchExpr{JSONDoc: mysqDollar[3].exprUnion(), OneOrAll: mysqDollar[5].exprUnion(), SearchStr: mysqDollar[7].exprUnion(), EscapeChar: mysqDollar[9].exprUnion(), PathList: mysqDollar[10].jsonPathParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1042:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5326
		{
			mysqLOCAL = &ast.JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1043:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5330
		{
			mysqLOCAL = &ast.JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1044:
		mysqDollar = mysqS[mysqpt-8 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5334
		{
			mysqLOCAL = &ast.JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion(), ErrorOnResponse: mysqDollar[7].jtOnResponseUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1045:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5338
		{
			mysqLOCAL = &ast.JSONValueExpr{JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam, ReturningType: mysqDollar[6].convertTypeUnion(), EmptyOnResponse: mysqDollar[7].jtOnResponseUnion(), ErrorOnResponse: mysqDollar[8].jtOnResponseUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1046:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5342
		{
			mysqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1047:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5346
		{
			mysqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1048:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5350
		{
			mysqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1049:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5354
		{
			mysqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1050:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5358
		{
			mysqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: mysqDollar[3].exprUnion(), Path: mysqDollar[5].jsonPathParam}
		}
		mysqVAL.union = mysqLOCAL
	case 1051:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5362
		{
			mysqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1052:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5366
		{
			mysqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1053:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5370
		{
			mysqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1054:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5374
		{
			mysqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1055:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5378
		{
			mysqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: mysqDollar[3].exprUnion(), Params: mysqDollar[5].jsonObjectParamsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1056:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5382
		{
			mysqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: mysqDollar[3].exprUnion(), JSONDocList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1057:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5386
		{
			mysqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: mysqDollar[3].exprUnion(), JSONDocList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1058:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5390
		{
			mysqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: mysqDollar[3].exprUnion(), JSONDocList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1059:
		mysqDollar = mysqS[mysqpt-6 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5394
		{
			mysqLOCAL = &ast.JSONRemoveExpr{JSONDoc: mysqDollar[3].exprUnion(), PathList: mysqDollar[5].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1060:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5398
		{
			mysqLOCAL = &ast.JSONUnquoteExpr{JSONValue: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1061:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5403
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1062:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5407
		{
			mysqLOCAL = mysqDollar[2].convertTypeUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1063:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.JSONPathParam
//line mysql.y:5412
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1064:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.JSONPathParam
//line mysql.y:5416
		{
			mysqLOCAL = mysqDollar[2].jsonPathParamsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1065:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.JSONPathParam
//line mysql.y:5422
		{
			mysqLOCAL = []ast.JSONPathParam{mysqDollar[1].jsonPathParam}
		}
		mysqVAL.union = mysqLOCAL
	case 1066:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5426
		{
			mysqSLICE := (*[]ast.JSONPathParam)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].jsonPathParam)
		}
	case 1067:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5432
		{
			mysqVAL.jsonPathParam = ast.JSONPathParam(mysqDollar[1].exprUnion())
		}
	case 1068:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5436
		{
			mysqVAL.jsonPathParam = ast.JSONPathParam(mysqDollar[1].colNameUnion())
		}
	case 1069:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5442
		{
		}
	case 1070:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5444
		{
			mysqLOCAL = ast.IntervalDayHour
		}
		mysqVAL.union = mysqLOCAL
	case 1071:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5448
		{
			mysqLOCAL = ast.IntervalDayMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1072:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5452
		{
			mysqLOCAL = ast.IntervalDayMinute
		}
		mysqVAL.union = mysqLOCAL
	case 1073:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5456
		{
			mysqLOCAL = ast.IntervalDaySecond
		}
		mysqVAL.union = mysqLOCAL
	case 1074:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5460
		{
			mysqLOCAL = ast.IntervalHourMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1075:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5464
		{
			mysqLOCAL = ast.IntervalHourMinute
		}
		mysqVAL.union = mysqLOCAL
	case 1076:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5468
		{
			mysqLOCAL = ast.IntervalHourSecond
		}
		mysqVAL.union = mysqLOCAL
	case 1077:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5472
		{
			mysqLOCAL = ast.IntervalMinuteMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1078:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5476
		{
			mysqLOCAL = ast.IntervalMinuteSecond
		}
		mysqVAL.union = mysqLOCAL
	case 1079:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5480
		{
			mysqLOCAL = ast.IntervalSecondMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1080:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5484
		{
			mysqLOCAL = ast.IntervalYearMonth
		}
		mysqVAL.union = mysqLOCAL
	case 1081:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5490
		{
			mysqLOCAL = ast.IntervalDay
		}
		mysqVAL.union = mysqLOCAL
	case 1082:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5494
		{
			mysqLOCAL = ast.IntervalWeek
		}
		mysqVAL.union = mysqLOCAL
	case 1083:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5498
		{
			mysqLOCAL = ast.IntervalHour
		}
		mysqVAL.union = mysqLOCAL
	case 1084:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5502
		{
			mysqLOCAL = ast.IntervalMinute
		}
		mysqVAL.union = mysqLOCAL
	case 1085:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5506
		{
			mysqLOCAL = ast.IntervalMonth
		}
		mysqVAL.union = mysqLOCAL
	case 1086:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5510
		{
			mysqLOCAL = ast.IntervalQuarter
		}
		mysqVAL.union = mysqLOCAL
	case 1087:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5514
		{
			mysqLOCAL = ast.IntervalSecond
		}
		mysqVAL.union = mysqLOCAL
	case 1088:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5518
		{
			mysqLOCAL = ast.IntervalMicrosecond
		}
		mysqVAL.union = mysqLOCAL
	case 1089:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.IntervalTypes
//line mysql.y:5522
		{
			mysqLOCAL = ast.IntervalYear
		}
		mysqVAL.union = mysqLOCAL
	case 1092:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5532
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1093:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5536
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1094:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5540
		{
			mysqLOCAL = ast.NewIntLiteral(mysqDollar[2].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1095:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5544
		{
			mysqLOCAL = ast.NewArgument(mysqDollar[2].str[1:])
			bindVariable(mysqlex, mysqDollar[2].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 1096:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5555
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1097:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5559
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1098:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5563
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1099:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5567
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1100:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5571
		{
			mysqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: mysqDollar[3].selectExprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1101:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5577
		{
			mysqLOCAL = ast.NoOption
		}
		mysqVAL.union = mysqLOCAL
	case 1102:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5581
		{
			mysqLOCAL = ast.BooleanModeOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1103:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5585
		{
			mysqLOCAL = ast.NaturalLanguageModeOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1104:
		mysqDollar = mysqS[mysqpt-7 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5589
		{
			mysqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1105:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.MatchExprOption
//line mysql.y:5593
		{
			mysqLOCAL = ast.QueryExpansionOpt
		}
		mysqVAL.union = mysqLOCAL
	case 1106:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5599
		{
			mysqVAL.str = string(mysqDollar[1].colIdent.String())
		}
	case 1107:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5603
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1108:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5607
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1109:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5613
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1110:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5617
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[2].str), Length: ast.NewIntLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1111:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5621
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[2].str), Length: ast.NewIntLiteral(mysqDollar[4].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1112:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5627
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1113:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5631
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion(), Charset: mysqDollar[3].columnCharset}
		}
		mysqVAL.union = mysqLOCAL
	case 1114:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5635
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1115:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5639
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1116:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5643
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
			mysqLOCAL.Length = mysqDollar[2].LengthScaleOption.Length
			mysqLOCAL.Scale = mysqDollar[2].LengthScaleOption.Scale
		}
		mysqVAL.union = mysqLOCAL
	case 1117:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5649
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1118:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5653
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1119:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5657
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1120:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5661
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1121:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5665
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1122:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5669
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1123:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5673
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1124:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5677
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str), Length: mysqDollar[2].literalUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1125:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5681
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1126:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ConvertType
//line mysql.y:5685
		{
			mysqLOCAL = &ast.ConvertType{Type: string(mysqDollar[1].str)}
		}
		mysqVAL.union = mysqLOCAL
	case 1127:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5691
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1128:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5695
		{
			mysqLOCAL = mysqDollar[1].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1129:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5700
		{
			mysqVAL.str = string("")
		}
	case 1130:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:5704
		{
			mysqVAL.str = " separator " + sql_types.EncodeStringSQL(mysqDollar[2].str)
		}
	case 1131:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.When
//line mysql.y:5710
		{
			mysqLOCAL = []*ast.When{mysqDollar[1].whenUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1132:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:5714
		{
			mysqSLICE := (*[]*ast.When)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[2].whenUnion())
		}
	case 1133:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.When
//line mysql.y:5720
		{
			mysqLOCAL = &ast.When{Cond: mysqDollar[2].exprUnion(), Val: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1134:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5725
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1135:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5729
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1136:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:5735
		{
			mysqLOCAL = &ast.ColName{Name: mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1137:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:5739
		{
			mysqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: mysqDollar[1].tableIdent}, Name: mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1138:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.ColName
//line mysql.y:5743
		{
			mysqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: mysqDollar[1].tableIdent, Name: mysqDollar[3].tableIdent}, Name: mysqDollar[5].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1139:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5749
		{
			// TODO(sougou): ast.Deprecate this construct.
			if mysqDollar[1].colIdent.Lowered() != "value" {
				mysqlex.Error("expecting value after next")
				return 1
			}
			mysqLOCAL = ast.NewIntLiteral("1")
		}
		mysqVAL.union = mysqLOCAL
	case 1140:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5758
		{
			mysqLOCAL = ast.NewIntLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1141:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5762
		{
			mysqLOCAL = ast.NewArgument(mysqDollar[1].str[1:])
			bindVariable(mysqlex, mysqDollar[1].str[1:])
		}
		mysqVAL.union = mysqLOCAL
	case 1142:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:5768
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1143:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:5772
		{
			mysqLOCAL = mysqDollar[3].exprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1144:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5777
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1145:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:5781
		{
			mysqLOCAL = mysqDollar[2].exprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1146:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5786
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1147:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5790
		{
			mysqLOCAL = mysqDollar[1].orderByUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1148:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5796
		{
			mysqLOCAL = mysqDollar[3].orderByUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1149:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderBy
//line mysql.y:5802
		{
			mysqLOCAL = ast.OrderBy{mysqDollar[1].orderUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1150:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5806
		{
			mysqSLICE := (*ast.OrderBy)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].orderUnion())
		}
	case 1151:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Order
//line mysql.y:5812
		{
			mysqLOCAL = &ast.Order{Expr: mysqDollar[1].exprUnion(), Direction: mysqDollar[2].orderDirectionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1152:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.OrderDirection
//line mysql.y:5817
		{
			mysqLOCAL = ast.AscOrder
		}
		mysqVAL.union = mysqLOCAL
	case 1153:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderDirection
//line mysql.y:5821
		{
			mysqLOCAL = ast.AscOrder
		}
		mysqVAL.union = mysqLOCAL
	case 1154:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.OrderDirection
//line mysql.y:5825
		{
			mysqLOCAL = ast.DescOrder
		}
		mysqVAL.union = mysqLOCAL
	case 1155:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5830
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1156:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5834
		{
			mysqLOCAL = mysqDollar[1].limitUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1157:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5840
		{
			mysqLOCAL = &ast.Limit{Rowcount: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1158:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5844
		{
			mysqLOCAL = &ast.Limit{Offset: mysqDollar[2].exprUnion(), Rowcount: mysqDollar[4].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1159:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Limit
//line mysql.y:5848
		{
			mysqLOCAL = &ast.Limit{Offset: mysqDollar[4].exprUnion(), Rowcount: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1160:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:5853
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1161:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:5857
		{
			mysqLOCAL = []ast.AlterOption{mysqDollar[1].alterOptionUnion(), mysqDollar[2].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1162:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:5861
		{
			mysqLOCAL = []ast.AlterOption{mysqDollar[1].alterOptionUnion(), mysqDollar[2].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1163:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:5865
		{
			mysqLOCAL = []ast.AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1164:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []ast.AlterOption
//line mysql.y:5869
		{
			mysqLOCAL = []ast.AlterOption{mysqDollar[1].alterOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1165:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5876
		{
			mysqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		mysqVAL.union = mysqLOCAL
	case 1166:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5880
		{
			mysqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		mysqVAL.union = mysqLOCAL
	case 1167:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5884
		{
			mysqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		mysqVAL.union = mysqLOCAL
	case 1168:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5888
		{
			mysqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		mysqVAL.union = mysqLOCAL
	case 1169:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5894
		{
			mysqLOCAL = ast.AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1170:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5898
		{
			mysqLOCAL = ast.AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1171:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5902
		{
			mysqLOCAL = ast.AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1172:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.AlterOption
//line mysql.y:5906
		{
			mysqLOCAL = ast.AlgorithmValue(mysqDollar[3].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1173:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5911
		{
			mysqVAL.str = ""
		}
	case 1174:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5915
		{
			mysqVAL.str = string(mysqDollar[3].str)
		}
	case 1175:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5919
		{
			mysqVAL.str = string(mysqDollar[3].str)
		}
	case 1176:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5923
		{
			mysqVAL.str = string(mysqDollar[3].str)
		}
	case 1177:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5928
		{
			mysqVAL.str = ""
		}
	case 1178:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:5932
		{
			mysqVAL.str = mysqDollar[3].str
		}
	case 1179:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5938
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1180:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5942
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1181:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5947
		{
			mysqVAL.str = ""
		}
	case 1182:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:5951
		{
			mysqVAL.str = mysqDollar[2].str
		}
	case 1183:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:5956
		{
			mysqVAL.str = "cascaded"
		}
	case 1184:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5960
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1185:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:5964
		{
			mysqVAL.str = string(mysqDollar[1].str)
		}
	case 1186:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:5969
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1187:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:5973
		{
			mysqLOCAL = mysqDollar[3].definerUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1188:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:5979
		{
			mysqLOCAL = &ast.Definer{
				Name: string(mysqDollar[1].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1189:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:5985
		{
			mysqLOCAL = &ast.Definer{
				Name: string(mysqDollar[1].str),
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1190:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Definer
//line mysql.y:5991
		{
			mysqLOCAL = &ast.Definer{
				Name:    mysqDollar[1].str,
				Address: mysqDollar[2].str,
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1191:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6000
		{
			mysqVAL.str = sql_types.EncodeStringSQL(mysqDollar[1].str)
		}
	case 1192:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6004
		{
			mysqVAL.str = ast.FormatIdentifier(mysqDollar[1].str)
		}
	case 1193:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6009
		{
			mysqVAL.str = ""
		}
	case 1194:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6013
		{
			mysqVAL.str = ast.FormatAddress(mysqDollar[1].str)
		}
	case 1195:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.Lock
//line mysql.y:6019
		{
			mysqLOCAL = ast.ForUpdateLock
		}
		mysqVAL.union = mysqLOCAL
	case 1196:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL ast.Lock
//line mysql.y:6023
		{
			mysqLOCAL = ast.ShareModeLock
		}
		mysqVAL.union = mysqLOCAL
	case 1197:
		mysqDollar = mysqS[mysqpt-9 : mysqpt+1]
		var mysqLOCAL *ast.SelectInto
//line mysql.y:6029
		{
			mysqLOCAL = &ast.SelectInto{Type: ast.IntoOutfileS3, FileName: sql_types.EncodeStringSQL(mysqDollar[4].str), Charset: mysqDollar[5].columnCharset, FormatOption: mysqDollar[6].str, ExportOption: mysqDollar[7].str, Manifest: mysqDollar[8].str, Overwrite: mysqDollar[9].str}
		}
		mysqVAL.union = mysqLOCAL
	case 1198:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SelectInto
//line mysql.y:6033
		{
			mysqLOCAL = &ast.SelectInto{Type: ast.IntoDumpfile, FileName: sql_types.EncodeStringSQL(mysqDollar[3].str), Charset: ast.ColumnCharset{}, FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
		mysqVAL.union = mysqLOCAL
	case 1199:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.SelectInto
//line mysql.y:6037
		{
			mysqLOCAL = &ast.SelectInto{Type: ast.IntoOutfile, FileName: sql_types.EncodeStringSQL(mysqDollar[3].str), Charset: mysqDollar[4].columnCharset, FormatOption: "", ExportOption: mysqDollar[5].str, Manifest: "", Overwrite: ""}
		}
		mysqVAL.union = mysqLOCAL
	case 1200:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6042
		{
			mysqVAL.str = ""
		}
	case 1201:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6046
		{
			mysqVAL.str = " format csv" + mysqDollar[3].str
		}
	case 1202:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6050
		{
			mysqVAL.str = " format text" + mysqDollar[3].str
		}
	case 1203:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6055
		{
			mysqVAL.str = ""
		}
	case 1204:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6059
		{
			mysqVAL.str = " header"
		}
	case 1205:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6064
		{
			mysqVAL.str = ""
		}
	case 1206:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6068
		{
			mysqVAL.str = " manifest on"
		}
	case 1207:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6072
		{
			mysqVAL.str = " manifest off"
		}
	case 1208:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6077
		{
			mysqVAL.str = ""
		}
	case 1209:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6081
		{
			mysqVAL.str = " overwrite on"
		}
	case 1210:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6085
		{
			mysqVAL.str = " overwrite off"
		}
	case 1211:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6091
		{
			mysqVAL.str = mysqDollar[1].str + mysqDollar[2].str
		}
	case 1212:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6096
		{
			mysqVAL.str = ""
		}
	case 1213:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6100
		{
			mysqVAL.str = " lines" + mysqDollar[2].str
		}
	case 1214:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6106
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 1215:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6110
		{
			mysqVAL.str = mysqDollar[1].str + mysqDollar[2].str
		}
	case 1216:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6116
		{
			mysqVAL.str = " starting by " + sql_types.EncodeStringSQL(mysqDollar[3].str)
		}
	case 1217:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6120
		{
			mysqVAL.str = " terminated by " + sql_types.EncodeStringSQL(mysqDollar[3].str)
		}
	case 1218:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6125
		{
			mysqVAL.str = ""
		}
	case 1219:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6129
		{
			mysqVAL.str = " " + mysqDollar[1].str + mysqDollar[2].str
		}
	case 1220:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6135
		{
			mysqVAL.str = mysqDollar[1].str
		}
	case 1221:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6139
		{
			mysqVAL.str = mysqDollar[1].str + mysqDollar[2].str
		}
	case 1222:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6145
		{
			mysqVAL.str = " terminated by " + sql_types.EncodeStringSQL(mysqDollar[3].str)
		}
	case 1223:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
//line mysql.y:6149
		{
			mysqVAL.str = mysqDollar[1].str + " enclosed by " + sql_types.EncodeStringSQL(mysqDollar[4].str)
		}
	case 1224:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6153
		{
			mysqVAL.str = " escaped by " + sql_types.EncodeStringSQL(mysqDollar[3].str)
		}
	case 1225:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6158
		{
			mysqVAL.str = ""
		}
	case 1226:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6162
		{
			mysqVAL.str = " optionally"
		}
	case 1227:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6175
		{
			mysqLOCAL = &ast.Insert{Rows: mysqDollar[2].valuesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1228:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6179
		{
			mysqLOCAL = &ast.Insert{Rows: mysqDollar[1].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1229:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6183
		{
			mysqLOCAL = &ast.Insert{Columns: mysqDollar[2].columnsUnion(), Rows: mysqDollar[5].valuesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1230:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6187
		{
			mysqLOCAL = &ast.Insert{Rows: mysqDollar[4].valuesUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1231:
		mysqDollar = mysqS[mysqpt-4 : mysqpt+1]
		var mysqLOCAL *ast.Insert
//line mysql.y:6191
		{
			mysqLOCAL = &ast.Insert{Columns: mysqDollar[2].columnsUnion(), Rows: mysqDollar[4].selStmtUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1232:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:6197
		{
			mysqLOCAL = ast.Columns{mysqDollar[1].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1233:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.Columns
//line mysql.y:6201
		{
			mysqLOCAL = ast.Columns{mysqDollar[3].colIdent}
		}
		mysqVAL.union = mysqLOCAL
	case 1234:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6205
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].colIdent)
		}
	case 1235:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
//line mysql.y:6209
		{
			mysqSLICE := (*ast.Columns)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[5].colIdent)
		}
	case 1236:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.UpdateExprs
//line mysql.y:6214
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1237:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.UpdateExprs
//line mysql.y:6218
		{
			mysqLOCAL = mysqDollar[5].updateExprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1238:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Values
//line mysql.y:6224
		{
			mysqLOCAL = ast.Values{mysqDollar[1].valTupleUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1239:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6228
		{
			mysqSLICE := (*ast.Values)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].valTupleUnion())
		}
	case 1240:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.ValTuple
//line mysql.y:6234
		{
			mysqLOCAL = mysqDollar[1].valTupleUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1241:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL ast.ValTuple
//line mysql.y:6238
		{
			mysqLOCAL = ast.ValTuple{}
		}
		mysqVAL.union = mysqLOCAL
	case 1242:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL ast.ValTuple
//line mysql.y:6244
		{
			mysqLOCAL = ast.ValTuple(mysqDollar[2].exprsUnion())
		}
		mysqVAL.union = mysqLOCAL
	case 1243:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6249
		{
			if len(mysqDollar[1].valTupleUnion()) == 1 {
				mysqLOCAL = mysqDollar[1].valTupleUnion()[0]
			} else {
				mysqLOCAL = mysqDollar[1].valTupleUnion()
			}
		}
		mysqVAL.union = mysqLOCAL
	case 1244:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.UpdateExprs
//line mysql.y:6259
		{
			mysqLOCAL = ast.UpdateExprs{mysqDollar[1].updateExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1245:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6263
		{
			mysqSLICE := (*ast.UpdateExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].updateExprUnion())
		}
	case 1246:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.UpdateExpr
//line mysql.y:6269
		{
			mysqLOCAL = &ast.UpdateExpr{Name: mysqDollar[1].colNameUnion(), Expr: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1247:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.SetExprs
//line mysql.y:6275
		{
			mysqLOCAL = ast.SetExprs{mysqDollar[1].setExprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1248:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
//line mysql.y:6279
		{
			mysqSLICE := (*ast.SetExprs)(mysqIaddr(mysqVAL.union))
			*mysqSLICE = append(*mysqSLICE, mysqDollar[3].setExprUnion())
		}
	case 1249:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6285
		{
			mysqLOCAL = &ast.SetExpr{Name: mysqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		mysqVAL.union = mysqLOCAL
	case 1250:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6289
		{
			mysqLOCAL = &ast.SetExpr{Name: mysqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		mysqVAL.union = mysqLOCAL
	case 1251:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6293
		{
			mysqLOCAL = &ast.SetExpr{Name: mysqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: mysqDollar[3].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1252:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6297
		{
			mysqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(mysqDollar[1].str)), Scope: ast.ImplicitScope, Expr: mysqDollar[2].exprUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1253:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.SetExpr
//line mysql.y:6301
		{
			mysqDollar[2].setExprUnion().Scope = mysqDollar[1].scopeUnion()
			mysqLOCAL = mysqDollar[2].setExprUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1255:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
//line mysql.y:6309
		{
			mysqVAL.str = "charset"
		}
	case 1258:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6319
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[1].colIdent.String())
		}
		mysqVAL.union = mysqLOCAL
	case 1259:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6323
		{
			mysqLOCAL = ast.NewStrLiteral(mysqDollar[1].str)
		}
		mysqVAL.union = mysqLOCAL
	case 1260:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Expr
//line mysql.y:6327
		{
			mysqLOCAL = &ast.Default{}
		}
		mysqVAL.union = mysqLOCAL
	case 1263:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6336
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1264:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6338
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1265:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6341
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1266:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6343
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1267:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6346
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1268:
		mysqDollar = mysqS[mysqpt-3 : mysqpt+1]
		var mysqLOCAL bool
//line mysql.y:6348
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1269:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Ignore
//line mysql.y:6351
		{
			mysqLOCAL = false
		}
		mysqVAL.union = mysqLOCAL
	case 1270:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Ignore
//line mysql.y:6353
		{
			mysqLOCAL = true
		}
		mysqVAL.union = mysqLOCAL
	case 1271:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6356
		{
			mysqVAL.empty = struct{}{}
		}
	case 1272:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6358
		{
			mysqVAL.empty = struct{}{}
		}
	case 1273:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6360
		{
			mysqVAL.empty = struct{}{}
		}
	case 1274:
		mysqDollar = mysqS[mysqpt-5 : mysqpt+1]
		var mysqLOCAL ast.Statement
//line mysql.y:6364
		{
			mysqLOCAL = &ast.CallProc{Name: mysqDollar[2].tableName, Params: mysqDollar[4].exprsUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1275:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:6369
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1276:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL ast.Exprs
//line mysql.y:6373
		{
			mysqLOCAL = mysqDollar[1].exprsUnion()
		}
		mysqVAL.union = mysqLOCAL
	case 1277:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:6378
		{
			mysqLOCAL = nil
		}
		mysqVAL.union = mysqLOCAL
	case 1278:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
		var mysqLOCAL []*ast.IndexOption
//line mysql.y:6380
		{
			mysqLOCAL = []*ast.IndexOption{mysqDollar[1].indexOptionUnion()}
		}
		mysqVAL.union = mysqLOCAL
	case 1279:
		mysqDollar = mysqS[mysqpt-2 : mysqpt+1]
		var mysqLOCAL *ast.IndexOption
//line mysql.y:6384
		{
			mysqLOCAL = &ast.IndexOption{Name: string(mysqDollar[1].str), String: string(mysqDollar[2].colIdent.String())}
		}
		mysqVAL.union = mysqLOCAL
	case 1280:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6390
		{
			mysqVAL.colIdent = mysqDollar[1].colIdent
		}
	case 1281:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6394
		{
			mysqVAL.colIdent = ast.NewColIdent(string(mysqDollar[1].str))
		}
	case 1283:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6401
		{
			mysqVAL.colIdent = ast.NewColIdent(string(mysqDollar[1].str))
		}
	case 1284:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6407
		{
			mysqVAL.tableIdent = ast.NewTableIdent(string(mysqDollar[1].colIdent.String()))
		}
	case 1285:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6411
		{
			mysqVAL.tableIdent = ast.NewTableIdent(string(mysqDollar[1].str))
		}
	case 1286:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6417
		{
			mysqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1287:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6421
		{
			mysqVAL.tableIdent = mysqDollar[1].tableIdent
		}
	case 1289:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6428
		{
			mysqVAL.tableIdent = ast.NewTableIdent(string(mysqDollar[1].str))
		}
	case 1779:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6942
		{
			if incNesting(mysqlex) {
				mysqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1780:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6951
		{
			decNesting(mysqlex)
		}
	case 1781:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6956
		{
			skipToEnd(mysqlex)
		}
	case 1782:
		mysqDollar = mysqS[mysqpt-0 : mysqpt+1]
//line mysql.y:6961
		{
			skipToEnd(mysqlex)
		}
	case 1783:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6965
		{
			skipToEnd(mysqlex)
		}
	case 1784:
		mysqDollar = mysqS[mysqpt-1 : mysqpt+1]
//line mysql.y:6969
		{
			skipToEnd(mysqlex)
		}
	}
	goto mysqstack /* stack new state and value */
}
