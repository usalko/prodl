// Code generated by goyacc -v y.output -fast-append -p sqlite3 -o sqlite3.go sqlite3.y. DO NOT EDIT.

//line sqlite3.y:18
package sqlite3

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line sqlite3.y:18

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(sqlite3lex sqlite3Lexer, stmt ast.Statement) {
	sqlite3lex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(sqlite3lex sqlite3Lexer, allow bool) {
	sqlite3lex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(sqlite3lex sqlite3Lexer, node ast.Statement) {
	sqlite3lex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(sqlite3lex sqlite3Lexer) bool {
	sqlite3lex.(tokenizer.Tokenizer).IncNesting()
	if sqlite3lex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(sqlite3lex sqlite3Lexer) {
	sqlite3lex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(sqlite3lex sqlite3Lexer) {
	sqlite3lex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(sqlite3lex sqlite3Lexer, bvar string) {
	sqlite3lex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const ARRAY_MAX_CARDINALITY = 57642
const CHARACTER_SET_CATALOG = 57643
const COMMAND_FUNCTION_CODE = 57644
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57645
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57646
const DATETIME_INTERVAL_CODE = 57647
const DATETIME_INTERVAL_PRECISION = 57648
const DYNAMIC_FUNCTION_CODE = 57649
const END_EXEC = 57650
const PARAMETER_ORDINAL_POSITION = 57651
const PARAMETER_SPECIFIC_CATALOG = 57652
const PARAMETER_SPECIFIC_NAME = 57653
const PARAMETER_SPECIFIC_SCHEMA = 57654
const RETURNED_OCTET_LENGTH = 57655
const TRANSACTIONS_COMMITTED = 57656
const TRANSACTIONS_ROLLED_BACK = 57657
const USER_DEFINED_TYPE_CATALOG = 57658
const USER_DEFINED_TYPE_CODE = 57659
const USER_DEFINED_TYPE_NAME = 57660
const USER_DEFINED_TYPE_SCHEMA = 57661
const VALUES = 57662
const LAST_INSERT_ID = 57663
const NEXT = 57664
const VALUE = 57665
const SHARE = 57666
const MODE = 57667
const SQL_NO_CACHE = 57668
const SQL_CACHE = 57669
const SQL_CALC_FOUND_ROWS = 57670
const JOIN = 57671
const STRAIGHT_JOIN = 57672
const LEFT = 57673
const RIGHT = 57674
const INNER = 57675
const OUTER = 57676
const CROSS = 57677
const NATURAL = 57678
const USE = 57679
const FORCE = 57680
const ON = 57681
const USING = 57682
const INPLACE = 57683
const COPY = 57684
const INSTANT = 57685
const ALGORITHM = 57686
const NONE = 57687
const SHARED = 57688
const EXCLUSIVE = 57689
const SUBQUERY_AS_EXPR = 57690
const ID = 57691
const AT_ID = 57692
const AT_AT_ID = 57693
const HEX = 57694
const STRING = 57695
const NCHAR_STRING = 57696
const INTEGRAL = 57697
const FLOAT = 57698
const DECIMAL = 57699
const HEXNUM = 57700
const VALUE_ARG = 57701
const LIST_ARG = 57702
const COMMENT_KEYWORD = 57703
const BIT_LITERAL = 57704
const COMPRESSION = 57705
const JSON_PRETTY = 57706
const JSON_STORAGE_SIZE = 57707
const JSON_STORAGE_FREE = 57708
const JSON_CONTAINS = 57709
const JSON_CONTAINS_PATH = 57710
const JSON_EXTRACT = 57711
const JSON_KEYS = 57712
const JSON_OVERLAPS = 57713
const JSON_SEARCH = 57714
const JSON_VALUE = 57715
const EXTRACT = 57716
const NULL = 57717
const TRUE = 57718
const FALSE = 57719
const OFF = 57720
const DISCARD = 57721
const IMPORT = 57722
const ENABLE = 57723
const DISABLE = 57724
const TABLESPACE = 57725
const VIRTUAL = 57726
const STORED = 57727
const BOTH = 57728
const LEADING = 57729
const TRAILING = 57730
const EMPTY_FROM_CLAUSE = 57731
const LOWER_THAN_CHARSET = 57732
const CHARSET = 57733
const UNIQUE = 57734
const KEY = 57735
const EXPRESSION_PREC_SETTER = 57736
const OR = 57737
const AND = 57738
const NOT = 57739
const BETWEEN = 57740
const CASE = 57741
const WHEN = 57742
const THEN = 57743
const ELSE = 57744
const END = 57745
const LE = 57746
const GE = 57747
const NE = 57748
const NULL_SAFE_EQUAL = 57749
const IS = 57750
const LIKE = 57751
const REGEXP = 57752
const IN = 57753
const SHIFT_LEFT = 57754
const SHIFT_RIGHT = 57755
const DIV = 57756
const MOD = 57757
const UNARY = 57758
const COLLATE = 57759
const BINARY = 57760
const UNDERSCORE_ARMSCII8 = 57761
const UNDERSCORE_ASCII = 57762
const UNDERSCORE_BIG5 = 57763
const UNDERSCORE_BINARY = 57764
const UNDERSCORE_CP1250 = 57765
const UNDERSCORE_CP1251 = 57766
const UNDERSCORE_CP1256 = 57767
const UNDERSCORE_CP1257 = 57768
const UNDERSCORE_CP850 = 57769
const UNDERSCORE_CP852 = 57770
const UNDERSCORE_CP866 = 57771
const UNDERSCORE_CP932 = 57772
const UNDERSCORE_DEC8 = 57773
const UNDERSCORE_EUCJPMS = 57774
const UNDERSCORE_EUCKR = 57775
const UNDERSCORE_GB18030 = 57776
const UNDERSCORE_GB2312 = 57777
const UNDERSCORE_GBK = 57778
const UNDERSCORE_GEOSTD8 = 57779
const UNDERSCORE_GREEK = 57780
const UNDERSCORE_HEBREW = 57781
const UNDERSCORE_HP8 = 57782
const UNDERSCORE_KEYBCS2 = 57783
const UNDERSCORE_KOI8R = 57784
const UNDERSCORE_KOI8U = 57785
const UNDERSCORE_LATIN1 = 57786
const UNDERSCORE_LATIN2 = 57787
const UNDERSCORE_LATIN5 = 57788
const UNDERSCORE_LATIN7 = 57789
const UNDERSCORE_MACCE = 57790
const UNDERSCORE_MACROMAN = 57791
const UNDERSCORE_SJIS = 57792
const UNDERSCORE_SWE7 = 57793
const UNDERSCORE_TIS620 = 57794
const UNDERSCORE_UCS2 = 57795
const UNDERSCORE_UJIS = 57796
const UNDERSCORE_UTF16 = 57797
const UNDERSCORE_UTF16LE = 57798
const UNDERSCORE_UTF32 = 57799
const UNDERSCORE_UTF8 = 57800
const UNDERSCORE_UTF8MB4 = 57801
const UNDERSCORE_UTF8MB3 = 57802
const INTERVAL = 57803
const JSON_EXTRACT_OP = 57804
const JSON_UNQUOTE_EXTRACT_OP = 57805
const CREATE = 57806
const ALTER = 57807
const DROP = 57808
const RENAME = 57809
const ANALYZE = 57810
const ANALYSE = 57811
const ADD = 57812
const FLUSH = 57813
const CHANGE = 57814
const MODIFY = 57815
const DEALLOCATE = 57816
const REVERT = 57817
const SCHEMA = 57818
const TABLE = 57819
const INDEX = 57820
const VIEW = 57821
const TO = 57822
const IGNORE = 57823
const IF = 57824
const PRIMARY = 57825
const COLUMN = 57826
const SPATIAL = 57827
const FULLTEXT = 57828
const KEY_BLOCK_SIZE = 57829
const CHECK = 57830
const INDEXES = 57831
const ACTION = 57832
const CASCADE = 57833
const CONSTRAINT = 57834
const FOREIGN = 57835
const NO = 57836
const REFERENCES = 57837
const RESTRICT = 57838
const SHOW = 57839
const DESCRIBE = 57840
const EXPLAIN = 57841
const DATE = 57842
const ESCAPE = 57843
const REPAIR = 57844
const OPTIMIZE = 57845
const TRUNCATE = 57846
const COALESCE = 57847
const EXCHANGE = 57848
const REBUILD = 57849
const PARTITIONING = 57850
const REMOVE = 57851
const PREPARE = 57852
const EXECUTE = 57853
const MAXVALUE = 57854
const PARTITION = 57855
const REORGANIZE = 57856
const LESS = 57857
const THAN = 57858
const PROCEDURE = 57859
const TRIGGER = 57860
const VINDEX = 57861
const VINDEXES = 57862
const DIRECTORY = 57863
const NAME = 57864
const UPGRADE = 57865
const STATUS = 57866
const VARIABLES = 57867
const WARNINGS = 57868
const CASCADED = 57869
const DEFINER = 57870
const OPTION = 57871
const SQL = 57872
const UNDEFINED = 57873
const SEQUENCE = 57874
const MERGE = 57875
const TEMPORARY = 57876
const TEMPTABLE = 57877
const INVOKER = 57878
const SECURITY = 57879
const FIRST = 57880
const AFTER = 57881
const LAST = 57882
const FAIL = 57883
const GLOB = 57884
const INDEXED = 57885
const PRAGMA = 57886
const RAISE = 57887
const CANCEL = 57888
const RETRY = 57889
const COMPLETE = 57890
const CLEANUP = 57891
const THROTTLE = 57892
const UNTHROTTLE = 57893
const EXPIRE = 57894
const RATIO = 57895
const BEGIN = 57896
const START = 57897
const TRANSACTION = 57898
const COMMIT = 57899
const ROLLBACK = 57900
const SAVEPOINT = 57901
const RELEASE = 57902
const WORK = 57903
const BIT = 57904
const TINYINT = 57905
const SMALLINT = 57906
const MEDIUMINT = 57907
const INT = 57908
const INTEGER = 57909
const BIGINT = 57910
const INTNUM = 57911
const REAL = 57912
const DOUBLE = 57913
const FLOAT_TYPE = 57914
const DECIMAL_TYPE = 57915
const NUMERIC = 57916
const TIME = 57917
const TIMESTAMP = 57918
const DATETIME = 57919
const YEAR = 57920
const CHAR = 57921
const VARCHAR = 57922
const BOOL = 57923
const CHARACTER = 57924
const VARBINARY = 57925
const NCHAR = 57926
const TEXT = 57927
const TINYTEXT = 57928
const MEDIUMTEXT = 57929
const LONGTEXT = 57930
const BLOB = 57931
const TINYBLOB = 57932
const MEDIUMBLOB = 57933
const LONGBLOB = 57934
const JSON = 57935
const JSON_SCHEMA_VALID = 57936
const JSON_SCHEMA_VALIDATION_REPORT = 57937
const ENUM = 57938
const GEOMETRY = 57939
const POINT = 57940
const LINESTRING = 57941
const POLYGON = 57942
const GEOMETRYCOLLECTION = 57943
const MULTIPOINT = 57944
const MULTILINESTRING = 57945
const MULTIPOLYGON = 57946
const ASCII = 57947
const UNICODE = 57948
const NULLX = 57949
const AUTOINCREMENT = 57950
const APPROXNUM = 57951
const SIGNED = 57952
const UNSIGNED = 57953
const ZEROFILL = 57954
const CODE = 57955
const COLLATION = 57956
const COLUMNS = 57957
const DATABASES = 57958
const ENGINES = 57959
const EVENT = 57960
const EXTENDED = 57961
const FIELDS = 57962
const FULL = 57963
const FUNCTION = 57964
const GTID_EXECUTED = 57965
const KEYSPACES = 57966
const OPEN = 57967
const PLUGINS = 57968
const PRIVILEGES = 57969
const PROCESSLIST = 57970
const SCHEMAS = 57971
const TABLES = 57972
const TRIGGERS = 57973
const USER = 57974
const VGTID_EXECUTED = 57975
const VSCHEMA = 57976
const NAMES = 57977
const GLOBAL = 57978
const SESSION = 57979
const ISOLATION = 57980
const LEVEL = 57981
const READ = 57982
const WRITE = 57983
const ONLY = 57984
const REPEATABLE = 57985
const COMMITTED = 57986
const UNCOMMITTED = 57987
const SERIALIZABLE = 57988
const CURRENT_TIMESTAMP = 57989
const DATABASE = 57990
const CURRENT_DATE = 57991
const NOW = 57992
const CURRENT_TIME = 57993
const LOCALTIME = 57994
const LOCALTIMESTAMP = 57995
const CURRENT_USER = 57996
const UTC_DATE = 57997
const UTC_TIME = 57998
const UTC_TIMESTAMP = 57999
const DAY = 58000
const DAY_HOUR = 58001
const DAY_MICROSECOND = 58002
const DAY_MINUTE = 58003
const DAY_SECOND = 58004
const HOUR = 58005
const HOUR_MICROSECOND = 58006
const HOUR_MINUTE = 58007
const HOUR_SECOND = 58008
const MICROSECOND = 58009
const MINUTE = 58010
const MINUTE_MICROSECOND = 58011
const MINUTE_SECOND = 58012
const MONTH = 58013
const QUARTER = 58014
const SECOND = 58015
const SECOND_MICROSECOND = 58016
const YEAR_MONTH = 58017
const WEEK = 58018
const REPLACE = 58019
const CONVERT = 58020
const CAST = 58021
const SUBSTR = 58022
const SUBSTRING = 58023
const GROUP_CONCAT = 58024
const SEPARATOR = 58025
const TIMESTAMPADD = 58026
const TIMESTAMPDIFF = 58027
const WEIGHT_STRING = 58028
const LTRIM = 58029
const RTRIM = 58030
const TRIM = 58031
const JSON_ARRAY = 58032
const JSON_OBJECT = 58033
const JSON_QUOTE = 58034
const JSON_DEPTH = 58035
const JSON_TYPE = 58036
const JSON_LENGTH = 58037
const JSON_VALID = 58038
const JSON_ARRAY_APPEND = 58039
const JSON_ARRAY_INSERT = 58040
const JSON_INSERT = 58041
const JSON_MERGE = 58042
const JSON_MERGE_PATCH = 58043
const JSON_MERGE_PRESERVE = 58044
const JSON_REMOVE = 58045
const JSON_REPLACE = 58046
const JSON_SET = 58047
const JSON_UNQUOTE = 58048
const MATCH = 58049
const AGAINST = 58050
const BOOLEAN = 58051
const LANGUAGE = 58052
const WITH = 58053
const QUERY = 58054
const EXPANSION = 58055
const WITHOUT = 58056
const VALIDATION = 58057
const UNUSED = 58058
const ARRAY = 58059
const BYTE = 58060
const CUME_DIST = 58061
const DESCRIPTION = 58062
const DENSE_RANK = 58063
const EMPTY = 58064
const EXCEPT = 58065
const FIRST_VALUE = 58066
const GROUPING = 58067
const GROUPS = 58068
const JSON_TABLE = 58069
const LAG = 58070
const LAST_VALUE = 58071
const LATERAL = 58072
const LEAD = 58073
const NTH_VALUE = 58074
const NTILE = 58075
const OF = 58076
const OVER = 58077
const PERCENT_RANK = 58078
const RANK = 58079
const RECURSIVE = 58080
const ROW_NUMBER = 58081
const SYSTEM = 58082
const WINDOW = 58083
const ACTIVE = 58084
const ADMIN = 58085
const AUTOEXTEND_SIZE = 58086
const BUCKETS = 58087
const CLONE = 58088
const COLUMN_FORMAT = 58089
const COMPONENT = 58090
const DEFINITION = 58091
const ENFORCED = 58092
const ENGINE_ATTRIBUTE = 58093
const EXCLUDE = 58094
const FOLLOWING = 58095
const GEOMCOLLECTION = 58096
const GET_MASTER_PUBLIC_KEY = 58097
const HISTOGRAM = 58098
const HISTORY = 58099
const INACTIVE = 58100
const INVISIBLE = 58101
const LOCKED = 58102
const MASTER_COMPRESSION_ALGORITHMS = 58103
const MASTER_PUBLIC_KEY_PATH = 58104
const MASTER_TLS_CIPHERSUITES = 58105
const MASTER_ZSTD_COMPRESSION_LEVEL = 58106
const NESTED = 58107
const NETWORK_NAMESPACE = 58108
const NOWAIT = 58109
const NULLS = 58110
const OJ = 58111
const OLD = 58112
const OPTIONAL = 58113
const ORDINALITY = 58114
const ORGANIZATION = 58115
const OTHERS = 58116
const PARTIAL = 58117
const PATH = 58118
const PERSIST = 58119
const PERSIST_ONLY = 58120
const PRECEDING = 58121
const PRIVILEGE_CHECKS_USER = 58122
const PROCESS = 58123
const RANDOM = 58124
const REFERENCE = 58125
const REQUIRE_ROW_FORMAT = 58126
const RESOURCE = 58127
const RESPECT = 58128
const RESTART = 58129
const RETAIN = 58130
const REUSE = 58131
const ROLE = 58132
const SECONDARY = 58133
const SECONDARY_ENGINE = 58134
const SECONDARY_ENGINE_ATTRIBUTE = 58135
const SECONDARY_LOAD = 58136
const SECONDARY_UNLOAD = 58137
const SIMPLE = 58138
const SKIP = 58139
const SRID = 58140
const THREAD_PRIORITY = 58141
const TIES = 58142
const UNBOUNDED = 58143
const VCPU = 58144
const VISIBLE = 58145
const RETURNING = 58146
const FORMAT = 58147
const TREE = 58148
const TRADITIONAL = 58149
const LOCAL = 58150
const LOW_PRIORITY = 58151
const NO_WRITE_TO_BINLOG = 58152
const LOGS = 58153
const ERROR = 58154
const GENERAL = 58155
const HOSTS = 58156
const OPTIMIZER_COSTS = 58157
const USER_RESOURCES = 58158
const SLOW = 58159
const CHANNEL = 58160
const RELAY = 58161
const EXPORT = 58162
const AVG_ROW_LENGTH = 58163
const CONNECTION = 58164
const CHECKSUM = 58165
const DELAY_KEY_WRITE = 58166
const ENCRYPTION = 58167
const INSERT_METHOD = 58168
const MAX_ROWS = 58169
const MIN_ROWS = 58170
const PACK_KEYS = 58171
const PASSWORD = 58172
const FIXED = 58173
const DYNAMIC = 58174
const COMPRESSED = 58175
const REDUNDANT = 58176
const COMPACT = 58177
const ROW_FORMAT = 58178
const STATS_AUTO_RECALC = 58179
const STATS_PERSISTENT = 58180
const STATS_SAMPLE_PAGES = 58181
const STORAGE = 58182
const MEMORY = 58183
const DISK = 58184

var sqlite3Toknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"FAIL",
	"GLOB",
	"INDEXED",
	"PRAGMA",
	"RAISE",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTOINCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var sqlite3Statenames = [...]string{}

const sqlite3EofCode = 1
const sqlite3ErrCode = 2
const sqlite3InitialStackSize = 16

//line yacctab:1
var sqlite3Exca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	38, 679,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	1, 140,
	860, 140,
	-2, 148,
	-1, 49,
	1, 464,
	860, 464,
	-2, 148,
	-1, 56,
	35, 595,
	495, 595,
	506, 595,
	541, 607,
	542, 607,
	-2, 597,
	-1, 61,
	497, 620,
	-2, 618,
	-1, 115,
	494, 1110,
	-2, 114,
	-1, 117,
	1, 141,
	860, 141,
	-2, 148,
	-1, 128,
	394, 148,
	433, 148,
	599, 148,
	-2, 473,
	-1, 129,
	395, 371,
	500, 371,
	-2, 458,
	-1, 333,
	478, 1132,
	-2, 1127,
	-1, 334,
	478, 1133,
	-2, 1128,
	-1, 408,
	322, 688,
	-2, 703,
	-1, 611,
	505, 41,
	510, 41,
	-2, 382,
	-1, 667,
	1, 517,
	860, 517,
	-2, 148,
	-1, 892,
	322, 689,
	-2, 708,
	-1, 893,
	322, 690,
	-2, 709,
	-1, 943,
	1, 421,
	860, 421,
	-2, 148,
	-1, 1023,
	505, 42,
	510, 42,
	-2, 383,
	-1, 1281,
	478, 1137,
	-2, 1130,
	-1, 1363,
	1, 422,
	860, 422,
	-2, 148,
	-1, 1370,
	25, 169,
	-2, 171,
	-1, 1589,
	350, 39,
	-2, 744,
	-1, 1641,
	340, 91,
	350, 91,
	-2, 763,
	-1, 1994,
	350, 39,
	-2, 745,
	-1, 2018,
	7, 53,
	18, 53,
	20, 53,
	351, 53,
	-2, 737,
}

const sqlite3Private = 57344

const sqlite3Last = 17807

var sqlite3Act = [...]int{
	333, 342, 2260, 2088, 2157, 335, 2087, 2233, 2089, 1791,
	2234, 2204, 946, 2066, 1928, 2188, 1294, 1870, 1877, 1314,
	1544, 1360, 3, 2122, 326, 37, 420, 1883, 907, 721,
	2143, 872, 1610, 255, 1606, 251, 1790, 401, 277, 1755,
	96, 336, 1789, 327, 324, 2009, 1613, 325, 248, 1913,
	1679, 1611, 163, 1614, 1396, 163, 1738, 216, 163, 678,
	1417, 247, 1702, 230, 1400, 163, 1681, 1680, 448, 421,
	1624, 1443, 1670, 163, 249, 1379, 576, 1608, 1349, 145,
	894, 1580, 1275, 1990, 1432, 1029, 1635, 163, 1251, 1192,
	1000, 126, 1182, 1459, 1416, 163, 1338, 1141, 1021, 1675,
	243, 1402, 405, 1320, 409, 577, 36, 95, 1643, 1337,
	230, 38, 913, 230, 163, 230, 1250, 403, 1340, 935,
	1295, 260, 423, 875, 1204, 804, 1158, 741, 1095, 642,
	1028, 1091, 583, 612, 1414, 1080, 580, 584, 608, 445,
	609, 1278, 932, 1380, 934, 919, 89, 415, 1393, 1247,
	1718, 1717, 1457, 2038, 1746, 1747, 2092, 742, 2092, 219,
	165, 166, 167, 2177, 2176, 1069, 1147, 742, 1291, 1292,
	1146, 1145, 1144, 1143, 241, 2222, 242, 1136, 1576, 1978,
	2267, 1447, 1408, 2232, 2246, 2237, 410, 1712, 1709, 1151,
	2214, 411, 163, 429, 163, 434, 646, 163, 602, 706,
	197, 645, 1445, 78, 2212, 2266, 1404, 2198, 606, 1491,
	2256, 2172, 2244, 2218, 2219, 619, 773, 230, 723, 230,
	2067, 1885, 1886, 2189, 633, 1446, 639, 2213, 2197, 2171,
	219, 78, 78, 230, 230, 607, 2127, 774, 775, 776,
	777, 778, 779, 780, 782, 781, 783, 784, 1754, 719,
	2209, 1962, 442, 449, 2177, 1331, 1010, 734, 681, 37,
	687, 688, 689, 1726, 751, 601, 1577, 1725, 1100, 713,
	1383, 715, 644, 78, 751, 1866, 80, 649, 650, 651,
	666, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	647, 597, 1652, 671, 672, 1651, 1355, 1356, 1653, 146,
	1745, 120, 1867, 1868, 592, 1488, 936, 594, 937, 712,
	714, 1354, 696, 396, 701, 702, 718, 395, 2158, 697,
	1663, 118, 1373, 1372, 1953, 674, 1884, 690, 664, 1930,
	1951, 788, 789, 790, 791, 995, 119, 1293, 1887, 2238,
	685, 796, 219, 799, 219, 686, 1673, 1674, 121, 595,
	228, 1016, 1135, 684, 1433, 683, 124, 232, 226, 1063,
	2239, 1703, 1460, 1923, 220, 1721, 2255, 747, 1081, 870,
	740, 1924, 699, 700, 705, 652, 865, 747, 1465, 881,
	219, 648, 1932, 1468, 792, 1469, 1462, 1470, 785, 785,
	1137, 1138, 1464, 621, 2264, 1887, 163, 159, 2268, 230,
	230, 127, 597, 1064, 589, 1065, 694, 2242, 698, 581,
	710, 591, 590, 703, 711, 163, 691, 121, 1931, 600,
	1383, 122, 614, 704, 716, 1489, 717, 884, 882, 597,
	662, 888, 230, 1466, 1463, 220, 163, 405, 1233, 599,
	709, 230, 885, 581, 1092, 403, 887, 230, 615, 581,
	1415, 871, 1737, 579, 598, 1027, 2223, 436, 1381, 1382,
	595, 121, 1734, 596, 1452, 1581, 1583, 1088, 725, 728,
	445, 624, 627, 1750, 1503, 886, 901, 614, 1902, 95,
	621, 623, 1089, 1720, 159, 1008, 1007, 1006, 1004, 196,
	621, 1324, 620, 191, 2105, 1442, 786, 787, 614, 617,
	618, 1085, 581, 2091, 2025, 2091, 611, 615, 122, 1838,
	1648, 1605, 1733, 871, 876, 2002, 1732, 1568, 1225, 1214,
	1215, 1216, 1217, 1227, 1218, 1219, 1220, 1232, 1228, 1221,
	1222, 1229, 1230, 1231, 1223, 1224, 1226, 1489, 1671, 1287,
	923, 851, 676, 1332, 87, 2128, 1361, 220, 785, 220,
	784, 746, 743, 744, 745, 750, 752, 749, 1865, 748,
	1026, 746, 743, 744, 745, 750, 752, 749, 1444, 748,
	1407, 1665, 87, 87, 596, 418, 163, 1163, 2166, 620,
	996, 1602, 1723, 1740, 449, 220, 707, 665, 1739, 620,
	1005, 1164, 1165, 1162, 634, 614, 112, 1101, 76, 636,
	643, 596, 2217, 637, 635, 1832, 91, 603, 1381, 1382,
	1740, 230, 1023, 1461, 87, 1739, 435, 680, 1406, 2170,
	1032, 1086, 938, 413, 1034, 1035, 1582, 230, 641, 738,
	1774, 1205, 1205, 1518, 1040, 1692, 724, 1043, 1044, 163,
	1046, 755, 2041, 1082, 98, 1083, 2216, 2040, 85, 1084,
	779, 780, 782, 781, 783, 784, 1033, 1998, 1437, 1036,
	97, 230, 1405, 163, 113, 1042, 1039, 1153, 1155, 1156,
	1041, 1025, 1090, 756, 756, 230, 404, 163, 777, 778,
	779, 780, 782, 781, 783, 784, 756, 1020, 631, 630,
	1154, 2240, 163, 1495, 1496, 1497, 1015, 1321, 1322, 163,
	2026, 756, 2039, 1037, 1411, 2241, 87, 238, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 230, 1031, 1959,
	1161, 347, 348, 349, 230, 230, 2078, 901, 2045, 2032,
	1685, 1011, 1012, 1013, 2269, 1676, 867, 402, 1209, 1455,
	1656, 163, 1098, 1067, 1061, 1097, 422, 1059, 1058, 1030,
	1105, 165, 166, 167, 147, 2033, 148, 1109, 1057, 1111,
	1112, 1113, 1114, 165, 166, 167, 1118, 1655, 165, 166,
	167, 1038, 1427, 756, 239, 1927, 158, 1055, 1056, 756,
	727, 901, 1060, 2065, 334, 1860, 230, 1609, 1189, 1189,
	2228, 901, 1187, 1187, 1507, 1489, 1186, 1190, 1831, 1195,
	230, 165, 166, 167, 756, 1093, 100, 756, 756, 1600,
	2195, 1159, 1688, 756, 1831, 230, 230, 1607, 1166, 1369,
	1168, 1157, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 756, 753, 164, 1600, 2185, 164,
	1206, 147, 164, 148, 1533, 1167, 756, 231, 87, 164,
	165, 166, 167, 2165, 1425, 1833, 92, 164, 1248, 1600,
	2182, 1620, 756, 158, 2178, 901, 693, 93, 1600, 756,
	2262, 164, 1514, 2263, 1596, 2261, 756, 695, 163, 164,
	756, 1279, 230, 1103, 1104, 150, 911, 756, 1621, 1160,
	1974, 901, 756, 1974, 231, 1816, 1108, 231, 164, 231,
	1600, 2060, 1353, 1115, 1116, 1117, 163, 753, 901, 230,
	1248, 1505, 1304, 1607, 1305, 1490, 1003, 92, 163, 1538,
	1281, 230, 2124, 86, 94, 163, 1523, 163, 93, 163,
	163, 230, 1522, 1711, 230, 1191, 1283, 1284, 1538, 901,
	95, 1429, 1197, 1198, 1319, 230, 1441, 1022, 1333, 905,
	37, 86, 86, 1279, 2090, 756, 2090, 1018, 95, 81,
	445, 1107, 1017, 445, 1893, 1894, 1128, 121, 1370, 600,
	2036, 2037, 150, 1132, 1133, 1310, 164, 1710, 164, 1644,
	1280, 164, 1071, 1070, 1072, 1073, 1074, 1289, 756, 599,
	1139, 708, 1281, 86, 1282, 1893, 1892, 1285, 1286, 621,
	230, 231, 1102, 231, 598, 1621, 901, 1418, 1419, 1420,
	1644, 404, 1422, 1424, 1426, 1336, 98, 231, 231, 679,
	230, 1365, 1509, 1364, 1087, 230, 1032, 1347, 1299, 1032,
	619, 1032, 1508, 1309, 1384, 1385, 1386, 230, 906, 230,
	756, 930, 1374, 1451, 1375, 1376, 1377, 1378, 901, 1397,
	1368, 883, 1328, 1312, 928, 929, 230, 230, 2047, 1403,
	1389, 1390, 1391, 1392, 756, 402, 1326, 754, 754, 755,
	755, 1836, 901, 1351, 449, 1776, 1352, 449, 1051, 163,
	754, 2270, 755, 1367, 756, 1366, 163, 407, 163, 163,
	605, 756, 163, 604, 163, 754, 1431, 755, 620, 1756,
	640, 163, 873, 908, 1410, 165, 166, 167, 163, 1423,
	756, 1505, 901, 1448, 760, 761, 762, 763, 764, 765,
	766, 758, 1449, 756, 1436, 2136, 901, 1439, 2115, 1440,
	163, 1450, 1398, 756, 2108, 230, 756, 1409, 1505, 1413,
	1394, 1395, 1489, 1719, 1421, 756, 999, 1704, 1453, 1454,
	1957, 901, 1621, 1553, 901, 2162, 1434, 1435, 1438, 1398,
	901, 1700, 1701, 1480, 1481, 773, 1749, 754, 1483, 755,
	1600, 1599, 756, 754, 2043, 755, 1458, 1484, 756, 1621,
	164, 901, 1758, 231, 231, 901, 774, 775, 776, 777,
	778, 779, 780, 782, 781, 783, 784, 1001, 754, 164,
	755, 754, 754, 755, 755, 1925, 1159, 754, 1513, 755,
	1505, 756, 1499, 1159, 1501, 910, 231, 756, 999, 998,
	164, 1473, 1545, 944, 943, 231, 2020, 1705, 754, 149,
	755, 231, 151, 152, 1678, 1388, 153, 154, 1976, 1500,
	754, 1387, 755, 155, 156, 157, 901, 1682, 1831, 1078,
	1024, 997, 1768, 1767, 1766, 1760, 754, 1764, 755, 1759,
	114, 1757, 1683, 754, 666, 755, 1762, 1487, 2010, 2011,
	754, 1929, 755, 2125, 754, 1761, 755, 1408, 1302, 916,
	2252, 754, 2250, 755, 1160, 1130, 754, 101, 755, 1498,
	163, 1160, 1763, 1765, 2235, 756, 1504, 163, 100, 2175,
	99, 1972, 1189, 230, 2051, 1645, 1187, 1047, 2141, 230,
	1586, 2013, 1907, 1906, 756, 1647, 149, 1574, 1905, 151,
	152, 1693, 1590, 153, 154, 1604, 101, 1609, 1517, 1474,
	155, 156, 157, 1849, 1965, 230, 1645, 100, 1850, 99,
	1847, 2016, 1515, 163, 2015, 1848, 1489, 163, 94, 754,
	1846, 755, 899, 895, 1845, 1851, 1281, 1630, 1631, 409,
	164, 909, 1654, 2225, 2196, 1612, 1531, 1637, 896, 1316,
	756, 1308, 2048, 2049, 2050, 773, 1615, 1837, 756, 1820,
	588, 230, 754, 2097, 755, 2096, 1964, 394, 1169, 1889,
	117, 1597, 1052, 1053, 1054, 231, 774, 775, 776, 777,
	778, 779, 780, 782, 781, 783, 784, 807, 876, 230,
	1562, 231, 933, 1575, 1661, 163, 1280, 1584, 1565, 1566,
	1686, 428, 163, 164, 916, 1201, 102, 629, 87, 230,
	1561, 628, 1601, 756, 754, 1598, 755, 1560, 1032, 1032,
	1202, 410, 9, 1657, 1642, 231, 411, 164, 1698, 1636,
	8, 1664, 1666, 1716, 1939, 1672, 1559, 1646, 754, 231,
	755, 164, 1403, 163, 163, 163, 163, 163, 756, 1558,
	1682, 1658, 1715, 1649, 163, 163, 164, 7, 754, 1557,
	755, 1743, 1556, 164, 726, 754, 903, 755, 1677, 1708,
	163, 1555, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 231, 122, 1684, 754, 1076, 755, 1690, 231, 231,
	230, 1075, 1714, 1694, 1695, 1696, 1689, 754, 1554, 755,
	1066, 1015, 440, 90, 1548, 164, 433, 754, 1829, 755,
	754, 92, 755, 1713, 593, 2163, 1706, 1707, 94, 754,
	2258, 755, 93, 412, 77, 1189, 1903, 1189, 1769, 1187,
	1189, 1187, 667, 1773, 1187, 1189, 403, 1547, 1683, 1187,
	1321, 1322, 1477, 1546, 1751, 2120, 754, 1888, 755, 230,
	231, 1735, 754, 670, 755, 1634, 1313, 1792, 1752, 1792,
	915, 1819, 1792, 1991, 231, 1797, 1493, 1792, 1794, 1818,
	1798, 1804, 1805, 1806, 1807, 1753, 99, 163, 1811, 231,
	231, 230, 1770, 2148, 1189, 754, 230, 755, 1187, 2147,
	1131, 754, 1825, 755, 2052, 2053, 2054, 1048, 1049, 1050,
	426, 427, 163, 163, 163, 163, 163, 1785, 2102, 1821,
	1908, 901, 101, 1827, 163, 1811, 1428, 425, 100, 163,
	101, 1543, 163, 100, 163, 99, 2101, 163, 163, 163,
	1810, 100, 1997, 1839, 1612, 1306, 1307, 898, 1859, 897,
	1542, 1812, 164, 888, 1637, 1607, 231, 1813, 1814, 1815,
	901, 1799, 1800, 1801, 1802, 1803, 1781, 737, 1823, 1741,
	2254, 2253, 1742, 1822, 809, 735, 810, 1901, 1830, 754,
	164, 755, 1524, 231, 163, 663, 2095, 1300, 924, 917,
	2253, 230, 164, 1852, 811, 231, 230, 95, 754, 164,
	755, 164, 736, 164, 164, 231, 1541, 1097, 231, 1841,
	1842, 163, 1844, 317, 1539, 1912, 1863, 673, 2254, 231,
	1861, 1840, 2103, 1862, 1843, 163, 1869, 1910, 163, 2031,
	1890, 1891, 107, 108, 417, 1856, 1857, 1897, 1940, 1898,
	1896, 899, 895, 104, 1917, 39, 88, 1916, 1, 2035,
	101, 2211, 208, 1290, 754, 1403, 755, 896, 874, 1911,
	2236, 100, 754, 99, 755, 2207, 1920, 1909, 77, 1535,
	2208, 1068, 94, 1062, 231, 2068, 229, 1935, 1249, 2121,
	1401, 613, 1934, 128, 1362, 1363, 2191, 111, 574, 110,
	616, 1937, 1938, 692, 231, 610, 1430, 1662, 1971, 231,
	1371, 1942, 1899, 1900, 1534, 1949, 950, 230, 163, 948,
	949, 231, 947, 231, 952, 1943, 951, 754, 1525, 755,
	1977, 1134, 227, 447, 1633, 161, 578, 230, 585, 230,
	231, 231, 939, 1603, 1873, 918, 638, 1946, 1947, 199,
	1948, 1895, 1456, 1950, 204, 1952, 682, 1954, 2003, 797,
	37, 163, 754, 164, 755, 1612, 1129, 1817, 1650, 446,
	164, 439, 164, 164, 2007, 1301, 164, 1615, 164, 2034,
	1588, 1615, 2017, 1999, 2005, 164, 1617, 2001, 163, 2014,
	2186, 1659, 164, 912, 2021, 2100, 2023, 2024, 1992, 1993,
	1996, 1516, 1203, 163, 1341, 1152, 163, 163, 163, 230,
	253, 252, 2029, 250, 164, 1591, 1330, 759, 1917, 231,
	337, 1916, 1578, 2030, 1579, 925, 1625, 1623, 2059, 1622,
	230, 230, 230, 230, 1475, 1348, 622, 625, 626, 2012,
	447, 2008, 447, 2203, 632, 1343, 1339, 2022, 1595, 1594,
	2064, 261, 254, 246, 2028, 1915, 729, 731, 1722, 1926,
	2062, 2063, 1724, 1660, 1922, 739, 891, 240, 2044, 587,
	2046, 1200, 2126, 1492, 1189, 1961, 1189, 890, 1187, 1212,
	1187, 1213, 64, 42, 1240, 813, 159, 234, 2077, 2221,
	730, 32, 31, 2073, 30, 29, 103, 1699, 1626, 1629,
	1630, 1631, 1627, 24, 1628, 1632, 1792, 23, 1792, 22,
	122, 2084, 142, 21, 20, 2083, 26, 19, 2093, 18,
	17, 2231, 1189, 2074, 2257, 116, 1187, 51, 48, 46,
	2110, 125, 123, 857, 858, 859, 860, 861, 105, 106,
	49, 109, 45, 668, 115, 2106, 1615, 160, 403, 2104,
	192, 1323, 43, 4, 892, 893, 898, 2112, 897, 2111,
	28, 27, 403, 16, 15, 14, 868, 2114, 230, 13,
	398, 399, 400, 12, 164, 408, 11, 10, 6, 5,
	35, 164, 34, 33, 2117, 733, 25, 231, 2118, 2,
	0, 2138, 0, 231, 1189, 230, 2139, 2123, 1187, 230,
	230, 0, 2142, 0, 437, 438, 230, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 230, 0, 0, 231,
	0, 0, 879, 880, 0, 230, 163, 164, 2156, 2149,
	2150, 164, 0, 2155, 2152, 2161, 2153, 1612, 2159, 0,
	0, 0, 0, 2164, 2167, 37, 0, 1626, 1629, 1630,
	1631, 1627, 1874, 1628, 1632, 921, 0, 2010, 2011, 0,
	0, 0, 0, 0, 447, 231, 230, 230, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 1876, 0, 230,
	0, 0, 0, 0, 163, 230, 2187, 0, 37, 2190,
	0, 1871, 0, 231, 2199, 2123, 2192, 0, 0, 164,
	2202, 0, 0, 2220, 2210, 2215, 164, 0, 1885, 1886,
	2224, 0, 0, 231, 1872, 0, 0, 0, 2230, 775,
	776, 777, 778, 779, 780, 782, 781, 783, 784, 230,
	0, 0, 0, 1189, 0, 0, 0, 1187, 2243, 0,
	2245, 2248, 2251, 0, 2249, 0, 1878, 164, 164, 164,
	164, 164, 2247, 2259, 0, 0, 0, 2265, 164, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1189,
	0, 0, 0, 1187, 164, 2273, 2274, 2271, 2272, 0,
	773, 2139, 768, 0, 769, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 231, 0, 0, 0, 770, 771,
	767, 774, 775, 776, 777, 778, 779, 780, 782, 781,
	783, 784, 0, 1884, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 141, 0, 1887, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 148, 868, 773, 1502, 868,
	578, 0, 0, 231, 0, 0, 868, 0, 0, 0,
	0, 136, 137, 135, 134, 158, 0, 0, 774, 775,
	776, 777, 778, 779, 780, 782, 781, 783, 784, 0,
	0, 164, 0, 0, 1077, 231, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 889, 0, 164, 164, 164, 164,
	164, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 0, 0, 164, 0, 0, 164, 0, 164, 0,
	0, 164, 164, 164, 0, 0, 0, 0, 1875, 0,
	447, 0, 0, 0, 0, 0, 0, 447, 447, 0,
	285, 287, 286, 296, 297, 298, 299, 300, 301, 302,
	283, 130, 138, 140, 0, 900, 129, 0, 131, 132,
	0, 0, 0, 0, 150, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	231, 774, 775, 776, 777, 778, 779, 780, 782, 781,
	783, 784, 0, 0, 0, 164, 0, 0, 318, 1183,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 1014, 164, 1196, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 122, 0, 142, 0, 1210, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 195, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 195, 0, 447, 0, 1879, 0, 0,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 1882,
	1009, 0, 0, 0, 0, 416, 0, 0, 0, 0,
	0, 231, 164, 195, 0, 1303, 0, 0, 0, 0,
	0, 0, 432, 0, 432, 0, 0, 0, 0, 0,
	0, 231, 195, 231, 0, 0, 0, 0, 1880, 0,
	0, 0, 1315, 1881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 164, 0, 447, 0, 0,
	0, 0, 0, 0, 447, 0, 0, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 578, 0,
	0, 0, 164, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	164, 164, 164, 231, 291, 292, 0, 0, 0, 0,
	195, 0, 195, 0, 0, 195, 0, 143, 0, 0,
	144, 0, 0, 0, 231, 231, 231, 231, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 578, 0, 0, 0, 328, 585, 278,
	332, 280, 329, 330, 0, 276, 279, 331, 0, 0,
	578, 0, 1183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1183,
	1183, 0, 0, 0, 281, 282, 284, 288, 289, 290,
	293, 294, 295, 303, 305, 306, 304, 307, 308, 309,
	312, 313, 314, 315, 310, 311, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 151, 152, 0, 0, 153, 154, 0, 0, 0,
	0, 78, 155, 156, 157, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 869, 231, 0, 0, 0, 0, 0, 1486, 170,
	0, 0, 0, 0, 175, 168, 0, 147, 0, 148,
	0, 0, 0, 0, 0, 0, 902, 904, 0, 231,
	0, 0, 0, 231, 231, 136, 137, 135, 134, 158,
	231, 0, 0, 231, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 195, 0, 0, 159, 0, 231,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 142, 0, 0, 0, 169, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 0,
	231, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 231, 0, 0, 0, 0, 164, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 138, 140, 0, 0,
	129, 0, 131, 132, 0, 0, 0, 0, 150, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 0, 231, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 1592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 1619, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 170, 0, 0, 0,
	0, 175, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 1687, 0, 869, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 166, 167, 169, 0, 0, 0, 0, 0,
	0, 195, 87, 0, 0, 165, 166, 167, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	195, 0, 0, 219, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 1120, 195, 195,
	195, 195, 195, 195, 195, 0, 0, 0, 178, 0,
	0, 143, 0, 1183, 144, 0, 0, 0, 139, 0,
	0, 179, 0, 217, 141, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 148, 868, 0, 868,
	0, 185, 868, 0, 1207, 0, 0, 868, 1208, 0,
	0, 0, 136, 137, 135, 134, 158, 0, 187, 0,
	212, 0, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 432, 210, 0, 0, 0, 0, 0, 432,
	432, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 1824, 0, 0, 0, 0, 447,
	0, 0, 0, 0, 0, 0, 0, 902, 1288, 0,
	0, 0, 149, 207, 868, 151, 152, 0, 0, 153,
	154, 0, 215, 183, 0, 0, 155, 156, 157, 432,
	1096, 432, 432, 432, 432, 432, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	177, 0, 130, 138, 140, 0, 1297, 129, 0, 131,
	132, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	432, 0, 165, 166, 167, 0, 345, 346, 220, 0,
	0, 0, 1188, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 195, 868, 0, 1315,
	0, 0, 1096, 195, 0, 195, 0, 195, 1350, 0,
	198, 0, 200, 0, 0, 222, 0, 221, 203, 0,
	202, 205, 213, 206, 0, 201, 0, 211, 0, 0,
	214, 0, 209, 223, 0, 0, 0, 0, 1412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 868, 0, 0, 0, 0,
	2004, 0, 2006, 0, 0, 0, 176, 1345, 0, 0,
	1344, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	183, 190, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 171, 174, 195, 133, 195, 195, 0, 0,
	195, 0, 1478, 0, 0, 173, 0, 177, 180, 195,
	0, 0, 2229, 0, 181, 0, 195, 0, 0, 184,
	0, 0, 967, 0, 0, 0, 0, 0, 143, 0,
	0, 144, 1315, 0, 224, 0, 0, 0, 195, 0,
	188, 189, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 2070, 2071, 2072, 1506, 0, 0,
	0, 1510, 0, 1511, 1512, 0, 218, 0, 0, 0,
	0, 0, 1520, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 868, 0,
	0, 1526, 1527, 1528, 1529, 1530, 0, 1532, 0, 432,
	0, 0, 0, 1536, 0, 1537, 0, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 1549, 1550, 1551,
	1552, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	1563, 1564, 151, 152, 0, 0, 153, 154, 1569, 1570,
	1571, 1572, 1573, 155, 156, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 432, 0, 0, 0,
	0, 447, 0, 176, 0, 0, 1096, 0, 195, 0,
	1618, 0, 182, 0, 0, 1297, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2145, 171,
	174, 0, 2145, 2145, 0, 0, 0, 868, 0, 2154,
	0, 0, 1315, 0, 0, 180, 0, 0, 0, 1315,
	869, 181, 0, 0, 0, 0, 184, 0, 1315, 0,
	0, 195, 0, 0, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 447,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2200, 0, 0, 0, 0, 0, 2205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 0, 0,
	1697, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 195, 195, 195, 195, 0, 0, 0, 0,
	0, 0, 195, 195, 0, 0, 0, 0, 0, 0,
	0, 1780, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1793, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 1808, 1809, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 869, 0, 0, 869, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 432, 0, 0, 0,
	0, 0, 1834, 1835, 0, 0, 0, 0, 0, 431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1854, 1855, 0, 0, 195, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	195, 195, 195, 195, 195, 0, 0, 0, 0, 0,
	0, 0, 1853, 0, 0, 0, 0, 195, 0, 0,
	1297, 0, 195, 0, 0, 195, 1864, 1096, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	984, 985, 986, 987, 988, 989, 0, 990, 991, 992,
	993, 994, 969, 970, 971, 972, 953, 954, 982, 424,
	956, 0, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 0, 195, 966, 973, 974, 975, 976, 977, 978,
	979, 980, 869, 0, 1941, 0, 0, 0, 0, 0,
	0, 1945, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 1955, 1956, 1958, 1960, 0,
	0, 0, 0, 195, 0, 1966, 195, 0, 1968, 1969,
	1970, 0, 0, 0, 0, 1973, 0, 0, 0, 0,
	0, 1975, 0, 0, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 0, 0, 1989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 0,
	0, 0, 2018, 2019, 0, 877, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 195, 0, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 0, 0, 195, 195, 195, 0, 344, 79,
	419, 0, 0, 0, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 2081, 244, 0, 0, 2082, 0, 582,
	0, 0, 0, 2086, 0, 920, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 175, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 869, 0, 170, 0, 0, 0, 0,
	175, 168, 0, 0, 0, 0, 406, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 914, 406, 669, 0, 675,
	0, 0, 677, 0, 0, 0, 0, 2119, 0, 0,
	0, 0, 0, 586, 169, 0, 0, 0, 0, 0,
	0, 2129, 2130, 2131, 0, 2132, 2133, 0, 0, 2134,
	0, 2135, 0, 2137, 2140, 0, 0, 0, 172, 0,
	2144, 0, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2160,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 2169, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 2179,
	0, 179, 869, 0, 0, 2180, 2181, 0, 0, 0,
	0, 0, 0, 2183, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 195, 720, 0, 720, 0, 0,
	179, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 2226, 0, 170, 0, 2227,
	185, 0, 175, 168, 0, 0, 1002, 0, 0, 0,
	0, 406, 793, 794, 795, 0, 798, 187, 800, 801,
	802, 803, 1297, 806, 808, 808, 0, 808, 812, 812,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 0, 852, 853,
	854, 855, 856, 0, 0, 169, 0, 812, 812, 812,
	812, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 0, 0, 0, 0, 0, 0, 172,
	1099, 0, 165, 166, 167, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 166, 167, 864, 867, 0, 0, 0, 178,
	863, 866, 0, 0, 862, 0, 878, 0, 754, 0,
	755, 406, 179, 0, 0, 406, 0, 0, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 1149, 1150, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1193, 1194, 0, 0, 0, 0,
	0, 0, 1199, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 1234, 1235, 1236,
	1237, 1238, 1239, 1241, 1245, 1246, 244, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 1045, 0, 0, 0, 244, 0,
	0, 0, 0, 0, 0, 173, 0, 177, 0, 183,
	0, 0, 0, 165, 166, 167, 0, 0, 1079, 170,
	0, 0, 0, 0, 175, 168, 0, 0, 0, 0,
	1317, 1318, 0, 0, 173, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 621, 1359, 0,
	0, 0, 0, 0, 0, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1142, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1399, 0, 0,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 178, 0, 617, 618, 720, 581, 0, 0, 0,
	611, 615, 720, 720, 179, 0, 170, 0, 0, 0,
	0, 175, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 185, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 177, 171,
	174, 187, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 180, 0, 190, 170, 0,
	0, 181, 0, 175, 168, 0, 184, 0, 171, 174,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 188, 189, 0,
	181, 186, 0, 1325, 0, 184, 0, 0, 172, 0,
	1329, 0, 1335, 0, 0, 1142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 178, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 179, 87, 0, 901, 165, 166, 167, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 0, 0, 1342, 187, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 170, 0, 0, 0, 0,
	175, 168, 0, 182, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	171, 174, 0, 0, 1142, 0, 0, 0, 0, 914,
	187, 1467, 0, 1471, 1472, 0, 180, 1476, 586, 0,
	0, 0, 181, 0, 0, 0, 1479, 184, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 0, 0, 0, 0, 188, 189,
	0, 0, 186, 169, 0, 1485, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 175, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	177, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 87, 0, 0, 165, 166, 167, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 1748, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 237, 236, 0, 0, 0,
	0, 0, 0, 1771, 1772, 0, 0, 0, 1775, 0,
	0, 0, 1777, 1778, 1779, 0, 0, 0, 0, 0,
	0, 0, 0, 1782, 1783, 1784, 0, 0, 1252, 1786,
	178, 1787, 1788, 0, 0, 0, 1795, 1796, 0, 0,
	183, 0, 0, 179, 1252, 1252, 1252, 1252, 1252, 244,
	244, 244, 244, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 177, 0, 0,
	0, 1296, 1641, 185, 0, 0, 0, 0, 0, 0,
	0, 86, 170, 0, 0, 0, 0, 175, 168, 0,
	187, 165, 166, 167, 0, 0, 176, 1828, 1567, 0,
	0, 0, 183, 0, 0, 182, 244, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 174, 0, 0, 0, 173, 0, 177,
	1858, 0, 406, 0, 0, 0, 0, 0, 180, 0,
	1691, 0, 0, 0, 181, 0, 0, 0, 0, 184,
	0, 1616, 0, 79, 0, 0, 575, 0, 0, 0,
	169, 1638, 0, 1639, 1640, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 1727, 1728,
	1729, 1730, 1731, 0, 0, 0, 0, 0, 0, 1142,
	1736, 0, 0, 901, 165, 166, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 1744, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 579, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 1963, 185, 190, 183,
	0, 1967, 0, 0, 0, 0, 0, 0, 0, 171,
	174, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 180, 177, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 1345, 0, 0, 1344,
	0, 0, 2000, 0, 182, 0, 0, 188, 189, 0,
	190, 186, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2146, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 186, 0, 0, 0, 0, 165, 166,
	167, 0, 1298, 0, 2061, 0, 0, 173, 0, 177,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 1904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 1342, 1342, 1342, 1342, 0, 1921, 2075, 0, 2076,
	0, 0, 0, 0, 2079, 2080, 0, 1638, 406, 0,
	1933, 0, 1342, 1936, 0, 1342, 2085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 190, 0, 0,
	2107, 0, 0, 2109, 0, 0, 0, 0, 171, 174,
	0, 0, 0, 0, 0, 0, 0, 2113, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 1914, 0,
	181, 0, 0, 2116, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 1995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1944, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2151, 244, 0, 0, 176, 0, 0, 0, 0,
	0, 173, 0, 177, 182, 0, 0, 0, 0, 0,
	190, 0, 0, 2042, 0, 0, 0, 0, 0, 0,
	0, 171, 174, 0, 0, 0, 2173, 0, 2055, 0,
	0, 2056, 2057, 2058, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 184, 0,
	0, 0, 1616, 0, 79, 0, 1616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 186, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2027, 0, 562, 554, 0, 0, 514, 564,
	485, 501, 571, 504, 505, 535, 466, 524, 532, 499,
	455, 488, 459, 496, 460, 486, 517, 0, 482, 555,
	0, 0, 0, 170, 0, 0, 0, 0, 175, 168,
	0, 0, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 512, 516, 519, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 0, 0,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 169, 0, 0, 190, 0, 0, 0, 484, 2094,
	0, 2098, 2099, 487, 0, 171, 174, 490, 0, 0,
	0, 1616, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 180, 0, 0, 508, 0, 0, 181, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 515, 0, 0,
	0, 2168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 178, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 552, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 566, 175, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2184, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 520, 0, 522, 550,
	513, 536, 477, 526, 0, 0, 533, 565, 0, 0,
	0, 0, 0, 0, 495, 0, 169, 0, 0, 165,
	166, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 530, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 219, 563, 521, 0, 534, 0, 458, 528, 0,
	465, 468, 570, 559, 491, 492, 0, 0, 0, 0,
	178, 0, 0, 518, 523, 544, 509, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 476, 456,
	489, 547, 457, 0, 453, 0, 0, 0, 0, 0,
	0, 556, 510, 568, 560, 507, 506, 539, 472, 0,
	0, 0, 470, 0, 452, 467, 475, 500, 527, 543,
	549, 0, 0, 497, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	967, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 558, 0,
	0, 0, 173, 454, 177, 498, 503, 511, 538, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	722, 473, 551, 553, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 0, 1184, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	444, 443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 480, 481, 478, 0, 479, 1185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 0, 0, 0, 572, 540, 0, 573, 0,
	0, 0, 0, 0, 0, 0, 0, 494, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 531, 182,
	0, 0, 542, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 171, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 173, 181, 177,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 562, 554, 186, 0,
	514, 564, 485, 501, 571, 504, 505, 535, 466, 524,
	532, 499, 455, 488, 459, 496, 460, 486, 517, 0,
	482, 555, 0, 0, 0, 170, 0, 0, 0, 0,
	175, 168, 0, 0, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 512, 516, 519, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 461,
	0, 0, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 0, 0,
	484, 0, 955, 0, 0, 487, 0, 0, 0, 490,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 178, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 171, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 537, 180, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 184, 0,
	185, 0, 0, 0, 0, 0, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 187, 0, 188,
	189, 0, 0, 186, 0, 0, 170, 0, 0, 0,
	0, 175, 168, 0, 0, 0, 0, 0, 0, 0,
	557, 0, 0, 0, 0, 0, 0, 981, 984, 985,
	986, 987, 988, 989, 566, 990, 991, 992, 993, 994,
	969, 970, 971, 972, 953, 954, 982, 0, 956, 0,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 0,
	0, 966, 973, 974, 975, 976, 977, 978, 979, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 0, 0, 0, 169, 0, 0, 0, 520, 0,
	522, 550, 513, 536, 477, 526, 0, 0, 533, 565,
	0, 0, 0, 0, 0, 0, 495, 0, 172, 0,
	0, 165, 166, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 0, 178, 0,
	0, 0, 0, 219, 563, 521, 0, 534, 0, 458,
	528, 179, 465, 468, 570, 559, 491, 492, 0, 0,
	0, 0, 0, 0, 983, 518, 523, 544, 509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 456, 489, 547, 457, 0, 453, 0, 0, 0,
	0, 0, 0, 556, 510, 568, 560, 507, 506, 539,
	472, 0, 0, 0, 470, 0, 452, 467, 475, 500,
	527, 543, 549, 0, 0, 497, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 0, 0, 0, 173, 454, 177, 498, 503, 511,
	538, 541, 165, 166, 167, 0, 1668, 0, 0, 0,
	464, 0, 931, 473, 551, 553, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 0, 0, 1669, 0, 0, 0, 0, 0,
	0, 450, 444, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 480, 481, 478, 0, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 0, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 0, 0, 0, 572, 540, 0,
	573, 0, 0, 0, 0, 0, 0, 0, 0, 494,
	183, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	531, 182, 0, 0, 542, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 177, 171, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 562, 554,
	186, 0, 514, 564, 485, 501, 571, 504, 505, 535,
	466, 524, 532, 499, 455, 488, 459, 496, 460, 486,
	517, 0, 482, 555, 0, 0, 0, 170, 0, 0,
	0, 0, 175, 168, 0, 0, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 512, 516, 519, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 484, 0, 0, 0, 0, 487, 0, 0,
	0, 490, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 176, 0, 0, 0, 0, 508, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 190, 0,
	0, 515, 0, 0, 0, 0, 0, 0, 0, 171,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 181, 179, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 186, 185, 0, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 170, 0, 566, 0, 0, 175,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 0, 522, 550, 513, 536, 477, 526, 0, 0,
	533, 565, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 169, 165, 166, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 219, 563, 521, 0, 534,
	0, 458, 528, 0, 465, 468, 570, 559, 491, 492,
	0, 0, 0, 0, 0, 0, 178, 518, 523, 544,
	509, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 476, 456, 489, 547, 457, 0, 453, 0,
	0, 0, 0, 0, 0, 556, 510, 568, 560, 507,
	506, 539, 472, 0, 0, 0, 470, 0, 452, 467,
	475, 500, 527, 543, 549, 0, 0, 497, 0, 493,
	1276, 0, 262, 0, 0, 0, 0, 267, 0, 0,
	0, 183, 170, 0, 0, 1277, 561, 175, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 0, 0, 0, 173, 454, 177, 498,
	503, 511, 538, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 441, 473, 551, 553, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 0, 941, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 450, 444, 443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 481, 478, 0, 479,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 548, 0, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 525, 0, 0, 0, 572,
	540, 0, 573, 0, 187, 0, 0, 0, 0, 0,
	0, 494, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 531, 182, 0, 0, 542, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	171, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 181, 173, 0, 177, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 188, 189,
	0, 0, 186, 0, 0, 0, 0, 269, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 165, 166,
	167, 338, 345, 346, 347, 348, 349, 339, 341, 0,
	0, 340, 0, 285, 287, 286, 296, 297, 298, 299,
	300, 301, 302, 283, 343, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 259, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 430, 0, 0, 0, 322, 0, 258, 0, 0,
	266, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 268, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 321,
	182, 0, 0, 0, 0, 319, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 183, 0, 262, 181,
	0, 0, 0, 267, 184, 0, 0, 0, 170, 0,
	0, 0, 0, 175, 168, 0, 0, 0, 0, 0,
	0, 173, 0, 177, 0, 188, 189, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 40, 41, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 44, 70, 71, 0,
	68, 72, 0, 0, 0, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 320, 278, 332, 280, 329, 330, 275, 276, 279,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 265, 264, 179, 271, 272, 0, 281, 282, 284,
	288, 289, 290, 293, 294, 295, 303, 305, 306, 304,
	307, 308, 309, 312, 313, 314, 315, 310, 311, 316,
	263, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 176,
	187, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 186, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 165, 166, 167, 338, 345, 346,
	347, 348, 349, 339, 341, 0, 0, 340, 0, 285,
	287, 286, 296, 297, 298, 299, 300, 301, 302, 283,
	343, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 1242, 1243, 1244, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 245, 259, 0, 273, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 256, 257, 175, 168, 0,
	0, 322, 0, 258, 0, 0, 266, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 321, 0, 0, 0, 0,
	169, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 50, 53, 52, 55,
	0, 0, 67, 0, 0, 75, 0, 173, 0, 177,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 56, 83,
	82, 0, 0, 65, 66, 54, 0, 0, 0, 0,
	0, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 59, 0, 60, 61,
	62, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 320, 278, 332,
	280, 329, 330, 275, 276, 279, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 265, 264, 0,
	271, 272, 0, 281, 282, 284, 288, 289, 290, 293,
	294, 295, 303, 305, 306, 304, 307, 308, 309, 312,
	313, 314, 315, 310, 311, 316, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 81, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 86, 181, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 562, 554, 186, 0, 514, 564, 485, 501, 571,
	504, 505, 535, 466, 524, 532, 499, 455, 488, 459,
	496, 460, 486, 517, 0, 482, 555, 0, 0, 0,
	170, 0, 0, 0, 0, 175, 168, 0, 0, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 512,
	516, 519, 529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 2201, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 0, 0, 484, 0, 0, 0, 0,
	487, 173, 0, 177, 490, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 566,
	0, 0, 175, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 567, 0, 0, 0, 182, 0,
	0, 0, 0, 520, 190, 522, 550, 513, 536, 477,
	526, 0, 0, 533, 565, 171, 174, 0, 0, 0,
	0, 495, 0, 0, 0, 169, 165, 166, 167, 0,
	2193, 180, 2194, 0, 0, 0, 0, 181, 170, 0,
	0, 0, 184, 175, 168, 0, 0, 0, 0, 172,
	0, 0, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 0, 188, 189, 0, 0, 186, 0, 563,
	521, 0, 534, 0, 458, 528, 0, 465, 468, 570,
	559, 491, 492, 0, 0, 0, 0, 0, 0, 178,
	518, 523, 544, 509, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 476, 456, 489, 547, 457,
	0, 453, 0, 0, 0, 0, 0, 0, 556, 510,
	568, 560, 507, 506, 539, 472, 0, 0, 0, 470,
	178, 452, 467, 475, 500, 527, 543, 549, 0, 0,
	497, 0, 493, 179, 0, 262, 0, 0, 0, 0,
	267, 0, 0, 0, 183, 170, 0, 0, 0, 561,
	175, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 558, 0, 0, 0, 173,
	454, 177, 498, 503, 511, 538, 541, 0, 0, 0,
	187, 0, 0, 0, 0, 464, 0, 722, 473, 551,
	553, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 166, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 480, 481,
	478, 0, 479, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 548, 0,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 525, 0,
	0, 0, 572, 540, 0, 573, 0, 187, 0, 0,
	0, 0, 0, 0, 494, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 531, 182, 0, 0, 542,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 171, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 181, 173, 0, 177, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 188, 189, 0, 0, 186, 0, 0, 0, 0,
	269, 270, 2146, 0, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 165, 166, 167, 338, 345, 346, 347, 348, 349,
	339, 341, 183, 0, 340, 0, 285, 287, 286, 296,
	297, 298, 299, 300, 301, 302, 283, 343, 350, 351,
	1358, 0, 0, 0, 0, 0, 0, 173, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 259, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 0, 0, 0, 0, 322, 0,
	258, 0, 0, 266, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 268, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 321, 182, 0, 0, 0, 0, 319, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 174, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2206, 0, 0, 180, 0, 0, 183,
	0, 262, 181, 0, 0, 0, 267, 184, 0, 0,
	0, 170, 0, 0, 0, 0, 175, 168, 0, 0,
	0, 0, 0, 0, 173, 0, 177, 0, 188, 189,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 174, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 180, 0, 169,
	0, 0, 0, 181, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 320, 278, 332, 280, 329, 330,
	275, 276, 279, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 265, 264, 179, 271, 272, 0,
	281, 282, 284, 288, 289, 290, 293, 294, 295, 303,
	305, 306, 304, 307, 308, 309, 312, 313, 314, 315,
	310, 311, 316, 263, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 187, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	186, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 165, 166, 167,
	338, 345, 346, 347, 348, 349, 339, 341, 0, 0,
	340, 0, 285, 287, 286, 296, 297, 298, 299, 300,
	301, 302, 283, 343, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 259, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 256, 257,
	175, 168, 0, 0, 322, 0, 258, 0, 0, 266,
	352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 0,
	0, 0, 0, 169, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 177, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	320, 278, 332, 280, 329, 330, 275, 276, 279, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	265, 264, 0, 271, 272, 0, 281, 282, 284, 288,
	289, 290, 293, 294, 295, 303, 305, 306, 304, 307,
	308, 309, 312, 313, 314, 315, 310, 311, 316, 263,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 165, 166, 167, 0, 0, 0, 0, 176, 0,
	0, 1593, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 562, 554, 186, 0, 514, 564,
	485, 501, 571, 504, 505, 535, 466, 524, 532, 499,
	455, 488, 459, 496, 460, 486, 517, 0, 482, 555,
	0, 0, 0, 170, 0, 0, 0, 0, 175, 168,
	0, 0, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 512, 516, 519, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 0, 0,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 0, 0, 0, 0, 484, 0,
	0, 0, 0, 487, 173, 0, 177, 490, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 552, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 566, 0, 0, 175, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 567, 0, 0,
	0, 182, 0, 0, 0, 0, 520, 190, 522, 550,
	513, 536, 477, 526, 0, 0, 533, 565, 171, 174,
	0, 0, 0, 0, 495, 0, 0, 0, 169, 165,
	166, 167, 0, 0, 180, 0, 0, 0, 0, 0,
	181, 170, 0, 0, 0, 184, 175, 168, 0, 0,
	0, 0, 172, 0, 0, 530, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 188, 189, 0, 0,
	186, 0, 563, 521, 0, 534, 0, 458, 528, 0,
	465, 468, 570, 559, 491, 492, 0, 0, 0, 0,
	0, 0, 178, 518, 523, 544, 509, 0, 0, 0,
	0, 0, 1865, 0, 0, 179, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 476, 456,
	489, 547, 457, 0, 453, 0, 0, 0, 0, 0,
	0, 556, 510, 568, 560, 507, 506, 539, 472, 0,
	0, 0, 470, 178, 452, 467, 475, 500, 527, 543,
	549, 0, 0, 497, 0, 493, 179, 0, 262, 0,
	0, 0, 0, 267, 0, 0, 0, 183, 170, 0,
	0, 0, 561, 175, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 558, 0,
	0, 0, 173, 454, 177, 498, 503, 511, 538, 541,
	0, 0, 0, 187, 0, 0, 0, 0, 464, 0,
	722, 473, 551, 553, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 480, 481, 478, 0, 479, 0, 0, 0, 0,
	178, 0, 0, 0, 87, 0, 0, 165, 166, 167,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 525, 0, 0, 0, 572, 540, 0, 573, 0,
	187, 0, 0, 0, 0, 0, 0, 494, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 531, 182,
	0, 0, 542, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 171, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 181, 173,
	0, 177, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 188, 189, 0, 0, 186, 0,
	0, 0, 0, 269, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 901, 165, 166, 167, 338, 345, 346,
	347, 348, 349, 339, 341, 183, 0, 340, 0, 285,
	287, 286, 296, 297, 298, 299, 300, 301, 302, 283,
	343, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 245, 259, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 256, 257, 175, 168, 0,
	0, 322, 0, 258, 0, 0, 266, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 268,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 321, 182, 0, 0, 0,
	169, 319, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 180,
	0, 0, 183, 0, 0, 181, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 177,
	0, 188, 189, 0, 178, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 174, 0, 185, 0, 0,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 187, 0, 181, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 320, 278, 332,
	280, 329, 330, 275, 276, 279, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 265, 264, 0,
	271, 272, 0, 281, 282, 284, 288, 289, 290, 293,
	294, 295, 303, 305, 306, 304, 307, 308, 309, 312,
	313, 314, 315, 310, 311, 316, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 562, 554, 186, 0, 514, 564, 485, 501, 571,
	504, 505, 535, 466, 524, 532, 499, 455, 488, 459,
	496, 460, 486, 517, 0, 482, 555, 0, 0, 0,
	170, 0, 0, 0, 0, 175, 168, 0, 0, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 512,
	516, 519, 529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 0, 0, 484, 0, 0, 0, 0,
	487, 173, 0, 177, 490, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 566,
	0, 0, 175, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 567, 0, 0, 0, 182, 0,
	0, 0, 0, 520, 190, 522, 550, 513, 536, 477,
	526, 0, 0, 533, 565, 171, 174, 0, 0, 0,
	0, 495, 0, 0, 0, 169, 165, 166, 167, 0,
	0, 180, 0, 0, 0, 0, 0, 181, 170, 0,
	0, 0, 184, 175, 168, 0, 0, 0, 0, 172,
	0, 0, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 0, 188, 189, 0, 0, 186, 0, 563,
	521, 0, 534, 0, 458, 528, 0, 465, 468, 570,
	559, 491, 492, 0, 0, 0, 0, 0, 0, 178,
	518, 523, 544, 509, 0, 0, 0, 0, 0, 1826,
	0, 0, 179, 0, 0, 0, 0, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 476, 456, 489, 547, 457,
	0, 453, 0, 0, 0, 0, 0, 0, 556, 510,
	568, 560, 507, 506, 539, 472, 0, 0, 0, 470,
	178, 452, 467, 475, 500, 527, 543, 549, 0, 0,
	497, 170, 493, 179, 0, 262, 175, 168, 0, 0,
	267, 0, 0, 0, 183, 170, 0, 0, 0, 561,
	175, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 558, 0, 0, 0, 173,
	454, 177, 498, 503, 511, 538, 541, 0, 0, 0,
	187, 0, 0, 0, 0, 464, 0, 722, 473, 551,
	553, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 166, 167, 0, 922, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 480, 481,
	478, 0, 479, 0, 0, 0, 179, 178, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 548, 0,
	469, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 187, 0, 0, 0, 0, 525, 0,
	0, 0, 572, 540, 0, 573, 0, 187, 0, 0,
	0, 0, 0, 0, 494, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 531, 182, 0, 0, 542,
	0, 0, 190, 0, 0, 785, 0, 0, 0, 0,
	0, 183, 0, 171, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 181, 173, 0, 177, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 188, 189, 0, 0, 186, 0, 0, 0, 0,
	269, 270, 0, 0, 1019, 0, 0, 165, 166, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 165, 166, 167, 338, 345, 346, 347, 348, 349,
	339, 341, 183, 0, 340, 0, 285, 287, 286, 296,
	297, 298, 299, 300, 301, 302, 283, 343, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 259, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 430, 0, 0, 0, 322, 0,
	258, 0, 0, 266, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 268, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 321, 182, 0, 0, 0, 0, 319, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 174, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 183,
	0, 0, 181, 0, 0, 0, 0, 184, 0, 0,
	173, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 177, 0, 188, 189,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 174, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 320, 278, 332, 280, 329, 330,
	275, 276, 279, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 265, 264, 0, 271, 272, 0,
	281, 282, 284, 288, 289, 290, 293, 294, 295, 303,
	305, 306, 304, 307, 308, 309, 312, 313, 314, 315,
	310, 311, 316, 263, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 176, 190, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 171, 174, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 174,
	180, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 184, 0, 0, 180, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 562, 554,
	186, 0, 514, 564, 485, 501, 571, 504, 505, 535,
	466, 524, 532, 499, 455, 488, 459, 496, 460, 486,
	517, 0, 482, 555, 0, 0, 0, 170, 0, 0,
	0, 0, 175, 168, 0, 0, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 512, 516, 519, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 169, 0, 0, 175, 168,
	0, 0, 484, 0, 0, 0, 0, 487, 0, 0,
	0, 490, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 557, 0, 0, 0, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 0, 522, 550, 513, 536, 477, 526, 0, 0,
	533, 565, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 0, 165, 166, 167, 1587, 0, 0, 345,
	346, 0, 0, 0, 0, 1188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 0, 563, 521, 0, 534,
	0, 458, 528, 0, 465, 468, 570, 559, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 518, 523, 544,
	509, 0, 0, 0, 0, 0, 1327, 0, 0, 165,
	166, 167, 0, 0, 471, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	0, 0, 476, 456, 489, 547, 457, 0, 453, 0,
	0, 0, 0, 0, 0, 556, 510, 568, 560, 507,
	506, 539, 472, 0, 0, 0, 470, 0, 452, 467,
	475, 500, 527, 543, 549, 0, 0, 497, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 0, 0, 0, 173, 454, 177, 498,
	503, 511, 538, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 722, 473, 551, 553, 546, 0,
	562, 554, 0, 0, 514, 564, 485, 501, 571, 504,
	505, 535, 466, 524, 532, 499, 455, 488, 459, 496,
	460, 486, 517, 0, 482, 555, 0, 183, 0, 170,
	0, 0, 0, 0, 175, 168, 0, 0, 0, 0,
	0, 0, 0, 483, 0, 0, 462, 0, 512, 516,
	519, 529, 173, 0, 177, 0, 0, 0, 0, 502,
	0, 0, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 461, 0, 0, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 481, 478, 0, 479,
	474, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 170, 0, 169, 0, 0,
	175, 168, 0, 0, 484, 548, 0, 469, 0, 487,
	0, 0, 0, 490, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 0, 0, 0, 0, 525, 0, 0, 0, 572,
	540, 0, 573, 515, 0, 0, 0, 0, 0, 0,
	0, 494, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 178, 531, 182, 0, 0, 542, 0, 0, 190,
	0, 0, 0, 169, 179, 0, 0, 0, 0, 0,
	171, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 0, 0, 0, 0, 180, 172, 0, 0,
	0, 0, 181, 0, 185, 0, 0, 184, 0, 0,
	545, 0, 0, 0, 0, 1140, 0, 0, 0, 0,
	552, 187, 0, 0, 0, 0, 0, 0, 188, 189,
	176, 0, 186, 0, 0, 0, 0, 178, 0, 182,
	0, 0, 0, 0, 557, 190, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 171, 174, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 181, 0,
	185, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 567, 188, 189, 0, 0, 186, 0,
	0, 0, 520, 0, 522, 550, 513, 536, 477, 526,
	0, 0, 533, 565, 0, 0, 0, 0, 0, 0,
	495, 0, 87, 87, 0, 165, 166, 167, 0, 338,
	345, 346, 347, 348, 349, 339, 341, 0, 0, 340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 343, 350, 351, 0, 0, 0, 0, 0,
	569, 0, 0, 0, 0, 0, 0, 0, 563, 521,
	0, 534, 0, 458, 528, 0, 465, 468, 570, 559,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 518,
	523, 544, 509, 0, 0, 0, 0, 1918, 1919, 0,
	0, 165, 166, 167, 0, 0, 471, 0, 0, 352,
	353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 0, 0, 0, 476, 456, 489, 547, 457, 0,
	453, 0, 0, 0, 0, 0, 0, 556, 510, 568,
	560, 507, 506, 539, 472, 0, 0, 0, 470, 0,
	452, 467, 475, 500, 527, 543, 549, 0, 0, 497,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 0, 0, 0, 173, 454,
	177, 498, 503, 511, 538, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 722, 473, 551, 553,
	546, 0, 562, 554, 0, 0, 514, 564, 485, 501,
	571, 504, 505, 535, 466, 524, 532, 499, 455, 488,
	459, 496, 460, 486, 517, 0, 482, 555, 0, 183,
	0, 170, 0, 0, 0, 0, 175, 168, 0, 0,
	0, 0, 0, 0, 0, 483, 0, 0, 462, 0,
	512, 516, 519, 529, 173, 0, 177, 0, 0, 0,
	0, 502, 0, 0, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 481, 478,
	0, 479, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 0, 484, 548, 0, 469,
	0, 487, 0, 0, 0, 490, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 0, 0, 0, 525, 0, 0,
	0, 572, 540, 0, 573, 515, 0, 0, 0, 0,
	0, 0, 0, 494, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 178, 531, 182, 0, 0, 542, 0,
	0, 190, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 171, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 181, 0, 185, 0, 0, 184,
	0, 0, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 187, 0, 0, 0, 0, 0, 0,
	188, 189, 176, 0, 186, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 557, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 174,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 180, 0, 175, 168, 0, 0,
	181, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 188, 189, 0, 0,
	186, 0, 0, 0, 520, 0, 522, 550, 513, 536,
	477, 526, 0, 0, 533, 565, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 165, 166, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 172, 0, 0, 0, 0, 0, 0,
	563, 521, 0, 534, 0, 458, 528, 0, 465, 468,
	570, 559, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 518, 523, 544, 509, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 456, 489, 547,
	457, 0, 453, 187, 0, 0, 0, 0, 0, 556,
	510, 568, 560, 507, 506, 539, 472, 0, 0, 0,
	470, 0, 452, 467, 475, 500, 527, 543, 549, 0,
	0, 497, 0, 493, 0, 0, 262, 0, 0, 0,
	0, 267, 0, 0, 0, 183, 170, 0, 0, 0,
	561, 175, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 558, 0, 0, 0,
	173, 454, 177, 498, 503, 511, 538, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 722, 473,
	551, 553, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 166, 167,
	0, 732, 0, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 480,
	481, 478, 0, 479, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 548,
	0, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 0, 525,
	0, 0, 0, 572, 540, 0, 573, 0, 187, 0,
	0, 0, 0, 0, 0, 494, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 531, 182, 0, 0,
	542, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 188, 189, 0, 0, 186, 0, 0, 0,
	0, 269, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 165, 166, 167, 338, 345, 346, 347, 348,
	349, 339, 341, 0, 0, 340, 0, 285, 287, 286,
	296, 297, 298, 299, 300, 301, 302, 283, 343, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 259, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 0, 0, 0, 0, 322,
	0, 258, 0, 0, 266, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 321, 0, 0, 0, 0, 176, 319,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 174, 0, 0, 0, 0,
	183, 0, 262, 0, 0, 0, 0, 267, 0, 0,
	180, 0, 170, 0, 0, 0, 181, 175, 168, 0,
	0, 184, 0, 0, 0, 173, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 320, 278, 332, 280, 329,
	330, 275, 276, 279, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 265, 264, 179, 271, 272,
	0, 281, 282, 284, 288, 289, 290, 293, 294, 295,
	303, 305, 306, 304, 307, 308, 309, 312, 313, 314,
	315, 310, 311, 316, 263, 0, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 187, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 186, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 165, 166,
	167, 338, 345, 346, 347, 348, 349, 339, 341, 0,
	0, 340, 0, 285, 287, 286, 296, 297, 298, 299,
	300, 301, 302, 283, 343, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	273, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 175, 168, 0, 0, 0, 0, 0, 256,
	257, 0, 0, 0, 0, 322, 0, 258, 0, 0,
	266, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 170, 0, 0, 321,
	0, 175, 168, 0, 170, 319, 0, 0, 0, 175,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 173, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 185, 0, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 170, 0, 0, 0, 0, 175, 168, 0, 0,
	328, 320, 278, 332, 280, 329, 330, 275, 276, 279,
	331, 185, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	323, 265, 264, 0, 271, 272, 187, 281, 282, 284,
	288, 289, 290, 293, 294, 295, 303, 305, 306, 304,
	307, 308, 309, 312, 313, 314, 315, 310, 311, 316,
	263, 170, 0, 165, 166, 167, 175, 168, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 172, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 184, 178, 0, 0, 0, 0, 0, 169,
	0, 0, 165, 166, 167, 0, 179, 0, 0, 0,
	165, 166, 167, 188, 189, 0, 0, 186, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 173, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 165, 1994, 167,
	0, 0, 338, 345, 346, 347, 348, 349, 339, 341,
	183, 0, 340, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 343, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 177, 0, 0,
	0, 0, 0, 173, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 1589, 167,
	1918, 1919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 414, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 174, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 184, 0, 0,
	173, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 186, 176, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 0, 0, 0, 0, 190, 0,
	182, 0, 0, 0, 0, 183, 190, 345, 346, 171,
	174, 0, 0, 1188, 0, 0, 0, 171, 174, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 0,
	173, 181, 177, 180, 0, 0, 184, 0, 0, 181,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 186, 0, 0, 0, 188, 189, 0, 0, 186,
	0, 328, 0, 0, 332, 0, 329, 330, 0, 0,
	0, 331, 0, 0, 0, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 188, 189, 0, 0, 186, 182, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 186,
}

var sqlite3Pact = [...]int{
	8974, -1000, -714, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1509, 1753, -1000, 1388,
	-1000, -1000, -1000, 1730, -1000, 247, 911, -1000, 1471, 2900,
	-1000, 16758, -1, -1000, 16750, -5, 2809, 16758, -1000, -215,
	-1000, -228, 16758, -219, 5110, -1000, -1000, -651, 15790, 1270,
	-330, -334, 16758, -1000, -1000, -1000, 1633, 1079, -1000, 224,
	-1000, -1000, -1000, -1000, -1000, -1000, 16671, -1000, -1000, -1000,
	-1000, -1000, 1732, 156, 16758, -1000, 1576, 1079, -1000, 15790,
	1618, 1597, -1000, 13339, -1000, 13339, -41, -1000, -1000, 7911,
	-1000, -1000, 5339, 16758, 11865, -91, -1000, 1471, -1000, -1000,
	-1000, -235, -1000, -1000, 743, 740, -1000, -1000, 477, -3,
	-24, -79, -79, -25, 1396, 1392, 303, 302, 94, -1000,
	603, 191, 191, -531, -536, -1000, -52, 191, 191, 191,
	-163, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	-64, 1471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 16758, -202, 16758, -1000, 64, 16758, 602, 602, -292,
	602, 602, 602, -214, 371, -335, -1000, -222, -169, -227,
	-167, 572, -225, -1000, -221, -1000, 14723, -192, 14723, -1000,
	1452, -1000, -1000, -1000, -1000, 427, -1000, -28, -1000, -1000,
	-1000, -1000, 16758, 15545, 265, 220, -1000, -1000, -1000, -1000,
	-277, -1000, -1000, 485, 842, 15790, 705, -1000, 1881, 115,
	-1000, -1000, -1000, -1000, -1000, 17, 16296, 16296, 16296, 16296,
	-1000, -1000, 499, 499, 499, 499, 16296, 499, 16296, 499,
	499, 499, 499, 15790, 499, 499, 499, -1000, 499, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 499, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 499, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 499, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 63, 499,
	499, 499, 499, 499, -1000, -1000, -1000, -1000, 499, 499,
	499, 499, 499, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4449, -1000, 10725, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16758, -1000, 499, 16758, 16758,
	-148, 1576, 1079, -1000, 1633, 1625, 224, -1000, 1728, 1319,
	895, 430, 1079, 599, 16758, -1000, 754, -1000, 1037, -1000,
	-1000, -1000, -1000, -1000, 865, 15790, -1000, -1000, 1241, 1685,
	-1000, 4420, 62, 1386, 1684, 14799, -1000, -41, -41, 691,
	7099, -349, -1000, -1000, -1000, 213, 8148, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 873, 16758, -1000, -1000, 6788, 449,
	-1000, 902, -1000, 868, -1000, 848, 15790, 920, -6, 449,
	-8, -9, -10, -1000, -438, -1000, -1000, -1000, -1000, -1000,
	-1000, 191, 191, 191, 2503, 2900, -1000, -1000, -1000, -1000,
	13325, 449, -1000, 901, -1000, 275, 60, 84, 84, 449,
	-1000, -1000, 16758, 449, 449, 16758, 16758, -50, -1000, -1000,
	-1000, -1000, 16758, 449, 274, 269, 449, 449, 16758, 449,
	-1000, -1000, 1276, -1000, 1047, -1000, -1000, 191, 191, 402,
	392, 391, 191, 388, -152, 1489, 387, 134, 1480, 1474,
	16758, 900, 16758, -1000, -177, 162, 212, 1471, 674, -30,
	-12, 449, -55, -55, 16758, -1000, 15295, -1000, -1000, 386,
	15790, -1000, 583, 572, 572, -1000, -1000, -1000, -1000, -1000,
	602, 16758, 583, -1000, -1000, -1000, 572, 602, 16758, 602,
	602, 602, 602, 572, 572, 572, 602, 16758, 16758, 16758,
	16758, 16758, 16758, 16758, 16758, 16758, 14723, -1000, 1271, -1000,
	-1000, -1000, -1000, 14723, 14723, -1000, -1000, -1000, -224, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -433, 640,
	14227, -1000, -655, -656, -657, -1000, -1000, -1000, -658, -662,
	-1000, -1000, -1000, 15790, 15790, 15790, -562, -1000, 289, 16296,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 357, 174, 16296,
	16296, 16296, 1345, 16296, 16296, 16296, 16296, 16296, 16296, 16296,
	16296, 16296, 16296, 16296, 16296, 6522, 17161, 17161, 115, 115,
	115, 115, -1000, 13339, 15790, 15790, 115, -1000, 449, 13172,
	13339, 13339, 15790, 1401, 227, 842, 16758, -1000, 430, -1000,
	-1000, -1000, 376, -1000, 16758, 16758, -157, 15790, 15790, 15790,
	15790, 15790, 15790, 8912, 15790, 15790, 15790, 15790, 15790, 15790,
	15790, 15790, 15790, 15790, 15790, 15790, 15790, 15790, 15790, 15790,
	15790, 15790, 15790, 15790, 15790, 15790, 15790, 15790, 15790, 15790,
	8406, 15295, 13339, 13339, 13339, 13339, 13339, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61,
	1280, 834, 557, -1000, 637, -1000, -489, 5646, 15790, 1683,
	938, 16758, -1000, -1000, -1000, 1576, -1000, 1576, 1280, 1329,
	1049, 13339, -1000, -1000, 1329, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 430, -1000, 16758, 599, 1551, 16758, 1044,
	15790, 15790, 594, -1000, 670, -2, -1000, 16758, -1000, -1000,
	13081, -1000, -1000, 14151, 16758, 223, 16758, -1000, 5172, 12416,
	6287, -349, -1000, 6287, 552, -1000, -345, -362, 10219, 113,
	-1000, -1000, -1000, 477, 4631, 468, 113, -305, -1000, -1000,
	-1000, 848, -1000, 848, 848, 848, 848, -14, -14, -14,
	-14, -1000, -1000, -1000, -1000, -1000, 892, 886, -1000, 848,
	848, 848, 848, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -96, -1000, 15790, -158, 11865,
	1533, 346, 809, -177, -49, 937, 449, 449, 449, -49,
	-1000, 753, 498, 416, 1617, -1000, -1000, 591, -1000, 16758,
	-201, -1000, -62, -1000, 11865, 449, 262, 84, 449, -1000,
	449, -1000, -1000, 463, -199, -595, 16758, -201, 6522, -1000,
	-1000, -1000, 449, -1000, -1000, -1000, -33, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6522, 6522, -1000, -1000, -1000,
	383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -705, 16758, -1000,
	-185, 204, -150, -102, -116, 16758, -165, 16758, 16758, -55,
	990, 16758, 1536, 16758, -1000, -1000, -1000, -1000, -1000, 842,
	16758, -1000, -1000, 602, 602, -1000, -1000, 16758, 602, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 602, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16758,
	-1000, -1000, -1000, -1000, 16758, -1000, -1000, -1000, -1000, -267,
	-352, 187, -1000, -1000, -1000, -1000, 1564, -1000, 842, 241,
	-1000, 499, -1000, -1000, 315, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 357, 16296, 16296, 16296, 1948, -44, 976, 357,
	2071, 1798, 255, 255, 225, 225, 120, 120, 120, 120,
	120, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 380,
	-1000, 761, -1000, 769, 682, 430, -1000, 761, 761, 858,
	13339, -1000, -1000, 226, -1000, 15790, 430, -1000, -1000, 430,
	582, 576, 1678, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 842, 809, 809, 809, 809, 809,
	15790, 830, -1000, -1000, -1000, 1464, 1429, 430, 485, 430,
	569, -1000, 1374, 809, 1366, 1310, 1291, 872, 1213, 1207,
	1174, 809, 809, 809, 803, 1168, 1141, 1132, 1129, 1119,
	1106, 1087, 1080, 1060, 809, 430, 13339, 13339, 561, 499,
	39, -1000, 761, 430, 430, 761, 761, 15295, -1000, 16758,
	-1000, -647, -1000, -392, 128, -1000, 11774, -1000, -1000, 430,
	14153, -1000, 16985, -1000, -1000, -1000, -1000, -1000, 11109, 860,
	1329, -1000, -1000, 499, 820, -1000, -1000, 842, 842, 15790,
	-1000, -1000, -1000, 165, 449, -1000, -1000, -1000, 33, 1650,
	988, 16758, 499, -1000, 4953, -1000, 829, 1669, -1000, -1000,
	-1000, 1550, 2823, -1000, 499, 499, 16758, 996, 965, -1000,
	32, -1000, 552, -349, -365, -1000, -1000, -1000, -1000, 842,
	-1000, 411, -1000, 390, -1000, -56, -1000, -1000, -1000, -1000,
	1373, -309, -1000, -1000, -1000, -164, -14, -1000, -1000, -1000,
	7310, 104, 104, -276, -1000, -1000, -1000, 379, 379, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 883,
	1214, -158, -1000, -1000, 374, -1000, -1000, 1380, 16758, -1000,
	-1000, 461, 1533, -185, 16758, 234, 982, -1000, 937, 937,
	937, 16758, -1000, -1000, -1000, -1000, -1000, -1000, 16758, 1979,
	811, -1000, -195, -1000, -1000, 796, 878, 449, 449, -1000,
	-1000, 1458, 157, -1000, -1000, -580, -1000, -1000, -201, -195,
	113, -1000, 449, -1000, -1000, -1000, -1000, -708, 792, -13,
	-189, -89, 16758, 16758, 16758, 16758, 16758, 29, -1000, -1000,
	-1000, -35, -1000, 16758, 16758, 102, -1000, -1000, -1000, 572,
	-1000, -1000, 572, -1000, -1000, -1000, -1000, -1000, 1448, 16758,
	-357, -683, -1000, -680, 15790, -1000, -1000, -1000, -1000, 766,
	-45, 976, 16296, 16296, -1000, 13339, -477, 665, 665, 6522,
	-1000, -1000, -1000, 15790, 15790, 788, 222, -1000, 15790, 669,
	-1000, -1000, 15790, 15790, 15790, 430, -1000, -1000, -1000, -1000,
	-1000, 1662, -1000, 15790, 15790, 15790, -1000, -1000, 15790, 15790,
	-1000, 15790, 15790, 3050, 430, 3050, 15790, 15790, 3050, -1000,
	-1000, -1000, -1000, 3050, 15790, 15790, 15790, 15790, 15790, 15790,
	15790, 15790, 15790, -1000, -1000, 761, 761, 13339, 15295, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 128,
	-1000, 84, 84, 84, -1000, -1000, -1000, -1000, -1000, -1000,
	545, 1567, -1000, 1059, 1650, -1000, 5172, 1329, -1000, -1000,
	16758, -1000, 17161, -1000, -1000, 12844, 1576, 15790, -1000, 1498,
	448, -1000, 196, 505, -1000, -1000, 12032, 721, 1057, 31,
	16758, 5172, 5172, 5172, 5172, 5172, -1000, 1025, 1021, -1000,
	1011, 1004, 1026, 16758, -1000, 655, 430, 1625, 2823, 224,
	15790, 5646, 445, 5172, -1000, -1000, 5172, 16758, 11537, -1000,
	-1000, -382, -359, -1000, -1000, -1000, 477, -1000, -1000, 1813,
	1542, 1347, -1000, -1000, -1000, -1000, -1000, 104, 104, -1000,
	-1000, -1000, -1000, -1000, -1000, 645, -1000, 614, -199, -1000,
	918, 1437, 191, 191, -1000, -1000, 449, -1000, -1000, -1000,
	-18, -1000, 1520, 16758, 979, 974, 973, -1000, 518, 1611,
	16758, -1000, -1000, 16758, -158, 16758, -1000, -1000, -1000, 14724,
	-1000, -1000, -1000, -195, -1000, -1000, -1000, -1000, -1000, -1000,
	16758, -182, -1000, 856, 422, -1000, -1000, 931, -1000, -1000,
	-1000, -1000, -207, -154, 16758, 75, 1214, 16758, -1000, -1000,
	-1000, 602, 602, -1000, -1000, 1421, -1000, 449, 809, 16296,
	16296, -1000, 115, -1000, 499, 430, 848, 848, -1000, 848,
	-1000, -1000, 848, -254, 848, -260, 848, -1000, -1000, 430,
	430, 800, 697, -449, -1000, 842, 15790, 1036, 984, 809,
	-1000, 15790, 809, 809, 809, -1000, 842, 872, 951, 540,
	-1000, -1000, -1000, -1000, 543, 809, 888, -642, 430, 588,
	588, 588, 588, 588, 557, 557, 557, 557, -1000, -1000,
	430, -1000, -1000, 1561, 1561, 1561, 16915, 16758, -1000, -1000,
	-1000, 1636, 538, -1000, -1000, -1000, -1000, -1000, 842, 261,
	-1000, 16758, 15790, 499, -1000, 195, 16758, 499, 16758, 898,
	1669, 929, 972, 1818, -1000, -1000, -1000, -1000, 1015, -1000,
	1012, -1000, -1000, 754, -1000, -1000, 834, 430, 876, 1650,
	5172, 802, 802, -1000, 26, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 322, 16917, 1727, -1000, 373, -1000, 399, 122,
	344, -1000, -1000, -1000, 251, 246, -1000, 16758, 825, -1000,
	-1000, -1000, -14, 372, -14, -1000, -1000, -1000, -1000, 1027,
	1273, -1000, 16758, -1000, -1000, 16758, 16758, 16758, 16758, -1000,
	-1000, -1000, 550, -1000, 15790, -1000, -1000, -1000, 363, 363,
	-1000, 754, -1000, -1000, -1000, 432, -1000, -1000, -508, 16758,
	16758, 16758, 16758, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 115, 16296, -1000, -1000, -14, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15790, -1000, 15790,
	-1000, 1576, 370, 842, 15790, 15790, -1000, 809, -1000, -1000,
	-1000, 430, 3050, -1000, 3050, -1000, 15790, 125, 665, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	499, 1367, 499, 499, -1000, -1000, 1629, 1609, 1720, -1000,
	842, -1000, 499, -1000, 16, 505, -1000, 1620, -1000, -1000,
	15790, 785, -1000, 15790, -1000, -1000, -1000, -1000, -1000, -1000,
	17161, 1620, 802, -1000, -1000, 133, -1000, 15790, -1000, -1000,
	-1000, 2083, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 779, 15790, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 754, -1000, -1000, -1000, 518,
	-117, 809, -1000, -1000, 1540, -1000, -1000, 15295, -1000, -1000,
	573, 933, -1000, -183, -1000, 809, 809, 430, -1000, 809,
	809, -1000, -1000, 540, -1000, 775, -1000, 125, 430, 969,
	-1000, -1000, 17161, -1000, 5452, -1000, 1590, 1584, 10052, 10052,
	-1000, 15790, 15790, 16758, 505, 16758, 1576, 842, 16758, 842,
	-314, 1576, -1000, 809, -1000, 16758, 804, 1510, -1000, -1000,
	224, 503, -1000, 169, 16758, 16758, 430, -107, -518, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15790, -1000, 430, 960,
	-1000, -575, -1000, 514, -1000, -1000, -1000, -1000, -1000, 514,
	514, 842, 485, 464, -1000, -1000, 509, 430, 499, -1000,
	-1000, 487, -1000, 224, -505, 15295, 9724, 459, -1000, -1000,
	1039, -499, -523, 872, -1000, -666, -1000, -1000, 9296, -1000,
	-1000, -1000, -1000, 5646, 9961, -474, -174, -505, -1000, -369,
	-1000, -1000, -1000, -1000, -1000, 931, -1000, 1038, -1000, 430,
	-1000, -1000, -1000, 440, -1000, 3590, -610, 955, -1000, -453,
	-1000, -1000, -1000, 313, 349, -1000, -1000, -1000, -1000, -1000,
	-1000, -98, -1000, -1000, -508, -516, -1000, -1000, 9961, -605,
	113, 17161, -1000, 943, 941, 1668, -1000, -1000, -1000, -1000,
	-1000, -1000, -180, -1000, -519, -1000, -1000, 1514, -314, -1000,
	1716, -1000, 1687, 362, 362, -1000, -525, -613, -1000, -1000,
	-1000, -1000, -1000, -109, 703, -1000, -1000, 17161, -1000, -1000,
	-1000, 127, 127, -1000, -1000,
}

var sqlite3Pgo = [...]int{
	0, 2089, 24, 106, 598, 22, 648, 111, 2086, 2085,
	2083, 2082, 2080, 2079, 2078, 1477, 1450, 1442, 2077, 2076,
	2073, 2069, 2065, 2064, 2063, 2061, 2060, 2053, 2052, 1543,
	147, 623, 2051, 2043, 2042, 2040, 91, 351, 67, 66,
	356, 2032, 2031, 50, 2029, 2028, 2027, 336, 321, 301,
	1390, 2025, 299, 84, 2024, 2021, 2020, 2019, 2017, 2016,
	2014, 2013, 2009, 2007, 2003, 1995, 1994, 1992, 1991, 1996,
	1421, 1990, 15, 1989, 56, 1987, 1984, 1983, 1982, 1981,
	1979, 1977, 1975, 127, 1973, 1972, 1971, 660, 1969, 1967,
	141, 82, 89, 1966, 1965, 80, 328, 1964, 93, 1963,
	1962, 1959, 135, 1958, 4089, 1955, 49, 47, 1954, 48,
	74, 44, 41, 5, 9, 1953, 1952, 38, 61, 1951,
	1949, 86, 1948, 109, 96, 1946, 1945, 11, 4, 1943,
	3, 6, 8, 45, 1941, 1939, 97, 1935, 1934, 1929,
	70, 1927, 1926, 4325, 1925, 78, 118, 81, 83, 1924,
	1922, 34, 1920, 1917, 1916, 1915, 1913, 35, 1911, 1910,
	1905, 126, 31, 149, 46, 43, 53, 121, 1904, 33,
	62, 1902, 124, 125, 1901, 1900, 1895, 37, 1893, 40,
	112, 103, 26, 69, 1891, 1890, 1486, 606, 1886, 19,
	1880, 28, 30, 1875, 77, 32, 1871, 143, 1869, 51,
	142, 119, 144, 1868, 1867, 1866, 1859, 616, 1856, 1854,
	1852, 59, 131, 134, 71, 1851, 1380, 1849, 1846, 68,
	784, 1723, 29, 145, 1845, 1843, 1842, 2508, 128, 120,
	16, 1835, 199, 1834, 1832, 1831, 707, 249, 92, 1412,
	39, 1830, 1828, 12, 1826, 1824, 1822, 1820, 1819, 1816,
	90, 1704, 75, 21, 72, 148, 54, 1810, 1807, 99,
	76, 1806, 140, 138, 105, 85, 1803, 268, 130, 98,
	1800, 129, 1799, 1798, 1797, 1796, 79, 1795, 1794, 1793,
	1791, 137, 132, 101, 60, 1790, 64, 94, 133, 136,
	23, 1789, 13, 36, 42, 20, 88, 116, 1788, 0,
	1785, 14, 335, 1534, 1805, 1783, 1781, 2, 7, 10,
	1780, 1775, 1770, 1768, 123, 1763, 1762, 1761, 1759, 18,
	27, 17, 1, 1758, 1756, 4418, 2465, 108, 1755, 1753,
	1407,
}

//line sqlite3.y:5903
type sqlite3SymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	yys               int
}

func (st *sqlite3SymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *sqlite3SymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *sqlite3SymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *sqlite3SymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *sqlite3SymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *sqlite3SymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *sqlite3SymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *sqlite3SymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *sqlite3SymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *sqlite3SymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *sqlite3SymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *sqlite3SymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *sqlite3SymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *sqlite3SymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *sqlite3SymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *sqlite3SymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *sqlite3SymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *sqlite3SymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *sqlite3SymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *sqlite3SymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *sqlite3SymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *sqlite3SymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *sqlite3SymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *sqlite3SymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *sqlite3SymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *sqlite3SymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *sqlite3SymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *sqlite3SymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *sqlite3SymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *sqlite3SymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *sqlite3SymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *sqlite3SymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *sqlite3SymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *sqlite3SymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *sqlite3SymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *sqlite3SymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *sqlite3SymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *sqlite3SymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *sqlite3SymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *sqlite3SymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *sqlite3SymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *sqlite3SymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *sqlite3SymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *sqlite3SymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *sqlite3SymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *sqlite3SymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *sqlite3SymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *sqlite3SymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *sqlite3SymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *sqlite3SymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *sqlite3SymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *sqlite3SymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *sqlite3SymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *sqlite3SymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *sqlite3SymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *sqlite3SymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *sqlite3SymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *sqlite3SymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *sqlite3SymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *sqlite3SymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *sqlite3SymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *sqlite3SymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *sqlite3SymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *sqlite3SymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *sqlite3SymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *sqlite3SymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *sqlite3SymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *sqlite3SymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *sqlite3SymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *sqlite3SymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *sqlite3SymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *sqlite3SymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *sqlite3SymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *sqlite3SymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *sqlite3SymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *sqlite3SymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *sqlite3SymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *sqlite3SymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *sqlite3SymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *sqlite3SymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *sqlite3SymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *sqlite3SymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *sqlite3SymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *sqlite3SymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *sqlite3SymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *sqlite3SymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *sqlite3SymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *sqlite3SymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *sqlite3SymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *sqlite3SymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *sqlite3SymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *sqlite3SymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *sqlite3SymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *sqlite3SymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *sqlite3SymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *sqlite3SymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *sqlite3SymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *sqlite3SymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *sqlite3SymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var sqlite3R1 = [...]int{
	0, 323, 324, 324, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 299, 299,
	299, 302, 302, 26, 65, 29, 29, 28, 28, 31,
	31, 30, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 7, 7, 7, 13, 14, 6, 15, 15,
	77, 77, 16, 17, 17, 17, 17, 327, 327, 138,
	138, 136, 136, 137, 137, 18, 19, 19, 202, 202,
	201, 201, 201, 203, 203, 203, 203, 239, 239, 20,
	20, 20, 20, 20, 88, 88, 301, 301, 300, 292,
	292, 291, 291, 290, 298, 298, 297, 297, 296, 34,
	35, 44, 44, 44, 44, 45, 46, 303, 303, 272,
	51, 51, 50, 50, 50, 50, 50, 50, 52, 52,
	48, 48, 47, 47, 49, 49, 274, 274, 261, 261,
	273, 273, 273, 273, 273, 273, 273, 260, 260, 99,
	99, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 318, 318, 318, 317,
	317, 185, 185, 185, 185, 185, 185, 185, 185, 108,
	108, 117, 117, 117, 117, 117, 106, 106, 107, 105,
	105, 105, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 116, 116, 112, 112,
	112, 113, 113, 113, 114, 114, 319, 319, 319, 319,
	243, 243, 243, 243, 246, 246, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 245, 245, 245, 245, 245,
	247, 247, 247, 247, 247, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 249, 249, 249, 249, 249, 249, 249, 249, 259,
	259, 250, 250, 255, 256, 257, 257, 257, 258, 258,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 254,
	254, 253, 253, 253, 262, 286, 286, 285, 285, 283,
	283, 283, 283, 283, 271, 271, 280, 280, 280, 280,
	280, 270, 270, 266, 266, 266, 267, 267, 268, 268,
	265, 265, 269, 269, 282, 282, 281, 281, 263, 263,
	264, 264, 288, 320, 320, 320, 320, 320, 321, 321,
	289, 310, 312, 312, 312, 311, 311, 308, 309, 307,
	307, 307, 307, 307, 74, 74, 74, 214, 214, 215,
	215, 278, 278, 277, 277, 277, 279, 279, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 210, 210, 210, 306, 306, 306, 306,
	306, 306, 305, 305, 305, 275, 275, 275, 304, 304,
	53, 53, 170, 170, 41, 41, 41, 41, 41, 41,
	40, 40, 40, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 42, 42, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 126, 128, 129, 129,
	127, 127, 127, 127, 127, 127, 55, 55, 54, 54,
	131, 130, 132, 132, 132, 22, 33, 33, 23, 23,
	23, 23, 24, 24, 56, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 209, 209, 217, 217, 208,
	208, 232, 232, 232, 211, 211, 211, 316, 316, 316,
	205, 205, 58, 58, 58, 60, 60, 61, 62, 62,
	234, 234, 235, 235, 63, 64, 75, 75, 75, 75,
	75, 75, 78, 78, 78, 9, 9, 9, 9, 71,
	71, 71, 8, 8, 59, 59, 66, 313, 313, 314,
	315, 315, 315, 315, 67, 25, 25, 25, 25, 25,
	25, 94, 94, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 89, 89, 89, 84, 84, 328,
	27, 329, 69, 70, 70, 87, 87, 87, 81, 81,
	81, 86, 86, 86, 10, 10, 11, 193, 193, 12,
	12, 91, 91, 93, 93, 93, 93, 93, 95, 95,
	95, 95, 95, 95, 95, 90, 90, 92, 92, 92,
	92, 224, 224, 224, 223, 223, 120, 120, 122, 121,
	121, 123, 123, 124, 124, 124, 124, 168, 168, 146,
	191, 191, 189, 189, 190, 190, 192, 192, 192, 192,
	125, 125, 125, 125, 133, 133, 134, 134, 135, 135,
	32, 233, 233, 230, 230, 230, 229, 229, 139, 139,
	139, 141, 140, 140, 140, 140, 142, 142, 144, 144,
	143, 143, 145, 150, 150, 149, 149, 147, 147, 147,
	147, 148, 148, 148, 148, 151, 151, 104, 104, 104,
	104, 104, 104, 115, 115, 115, 115, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 76, 76, 76, 206, 206,
	152, 152, 160, 160, 160, 160, 153, 153, 153, 153,
	153, 153, 153, 161, 161, 161, 167, 162, 162, 158,
	158, 158, 158, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 241, 241, 295, 295, 294, 294, 293, 293, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	330, 330, 251, 251, 251, 159, 159, 159, 159, 159,
	85, 85, 85, 85, 85, 238, 238, 238, 242, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 173, 173, 82, 82, 171, 171,
	172, 174, 174, 169, 169, 169, 155, 155, 175, 175,
	176, 176, 177, 177, 179, 178, 178, 180, 181, 181,
	181, 182, 182, 183, 183, 183, 43, 43, 43, 43,
	43, 38, 38, 38, 38, 39, 39, 39, 39, 96,
	96, 96, 96, 98, 98, 97, 97, 72, 72, 73,
	73, 73, 102, 102, 103, 103, 103, 100, 100, 101,
	101, 186, 186, 187, 154, 154, 154, 154, 154, 188,
	188, 188, 188, 194, 194, 164, 164, 166, 166, 165,
	119, 195, 195, 199, 196, 196, 200, 200, 200, 200,
	200, 197, 197, 198, 198, 226, 226, 226, 204, 204,
	216, 216, 212, 212, 213, 213, 207, 207, 218, 218,
	218, 68, 163, 163, 287, 287, 284, 221, 221, 222,
	222, 225, 227, 227, 231, 231, 228, 228, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 325, 326, 236, 237, 237,
	237,
}

var sqlite3R2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 2, 5, 7, 8, 6, 7,
	1, 1, 10, 10, 9, 8, 8, 1, 1, 1,
	3, 1, 3, 1, 3, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 6, 12, 2, 0, 2, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 1, 1, 3, 3, 6,
	4, 7, 8, 8, 8, 6, 3, 1, 1, 4,
	0, 1, 1, 1, 1, 2, 2, 2, 0, 1,
	4, 4, 4, 4, 4, 4, 2, 4, 1, 3,
	1, 1, 3, 4, 3, 3, 3, 5, 10, 0,
	2, 0, 2, 3, 5, 3, 4, 2, 3, 2,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 5,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 0, 0, 1, 1, 0, 1,
	0, 3, 3, 2, 2, 2, 1, 2, 2, 0,
	1, 0, 2, 2, 5, 0, 1, 1, 2, 1,
	2, 1, 1, 3, 0, 1, 4, 3, 3, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 1, 3, 3, 4, 3, 1,
	3, 1, 7, 6, 7, 7, 8, 8, 0, 1,
	5, 2, 1, 1, 1, 0, 1, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 1, 1, 2, 0,
	1, 0, 1, 1, 3, 2, 1, 2, 4, 4,
	3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 2, 0, 1, 5, 1, 3, 7,
	1, 3, 3, 1, 2, 2, 2, 5, 5, 5,
	6, 8, 5, 5, 4, 4, 4, 6, 5, 5,
	2, 2, 2, 2, 3, 3, 3, 4, 3, 3,
	1, 3, 5, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 11, 3, 8, 6,
	6, 6, 13, 8, 6, 10, 8, 4, 1, 3,
	3, 6, 7, 7, 8, 4, 0, 1, 0, 1,
	3, 3, 1, 1, 2, 3, 3, 5, 7, 7,
	6, 5, 3, 2, 3, 3, 3, 7, 3, 3,
	3, 4, 7, 5, 2, 4, 4, 4, 4, 4,
	5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 4, 4,
	4, 4, 4, 5, 3, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	1, 1, 2, 1, 3, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 3, 3, 6, 4, 7,
	6, 1, 3, 2, 2, 2, 1, 1, 1, 3,
	2, 1, 1, 1, 0, 1, 1, 0, 3, 0,
	7, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 5, 5, 4, 0, 2, 4,
	4, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 3, 1, 3, 4, 3,
	0, 3, 1, 3, 1, 3, 1, 1, 3, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 1, 1, 2, 6, 5, 6,
	6, 0, 2, 3, 3, 0, 2, 3, 3, 2,
	3, 1, 6, 3, 4, 3, 1, 3, 4, 5,
	6, 3, 4, 5, 6, 3, 4, 1, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 3, 1, 1, 2,
	2, 2, 2, 1, 1, 2, 9, 6, 6, 6,
	2, 2, 3, 3, 3, 1, 1, 1, 0, 3,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	5, 5, 6, 4, 4, 8, 6, 8, 6, 8,
	5, 4, 2, 2, 1, 2, 2, 2, 8, 8,
	6, 5, 4, 4, 4, 4, 4, 7, 4, 6,
	6, 6, 4, 4, 4, 7, 8, 6, 5, 6,
	8, 11, 7, 8, 8, 9, 4, 4, 4, 4,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	4, 0, 2, 0, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 2, 3, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 1, 0, 2,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 2, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 2, 0, 3,
	0, 2, 0, 1, 3, 1, 3, 2, 0, 1,
	1, 0, 1, 2, 4, 4, 0, 2, 2, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	3, 3, 3, 0, 3, 1, 1, 0, 4, 0,
	1, 1, 0, 3, 1, 3, 2, 1, 1, 0,
	1, 2, 4, 2, 2, 1, 5, 4, 4, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 0, 3, 0, 1, 0, 1,
	1, 5, 0, 1, 0, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var sqlite3Chk = [...]int{
	-1000, -323, -1, -5, -27, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -56, -57, -58,
	-60, -61, -62, -63, -64, -8, -59, -25, -26, -65,
	-66, -67, -68, -10, -11, -12, -3, -2, -7, -328,
	9, 10, -77, -28, 32, -34, -44, 481, -45, -35,
	482, -46, 484, 483, 521, 485, 514, 337, 571, 572,
	574, 575, 576, 577, -78, 519, 520, 488, 36, 173,
	33, 34, 37, 527, 528, 491, -4, -29, 8, -325,
	11, 694, 516, 515, 28, -6, 728, 349, -324, 860,
	-186, -187, 22, 33, 29, -183, -179, -87, -187, 20,
	18, 7, 38, -69, -329, -69, -69, 12, 13, -69,
	-272, -274, 349, 417, 349, -69, -51, -50, -48, -47,
	-49, -52, 31, -41, -40, -42, -36, -37, -279, 487,
	482, 489, 490, 695, 385, 384, 382, 383, 483, 338,
	484, 344, 33, 728, 731, -276, -52, 364, 366, 839,
	495, 842, 843, 846, 847, 853, 854, 855, 386, 7,
	-69, -231, -227, -299, -220, 352, 353, 354, 42, 114,
	36, 769, 138, 555, 770, 41, 743, 557, 178, 191,
	785, 791, 752, 530, 796, 221, 821, 238, 817, 818,
	758, 494, -69, 494, -143, -227, 494, -197, 631, -217,
	633, 646, 641, 639, -209, 642, 644, 534, -316, 653,
	494, 648, 481, 643, 651, 543, -299, 434, 857, 394,
	599, 638, 636, 654, 825, -227, 573, -234, 578, -221,
	-299, -220, 576, -143, -75, 822, 486, 485, -236, -236,
	-89, 825, 827, -162, -104, 401, -115, -118, -109, -110,
	-156, -157, -158, -159, -116, -169, 423, 424, 431, 402,
	-167, -119, 26, 724, 696, 695, 434, 31, 477, 331,
	332, 698, 699, 404, 320, 671, 672, -117, 666, 673,
	668, 701, 702, 377, 703, 367, 369, 368, 704, 705,
	706, 611, 612, 707, 708, 709, 370, 371, 372, 373,
	374, 375, 376, 710, 713, 711, 712, 714, 715, 716,
	721, 722, 717, 718, 719, 720, 723, -221, -227, 499,
	665, 493, 429, 694, -111, -107, -2, -165, 664, 669,
	670, 674, 667, -299, -220, -113, -112, -152, 355, 361,
	365, 362, -322, 378, -325, 356, 357, 358, 359, 360,
	379, 380, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 117, 647, 647, -143, -69, -69,
	-69, -177, -87, -179, -4, -2, -325, 8, -69, -2,
	-3, -7, -29, -31, 755, -30, -227, 12, 419, -143,
	-182, -183, -6, -2, -104, 19, 23, 24, -70, -92,
	425, -104, -227, -70, -92, -207, 498, -69, -69, -196,
	-239, 573, -200, 654, 653, -222, -198, -221, -219, -197,
	652, 69, 507, 487, 556, 23, 482, 485, 400, 25,
	27, 80, 625, 83, 571, 403, 19, 508, 404, 696,
	505, 433, 501, 574, 97, 509, 481, 335, 666, 668,
	664, 665, 31, 50, 121, 13, 28, 126, 24, 483,
	130, 407, 408, 518, 740, 347, 26, 516, 558, 22,
	510, 14, 638, 559, 16, 17, 499, 498, 147, 419,
	495, 560, 55, 333, 11, 160, 56, 29, 416, 57,
	329, 396, 331, 417, 20, 724, 336, 511, 401, 58,
	378, 751, 21, 339, 398, 18, 334, 207, 561, 500,
	729, 562, 755, 512, 418, 227, 577, 484, 694, 513,
	332, 575, 237, 576, 8, 32, 494, 261, 551, 406,
	497, 535, 7, 395, 12, 340, 275, 320, 496, 387,
	405, 15, 728, 731, -273, 417, -260, -264, -221, 509,
	-289, 505, -143, -282, -281, -221, -325, -88, -216, 495,
	503, 502, 395, -303, 398, 551, 665, 493, -47, -48,
	-49, -197, 433, 842, 350, 350, -276, -264, -263, -262,
	-304, 509, -288, -280, 501, 510, -270, 502, 503, -265,
	495, 396, -304, 505, 495, -304, -304, 497, 35, 35,
	386, 386, -304, -265, 500, 510, 505, 509, -218, -265,
	497, 25, -271, 409, -271, 732, 732, -197, 433, -271,
	-271, -271, 538, -271, -271, -271, -271, -271, -271, -271,
	-271, -271, 494, -303, -96, 651, 344, -50, -33, -143,
	-216, 495, 496, -303, 527, -143, 478, -143, -211, 417,
	15, -211, -208, 647, 645, 632, 637, -211, -211, -211,
	541, 630, -266, 495, 35, 506, 647, 541, 630, 541,
	542, 541, 542, 640, 650, 541, -232, 14, 419, 665,
	635, 639, 534, 494, 535, 496, 649, 647, 537, -237,
	-325, -222, 573, -299, 828, -237, 32, 353, 497, -221,
	-71, -221, 356, -9, -5, -16, -15, -17, 409, -94,
	647, -83, 434, 829, 830, 831, 828, 644, 836, 834,
	832, 541, 833, 350, 398, 400, 4, -104, 416, -153,
	409, 410, 411, 412, 413, 414, 415, 419, 401, 403,
	417, 418, 409, 399, 420, 421, 422, 423, 424, 425,
	426, 428, 427, 429, 430, 433, 479, 480, -110, -110,
	-110, -110, -167, -325, -325, -325, -110, -206, -325, -110,
	-325, -325, -325, -325, -173, -104, -325, -330, -325, -330,
	-330, -251, -325, -251, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, 478, -325, -325, -325, -325, -325, -251, -251, -251,
	-251, -251, 365, 361, 355, -169, 362, 356, -221, -227,
	-2, -3, -162, -236, -313, -314, -146, -143, -325, -221,
	-221, 527, -182, -6, -2, -177, -183, -179, -2, -69,
	-81, -93, 326, 327, -95, 24, 39, 330, 328, 23,
	-326, 351, -326, -186, -326, 350, -31, -191, 349, 324,
	350, 21, -178, -180, -104, 339, 38, 14, -224, -223,
	25, -221, 356, 478, 14, -144, 29, -143, -207, -207,
	350, 573, -200, -239, -202, -201, 655, 657, 409, -226,
	-221, 356, 31, 351, 350, -143, -243, -246, -248, -247,
	-249, -244, -245, 596, 597, 434, 600, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 613, 32, 517, 592,
	593, 594, 595, 614, 615, 616, 617, 618, 619, 620,
	621, 579, 598, 726, 580, 581, 582, 583, 584, 585,
	587, 588, 589, 590, 591, -302, -299, 349, 351, 350,
	-250, 349, -104, -96, 494, -299, 495, 495, 495, -69,
	694, -271, -271, -271, 18, -36, -37, -40, -37, 349,
	-260, -269, -302, -299, 349, 396, 500, 395, -268, -265,
	-268, -269, -299, -169, -299, -299, -169, -260, -197, -169,
	-299, 396, 396, -299, -299, -143, -299, 31, 341, 342,
	343, 31, 345, 346, 347, -271, -271, 356, 356, 356,
	-271, 356, -305, 511, 555, 557, 31, 356, -306, 31,
	849, 848, 850, 851, 852, 31, 31, -221, 349, -143,
	-102, 545, 481, 483, 487, 339, 409, 350, 497, 494,
	-299, -212, 499, -212, -221, -228, -227, -219, 356, -104,
	-267, 14, 419, -232, -232, -211, -143, -267, -232, -211,
	-143, -211, -211, -211, -211, -232, -232, -232, -211, -227,
	-227, -143, -143, -143, -143, -143, -143, -143, -237, -205,
	14, 339, -237, -237, -235, 576, 610, 823, 824, 350,
	728, -136, -143, 828, 828, 828, 828, 828, -104, -104,
	-104, 751, -160, 378, 401, 379, 380, -118, -161, -165,
	-167, 363, 419, 403, 417, 418, -109, -110, -109, 43,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-109, -109, -238, -221, 356, 434, -114, -113, 362, -322,
	-114, -90, -92, -104, -104, -299, -221, -90, -90, -104,
	-86, 24, 39, -171, -172, 405, -169, -326, -326, 362,
	-221, -221, -80, -79, 676, 677, 678, 679, 681, 682,
	683, 686, 687, 691, 692, 675, 693, 680, 685, 688,
	689, 690, 684, 595, -104, -104, -104, -104, -104, -104,
	-76, -104, 389, 390, 391, -104, -104, -163, -162, -298,
	-297, -296, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -104, -91, 24, 39, -90, -222,
	-228, -219, -90, -91, -91, -90, -90, 478, -326, 350,
	-315, 657, 658, 826, -230, -229, 25, -227, 356, -163,
	14, -193, 340, -221, -182, -182, 326, 327, 322, -90,
	-95, -326, -30, 25, -189, -221, 325, -104, -104, 350,
	-181, 27, 28, -32, 493, -143, -223, 425, -228, -143,
	-154, 32, 320, -5, -325, -143, -121, -123, -124, -125,
	-146, -168, -325, -126, 747, 744, 14, -136, -137, -145,
	-227, -200, -202, 350, 656, 658, 659, 339, 381, -104,
	-253, 433, -278, -277, -276, -260, -262, -263, -264, 351,
	-253, -257, 628, 627, -250, -250, -250, -250, -250, -252,
	-197, 622, 623, 434, -252, -252, -252, 349, 349, -250,
	-250, -250, -250, -255, -255, -255, -256, -256, -289, -104,
	-286, -285, -283, -284, 364, 820, 776, 728, 340, -281,
	-181, 358, -326, -102, -213, 499, -287, -284, -299, -299,
	-299, -213, -299, 356, -299, 356, -299, 356, 19, 350,
	-261, -260, -53, 555, -288, -282, -269, 396, -268, -269,
	-269, 483, 32, -214, 767, 401, 820, 776, -260, -53,
	-238, -299, 497, -238, -238, 356, -210, 857, -136, -98,
	547, 409, 536, 536, 494, 494, 549, -143, 548, 550,
	552, -143, -143, -212, 339, -138, -143, 26, -227, -143,
	-211, -211, -143, -211, -211, -143, -221, -83, 657, 350,
	728, 22, -84, 22, -325, 378, 379, 380, -161, -109,
	-110, -109, 400, 518, -161, 350, -326, 25, 350, 340,
	-326, -326, -326, 350, 14, -90, -174, -172, 407, -104,
	-326, -326, 350, 350, 14, -242, -326, -326, -326, -326,
	-326, -173, -326, 14, 350, 350, -326, -326, 350, 350,
	-326, 350, 350, 350, -295, 350, 350, 350, 350, -326,
	-326, -326, -326, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, -326, -326, -90, -90, -325, 478, -326,
	-326, -326, -326, -326, -222, -314, 825, 658, -150, -149,
	-147, 337, 498, 338, -229, -326, -114, 353, -190, 353,
	-189, -155, -221, 362, -120, -122, 14, -95, -167, 351,
	350, -180, 416, -225, -299, 478, -151, 15, -194, 339,
	-195, -199, -169, -164, -166, -165, -325, -188, -326, -221,
	32, 350, -139, -141, -140, -142, 329, 333, 335, 330,
	331, 332, 336, -233, 25, -121, -3, -2, -325, -325,
	-325, -143, -136, -327, 14, 340, -327, 350, 478, -201,
	-203, 660, 657, 663, -299, 356, 350, -276, -264, -184,
	-99, 41, -258, 629, -252, 735, -252, -221, 356, 434,
	-254, 434, -254, 622, 623, -259, 356, -259, 351, -43,
	-38, -39, 33, 344, -283, 356, 40, -221, 351, -181,
	-98, -143, 401, 339, -287, -287, -287, -227, -189, 18,
	350, 351, -170, 556, 351, 349, -269, -269, 31, 31,
	820, 776, 767, -53, -170, -253, -299, 859, 858, 351,
	496, 554, -103, 671, -100, 356, 352, -143, -143, -143,
	-143, -143, 487, 483, 497, -136, -143, 350, -74, 513,
	508, -232, -232, 33, -143, 657, 837, 835, -104, 400,
	518, -118, -110, -92, 725, -240, 434, 596, 517, 594,
	590, 610, 601, 627, 592, 628, 589, 588, 587, -240,
	-238, -104, -104, -177, 408, -104, 406, -104, -104, -104,
	-326, 14, -104, -104, -104, -296, -104, -104, -104, -294,
	-293, -114, -169, -326, -294, -104, -104, -293, -293, -297,
	-297, -297, -297, -297, -162, -162, -162, -162, -326, -326,
	-91, -222, -147, -265, -265, -265, 350, -204, 22, 14,
	320, -151, -121, -95, -221, -114, 425, -182, -104, 30,
	-194, 350, 409, 350, -326, -326, 350, 320, 478, -195,
	-123, -124, -124, -123, -124, 329, 329, 329, 334, 329,
	334, 329, -140, -227, -326, -326, -3, -3, -104, -230,
	340, -121, -121, -145, -227, 425, 657, 661, 662, -276,
	-321, 378, 401, 31, 339, 625, 364, -319, 433, 764,
	815, 820, 776, -320, 500, 395, 396, 512, 25, 42,
	-254, -254, 351, 350, 351, -215, -214, -39, -38, -271,
	-271, -299, 496, 26, -143, 339, 339, 339, 19, -260,
	-169, -286, -189, -106, -325, -105, -107, -111, 423, 424,
	-170, -143, -97, 545, 553, 349, -101, 353, -301, 340,
	536, 625, 536, -143, -74, -43, -143, -211, -211, 33,
	-299, -326, -118, -110, -325, -326, -250, -250, -250, -256,
	-250, 584, -250, 584, -250, -326, -326, 350, -326, 22,
	-326, -82, 700, -104, 350, 350, -326, -104, -326, -326,
	-326, -295, 350, -326, 350, -326, 350, -241, 821, -326,
	-326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
	-148, 22, -148, -148, 353, -143, -175, 16, 396, -199,
	-104, -166, 320, -5, -221, -164, -221, -151, -134, -133,
	339, 340, -135, 339, -133, 329, 329, -191, -326, -326,
	350, -151, -121, -151, -151, 478, 378, -325, -108, -117,
	-106, 12, 356, 356, -299, -318, 848, 849, 31, 358,
	396, 396, -143, 349, -252, 356, -252, 31, 345, 346,
	347, 31, 341, 342, 343, -143, -143, -143, -143, -189,
	351, -104, -112, -112, -191, 351, -292, 728, -300, -221,
	-221, -221, -221, -109, -252, -104, -104, -182, 356, -104,
	-104, -326, -326, -294, -293, -104, -326, -131, -130, -132,
	829, 378, 31, -240, -325, 329, 18, 16, -325, -325,
	-176, 17, 19, 12, -164, 478, -177, -104, 349, -104,
	-114, -177, -151, -104, -157, 349, -104, -191, -320, -326,
	25, -291, -290, -222, 349, 340, -85, 419, 728, -326,
	-326, -326, -326, -326, -326, -326, 350, -326, -130, -132,
	-326, 339, -114, -192, -326, -221, 500, 19, 19, -192,
	-192, -104, -162, -195, -221, -182, -189, -128, 632, -182,
	-326, -189, 351, 25, -5, 350, 409, -189, -143, -326,
	726, 336, 729, -104, -326, 339, 739, 829, 350, -326,
	-326, -326, 351, -326, -325, 351, -185, -5, -72, 728,
	-290, -275, -222, 356, 358, 351, 325, 727, 730, -295,
	-221, 500, -230, -129, -127, -221, 782, -311, -310, 724,
	-321, -317, 378, 401, 364, -319, 820, 776, 387, 388,
	-72, -73, 544, 825, -301, 325, -326, -326, 350, 22,
	-243, -55, 793, -308, -309, 339, -312, 638, 792, 813,
	378, 356, 505, -292, 728, -127, 789, -253, -114, -309,
	339, -308, 339, 13, 12, 546, 729, -54, 26, -128,
	-307, 513, 508, 511, 32, -307, 730, 793, 507, 31,
	378, -114, -131, -130, -130,
}

var sqlite3Def = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 0,
	681, 681, 681, 0, 681, 0, 0, 681, -2, -2,
	681, 1134, 0, 681, 0, 0, -2, 613, 615, 0,
	617, -2, 0, 0, 626, 1287, 1287, 674, 0, 0,
	0, 0, 0, 681, 681, 681, 1022, 48, 681, 0,
	80, 81, 632, 633, 634, 63, 0, 1285, 1, 3,
	69, 73, 0, 0, 0, 56, 1031, 0, 74, 0,
	0, 685, 683, 0, 683, 0, 1116, 681, 681, 0,
	109, 110, 0, 0, 0, -2, 113, -2, 142, 143,
	144, 0, 149, 515, 465, 467, 470, 503, -2, -2,
	458, 458, 458, 0, 0, 0, 0, 0, 458, 500,
	1118, 364, 364, 0, 0, 426, 0, 364, 364, 364,
	0, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	1049, 148, 1135, 1132, 1133, 38, 39, 40, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 0, 1110, 0, 553, 780, 0, 604, 604, 0,
	604, 604, 604, 0, 0, 0, 564, 0, 0, 0,
	0, 601, 0, 580, 0, 586, 1288, 0, 1288, 1101,
	0, 598, 596, 608, 609, 612, 616, 0, 621, 624,
	1127, 1128, 0, 639, 47, 0, 630, 631, 644, 645,
	0, 675, 676, 43, 877, 0, 801, 806, 817, 831,
	832, 833, 834, 835, 837, 838, 0, 0, 0, 0,
	843, 844, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 1004, 0, 970, 970, 894, 970, 972,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 266, 267, 876, 1090, 972, 972,
	972, 972, 972, -2, -2, 212, 213, 214, 215, 216,
	217, 218, 0, 208, 0, 271, 272, 268, 269, 270,
	860, 861, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 1287, 0, 654, 0, 0, 0,
	0, 1031, 0, 1023, 1022, 61, 0, 681, -2, 0,
	0, 0, 0, 45, 0, 50, 740, 1071, 0, 1073,
	57, 1032, 65, 67, 1033, 0, 686, 687, 0, 0,
	717, 721, 0, 682, 0, 0, 1117, 1116, 1116, 95,
	0, 1248, 1094, 107, 108, 0, 0, 1129, 1130, 1103,
	1104, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 0, 0, 160, 161, 0, 41,
	391, 0, 156, 0, 384, 331, 0, 1049, 0, 0,
	0, 0, 0, 681, 0, 1111, 137, 138, 145, 146,
	147, 364, 364, 364, 148, 148, 427, 474, 475, 476,
	0, -2, 389, 0, 459, 0, 0, 378, 378, 382,
	380, 381, 0, 0, 0, 0, 0, 0, 490, 491,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 1120, 0, 365, 0, 513, 514, 364, 364, 0,
	0, 0, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 1062, 0, 0, -2, 545, 0,
	0, 0, 1112, 1112, 0, 552, 0, 554, 555, 0,
	0, 556, 0, 601, 601, 599, 600, 558, 559, 560,
	604, 0, 0, 373, 374, 375, 601, 604, 0, 604,
	604, 604, 604, 601, 601, 601, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 583, 584, 587,
	1289, 1290, 1248, 1288, 1288, 594, 1102, 614, 622, 625,
	642, 640, 641, 643, 635, 636, 637, 638, 0, 655,
	656, 661, 0, 0, 0, 666, 667, 668, 0, 0,
	671, 672, 673, 0, 0, 0, 0, 799, 0, 0,
	866, 867, 868, 869, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 839, 840,
	841, 842, 845, 0, 0, 0, 850, 851, 0, 0,
	0, 0, 0, 691, 0, 1005, 0, 892, 0, 893,
	895, 896, 0, 897, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 701, 701, 0, 0, 201, 202, 203,
	204, 205, 219, 220, 221, 222, 223, 273, 1013, 0,
	876, 0, 0, 44, 646, 647, 0, 763, 1122, 0,
	697, 0, 55, 64, 66, 1031, 59, 1031, 0, 703,
	0, 0, -2, -2, 704, 710, 711, 712, 713, 714,
	52, 1286, 53, 0, 72, 0, 46, 0, 0, 0,
	0, 0, 1024, 1025, 1028, 0, 684, 0, 718, 722,
	0, 724, 725, 0, 0, 0, 0, 779, 0, 0,
	0, 1248, 1100, 0, 97, 98, 0, 0, 0, 351,
	1105, 1106, 1107, -2, 371, 0, 351, 335, 281, 282,
	283, 331, 285, 331, 331, 331, 331, 340, 340, 340,
	340, 314, 315, 316, 317, 318, 0, 0, 300, 331,
	331, 331, 331, 321, 322, 323, 324, 325, 326, 327,
	328, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	333, 333, 333, 334, 334, 0, 42, 0, 355, 0,
	1028, 0, 0, 1062, 1114, 1124, 0, 0, 0, 1114,
	115, 0, 0, 0, 0, 471, 472, 468, 504, 0,
	460, 372, 0, -2, 0, 382, 0, 378, 382, 379,
	382, 370, 383, 0, 0, 0, 0, 460, 0, 494,
	495, 496, 0, 498, 499, 501, 0, 505, 506, 507,
	508, 509, 510, 511, 512, 0, 0, 430, 431, 432,
	0, 434, 435, 452, 453, 454, 436, 437, 438, 446,
	447, 448, 449, 450, 451, 439, 440, 443, 0, 130,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 700, 781, 1136, 1137, 605, 606,
	0, 376, 377, 604, 604, 561, 591, 0, 604, 565,
	592, 566, 568, 567, 569, 581, 582, 604, 572, 602,
	603, 573, 574, 575, 576, 577, 578, 579, 588, 0,
	610, 611, 589, 590, 0, 623, 627, 628, 629, 0,
	0, 658, 91, 663, 664, 665, 677, 670, 878, 797,
	798, 0, 800, 803, 0, 862, 864, 805, 807, 873,
	874, 875, 0, 0, 0, 0, 0, 811, 815, 0,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 836, 985, 986, 987, 853, 274, 275, 0,
	854, 0, 715, 0, 0, 0, 852, 0, 0, 0,
	0, 692, 693, 1011, 1008, 0, 0, 971, 973, 0,
	0, 0, 0, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 988, 0, 0, 0, 0, 0,
	1004, 0, 855, 856, 857, 0, 0, 0, 1123, 0,
	125, 126, 0, 0, 0, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 1014,
	0, -2, 0, 0, 0, 0, 0, 0, 1089, 0,
	649, 650, 652, 0, 783, 764, 0, 766, 767, 0,
	0, 696, 0, 699, 58, 60, 708, 709, 0, 726,
	705, 54, 49, 0, 0, 742, 1072, 1034, 1035, 0,
	1027, 1029, 1030, 0, 0, 75, 723, 719, 0, 795,
	1083, 0, 0, 1075, 0, 778, 0, 729, 731, 732,
	733, 761, 0, 736, 0, 0, 0, 0, 0, 93,
	780, 1095, 96, 0, 0, 101, 102, 1096, 1097, 1098,
	1099, 0, 139, -2, 423, 162, 164, 165, 166, 157,
	-2, 338, 336, 337, 284, 340, 340, 308, 309, 310,
	0, 349, 349, 346, 311, 312, 313, 0, 0, 301,
	302, 303, 304, 295, 296, 297, 298, 299, 390, 0,
	1036, 356, 357, 359, 0, 361, 362, 0, 0, 385,
	386, 0, 1028, 1053, 0, 0, 0, 1125, 1124, 1124,
	1124, 0, 150, 151, 152, 153, 154, 155, 0, 148,
	0, 158, 462, 461, 388, 0, 0, 382, 382, 367,
	368, 0, 0, 484, 417, 0, 485, 486, 460, 462,
	351, 497, 0, 428, 429, 433, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 1051,
	1052, 0, 546, 0, 0, 414, 89, 1113, 551, 601,
	571, 593, 601, 563, 570, 585, 619, 662, 0, 0,
	0, 0, 669, 0, 0, 804, 863, 865, 808, 0,
	812, 816, 0, 0, 818, 0, 0, 0, 0, 0,
	859, 883, 884, 0, 0, 1022, 0, 1009, 0, 0,
	891, 974, 0, 0, 0, 0, 902, 903, 904, 905,
	906, 0, 908, 0, 0, 0, 912, 913, 0, 0,
	914, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	927, 928, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 879, 0, 0, 701, 0, 975,
	976, 977, 978, 979, 1014, 648, 651, 653, 739, 784,
	785, 0, 0, 0, 765, 1121, 694, 695, 698, -2,
	0, 0, 1016, 0, 795, 727, 0, 706, 51, 741,
	0, 1026, 0, 760, 1131, 0, 1031, 0, 78, 0,
	1083, 1091, 0, 1074, 1085, 1087, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 768, 0, 0, 771,
	0, 0, 0, 0, 762, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 87, 88, 0, 0, 0, 99,
	100, 0, 0, 106, 352, 353, 148, 425, 163, 398,
	0, 0, 280, 339, 305, 306, 307, 349, 349, 343,
	344, 350, 345, 347, 348, 0, 329, 0, 419, 111,
	1040, 1039, 364, 364, 358, 360, 0, 1126, 332, 387,
	0, 129, 0, 0, 0, 0, 0, 135, 466, 0,
	0, 477, 478, 0, 355, 0, 366, 369, 479, 0,
	482, 483, 418, 462, 488, 489, 502, 444, 445, 442,
	0, 0, 1063, 1064, 1069, 1067, 1068, 116, 519, 521,
	520, 524, 0, 0, 0, 414, 1036, 0, 550, 415,
	416, 604, 604, 657, 92, 0, 660, 0, 0, 0,
	0, 809, 813, 716, 0, 0, 331, 331, 991, 331,
	334, 994, 331, 996, 331, 999, 331, 1002, 1003, 0,
	0, 0, 0, 1006, 890, 1012, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 127, 128, 943, 0, 0,
	945, 947, 948, 918, 944, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 881,
	0, 1015, 786, 791, 791, 791, 0, 0, 1108, 1109,
	1017, 1018, 728, 707, 743, 680, 720, 76, 796, 0,
	79, 0, 0, 0, 1088, 0, 0, 0, 0, 795,
	730, 756, 758, 0, 753, 769, 770, 772, 0, 774,
	0, 776, 777, 740, 735, 737, 0, 0, 0, 795,
	0, 795, 795, 94, 0, 782, 103, 104, 105, 424,
	167, 172, 0, 0, 0, 177, 0, 179, 0, 0,
	0, 184, 185, 399, 0, 277, 279, 0, 0, 170,
	341, 342, 340, 0, 340, 400, 420, 1037, 1038, 0,
	0, 363, 0, 1115, 131, 0, 0, 0, 0, 159,
	463, 354, 0, 480, 0, 206, 207, 209, 0, 0,
	487, 740, 1054, 1055, 1056, 0, 1066, 1070, 119, 0,
	0, 0, 0, 547, 548, 549, 90, 557, 562, 659,
	678, 802, 810, 814, 0, 847, 989, 340, 992, 993,
	995, 997, 998, 1000, 1001, 848, 849, 0, 886, 0,
	888, 1031, 0, 1010, 0, 0, 900, 0, 909, 910,
	911, 0, 0, 917, 0, 919, 0, 0, 0, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 882,
	0, 0, 0, 0, -2, 62, 1020, 0, 0, 1092,
	1093, 1086, 0, 1078, 1081, 1077, 1080, 1022, 750, 757,
	0, 0, 751, 0, 752, 773, 775, 734, -2, 738,
	0, 1022, 795, 85, 86, 0, 173, 0, 175, 199,
	200, 0, 178, 180, 181, 182, 186, 187, 188, 183,
	276, 278, 0, 0, 319, 330, 320, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 740, 132, 133, 134, 469,
	0, 0, 210, 211, 0, 1065, 518, 0, 117, 118,
	0, 0, 523, 980, 990, 0, 0, 0, 1007, 0,
	0, 907, 915, 0, 946, 0, 922, 0, 0, 0,
	542, 543, 0, 942, 0, 792, 0, 0, 0, 0,
	77, 0, 0, 0, 1076, 0, 1031, 754, 0, 759,
	0, 1031, 84, 0, 176, 0, 0, 0, 392, 481,
	0, 120, 121, 0, 0, 0, 0, 0, 0, 885,
	887, 889, 898, 899, 916, 920, 0, 923, 0, 0,
	924, 0, 544, 0, 788, 746, 747, 793, 794, 0,
	0, 1021, 1019, 1084, 1082, 82, 0, 0, 0, 83,
	174, 0, 191, 0, 1057, 0, 0, 0, 525, 846,
	0, 0, 0, 943, 925, 0, 540, 541, 0, 787,
	789, 790, 755, 763, 0, 405, 398, 1057, 516, 1059,
	122, 123, 455, 456, 457, 116, 981, 0, 984, 0,
	748, 749, 526, 0, 528, 0, 536, 393, 406, 0,
	168, 192, 193, 0, 0, 196, 197, 198, 189, 190,
	112, 0, 1060, 1061, 119, 982, 921, 527, 0, 0,
	351, 0, 537, 394, 395, 0, 401, 402, 403, 404,
	194, 195, 0, 522, 0, 529, 530, 538, 0, 396,
	0, 397, 0, 0, 0, 1058, 0, 0, 539, 535,
	407, 409, 410, 0, 0, 408, 983, 0, 411, 412,
	413, 531, 532, 533, 534,
}

var sqlite3Tok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 402, 3, 3, 3, 428, 420, 3,
	349, 351, 425, 423, 350, 424, 478, 426, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 860,
	410, 409, 411, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 399, 3, 431,
}

var sqlite3Tok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var sqlite3Tok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 398, 57738, 400, 57739, 401,
	57740, 403, 57741, 404, 57742, 405, 57743, 406, 57744, 407,
	57745, 408, 57746, 412, 57747, 413, 57748, 414, 57749, 415,
	57750, 416, 57751, 417, 57752, 418, 57753, 419, 57754, 421,
	57755, 422, 57756, 427, 57757, 429, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 477, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 58178, 853, 58179, 854,
	58180, 855, 58181, 856, 58182, 857, 58183, 858, 58184, 859,
	0,
}

var sqlite3ErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func sqlite3Iaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	sqlite3Debug        = 0
	sqlite3ErrorVerbose = true
)

type sqlite3Lexer interface {
	Lex(lval *sqlite3SymType) int
	Error(s string)
}

type sqlite3Parser interface {
	Parse(sqlite3Lexer) int
	Lookahead() int
}

type sqlite3ParserImpl struct {
	lval  sqlite3SymType
	stack [sqlite3InitialStackSize]sqlite3SymType
	char  int
}

func (p *sqlite3ParserImpl) Lookahead() int {
	return p.char
}

func sqlite3NewParser() sqlite3Parser {
	return &sqlite3ParserImpl{}
}

const sqlite3Flag = -1000

func sqlite3Tokname(c int) string {
	if c >= 1 && c-1 < len(sqlite3Toknames) {
		if sqlite3Toknames[c-1] != "" {
			return sqlite3Toknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlite3Statname(s int) string {
	if s >= 0 && s < len(sqlite3Statenames) {
		if sqlite3Statenames[s] != "" {
			return sqlite3Statenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlite3ErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlite3ErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlite3ErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlite3Tokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlite3Pact[state]
	for tok := TOKSTART; tok-1 < len(sqlite3Toknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlite3Last && sqlite3Chk[sqlite3Act[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlite3Def[state] == -2 {
		i := 0
		for sqlite3Exca[i] != -1 || sqlite3Exca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlite3Exca[i] >= 0; i += 2 {
			tok := sqlite3Exca[i]
			if tok < TOKSTART || sqlite3Exca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlite3Exca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlite3Tokname(tok)
	}
	return res
}

func sqlite3lex1(lex sqlite3Lexer, lval *sqlite3SymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if sqlite3Debug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = sqlite3Tok1[0]
		goto out
	}
	if char < len(sqlite3Tok1) {
		token = sqlite3Tok1[char]
		goto out
	}
	if char >= sqlite3Private {
		if char < sqlite3Private+len(sqlite3Tok2) {
			token = sqlite3Tok2[char-sqlite3Private]
			goto out
		}
	}
	for i := 0; i < len(sqlite3Tok3); i += 2 {
		token = sqlite3Tok3[i+0]
		if token == char {
			token = sqlite3Tok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = sqlite3Tok2[1] /* unknown char */
	}
	if sqlite3Debug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", sqlite3Tokname(token), uint(char), token)
	}
	return char, token
}

func sqlite3Parse(sqlite3lex sqlite3Lexer) int {
	return sqlite3NewParser().Parse(sqlite3lex)
}

func (sqlite3rcvr *sqlite3ParserImpl) Parse(sqlite3lex sqlite3Lexer) int {
	var sqlite3n int
	var sqlite3VAL sqlite3SymType
	var sqlite3Dollar []sqlite3SymType
	_ = sqlite3Dollar // silence set and not used
	sqlite3S := sqlite3rcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlite3state := 0
	sqlite3rcvr.char = -1
	sqlite3token := -1 // sqlite3rcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlite3state = -1
		sqlite3rcvr.char = -1
		sqlite3token = -1
	}()
	sqlite3p := -1
	goto sqlite3stack

ret0:
	return 0

ret1:
	return 1

sqlite3stack:
	/* put a state and value onto the stack */
	if sqlite3Debug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlite3Tokname(sqlite3token), sqlite3Statname(sqlite3state))
	}

	sqlite3p++
	if sqlite3p >= len(sqlite3S) {
		nyys := make([]sqlite3SymType, len(sqlite3S)*2)
		copy(nyys, sqlite3S)
		sqlite3S = nyys
	}
	sqlite3S[sqlite3p] = sqlite3VAL
	sqlite3S[sqlite3p].yys = sqlite3state

sqlite3newstate:
	sqlite3n = sqlite3Pact[sqlite3state]
	if sqlite3n <= sqlite3Flag {
		goto sqlite3default /* simple state */
	}
	if sqlite3rcvr.char < 0 {
		sqlite3rcvr.char, sqlite3token = sqlite3lex1(sqlite3lex, &sqlite3rcvr.lval)
	}
	sqlite3n += sqlite3token
	if sqlite3n < 0 || sqlite3n >= sqlite3Last {
		goto sqlite3default
	}
	sqlite3n = sqlite3Act[sqlite3n]
	if sqlite3Chk[sqlite3n] == sqlite3token { /* valid shift */
		sqlite3rcvr.char = -1
		sqlite3token = -1
		sqlite3VAL = sqlite3rcvr.lval
		sqlite3state = sqlite3n
		if Errflag > 0 {
			Errflag--
		}
		goto sqlite3stack
	}

sqlite3default:
	/* default state action */
	sqlite3n = sqlite3Def[sqlite3state]
	if sqlite3n == -2 {
		if sqlite3rcvr.char < 0 {
			sqlite3rcvr.char, sqlite3token = sqlite3lex1(sqlite3lex, &sqlite3rcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlite3Exca[xi+0] == -1 && sqlite3Exca[xi+1] == sqlite3state {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqlite3n = sqlite3Exca[xi+0]
			if sqlite3n < 0 || sqlite3n == sqlite3token {
				break
			}
		}
		sqlite3n = sqlite3Exca[xi+1]
		if sqlite3n < 0 {
			goto ret0
		}
	}
	if sqlite3n == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqlite3lex.Error(sqlite3ErrorMessage(sqlite3state, sqlite3token))
			Nerrs++
			if sqlite3Debug >= 1 {
				__yyfmt__.Printf("%s", sqlite3Statname(sqlite3state))
				__yyfmt__.Printf(" saw %s\n", sqlite3Tokname(sqlite3token))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlite3p >= 0 {
				sqlite3n = sqlite3Pact[sqlite3S[sqlite3p].yys] + sqlite3ErrCode
				if sqlite3n >= 0 && sqlite3n < sqlite3Last {
					sqlite3state = sqlite3Act[sqlite3n] /* simulate a shift of "error" */
					if sqlite3Chk[sqlite3state] == sqlite3ErrCode {
						goto sqlite3stack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlite3Debug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlite3S[sqlite3p].yys)
				}
				sqlite3p--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlite3Debug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlite3Tokname(sqlite3token))
			}
			if sqlite3token == sqlite3EofCode {
				goto ret1
			}
			sqlite3rcvr.char = -1
			sqlite3token = -1
			goto sqlite3newstate /* try again in the same state */
		}
	}

	/* reduction by production sqlite3n */
	if sqlite3Debug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqlite3n, sqlite3Statname(sqlite3state))
	}

	sqlite3nt := sqlite3n
	sqlite3pt := sqlite3p
	_ = sqlite3pt // guard against "declared and not used"

	sqlite3p -= sqlite3R2[sqlite3n]
	// sqlite3p is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlite3p+1 >= len(sqlite3S) {
		nyys := make([]sqlite3SymType, len(sqlite3S)*2)
		copy(nyys, sqlite3S)
		sqlite3S = nyys
	}
	sqlite3VAL = sqlite3S[sqlite3p+1]

	/* consult goto table to find next state */
	sqlite3n = sqlite3R1[sqlite3n]
	sqlite3g := sqlite3Pgo[sqlite3n]
	sqlite3j := sqlite3g + sqlite3S[sqlite3p].yys + 1

	if sqlite3j >= sqlite3Last {
		sqlite3state = sqlite3Act[sqlite3g]
	} else {
		sqlite3state = sqlite3Act[sqlite3j]
		if sqlite3Chk[sqlite3state] != -sqlite3n {
			sqlite3state = sqlite3Act[sqlite3g]
		}
	}
	// dummy call; replaced with literal code
	switch sqlite3nt {

	case 1:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:558
		{
			setParseTree(sqlite3lex, sqlite3Dollar[1].statementUnion())
		}
	case 2:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:563
		{
		}
	case 3:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:564
		{
		}
	case 4:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:568
		{
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 5:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:572
		{
			sqlite3LOCAL = sqlite3Dollar[1].statementUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 37:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:607
		{
			setParseTree(sqlite3lex, nil)
		}
	case 38:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:613
		{
			sqlite3VAL.colIdent = ast.NewColIdentWithAt(string(sqlite3Dollar[1].str), ast.NoAt)
		}
	case 39:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:617
		{
			sqlite3VAL.colIdent = ast.NewColIdentWithAt(string(sqlite3Dollar[1].str), ast.SingleAt)
		}
	case 40:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:621
		{
			sqlite3VAL.colIdent = ast.NewColIdentWithAt(string(sqlite3Dollar[1].str), ast.DoubleAt)
		}
	case 41:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:626
		{
			sqlite3VAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 42:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:630
		{
			sqlite3VAL.colIdent = sqlite3Dollar[1].colIdent
		}
	case 43:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:636
		{
			sqlite3LOCAL = &ast.OtherAdmin{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 44:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:642
		{
			sqlite3LOCAL = &ast.Load{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 45:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.With
//line sqlite3.y:648
		{
			sqlite3LOCAL = &ast.With{Ctes: sqlite3Dollar[2].ctesUnion(), Recursive: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 46:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.With
//line sqlite3.y:652
		{
			sqlite3LOCAL = &ast.With{Ctes: sqlite3Dollar[3].ctesUnion(), Recursive: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 47:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.With
//line sqlite3.y:657
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 48:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.With
//line sqlite3.y:661
		{
			sqlite3LOCAL = sqlite3Dollar[1].withUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 49:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:667
		{
			sqlite3SLICE := (*[]*ast.CommonTableExpr)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].cteUnion())
		}
	case 50:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.CommonTableExpr
//line sqlite3.y:671
		{
			sqlite3LOCAL = []*ast.CommonTableExpr{sqlite3Dollar[1].cteUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 51:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.CommonTableExpr
//line sqlite3.y:677
		{
			sqlite3LOCAL = &ast.CommonTableExpr{TableID: sqlite3Dollar[1].tableIdent, Columns: sqlite3Dollar[2].columnsUnion(), Subquery: sqlite3Dollar[4].subqueryUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 52:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:683
		{
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 53:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:687
		{
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 54:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:691
		{
			ast.SetLockInSelect(sqlite3Dollar[2].selStmtUnion(), sqlite3Dollar[3].lockUnion())
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 55:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:714
		{
			sqlite3Dollar[1].selStmtUnion().SetOrderBy(sqlite3Dollar[2].orderByUnion())
			sqlite3Dollar[1].selStmtUnion().SetLimit(sqlite3Dollar[3].limitUnion())
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 56:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:720
		{
			sqlite3Dollar[1].selStmtUnion().SetLimit(sqlite3Dollar[2].limitUnion())
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 57:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:725
		{
			sqlite3Dollar[1].selStmtUnion().SetOrderBy(sqlite3Dollar[2].orderByUnion())
			sqlite3Dollar[1].selStmtUnion().SetLimit(sqlite3Dollar[3].limitUnion())
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 58:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:731
		{
			sqlite3Dollar[2].selStmtUnion().SetWith(sqlite3Dollar[1].withUnion())
			sqlite3Dollar[2].selStmtUnion().SetOrderBy(sqlite3Dollar[3].orderByUnion())
			sqlite3Dollar[2].selStmtUnion().SetLimit(sqlite3Dollar[4].limitUnion())
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 59:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:738
		{
			sqlite3Dollar[2].selStmtUnion().SetWith(sqlite3Dollar[1].withUnion())
			sqlite3Dollar[2].selStmtUnion().SetLimit(sqlite3Dollar[3].limitUnion())
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 60:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:744
		{
			sqlite3Dollar[2].selStmtUnion().SetWith(sqlite3Dollar[1].withUnion())
			sqlite3Dollar[2].selStmtUnion().SetOrderBy(sqlite3Dollar[3].orderByUnion())
			sqlite3Dollar[2].selStmtUnion().SetLimit(sqlite3Dollar[4].limitUnion())
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 61:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:751
		{
			sqlite3Dollar[2].selStmtUnion().SetWith(sqlite3Dollar[1].withUnion())
		}
	case 62:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:755
		{
			sqlite3LOCAL = ast.NewSelect(ast.Comments(sqlite3Dollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: sqlite3Dollar[5].exprUnion()}}, []string{sqlite3Dollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: sqlite3Dollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 63:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:761
		{
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 64:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:765
		{
			sqlite3LOCAL = &ast.Union{Left: sqlite3Dollar[1].selStmtUnion(), Distinct: sqlite3Dollar[2].booleanUnion(), Right: sqlite3Dollar[3].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 65:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:769
		{
			sqlite3LOCAL = &ast.Union{Left: sqlite3Dollar[1].selStmtUnion(), Distinct: sqlite3Dollar[2].booleanUnion(), Right: sqlite3Dollar[3].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 66:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:773
		{
			sqlite3LOCAL = &ast.Union{Left: sqlite3Dollar[1].selStmtUnion(), Distinct: sqlite3Dollar[2].booleanUnion(), Right: sqlite3Dollar[3].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 67:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:777
		{
			sqlite3LOCAL = &ast.Union{Left: sqlite3Dollar[1].selStmtUnion(), Distinct: sqlite3Dollar[2].booleanUnion(), Right: sqlite3Dollar[3].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 68:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:783
		{
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 69:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:787
		{
			ast.SetLockInSelect(sqlite3Dollar[1].selStmtUnion(), sqlite3Dollar[2].lockUnion())
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 70:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:792
		{
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 71:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:796
		{
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 72:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:802
		{
			sqlite3LOCAL = sqlite3Dollar[2].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 73:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:806
		{
			sqlite3Dollar[1].selStmtUnion().SetInto(sqlite3Dollar[2].selectIntoUnion())
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 74:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:811
		{
			sqlite3Dollar[1].selStmtUnion().SetInto(sqlite3Dollar[2].selectIntoUnion())
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 75:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:818
		{
			sqlite3LOCAL = &ast.Stream{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), SelectExpr: sqlite3Dollar[3].selectExprUnion(), Table: sqlite3Dollar[5].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 76:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:824
		{
			sqlite3LOCAL = &ast.VStream{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), SelectExpr: sqlite3Dollar[3].selectExprUnion(), Table: sqlite3Dollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, sqlite3Dollar[6].exprUnion()), Limit: sqlite3Dollar[7].limitUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 77:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectStatement
//line sqlite3.y:832
		{
			sqlite3LOCAL = ast.NewSelect(ast.Comments(sqlite3Dollar[2].strs), sqlite3Dollar[4].selectExprsUnion() /*SelectExprs*/, sqlite3Dollar[3].strs /*options*/, nil, sqlite3Dollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, sqlite3Dollar[6].exprUnion()), ast.GroupBy(sqlite3Dollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, sqlite3Dollar[8].exprUnion()))
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 78:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:840
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := sqlite3Dollar[5].insUnion()
			ins.Action = sqlite3Dollar[1].insertActionUnion()
			ins.Comments = ast.Comments(sqlite3Dollar[2].strs).Parsed()
			ins.Ignore = sqlite3Dollar[3].ignoreUnion()
			ins.Table = sqlite3Dollar[4].tableName
			ins.OnDup = ast.OnDup(sqlite3Dollar[6].updateExprsUnion())
			sqlite3LOCAL = ins
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 79:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:851
		{
			cols := make(ast.Columns, 0, len(sqlite3Dollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(sqlite3Dollar[7].updateExprsUnion()))
			for _, updateList := range sqlite3Dollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			sqlite3LOCAL = &ast.Insert{Action: sqlite3Dollar[1].insertActionUnion(), Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Ignore: sqlite3Dollar[3].ignoreUnion(), Table: sqlite3Dollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(sqlite3Dollar[7].updateExprsUnion())}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 80:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.InsertAction
//line sqlite3.y:863
		{
			sqlite3LOCAL = ast.InsertAct
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 81:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.InsertAction
//line sqlite3.y:867
		{
			sqlite3LOCAL = ast.ReplaceAct
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 82:
		sqlite3Dollar = sqlite3S[sqlite3pt-10 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:873
		{
			sqlite3LOCAL = &ast.Update{With: sqlite3Dollar[1].withUnion(), Comments: ast.Comments(sqlite3Dollar[3].strs).Parsed(), Ignore: sqlite3Dollar[4].ignoreUnion(), TableExprs: sqlite3Dollar[5].tableExprsUnion(), Exprs: sqlite3Dollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, sqlite3Dollar[8].exprUnion()), OrderBy: sqlite3Dollar[9].orderByUnion(), Limit: sqlite3Dollar[10].limitUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 83:
		sqlite3Dollar = sqlite3S[sqlite3pt-10 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:879
		{
			sqlite3LOCAL = &ast.Delete{With: sqlite3Dollar[1].withUnion(), Comments: ast.Comments(sqlite3Dollar[3].strs).Parsed(), Ignore: sqlite3Dollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: sqlite3Dollar[6].tableName, As: sqlite3Dollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, sqlite3Dollar[8].exprUnion()), OrderBy: sqlite3Dollar[9].orderByUnion(), Limit: sqlite3Dollar[10].limitUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 84:
		sqlite3Dollar = sqlite3S[sqlite3pt-9 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:883
		{
			sqlite3LOCAL = &ast.Delete{With: sqlite3Dollar[1].withUnion(), Comments: ast.Comments(sqlite3Dollar[3].strs).Parsed(), Ignore: sqlite3Dollar[4].ignoreUnion(), Targets: sqlite3Dollar[6].tableNamesUnion(), TableExprs: sqlite3Dollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, sqlite3Dollar[9].exprUnion())}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 85:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:887
		{
			sqlite3LOCAL = &ast.Delete{With: sqlite3Dollar[1].withUnion(), Comments: ast.Comments(sqlite3Dollar[3].strs).Parsed(), Ignore: sqlite3Dollar[4].ignoreUnion(), Targets: sqlite3Dollar[5].tableNamesUnion(), TableExprs: sqlite3Dollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, sqlite3Dollar[8].exprUnion())}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 86:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:891
		{
			sqlite3LOCAL = &ast.Delete{With: sqlite3Dollar[1].withUnion(), Comments: ast.Comments(sqlite3Dollar[3].strs).Parsed(), Ignore: sqlite3Dollar[4].ignoreUnion(), Targets: sqlite3Dollar[5].tableNamesUnion(), TableExprs: sqlite3Dollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, sqlite3Dollar[8].exprUnion())}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 87:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:896
		{
		}
	case 88:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:897
		{
		}
	case 89:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableNames
//line sqlite3.y:901
		{
			sqlite3LOCAL = ast.TableNames{sqlite3Dollar[1].tableName.ToViewName()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 90:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:905
		{
			sqlite3SLICE := (*ast.TableNames)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].tableName.ToViewName())
		}
	case 91:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableNames
//line sqlite3.y:911
		{
			sqlite3LOCAL = ast.TableNames{sqlite3Dollar[1].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 92:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:915
		{
			sqlite3SLICE := (*ast.TableNames)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].tableName)
		}
	case 93:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableNames
//line sqlite3.y:921
		{
			sqlite3LOCAL = ast.TableNames{sqlite3Dollar[1].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 94:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:925
		{
			sqlite3SLICE := (*ast.TableNames)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].tableName)
		}
	case 95:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:931
		{
			sqlite3LOCAL = &ast.Set{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Exprs: sqlite3Dollar[3].setExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 96:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:937
		{
			sqlite3LOCAL = &ast.SetTransaction{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Scope: sqlite3Dollar[3].scopeUnion(), Characteristics: sqlite3Dollar[5].characteristicsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 97:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:941
		{
			sqlite3LOCAL = &ast.SetTransaction{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Characteristics: sqlite3Dollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 98:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.Characteristic
//line sqlite3.y:947
		{
			sqlite3LOCAL = []ast.Characteristic{sqlite3Dollar[1].characteristicUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 99:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:951
		{
			sqlite3SLICE := (*[]ast.Characteristic)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].characteristicUnion())
		}
	case 100:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Characteristic
//line sqlite3.y:957
		{
			sqlite3LOCAL = sqlite3Dollar[3].isolationLevelUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 101:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Characteristic
//line sqlite3.y:961
		{
			sqlite3LOCAL = ast.ReadWrite
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 102:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Characteristic
//line sqlite3.y:965
		{
			sqlite3LOCAL = ast.ReadOnly
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 103:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsolationLevel
//line sqlite3.y:971
		{
			sqlite3LOCAL = ast.RepeatableRead
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 104:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsolationLevel
//line sqlite3.y:975
		{
			sqlite3LOCAL = ast.ReadCommitted
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 105:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsolationLevel
//line sqlite3.y:979
		{
			sqlite3LOCAL = ast.ReadUncommitted
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 106:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsolationLevel
//line sqlite3.y:983
		{
			sqlite3LOCAL = ast.Serializable
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 107:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Scope
//line sqlite3.y:989
		{
			sqlite3LOCAL = ast.SessionScope
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 108:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Scope
//line sqlite3.y:993
		{
			sqlite3LOCAL = ast.GlobalScope
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 109:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:999
		{
			sqlite3Dollar[1].createTableUnion().TableSpec = sqlite3Dollar[2].tableSpecUnion()
			sqlite3Dollar[1].createTableUnion().FullyParsed = true
			sqlite3LOCAL = sqlite3Dollar[1].createTableUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 110:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:1005
		{
			// Create table [name] like [name]
			sqlite3Dollar[1].createTableUnion().OptLike = sqlite3Dollar[2].optLikeUnion()
			sqlite3Dollar[1].createTableUnion().FullyParsed = true
			sqlite3LOCAL = sqlite3Dollar[1].createTableUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 111:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:1012
		{
			indexDef := sqlite3Dollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = sqlite3Dollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, sqlite3Dollar[5].indexOptionsUnion()...)
			sqlite3Dollar[1].alterTableUnion().AlterOptions = append(sqlite3Dollar[1].alterTableUnion().AlterOptions, sqlite3Dollar[6].alterOptionsUnion()...)
			sqlite3Dollar[1].alterTableUnion().FullyParsed = true
			sqlite3LOCAL = sqlite3Dollar[1].alterTableUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 112:
		sqlite3Dollar = sqlite3S[sqlite3pt-12 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:1021
		{
			sqlite3LOCAL = &ast.CreateView{ViewName: sqlite3Dollar[8].tableName.ToViewName(), Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), IsReplace: sqlite3Dollar[3].booleanUnion(), Algorithm: sqlite3Dollar[4].str, Definer: sqlite3Dollar[5].definerUnion(), Security: sqlite3Dollar[6].str, Columns: sqlite3Dollar[9].columnsUnion(), Select: sqlite3Dollar[11].selStmtUnion(), CheckOption: sqlite3Dollar[12].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 113:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:1025
		{
			sqlite3Dollar[1].createDatabaseUnion().FullyParsed = true
			sqlite3Dollar[1].createDatabaseUnion().CreateOptions = sqlite3Dollar[2].databaseOptionsUnion()
			sqlite3LOCAL = sqlite3Dollar[1].createDatabaseUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 114:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:1032
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 115:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:1036
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 116:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:1041
		{
			sqlite3VAL.colIdent = ast.NewColIdent("")
		}
	case 117:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1045
		{
			sqlite3VAL.colIdent = sqlite3Dollar[2].colIdent
		}
	case 118:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1051
		{
			sqlite3VAL.colIdent = sqlite3Dollar[1].colIdent
		}
	case 119:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []ast.VindexParam
//line sqlite3.y:1056
		{
			var v []ast.VindexParam
			sqlite3LOCAL = v
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 120:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL []ast.VindexParam
//line sqlite3.y:1061
		{
			sqlite3LOCAL = sqlite3Dollar[2].vindexParamsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 121:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.VindexParam
//line sqlite3.y:1067
		{
			sqlite3LOCAL = make([]ast.VindexParam, 0, 4)
			sqlite3LOCAL = append(sqlite3LOCAL, sqlite3Dollar[1].vindexParam)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 122:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1072
		{
			sqlite3SLICE := (*[]ast.VindexParam)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].vindexParam)
		}
	case 123:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1078
		{
			sqlite3VAL.vindexParam = ast.VindexParam{Key: sqlite3Dollar[1].colIdent, Val: sqlite3Dollar[3].str}
		}
	case 124:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.JSONObjectParam
//line sqlite3.y:1083
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 125:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.JSONObjectParam
//line sqlite3.y:1087
		{
			sqlite3LOCAL = sqlite3Dollar[1].jsonObjectParamsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 126:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.JSONObjectParam
//line sqlite3.y:1093
		{
			sqlite3LOCAL = []*ast.JSONObjectParam{sqlite3Dollar[1].jsonObjectParam}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 127:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1097
		{
			sqlite3SLICE := (*[]*ast.JSONObjectParam)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].jsonObjectParam)
		}
	case 128:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1103
		{
			sqlite3VAL.jsonObjectParam = &ast.JSONObjectParam{Key: sqlite3Dollar[1].exprUnion(), Value: sqlite3Dollar[3].exprUnion()}
		}
	case 129:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.CreateTable
//line sqlite3.y:1109
		{
			sqlite3LOCAL = &ast.CreateTable{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Table: sqlite3Dollar[6].tableName, IfNotExists: sqlite3Dollar[5].booleanUnion(), Temp: sqlite3Dollar[3].booleanUnion()}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 130:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AlterTable
//line sqlite3.y:1116
		{
			sqlite3LOCAL = &ast.AlterTable{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Table: sqlite3Dollar[4].tableName}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 131:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AlterTable
//line sqlite3.y:1123
		{
			sqlite3LOCAL = &ast.AlterTable{Table: sqlite3Dollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: sqlite3Dollar[4].colIdent, Type: string(sqlite3Dollar[3].str)}, Options: sqlite3Dollar[5].indexOptionsUnion()}}}}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 132:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AlterTable
//line sqlite3.y:1128
		{
			sqlite3LOCAL = &ast.AlterTable{Table: sqlite3Dollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: sqlite3Dollar[5].colIdent, Type: string(sqlite3Dollar[3].str) + " " + string(sqlite3Dollar[4].str), Fulltext: true}, Options: sqlite3Dollar[6].indexOptionsUnion()}}}}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 133:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AlterTable
//line sqlite3.y:1133
		{
			sqlite3LOCAL = &ast.AlterTable{Table: sqlite3Dollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: sqlite3Dollar[5].colIdent, Type: string(sqlite3Dollar[3].str) + " " + string(sqlite3Dollar[4].str), Spatial: true}, Options: sqlite3Dollar[6].indexOptionsUnion()}}}}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 134:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AlterTable
//line sqlite3.y:1138
		{
			sqlite3LOCAL = &ast.AlterTable{Table: sqlite3Dollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: sqlite3Dollar[5].colIdent, Type: string(sqlite3Dollar[3].str) + " " + string(sqlite3Dollar[4].str), Unique: true}, Options: sqlite3Dollar[6].indexOptionsUnion()}}}}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 135:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.CreateDatabase
//line sqlite3.y:1145
		{
			sqlite3LOCAL = &ast.CreateDatabase{Comments: ast.Comments(sqlite3Dollar[4].strs).Parsed(), DBName: sqlite3Dollar[6].tableIdent, IfNotExists: sqlite3Dollar[5].booleanUnion()}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 136:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AlterDatabase
//line sqlite3.y:1152
		{
			sqlite3LOCAL = &ast.AlterDatabase{}
			setDDL(sqlite3lex, sqlite3LOCAL)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 139:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableSpec
//line sqlite3.y:1163
		{
			sqlite3LOCAL = sqlite3Dollar[2].tableSpecUnion()
			sqlite3LOCAL.Options = sqlite3Dollar[4].tableOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 140:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []ast.DatabaseOption
//line sqlite3.y:1169
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 141:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.DatabaseOption
//line sqlite3.y:1173
		{
			sqlite3LOCAL = sqlite3Dollar[1].databaseOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 142:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.DatabaseOption
//line sqlite3.y:1179
		{
			sqlite3LOCAL = []ast.DatabaseOption{sqlite3Dollar[1].databaseOption}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 143:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.DatabaseOption
//line sqlite3.y:1183
		{
			sqlite3LOCAL = []ast.DatabaseOption{sqlite3Dollar[1].databaseOption}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 144:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.DatabaseOption
//line sqlite3.y:1187
		{
			sqlite3LOCAL = []ast.DatabaseOption{sqlite3Dollar[1].databaseOption}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 145:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1191
		{
			sqlite3SLICE := (*[]ast.DatabaseOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].databaseOption)
		}
	case 146:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1195
		{
			sqlite3SLICE := (*[]ast.DatabaseOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].databaseOption)
		}
	case 147:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1199
		{
			sqlite3SLICE := (*[]ast.DatabaseOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].databaseOption)
		}
	case 148:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:1205
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 149:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:1209
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 150:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1215
		{
			sqlite3VAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sqlite3Dollar[4].colIdent.String()), IsDefault: sqlite3Dollar[1].booleanUnion()}
		}
	case 151:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1219
		{
			sqlite3VAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(sqlite3Dollar[4].str)), IsDefault: sqlite3Dollar[1].booleanUnion()}
		}
	case 152:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1225
		{
			sqlite3VAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sqlite3Dollar[4].colIdent.String()), IsDefault: sqlite3Dollar[1].booleanUnion()}
		}
	case 153:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1229
		{
			sqlite3VAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(sqlite3Dollar[4].str)), IsDefault: sqlite3Dollar[1].booleanUnion()}
		}
	case 154:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1235
		{
			sqlite3VAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sqlite3Dollar[4].colIdent.String()), IsDefault: sqlite3Dollar[1].booleanUnion()}
		}
	case 155:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1239
		{
			sqlite3VAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(sqlite3Dollar[4].str)), IsDefault: sqlite3Dollar[1].booleanUnion()}
		}
	case 156:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.OptLike
//line sqlite3.y:1245
		{
			sqlite3LOCAL = &ast.OptLike{LikeTable: sqlite3Dollar[2].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 157:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.OptLike
//line sqlite3.y:1249
		{
			sqlite3LOCAL = &ast.OptLike{LikeTable: sqlite3Dollar[3].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 158:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.ColumnDefinition
//line sqlite3.y:1255
		{
			sqlite3LOCAL = []*ast.ColumnDefinition{sqlite3Dollar[1].columnDefinitionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 159:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1259
		{
			sqlite3SLICE := (*[]*ast.ColumnDefinition)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].columnDefinitionUnion())
		}
	case 160:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableSpec
//line sqlite3.y:1265
		{
			sqlite3LOCAL = &ast.TableSpec{}
			sqlite3LOCAL.AddColumn(sqlite3Dollar[1].columnDefinitionUnion())
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 161:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableSpec
//line sqlite3.y:1270
		{
			sqlite3LOCAL = &ast.TableSpec{}
			sqlite3LOCAL.AddConstraint(sqlite3Dollar[1].constraintDefinitionUnion())
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 162:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1275
		{
			sqlite3VAL.tableSpecUnion().AddColumn(sqlite3Dollar[3].columnDefinitionUnion())
		}
	case 163:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:1279
		{
			sqlite3VAL.tableSpecUnion().AddColumn(sqlite3Dollar[3].columnDefinitionUnion())
			sqlite3VAL.tableSpecUnion().AddConstraint(sqlite3Dollar[4].constraintDefinitionUnion())
		}
	case 164:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1284
		{
			sqlite3VAL.tableSpecUnion().AddIndex(sqlite3Dollar[3].indexDefinitionUnion())
		}
	case 165:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1288
		{
			sqlite3VAL.tableSpecUnion().AddConstraint(sqlite3Dollar[3].constraintDefinitionUnion())
		}
	case 166:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1292
		{
			sqlite3VAL.tableSpecUnion().AddConstraint(sqlite3Dollar[3].constraintDefinitionUnion())
		}
	case 167:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnDefinition
//line sqlite3.y:1303
		{
			sqlite3Dollar[2].columnType.Options = sqlite3Dollar[4].columnTypeOptionsUnion()
			if sqlite3Dollar[2].columnType.Options.Collate == "" {
				sqlite3Dollar[2].columnType.Options.Collate = sqlite3Dollar[3].str
			}
			sqlite3Dollar[2].columnType.Options.Reference = sqlite3Dollar[5].referenceDefinitionUnion()
			sqlite3LOCAL = &ast.ColumnDefinition{Name: sqlite3Dollar[1].colIdent, Type: sqlite3Dollar[2].columnType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 168:
		sqlite3Dollar = sqlite3S[sqlite3pt-10 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnDefinition
//line sqlite3.y:1312
		{
			sqlite3Dollar[2].columnType.Options = sqlite3Dollar[9].columnTypeOptionsUnion()
			sqlite3Dollar[2].columnType.Options.As = sqlite3Dollar[7].exprUnion()
			sqlite3Dollar[2].columnType.Options.Reference = sqlite3Dollar[10].referenceDefinitionUnion()
			sqlite3Dollar[2].columnType.Options.Collate = sqlite3Dollar[3].str
			sqlite3LOCAL = &ast.ColumnDefinition{Name: sqlite3Dollar[1].colIdent, Type: sqlite3Dollar[2].columnType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 169:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:1321
		{
			sqlite3VAL.str = ""
		}
	case 170:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1325
		{
			sqlite3VAL.str = ""
		}
	case 171:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1334
		{
			sqlite3LOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 172:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1338
		{
			val := true
			sqlite3Dollar[1].columnTypeOptionsUnion().Null = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 173:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1344
		{
			val := false
			sqlite3Dollar[1].columnTypeOptionsUnion().Null = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 174:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1350
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Default = sqlite3Dollar[4].exprUnion()
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 175:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1355
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Default = sqlite3Dollar[3].exprUnion()
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 176:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1360
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().OnUpdate = sqlite3Dollar[4].exprUnion()
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 177:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1365
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Autoincrement = true
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 178:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1370
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(sqlite3Dollar[3].str)
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 179:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1375
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().KeyOpt = sqlite3Dollar[2].colKeyOptUnion()
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 180:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1380
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(sqlite3Dollar[3].str)
		}
	case 181:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1384
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Collate = string(sqlite3Dollar[3].colIdent.String())
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 182:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1389
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Format = sqlite3Dollar[3].columnFormatUnion()
		}
	case 183:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1393
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(sqlite3Dollar[3].str)
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 184:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1398
		{
			val := false
			sqlite3Dollar[1].columnTypeOptionsUnion().Invisible = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 185:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1404
		{
			val := true
			sqlite3Dollar[1].columnTypeOptionsUnion().Invisible = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 186:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnFormat
//line sqlite3.y:1412
		{
			sqlite3LOCAL = ast.FixedFormat
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 187:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnFormat
//line sqlite3.y:1416
		{
			sqlite3LOCAL = ast.DynamicFormat
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 188:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnFormat
//line sqlite3.y:1420
		{
			sqlite3LOCAL = ast.DefaultFormat
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 189:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnStorage
//line sqlite3.y:1426
		{
			sqlite3LOCAL = ast.VirtualStorage
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 190:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnStorage
//line sqlite3.y:1430
		{
			sqlite3LOCAL = ast.StoredStorage
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 191:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1435
		{
			sqlite3LOCAL = &ast.ColumnTypeOptions{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 192:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1439
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Storage = sqlite3Dollar[2].columnStorageUnion()
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 193:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1444
		{
			val := true
			sqlite3Dollar[1].columnTypeOptionsUnion().Null = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 194:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1450
		{
			val := false
			sqlite3Dollar[1].columnTypeOptionsUnion().Null = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 195:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1456
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(sqlite3Dollar[3].str)
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 196:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1461
		{
			sqlite3Dollar[1].columnTypeOptionsUnion().KeyOpt = sqlite3Dollar[2].colKeyOptUnion()
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 197:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1466
		{
			val := false
			sqlite3Dollar[1].columnTypeOptionsUnion().Invisible = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 198:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColumnTypeOptions
//line sqlite3.y:1472
		{
			val := true
			sqlite3Dollar[1].columnTypeOptionsUnion().Invisible = &val
			sqlite3LOCAL = sqlite3Dollar[1].columnTypeOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 199:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1480
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 201:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1487
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 202:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1491
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 203:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1495
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 204:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1499
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 205:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1503
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 208:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1514
		{
			sqlite3LOCAL = &ast.NullVal{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 210:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1521
		{
			sqlite3LOCAL = sqlite3Dollar[2].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 211:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1525
		{
			sqlite3LOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 212:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1531
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 213:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1535
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 214:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1539
		{
			sqlite3LOCAL = sqlite3Dollar[1].boolValUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 215:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1543
		{
			sqlite3LOCAL = ast.NewHexLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 216:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1547
		{
			sqlite3LOCAL = ast.NewHexNumLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 217:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1551
		{
			sqlite3LOCAL = ast.NewBitLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 218:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1555
		{
			sqlite3LOCAL = ast.NewArgument(sqlite3Dollar[1].str[1:])
			bindVariable(sqlite3lex, sqlite3Dollar[1].str[1:])
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 219:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1560
		{
			sqlite3LOCAL = &ast.IntroducerExpr{CharacterSet: sqlite3Dollar[1].str, Expr: ast.NewBitLiteral(sqlite3Dollar[2].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 220:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1564
		{
			sqlite3LOCAL = &ast.IntroducerExpr{CharacterSet: sqlite3Dollar[1].str, Expr: ast.NewHexNumLiteral(sqlite3Dollar[2].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 221:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1568
		{
			sqlite3LOCAL = &ast.IntroducerExpr{CharacterSet: sqlite3Dollar[1].str, Expr: ast.NewHexLiteral(sqlite3Dollar[2].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 222:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1572
		{
			sqlite3LOCAL = &ast.IntroducerExpr{CharacterSet: sqlite3Dollar[1].str, Expr: sqlite3Dollar[2].colNameUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 223:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1576
		{
			bindVariable(sqlite3lex, sqlite3Dollar[2].str[1:])
			sqlite3LOCAL = &ast.IntroducerExpr{CharacterSet: sqlite3Dollar[1].str, Expr: ast.NewArgument(sqlite3Dollar[2].str[1:])}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 224:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1583
		{
			sqlite3VAL.str = ast.Armscii8Str
		}
	case 225:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1587
		{
			sqlite3VAL.str = ast.ASCIIStr
		}
	case 226:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1591
		{
			sqlite3VAL.str = ast.Big5Str
		}
	case 227:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1595
		{
			sqlite3VAL.str = ast.UBinaryStr
		}
	case 228:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1599
		{
			sqlite3VAL.str = ast.Cp1250Str
		}
	case 229:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1603
		{
			sqlite3VAL.str = ast.Cp1251Str
		}
	case 230:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1607
		{
			sqlite3VAL.str = ast.Cp1256Str
		}
	case 231:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1611
		{
			sqlite3VAL.str = ast.Cp1257Str
		}
	case 232:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1615
		{
			sqlite3VAL.str = ast.Cp850Str
		}
	case 233:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1619
		{
			sqlite3VAL.str = ast.Cp852Str
		}
	case 234:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1623
		{
			sqlite3VAL.str = ast.Cp866Str
		}
	case 235:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1627
		{
			sqlite3VAL.str = ast.Cp932Str
		}
	case 236:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1631
		{
			sqlite3VAL.str = ast.Dec8Str
		}
	case 237:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1635
		{
			sqlite3VAL.str = ast.EucjpmsStr
		}
	case 238:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1639
		{
			sqlite3VAL.str = ast.EuckrStr
		}
	case 239:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1643
		{
			sqlite3VAL.str = ast.Gb18030Str
		}
	case 240:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1647
		{
			sqlite3VAL.str = ast.Gb2312Str
		}
	case 241:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1651
		{
			sqlite3VAL.str = ast.GbkStr
		}
	case 242:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1655
		{
			sqlite3VAL.str = ast.Geostd8Str
		}
	case 243:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1659
		{
			sqlite3VAL.str = ast.GreekStr
		}
	case 244:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1663
		{
			sqlite3VAL.str = ast.HebrewStr
		}
	case 245:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1667
		{
			sqlite3VAL.str = ast.Hp8Str
		}
	case 246:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1671
		{
			sqlite3VAL.str = ast.Keybcs2Str
		}
	case 247:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1675
		{
			sqlite3VAL.str = ast.Koi8rStr
		}
	case 248:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1679
		{
			sqlite3VAL.str = ast.Koi8uStr
		}
	case 249:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1683
		{
			sqlite3VAL.str = ast.Latin1Str
		}
	case 250:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1687
		{
			sqlite3VAL.str = ast.Latin2Str
		}
	case 251:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1691
		{
			sqlite3VAL.str = ast.Latin5Str
		}
	case 252:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1695
		{
			sqlite3VAL.str = ast.Latin7Str
		}
	case 253:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1699
		{
			sqlite3VAL.str = ast.MacceStr
		}
	case 254:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1703
		{
			sqlite3VAL.str = ast.MacromanStr
		}
	case 255:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1707
		{
			sqlite3VAL.str = ast.SjisStr
		}
	case 256:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1711
		{
			sqlite3VAL.str = ast.Swe7Str
		}
	case 257:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1715
		{
			sqlite3VAL.str = ast.Tis620Str
		}
	case 258:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1719
		{
			sqlite3VAL.str = ast.Ucs2Str
		}
	case 259:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1723
		{
			sqlite3VAL.str = ast.UjisStr
		}
	case 260:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1727
		{
			sqlite3VAL.str = ast.Utf16Str
		}
	case 261:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1731
		{
			sqlite3VAL.str = ast.Utf16leStr
		}
	case 262:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1735
		{
			sqlite3VAL.str = ast.Utf32Str
		}
	case 263:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1739
		{
			sqlite3VAL.str = ast.Utf8Str
		}
	case 264:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1743
		{
			sqlite3VAL.str = ast.Utf8mb4Str
		}
	case 265:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1747
		{
			sqlite3VAL.str = ast.Utf8Str
		}
	case 268:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1757
		{
			sqlite3LOCAL = ast.NewIntLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 269:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1761
		{
			sqlite3LOCAL = ast.NewFloatLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 270:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1765
		{
			sqlite3LOCAL = ast.NewDecimalLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 271:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1771
		{
			sqlite3LOCAL = ast.NewStrLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 272:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1775
		{
			sqlite3LOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 273:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1779
		{
			sqlite3LOCAL = &ast.IntroducerExpr{CharacterSet: sqlite3Dollar[1].str, Expr: ast.NewStrLiteral(sqlite3Dollar[2].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 274:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1785
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 275:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:1789
		{
			sqlite3LOCAL = ast.NewArgument(sqlite3Dollar[1].str[1:])
			bindVariable(sqlite3lex, sqlite3Dollar[1].str[1:])
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 276:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnKeyOption
//line sqlite3.y:1796
		{
			sqlite3LOCAL = ast.ColKeyPrimary
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 277:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnKeyOption
//line sqlite3.y:1800
		{
			sqlite3LOCAL = ast.ColKeyUnique
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 278:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnKeyOption
//line sqlite3.y:1804
		{
			sqlite3LOCAL = ast.ColKeyUniqueKey
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 279:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColumnKeyOption
//line sqlite3.y:1808
		{
			sqlite3LOCAL = ast.ColKey
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 280:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1814
		{
			sqlite3VAL.columnType = sqlite3Dollar[1].columnType
			sqlite3VAL.columnType.Unsigned = sqlite3Dollar[2].booleanUnion()
			sqlite3VAL.columnType.Zerofill = sqlite3Dollar[3].booleanUnion()
		}
	case 284:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1825
		{
			sqlite3VAL.columnType = sqlite3Dollar[1].columnType
			sqlite3VAL.columnType.Length = sqlite3Dollar[2].literalUnion()
		}
	case 285:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1830
		{
			sqlite3VAL.columnType = sqlite3Dollar[1].columnType
		}
	case 286:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1836
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 287:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1840
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 288:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1844
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 289:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1848
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 290:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1852
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 291:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1856
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 292:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1860
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 293:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1864
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 294:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1868
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 295:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1874
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
			sqlite3VAL.columnType.Length = sqlite3Dollar[2].LengthScaleOption.Length
			sqlite3VAL.columnType.Scale = sqlite3Dollar[2].LengthScaleOption.Scale
		}
	case 296:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1880
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
			sqlite3VAL.columnType.Length = sqlite3Dollar[2].LengthScaleOption.Length
			sqlite3VAL.columnType.Scale = sqlite3Dollar[2].LengthScaleOption.Scale
		}
	case 297:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1886
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
			sqlite3VAL.columnType.Length = sqlite3Dollar[2].LengthScaleOption.Length
			sqlite3VAL.columnType.Scale = sqlite3Dollar[2].LengthScaleOption.Scale
		}
	case 298:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1892
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
			sqlite3VAL.columnType.Length = sqlite3Dollar[2].LengthScaleOption.Length
			sqlite3VAL.columnType.Scale = sqlite3Dollar[2].LengthScaleOption.Scale
		}
	case 299:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1898
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
			sqlite3VAL.columnType.Length = sqlite3Dollar[2].LengthScaleOption.Length
			sqlite3VAL.columnType.Scale = sqlite3Dollar[2].LengthScaleOption.Scale
		}
	case 300:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1906
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 301:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1910
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
	case 302:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1914
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
	case 303:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1918
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
	case 304:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1922
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
	case 305:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1928
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion(), Charset: sqlite3Dollar[3].columnCharset}
		}
	case 306:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1932
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.sqlite3.com/doc/refman/8.0/en/string-type-syntax.html
			sqlite3VAL.columnType = ast.ColumnType{Type: "binary", Length: sqlite3Dollar[2].literalUnion()}
		}
	case 307:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:1938
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion(), Charset: sqlite3Dollar[3].columnCharset}
		}
	case 308:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1942
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
	case 309:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1946
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
	case 310:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1950
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Charset: sqlite3Dollar[2].columnCharset}
		}
	case 311:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1954
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Charset: sqlite3Dollar[2].columnCharset}
		}
	case 312:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1958
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Charset: sqlite3Dollar[2].columnCharset}
		}
	case 313:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:1962
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), Charset: sqlite3Dollar[2].columnCharset}
		}
	case 314:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1966
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 315:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1970
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 316:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1974
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 317:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1978
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 318:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1982
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 319:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
//line sqlite3.y:1986
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), EnumValues: sqlite3Dollar[3].strs, Charset: sqlite3Dollar[5].columnCharset}
		}
	case 320:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
//line sqlite3.y:1991
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str), EnumValues: sqlite3Dollar[3].strs, Charset: sqlite3Dollar[5].columnCharset}
		}
	case 321:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:1997
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 322:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2001
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 323:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2005
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 324:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2009
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 325:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2013
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 326:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2017
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 327:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2021
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 328:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2025
		{
			sqlite3VAL.columnType = ast.ColumnType{Type: string(sqlite3Dollar[1].str)}
		}
	case 329:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2031
		{
			sqlite3VAL.strs = make([]string, 0, 4)
			sqlite3VAL.strs = append(sqlite3VAL.strs, sql_types.EncodeStringSQL(sqlite3Dollar[1].str))
		}
	case 330:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2036
		{
			sqlite3VAL.strs = append(sqlite3Dollar[1].strs, sql_types.EncodeStringSQL(sqlite3Dollar[3].str))
		}
	case 331:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Literal
//line sqlite3.y:2041
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 332:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Literal
//line sqlite3.y:2045
		{
			sqlite3LOCAL = ast.NewIntLiteral(sqlite3Dollar[2].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 333:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2050
		{
			sqlite3VAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2055
		{
			sqlite3VAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 335:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2060
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 336:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2064
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 337:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2068
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 338:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2073
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 339:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2077
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 340:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2082
		{
			sqlite3VAL.columnCharset = ast.ColumnCharset{}
		}
	case 341:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2086
		{
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: string(sqlite3Dollar[2].colIdent.String()), Binary: sqlite3Dollar[3].booleanUnion()}
		}
	case 342:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2090
		{
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(sqlite3Dollar[2].str), Binary: sqlite3Dollar[3].booleanUnion()}
		}
	case 343:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2094
		{
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: string(sqlite3Dollar[2].str)}
		}
	case 344:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2098
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: sqlite3Dollar[2].booleanUnion()}
		}
	case 345:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2103
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: sqlite3Dollar[2].booleanUnion()}
		}
	case 346:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2108
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 347:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2113
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 348:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2118
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			sqlite3VAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 349:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2124
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 350:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2128
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 351:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2133
		{
			sqlite3VAL.str = ""
		}
	case 352:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2137
		{
			sqlite3VAL.str = string(sqlite3Dollar[2].colIdent.String())
		}
	case 353:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2141
		{
			sqlite3VAL.str = sql_types.EncodeStringSQL(sqlite3Dollar[2].str)
		}
	case 354:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexDefinition
//line sqlite3.y:2148
		{
			sqlite3LOCAL = &ast.IndexDefinition{Info: sqlite3Dollar[1].indexInfoUnion(), Columns: sqlite3Dollar[3].indexColumnsUnion(), Options: sqlite3Dollar[5].indexOptionsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 355:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.IndexOption
//line sqlite3.y:2153
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 356:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.IndexOption
//line sqlite3.y:2157
		{
			sqlite3LOCAL = sqlite3Dollar[1].indexOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 357:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.IndexOption
//line sqlite3.y:2163
		{
			sqlite3LOCAL = []*ast.IndexOption{sqlite3Dollar[1].indexOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 358:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2167
		{
			sqlite3SLICE := (*[]*ast.IndexOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].indexOptionUnion())
		}
	case 359:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexOption
//line sqlite3.y:2173
		{
			sqlite3LOCAL = sqlite3Dollar[1].indexOptionUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 360:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexOption
//line sqlite3.y:2177
		{
			sqlite3LOCAL = &ast.IndexOption{Name: string(sqlite3Dollar[1].str), Value: ast.NewStrLiteral(sqlite3Dollar[2].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 361:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexOption
//line sqlite3.y:2181
		{
			sqlite3LOCAL = &ast.IndexOption{Name: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 362:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexOption
//line sqlite3.y:2185
		{
			sqlite3LOCAL = &ast.IndexOption{Name: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 363:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexOption
//line sqlite3.y:2189
		{
			sqlite3LOCAL = &ast.IndexOption{Name: string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str), String: sqlite3Dollar[3].colIdent.String()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 364:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2195
		{
			sqlite3VAL.str = ""
		}
	case 365:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2199
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 366:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexInfo
//line sqlite3.y:2205
		{
			sqlite3LOCAL = &ast.IndexInfo{Type: string(sqlite3Dollar[2].str) + " " + string(sqlite3Dollar[3].str), ConstraintName: ast.NewColIdent(sqlite3Dollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 367:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexInfo
//line sqlite3.y:2209
		{
			sqlite3LOCAL = &ast.IndexInfo{Type: string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str), Name: ast.NewColIdent(sqlite3Dollar[3].str), Spatial: true, Unique: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 368:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexInfo
//line sqlite3.y:2213
		{
			sqlite3LOCAL = &ast.IndexInfo{Type: string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str), Name: ast.NewColIdent(sqlite3Dollar[3].str), Fulltext: true, Unique: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 369:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexInfo
//line sqlite3.y:2217
		{
			sqlite3LOCAL = &ast.IndexInfo{Type: string(sqlite3Dollar[2].str) + " " + string(sqlite3Dollar[3].str), ConstraintName: ast.NewColIdent(sqlite3Dollar[1].str), Name: ast.NewColIdent(sqlite3Dollar[4].str), Unique: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 370:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexInfo
//line sqlite3.y:2221
		{
			sqlite3LOCAL = &ast.IndexInfo{Type: string(sqlite3Dollar[1].str), Name: ast.NewColIdent(sqlite3Dollar[2].str), Unique: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 371:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2226
		{
			sqlite3VAL.str = ""
		}
	case 372:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2230
		{
			sqlite3VAL.str = sqlite3Dollar[2].str
		}
	case 373:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2236
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 374:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2240
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 375:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2244
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 376:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2251
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 377:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2255
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 378:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2260
		{
			sqlite3VAL.str = "key"
		}
	case 379:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2264
		{
			sqlite3VAL.str = sqlite3Dollar[1].str
		}
	case 380:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2270
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 381:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2274
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 382:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2279
		{
			sqlite3VAL.str = ""
		}
	case 383:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2283
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].colIdent.String())
		}
	case 384:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.IndexColumn
//line sqlite3.y:2289
		{
			sqlite3LOCAL = []*ast.IndexColumn{sqlite3Dollar[1].indexColumnUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 385:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2293
		{
			sqlite3SLICE := (*[]*ast.IndexColumn)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].indexColumnUnion())
		}
	case 386:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexColumn
//line sqlite3.y:2299
		{
			sqlite3LOCAL = &ast.IndexColumn{Column: sqlite3Dollar[1].colIdent, Length: sqlite3Dollar[2].literalUnion(), Direction: sqlite3Dollar[3].orderDirectionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 387:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexColumn
//line sqlite3.y:2303
		{
			sqlite3LOCAL = &ast.IndexColumn{Expression: sqlite3Dollar[2].exprUnion(), Direction: sqlite3Dollar[4].orderDirectionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 388:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConstraintDefinition
//line sqlite3.y:2309
		{
			sqlite3LOCAL = &ast.ConstraintDefinition{Name: sqlite3Dollar[2].colIdent, Details: sqlite3Dollar[3].constraintInfoUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 389:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConstraintDefinition
//line sqlite3.y:2313
		{
			sqlite3LOCAL = &ast.ConstraintDefinition{Details: sqlite3Dollar[1].constraintInfoUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 390:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConstraintDefinition
//line sqlite3.y:2319
		{
			sqlite3LOCAL = &ast.ConstraintDefinition{Name: sqlite3Dollar[2].colIdent, Details: sqlite3Dollar[3].constraintInfoUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 391:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConstraintDefinition
//line sqlite3.y:2323
		{
			sqlite3LOCAL = &ast.ConstraintDefinition{Details: sqlite3Dollar[1].constraintInfoUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 392:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.ConstraintInfo
//line sqlite3.y:2329
		{
			sqlite3LOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(sqlite3Dollar[3].str), Source: sqlite3Dollar[5].columnsUnion(), ReferenceDefinition: sqlite3Dollar[7].referenceDefinitionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 393:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2335
		{
			sqlite3LOCAL = &ast.ReferenceDefinition{ReferencedTable: sqlite3Dollar[2].tableName, ReferencedColumns: sqlite3Dollar[4].columnsUnion(), Match: sqlite3Dollar[6].matchActionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 394:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2339
		{
			sqlite3LOCAL = &ast.ReferenceDefinition{ReferencedTable: sqlite3Dollar[2].tableName, ReferencedColumns: sqlite3Dollar[4].columnsUnion(), Match: sqlite3Dollar[6].matchActionUnion(), OnDelete: sqlite3Dollar[7].referenceActionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 395:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2343
		{
			sqlite3LOCAL = &ast.ReferenceDefinition{ReferencedTable: sqlite3Dollar[2].tableName, ReferencedColumns: sqlite3Dollar[4].columnsUnion(), Match: sqlite3Dollar[6].matchActionUnion(), OnUpdate: sqlite3Dollar[7].referenceActionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 396:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2347
		{
			sqlite3LOCAL = &ast.ReferenceDefinition{ReferencedTable: sqlite3Dollar[2].tableName, ReferencedColumns: sqlite3Dollar[4].columnsUnion(), Match: sqlite3Dollar[6].matchActionUnion(), OnDelete: sqlite3Dollar[7].referenceActionUnion(), OnUpdate: sqlite3Dollar[8].referenceActionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 397:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2351
		{
			sqlite3LOCAL = &ast.ReferenceDefinition{ReferencedTable: sqlite3Dollar[2].tableName, ReferencedColumns: sqlite3Dollar[4].columnsUnion(), Match: sqlite3Dollar[6].matchActionUnion(), OnUpdate: sqlite3Dollar[7].referenceActionUnion(), OnDelete: sqlite3Dollar[8].referenceActionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 398:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2356
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 399:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ReferenceDefinition
//line sqlite3.y:2360
		{
			sqlite3LOCAL = sqlite3Dollar[1].referenceDefinitionUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 400:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.ConstraintInfo
//line sqlite3.y:2366
		{
			sqlite3LOCAL = &ast.CheckConstraintDefinition{Expr: sqlite3Dollar[3].exprUnion(), Enforced: sqlite3Dollar[5].booleanUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 401:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchAction
//line sqlite3.y:2372
		{
			sqlite3LOCAL = sqlite3Dollar[2].matchActionUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 402:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchAction
//line sqlite3.y:2378
		{
			sqlite3LOCAL = ast.Full
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 403:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchAction
//line sqlite3.y:2382
		{
			sqlite3LOCAL = ast.Partial
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 404:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchAction
//line sqlite3.y:2386
		{
			sqlite3LOCAL = ast.Simple
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 405:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchAction
//line sqlite3.y:2391
		{
			sqlite3LOCAL = ast.DefaultMatch
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 406:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchAction
//line sqlite3.y:2395
		{
			sqlite3LOCAL = sqlite3Dollar[1].matchActionUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 407:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2401
		{
			sqlite3LOCAL = sqlite3Dollar[3].referenceActionUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 408:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2407
		{
			sqlite3LOCAL = sqlite3Dollar[3].referenceActionUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 409:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2413
		{
			sqlite3LOCAL = ast.Restrict
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 410:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2417
		{
			sqlite3LOCAL = ast.Cascade
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 411:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2421
		{
			sqlite3LOCAL = ast.NoAction
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 412:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2425
		{
			sqlite3LOCAL = ast.SetDefault
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 413:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.ReferenceAction
//line sqlite3.y:2429
		{
			sqlite3LOCAL = ast.SetNull
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 414:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2434
		{
			sqlite3VAL.str = ""
		}
	case 415:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2438
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 416:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2442
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 417:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2448
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 418:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2452
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 419:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2457
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 420:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2461
		{
			sqlite3LOCAL = sqlite3Dollar[1].booleanUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 421:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableOptions
//line sqlite3.y:2466
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 422:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableOptions
//line sqlite3.y:2470
		{
			sqlite3LOCAL = sqlite3Dollar[1].tableOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 423:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableOptions
//line sqlite3.y:2476
		{
			sqlite3LOCAL = ast.TableOptions{sqlite3Dollar[1].tableOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 424:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2480
		{
			sqlite3SLICE := (*ast.TableOptions)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].tableOptionUnion())
		}
	case 425:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2484
		{
			sqlite3SLICE := (*ast.TableOptions)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].tableOptionUnion())
		}
	case 426:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableOptions
//line sqlite3.y:2490
		{
			sqlite3LOCAL = ast.TableOptions{sqlite3Dollar[1].tableOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 427:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2494
		{
			sqlite3SLICE := (*ast.TableOptions)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].tableOptionUnion())
		}
	case 428:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2500
		{
			sqlite3LOCAL = &ast.TableOption{Name: (string(sqlite3Dollar[2].str)), String: sqlite3Dollar[4].str, CaseSensitive: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 429:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2504
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[2].str), String: sqlite3Dollar[4].str, CaseSensitive: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 430:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2508
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), Value: ast.NewStrLiteral(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 431:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2512
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), Value: ast.NewStrLiteral(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 432:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2516
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), Value: ast.NewStrLiteral(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 433:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2520
		{
			sqlite3LOCAL = &ast.TableOption{Name: (string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)), Value: ast.NewStrLiteral(sqlite3Dollar[4].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 434:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2524
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), Value: ast.NewStrLiteral(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 435:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2528
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), String: string(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 436:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2532
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), String: string(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 437:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2536
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), Value: ast.NewStrLiteral(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 438:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2540
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), String: string(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 439:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2544
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), String: string(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 440:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2548
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), String: string(sqlite3Dollar[3].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 441:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2552
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), String: (sqlite3Dollar[3].colIdent.String() + sqlite3Dollar[4].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 442:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableOption
//line sqlite3.y:2556
		{
			sqlite3LOCAL = &ast.TableOption{Name: string(sqlite3Dollar[1].str), Tables: sqlite3Dollar[4].tableNamesUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 443:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2561
		{
			sqlite3VAL.str = ""
		}
	case 444:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2565
		{
			sqlite3VAL.str = " " + string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)
		}
	case 445:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:2569
		{
			sqlite3VAL.str = " " + string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)
		}
	case 455:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2588
		{
			sqlite3VAL.str = sqlite3Dollar[1].colIdent.String()
		}
	case 456:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2592
		{
			sqlite3VAL.str = sql_types.EncodeStringSQL(sqlite3Dollar[1].str)
		}
	case 457:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:2596
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 458:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:2601
		{
			sqlite3VAL.str = ""
		}
	case 460:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2607
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 461:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2611
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 462:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColName
//line sqlite3.y:2616
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 463:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColName
//line sqlite3.y:2620
		{
			sqlite3LOCAL = sqlite3Dollar[2].colNameUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 464:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:2625
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 465:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:2629
		{
			sqlite3LOCAL = sqlite3Dollar[1].alterOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 466:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
//line sqlite3.y:2633
		{
			sqlite3SLICE := (*[]ast.AlterOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, &ast.OrderByOption{Cols: sqlite3Dollar[5].columnsUnion()})
		}
	case 467:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:2637
		{
			sqlite3LOCAL = sqlite3Dollar[1].alterOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 468:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2641
		{
			sqlite3SLICE := (*[]ast.AlterOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].alterOptionsUnion()...)
		}
	case 469:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:2645
		{
			sqlite3LOCAL = append(append(sqlite3Dollar[1].alterOptionsUnion(), sqlite3Dollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: sqlite3Dollar[7].columnsUnion()})
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 470:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:2651
		{
			sqlite3LOCAL = []ast.AlterOption{sqlite3Dollar[1].alterOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 471:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2655
		{
			sqlite3SLICE := (*[]ast.AlterOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].alterOptionUnion())
		}
	case 472:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2659
		{
			sqlite3SLICE := (*[]ast.AlterOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].alterOptionUnion())
		}
	case 473:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2665
		{
			sqlite3LOCAL = sqlite3Dollar[1].tableOptionsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 474:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2669
		{
			sqlite3LOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: sqlite3Dollar[2].constraintDefinitionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 475:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2673
		{
			sqlite3LOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: sqlite3Dollar[2].constraintDefinitionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 476:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2677
		{
			sqlite3LOCAL = &ast.AddIndexDefinition{IndexDefinition: sqlite3Dollar[2].indexDefinitionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 477:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2681
		{
			sqlite3LOCAL = &ast.AddColumns{Columns: sqlite3Dollar[4].columnDefinitionsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 478:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2685
		{
			sqlite3LOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{sqlite3Dollar[3].columnDefinitionUnion()}, First: sqlite3Dollar[4].booleanUnion(), After: sqlite3Dollar[5].colNameUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 479:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2689
		{
			sqlite3LOCAL = &ast.AlterColumn{Column: sqlite3Dollar[3].colNameUnion(), DropDefault: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 480:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2693
		{
			sqlite3LOCAL = &ast.AlterColumn{Column: sqlite3Dollar[3].colNameUnion(), DropDefault: false, DefaultVal: sqlite3Dollar[6].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 481:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2697
		{
			sqlite3LOCAL = &ast.AlterColumn{Column: sqlite3Dollar[3].colNameUnion(), DropDefault: false, DefaultVal: sqlite3Dollar[7].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 482:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2701
		{
			val := false
			sqlite3LOCAL = &ast.AlterColumn{Column: sqlite3Dollar[3].colNameUnion(), Invisible: &val}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 483:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2706
		{
			val := true
			sqlite3LOCAL = &ast.AlterColumn{Column: sqlite3Dollar[3].colNameUnion(), Invisible: &val}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 484:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2711
		{
			sqlite3LOCAL = &ast.AlterCheck{Name: sqlite3Dollar[3].colIdent, Enforced: sqlite3Dollar[4].booleanUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 485:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2715
		{
			sqlite3LOCAL = &ast.AlterIndex{Name: sqlite3Dollar[3].colIdent, Invisible: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 486:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2719
		{
			sqlite3LOCAL = &ast.AlterIndex{Name: sqlite3Dollar[3].colIdent, Invisible: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 487:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2723
		{
			sqlite3LOCAL = &ast.ChangeColumn{OldColumn: sqlite3Dollar[3].colNameUnion(), NewColDefinition: sqlite3Dollar[4].columnDefinitionUnion(), First: sqlite3Dollar[5].booleanUnion(), After: sqlite3Dollar[6].colNameUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 488:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2727
		{
			sqlite3LOCAL = &ast.ModifyColumn{NewColDefinition: sqlite3Dollar[3].columnDefinitionUnion(), First: sqlite3Dollar[4].booleanUnion(), After: sqlite3Dollar[5].colNameUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 489:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2731
		{
			sqlite3LOCAL = &ast.AlterCharset{CharacterSet: sqlite3Dollar[4].str, Collate: sqlite3Dollar[5].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 490:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2735
		{
			sqlite3LOCAL = &ast.KeyState{Enable: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 491:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2739
		{
			sqlite3LOCAL = &ast.KeyState{Enable: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 492:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2743
		{
			sqlite3LOCAL = &ast.TablespaceOperation{Import: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 493:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2747
		{
			sqlite3LOCAL = &ast.TablespaceOperation{Import: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 494:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2751
		{
			sqlite3LOCAL = &ast.DropColumn{Name: sqlite3Dollar[3].colNameUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 495:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2755
		{
			sqlite3LOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: sqlite3Dollar[3].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 496:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2759
		{
			sqlite3LOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 497:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2763
		{
			sqlite3LOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: sqlite3Dollar[4].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 498:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2767
		{
			sqlite3LOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: sqlite3Dollar[3].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 499:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2771
		{
			sqlite3LOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: sqlite3Dollar[3].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 500:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2775
		{
			sqlite3LOCAL = &ast.Force{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 501:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2779
		{
			sqlite3LOCAL = &ast.RenameTableName{Table: sqlite3Dollar[3].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 502:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2783
		{
			sqlite3LOCAL = &ast.RenameIndex{OldName: sqlite3Dollar[3].colIdent, NewName: sqlite3Dollar[5].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 503:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:2789
		{
			sqlite3LOCAL = []ast.AlterOption{sqlite3Dollar[1].alterOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 504:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2793
		{
			sqlite3SLICE := (*[]ast.AlterOption)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].alterOptionUnion())
		}
	case 505:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2799
		{
			sqlite3LOCAL = ast.AlgorithmValue(string(sqlite3Dollar[3].str))
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 506:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2803
		{
			sqlite3LOCAL = ast.AlgorithmValue(string(sqlite3Dollar[3].str))
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 507:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2807
		{
			sqlite3LOCAL = ast.AlgorithmValue(string(sqlite3Dollar[3].str))
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 508:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2811
		{
			sqlite3LOCAL = ast.AlgorithmValue(string(sqlite3Dollar[3].str))
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 509:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2815
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 510:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2819
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 511:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2823
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 512:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2827
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 513:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2831
		{
			sqlite3LOCAL = &ast.Validation{With: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 514:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:2835
		{
			sqlite3LOCAL = &ast.Validation{With: false}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 515:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2841
		{
			sqlite3Dollar[1].alterTableUnion().FullyParsed = true
			sqlite3Dollar[1].alterTableUnion().AlterOptions = sqlite3Dollar[2].alterOptionsUnion()
			sqlite3LOCAL = sqlite3Dollar[1].alterTableUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 516:
		sqlite3Dollar = sqlite3S[sqlite3pt-11 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2847
		{
			sqlite3LOCAL = &ast.AlterView{ViewName: sqlite3Dollar[7].tableName.ToViewName(), Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Algorithm: sqlite3Dollar[3].str, Definer: sqlite3Dollar[4].definerUnion(), Security: sqlite3Dollar[5].str, Columns: sqlite3Dollar[8].columnsUnion(), Select: sqlite3Dollar[10].selStmtUnion(), CheckOption: sqlite3Dollar[11].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 517:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2857
		{
			sqlite3Dollar[1].alterDatabaseUnion().FullyParsed = true
			sqlite3Dollar[1].alterDatabaseUnion().DBName = sqlite3Dollar[2].tableIdent
			sqlite3Dollar[1].alterDatabaseUnion().AlterOptions = sqlite3Dollar[3].databaseOptionsUnion()
			sqlite3LOCAL = sqlite3Dollar[1].alterDatabaseUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 518:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2864
		{
			sqlite3LOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  sqlite3Dollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(sqlite3Dollar[6].tableName.Name.String()),
					Type:   sqlite3Dollar[7].colIdent,
					Params: sqlite3Dollar[8].vindexParamsUnion(),
				},
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 519:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2876
		{
			sqlite3LOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  sqlite3Dollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(sqlite3Dollar[6].tableName.Name.String()),
				},
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 520:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2886
		{
			sqlite3LOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: sqlite3Dollar[6].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 521:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2890
		{
			sqlite3LOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: sqlite3Dollar[6].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 522:
		sqlite3Dollar = sqlite3S[sqlite3pt-13 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2894
		{
			sqlite3LOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  sqlite3Dollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   sqlite3Dollar[8].colIdent,
					Type:   sqlite3Dollar[12].colIdent,
					Params: sqlite3Dollar[13].vindexParamsUnion(),
				},
				VindexCols: sqlite3Dollar[10].columnsUnion(),
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 523:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2907
		{
			sqlite3LOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  sqlite3Dollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: sqlite3Dollar[8].colIdent,
				},
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 524:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2917
		{
			sqlite3LOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: sqlite3Dollar[6].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 525:
		sqlite3Dollar = sqlite3S[sqlite3pt-10 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:2921
		{
			sqlite3LOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  sqlite3Dollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   sqlite3Dollar[8].colIdent,
					Sequence: sqlite3Dollar[10].tableName,
				},
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 526:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:2934
		{
			sqlite3LOCAL = &ast.JSONTableExpr{Expr: sqlite3Dollar[3].exprUnion(), Filter: sqlite3Dollar[5].exprUnion(), Columns: sqlite3Dollar[6].jtColumnListUnion(), Alias: sqlite3Dollar[8].tableIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 527:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.JtColumnDefinition
//line sqlite3.y:2940
		{
			sqlite3LOCAL = sqlite3Dollar[3].jtColumnListUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 528:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.JtColumnDefinition
//line sqlite3.y:2946
		{
			sqlite3LOCAL = []*ast.JtColumnDefinition{sqlite3Dollar[1].jtColumnDefinitionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 529:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:2950
		{
			sqlite3SLICE := (*[]*ast.JtColumnDefinition)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].jtColumnDefinitionUnion())
		}
	case 530:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtColumnDefinition
//line sqlite3.y:2956
		{
			sqlite3LOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: sqlite3Dollar[1].colIdent}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 531:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtColumnDefinition
//line sqlite3.y:2960
		{
			sqlite3Dollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: sqlite3Dollar[3].str}
			jtPath := &ast.JtPathColDef{Name: sqlite3Dollar[1].colIdent, Type: sqlite3Dollar[2].columnType, JtColExists: sqlite3Dollar[4].booleanUnion(), Path: sqlite3Dollar[6].exprUnion()}
			sqlite3LOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 532:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtColumnDefinition
//line sqlite3.y:2966
		{
			sqlite3Dollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: sqlite3Dollar[3].str}
			jtPath := &ast.JtPathColDef{Name: sqlite3Dollar[1].colIdent, Type: sqlite3Dollar[2].columnType, JtColExists: sqlite3Dollar[4].booleanUnion(), Path: sqlite3Dollar[6].exprUnion(), EmptyOnResponse: sqlite3Dollar[7].jtOnResponseUnion()}
			sqlite3LOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 533:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtColumnDefinition
//line sqlite3.y:2972
		{
			sqlite3Dollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: sqlite3Dollar[3].str}
			jtPath := &ast.JtPathColDef{Name: sqlite3Dollar[1].colIdent, Type: sqlite3Dollar[2].columnType, JtColExists: sqlite3Dollar[4].booleanUnion(), Path: sqlite3Dollar[6].exprUnion(), ErrorOnResponse: sqlite3Dollar[7].jtOnResponseUnion()}
			sqlite3LOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 534:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtColumnDefinition
//line sqlite3.y:2978
		{
			sqlite3Dollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: sqlite3Dollar[3].str}
			jtPath := &ast.JtPathColDef{Name: sqlite3Dollar[1].colIdent, Type: sqlite3Dollar[2].columnType, JtColExists: sqlite3Dollar[4].booleanUnion(), Path: sqlite3Dollar[6].exprUnion(), EmptyOnResponse: sqlite3Dollar[7].jtOnResponseUnion(), ErrorOnResponse: sqlite3Dollar[8].jtOnResponseUnion()}
			sqlite3LOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 535:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtColumnDefinition
//line sqlite3.y:2984
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: sqlite3Dollar[3].exprUnion(), Columns: sqlite3Dollar[4].jtColumnListUnion()}
			sqlite3LOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 536:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2990
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 537:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2994
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 538:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:2998
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 539:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3002
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 540:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtOnResponse
//line sqlite3.y:3008
		{
			sqlite3LOCAL = sqlite3Dollar[1].jtOnResponseUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 541:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtOnResponse
//line sqlite3.y:3014
		{
			sqlite3LOCAL = sqlite3Dollar[1].jtOnResponseUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 542:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtOnResponse
//line sqlite3.y:3020
		{
			sqlite3LOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 543:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtOnResponse
//line sqlite3.y:3024
		{
			sqlite3LOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 544:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.JtOnResponse
//line sqlite3.y:3028
		{
			sqlite3LOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 545:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3034
		{
			sqlite3LOCAL = &ast.RenameTable{TablePairs: sqlite3Dollar[3].renameTablePairsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 546:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.RenameTablePair
//line sqlite3.y:3040
		{
			sqlite3LOCAL = []*ast.RenameTablePair{{FromTable: sqlite3Dollar[1].tableName, ToTable: sqlite3Dollar[3].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 547:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
//line sqlite3.y:3044
		{
			sqlite3SLICE := (*[]*ast.RenameTablePair)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, &ast.RenameTablePair{FromTable: sqlite3Dollar[3].tableName, ToTable: sqlite3Dollar[5].tableName})
		}
	case 548:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3050
		{
			sqlite3LOCAL = &ast.DropTable{FromTables: sqlite3Dollar[6].tableNamesUnion(), IfExists: sqlite3Dollar[5].booleanUnion(), Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Temp: sqlite3Dollar[3].booleanUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 549:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3054
		{
			// Change this to an alter statement
			if sqlite3Dollar[4].colIdent.Lowered() == "primary" {
				sqlite3LOCAL = &ast.AlterTable{FullyParsed: true, Table: sqlite3Dollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, sqlite3Dollar[7].alterOptionsUnion()...)}
			} else {
				sqlite3LOCAL = &ast.AlterTable{FullyParsed: true, Table: sqlite3Dollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: sqlite3Dollar[4].colIdent}}, sqlite3Dollar[7].alterOptionsUnion()...)}
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 550:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3063
		{
			sqlite3LOCAL = &ast.DropView{FromTables: sqlite3Dollar[5].tableNamesUnion(), Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), IfExists: sqlite3Dollar[4].booleanUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 551:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3067
		{
			sqlite3LOCAL = &ast.DropDatabase{Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), DBName: sqlite3Dollar[5].tableIdent, IfExists: sqlite3Dollar[4].booleanUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 552:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3073
		{
			sqlite3LOCAL = &ast.TruncateTable{Table: sqlite3Dollar[3].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 553:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3077
		{
			sqlite3LOCAL = &ast.TruncateTable{Table: sqlite3Dollar[2].tableName}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 554:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3082
		{
			sqlite3LOCAL = &ast.OtherRead{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 555:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3088
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: sqlite3Dollar[3].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 556:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3092
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: sqlite3Dollar[3].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 557:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3096
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: sqlite3Dollar[2].booleanUnion(), Command: ast.Column, Tbl: sqlite3Dollar[5].tableName, DbName: sqlite3Dollar[6].tableIdent, Filter: sqlite3Dollar[7].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 558:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3100
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: sqlite3Dollar[3].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 559:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3104
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: sqlite3Dollar[3].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 560:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3108
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: sqlite3Dollar[3].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 561:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3112
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 562:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3116
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: sqlite3Dollar[5].tableName, DbName: sqlite3Dollar[6].tableIdent, Filter: sqlite3Dollar[7].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 563:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3120
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: sqlite3Dollar[4].tableIdent, Filter: sqlite3Dollar[5].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 564:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3124
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 565:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3128
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 566:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3132
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 567:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3136
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 568:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3140
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 569:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3144
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 570:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3148
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: sqlite3Dollar[4].tableIdent, Filter: sqlite3Dollar[5].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 571:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3152
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: sqlite3Dollar[2].booleanUnion(), DbName: sqlite3Dollar[4].tableIdent, Filter: sqlite3Dollar[5].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 572:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3156
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: sqlite3Dollar[3].tableIdent, Filter: sqlite3Dollar[4].showFilterUnion()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 573:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3160
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 574:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3164
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 575:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3168
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 576:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3172
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 577:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3176
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 578:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3180
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 579:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3184
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: sqlite3Dollar[4].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 580:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3188
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 581:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3192
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: sqlite3Dollar[4].tableIdent}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 582:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3196
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: sqlite3Dollar[4].tableIdent}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 583:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3200
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 584:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3204
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 585:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3208
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: sqlite3Dollar[5].tableName}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 586:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3212
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 587:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3219
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].colIdent.String())}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 588:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3223
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].str) + " " + string(sqlite3Dollar[3].str)}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 589:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3227
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].str) + " " + sqlite3Dollar[3].colIdent.String()}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 590:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3231
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].str) + " " + string(sqlite3Dollar[3].str)}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 591:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3235
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].str) + " " + string(sqlite3Dollar[3].str) + " " + ast.String(sqlite3Dollar[4].tableName)}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 592:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3239
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].str) + " " + string(sqlite3Dollar[3].str) + " " + ast.String(sqlite3Dollar[4].tableName)}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 593:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3243
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[3].str)}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 594:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3247
		{
			sqlite3LOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(sqlite3Dollar[2].str)}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 595:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3253
		{
			sqlite3VAL.str = ""
		}
	case 596:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3257
		{
			sqlite3VAL.str = "extended "
		}
	case 597:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3263
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 598:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3267
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 599:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3273
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 600:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3277
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 601:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3283
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent("")
		}
	case 602:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3287
		{
			sqlite3VAL.tableIdent = sqlite3Dollar[2].tableIdent
		}
	case 603:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3291
		{
			sqlite3VAL.tableIdent = sqlite3Dollar[2].tableIdent
		}
	case 604:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ShowFilter
//line sqlite3.y:3297
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 605:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ShowFilter
//line sqlite3.y:3301
		{
			sqlite3LOCAL = &ast.ShowFilter{Like: string(sqlite3Dollar[2].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 606:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ShowFilter
//line sqlite3.y:3305
		{
			sqlite3LOCAL = &ast.ShowFilter{Filter: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 607:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3311
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 608:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3315
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 609:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3319
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 610:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3325
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 611:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3329
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 612:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3335
		{
			sqlite3LOCAL = &ast.Use{DBName: sqlite3Dollar[2].tableIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 613:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3339
		{
			sqlite3LOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 614:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3343
		{
			sqlite3LOCAL = &ast.Use{DBName: ast.NewTableIdent(sqlite3Dollar[2].tableIdent.String() + "@" + string(sqlite3Dollar[3].str))}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 615:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3349
		{
			sqlite3LOCAL = &ast.Begin{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 616:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3353
		{
			sqlite3LOCAL = &ast.Begin{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 617:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3359
		{
			sqlite3LOCAL = &ast.Commit{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 618:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3365
		{
			sqlite3LOCAL = &ast.Rollback{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 619:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3369
		{
			sqlite3LOCAL = &ast.SRollback{Name: sqlite3Dollar[5].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 620:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3374
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 621:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3376
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 622:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3379
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 623:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3381
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 624:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3386
		{
			sqlite3LOCAL = &ast.Savepoint{Name: sqlite3Dollar[2].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 625:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3392
		{
			sqlite3LOCAL = &ast.Release{Name: sqlite3Dollar[3].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 626:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.ExplainType
//line sqlite3.y:3397
		{
			sqlite3LOCAL = ast.EmptyType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 627:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.ExplainType
//line sqlite3.y:3401
		{
			sqlite3LOCAL = ast.JSONType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 628:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.ExplainType
//line sqlite3.y:3405
		{
			sqlite3LOCAL = ast.TreeType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 629:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.ExplainType
//line sqlite3.y:3409
		{
			sqlite3LOCAL = ast.TraditionalType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 630:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ExplainType
//line sqlite3.y:3413
		{
			sqlite3LOCAL = ast.AnalyzeType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 631:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ExplainType
//line sqlite3.y:3417
		{
			sqlite3LOCAL = ast.AnalyzeType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 632:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3423
		{
			sqlite3VAL.str = sqlite3Dollar[1].str
		}
	case 633:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3427
		{
			sqlite3VAL.str = sqlite3Dollar[1].str
		}
	case 634:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3431
		{
			sqlite3VAL.str = sqlite3Dollar[1].str
		}
	case 635:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3437
		{
			sqlite3LOCAL = sqlite3Dollar[1].selStmtUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 636:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3441
		{
			sqlite3LOCAL = sqlite3Dollar[1].statementUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 637:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3445
		{
			sqlite3LOCAL = sqlite3Dollar[1].statementUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 638:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3449
		{
			sqlite3LOCAL = sqlite3Dollar[1].statementUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 639:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3454
		{
			sqlite3VAL.str = ""
		}
	case 640:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3458
		{
			sqlite3VAL.str = sqlite3Dollar[1].colIdent.Val
		}
	case 641:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3462
		{
			sqlite3VAL.str = sql_types.EncodeStringSQL(sqlite3Dollar[1].str)
		}
	case 642:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3468
		{
			sqlite3LOCAL = &ast.ExplainTab{Table: sqlite3Dollar[2].tableName, Wild: sqlite3Dollar[3].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 643:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3472
		{
			sqlite3LOCAL = &ast.ExplainStmt{Type: sqlite3Dollar[2].explainTypeUnion(), Statement: sqlite3Dollar[3].statementUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 644:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3478
		{
			sqlite3LOCAL = &ast.OtherAdmin{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 645:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3482
		{
			sqlite3LOCAL = &ast.OtherAdmin{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 646:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3488
		{
			sqlite3LOCAL = &ast.LockTables{Tables: sqlite3Dollar[3].tableAndLockTypesUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 647:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableAndLockTypes
//line sqlite3.y:3494
		{
			sqlite3LOCAL = ast.TableAndLockTypes{sqlite3Dollar[1].tableAndLockTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 648:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3498
		{
			sqlite3SLICE := (*ast.TableAndLockTypes)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].tableAndLockTypeUnion())
		}
	case 649:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.TableAndLockType
//line sqlite3.y:3504
		{
			sqlite3LOCAL = &ast.TableAndLockType{Table: sqlite3Dollar[1].aliasedTableNameUnion(), Lock: sqlite3Dollar[2].lockTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 650:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.LockType
//line sqlite3.y:3510
		{
			sqlite3LOCAL = ast.Read
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 651:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.LockType
//line sqlite3.y:3514
		{
			sqlite3LOCAL = ast.ReadLocal
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 652:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.LockType
//line sqlite3.y:3518
		{
			sqlite3LOCAL = ast.Write
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 653:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.LockType
//line sqlite3.y:3522
		{
			sqlite3LOCAL = ast.LowPriorityWrite
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 654:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3528
		{
			sqlite3LOCAL = &ast.UnlockTables{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 655:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3534
		{
			sqlite3LOCAL = &ast.Flush{IsLocal: sqlite3Dollar[2].booleanUnion(), FlushOptions: sqlite3Dollar[3].strs}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 656:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3538
		{
			sqlite3LOCAL = &ast.Flush{IsLocal: sqlite3Dollar[2].booleanUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 657:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3542
		{
			sqlite3LOCAL = &ast.Flush{IsLocal: sqlite3Dollar[2].booleanUnion(), WithLock: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 658:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3546
		{
			sqlite3LOCAL = &ast.Flush{IsLocal: sqlite3Dollar[2].booleanUnion(), TableNames: sqlite3Dollar[4].tableNamesUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 659:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3550
		{
			sqlite3LOCAL = &ast.Flush{IsLocal: sqlite3Dollar[2].booleanUnion(), TableNames: sqlite3Dollar[4].tableNamesUnion(), WithLock: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 660:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3554
		{
			sqlite3LOCAL = &ast.Flush{IsLocal: sqlite3Dollar[2].booleanUnion(), TableNames: sqlite3Dollar[4].tableNamesUnion(), ForExport: true}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 661:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3560
		{
			sqlite3VAL.strs = []string{sqlite3Dollar[1].str}
		}
	case 662:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3564
		{
			sqlite3VAL.strs = append(sqlite3Dollar[1].strs, sqlite3Dollar[3].str)
		}
	case 663:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3570
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)
		}
	case 664:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3574
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)
		}
	case 665:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3578
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)
		}
	case 666:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3582
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 667:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3586
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 668:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3590
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 669:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3594
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str) + sqlite3Dollar[3].str
		}
	case 670:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3598
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str)
		}
	case 671:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3602
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 672:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3606
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 673:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3610
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 674:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3615
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 675:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3619
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 676:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3623
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 677:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3628
		{
			sqlite3VAL.str = ""
		}
	case 678:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3632
		{
			sqlite3VAL.str = " " + string(sqlite3Dollar[1].str) + " " + string(sqlite3Dollar[2].str) + " " + sqlite3Dollar[3].colIdent.String()
		}
	case 679:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3637
		{
			setAllowComments(sqlite3lex, true)
		}
	case 680:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3641
		{
			// Strange argumets shift
			sqlite3LOCAL = &ast.CommentOnSchema{Comments: ast.Comments{sqlite3Dollar[2].str}.Parsed(), Schema: sqlite3Dollar[5].schemaName.Name, Value: sqlite3Dollar[7].exprUnion()}
			setAllowComments(sqlite3lex, false)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 681:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3649
		{
			setAllowComments(sqlite3lex, true)
		}
	case 682:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3653
		{
			sqlite3VAL.strs = sqlite3Dollar[2].strs
			setAllowComments(sqlite3lex, false)
		}
	case 683:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3659
		{
			sqlite3VAL.strs = nil
		}
	case 684:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3663
		{
			sqlite3VAL.strs = append(sqlite3Dollar[1].strs, sqlite3Dollar[2].str)
		}
	case 685:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3669
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 686:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3673
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 687:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3677
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 688:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3682
		{
			sqlite3VAL.str = ""
		}
	case 689:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3686
		{
			sqlite3VAL.str = ast.SQLNoCacheStr
		}
	case 690:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3690
		{
			sqlite3VAL.str = ast.SQLCacheStr
		}
	case 691:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3695
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 692:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3699
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 693:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:3703
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 694:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3709
		{
			sqlite3LOCAL = &ast.PrepareStmt{Name: sqlite3Dollar[3].colIdent, Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Statement: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 695:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3713
		{
			sqlite3LOCAL = &ast.PrepareStmt{
				Name:     sqlite3Dollar[3].colIdent,
				Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(sqlite3Dollar[5].str), ast.SingleAt),
				},
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 696:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3725
		{
			sqlite3LOCAL = &ast.ExecuteStmt{Name: sqlite3Dollar[3].colIdent, Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Arguments: sqlite3Dollar[4].columnsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 697:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3730
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 698:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3734
		{
			sqlite3LOCAL = sqlite3Dollar[2].columnsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 699:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3740
		{
			sqlite3LOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Name: sqlite3Dollar[4].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 700:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:3744
		{
			sqlite3LOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(sqlite3Dollar[2].strs).Parsed(), Name: sqlite3Dollar[4].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 701:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExprs
//line sqlite3.y:3749
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 702:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExprs
//line sqlite3.y:3753
		{
			sqlite3LOCAL = sqlite3Dollar[1].selectExprsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 703:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3758
		{
			sqlite3VAL.strs = nil
		}
	case 704:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3762
		{
			sqlite3VAL.strs = []string{sqlite3Dollar[1].str}
		}
	case 705:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3766
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			sqlite3VAL.strs = []string{sqlite3Dollar[1].str, sqlite3Dollar[2].str}
		}
	case 706:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3770
		{
			sqlite3VAL.strs = []string{sqlite3Dollar[1].str, sqlite3Dollar[2].str, sqlite3Dollar[3].str}
		}
	case 707:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:3774
		{
			sqlite3VAL.strs = []string{sqlite3Dollar[1].str, sqlite3Dollar[2].str, sqlite3Dollar[3].str, sqlite3Dollar[4].str}
		}
	case 708:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3780
		{
			sqlite3VAL.str = ast.SQLNoCacheStr
		}
	case 709:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3784
		{
			sqlite3VAL.str = ast.SQLCacheStr
		}
	case 710:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3788
		{
			sqlite3VAL.str = ast.DistinctStr
		}
	case 711:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3792
		{
			sqlite3VAL.str = ast.DistinctStr
		}
	case 712:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3796
		{
			sqlite3VAL.str = ast.StraightJoinHint
		}
	case 713:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3800
		{
			sqlite3VAL.str = ast.SQLCalcFoundRowsStr
		}
	case 714:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3804
		{
			sqlite3VAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 715:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExprs
//line sqlite3.y:3810
		{
			sqlite3LOCAL = ast.SelectExprs{sqlite3Dollar[1].selectExprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 716:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3814
		{
			sqlite3SLICE := (*ast.SelectExprs)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].selectExprUnion())
		}
	case 717:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExpr
//line sqlite3.y:3820
		{
			sqlite3LOCAL = &ast.StarExpr{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 718:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExpr
//line sqlite3.y:3824
		{
			sqlite3LOCAL = &ast.AliasedExpr{Expr: sqlite3Dollar[1].exprUnion(), As: sqlite3Dollar[2].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 719:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExpr
//line sqlite3.y:3828
		{
			sqlite3LOCAL = &ast.StarExpr{TableName: ast.TableName{Name: sqlite3Dollar[1].tableIdent}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 720:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.SelectExpr
//line sqlite3.y:3832
		{
			sqlite3LOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: sqlite3Dollar[1].tableIdent, Name: sqlite3Dollar[3].tableIdent}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 721:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3837
		{
			sqlite3VAL.colIdent = ast.ColIdent{}
		}
	case 722:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3841
		{
			sqlite3VAL.colIdent = sqlite3Dollar[1].colIdent
		}
	case 723:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3845
		{
			sqlite3VAL.colIdent = sqlite3Dollar[2].colIdent
		}
	case 725:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:3852
		{
			sqlite3VAL.colIdent = ast.NewColIdent(string(sqlite3Dollar[1].str))
		}
	case 726:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExprs
//line sqlite3.y:3857
		{
			sqlite3LOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 727:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExprs
//line sqlite3.y:3861
		{
			sqlite3LOCAL = sqlite3Dollar[1].tableExprsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 728:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExprs
//line sqlite3.y:3867
		{
			sqlite3LOCAL = sqlite3Dollar[2].tableExprsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 729:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExprs
//line sqlite3.y:3873
		{
			sqlite3LOCAL = ast.TableExprs{sqlite3Dollar[1].tableExprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 730:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3877
		{
			sqlite3SLICE := (*ast.TableExprs)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].tableExprUnion())
		}
	case 733:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3887
		{
			sqlite3LOCAL = sqlite3Dollar[1].aliasedTableNameUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 734:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3891
		{
			sqlite3LOCAL = &ast.AliasedTableExpr{Expr: sqlite3Dollar[1].derivedTableUnion(), As: sqlite3Dollar[3].tableIdent, Columns: sqlite3Dollar[4].columnsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 735:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3895
		{
			sqlite3LOCAL = &ast.ParenTableExpr{Exprs: sqlite3Dollar[2].tableExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 736:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3899
		{
			sqlite3LOCAL = sqlite3Dollar[1].tableExprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 737:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.DerivedTable
//line sqlite3.y:3905
		{
			sqlite3LOCAL = &ast.DerivedTable{Lateral: false, Select: sqlite3Dollar[2].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 738:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.DerivedTable
//line sqlite3.y:3909
		{
			sqlite3LOCAL = &ast.DerivedTable{Lateral: true, Select: sqlite3Dollar[3].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 739:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.AliasedTableExpr
//line sqlite3.y:3915
		{
			sqlite3LOCAL = &ast.AliasedTableExpr{Expr: sqlite3Dollar[1].tableName, As: sqlite3Dollar[2].tableIdent, Hints: sqlite3Dollar[3].indexHintsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 740:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3920
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 741:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3924
		{
			sqlite3LOCAL = sqlite3Dollar[2].columnsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 742:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3930
		{
			sqlite3LOCAL = ast.Columns{sqlite3Dollar[1].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 743:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3934
		{
			sqlite3SLICE := (*ast.Columns)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].colIdent)
		}
	case 744:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3940
		{
			sqlite3LOCAL = ast.Columns{ast.NewColIdentWithAt(string(sqlite3Dollar[1].str), ast.SingleAt)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 745:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3944
		{
			sqlite3SLICE := (*ast.Columns)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, ast.NewColIdentWithAt(string(sqlite3Dollar[3].str), ast.SingleAt))
		}
	case 746:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3950
		{
			sqlite3LOCAL = ast.Columns{sqlite3Dollar[1].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 747:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:3954
		{
			sqlite3LOCAL = ast.Columns{ast.NewColIdent(string(sqlite3Dollar[1].str))}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 748:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3958
		{
			sqlite3SLICE := (*ast.Columns)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].colIdent)
		}
	case 749:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:3962
		{
			sqlite3SLICE := (*ast.Columns)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, ast.NewColIdent(string(sqlite3Dollar[3].str)))
		}
	case 750:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3975
		{
			sqlite3LOCAL = &ast.JoinTableExpr{LeftExpr: sqlite3Dollar[1].tableExprUnion(), Join: sqlite3Dollar[2].joinTypeUnion(), RightExpr: sqlite3Dollar[3].tableExprUnion(), Condition: sqlite3Dollar[4].joinCondition}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 751:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3979
		{
			sqlite3LOCAL = &ast.JoinTableExpr{LeftExpr: sqlite3Dollar[1].tableExprUnion(), Join: sqlite3Dollar[2].joinTypeUnion(), RightExpr: sqlite3Dollar[3].tableExprUnion(), Condition: sqlite3Dollar[4].joinCondition}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 752:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3983
		{
			sqlite3LOCAL = &ast.JoinTableExpr{LeftExpr: sqlite3Dollar[1].tableExprUnion(), Join: sqlite3Dollar[2].joinTypeUnion(), RightExpr: sqlite3Dollar[3].tableExprUnion(), Condition: sqlite3Dollar[4].joinCondition}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 753:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.TableExpr
//line sqlite3.y:3987
		{
			sqlite3LOCAL = &ast.JoinTableExpr{LeftExpr: sqlite3Dollar[1].tableExprUnion(), Join: sqlite3Dollar[2].joinTypeUnion(), RightExpr: sqlite3Dollar[3].tableExprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 754:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:3993
		{
			sqlite3VAL.joinCondition = &ast.JoinCondition{On: sqlite3Dollar[2].exprUnion()}
		}
	case 755:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:3995
		{
			sqlite3VAL.joinCondition = &ast.JoinCondition{Using: sqlite3Dollar[3].columnsUnion()}
		}
	case 756:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:3999
		{
			sqlite3VAL.joinCondition = &ast.JoinCondition{}
		}
	case 757:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4001
		{
			sqlite3VAL.joinCondition = sqlite3Dollar[1].joinCondition
		}
	case 758:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:4005
		{
			sqlite3VAL.joinCondition = &ast.JoinCondition{}
		}
	case 759:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:4007
		{
			sqlite3VAL.joinCondition = &ast.JoinCondition{On: sqlite3Dollar[2].exprUnion()}
		}
	case 760:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:4011
		{
			sqlite3VAL.schemaName = ast.SchemaName{Name: sqlite3Dollar[2].schemaIdent}
		}
	case 761:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:4016
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 762:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4018
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 763:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:4021
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent("")
		}
	case 764:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4025
		{
			sqlite3VAL.tableIdent = sqlite3Dollar[1].tableIdent
		}
	case 765:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:4029
		{
			sqlite3VAL.tableIdent = sqlite3Dollar[2].tableIdent
		}
	case 767:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4036
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent(string(sqlite3Dollar[1].str))
		}
	case 768:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4042
		{
			sqlite3LOCAL = ast.NormalJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 769:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4046
		{
			sqlite3LOCAL = ast.NormalJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 770:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4050
		{
			sqlite3LOCAL = ast.NormalJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 771:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4056
		{
			sqlite3LOCAL = ast.StraightJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 772:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4062
		{
			sqlite3LOCAL = ast.LeftJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 773:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4066
		{
			sqlite3LOCAL = ast.LeftJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 774:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4070
		{
			sqlite3LOCAL = ast.RightJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 775:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4074
		{
			sqlite3LOCAL = ast.RightJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 776:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4080
		{
			sqlite3LOCAL = ast.NaturalJoinType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 777:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.JoinType
//line sqlite3.y:4084
		{
			if sqlite3Dollar[2].joinTypeUnion() == ast.LeftJoinType {
				sqlite3LOCAL = ast.NaturalLeftJoinType
			} else {
				sqlite3LOCAL = ast.NaturalRightJoinType
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 778:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:4094
		{
			sqlite3VAL.tableName = sqlite3Dollar[2].tableName
		}
	case 779:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4098
		{
			sqlite3VAL.tableName = sqlite3Dollar[1].tableName
		}
	case 780:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4104
		{
			sqlite3VAL.tableName = ast.TableName{Name: sqlite3Dollar[1].tableIdent}
		}
	case 781:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:4108
		{
			sqlite3VAL.tableName = ast.TableName{Qualifier: sqlite3Dollar[1].tableIdent, Name: sqlite3Dollar[3].tableIdent}
		}
	case 782:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:4114
		{
			sqlite3VAL.tableName = ast.TableName{Name: sqlite3Dollar[1].tableIdent}
		}
	case 783:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHints
//line sqlite3.y:4119
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 784:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHints
//line sqlite3.y:4123
		{
			sqlite3LOCAL = sqlite3Dollar[1].indexHintsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 785:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHints
//line sqlite3.y:4129
		{
			sqlite3LOCAL = ast.IndexHints{sqlite3Dollar[1].indexHintUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 786:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:4133
		{
			sqlite3SLICE := (*ast.IndexHints)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].indexHintUnion())
		}
	case 787:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexHint
//line sqlite3.y:4139
		{
			sqlite3LOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: sqlite3Dollar[3].indexHintForTypeUnion(), Indexes: sqlite3Dollar[5].columnsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 788:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexHint
//line sqlite3.y:4143
		{
			sqlite3LOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: sqlite3Dollar[3].indexHintForTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 789:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexHint
//line sqlite3.y:4147
		{
			sqlite3LOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: sqlite3Dollar[3].indexHintForTypeUnion(), Indexes: sqlite3Dollar[5].columnsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 790:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexHint
//line sqlite3.y:4151
		{
			sqlite3LOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: sqlite3Dollar[3].indexHintForTypeUnion(), Indexes: sqlite3Dollar[5].columnsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 791:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHintForType
//line sqlite3.y:4156
		{
			sqlite3LOCAL = ast.NoForType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 792:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHintForType
//line sqlite3.y:4160
		{
			sqlite3LOCAL = ast.JoinForType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 793:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHintForType
//line sqlite3.y:4164
		{
			sqlite3LOCAL = ast.OrderByForType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 794:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.IndexHintForType
//line sqlite3.y:4168
		{
			sqlite3LOCAL = ast.GroupByForType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 795:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4174
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 796:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4178
		{
			sqlite3LOCAL = sqlite3Dollar[2].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 797:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4185
		{
			sqlite3LOCAL = &ast.OrExpr{Left: sqlite3Dollar[1].exprUnion(), Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 798:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4189
		{
			sqlite3LOCAL = &ast.AndExpr{Left: sqlite3Dollar[1].exprUnion(), Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 799:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4193
		{
			sqlite3LOCAL = &ast.NotExpr{Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 800:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4197
		{
			sqlite3LOCAL = &ast.IsExpr{Left: sqlite3Dollar[1].exprUnion(), Right: sqlite3Dollar[3].isExprOperatorUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 801:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4201
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 802:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4205
		{
			sqlite3LOCAL = &ast.MemberOfExpr{Value: sqlite3Dollar[1].exprUnion(), JSONArr: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 803:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4212
		{
			sqlite3LOCAL = &ast.IsExpr{Left: sqlite3Dollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 804:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4216
		{
			sqlite3LOCAL = &ast.IsExpr{Left: sqlite3Dollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 805:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4220
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: sqlite3Dollar[2].comparisonExprOperatorUnion(), Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 806:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4224
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 807:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4230
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.InOp, Right: sqlite3Dollar[3].colTupleUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 808:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4234
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.NotInOp, Right: sqlite3Dollar[4].colTupleUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 809:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4238
		{
			sqlite3LOCAL = &ast.BetweenExpr{Left: sqlite3Dollar[1].exprUnion(), IsBetween: true, From: sqlite3Dollar[3].exprUnion(), To: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 810:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4242
		{
			sqlite3LOCAL = &ast.BetweenExpr{Left: sqlite3Dollar[1].exprUnion(), IsBetween: false, From: sqlite3Dollar[4].exprUnion(), To: sqlite3Dollar[6].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 811:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4246
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.LikeOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 812:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4250
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: sqlite3Dollar[4].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 813:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4254
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.LikeOp, Right: sqlite3Dollar[3].exprUnion(), Escape: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 814:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4258
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: sqlite3Dollar[4].exprUnion(), Escape: sqlite3Dollar[6].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 815:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4262
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.RegexpOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 816:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4266
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: sqlite3Dollar[4].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 817:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4270
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 818:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4274
		{
			sqlite3LOCAL = &ast.ComparisonExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.InOp, Right: sqlite3Dollar[4].colTupleUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 819:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4280
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.BitOrOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 820:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4284
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.BitAndOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 821:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4288
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 822:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4292
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 823:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4296
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.PlusOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 824:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4300
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.MinusOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 825:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4304
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.MultOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 826:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4308
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.DivOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 827:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4312
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.ModOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 828:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4316
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.IntDivOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 829:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4320
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.ModOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 830:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4324
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].exprUnion(), Operator: ast.BitXorOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 831:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4328
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 832:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4334
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 833:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4338
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 834:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4342
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 835:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4346
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 836:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4350
		{
			sqlite3LOCAL = &ast.CollateExpr{Expr: sqlite3Dollar[1].exprUnion(), Collation: sqlite3Dollar[3].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 837:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4354
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 838:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4358
		{
			sqlite3LOCAL = sqlite3Dollar[1].colNameUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 839:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4362
		{
			sqlite3LOCAL = sqlite3Dollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 840:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4366
		{
			sqlite3LOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 841:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4370
		{
			sqlite3LOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 842:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4374
		{
			sqlite3LOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 843:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4378
		{
			sqlite3LOCAL = sqlite3Dollar[1].subqueryUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 844:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4382
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 845:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4386
		{
			sqlite3LOCAL = &ast.ExistsExpr{Subquery: sqlite3Dollar[2].subqueryUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 846:
		sqlite3Dollar = sqlite3S[sqlite3pt-9 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4390
		{
			sqlite3LOCAL = &ast.MatchExpr{Columns: sqlite3Dollar[3].selectExprsUnion(), Expr: sqlite3Dollar[7].exprUnion(), Option: sqlite3Dollar[8].matchExprOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 847:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4394
		{
			sqlite3LOCAL = &ast.ConvertExpr{Expr: sqlite3Dollar[3].exprUnion(), Type: sqlite3Dollar[5].convertTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 848:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4398
		{
			sqlite3LOCAL = &ast.ConvertExpr{Expr: sqlite3Dollar[3].exprUnion(), Type: sqlite3Dollar[5].convertTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 849:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4402
		{
			sqlite3LOCAL = &ast.ConvertUsingExpr{Expr: sqlite3Dollar[3].exprUnion(), Type: sqlite3Dollar[5].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 850:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4406
		{
			// From: https://dev.sqlite3.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			sqlite3LOCAL = &ast.ConvertExpr{Expr: sqlite3Dollar[2].exprUnion(), Type: &ast.ConvertType{Type: sqlite3Dollar[1].str}}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 851:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4414
		{
			sqlite3LOCAL = &ast.Default{ColName: sqlite3Dollar[2].str}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 852:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4418
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			sqlite3LOCAL = &ast.IntervalExpr{Expr: sqlite3Dollar[2].exprUnion(), Unit: sqlite3Dollar[3].colIdent.String()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 853:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4426
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 854:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4430
		{
			sqlite3LOCAL = &ast.BinaryExpr{Left: sqlite3Dollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 855:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TrimType
//line sqlite3.y:4436
		{
			sqlite3LOCAL = ast.BothTrimType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 856:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TrimType
//line sqlite3.y:4440
		{
			sqlite3LOCAL = ast.LeadingTrimType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 857:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.TrimType
//line sqlite3.y:4444
		{
			sqlite3LOCAL = ast.TrailingTrimType
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 858:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:4450
		{
			sqlite3VAL.str = ""
		}
	case 859:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:4454
		{
			sqlite3VAL.str = string(sqlite3Dollar[2].colIdent.String())
		}
	case 860:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.BoolVal
//line sqlite3.y:4460
		{
			sqlite3LOCAL = ast.BoolVal(true)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 861:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.BoolVal
//line sqlite3.y:4464
		{
			sqlite3LOCAL = ast.BoolVal(false)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 862:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsExprOperator
//line sqlite3.y:4471
		{
			sqlite3LOCAL = ast.IsTrueOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 863:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsExprOperator
//line sqlite3.y:4475
		{
			sqlite3LOCAL = ast.IsNotTrueOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 864:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsExprOperator
//line sqlite3.y:4479
		{
			sqlite3LOCAL = ast.IsFalseOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 865:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.IsExprOperator
//line sqlite3.y:4483
		{
			sqlite3LOCAL = ast.IsNotFalseOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 866:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4489
		{
			sqlite3LOCAL = ast.EqualOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 867:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4493
		{
			sqlite3LOCAL = ast.LessThanOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 868:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4497
		{
			sqlite3LOCAL = ast.GreaterThanOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 869:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4501
		{
			sqlite3LOCAL = ast.LessEqualOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 870:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4505
		{
			sqlite3LOCAL = ast.GreaterEqualOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 871:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4509
		{
			sqlite3LOCAL = ast.NotEqualOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 872:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ComparisonExprOperator
//line sqlite3.y:4513
		{
			sqlite3LOCAL = ast.NullSafeEqualOp
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 873:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColTuple
//line sqlite3.y:4519
		{
			sqlite3LOCAL = sqlite3Dollar[1].valTupleUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 874:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColTuple
//line sqlite3.y:4523
		{
			sqlite3LOCAL = sqlite3Dollar[1].subqueryUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 875:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ColTuple
//line sqlite3.y:4527
		{
			sqlite3LOCAL = ast.ListArg(sqlite3Dollar[1].str[2:])
			bindVariable(sqlite3lex, sqlite3Dollar[1].str[2:])
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 876:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Subquery
//line sqlite3.y:4534
		{
			sqlite3LOCAL = &ast.Subquery{sqlite3Dollar[1].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 877:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Exprs
//line sqlite3.y:4540
		{
			sqlite3LOCAL = ast.Exprs{sqlite3Dollar[1].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 878:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:4544
		{
			sqlite3SLICE := (*ast.Exprs)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].exprUnion())
		}
	case 879:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4554
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: sqlite3Dollar[1].colIdent, Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 880:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4558
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: sqlite3Dollar[1].colIdent, Distinct: true, Exprs: sqlite3Dollar[4].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 881:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4562
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: sqlite3Dollar[1].colIdent, Distinct: true, Exprs: sqlite3Dollar[4].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 882:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4566
		{
			sqlite3LOCAL = &ast.FuncExpr{Qualifier: sqlite3Dollar[1].tableIdent, Name: sqlite3Dollar[3].colIdent, Exprs: sqlite3Dollar[5].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 883:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4576
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 884:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4580
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 885:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4584
		{
			sqlite3LOCAL = &ast.SubstrExpr{Name: sqlite3Dollar[3].exprUnion(), From: sqlite3Dollar[5].exprUnion(), To: sqlite3Dollar[7].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 886:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4588
		{
			sqlite3LOCAL = &ast.SubstrExpr{Name: sqlite3Dollar[3].exprUnion(), From: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 887:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4592
		{
			sqlite3LOCAL = &ast.SubstrExpr{Name: sqlite3Dollar[3].exprUnion(), From: sqlite3Dollar[5].exprUnion(), To: sqlite3Dollar[7].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 888:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4596
		{
			sqlite3LOCAL = &ast.SubstrExpr{Name: sqlite3Dollar[3].exprUnion(), From: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 889:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4600
		{
			sqlite3LOCAL = &ast.GroupConcatExpr{Distinct: sqlite3Dollar[3].booleanUnion(), Exprs: sqlite3Dollar[4].selectExprsUnion(), OrderBy: sqlite3Dollar[5].orderByUnion(), Separator: sqlite3Dollar[6].str, Limit: sqlite3Dollar[7].limitUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 890:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4604
		{
			sqlite3LOCAL = &ast.CaseExpr{Expr: sqlite3Dollar[2].exprUnion(), Whens: sqlite3Dollar[3].whensUnion(), Else: sqlite3Dollar[4].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 891:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4608
		{
			sqlite3LOCAL = &ast.ValuesFuncExpr{Name: sqlite3Dollar[3].colNameUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 892:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4612
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 893:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4623
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 894:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4627
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 895:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4633
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 896:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4637
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 897:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4642
		{
			sqlite3LOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 898:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4646
		{
			sqlite3LOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: sqlite3Dollar[3].colIdent.String(), Expr1: sqlite3Dollar[5].exprUnion(), Expr2: sqlite3Dollar[7].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 899:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4650
		{
			sqlite3LOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: sqlite3Dollar[3].colIdent.String(), Expr1: sqlite3Dollar[5].exprUnion(), Expr2: sqlite3Dollar[7].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 900:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4654
		{
			sqlite3LOCAL = &ast.ExtractFuncExpr{IntervalTypes: sqlite3Dollar[3].intervalTypeUnion(), Expr: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 901:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4658
		{
			sqlite3LOCAL = &ast.WeightStringFuncExpr{Expr: sqlite3Dollar[3].exprUnion(), As: sqlite3Dollar[4].convertTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 902:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4662
		{
			sqlite3LOCAL = &ast.JSONPrettyExpr{JSONVal: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 903:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4666
		{
			sqlite3LOCAL = &ast.JSONStorageFreeExpr{JSONVal: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 904:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4670
		{
			sqlite3LOCAL = &ast.JSONStorageSizeExpr{JSONVal: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 905:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4674
		{
			sqlite3LOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 906:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4678
		{
			sqlite3LOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 907:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4682
		{
			sqlite3LOCAL = &ast.TrimFuncExpr{Type: sqlite3Dollar[3].trimTypeUnion(), TrimArg: sqlite3Dollar[4].exprUnion(), StringArg: sqlite3Dollar[6].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 908:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4686
		{
			sqlite3LOCAL = &ast.TrimFuncExpr{StringArg: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 909:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4690
		{
			sqlite3LOCAL = &ast.TrimFuncExpr{TrimArg: sqlite3Dollar[3].exprUnion(), StringArg: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 910:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4694
		{
			sqlite3LOCAL = &ast.JSONSchemaValidFuncExpr{Schema: sqlite3Dollar[3].exprUnion(), Document: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 911:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4698
		{
			sqlite3LOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: sqlite3Dollar[3].exprUnion(), Document: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 912:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4702
		{
			sqlite3LOCAL = &ast.JSONArrayExpr{Params: sqlite3Dollar[3].exprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 913:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4706
		{
			sqlite3LOCAL = &ast.JSONObjectExpr{Params: sqlite3Dollar[3].jsonObjectParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 914:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4710
		{
			sqlite3LOCAL = &ast.JSONQuoteExpr{StringArg: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 915:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4714
		{
			sqlite3LOCAL = &ast.JSONContainsExpr{Target: sqlite3Dollar[3].exprUnion(), Candidate: sqlite3Dollar[5].exprUnion(), PathList: sqlite3Dollar[6].jsonPathParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 916:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4718
		{
			sqlite3LOCAL = &ast.JSONContainsPathExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), OneOrAll: sqlite3Dollar[5].exprUnion(), PathList: sqlite3Dollar[7].jsonPathParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 917:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4722
		{
			sqlite3LOCAL = &ast.JSONExtractExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), PathList: sqlite3Dollar[5].jsonPathParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 918:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4726
		{
			sqlite3LOCAL = &ast.JSONKeysExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), PathList: sqlite3Dollar[4].jsonPathParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 919:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4730
		{
			sqlite3LOCAL = &ast.JSONOverlapsExpr{JSONDoc1: sqlite3Dollar[3].exprUnion(), JSONDoc2: sqlite3Dollar[5].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 920:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4734
		{
			sqlite3LOCAL = &ast.JSONSearchExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), OneOrAll: sqlite3Dollar[5].exprUnion(), SearchStr: sqlite3Dollar[7].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 921:
		sqlite3Dollar = sqlite3S[sqlite3pt-11 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4738
		{
			sqlite3LOCAL = &ast.JSONSearchExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), OneOrAll: sqlite3Dollar[5].exprUnion(), SearchStr: sqlite3Dollar[7].exprUnion(), EscapeChar: sqlite3Dollar[9].exprUnion(), PathList: sqlite3Dollar[10].jsonPathParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 922:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4742
		{
			sqlite3LOCAL = &ast.JSONValueExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), Path: sqlite3Dollar[5].jsonPathParam, ReturningType: sqlite3Dollar[6].convertTypeUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 923:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4746
		{
			sqlite3LOCAL = &ast.JSONValueExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), Path: sqlite3Dollar[5].jsonPathParam, ReturningType: sqlite3Dollar[6].convertTypeUnion(), EmptyOnResponse: sqlite3Dollar[7].jtOnResponseUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 924:
		sqlite3Dollar = sqlite3S[sqlite3pt-8 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4750
		{
			sqlite3LOCAL = &ast.JSONValueExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), Path: sqlite3Dollar[5].jsonPathParam, ReturningType: sqlite3Dollar[6].convertTypeUnion(), ErrorOnResponse: sqlite3Dollar[7].jtOnResponseUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 925:
		sqlite3Dollar = sqlite3S[sqlite3pt-9 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4754
		{
			sqlite3LOCAL = &ast.JSONValueExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), Path: sqlite3Dollar[5].jsonPathParam, ReturningType: sqlite3Dollar[6].convertTypeUnion(), EmptyOnResponse: sqlite3Dollar[7].jtOnResponseUnion(), ErrorOnResponse: sqlite3Dollar[8].jtOnResponseUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 926:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4758
		{
			sqlite3LOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 927:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4762
		{
			sqlite3LOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 928:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4766
		{
			sqlite3LOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 929:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4770
		{
			sqlite3LOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 930:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4774
		{
			sqlite3LOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: sqlite3Dollar[3].exprUnion(), Path: sqlite3Dollar[5].jsonPathParam}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 931:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4778
		{
			sqlite3LOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: sqlite3Dollar[3].exprUnion(), Params: sqlite3Dollar[5].jsonObjectParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 932:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4782
		{
			sqlite3LOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: sqlite3Dollar[3].exprUnion(), Params: sqlite3Dollar[5].jsonObjectParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 933:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4786
		{
			sqlite3LOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: sqlite3Dollar[3].exprUnion(), Params: sqlite3Dollar[5].jsonObjectParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 934:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4790
		{
			sqlite3LOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: sqlite3Dollar[3].exprUnion(), Params: sqlite3Dollar[5].jsonObjectParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 935:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4794
		{
			sqlite3LOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: sqlite3Dollar[3].exprUnion(), Params: sqlite3Dollar[5].jsonObjectParamsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 936:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4798
		{
			sqlite3LOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: sqlite3Dollar[3].exprUnion(), JSONDocList: sqlite3Dollar[5].exprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 937:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4802
		{
			sqlite3LOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: sqlite3Dollar[3].exprUnion(), JSONDocList: sqlite3Dollar[5].exprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 938:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4806
		{
			sqlite3LOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: sqlite3Dollar[3].exprUnion(), JSONDocList: sqlite3Dollar[5].exprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 939:
		sqlite3Dollar = sqlite3S[sqlite3pt-6 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4810
		{
			sqlite3LOCAL = &ast.JSONRemoveExpr{JSONDoc: sqlite3Dollar[3].exprUnion(), PathList: sqlite3Dollar[5].exprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 940:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4814
		{
			sqlite3LOCAL = &ast.JSONUnquoteExpr{JSONValue: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 941:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:4819
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 942:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:4823
		{
			sqlite3LOCAL = sqlite3Dollar[2].convertTypeUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 943:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []ast.JSONPathParam
//line sqlite3.y:4828
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 944:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL []ast.JSONPathParam
//line sqlite3.y:4832
		{
			sqlite3LOCAL = sqlite3Dollar[2].jsonPathParamsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 945:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.JSONPathParam
//line sqlite3.y:4838
		{
			sqlite3LOCAL = []ast.JSONPathParam{sqlite3Dollar[1].jsonPathParam}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 946:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:4842
		{
			sqlite3SLICE := (*[]ast.JSONPathParam)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].jsonPathParam)
		}
	case 947:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4848
		{
			sqlite3VAL.jsonPathParam = ast.JSONPathParam(sqlite3Dollar[1].exprUnion())
		}
	case 948:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4852
		{
			sqlite3VAL.jsonPathParam = ast.JSONPathParam(sqlite3Dollar[1].colNameUnion())
		}
	case 949:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:4858
		{
		}
	case 950:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4860
		{
			sqlite3LOCAL = ast.IntervalDayHour
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 951:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4864
		{
			sqlite3LOCAL = ast.IntervalDayMicrosecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 952:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4868
		{
			sqlite3LOCAL = ast.IntervalDayMinute
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 953:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4872
		{
			sqlite3LOCAL = ast.IntervalDaySecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 954:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4876
		{
			sqlite3LOCAL = ast.IntervalHourMicrosecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 955:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4880
		{
			sqlite3LOCAL = ast.IntervalHourMinute
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 956:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4884
		{
			sqlite3LOCAL = ast.IntervalHourSecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 957:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4888
		{
			sqlite3LOCAL = ast.IntervalMinuteMicrosecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 958:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4892
		{
			sqlite3LOCAL = ast.IntervalMinuteSecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 959:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4896
		{
			sqlite3LOCAL = ast.IntervalSecondMicrosecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 960:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4900
		{
			sqlite3LOCAL = ast.IntervalYearMonth
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 961:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4906
		{
			sqlite3LOCAL = ast.IntervalDay
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 962:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4910
		{
			sqlite3LOCAL = ast.IntervalWeek
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 963:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4914
		{
			sqlite3LOCAL = ast.IntervalHour
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 964:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4918
		{
			sqlite3LOCAL = ast.IntervalMinute
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 965:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4922
		{
			sqlite3LOCAL = ast.IntervalMonth
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 966:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4926
		{
			sqlite3LOCAL = ast.IntervalQuarter
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 967:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4930
		{
			sqlite3LOCAL = ast.IntervalSecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 968:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4934
		{
			sqlite3LOCAL = ast.IntervalMicrosecond
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 969:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.IntervalTypes
//line sqlite3.y:4938
		{
			sqlite3LOCAL = ast.IntervalYear
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 972:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4948
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 973:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4952
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 974:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4956
		{
			sqlite3LOCAL = ast.NewArgument(sqlite3Dollar[2].str[1:])
			bindVariable(sqlite3lex, sqlite3Dollar[2].str[1:])
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 975:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4967
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 976:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4971
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 977:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4975
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 978:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4979
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 979:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:4983
		{
			sqlite3LOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: sqlite3Dollar[3].selectExprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 980:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchExprOption
//line sqlite3.y:4989
		{
			sqlite3LOCAL = ast.NoOption
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 981:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchExprOption
//line sqlite3.y:4993
		{
			sqlite3LOCAL = ast.BooleanModeOpt
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 982:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchExprOption
//line sqlite3.y:4997
		{
			sqlite3LOCAL = ast.NaturalLanguageModeOpt
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 983:
		sqlite3Dollar = sqlite3S[sqlite3pt-7 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchExprOption
//line sqlite3.y:5001
		{
			sqlite3LOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 984:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.MatchExprOption
//line sqlite3.y:5005
		{
			sqlite3LOCAL = ast.QueryExpansionOpt
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 985:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5011
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].colIdent.String())
		}
	case 986:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5015
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 987:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5019
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 988:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5025
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 989:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5031
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 990:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5035
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion(), Charset: sqlite3Dollar[3].columnCharset}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 991:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5039
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 992:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5043
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 993:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5047
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
			sqlite3LOCAL.Length = sqlite3Dollar[2].LengthScaleOption.Length
			sqlite3LOCAL.Scale = sqlite3Dollar[2].LengthScaleOption.Scale
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 994:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5053
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 995:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5057
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 996:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5061
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 997:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5065
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 998:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5069
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 999:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5073
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1000:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5077
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1001:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5081
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str), Length: sqlite3Dollar[2].literalUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1002:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5085
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1003:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ConvertType
//line sqlite3.y:5089
		{
			sqlite3LOCAL = &ast.ConvertType{Type: string(sqlite3Dollar[1].str)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1004:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5095
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1005:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5099
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1006:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5104
		{
			sqlite3VAL.str = string("")
		}
	case 1007:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:5108
		{
			sqlite3VAL.str = " separator " + sql_types.EncodeStringSQL(sqlite3Dollar[2].str)
		}
	case 1008:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.When
//line sqlite3.y:5114
		{
			sqlite3LOCAL = []*ast.When{sqlite3Dollar[1].whenUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1009:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:5118
		{
			sqlite3SLICE := (*[]*ast.When)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[2].whenUnion())
		}
	case 1010:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.When
//line sqlite3.y:5124
		{
			sqlite3LOCAL = &ast.When{Cond: sqlite3Dollar[2].exprUnion(), Val: sqlite3Dollar[4].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1011:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5129
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1012:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5133
		{
			sqlite3LOCAL = sqlite3Dollar[2].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1013:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColName
//line sqlite3.y:5139
		{
			sqlite3LOCAL = &ast.ColName{Name: sqlite3Dollar[1].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1014:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColName
//line sqlite3.y:5143
		{
			sqlite3LOCAL = &ast.ColName{Qualifier: ast.TableName{Name: sqlite3Dollar[1].tableIdent}, Name: sqlite3Dollar[3].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1015:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.ColName
//line sqlite3.y:5147
		{
			sqlite3LOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: sqlite3Dollar[1].tableIdent, Name: sqlite3Dollar[3].tableIdent}, Name: sqlite3Dollar[5].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1016:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5153
		{
			// TODO(sougou): ast.Deprecate this construct.
			if sqlite3Dollar[1].colIdent.Lowered() != "value" {
				sqlite3lex.Error("expecting value after next")
				return 1
			}
			sqlite3LOCAL = ast.NewIntLiteral("1")
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1017:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5162
		{
			sqlite3LOCAL = ast.NewArgument(sqlite3Dollar[1].str[1:])
			bindVariable(sqlite3lex, sqlite3Dollar[1].str[1:])
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1018:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Exprs
//line sqlite3.y:5168
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1019:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Exprs
//line sqlite3.y:5172
		{
			sqlite3LOCAL = sqlite3Dollar[3].exprsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1020:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5177
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1021:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5181
		{
			sqlite3LOCAL = sqlite3Dollar[2].exprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1022:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderBy
//line sqlite3.y:5186
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1023:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderBy
//line sqlite3.y:5190
		{
			sqlite3LOCAL = sqlite3Dollar[1].orderByUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1024:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderBy
//line sqlite3.y:5196
		{
			sqlite3LOCAL = sqlite3Dollar[3].orderByUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1025:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderBy
//line sqlite3.y:5202
		{
			sqlite3LOCAL = ast.OrderBy{sqlite3Dollar[1].orderUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1026:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5206
		{
			sqlite3SLICE := (*ast.OrderBy)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].orderUnion())
		}
	case 1027:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Order
//line sqlite3.y:5212
		{
			sqlite3LOCAL = &ast.Order{Expr: sqlite3Dollar[1].exprUnion(), Direction: sqlite3Dollar[2].orderDirectionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1028:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderDirection
//line sqlite3.y:5217
		{
			sqlite3LOCAL = ast.AscOrder
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1029:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderDirection
//line sqlite3.y:5221
		{
			sqlite3LOCAL = ast.AscOrder
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1030:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.OrderDirection
//line sqlite3.y:5225
		{
			sqlite3LOCAL = ast.DescOrder
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1031:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Limit
//line sqlite3.y:5230
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1032:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Limit
//line sqlite3.y:5234
		{
			sqlite3LOCAL = sqlite3Dollar[1].limitUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1033:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Limit
//line sqlite3.y:5240
		{
			sqlite3LOCAL = &ast.Limit{Rowcount: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1034:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Limit
//line sqlite3.y:5244
		{
			sqlite3LOCAL = &ast.Limit{Offset: sqlite3Dollar[2].exprUnion(), Rowcount: sqlite3Dollar[4].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1035:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Limit
//line sqlite3.y:5248
		{
			sqlite3LOCAL = &ast.Limit{Offset: sqlite3Dollar[4].exprUnion(), Rowcount: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1036:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:5253
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1037:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:5257
		{
			sqlite3LOCAL = []ast.AlterOption{sqlite3Dollar[1].alterOptionUnion(), sqlite3Dollar[2].alterOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1038:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:5261
		{
			sqlite3LOCAL = []ast.AlterOption{sqlite3Dollar[1].alterOptionUnion(), sqlite3Dollar[2].alterOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1039:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:5265
		{
			sqlite3LOCAL = []ast.AlterOption{sqlite3Dollar[1].alterOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1040:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []ast.AlterOption
//line sqlite3.y:5269
		{
			sqlite3LOCAL = []ast.AlterOption{sqlite3Dollar[1].alterOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1041:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5276
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1042:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5280
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1043:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5284
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1044:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5288
		{
			sqlite3LOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1045:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5294
		{
			sqlite3LOCAL = ast.AlgorithmValue(sqlite3Dollar[3].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1046:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5298
		{
			sqlite3LOCAL = ast.AlgorithmValue(sqlite3Dollar[3].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1047:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5302
		{
			sqlite3LOCAL = ast.AlgorithmValue(sqlite3Dollar[3].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1048:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.AlterOption
//line sqlite3.y:5306
		{
			sqlite3LOCAL = ast.AlgorithmValue(sqlite3Dollar[3].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1049:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5311
		{
			sqlite3VAL.str = ""
		}
	case 1050:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5315
		{
			sqlite3VAL.str = string(sqlite3Dollar[3].str)
		}
	case 1051:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5319
		{
			sqlite3VAL.str = string(sqlite3Dollar[3].str)
		}
	case 1052:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5323
		{
			sqlite3VAL.str = string(sqlite3Dollar[3].str)
		}
	case 1053:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5328
		{
			sqlite3VAL.str = ""
		}
	case 1054:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5332
		{
			sqlite3VAL.str = sqlite3Dollar[3].str
		}
	case 1055:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5338
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 1056:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5342
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 1057:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5347
		{
			sqlite3VAL.str = ""
		}
	case 1058:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
//line sqlite3.y:5351
		{
			sqlite3VAL.str = sqlite3Dollar[2].str
		}
	case 1059:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5356
		{
			sqlite3VAL.str = "cascaded"
		}
	case 1060:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5360
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 1061:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5364
		{
			sqlite3VAL.str = string(sqlite3Dollar[1].str)
		}
	case 1062:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Definer
//line sqlite3.y:5369
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1063:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Definer
//line sqlite3.y:5373
		{
			sqlite3LOCAL = sqlite3Dollar[3].definerUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1064:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Definer
//line sqlite3.y:5379
		{
			sqlite3LOCAL = &ast.Definer{
				Name: string(sqlite3Dollar[1].str),
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1065:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Definer
//line sqlite3.y:5385
		{
			sqlite3LOCAL = &ast.Definer{
				Name: string(sqlite3Dollar[1].str),
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1066:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Definer
//line sqlite3.y:5391
		{
			sqlite3LOCAL = &ast.Definer{
				Name:    sqlite3Dollar[1].str,
				Address: sqlite3Dollar[2].str,
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1067:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5400
		{
			sqlite3VAL.str = sql_types.EncodeStringSQL(sqlite3Dollar[1].str)
		}
	case 1068:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5404
		{
			sqlite3VAL.str = ast.FormatIdentifier(sqlite3Dollar[1].str)
		}
	case 1069:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5409
		{
			sqlite3VAL.str = ""
		}
	case 1070:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5413
		{
			sqlite3VAL.str = ast.FormatAddress(sqlite3Dollar[1].str)
		}
	case 1071:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.Lock
//line sqlite3.y:5419
		{
			sqlite3LOCAL = ast.ForUpdateLock
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1072:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL ast.Lock
//line sqlite3.y:5423
		{
			sqlite3LOCAL = ast.ShareModeLock
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1073:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.SelectInto
//line sqlite3.y:5429
		{
			sqlite3LOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(sqlite3Dollar[2].tableName.Name.V)}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1074:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Insert
//line sqlite3.y:5442
		{
			sqlite3LOCAL = &ast.Insert{Rows: sqlite3Dollar[2].valuesUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1075:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Insert
//line sqlite3.y:5446
		{
			sqlite3LOCAL = &ast.Insert{Rows: sqlite3Dollar[1].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1076:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Insert
//line sqlite3.y:5450
		{
			sqlite3LOCAL = &ast.Insert{Columns: sqlite3Dollar[2].columnsUnion(), Rows: sqlite3Dollar[5].valuesUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1077:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Insert
//line sqlite3.y:5454
		{
			sqlite3LOCAL = &ast.Insert{Rows: sqlite3Dollar[4].valuesUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1078:
		sqlite3Dollar = sqlite3S[sqlite3pt-4 : sqlite3pt+1]
		var sqlite3LOCAL *ast.Insert
//line sqlite3.y:5458
		{
			sqlite3LOCAL = &ast.Insert{Columns: sqlite3Dollar[2].columnsUnion(), Rows: sqlite3Dollar[4].selStmtUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1079:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:5464
		{
			sqlite3LOCAL = ast.Columns{sqlite3Dollar[1].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1080:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.Columns
//line sqlite3.y:5468
		{
			sqlite3LOCAL = ast.Columns{sqlite3Dollar[3].colIdent}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1081:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5472
		{
			sqlite3SLICE := (*ast.Columns)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].colIdent)
		}
	case 1082:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
//line sqlite3.y:5476
		{
			sqlite3SLICE := (*ast.Columns)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[5].colIdent)
		}
	case 1083:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.UpdateExprs
//line sqlite3.y:5481
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1084:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.UpdateExprs
//line sqlite3.y:5485
		{
			sqlite3LOCAL = sqlite3Dollar[5].updateExprsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1085:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Values
//line sqlite3.y:5491
		{
			sqlite3LOCAL = ast.Values{sqlite3Dollar[1].valTupleUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1086:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5495
		{
			sqlite3SLICE := (*ast.Values)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].valTupleUnion())
		}
	case 1087:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.ValTuple
//line sqlite3.y:5501
		{
			sqlite3LOCAL = sqlite3Dollar[1].valTupleUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1088:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL ast.ValTuple
//line sqlite3.y:5505
		{
			sqlite3LOCAL = ast.ValTuple{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1089:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL ast.ValTuple
//line sqlite3.y:5511
		{
			sqlite3LOCAL = ast.ValTuple(sqlite3Dollar[2].exprsUnion())
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1090:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5516
		{
			if len(sqlite3Dollar[1].valTupleUnion()) == 1 {
				sqlite3LOCAL = sqlite3Dollar[1].valTupleUnion()[0]
			} else {
				sqlite3LOCAL = sqlite3Dollar[1].valTupleUnion()
			}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1091:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.UpdateExprs
//line sqlite3.y:5526
		{
			sqlite3LOCAL = ast.UpdateExprs{sqlite3Dollar[1].updateExprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1092:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5530
		{
			sqlite3SLICE := (*ast.UpdateExprs)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].updateExprUnion())
		}
	case 1093:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.UpdateExpr
//line sqlite3.y:5536
		{
			sqlite3LOCAL = &ast.UpdateExpr{Name: sqlite3Dollar[1].colNameUnion(), Expr: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1094:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.SetExprs
//line sqlite3.y:5542
		{
			sqlite3LOCAL = ast.SetExprs{sqlite3Dollar[1].setExprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1095:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
//line sqlite3.y:5546
		{
			sqlite3SLICE := (*ast.SetExprs)(sqlite3Iaddr(sqlite3VAL.union))
			*sqlite3SLICE = append(*sqlite3SLICE, sqlite3Dollar[3].setExprUnion())
		}
	case 1096:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.SetExpr
//line sqlite3.y:5552
		{
			sqlite3LOCAL = &ast.SetExpr{Name: sqlite3Dollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1097:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.SetExpr
//line sqlite3.y:5556
		{
			sqlite3LOCAL = &ast.SetExpr{Name: sqlite3Dollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1098:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.SetExpr
//line sqlite3.y:5560
		{
			sqlite3LOCAL = &ast.SetExpr{Name: sqlite3Dollar[1].colIdent, Scope: ast.ImplicitScope, Expr: sqlite3Dollar[3].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1099:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL *ast.SetExpr
//line sqlite3.y:5564
		{
			sqlite3LOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(sqlite3Dollar[1].str)), Scope: ast.ImplicitScope, Expr: sqlite3Dollar[2].exprUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1100:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.SetExpr
//line sqlite3.y:5568
		{
			sqlite3Dollar[2].setExprUnion().Scope = sqlite3Dollar[1].scopeUnion()
			sqlite3LOCAL = sqlite3Dollar[2].setExprUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1102:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
//line sqlite3.y:5576
		{
			sqlite3VAL.str = "charset"
		}
	case 1105:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5586
		{
			sqlite3LOCAL = ast.NewStrLiteral(sqlite3Dollar[1].colIdent.String())
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1106:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5590
		{
			sqlite3LOCAL = ast.NewStrLiteral(sqlite3Dollar[1].str)
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1107:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Expr
//line sqlite3.y:5594
		{
			sqlite3LOCAL = &ast.Default{}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1110:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:5603
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1111:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:5605
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1112:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:5608
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1113:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:5610
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1114:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:5613
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1115:
		sqlite3Dollar = sqlite3S[sqlite3pt-3 : sqlite3pt+1]
		var sqlite3LOCAL bool
//line sqlite3.y:5615
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1116:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Ignore
//line sqlite3.y:5618
		{
			sqlite3LOCAL = false
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1117:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Ignore
//line sqlite3.y:5620
		{
			sqlite3LOCAL = true
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1118:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5623
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 1119:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5625
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 1120:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5627
		{
			sqlite3VAL.empty = struct{}{}
		}
	case 1121:
		sqlite3Dollar = sqlite3S[sqlite3pt-5 : sqlite3pt+1]
		var sqlite3LOCAL ast.Statement
//line sqlite3.y:5631
		{
			sqlite3LOCAL = &ast.CallProc{Name: sqlite3Dollar[2].tableName, Params: sqlite3Dollar[4].exprsUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1122:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL ast.Exprs
//line sqlite3.y:5636
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1123:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL ast.Exprs
//line sqlite3.y:5640
		{
			sqlite3LOCAL = sqlite3Dollar[1].exprsUnion()
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1124:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.IndexOption
//line sqlite3.y:5645
		{
			sqlite3LOCAL = nil
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1125:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
		var sqlite3LOCAL []*ast.IndexOption
//line sqlite3.y:5647
		{
			sqlite3LOCAL = []*ast.IndexOption{sqlite3Dollar[1].indexOptionUnion()}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1126:
		sqlite3Dollar = sqlite3S[sqlite3pt-2 : sqlite3pt+1]
		var sqlite3LOCAL *ast.IndexOption
//line sqlite3.y:5651
		{
			sqlite3LOCAL = &ast.IndexOption{Name: string(sqlite3Dollar[1].str), String: string(sqlite3Dollar[2].colIdent.String())}
		}
		sqlite3VAL.union = sqlite3LOCAL
	case 1127:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5657
		{
			sqlite3VAL.colIdent = sqlite3Dollar[1].colIdent
		}
	case 1128:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5661
		{
			sqlite3VAL.colIdent = ast.NewColIdent(string(sqlite3Dollar[1].str))
		}
	case 1130:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5668
		{
			sqlite3VAL.colIdent = ast.NewColIdent(string(sqlite3Dollar[1].str))
		}
	case 1131:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5674
		{
			sqlite3VAL.schemaIdent = ast.NewSchemaIdent(string(sqlite3Dollar[1].colIdent.String()))
		}
	case 1132:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5680
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent(string(sqlite3Dollar[1].colIdent.String()))
		}
	case 1133:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5684
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent(string(sqlite3Dollar[1].str))
		}
	case 1134:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5690
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent("")
		}
	case 1135:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5694
		{
			sqlite3VAL.tableIdent = sqlite3Dollar[1].tableIdent
		}
	case 1137:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5701
		{
			sqlite3VAL.tableIdent = ast.NewTableIdent(string(sqlite3Dollar[1].str))
		}
	case 1285:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5873
		{
			if incNesting(sqlite3lex) {
				sqlite3lex.Error("max nesting level reached")
				return 1
			}
		}
	case 1286:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5882
		{
			decNesting(sqlite3lex)
		}
	case 1287:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5887
		{
			skipToEnd(sqlite3lex)
		}
	case 1288:
		sqlite3Dollar = sqlite3S[sqlite3pt-0 : sqlite3pt+1]
//line sqlite3.y:5892
		{
			skipToEnd(sqlite3lex)
		}
	case 1289:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5896
		{
			skipToEnd(sqlite3lex)
		}
	case 1290:
		sqlite3Dollar = sqlite3S[sqlite3pt-1 : sqlite3pt+1]
//line sqlite3.y:5900
		{
			skipToEnd(sqlite3lex)
		}
	}
	goto sqlite3stack /* stack new state and value */
}
