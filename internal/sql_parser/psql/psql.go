// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:19
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:19

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const ARRAY_MAX_CARDINALITY = 57642
const CHARACTER_SET_CATALOG = 57643
const COMMAND_FUNCTION_CODE = 57644
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57645
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57646
const DATETIME_INTERVAL_CODE = 57647
const DATETIME_INTERVAL_PRECISION = 57648
const DYNAMIC_FUNCTION_CODE = 57649
const END_EXEC = 57650
const PARAMETER_ORDINAL_POSITION = 57651
const PARAMETER_SPECIFIC_CATALOG = 57652
const PARAMETER_SPECIFIC_NAME = 57653
const PARAMETER_SPECIFIC_SCHEMA = 57654
const RETURNED_OCTET_LENGTH = 57655
const TRANSACTIONS_COMMITTED = 57656
const TRANSACTIONS_ROLLED_BACK = 57657
const USER_DEFINED_TYPE_CATALOG = 57658
const USER_DEFINED_TYPE_CODE = 57659
const USER_DEFINED_TYPE_NAME = 57660
const USER_DEFINED_TYPE_SCHEMA = 57661
const VALUES = 57662
const LAST_INSERT_ID = 57663
const NEXT = 57664
const VALUE = 57665
const SHARE = 57666
const MODE = 57667
const SQL_NO_CACHE = 57668
const SQL_CACHE = 57669
const SQL_CALC_FOUND_ROWS = 57670
const JOIN = 57671
const STRAIGHT_JOIN = 57672
const LEFT = 57673
const RIGHT = 57674
const INNER = 57675
const OUTER = 57676
const CROSS = 57677
const NATURAL = 57678
const USE = 57679
const FORCE = 57680
const ON = 57681
const USING = 57682
const INPLACE = 57683
const COPY = 57684
const INSTANT = 57685
const NONE = 57686
const SHARED = 57687
const EXCLUSIVE = 57688
const SUBQUERY_AS_EXPR = 57689
const ID = 57690
const AT_ID = 57691
const AT_AT_ID = 57692
const HEX = 57693
const STRING = 57694
const NCHAR_STRING = 57695
const INTEGRAL = 57696
const FLOAT = 57697
const DECIMAL = 57698
const HEXNUM = 57699
const VALUE_ARG = 57700
const LIST_ARG = 57701
const COMMENT_KEYWORD = 57702
const BIT_LITERAL = 57703
const COMPRESSION = 57704
const JSON_PRETTY = 57705
const JSON_STORAGE_SIZE = 57706
const JSON_STORAGE_FREE = 57707
const JSON_CONTAINS = 57708
const JSON_CONTAINS_PATH = 57709
const JSON_EXTRACT = 57710
const JSON_KEYS = 57711
const JSON_OVERLAPS = 57712
const JSON_SEARCH = 57713
const JSON_VALUE = 57714
const EXTRACT = 57715
const NULL = 57716
const TRUE = 57717
const FALSE = 57718
const OFF = 57719
const DISCARD = 57720
const IMPORT = 57721
const ENABLE = 57722
const DISABLE = 57723
const TABLESPACE = 57724
const VIRTUAL = 57725
const STORED = 57726
const BOTH = 57727
const LEADING = 57728
const TRAILING = 57729
const EMPTY_FROM_CLAUSE = 57730
const LOWER_THAN_CHARSET = 57731
const CHARSET = 57732
const UNIQUE = 57733
const KEY = 57734
const EXPRESSION_PREC_SETTER = 57735
const OR = 57736
const AND = 57737
const NOT = 57738
const BETWEEN = 57739
const CASE = 57740
const WHEN = 57741
const THEN = 57742
const ELSE = 57743
const END = 57744
const LE = 57745
const GE = 57746
const NE = 57747
const NULL_SAFE_EQUAL = 57748
const IS = 57749
const LIKE = 57750
const REGEXP = 57751
const IN = 57752
const SHIFT_LEFT = 57753
const SHIFT_RIGHT = 57754
const DIV = 57755
const MOD = 57756
const UNARY = 57757
const COLLATE = 57758
const BINARY = 57759
const UNDERSCORE_ARMSCII8 = 57760
const UNDERSCORE_ASCII = 57761
const UNDERSCORE_BIG5 = 57762
const UNDERSCORE_BINARY = 57763
const UNDERSCORE_CP1250 = 57764
const UNDERSCORE_CP1251 = 57765
const UNDERSCORE_CP1256 = 57766
const UNDERSCORE_CP1257 = 57767
const UNDERSCORE_CP850 = 57768
const UNDERSCORE_CP852 = 57769
const UNDERSCORE_CP866 = 57770
const UNDERSCORE_CP932 = 57771
const UNDERSCORE_DEC8 = 57772
const UNDERSCORE_EUCJPMS = 57773
const UNDERSCORE_EUCKR = 57774
const UNDERSCORE_GB18030 = 57775
const UNDERSCORE_GB2312 = 57776
const UNDERSCORE_GBK = 57777
const UNDERSCORE_GEOSTD8 = 57778
const UNDERSCORE_GREEK = 57779
const UNDERSCORE_HEBREW = 57780
const UNDERSCORE_HP8 = 57781
const UNDERSCORE_KEYBCS2 = 57782
const UNDERSCORE_KOI8R = 57783
const UNDERSCORE_KOI8U = 57784
const UNDERSCORE_LATIN1 = 57785
const UNDERSCORE_LATIN2 = 57786
const UNDERSCORE_LATIN5 = 57787
const UNDERSCORE_LATIN7 = 57788
const UNDERSCORE_MACCE = 57789
const UNDERSCORE_MACROMAN = 57790
const UNDERSCORE_SJIS = 57791
const UNDERSCORE_SWE7 = 57792
const UNDERSCORE_TIS620 = 57793
const UNDERSCORE_UCS2 = 57794
const UNDERSCORE_UJIS = 57795
const UNDERSCORE_UTF16 = 57796
const UNDERSCORE_UTF16LE = 57797
const UNDERSCORE_UTF32 = 57798
const UNDERSCORE_UTF8 = 57799
const UNDERSCORE_UTF8MB4 = 57800
const UNDERSCORE_UTF8MB3 = 57801
const INTERVAL = 57802
const JSON_EXTRACT_OP = 57803
const JSON_UNQUOTE_EXTRACT_OP = 57804
const CREATE = 57805
const ALTER = 57806
const DROP = 57807
const RENAME = 57808
const ANALYZE = 57809
const ANALYSE = 57810
const ADD = 57811
const FLUSH = 57812
const CHANGE = 57813
const MODIFY = 57814
const DEALLOCATE = 57815
const REVERT = 57816
const SCHEMA = 57817
const TABLE = 57818
const INDEX = 57819
const VIEW = 57820
const TO = 57821
const IGNORE = 57822
const IF = 57823
const PRIMARY = 57824
const COLUMN = 57825
const SPATIAL = 57826
const FULLTEXT = 57827
const KEY_BLOCK_SIZE = 57828
const CHECK = 57829
const INDEXES = 57830
const ACTION = 57831
const CASCADE = 57832
const CONSTRAINT = 57833
const FOREIGN = 57834
const NO = 57835
const REFERENCES = 57836
const RESTRICT = 57837
const SHOW = 57838
const DESCRIBE = 57839
const EXPLAIN = 57840
const DATE = 57841
const ESCAPE = 57842
const REPAIR = 57843
const OPTIMIZE = 57844
const TRUNCATE = 57845
const COALESCE = 57846
const EXCHANGE = 57847
const REBUILD = 57848
const PARTITIONING = 57849
const REMOVE = 57850
const PREPARE = 57851
const EXECUTE = 57852
const MAXVALUE = 57853
const PARTITION = 57854
const REORGANIZE = 57855
const LESS = 57856
const THAN = 57857
const PROCEDURE = 57858
const TRIGGER = 57859
const VINDEX = 57860
const VINDEXES = 57861
const DIRECTORY = 57862
const NAME = 57863
const UPGRADE = 57864
const STATUS = 57865
const VARIABLES = 57866
const WARNINGS = 57867
const CASCADED = 57868
const DEFINER = 57869
const OPTION = 57870
const SQL = 57871
const UNDEFINED = 57872
const SEQUENCE = 57873
const MERGE = 57874
const TEMPORARY = 57875
const TEMPTABLE = 57876
const INVOKER = 57877
const SECURITY = 57878
const FIRST = 57879
const AFTER = 57880
const LAST = 57881
const CANCEL = 57882
const RETRY = 57883
const COMPLETE = 57884
const CLEANUP = 57885
const THROTTLE = 57886
const UNTHROTTLE = 57887
const EXPIRE = 57888
const RATIO = 57889
const BEGIN = 57890
const START = 57891
const TRANSACTION = 57892
const COMMIT = 57893
const ROLLBACK = 57894
const SAVEPOINT = 57895
const RELEASE = 57896
const WORK = 57897
const BIT = 57898
const TINYINT = 57899
const SMALLINT = 57900
const MEDIUMINT = 57901
const INT = 57902
const INTEGER = 57903
const BIGINT = 57904
const INTNUM = 57905
const REAL = 57906
const DOUBLE = 57907
const FLOAT_TYPE = 57908
const DECIMAL_TYPE = 57909
const NUMERIC = 57910
const TIME = 57911
const TIMESTAMP = 57912
const DATETIME = 57913
const YEAR = 57914
const CHAR = 57915
const VARCHAR = 57916
const BOOL = 57917
const CHARACTER = 57918
const VARBINARY = 57919
const NCHAR = 57920
const TEXT = 57921
const TINYTEXT = 57922
const MEDIUMTEXT = 57923
const LONGTEXT = 57924
const BLOB = 57925
const TINYBLOB = 57926
const MEDIUMBLOB = 57927
const LONGBLOB = 57928
const JSON = 57929
const JSON_SCHEMA_VALID = 57930
const JSON_SCHEMA_VALIDATION_REPORT = 57931
const ENUM = 57932
const GEOMETRY = 57933
const POINT = 57934
const LINESTRING = 57935
const POLYGON = 57936
const GEOMETRYCOLLECTION = 57937
const MULTIPOINT = 57938
const MULTILINESTRING = 57939
const MULTIPOLYGON = 57940
const ASCII = 57941
const UNICODE = 57942
const NULLX = 57943
const AUTO_INCREMENT = 57944
const APPROXNUM = 57945
const SIGNED = 57946
const UNSIGNED = 57947
const ZEROFILL = 57948
const CODE = 57949
const COLLATION = 57950
const COLUMNS = 57951
const DATABASES = 57952
const ENGINES = 57953
const EVENT = 57954
const EXTENDED = 57955
const FIELDS = 57956
const FULL = 57957
const FUNCTION = 57958
const GTID_EXECUTED = 57959
const KEYSPACES = 57960
const OPEN = 57961
const PLUGINS = 57962
const PRIVILEGES = 57963
const PROCESSLIST = 57964
const SCHEMAS = 57965
const TABLES = 57966
const TRIGGERS = 57967
const USER = 57968
const VGTID_EXECUTED = 57969
const VSCHEMA = 57970
const NAMES = 57971
const GLOBAL = 57972
const SESSION = 57973
const ISOLATION = 57974
const LEVEL = 57975
const READ = 57976
const WRITE = 57977
const ONLY = 57978
const REPEATABLE = 57979
const COMMITTED = 57980
const UNCOMMITTED = 57981
const SERIALIZABLE = 57982
const CURRENT_TIMESTAMP = 57983
const DATABASE = 57984
const CURRENT_DATE = 57985
const NOW = 57986
const CURRENT_TIME = 57987
const LOCALTIME = 57988
const LOCALTIMESTAMP = 57989
const CURRENT_USER = 57990
const UTC_DATE = 57991
const UTC_TIME = 57992
const UTC_TIMESTAMP = 57993
const DAY = 57994
const DAY_HOUR = 57995
const DAY_MICROSECOND = 57996
const DAY_MINUTE = 57997
const DAY_SECOND = 57998
const HOUR = 57999
const HOUR_MICROSECOND = 58000
const HOUR_MINUTE = 58001
const HOUR_SECOND = 58002
const MICROSECOND = 58003
const MINUTE = 58004
const MINUTE_MICROSECOND = 58005
const MINUTE_SECOND = 58006
const MONTH = 58007
const QUARTER = 58008
const SECOND = 58009
const SECOND_MICROSECOND = 58010
const YEAR_MONTH = 58011
const WEEK = 58012
const REPLACE = 58013
const CONVERT = 58014
const CAST = 58015
const SUBSTR = 58016
const SUBSTRING = 58017
const GROUP_CONCAT = 58018
const SEPARATOR = 58019
const TIMESTAMPADD = 58020
const TIMESTAMPDIFF = 58021
const WEIGHT_STRING = 58022
const LTRIM = 58023
const RTRIM = 58024
const TRIM = 58025
const JSON_ARRAY = 58026
const JSON_OBJECT = 58027
const JSON_QUOTE = 58028
const JSON_DEPTH = 58029
const JSON_TYPE = 58030
const JSON_LENGTH = 58031
const JSON_VALID = 58032
const JSON_ARRAY_APPEND = 58033
const JSON_ARRAY_INSERT = 58034
const JSON_INSERT = 58035
const JSON_MERGE = 58036
const JSON_MERGE_PATCH = 58037
const JSON_MERGE_PRESERVE = 58038
const JSON_REMOVE = 58039
const JSON_REPLACE = 58040
const JSON_SET = 58041
const JSON_UNQUOTE = 58042
const MATCH = 58043
const AGAINST = 58044
const BOOLEAN = 58045
const LANGUAGE = 58046
const WITH = 58047
const QUERY = 58048
const EXPANSION = 58049
const WITHOUT = 58050
const VALIDATION = 58051
const UNUSED = 58052
const ARRAY = 58053
const BYTE = 58054
const CUME_DIST = 58055
const DESCRIPTION = 58056
const DENSE_RANK = 58057
const EMPTY = 58058
const EXCEPT = 58059
const FIRST_VALUE = 58060
const GROUPING = 58061
const GROUPS = 58062
const JSON_TABLE = 58063
const LAG = 58064
const LAST_VALUE = 58065
const LATERAL = 58066
const LEAD = 58067
const NTH_VALUE = 58068
const NTILE = 58069
const OF = 58070
const OVER = 58071
const PERCENT_RANK = 58072
const RANK = 58073
const RECURSIVE = 58074
const ROW_NUMBER = 58075
const SYSTEM = 58076
const WINDOW = 58077
const ACTIVE = 58078
const ADMIN = 58079
const AUTOEXTEND_SIZE = 58080
const BUCKETS = 58081
const CLONE = 58082
const COLUMN_FORMAT = 58083
const COMPONENT = 58084
const DEFINITION = 58085
const ENFORCED = 58086
const ENGINE_ATTRIBUTE = 58087
const EXCLUDE = 58088
const FOLLOWING = 58089
const GEOMCOLLECTION = 58090
const GET_MASTER_PUBLIC_KEY = 58091
const HISTOGRAM = 58092
const HISTORY = 58093
const INACTIVE = 58094
const INVISIBLE = 58095
const LOCKED = 58096
const MASTER_COMPRESSION_ALGORITHMS = 58097
const MASTER_PUBLIC_KEY_PATH = 58098
const MASTER_TLS_CIPHERSUITES = 58099
const MASTER_ZSTD_COMPRESSION_LEVEL = 58100
const NESTED = 58101
const NETWORK_NAMESPACE = 58102
const NOWAIT = 58103
const NULLS = 58104
const OJ = 58105
const OLD = 58106
const OPTIONAL = 58107
const ORDINALITY = 58108
const ORGANIZATION = 58109
const OTHERS = 58110
const PARTIAL = 58111
const PATH = 58112
const PERSIST = 58113
const PERSIST_ONLY = 58114
const PRECEDING = 58115
const PRIVILEGE_CHECKS_USER = 58116
const PROCESS = 58117
const RANDOM = 58118
const REFERENCE = 58119
const REQUIRE_ROW_FORMAT = 58120
const RESOURCE = 58121
const RESPECT = 58122
const RESTART = 58123
const RETAIN = 58124
const REUSE = 58125
const ROLE = 58126
const SECONDARY = 58127
const SECONDARY_ENGINE = 58128
const SECONDARY_ENGINE_ATTRIBUTE = 58129
const SECONDARY_LOAD = 58130
const SECONDARY_UNLOAD = 58131
const SIMPLE = 58132
const SKIP = 58133
const SRID = 58134
const THREAD_PRIORITY = 58135
const TIES = 58136
const UNBOUNDED = 58137
const VCPU = 58138
const VISIBLE = 58139
const RETURNING = 58140
const FORMAT = 58141
const TREE = 58142
const TRADITIONAL = 58143
const LOCAL = 58144
const LOW_PRIORITY = 58145
const NO_WRITE_TO_BINLOG = 58146
const LOGS = 58147
const ERROR = 58148
const GENERAL = 58149
const HOSTS = 58150
const OPTIMIZER_COSTS = 58151
const USER_RESOURCES = 58152
const SLOW = 58153
const CHANNEL = 58154
const RELAY = 58155
const EXPORT = 58156
const AVG_ROW_LENGTH = 58157
const CONNECTION = 58158
const CHECKSUM = 58159
const DELAY_KEY_WRITE = 58160
const ENCRYPTION = 58161
const INSERT_METHOD = 58162
const MAX_ROWS = 58163
const MIN_ROWS = 58164
const PACK_KEYS = 58165
const PASSWORD = 58166
const FIXED = 58167
const DYNAMIC = 58168
const COMPRESSED = 58169
const REDUNDANT = 58170
const COMPACT = 58171
const ROW_FORMAT = 58172
const STATS_AUTO_RECALC = 58173
const STATS_PERSISTENT = 58174
const STATS_SAMPLE_PAGES = 58175
const STORAGE = 58176
const MEMORY = 58177
const DISK = 58178

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	38, 677,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	1, 140,
	854, 140,
	-2, 148,
	-1, 49,
	1, 465,
	854, 465,
	-2, 148,
	-1, 57,
	35, 593,
	494, 593,
	505, 593,
	540, 605,
	541, 605,
	-2, 595,
	-1, 62,
	496, 618,
	-2, 616,
	-1, 116,
	493, 1091,
	-2, 114,
	-1, 118,
	1, 141,
	854, 141,
	-2, 148,
	-1, 129,
	393, 148,
	432, 148,
	593, 148,
	-2, 474,
	-1, 130,
	394, 371,
	499, 371,
	-2, 458,
	-1, 723,
	477, 1114,
	-2, 1108,
	-1, 724,
	477, 1115,
	-2, 1109,
	-1, 725,
	477, 1116,
	-2, 1110,
	-1, 736,
	348, 1291,
	477, 1291,
	478, 1291,
	479, 1291,
	-2, 270,
	-1, 737,
	348, 1332,
	477, 1332,
	478, 1332,
	479, 1332,
	-2, 269,
	-1, 738,
	348, 1543,
	477, 1543,
	478, 1543,
	479, 1543,
	-2, 271,
	-1, 799,
	322, 686,
	-2, 701,
	-1, 834,
	408, 1521,
	-2, 107,
	-1, 835,
	408, 1340,
	-2, 108,
	-1, 841,
	408, 1416,
	-2, 1085,
	-1, 981,
	504, 41,
	509, 41,
	-2, 382,
	-1, 1039,
	1, 515,
	854, 515,
	-2, 148,
	-1, 1238,
	477, 1543,
	-2, 273,
	-1, 1263,
	322, 687,
	-2, 706,
	-1, 1264,
	322, 688,
	-2, 707,
	-1, 1314,
	1, 421,
	854, 421,
	-2, 148,
	-1, 1394,
	504, 42,
	509, 42,
	-2, 383,
	-1, 1652,
	477, 1120,
	-2, 1112,
	-1, 1728,
	1, 1078,
	349, 1078,
	854, 1078,
	-2, 1438,
	-1, 1733,
	1, 422,
	854, 422,
	-2, 148,
	-1, 1739,
	348, 380,
	351, 380,
	352, 380,
	353, 380,
	-2, 1359,
	-1, 1740,
	348, 381,
	351, 381,
	352, 381,
	353, 381,
	-2, 1386,
	-1, 1742,
	25, 169,
	-2, 171,
	-1, 1963,
	349, 39,
	-2, 742,
	-1, 2013,
	340, 91,
	349, 91,
	-2, 761,
	-1, 2353,
	349, 39,
	-2, 743,
	-1, 2377,
	7, 53,
	18, 53,
	20, 53,
	350, 53,
	-2, 735,
	-1, 2563,
	22, 1419,
	32, 1419,
	433, 1419,
	516, 1419,
	573, 1419,
	574, 1419,
	575, 1419,
	576, 1419,
	577, 1419,
	578, 1419,
	579, 1419,
	581, 1419,
	582, 1419,
	583, 1419,
	584, 1419,
	585, 1419,
	586, 1419,
	587, 1419,
	588, 1419,
	589, 1419,
	590, 1419,
	591, 1419,
	592, 1419,
	594, 1419,
	596, 1419,
	597, 1419,
	598, 1419,
	599, 1419,
	600, 1419,
	601, 1419,
	602, 1419,
	603, 1419,
	604, 1419,
	607, 1419,
	608, 1419,
	609, 1419,
	610, 1419,
	611, 1419,
	612, 1419,
	613, 1419,
	614, 1419,
	615, 1419,
	720, 1419,
	-2, 534,
}

const psqPrivate = 57344

const psqLast = 49278

var psqAct = [...]int{
	723, 2438, 2439, 2512, 2437, 2613, 2416, 1317, 2287, 2587,
	2237, 2588, 1665, 2244, 2158, 1918, 1730, 2477, 2519, 2561,
	716, 37, 733, 2498, 1982, 2250, 726, 3, 1685, 811,
	641, 1978, 2122, 792, 97, 717, 1985, 2156, 727, 1248,
	645, 2157, 1751, 714, 1093, 1278, 715, 638, 2368, 1986,
	1983, 2349, 667, 165, 2105, 2276, 165, 2069, 605, 165,
	1768, 947, 639, 1772, 619, 36, 165, 1050, 1789, 2007,
	1815, 839, 2042, 1719, 165, 637, 1996, 1707, 1371, 145,
	1980, 1265, 1954, 1646, 1708, 812, 1563, 1511, 165, 1622,
	1804, 1400, 1552, 1243, 127, 583, 165, 1788, 1691, 796,
	2047, 800, 2015, 38, 1774, 623, 1306, 1392, 1284, 948,
	1710, 619, 794, 788, 619, 165, 619, 650, 1666, 814,
	1575, 1246, 1175, 96, 1112, 1528, 1399, 954, 951, 1461,
	982, 1786, 955, 1465, 978, 810, 1448, 979, 1752, 1305,
	1290, 806, 1303, 1618, 1091, 1470, 801, 1032, 1035, 146,
	1765, 1078, 1366, 125, 953, 836, 1387, 2085, 2084, 159,
	168, 169, 170, 633, 90, 121, 1829, 2397, 104, 119,
	2066, 120, 1113, 608, 2113, 2114, 826, 2442, 2533, 2442,
	168, 169, 170, 123, 802, 142, 2532, 1517, 1516, 1515,
	1514, 820, 1513, 825, 2545, 1621, 586, 1506, 122, 1113,
	1436, 1950, 608, 1649, 1012, 2337, 128, 1662, 1663, 976,
	106, 107, 972, 110, 1819, 631, 116, 632, 2591, 2076,
	162, 804, 989, 581, 92, 86, 159, 98, 77, 2620,
	2586, 1003, 1780, 1009, 2600, 2079, 1817, 1385, 1521, 79,
	977, 1015, 606, 789, 790, 791, 1014, 2619, 799, 840,
	123, 628, 142, 833, 1182, 1776, 2555, 2609, 1818, 608,
	1864, 971, 99, 1701, 2528, 2598, 2417, 2520, 122, 79,
	79, 2554, 2571, 81, 2121, 2566, 2533, 828, 829, 1122,
	2527, 2321, 1381, 1951, 970, 1016, 2569, 1178, 969, 601,
	968, 2234, 2235, 1725, 1726, 2575, 2576, 1843, 1307, 1755,
	1308, 1842, 599, 2252, 2253, 793, 1122, 795, 1144, 2570,
	2233, 1043, 1044, 122, 79, 963, 2112, 2024, 965, 629,
	2023, 1861, 1724, 2025, 813, 1085, 159, 1087, 2482, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1153, 1152, 1154, 1155,
	1037, 1033, 596, 1046, 1073, 1074, 1068, 787, 1090, 786,
	123, 604, 1018, 1019, 1020, 2513, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1084, 1086, 966, 2035, 1057,
	608, 1069, 2592, 609, 1058, 608, 1664, 1118, 803, 78,
	1111, 964, 1056, 1062, 1055, 1745, 1744, 617, 2289, 2045,
	2046, 9, 1038, 2593, 2312, 8, 7, 2310, 959, 2070,
	1505, 615, 609, 622, 1118, 1805, 1449, 1832, 2251, 1017,
	1507, 1508, 2596, 2089, 1430, 960, 1038, 1077, 1836, 1021,
	2254, 2090, 962, 961, 1071, 1072, 1835, 1252, 2291, 1833,
	2254, 1156, 2617, 1156, 587, 2621, 589, 1398, 1075, 611,
	991, 610, 592, 1066, 591, 594, 602, 595, 1076, 590,
	984, 600, 2240, 1089, 603, 1070, 598, 612, 1431, 609,
	1432, 1082, 952, 608, 952, 1083, 950, 1063, 1834, 985,
	2546, 966, 2290, 1837, 994, 1088, 967, 2577, 952, 1862,
	984, 159, 1753, 1754, 993, 1462, 1787, 1955, 1957, 827,
	140, 1081, 2101, 1036, 1824, 1011, 1272, 2057, 2104, 1458,
	1099, 1031, 997, 1755, 1831, 123, 991, 967, 1379, 1378,
	1377, 1459, 1375, 585, 580, 147, 2117, 148, 1876, 1037,
	1157, 1158, 2097, 2441, 1453, 2441, 2096, 2455, 2384, 2205,
	2020, 1977, 2043, 137, 138, 136, 135, 158, 1942, 990,
	1658, 1814, 1397, 1294, 1034, 984, 987, 988, 1222, 952,
	1048, 1702, 1731, 981, 985, 1156, 1155, 140, 2232, 809,
	1976, 1117, 1114, 1115, 1116, 1121, 1123, 1120, 1079, 1119,
	609, 113, 2522, 2199, 1456, 609, 991, 1576, 1013, 88,
	967, 165, 147, 165, 148, 1309, 165, 1862, 1117, 1114,
	1115, 1116, 1121, 1123, 1120, 2037, 1119, 1816, 1109, 2141,
	137, 138, 136, 135, 158, 990, 619, 1094, 619, 88,
	88, 1840, 2059, 1471, 1779, 1533, 973, 1052, 1001, 1576,
	1041, 1892, 1047, 619, 619, 1049, 2361, 1126, 613, 1534,
	1535, 1532, 2483, 131, 139, 141, 1127, 2107, 130, 114,
	132, 133, 2106, 2400, 1604, 37, 150, 1956, 2399, 2357,
	1809, 1095, 1105, 1413, 88, 1053, 2107, 1059, 1060, 1061,
	607, 2106, 1778, 609, 2526, 1450, 1412, 1451, 2028, 1396,
	1000, 1452, 1868, 1869, 1870, 990, 2594, 1127, 2622, 2574,
	1004, 984, 147, 2398, 148, 1006, 1753, 1754, 2385, 1007,
	1005, 1148, 1149, 1150, 1151, 1153, 1152, 1154, 1155, 2123,
	131, 139, 141, 88, 158, 130, 1777, 132, 133, 1159,
	1160, 1161, 1162, 150, 1783, 2595, 1127, 1531, 2428, 1167,
	2404, 1170, 2391, 2573, 1596, 1585, 1586, 1587, 1588, 1598,
	1589, 1590, 1591, 1603, 1599, 1592, 1593, 1600, 1601, 1602,
	1594, 1595, 1597, 2052, 1150, 1151, 1153, 1152, 1154, 1155,
	2048, 1878, 1096, 1827, 1127, 1127, 1241, 1523, 1525, 1526,
	2241, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1129, 1468,
	1163, 1434, 2318, 1428, 1236, 1272, 2100, 1426, 1692, 1693,
	1524, 1425, 2125, 1424, 2243, 1098, 1580, 165, 1446, 93,
	619, 619, 740, 2283, 2284, 168, 169, 170, 2238, 2392,
	94, 1242, 1992, 168, 169, 170, 165, 2027, 168, 169,
	170, 1272, 1799, 150, 1255, 2252, 2253, 2292, 1259, 1127,
	2198, 2239, 1253, 619, 796, 2582, 1272, 165, 2016, 1256,
	794, 1258, 619, 168, 169, 170, 2227, 147, 619, 148,
	2055, 134, 168, 169, 170, 1862, 1797, 2135, 2134, 2133,
	2127, 1127, 2131, 2245, 2126, 1741, 2124, 1974, 2552, 158,
	1124, 2129, 2521, 1242, 2200, 991, 1298, 168, 169, 170,
	2128, 1795, 1881, 1974, 143, 1993, 836, 144, 1127, 1127,
	1974, 2541, 1257, 1974, 2538, 1979, 96, 2130, 2132, 1907,
	2534, 1272, 1127, 2333, 1272, 1974, 2411, 1247, 1124, 1272,
	1127, 2333, 1065, 101, 1127, 102, 1970, 2615, 134, 1282,
	2616, 102, 2614, 1067, 1912, 1272, 101, 2016, 100, 93,
	2251, 1979, 101, 2183, 100, 1184, 95, 95, 2260, 2261,
	94, 1723, 2254, 2260, 2259, 1981, 1127, 1127, 1993, 1272,
	1879, 143, 2203, 1272, 144, 2198, 1888, 165, 2288, 1912,
	82, 1367, 1897, 87, 1180, 1896, 1181, 1127, 2078, 1801,
	1863, 1376, 1690, 1045, 990, 1276, 1010, 1260, 150, 2440,
	840, 2440, 1080, 1228, 1229, 1230, 1231, 1232, 2395, 2396,
	1042, 619, 1394, 87, 87, 149, 1316, 1660, 151, 152,
	1403, 1813, 153, 154, 1405, 1406, 88, 619, 1509, 155,
	156, 157, 2077, 78, 1411, 1299, 1300, 1414, 1415, 165,
	1417, 1438, 1437, 1439, 1440, 1441, 1108, 1472, 1051, 1254,
	1106, 1107, 1127, 793, 2623, 99, 1457, 1277, 87, 1125,
	619, 1126, 795, 1404, 165, 1301, 1407, 1244, 1455, 975,
	2242, 798, 1391, 1410, 1460, 1879, 1272, 619, 1416, 165,
	1862, 2086, 149, 974, 1127, 151, 152, 2479, 1408, 153,
	154, 2491, 1272, 2470, 165, 2458, 155, 156, 157, 1386,
	1125, 165, 1126, 1447, 1370, 2071, 2067, 2068, 2143, 1279,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 619,
	2402, 1127, 1974, 1973, 1127, 619, 619, 1402, 1418, 1127,
	1272, 1370, 1369, 1476, 1315, 1314, 1372, 1374, 2098, 1125,
	1480, 1126, 165, 2072, 1760, 1401, 1759, 1272, 2480, 1993,
	1467, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1445, 1388,
	1475, 1395, 1389, 1380, 1393, 1127, 1409, 1479, 1368, 1481,
	1482, 1483, 1484, 1127, 115, 1780, 1488, 1125, 1125, 1126,
	1126, 1512, 149, 1673, 2017, 151, 152, 619, 1500, 153,
	154, 1127, 1287, 2019, 2316, 1272, 155, 156, 157, 2606,
	1566, 619, 1556, 1561, 1529, 1463, 1382, 1383, 1384, 2246,
	1560, 1560, 2369, 2370, 1557, 1557, 619, 619, 1536, 122,
	1538, 2249, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1537, 970, 1527, 1473, 1474, 969,
	1477, 968, 1125, 2375, 1126, 2604, 2589, 2531, 1577, 1993,
	1478, 1422, 1423, 1927, 1272, 1272, 1427, 1485, 1486, 1487,
	2247, 2374, 1127, 1498, 1879, 2248, 1883, 1281, 2496, 1502,
	1503, 1879, 2213, 2017, 1125, 1882, 1126, 1272, 1272, 165,
	2517, 2372, 1862, 619, 1272, 2198, 1530, 1146, 1147, 1148,
	1149, 1150, 1151, 1153, 1152, 1154, 1155, 1650, 2270, 2269,
	2268, 1125, 1125, 1126, 1126, 2060, 1127, 165, 1981, 1847,
	619, 1887, 1919, 1127, 1127, 1125, 1675, 1126, 1676, 165,
	1127, 1619, 619, 1125, 1652, 1126, 165, 1125, 165, 1126,
	165, 165, 619, 1272, 1127, 619, 2212, 149, 1654, 1655,
	151, 152, 2579, 2216, 153, 154, 619, 37, 2217, 1127,
	2553, 155, 156, 157, 1703, 1127, 1687, 96, 1695, 1125,
	1125, 1126, 1126, 2214, 1742, 1699, 1127, 1705, 2215, 1650,
	1512, 1280, 1127, 1619, 1679, 96, 836, 1681, 1127, 836,
	1125, 1127, 1126, 161, 2204, 1127, 1651, 2187, 2218, 1127,
	2002, 2003, 1127, 118, 785, 1127, 1652, 2379, 1562, 1706,
	1304, 619, 1756, 1757, 1758, 1568, 1569, 1735, 1790, 1791,
	1792, 88, 1539, 1794, 1796, 1798, 980, 2256, 1717, 2033,
	819, 619, 2053, 1670, 1734, 1287, 619, 1403, 103, 2335,
	1403, 1746, 1403, 1747, 1748, 1749, 1750, 989, 619, 999,
	619, 1419, 1420, 1421, 1823, 1125, 998, 1126, 1683, 1761,
	1762, 1763, 1764, 619, 619, 1738, 1769, 1653, 1698, 2298,
	1656, 1657, 1696, 1572, 1694, 1274, 2331, 2110, 1775, 2324,
	840, 2075, 1722, 840, 1721, 2050, 165, 1125, 1573, 1126,
	1737, 1097, 1803, 1736, 165, 2447, 123, 2446, 165, 165,
	1443, 1442, 165, 1286, 165, 1433, 1680, 2196, 93, 1820,
	1782, 165, 91, 2611, 2266, 95, 1692, 1693, 165, 94,
	2323, 831, 1850, 1501, 1125, 1512, 1126, 1125, 1936, 1126,
	2472, 2415, 1125, 1838, 1126, 1770, 824, 1844, 1845, 1821,
	165, 1849, 1822, 1781, 1808, 619, 1935, 1811, 725, 1812,
	1852, 1785, 1793, 1766, 1767, 1825, 1826, 1855, 992, 995,
	996, 102, 1770, 1807, 1806, 1810, 1002, 1039, 1125, 2255,
	1126, 2006, 101, 1830, 100, 1684, 1125, 2350, 1126, 1858,
	2186, 1853, 1854, 95, 817, 818, 1856, 102, 2185, 100,
	1270, 1266, 1866, 2503, 1125, 1857, 1126, 2502, 101, 101,
	100, 167, 1270, 1266, 167, 2452, 1267, 167, 1529, 2271,
	1800, 816, 621, 2451, 167, 1529, 102, 1934, 1267, 2356,
	1979, 1872, 167, 1874, 1144, 2116, 2148, 101, 1898, 1846,
	2608, 2607, 105, 1671, 1295, 1288, 167, 1873, 108, 109,
	2607, 2608, 2453, 2390, 167, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1153, 1152, 1154, 1155, 1144, 1875, 808, 621,
	39, 1933, 621, 167, 621, 1125, 89, 1126, 1932, 1931,
	1, 2394, 2568, 597, 1860, 1930, 1661, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1153, 1152, 1154, 1155, 1245, 1929,
	1530, 2590, 2564, 2565, 1435, 1429, 2418, 1530, 1871, 1620,
	2476, 165, 1773, 983, 1928, 1877, 129, 1732, 165, 1125,
	1922, 1126, 1733, 2548, 619, 112, 1125, 1125, 1126, 1126,
	619, 1921, 945, 1125, 111, 1126, 1960, 1920, 986, 1064,
	1802, 2034, 1743, 1917, 1560, 1891, 1916, 1125, 1557, 1126,
	1915, 1321, 1964, 1948, 1913, 619, 1319, 1909, 1320, 1318,
	1908, 1323, 1125, 165, 1126, 1322, 1899, 165, 1125, 2336,
	1126, 1504, 616, 2005, 163, 800, 1310, 1454, 1289, 1125,
	1652, 1126, 2026, 2009, 1905, 1125, 1008, 1126, 1987, 588,
	2262, 1125, 1984, 1126, 1125, 1828, 1126, 593, 1125, 1054,
	1126, 1168, 1125, 619, 1126, 1125, 2013, 1126, 1125, 1499,
	1126, 2184, 2022, 1971, 837, 830, 1672, 1962, 2445, 1989,
	801, 1247, 2542, 2031, 1283, 1889, 2450, 2355, 2008, 1890,
	1574, 619, 1949, 1711, 1522, 643, 1958, 165, 642, 640,
	2036, 2038, 1651, 1965, 165, 1700, 1130, 728, 1952, 1975,
	1953, 619, 1972, 1296, 2014, 1997, 1995, 1994, 802, 1848,
	1403, 1403, 1718, 2029, 2371, 2367, 1998, 2001, 2002, 2003,
	1999, 2018, 2000, 2004, 2560, 2083, 2058, 2044, 1713, 2065,
	2021, 1709, 165, 1969, 165, 165, 165, 165, 165, 2082,
	1968, 651, 1775, 644, 636, 2030, 2387, 165, 165, 2278,
	1839, 1939, 1940, 1677, 1678, 1269, 2099, 1268, 1841, 2032,
	2088, 2049, 1110, 165, 1262, 1263, 1264, 1269, 630, 1268,
	958, 2087, 1571, 2091, 2092, 2093, 2094, 2095, 2051, 2081,
	2481, 1865, 2320, 2056, 619, 1261, 1512, 2103, 2061, 2062,
	2063, 1583, 1584, 65, 42, 1611, 1386, 1998, 2001, 2002,
	2003, 1999, 2111, 2000, 2004, 624, 2544, 2369, 2370, 1101,
	32, 2080, 31, 30, 29, 2136, 24, 2073, 2074, 23,
	22, 21, 20, 2140, 794, 26, 19, 18, 17, 2585,
	2610, 117, 52, 48, 2102, 46, 126, 124, 49, 2119,
	1560, 45, 1560, 619, 1557, 1560, 1557, 160, 1040, 1557,
	1560, 2118, 50, 43, 1557, 4, 28, 2161, 2159, 27,
	2159, 16, 15, 2159, 2164, 14, 2120, 13, 2159, 2165,
	12, 165, 11, 10, 6, 619, 2137, 5, 619, 35,
	34, 33, 1104, 25, 2, 0, 0, 2178, 0, 0,
	0, 2192, 0, 0, 165, 165, 165, 165, 165, 1560,
	2188, 0, 2152, 1557, 2108, 0, 165, 2109, 2194, 0,
	0, 165, 0, 0, 165, 0, 165, 2206, 0, 165,
	165, 165, 2178, 0, 0, 2177, 2226, 2171, 2172, 2173,
	2174, 1259, 2009, 1984, 0, 0, 2179, 0, 0, 0,
	2189, 0, 0, 0, 0, 0, 0, 2180, 2181, 2182,
	0, 0, 0, 2190, 2264, 0, 0, 0, 165, 0,
	0, 165, 0, 2197, 0, 0, 0, 0, 619, 0,
	0, 2207, 0, 619, 2210, 0, 2223, 2224, 0, 2208,
	2209, 2219, 2211, 0, 0, 2228, 0, 0, 2229, 167,
	0, 167, 1467, 2230, 167, 96, 0, 2265, 0, 0,
	2267, 2275, 165, 0, 0, 165, 0, 0, 2236, 0,
	0, 2273, 2257, 2258, 621, 2299, 621, 0, 0, 0,
	2280, 2263, 0, 2279, 2166, 2167, 2168, 2169, 2170, 2272,
	0, 621, 621, 2286, 0, 2274, 0, 1144, 2285, 0,
	1775, 2293, 0, 0, 2295, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1153, 1152, 1154, 1155, 0, 2294, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1153, 1152, 1154, 1155, 0,
	2330, 0, 0, 0, 0, 0, 2296, 2297, 0, 0,
	2302, 0, 0, 0, 619, 165, 0, 0, 2308, 0,
	0, 0, 2301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2305, 2306, 619, 2307, 619, 0, 2309, 0,
	2311, 0, 2313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 2354, 0, 0, 0, 165, 0,
	2362, 0, 0, 2351, 2352, 0, 1987, 0, 2366, 1984,
	1987, 2364, 0, 0, 0, 0, 2393, 0, 0, 2358,
	2360, 0, 0, 0, 0, 165, 0, 0, 2380, 2373,
	2382, 2383, 0, 0, 0, 0, 2376, 0, 0, 165,
	165, 165, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2280, 0, 0, 2279, 0, 619,
	619, 619, 619, 2388, 2401, 167, 2389, 2381, 621, 621,
	2410, 0, 2403, 0, 2405, 0, 0, 0, 2407, 2408,
	2409, 2406, 0, 0, 167, 0, 0, 0, 0, 0,
	2413, 2414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 0, 167, 0, 0, 0, 0,
	621, 0, 0, 0, 0, 0, 621, 0, 0, 2424,
	2427, 2423, 0, 0, 1560, 0, 1560, 159, 1557, 0,
	1557, 0, 0, 0, 0, 0, 0, 0, 0, 2433,
	2443, 0, 2159, 0, 2159, 2434, 0, 0, 0, 0,
	0, 123, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2460, 0, 0, 1987, 2454, 0,
	2456, 794, 1560, 0, 0, 0, 1557, 0, 0, 0,
	0, 0, 0, 2462, 2461, 794, 0, 0, 619, 0,
	0, 2464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 2473, 0, 2493,
	2494, 0, 0, 2475, 0, 619, 0, 0, 0, 619,
	619, 0, 0, 0, 0, 167, 619, 2497, 0, 619,
	0, 0, 2478, 0, 0, 1560, 2583, 0, 0, 1557,
	0, 619, 2504, 2505, 0, 0, 1338, 0, 2508, 0,
	619, 165, 0, 0, 0, 0, 2510, 2511, 0, 621,
	0, 2514, 0, 37, 1984, 0, 0, 0, 0, 2516,
	2518, 0, 0, 0, 0, 621, 0, 0, 2523, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	2524, 0, 619, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 2543, 621, 2547,
	165, 619, 167, 0, 0, 2556, 2507, 0, 0, 0,
	0, 0, 2559, 2567, 0, 621, 2572, 167, 0, 0,
	0, 2578, 0, 0, 0, 0, 2478, 2549, 0, 0,
	2584, 0, 167, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 619, 0, 2597, 0, 0, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 621, 2605, 2603,
	2602, 2601, 2599, 621, 621, 0, 2612, 0, 1560, 0,
	0, 0, 1557, 0, 2618, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 0, 2626, 2627, 2494, 2625,
	1144, 0, 1139, 0, 1140, 2624, 0, 0, 0, 0,
	1143, 0, 0, 1560, 0, 0, 0, 1557, 1141, 1142,
	1138, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1152,
	1154, 1155, 0, 0, 0, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 621, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 138, 136, 135, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 0, 621, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	621, 0, 0, 0, 167, 0, 167, 0, 167, 167,
	621, 0, 724, 621, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 621, 0, 0, 0, 0, 0,
	0, 131, 139, 141, 0, 0, 130, 0, 132, 133,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 166, 0,
	0, 166, 0, 0, 0, 0, 620, 1326, 166, 621,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	166, 0, 0, 0, 621, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 0, 0, 621, 0, 621, 0,
	0, 0, 0, 620, 0, 0, 620, 166, 620, 0,
	0, 621, 621, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 0,
	1339, 0, 167, 0, 0, 0, 167, 167, 0, 0,
	167, 0, 167, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 621, 0, 0, 0, 1352, 1355, 1356,
	1357, 1358, 1359, 1360, 0, 1361, 1362, 1363, 1364, 1365,
	1340, 1341, 1342, 1343, 1324, 1325, 1353, 0, 1327, 134,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 0,
	0, 1337, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 79, 40, 41,
	81, 0, 143, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 44, 71, 72, 0, 69, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 677, 676,
	686, 687, 688, 689, 690, 691, 2469, 2465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 621, 149, 0, 0, 151, 152, 621, 0,
	153, 154, 0, 0, 0, 0, 0, 155, 156, 157,
	0, 0, 0, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 0, 0, 621,
	0, 0, 0, 0, 0, 838, 0, 0, 949, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 167, 167, 167, 167, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 681, 682, 0, 0,
	0, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 166, 0, 166, 58, 0, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 718,
	620, 668, 722, 670, 719, 720, 0, 666, 669, 721,
	0, 0, 0, 0, 0, 620, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 0, 0, 671, 672, 674, 678,
	679, 2466, 2467, 2468, 685, 693, 695, 696, 694, 697,
	698, 699, 702, 703, 704, 705, 700, 701, 706, 167,
	0, 0, 0, 621, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 167, 167, 167, 167, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 167,
	0, 0, 167, 0, 167, 0, 0, 167, 167, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	51, 54, 53, 56, 0, 0, 68, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 167,
	0, 0, 57, 84, 83, 0, 621, 66, 67, 55,
	1338, 621, 0, 0, 0, 74, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 620, 620, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 167, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 59, 60, 0, 61, 62, 63,
	64, 0, 0, 0, 0, 620, 0, 0, 0, 166,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 0, 621, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 167, 167,
	621, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 621, 621, 621,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	838, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 1100, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 620, 0, 0, 0, 0, 0, 620, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 0, 621, 621, 0,
	0, 0, 0, 0, 621, 0, 0, 621, 0, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	0, 1326, 0, 620, 0, 0, 0, 0, 621, 167,
	0, 0, 0, 0, 1250, 1251, 0, 0, 620, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1292, 0, 0,
	621, 621, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 1311, 621, 0, 0, 0, 0, 167, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 1339, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 621, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 620, 0, 0, 0, 166, 0,
	166, 0, 166, 166, 620, 0, 0, 620, 0, 0,
	0, 1352, 1355, 1356, 1357, 1358, 1359, 1360, 620, 1361,
	1362, 1363, 1364, 1365, 1340, 1341, 1342, 1343, 1324, 1325,
	1353, 0, 1327, 0, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 0, 0, 1337, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1239, 0, 0,
	1239, 949, 0, 620, 0, 0, 0, 1239, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 620, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 1354, 0,
	166, 166, 0, 0, 166, 0, 166, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 838, 0, 0, 0, 0, 0, 838,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1553, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1567, 0, 0, 708, 0,
	0, 0, 1239, 0, 0, 0, 0, 0, 0, 0,
	1581, 1582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 164, 0, 0, 584, 0, 0, 614, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 0, 0, 1674, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 166, 584, 0, 0, 0, 0, 0,
	166, 0, 0, 823, 1686, 823, 620, 0, 0, 0,
	0, 0, 620, 584, 0, 0, 1292, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	949, 0, 0, 0, 0, 166, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 949, 0, 0, 0, 166,
	956, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 949, 620, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 1553, 1553, 0,
	729, 1559, 739, 740, 2283, 2284, 730, 732, 0, 0,
	731, 0, 0, 0, 166, 0, 166, 166, 166, 166,
	166, 0, 0, 734, 741, 742, 0, 0, 0, 166,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 2281, 2282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1859,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 620, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 166, 166, 166,
	166, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 166, 0, 0, 166, 0, 166, 0,
	0, 166, 166, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 166, 0, 0, 0, 0, 1686, 0,
	620, 0, 0, 0, 1966, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1239, 0, 0, 1991,
	0, 0, 0, 0, 166, 0, 0, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 722, 0, 719,
	720, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2039, 0, 584,
	0, 584, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 166, 0, 0,
	0, 0, 0, 0, 0, 1686, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 166, 166, 620, 0, 0, 0, 1553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 620, 620, 620, 0, 0, 0, 0, 0,
	0, 0, 1240, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 0, 1239, 0, 0, 1239, 0, 0,
	0, 0, 1239, 0, 0, 0, 0, 1273, 1275, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2191,
	0, 0, 838, 0, 807, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	0, 620, 620, 0, 0, 0, 0, 0, 620, 0,
	0, 620, 949, 0, 0, 1239, 0, 1686, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 166, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1240, 0, 0, 1240, 0, 0, 0, 0, 0,
	0, 1240, 0, 0, 0, 0, 0, 584, 2191, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 1239, 0, 0, 0, 0, 2363, 0,
	2365, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	584, 584, 584, 584, 584, 584, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 2419, 2420, 2421, 2422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1578, 0, 0, 0, 1579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1239, 0, 1239, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 0, 0,
	823, 823, 0, 0, 0, 0, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 1466, 823, 823, 823, 823, 823, 0, 0, 0,
	1682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 1668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 2500,
	0, 0, 0, 2500, 2500, 807, 0, 0, 1239, 0,
	2509, 0, 0, 1686, 0, 0, 0, 584, 0, 0,
	0, 0, 0, 1466, 584, 1686, 584, 0, 584, 1720,
	0, 0, 0, 0, 1686, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2557,
	0, 0, 0, 0, 0, 2562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 0, 584, 584, 0, 0,
	584, 0, 1851, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1880, 0,
	0, 0, 1884, 0, 1885, 1886, 0, 0, 0, 0,
	0, 0, 0, 1894, 0, 0, 1895, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1900, 1901, 1902, 1903, 1904, 0, 1906, 0,
	823, 0, 0, 0, 1910, 0, 1911, 0, 0, 0,
	1914, 0, 0, 0, 0, 0, 0, 0, 1923, 1924,
	1925, 1926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1937, 1938, 0, 0, 0, 0, 634, 0, 1943,
	1944, 1945, 1946, 1947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 88, 0, 0, 0, 823, 823, 729, 1559,
	739, 740, 2283, 2284, 730, 732, 0, 1466, 731, 584,
	1990, 0, 0, 0, 0, 0, 1668, 0, 0, 0,
	0, 734, 741, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 0, 584, 2281, 2282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 0, 0,
	0, 0, 2064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 584, 584, 584, 584, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 2147, 0, 0, 0, 0,
	0, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2160, 0, 0, 0, 823, 0,
	0, 735, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2175, 2176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1240, 0, 1240, 0,
	0, 1240, 0, 0, 0, 0, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 2201, 2202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 0, 80, 2221, 2222, 0, 0, 0, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1240, 584, 584, 584, 584, 584, 957, 0, 0,
	0, 0, 0, 0, 2220, 0, 0, 0, 0, 584,
	0, 0, 1668, 0, 584, 0, 0, 584, 2231, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1240,
	0, 2300, 0, 0, 0, 0, 0, 0, 2304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2314, 2315, 2317, 2319, 0, 0, 0, 0,
	584, 0, 2325, 584, 0, 2327, 2328, 2329, 0, 0,
	0, 0, 2332, 0, 0, 0, 0, 0, 2334, 0,
	0, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346,
	2347, 0, 0, 2348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1128, 0, 0, 0, 0, 0, 2377,
	2378, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1240, 0, 0,
	0, 1176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 584, 584,
	0, 0, 0, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 2431, 0, 0, 0, 2432, 0, 0, 0,
	0, 0, 2436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1240, 0, 1240, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2484, 2485, 2486, 0, 2487, 2488, 0, 0, 2489,
	0, 2490, 0, 2492, 2495, 0, 0, 0, 0, 0,
	2499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2530,
	0, 0, 1240, 0, 2535, 0, 0, 0, 0, 0,
	2536, 2537, 0, 0, 0, 0, 0, 0, 2539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 1092,
	0, 0, 0, 0, 0, 1373, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 2580, 0, 0, 0, 2581, 0, 0, 0,
	0, 0, 0, 1961, 0, 0, 1559, 739, 0, 0,
	0, 0, 1558, 0, 797, 1164, 1165, 1166, 1668, 1169,
	0, 1171, 1172, 1173, 1174, 0, 1177, 1179, 1179, 0,
	1179, 1183, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1469, 1223, 1224, 1225, 1226, 1227, 0, 0, 0, 0,
	1183, 1183, 1183, 1183, 1183, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 1519, 1520, 0, 0, 0, 0, 0,
	1249, 0, 0, 0, 0, 797, 0, 0, 0, 797,
	0, 0, 0, 0, 0, 797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1564, 1565, 0, 0, 0, 0, 0,
	0, 1570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1605, 1606, 1607, 1608,
	1609, 1610, 1612, 1616, 1617, 634, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1559,
	739, 0, 0, 0, 0, 1558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1688,
	1689, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1729, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1092, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1704, 0,
	0, 1712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1867, 0, 2115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2138, 2139, 0, 0, 0,
	2142, 0, 0, 0, 2144, 2145, 2146, 0, 0, 0,
	0, 0, 0, 0, 0, 2149, 2150, 2151, 0, 0,
	1623, 2153, 0, 2154, 2155, 0, 0, 0, 2162, 2163,
	0, 0, 0, 0, 0, 0, 1623, 1623, 1623, 1623,
	1623, 634, 634, 634, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2195, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 0, 1941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 797, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1988, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 2010, 0, 2011, 2012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2322, 0, 0, 0, 0, 2326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2359, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1712, 0, 2425, 0, 2426, 0, 0, 0,
	0, 2429, 2430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2435, 0, 1712, 1712, 1712, 1712, 1712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2010, 797, 0, 0, 0, 1712, 0, 0,
	1712, 0, 0, 0, 0, 0, 0, 2457, 0, 0,
	2459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2506,
	634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1988, 0, 80, 0, 1988, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2386, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2444, 0, 2448, 2449, 0, 0, 0, 0, 0,
	0, 0, 0, 1988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 315, 526,
	244, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 1647, 0, 652, 0, 0, 0, 0, 657, 470,
	347, 0, 335, 0, 200, 0, 1648, 403, 287, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1187, 1194, 1197,
	1198, 1206, 0, 0, 80, 0, 171, 172, 173, 174,
	179, 180, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 197, 199, 201, 204, 205, 208, 209, 210, 211,
	212, 215, 219, 220, 221, 223, 224, 225, 226, 228,
	0, 0, 0, 0, 0, 2540, 0, 0, 294, 229,
	230, 231, 232, 233, 234, 238, 240, 241, 242, 245,
	246, 247, 248, 249, 250, 253, 254, 257, 260, 261,
	267, 272, 273, 274, 276, 277, 278, 284, 286, 289,
	290, 293, 295, 297, 299, 300, 301, 303, 304, 305,
	306, 309, 310, 311, 312, 313, 314, 316, 324, 325,
	327, 328, 329, 330, 333, 336, 338, 340, 341, 343,
	344, 346, 349, 350, 352, 353, 356, 357, 359, 362,
	365, 368, 370, 371, 372, 373, 376, 377, 378, 379,
	381, 384, 387, 389, 390, 392, 395, 397, 398, 399,
	400, 401, 402, 406, 409, 410, 411, 412, 414, 416,
	417, 418, 420, 422, 423, 424, 425, 426, 427, 430,
	431, 433, 434, 435, 436, 437, 442, 443, 446, 447,
	448, 451, 452, 453, 454, 455, 456, 458, 461, 462,
	466, 468, 471, 472, 478, 479, 481, 482, 484, 485,
	486, 487, 490, 492, 493, 495, 496, 500, 501, 502,
	509, 510, 514, 515, 516, 517, 520, 521, 522, 523,
	524, 525, 527, 528, 529, 530, 534, 535, 537, 538,
	539, 540, 543, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 664, 0, 369,
	531, 473, 360, 0, 0, 0, 0, 0, 659, 660,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 227,
	0, 375, 0, 268, 0, 88, 0, 0, 168, 169,
	170, 729, 738, 739, 740, 737, 736, 730, 732, 0,
	0, 731, 218, 675, 677, 676, 686, 687, 688, 689,
	690, 691, 692, 673, 734, 741, 742, 386, 252, 302,
	259, 251, 499, 0, 489, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 635, 649, 193,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 646,
	647, 821, 0, 0, 0, 712, 0, 648, 0, 0,
	656, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 658, 0, 0, 0, 0, 181, 256,
	439, 0, 0, 176, 0, 0, 0, 237, 0, 711,
	0, 307, 536, 0, 0, 709, 0, 0, 0, 0,
	0, 0, 308, 175, 202, 0, 0, 374, 0, 445,
	474, 0, 271, 0, 264, 0, 0, 513, 213, 0,
	0, 0, 0, 415, 269, 354, 405, 0, 0, 0,
	421, 511, 0, 0, 0, 363, 0, 0, 0, 0,
	203, 243, 391, 480, 0, 465, 355, 503, 0, 320,
	464, 279, 178, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 483, 508, 216, 450, 457, 438, 542,
	195, 0, 477, 0, 317, 318, 194, 0, 429, 255,
	0, 0, 383, 506, 507, 0, 557, 206, 533, 0,
	207, 0, 366, 504, 0, 0, 0, 0, 0, 0,
	0, 322, 681, 682, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 265, 0, 0, 0,
	285, 0, 0, 0, 0, 419, 0, 460, 498, 0,
	0, 0, 0, 364, 288, 469, 321, 342, 428, 544,
	0, 440, 217, 519, 467, 718, 710, 668, 722, 670,
	719, 720, 665, 666, 669, 721, 236, 0, 0, 0,
	0, 296, 0, 0, 0, 0, 358, 0, 0, 361,
	0, 463, 0, 0, 0, 713, 655, 654, 0, 661,
	662, 0, 671, 672, 674, 678, 679, 680, 683, 684,
	685, 693, 695, 696, 694, 697, 698, 699, 702, 703,
	704, 705, 700, 701, 706, 653, 0, 196, 337, 0,
	0, 0, 541, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 291, 292, 331, 0, 0, 0, 0,
	0, 0, 385, 396, 0, 0, 432, 0, 497, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 281, 0, 0, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 367, 0, 380, 382, 0, 388, 0,
	393, 0, 394, 404, 408, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 0, 449, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 505, 518,
	0, 0, 0, 283, 0, 0, 345, 0, 0, 0,
	263, 315, 526, 244, 0, 0, 0, 0, 0, 198,
	222, 0, 0, 0, 0, 0, 652, 0, 407, 0,
	0, 657, 470, 347, 0, 335, 0, 200, 488, 0,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	664, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 659, 660, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 227, 0, 375, 0, 268, 0, 88, 0,
	0, 168, 169, 170, 729, 738, 739, 740, 737, 736,
	730, 732, 0, 0, 731, 218, 675, 677, 676, 686,
	687, 688, 689, 690, 691, 692, 673, 734, 741, 742,
	386, 252, 302, 259, 251, 499, 0, 489, 1613, 1614,
	1615, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	635, 649, 193, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 646, 647, 0, 0, 0, 0, 712, 0,
	648, 0, 0, 656, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 658, 0, 0, 0,
	0, 181, 256, 439, 0, 0, 176, 0, 0, 0,
	237, 0, 711, 0, 307, 536, 0, 0, 709, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 681, 682, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 718, 710,
	668, 722, 670, 719, 720, 665, 666, 669, 721, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 713, 655,
	654, 0, 661, 662, 0, 671, 672, 674, 678, 679,
	680, 683, 684, 685, 693, 695, 696, 694, 697, 698,
	699, 702, 703, 704, 705, 700, 701, 706, 653, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 0, 0, 0, 283, 0, 0, 345,
	0, 79, 0, 263, 315, 526, 244, 0, 0, 0,
	0, 0, 198, 222, 0, 0, 0, 0, 0, 652,
	0, 407, 0, 0, 657, 470, 347, 0, 335, 0,
	200, 488, 0, 403, 287, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 173, 174, 179, 180, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 197, 199, 201,
	204, 205, 208, 209, 210, 211, 212, 215, 219, 220,
	221, 223, 224, 225, 226, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 229, 230, 231, 232, 233,
	234, 238, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 253, 254, 257, 260, 261, 267, 272, 273, 274,
	276, 277, 278, 284, 286, 289, 290, 293, 295, 297,
	299, 300, 301, 303, 304, 305, 306, 309, 310, 311,
	312, 313, 314, 316, 324, 325, 327, 328, 329, 330,
	333, 336, 338, 340, 341, 343, 344, 346, 349, 350,
	352, 353, 356, 357, 359, 362, 365, 368, 370, 371,
	372, 373, 376, 377, 378, 379, 381, 384, 387, 389,
	390, 392, 395, 397, 398, 399, 400, 401, 402, 406,
	409, 410, 411, 412, 414, 416, 417, 418, 420, 422,
	423, 424, 425, 426, 427, 430, 431, 433, 434, 435,
	436, 437, 442, 443, 446, 447, 448, 451, 452, 453,
	454, 455, 456, 458, 461, 462, 466, 468, 471, 472,
	478, 479, 481, 482, 484, 485, 486, 487, 490, 492,
	493, 495, 496, 500, 501, 502, 509, 510, 514, 515,
	516, 517, 520, 521, 522, 523, 524, 525, 527, 528,
	529, 530, 534, 535, 537, 538, 539, 540, 543, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 664, 0, 369, 531, 473, 360, 0,
	0, 0, 0, 0, 659, 660, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 227, 0, 375, 0, 268,
	0, 88, 0, 0, 168, 169, 170, 729, 738, 739,
	740, 737, 736, 730, 732, 0, 0, 731, 218, 675,
	677, 676, 686, 687, 688, 689, 690, 691, 692, 673,
	734, 741, 742, 386, 252, 302, 259, 251, 499, 0,
	489, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 635, 649, 193, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 647, 0, 0, 0,
	0, 712, 0, 648, 0, 0, 656, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 658,
	0, 0, 0, 0, 181, 256, 439, 0, 0, 176,
	0, 0, 0, 237, 0, 711, 0, 307, 536, 0,
	0, 709, 0, 0, 0, 0, 0, 0, 308, 175,
	202, 0, 0, 374, 0, 445, 474, 0, 271, 0,
	264, 0, 0, 513, 213, 0, 0, 0, 0, 415,
	269, 354, 405, 0, 0, 0, 421, 511, 0, 0,
	0, 363, 0, 0, 0, 0, 203, 243, 391, 480,
	0, 465, 355, 503, 0, 320, 464, 279, 178, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 483,
	508, 216, 450, 457, 438, 542, 195, 0, 477, 0,
	317, 318, 194, 0, 429, 255, 0, 0, 383, 506,
	507, 0, 557, 206, 533, 0, 207, 0, 366, 504,
	0, 0, 0, 0, 0, 0, 0, 322, 681, 682,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 265, 0, 0, 0, 285, 0, 0, 0,
	0, 419, 0, 460, 498, 0, 0, 0, 0, 364,
	288, 469, 321, 342, 428, 544, 0, 440, 217, 519,
	467, 718, 710, 668, 722, 670, 719, 720, 665, 666,
	669, 721, 236, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 358, 0, 0, 361, 0, 463, 0, 0,
	0, 713, 655, 654, 0, 661, 662, 0, 671, 672,
	674, 678, 679, 680, 683, 684, 685, 693, 695, 696,
	694, 697, 698, 699, 702, 703, 704, 705, 700, 701,
	706, 653, 0, 196, 337, 87, 0, 0, 541, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 291,
	292, 331, 0, 0, 0, 0, 0, 0, 385, 396,
	0, 0, 432, 0, 497, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 281, 0, 0,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 367,
	0, 380, 382, 0, 388, 0, 393, 0, 394, 404,
	408, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	0, 444, 0, 0, 449, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 505, 518, 0, 0, 0, 283,
	0, 0, 345, 0, 0, 0, 263, 315, 526, 244,
	0, 0, 0, 0, 0, 198, 222, 0, 0, 0,
	0, 0, 652, 0, 407, 0, 0, 657, 470, 347,
	0, 335, 0, 200, 488, 0, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 664, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 659, 660, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 88, 0, 1272, 168, 169, 170,
	729, 738, 739, 740, 737, 736, 730, 732, 0, 0,
	731, 218, 675, 677, 676, 686, 687, 688, 689, 690,
	691, 692, 673, 734, 741, 742, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 635, 649, 193, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 646, 647,
	0, 0, 0, 0, 712, 0, 648, 0, 0, 656,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 658, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 711, 0,
	307, 536, 0, 0, 709, 0, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 681, 682, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 718, 710, 668, 722, 670, 719,
	720, 665, 666, 669, 721, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 713, 655, 654, 0, 661, 662,
	0, 671, 672, 674, 678, 679, 680, 683, 684, 685,
	693, 695, 696, 694, 697, 698, 699, 702, 703, 704,
	705, 700, 701, 706, 653, 0, 196, 337, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 331, 0, 0, 0, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 0,
	0, 0, 283, 0, 0, 345, 0, 0, 0, 263,
	315, 526, 244, 0, 0, 0, 0, 0, 198, 222,
	0, 0, 0, 0, 0, 652, 0, 407, 0, 0,
	657, 470, 347, 0, 335, 0, 200, 488, 0, 403,
	287, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	173, 174, 179, 180, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 197, 199, 201, 204, 205, 208, 209,
	210, 211, 212, 215, 219, 220, 221, 223, 224, 225,
	226, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 229, 230, 231, 232, 233, 234, 238, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 253, 254, 257,
	260, 261, 267, 272, 273, 274, 276, 277, 278, 284,
	286, 289, 290, 293, 295, 297, 299, 300, 301, 303,
	304, 305, 306, 309, 310, 311, 312, 313, 314, 316,
	324, 325, 327, 328, 329, 330, 333, 336, 338, 340,
	341, 343, 344, 346, 349, 350, 352, 353, 356, 357,
	359, 362, 365, 368, 370, 371, 372, 373, 376, 377,
	378, 379, 381, 384, 387, 389, 390, 392, 395, 397,
	398, 399, 400, 401, 402, 406, 409, 410, 411, 412,
	414, 416, 417, 418, 420, 422, 423, 424, 425, 426,
	427, 430, 431, 433, 434, 435, 436, 437, 442, 443,
	446, 447, 448, 451, 452, 453, 454, 455, 456, 458,
	461, 462, 466, 468, 471, 472, 478, 479, 481, 482,
	484, 485, 486, 487, 490, 492, 493, 495, 496, 500,
	501, 502, 509, 510, 514, 515, 516, 517, 520, 521,
	522, 523, 524, 525, 527, 528, 529, 530, 534, 535,
	537, 538, 539, 540, 543, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 664,
	0, 369, 531, 473, 360, 0, 0, 0, 0, 0,
	659, 660, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 227, 0, 375, 0, 268, 0, 88, 0, 0,
	168, 169, 170, 729, 738, 739, 740, 737, 736, 730,
	732, 0, 0, 731, 218, 675, 677, 676, 686, 687,
	688, 689, 690, 691, 692, 673, 734, 741, 742, 386,
	252, 302, 259, 251, 499, 0, 489, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 635,
	649, 193, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 647, 821, 0, 0, 0, 712, 0, 648,
	0, 0, 656, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 658, 0, 0, 0, 0,
	181, 256, 439, 0, 0, 176, 0, 0, 0, 237,
	0, 711, 0, 307, 536, 0, 0, 709, 0, 0,
	0, 0, 0, 0, 308, 175, 202, 0, 0, 374,
	0, 445, 474, 0, 271, 0, 264, 0, 0, 513,
	213, 0, 0, 0, 0, 415, 269, 354, 405, 0,
	0, 0, 421, 511, 0, 0, 0, 363, 0, 0,
	0, 0, 203, 243, 391, 480, 0, 465, 355, 503,
	0, 320, 464, 279, 178, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 483, 508, 216, 450, 457,
	438, 542, 195, 0, 477, 0, 317, 318, 194, 0,
	429, 255, 0, 0, 383, 506, 507, 0, 557, 206,
	533, 0, 207, 0, 366, 504, 0, 0, 0, 0,
	0, 0, 0, 322, 681, 682, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 265, 0,
	0, 0, 285, 0, 0, 0, 0, 419, 0, 460,
	498, 0, 0, 0, 0, 364, 288, 469, 321, 342,
	428, 544, 0, 440, 217, 519, 467, 718, 710, 668,
	722, 670, 719, 720, 665, 666, 669, 721, 236, 0,
	0, 0, 0, 296, 0, 0, 0, 0, 358, 0,
	0, 361, 0, 463, 0, 0, 0, 713, 655, 654,
	0, 661, 662, 0, 671, 672, 674, 678, 679, 680,
	683, 684, 685, 693, 695, 696, 694, 697, 698, 699,
	702, 703, 704, 705, 700, 701, 706, 653, 0, 196,
	337, 0, 0, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 291, 292, 331, 0, 0,
	0, 0, 0, 0, 385, 396, 0, 0, 432, 0,
	497, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 281, 0, 0, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 367, 0, 380, 382, 0,
	388, 0, 393, 0, 394, 404, 408, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 444, 0, 0,
	449, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	505, 518, 0, 0, 0, 283, 0, 0, 345, 0,
	0, 0, 263, 315, 526, 244, 0, 0, 0, 0,
	0, 198, 222, 0, 0, 0, 0, 0, 652, 0,
	407, 0, 0, 657, 470, 347, 0, 335, 0, 200,
	488, 0, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 664, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 659, 660, 0, 0, 0, 0, 0,
	282, 1727, 0, 0, 227, 0, 375, 0, 268, 0,
	88, 0, 0, 168, 169, 170, 729, 738, 739, 740,
	737, 736, 730, 732, 0, 0, 731, 218, 675, 677,
	676, 686, 687, 688, 689, 690, 691, 692, 673, 734,
	741, 742, 1728, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 635, 649, 193, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 646, 647, 0, 0, 0, 0,
	712, 0, 648, 0, 0, 656, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 658, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 711, 0, 307, 536, 0, 0,
	709, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 681, 682, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	718, 710, 668, 722, 670, 719, 720, 665, 666, 669,
	721, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	713, 655, 654, 0, 661, 662, 0, 671, 672, 674,
	678, 679, 680, 683, 684, 685, 693, 695, 696, 694,
	697, 698, 699, 702, 703, 704, 705, 700, 701, 706,
	653, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 0, 0, 0, 283, 0,
	0, 345, 0, 0, 0, 263, 315, 526, 244, 0,
	0, 0, 0, 0, 198, 222, 0, 0, 0, 0,
	0, 652, 0, 407, 0, 0, 657, 470, 347, 0,
	335, 0, 200, 488, 0, 403, 287, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 173, 174, 179, 180,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 197,
	199, 201, 204, 205, 208, 209, 210, 211, 212, 215,
	219, 220, 221, 223, 224, 225, 226, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 229, 230, 231,
	232, 233, 234, 238, 240, 241, 242, 245, 246, 247,
	248, 249, 250, 253, 254, 257, 260, 261, 267, 272,
	273, 274, 276, 277, 278, 284, 286, 289, 290, 293,
	295, 297, 299, 300, 301, 303, 304, 305, 306, 309,
	310, 311, 312, 313, 314, 316, 324, 325, 327, 328,
	329, 330, 333, 336, 338, 340, 341, 343, 344, 346,
	349, 350, 352, 353, 356, 357, 359, 362, 365, 368,
	370, 371, 372, 373, 376, 377, 378, 379, 381, 384,
	387, 389, 390, 392, 395, 397, 398, 399, 400, 401,
	402, 406, 409, 410, 411, 412, 414, 416, 417, 418,
	420, 422, 423, 424, 425, 426, 427, 430, 431, 433,
	434, 435, 436, 437, 442, 443, 446, 447, 448, 451,
	452, 453, 454, 455, 456, 458, 461, 462, 466, 468,
	471, 472, 478, 479, 481, 482, 484, 485, 486, 487,
	490, 492, 493, 495, 496, 500, 501, 502, 509, 510,
	514, 515, 516, 517, 520, 521, 522, 523, 524, 525,
	527, 528, 529, 530, 534, 535, 537, 538, 539, 540,
	543, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 664, 0, 369, 531, 473,
	360, 0, 0, 0, 0, 0, 659, 660, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 227, 0, 375,
	0, 268, 0, 88, 0, 0, 168, 169, 170, 729,
	738, 739, 740, 737, 736, 730, 732, 0, 0, 731,
	218, 675, 677, 676, 686, 687, 688, 689, 690, 691,
	692, 673, 734, 741, 742, 386, 252, 302, 259, 251,
	499, 0, 489, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 635, 649, 193, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 646, 647, 0,
	0, 0, 0, 712, 0, 648, 0, 0, 656, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 658, 0, 0, 0, 0, 181, 256, 439, 0,
	0, 176, 0, 0, 0, 237, 0, 711, 0, 307,
	536, 0, 0, 709, 0, 0, 0, 0, 0, 0,
	308, 175, 202, 0, 0, 374, 0, 445, 474, 0,
	271, 0, 264, 0, 0, 513, 213, 0, 0, 0,
	0, 415, 269, 354, 405, 0, 0, 0, 421, 511,
	0, 0, 0, 363, 0, 0, 0, 0, 203, 243,
	391, 480, 0, 465, 355, 503, 0, 320, 464, 279,
	178, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 483, 508, 216, 450, 457, 438, 542, 195, 0,
	477, 0, 317, 318, 194, 0, 429, 255, 0, 0,
	383, 506, 507, 0, 557, 206, 533, 0, 207, 0,
	366, 504, 0, 0, 0, 0, 0, 0, 0, 322,
	681, 682, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 265, 0, 0, 0, 285, 0,
	0, 0, 0, 419, 0, 460, 498, 0, 0, 0,
	0, 364, 288, 469, 321, 342, 428, 544, 0, 440,
	217, 519, 467, 718, 710, 668, 722, 670, 719, 720,
	665, 666, 669, 721, 236, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 358, 0, 0, 361, 0, 463,
	0, 0, 0, 713, 655, 654, 0, 661, 662, 0,
	671, 672, 674, 678, 679, 680, 683, 684, 685, 693,
	695, 696, 694, 697, 698, 699, 702, 703, 704, 705,
	700, 701, 706, 653, 0, 196, 337, 0, 0, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 291, 292, 331, 0, 0, 0, 0, 0, 0,
	385, 396, 0, 0, 432, 0, 497, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 281,
	0, 0, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 367, 0, 380, 382, 0, 388, 0, 393, 0,
	394, 404, 408, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 444, 0, 0, 449, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 505, 518, 0, 0,
	0, 283, 0, 0, 345, 0, 0, 0, 263, 315,
	526, 244, 0, 0, 0, 0, 0, 198, 222, 0,
	0, 0, 0, 0, 652, 0, 407, 0, 0, 657,
	470, 347, 0, 335, 0, 200, 488, 0, 403, 287,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 173,
	174, 179, 180, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 197, 199, 201, 204, 205, 208, 209, 210,
	211, 212, 215, 219, 220, 221, 223, 224, 225, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	229, 230, 231, 232, 233, 234, 238, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 253, 254, 257, 260,
	261, 267, 272, 273, 274, 276, 277, 278, 284, 286,
	289, 290, 293, 295, 297, 299, 300, 301, 303, 304,
	305, 306, 309, 310, 311, 312, 313, 314, 316, 324,
	325, 327, 328, 329, 330, 333, 336, 338, 340, 341,
	343, 344, 346, 349, 350, 352, 353, 356, 357, 359,
	362, 365, 368, 370, 371, 372, 373, 376, 377, 378,
	379, 381, 384, 387, 389, 390, 392, 395, 397, 398,
	399, 400, 401, 402, 406, 409, 410, 411, 412, 414,
	416, 417, 418, 420, 422, 423, 424, 425, 426, 427,
	430, 431, 433, 434, 435, 436, 437, 442, 443, 446,
	447, 448, 451, 452, 453, 454, 455, 456, 458, 461,
	462, 466, 468, 471, 472, 478, 479, 481, 482, 484,
	485, 486, 487, 490, 492, 493, 495, 496, 500, 501,
	502, 509, 510, 514, 515, 516, 517, 520, 521, 522,
	523, 524, 525, 527, 528, 529, 530, 534, 535, 537,
	538, 539, 540, 543, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 664, 0,
	369, 531, 473, 360, 0, 0, 0, 0, 0, 659,
	660, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	227, 0, 375, 0, 268, 0, 88, 0, 0, 168,
	169, 170, 729, 738, 739, 740, 737, 736, 730, 732,
	0, 0, 731, 218, 675, 677, 676, 686, 687, 688,
	689, 690, 691, 692, 673, 734, 741, 742, 386, 252,
	302, 259, 251, 499, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 649,
	193, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 647, 0, 0, 0, 0, 712, 0, 648, 0,
	0, 656, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 658, 0, 0, 0, 0, 181,
	256, 439, 0, 0, 176, 0, 0, 0, 237, 0,
	711, 0, 307, 536, 0, 0, 709, 0, 0, 0,
	0, 0, 0, 308, 175, 202, 0, 0, 374, 0,
	445, 474, 0, 271, 0, 264, 0, 0, 513, 213,
	0, 0, 0, 0, 415, 269, 354, 405, 0, 0,
	0, 421, 511, 0, 0, 0, 363, 0, 0, 0,
	0, 203, 243, 391, 480, 0, 465, 355, 503, 0,
	320, 464, 279, 178, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 483, 508, 216, 450, 457, 438,
	542, 195, 0, 477, 0, 317, 318, 194, 0, 429,
	255, 0, 0, 383, 506, 507, 0, 557, 206, 533,
	0, 207, 0, 366, 504, 0, 0, 0, 0, 0,
	0, 0, 322, 681, 682, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 265, 0, 0,
	0, 285, 0, 0, 0, 0, 419, 0, 460, 498,
	0, 0, 0, 0, 364, 288, 469, 321, 342, 428,
	544, 0, 440, 217, 519, 467, 718, 710, 668, 722,
	670, 719, 720, 665, 666, 669, 721, 236, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 358, 0, 0,
	361, 0, 463, 0, 0, 0, 713, 655, 654, 0,
	661, 662, 0, 671, 672, 674, 678, 679, 680, 683,
	684, 685, 693, 695, 696, 694, 697, 698, 699, 702,
	703, 704, 705, 700, 701, 706, 653, 0, 196, 337,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 291, 292, 331, 0, 0, 0,
	0, 0, 0, 385, 396, 0, 0, 432, 0, 497,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 281, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 367, 0, 380, 382, 0, 388,
	0, 393, 0, 394, 404, 408, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 449,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 505,
	518, 0, 0, 0, 283, 0, 0, 345, 0, 0,
	0, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 0, 934, 922, 0, 488,
	315, 526, 244, 885, 941, 888, 889, 914, 198, 903,
	910, 882, 842, 875, 848, 270, 849, 874, 895, 0,
	872, 470, 347, 0, 335, 876, 200, 860, 0, 403,
	287, 182, 846, 850, 851, 861, 865, 867, 868, 873,
	881, 884, 887, 890, 892, 894, 897, 908, 916, 917,
	923, 924, 925, 926, 927, 929, 938, 939, 171, 172,
	173, 174, 179, 180, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 197, 199, 201, 204, 205, 208, 209,
	210, 211, 212, 215, 219, 220, 221, 223, 224, 225,
	226, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 229, 230, 231, 232, 233, 234, 238, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 253, 254, 257,
	260, 261, 267, 272, 273, 274, 276, 277, 278, 284,
	286, 289, 290, 293, 295, 297, 299, 300, 301, 303,
	304, 305, 306, 309, 310, 311, 312, 313, 314, 316,
	324, 325, 327, 328, 329, 330, 333, 336, 338, 340,
	341, 343, 344, 346, 349, 350, 352, 353, 356, 357,
	359, 362, 365, 368, 370, 371, 372, 373, 376, 377,
	378, 379, 381, 384, 387, 389, 390, 392, 395, 397,
	398, 399, 400, 401, 402, 406, 409, 410, 411, 412,
	414, 416, 417, 418, 420, 422, 423, 424, 425, 426,
	427, 430, 431, 433, 434, 435, 436, 437, 442, 443,
	446, 447, 448, 451, 452, 453, 454, 455, 456, 458,
	461, 462, 466, 468, 471, 472, 478, 479, 481, 482,
	484, 485, 486, 487, 490, 492, 493, 495, 496, 500,
	501, 502, 509, 510, 514, 515, 516, 517, 520, 521,
	522, 523, 524, 525, 527, 528, 529, 530, 534, 535,
	537, 538, 539, 540, 543, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 532,
	0, 369, 531, 473, 360, 0, 0, 0, 898, 0,
	901, 921, 893, 915, 864, 906, 0, 282, 911, 937,
	0, 227, 0, 375, 0, 268, 0, 0, 0, 0,
	168, 169, 170, 0, 2550, 0, 2551, 280, 239, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 275, 909, 933, 880, 386,
	252, 302, 259, 251, 499, 0, 489, 853, 900, 932,
	0, 0, 0, 935, 334, 0, 913, 0, 845, 907,
	0, 193, 854, 940, 930, 877, 878, 0, 0, 0,
	0, 0, 0, 0, 896, 902, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 857, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 863,
	181, 256, 439, 844, 843, 176, 0, 0, 0, 237,
	0, 459, 928, 307, 536, 931, 0, 298, 918, 859,
	0, 0, 0, 856, 308, 175, 202, 862, 883, 374,
	919, 445, 474, 0, 271, 0, 264, 0, 0, 513,
	213, 0, 0, 0, 0, 415, 269, 354, 405, 0,
	0, 0, 421, 511, 0, 0, 0, 363, 0, 0,
	0, 0, 203, 243, 391, 480, 0, 465, 355, 503,
	0, 320, 464, 279, 178, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 483, 508, 216, 450, 457,
	438, 542, 195, 0, 477, 0, 317, 318, 194, 0,
	429, 255, 0, 0, 383, 506, 507, 0, 557, 206,
	533, 0, 207, 0, 366, 504, 0, 0, 0, 0,
	0, 0, 0, 322, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 858, 214, 0, 0, 265, 0,
	0, 886, 285, 0, 0, 0, 0, 419, 0, 460,
	498, 0, 936, 0, 0, 364, 288, 469, 321, 342,
	428, 544, 912, 440, 217, 519, 467, 870, 235, 866,
	0, 869, 904, 905, 871, 0, 0, 0, 236, 0,
	0, 0, 0, 296, 0, 0, 0, 0, 358, 0,
	0, 361, 0, 463, 0, 0, 0, 441, 0, 855,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 512,
	323, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 196,
	337, 943, 0, 0, 541, 0, 0, 847, 0, 0,
	0, 0, 258, 879, 0, 291, 292, 331, 0, 0,
	899, 0, 0, 0, 385, 396, 0, 0, 432, 0,
	497, 942, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 281, 0, 0, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 367, 0, 380, 382, 0,
	388, 0, 393, 0, 394, 404, 408, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 444, 0, 0,
	449, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	505, 518, 0, 0, 920, 283, 0, 0, 345, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 934, 922, 0,
	488, 315, 526, 244, 885, 941, 888, 889, 914, 198,
	903, 910, 882, 842, 875, 848, 270, 849, 874, 895,
	0, 872, 470, 347, 0, 335, 876, 200, 860, 0,
	403, 287, 182, 846, 850, 851, 861, 865, 867, 868,
	873, 881, 884, 887, 890, 892, 894, 897, 908, 916,
	917, 923, 924, 925, 926, 927, 929, 938, 939, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	532, 0, 369, 531, 473, 360, 0, 0, 0, 898,
	0, 901, 921, 893, 915, 864, 906, 0, 282, 911,
	937, 0, 227, 0, 375, 0, 268, 0, 0, 0,
	0, 168, 169, 170, 0, 491, 0, 0, 280, 239,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 275, 909, 933, 880,
	386, 252, 302, 259, 251, 499, 0, 489, 853, 900,
	932, 0, 0, 0, 935, 334, 0, 913, 0, 845,
	907, 0, 193, 854, 940, 930, 877, 878, 0, 0,
	0, 0, 0, 0, 0, 896, 902, 0, 891, 0,
	0, 0, 0, 0, 2232, 0, 0, 0, 0, 0,
	0, 0, 857, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	863, 181, 256, 439, 844, 843, 176, 0, 0, 0,
	237, 0, 459, 928, 307, 536, 931, 0, 298, 918,
	859, 0, 0, 0, 856, 308, 175, 202, 862, 883,
	374, 919, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 214, 0, 0, 265,
	0, 0, 886, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 936, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 912, 440, 217, 519, 467, 870, 235,
	866, 0, 869, 904, 905, 871, 0, 0, 0, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 441, 0,
	855, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	512, 323, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	196, 337, 943, 0, 0, 541, 0, 0, 847, 0,
	0, 0, 0, 258, 879, 0, 291, 292, 331, 0,
	0, 899, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 942, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 0, 0, 920, 283, 0, 0, 345,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 934, 922,
	0, 488, 315, 526, 244, 885, 941, 888, 889, 914,
	198, 903, 910, 882, 842, 875, 848, 270, 849, 874,
	895, 0, 872, 470, 347, 0, 335, 876, 200, 860,
	0, 403, 287, 182, 846, 850, 851, 861, 865, 867,
	868, 873, 881, 884, 887, 890, 892, 894, 897, 908,
	916, 917, 923, 924, 925, 926, 927, 929, 938, 939,
	171, 172, 173, 174, 179, 180, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 197, 199, 201, 204, 205,
	208, 209, 210, 211, 212, 215, 219, 220, 221, 223,
	224, 225, 226, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 229, 230, 231, 232, 233, 234, 238,
	240, 241, 242, 245, 246, 247, 248, 249, 250, 253,
	254, 257, 260, 261, 267, 272, 273, 274, 276, 277,
	278, 284, 286, 289, 290, 293, 295, 297, 299, 300,
	301, 303, 304, 305, 306, 309, 310, 311, 312, 313,
	314, 316, 324, 325, 327, 328, 329, 330, 333, 336,
	338, 340, 341, 343, 344, 346, 349, 350, 352, 353,
	356, 357, 359, 362, 365, 368, 370, 371, 372, 373,
	376, 377, 378, 379, 381, 384, 387, 389, 390, 392,
	395, 397, 398, 399, 400, 401, 402, 406, 409, 410,
	411, 412, 414, 416, 417, 418, 420, 422, 423, 424,
	425, 426, 427, 430, 431, 433, 434, 435, 436, 437,
	442, 443, 446, 447, 448, 451, 452, 453, 454, 455,
	456, 458, 461, 462, 466, 468, 471, 472, 478, 479,
	481, 482, 484, 485, 486, 487, 490, 492, 493, 495,
	496, 500, 501, 502, 509, 510, 514, 515, 516, 517,
	520, 521, 522, 523, 524, 525, 527, 528, 529, 530,
	534, 535, 537, 538, 539, 540, 543, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 532, 0, 369, 531, 473, 360, 0, 0, 0,
	898, 0, 901, 921, 893, 915, 864, 906, 0, 282,
	911, 937, 0, 227, 0, 375, 0, 268, 0, 0,
	0, 0, 168, 169, 170, 0, 491, 0, 0, 280,
	239, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 275, 909, 933,
	880, 386, 252, 302, 259, 251, 499, 0, 489, 853,
	900, 932, 0, 0, 0, 935, 334, 0, 913, 0,
	845, 907, 0, 193, 854, 940, 930, 877, 878, 0,
	0, 0, 0, 0, 0, 0, 896, 902, 0, 891,
	0, 0, 0, 0, 0, 2193, 0, 0, 0, 0,
	0, 0, 0, 857, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 863, 181, 256, 439, 844, 843, 176, 0, 0,
	0, 237, 0, 459, 928, 307, 536, 931, 0, 298,
	918, 859, 0, 0, 0, 856, 308, 175, 202, 862,
	883, 374, 919, 445, 474, 0, 271, 0, 264, 0,
	0, 513, 213, 0, 0, 0, 0, 415, 269, 354,
	405, 0, 0, 0, 421, 511, 0, 0, 0, 363,
	0, 0, 0, 0, 203, 243, 391, 480, 0, 465,
	355, 503, 0, 320, 464, 279, 178, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 483, 508, 216,
	450, 457, 438, 542, 195, 0, 477, 0, 317, 318,
	194, 0, 429, 255, 0, 0, 383, 506, 507, 0,
	557, 206, 533, 0, 207, 0, 366, 504, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 214, 0, 0,
	265, 0, 0, 886, 285, 0, 0, 0, 0, 419,
	0, 460, 498, 0, 936, 0, 0, 364, 288, 469,
	321, 342, 428, 544, 912, 440, 217, 519, 467, 870,
	235, 866, 0, 869, 904, 905, 871, 0, 0, 0,
	236, 0, 0, 0, 0, 296, 0, 0, 0, 0,
	358, 0, 0, 361, 0, 463, 0, 0, 0, 441,
	0, 855, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 512, 323, 326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 196, 337, 943, 0, 0, 541, 0, 0, 847,
	0, 0, 0, 0, 258, 879, 0, 291, 292, 331,
	0, 0, 899, 0, 0, 0, 385, 396, 0, 0,
	432, 0, 497, 942, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 281, 0, 0, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 367, 0, 380,
	382, 0, 388, 0, 393, 0, 394, 404, 408, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 444,
	0, 0, 449, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 505, 518, 0, 0, 920, 283, 0, 0,
	345, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 0, 0, 0, 0, 934,
	922, 0, 488, 315, 526, 244, 885, 941, 888, 889,
	914, 198, 903, 910, 882, 842, 875, 848, 270, 849,
	874, 895, 0, 872, 470, 347, 0, 335, 876, 200,
	860, 0, 403, 287, 182, 846, 850, 851, 861, 865,
	867, 868, 873, 881, 884, 887, 890, 892, 894, 897,
	908, 916, 917, 923, 924, 925, 926, 927, 929, 938,
	939, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 898, 0, 901, 921, 893, 915, 864, 906, 0,
	282, 911, 937, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 0, 491, 0, 0,
	280, 239, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 909,
	933, 880, 386, 252, 302, 259, 251, 499, 0, 489,
	853, 900, 932, 0, 0, 608, 935, 334, 0, 913,
	0, 845, 907, 0, 193, 854, 940, 930, 877, 878,
	0, 0, 0, 0, 0, 0, 0, 896, 902, 0,
	891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 863, 181, 256, 439, 844, 843, 176, 0,
	0, 0, 237, 0, 459, 928, 307, 536, 931, 0,
	298, 918, 859, 0, 0, 0, 856, 308, 175, 202,
	862, 883, 374, 919, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 944, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 214, 0,
	0, 265, 0, 0, 886, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 936, 0, 0, 841, 835,
	834, 321, 342, 428, 544, 912, 440, 217, 519, 467,
	870, 235, 866, 0, 869, 904, 905, 871, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 855, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 943, 0, 0, 541, 0, 0,
	847, 0, 0, 0, 0, 258, 879, 0, 291, 292,
	331, 0, 0, 899, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 942, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 0, 0, 920, 283, 0,
	0, 345, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 0, 0, 0, 0,
	934, 922, 0, 488, 315, 526, 244, 885, 941, 888,
	889, 914, 198, 903, 910, 882, 842, 875, 848, 270,
	849, 874, 895, 0, 872, 470, 347, 0, 335, 876,
	200, 860, 0, 403, 287, 182, 846, 850, 851, 861,
	865, 867, 868, 873, 881, 884, 887, 890, 892, 894,
	897, 908, 916, 917, 923, 924, 925, 926, 927, 929,
	938, 939, 171, 172, 173, 174, 179, 180, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 197, 199, 201,
	204, 205, 208, 209, 210, 211, 212, 215, 219, 220,
	221, 223, 224, 225, 226, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 229, 230, 231, 232, 233,
	234, 238, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 253, 254, 257, 260, 261, 267, 272, 273, 274,
	276, 277, 278, 284, 286, 289, 290, 293, 295, 297,
	299, 300, 301, 303, 304, 305, 306, 309, 310, 311,
	312, 313, 314, 316, 324, 325, 327, 328, 329, 330,
	333, 336, 338, 340, 341, 343, 344, 346, 349, 350,
	352, 353, 356, 357, 359, 362, 365, 368, 370, 371,
	372, 373, 376, 377, 378, 379, 381, 384, 387, 389,
	390, 392, 395, 397, 398, 399, 400, 401, 402, 406,
	409, 410, 411, 412, 414, 416, 417, 418, 420, 422,
	423, 424, 425, 426, 427, 430, 431, 433, 434, 435,
	436, 437, 442, 443, 446, 447, 448, 451, 452, 453,
	454, 455, 456, 458, 461, 462, 466, 468, 471, 472,
	478, 479, 481, 482, 484, 485, 486, 487, 490, 492,
	493, 495, 496, 500, 501, 502, 509, 510, 514, 515,
	516, 517, 520, 521, 522, 523, 524, 525, 527, 528,
	529, 530, 534, 535, 537, 538, 539, 540, 543, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 532, 0, 369, 531, 473, 360, 0,
	0, 0, 898, 0, 901, 921, 893, 915, 864, 906,
	0, 282, 911, 937, 0, 227, 0, 375, 0, 268,
	0, 0, 0, 0, 168, 169, 170, 0, 491, 0,
	0, 280, 239, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 275,
	909, 933, 880, 386, 252, 302, 259, 251, 499, 0,
	489, 853, 900, 932, 0, 0, 0, 935, 334, 0,
	913, 0, 845, 907, 0, 193, 854, 940, 930, 877,
	878, 0, 0, 0, 0, 0, 0, 0, 896, 902,
	0, 891, 0, 0, 0, 0, 0, 1697, 0, 0,
	0, 0, 0, 0, 0, 857, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 863, 181, 256, 439, 844, 843, 176,
	0, 0, 0, 237, 0, 459, 928, 307, 536, 931,
	0, 298, 918, 859, 0, 0, 0, 856, 308, 175,
	202, 862, 883, 374, 919, 445, 474, 0, 271, 0,
	264, 0, 0, 513, 213, 0, 0, 0, 0, 415,
	269, 354, 405, 0, 0, 0, 421, 511, 0, 0,
	0, 363, 0, 0, 0, 0, 203, 243, 391, 480,
	0, 465, 355, 503, 0, 320, 464, 279, 178, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 483,
	508, 216, 450, 457, 438, 542, 195, 0, 477, 0,
	317, 318, 194, 0, 429, 255, 0, 0, 383, 506,
	507, 0, 557, 206, 533, 0, 207, 0, 366, 504,
	0, 0, 0, 0, 0, 0, 0, 322, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 858, 214,
	0, 0, 265, 0, 0, 886, 285, 0, 0, 0,
	0, 419, 0, 460, 498, 0, 936, 0, 0, 364,
	288, 469, 321, 342, 428, 544, 912, 440, 217, 519,
	467, 870, 235, 866, 0, 869, 904, 905, 871, 0,
	0, 0, 236, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 358, 0, 0, 361, 0, 463, 0, 0,
	0, 441, 0, 855, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 512, 323, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 196, 337, 943, 0, 0, 541, 0,
	0, 847, 0, 0, 0, 0, 258, 879, 0, 291,
	292, 331, 0, 0, 899, 0, 0, 0, 385, 396,
	0, 0, 432, 0, 497, 942, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 281, 0, 0,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 367,
	0, 380, 382, 0, 388, 0, 393, 0, 394, 404,
	408, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	0, 444, 0, 0, 449, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 505, 518, 0, 0, 920, 283,
	0, 0, 345, 0, 0, 0, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 0, 0, 0, 0,
	0, 934, 922, 0, 488, 315, 526, 244, 885, 941,
	888, 889, 914, 198, 903, 910, 882, 842, 875, 848,
	270, 849, 874, 895, 0, 872, 470, 347, 0, 335,
	876, 200, 860, 0, 403, 287, 182, 846, 850, 851,
	861, 865, 867, 868, 873, 881, 884, 887, 890, 892,
	894, 897, 908, 916, 917, 923, 924, 925, 926, 927,
	929, 938, 939, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 898, 0, 901, 921, 893, 915, 864,
	906, 0, 282, 911, 937, 0, 227, 0, 375, 0,
	268, 0, 88, 0, 0, 168, 169, 170, 0, 491,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 909, 933, 880, 386, 252, 302, 259, 251, 499,
	0, 489, 853, 900, 932, 0, 0, 0, 935, 334,
	0, 913, 0, 845, 907, 0, 193, 854, 940, 930,
	877, 878, 0, 0, 0, 0, 0, 0, 0, 896,
	902, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 857, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 863, 181, 256, 439, 844, 843,
	176, 0, 0, 0, 237, 0, 459, 928, 307, 536,
	931, 0, 298, 918, 859, 0, 0, 0, 856, 308,
	175, 202, 862, 883, 374, 919, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	214, 0, 0, 265, 0, 0, 886, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 936, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 912, 440, 217,
	519, 467, 870, 235, 866, 0, 869, 904, 905, 871,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 855, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 943, 0, 0, 541,
	0, 0, 847, 0, 0, 0, 0, 258, 879, 0,
	291, 292, 331, 0, 0, 899, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 942, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 505, 518, 0, 0, 920,
	283, 0, 0, 345, 0, 0, 0, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 934, 922, 0, 488, 315, 526, 244, 885,
	941, 888, 889, 914, 198, 903, 910, 882, 842, 875,
	848, 270, 849, 874, 895, 0, 872, 470, 347, 0,
	335, 876, 200, 860, 0, 403, 287, 182, 846, 850,
	851, 861, 865, 867, 868, 873, 881, 884, 887, 890,
	892, 894, 897, 908, 916, 917, 923, 924, 925, 926,
	927, 929, 938, 939, 171, 172, 173, 174, 179, 180,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 197,
	199, 201, 204, 205, 208, 209, 210, 211, 212, 215,
	219, 220, 221, 223, 224, 225, 226, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 229, 230, 231,
	232, 233, 234, 238, 240, 241, 242, 245, 246, 247,
	248, 249, 250, 253, 254, 257, 260, 261, 267, 272,
	273, 274, 276, 277, 278, 284, 286, 289, 290, 293,
	295, 297, 299, 300, 301, 303, 304, 305, 306, 309,
	310, 311, 312, 313, 314, 316, 324, 325, 327, 328,
	329, 330, 333, 336, 338, 340, 341, 343, 344, 346,
	349, 350, 352, 353, 356, 357, 359, 362, 365, 368,
	370, 371, 372, 373, 376, 377, 378, 379, 381, 384,
	387, 389, 390, 392, 395, 397, 398, 399, 400, 401,
	402, 406, 409, 410, 411, 412, 414, 416, 417, 418,
	420, 422, 423, 424, 425, 426, 427, 430, 431, 433,
	434, 435, 436, 437, 442, 443, 446, 447, 448, 451,
	452, 453, 454, 455, 456, 458, 461, 462, 466, 468,
	471, 472, 478, 479, 481, 482, 484, 485, 486, 487,
	490, 492, 493, 495, 496, 500, 501, 502, 509, 510,
	514, 515, 516, 517, 520, 521, 522, 523, 524, 525,
	527, 528, 529, 530, 534, 535, 537, 538, 539, 540,
	543, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 532, 0, 369, 531, 473,
	360, 0, 0, 0, 898, 0, 901, 921, 893, 915,
	864, 906, 0, 282, 911, 937, 0, 227, 0, 375,
	0, 268, 0, 0, 0, 0, 168, 169, 170, 0,
	491, 0, 0, 280, 239, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 275, 909, 933, 880, 386, 252, 302, 259, 251,
	499, 0, 489, 853, 900, 932, 0, 0, 608, 935,
	334, 0, 913, 0, 845, 907, 0, 193, 854, 940,
	930, 877, 878, 0, 0, 0, 0, 0, 0, 0,
	896, 902, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 857, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 863, 181, 256, 439, 844,
	843, 176, 0, 0, 0, 237, 0, 459, 928, 307,
	536, 931, 0, 298, 918, 859, 0, 0, 0, 856,
	308, 175, 202, 862, 883, 374, 919, 445, 474, 0,
	271, 0, 264, 0, 0, 513, 213, 0, 0, 0,
	0, 415, 269, 354, 405, 0, 0, 0, 421, 511,
	0, 0, 0, 363, 0, 0, 0, 0, 203, 243,
	391, 480, 0, 465, 355, 503, 0, 320, 464, 279,
	178, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 483, 1302, 216, 450, 457, 438, 542, 195, 0,
	477, 0, 317, 318, 194, 0, 429, 255, 0, 0,
	383, 506, 507, 0, 557, 206, 533, 0, 944, 0,
	366, 504, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 214, 0, 0, 265, 0, 0, 886, 285, 0,
	0, 0, 0, 419, 0, 460, 498, 0, 936, 0,
	0, 841, 835, 834, 321, 342, 428, 544, 912, 440,
	217, 519, 467, 870, 235, 866, 0, 869, 904, 905,
	871, 0, 0, 0, 236, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 358, 0, 0, 361, 0, 463,
	0, 0, 0, 441, 0, 855, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 512, 323, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 196, 337, 943, 0, 0,
	541, 0, 0, 847, 0, 0, 0, 0, 258, 879,
	0, 291, 292, 331, 0, 0, 899, 0, 0, 0,
	385, 396, 0, 0, 432, 0, 497, 942, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 281,
	0, 0, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 367, 0, 380, 382, 0, 388, 0, 393, 0,
	394, 404, 408, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 444, 0, 0, 449, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 505, 518, 0, 0,
	920, 283, 0, 0, 345, 0, 0, 0, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 934, 922, 0, 488, 315, 526, 244,
	885, 941, 888, 889, 914, 198, 903, 910, 882, 842,
	875, 848, 270, 849, 874, 895, 0, 872, 470, 347,
	0, 335, 876, 200, 860, 0, 403, 287, 182, 846,
	850, 851, 861, 865, 867, 868, 873, 881, 884, 887,
	890, 892, 894, 897, 908, 916, 917, 923, 924, 925,
	926, 927, 929, 938, 939, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 898, 0, 901, 921, 893,
	915, 864, 906, 0, 282, 911, 937, 0, 227, 0,
	375, 0, 268, 0, 0, 0, 0, 168, 169, 170,
	0, 491, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 909, 933, 880, 386, 252, 302, 259,
	251, 499, 0, 489, 853, 900, 932, 0, 0, 608,
	935, 334, 0, 913, 0, 845, 907, 0, 193, 854,
	940, 930, 877, 878, 0, 0, 0, 0, 0, 0,
	0, 896, 902, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 863, 181, 256, 439,
	844, 843, 176, 0, 0, 0, 237, 0, 459, 928,
	307, 536, 931, 0, 298, 918, 859, 0, 0, 0,
	856, 308, 175, 202, 862, 883, 374, 919, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 832, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 944,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 214, 0, 0, 265, 0, 0, 886, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 936,
	0, 0, 841, 835, 834, 321, 342, 428, 544, 912,
	440, 217, 519, 467, 870, 235, 866, 0, 869, 904,
	905, 871, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 855, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 943, 0,
	0, 541, 0, 0, 847, 0, 0, 0, 0, 258,
	879, 0, 291, 292, 331, 0, 0, 899, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 942, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 0,
	0, 920, 283, 0, 0, 345, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	0, 0, 0, 0, 934, 922, 0, 488, 315, 526,
	244, 885, 941, 888, 889, 914, 198, 903, 910, 882,
	842, 875, 848, 270, 849, 874, 895, 0, 872, 470,
	347, 0, 335, 876, 200, 860, 0, 403, 287, 182,
	846, 850, 851, 861, 865, 867, 868, 873, 881, 884,
	887, 890, 892, 894, 897, 908, 916, 917, 923, 924,
	925, 926, 927, 929, 938, 939, 171, 172, 173, 174,
	179, 180, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 197, 199, 201, 204, 205, 208, 209, 210, 211,
	212, 215, 219, 220, 221, 223, 224, 225, 226, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 229,
	230, 231, 232, 233, 234, 238, 240, 241, 242, 245,
	246, 247, 248, 249, 250, 253, 254, 257, 260, 261,
	267, 272, 273, 274, 276, 277, 278, 284, 286, 289,
	290, 293, 295, 297, 299, 300, 301, 303, 304, 305,
	306, 309, 310, 311, 312, 313, 314, 316, 324, 325,
	327, 328, 329, 330, 333, 336, 338, 340, 341, 343,
	344, 346, 349, 350, 352, 353, 356, 357, 359, 362,
	365, 368, 370, 371, 372, 373, 376, 377, 378, 379,
	381, 384, 387, 389, 390, 392, 395, 397, 398, 399,
	400, 401, 402, 406, 409, 410, 411, 412, 414, 416,
	417, 418, 420, 422, 423, 424, 425, 426, 427, 430,
	431, 433, 434, 435, 436, 437, 442, 443, 446, 447,
	448, 451, 452, 453, 454, 455, 456, 458, 461, 462,
	466, 468, 471, 472, 478, 479, 481, 482, 484, 485,
	486, 487, 490, 492, 493, 495, 496, 500, 501, 502,
	509, 510, 514, 515, 516, 517, 520, 521, 522, 523,
	524, 525, 527, 528, 529, 530, 534, 535, 537, 538,
	539, 540, 543, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 532, 0, 369,
	531, 473, 360, 0, 0, 0, 898, 0, 901, 921,
	893, 915, 864, 906, 0, 282, 911, 937, 0, 227,
	0, 375, 0, 268, 0, 0, 0, 0, 168, 169,
	170, 0, 491, 0, 0, 280, 239, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 275, 909, 933, 880, 386, 252, 302,
	259, 251, 499, 0, 489, 853, 900, 932, 0, 0,
	0, 935, 334, 0, 913, 0, 845, 907, 0, 193,
	854, 940, 930, 877, 878, 0, 0, 0, 0, 0,
	0, 0, 896, 902, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 863, 181, 256,
	439, 844, 843, 176, 0, 0, 0, 237, 0, 459,
	928, 307, 536, 931, 0, 298, 918, 859, 0, 0,
	0, 856, 308, 175, 202, 862, 883, 374, 919, 445,
	474, 0, 271, 0, 264, 0, 0, 513, 213, 0,
	0, 0, 0, 415, 269, 354, 405, 0, 0, 0,
	421, 511, 0, 0, 0, 363, 0, 0, 0, 0,
	203, 243, 391, 480, 0, 465, 355, 503, 0, 320,
	464, 279, 178, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 483, 508, 216, 450, 457, 438, 542,
	195, 0, 477, 0, 317, 318, 194, 0, 429, 255,
	0, 0, 383, 506, 507, 0, 557, 206, 533, 0,
	207, 0, 366, 504, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 858, 214, 0, 0, 265, 0, 0, 886,
	285, 0, 0, 0, 0, 419, 0, 460, 498, 0,
	936, 0, 0, 364, 288, 469, 321, 342, 428, 544,
	912, 440, 217, 519, 467, 870, 235, 866, 0, 869,
	904, 905, 871, 0, 0, 0, 236, 0, 0, 0,
	0, 296, 0, 0, 0, 0, 358, 0, 0, 361,
	0, 463, 0, 0, 0, 441, 0, 855, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 512, 323, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 196, 337, 943,
	0, 0, 541, 0, 0, 847, 0, 0, 0, 0,
	258, 879, 0, 291, 292, 331, 0, 0, 899, 0,
	0, 0, 385, 396, 0, 0, 432, 0, 497, 942,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 281, 0, 0, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 367, 0, 380, 382, 0, 388, 0,
	393, 0, 394, 404, 408, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 0, 449, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 505, 518,
	0, 0, 920, 283, 0, 0, 345, 0, 0, 0,
	263, 315, 526, 244, 0, 0, 0, 0, 0, 198,
	222, 0, 0, 0, 0, 0, 652, 0, 407, 0,
	0, 657, 470, 347, 0, 335, 0, 200, 488, 0,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	664, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 729, 738, 739, 740, 737, 736,
	730, 732, 0, 0, 731, 218, 675, 677, 676, 686,
	687, 688, 689, 690, 691, 692, 673, 734, 741, 742,
	386, 252, 302, 259, 251, 499, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	648, 0, 0, 656, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 658, 0, 0, 0,
	0, 181, 256, 439, 0, 0, 176, 0, 0, 0,
	237, 0, 711, 0, 307, 536, 0, 0, 709, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 681, 682, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 718, 710,
	668, 722, 670, 719, 720, 665, 666, 669, 721, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 713, 655,
	654, 0, 661, 662, 0, 671, 672, 674, 678, 679,
	680, 683, 684, 685, 693, 695, 696, 694, 697, 698,
	699, 702, 703, 704, 705, 700, 701, 706, 653, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 315, 526, 244, 283, 0, 0, 345,
	0, 198, 0, 263, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 222, 470, 347, 0, 335, 0, 200,
	0, 407, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 0, 738, 739, 0,
	280, 239, 0, 1558, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 0,
	0, 0, 386, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 319, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 459, 0, 307, 536, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 315, 526, 244, 283, 0,
	0, 345, 0, 198, 0, 263, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 222, 470, 347, 0, 335,
	0, 200, 0, 407, 403, 287, 182, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 227, 0, 375, 0,
	268, 0, 0, 0, 0, 168, 169, 170, 0, 491,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 0, 0, 0, 386, 252, 302, 259, 251, 499,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 1740,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 181, 256, 439, 0, 0,
	176, 0, 0, 0, 237, 0, 459, 0, 1739, 536,
	0, 0, 298, 0, 0, 987, 988, 0, 952, 308,
	175, 202, 981, 985, 374, 0, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 265, 0, 0, 0, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 0, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 0, 440, 217,
	519, 467, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	291, 292, 331, 0, 0, 0, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 79, 505, 518, 315, 526, 244,
	283, 0, 0, 345, 0, 198, 0, 263, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 222, 470, 347,
	0, 335, 0, 200, 0, 407, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 88, 0, 0, 168, 169, 170,
	0, 491, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 0, 0, 0, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 459, 0,
	307, 536, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 87, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 1715, 0, 0, 1714, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 79, 505, 518, 315,
	526, 244, 283, 0, 0, 345, 0, 198, 0, 263,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 222,
	470, 347, 0, 335, 0, 200, 0, 407, 403, 287,
	182, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 173,
	174, 179, 180, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 197, 199, 201, 204, 205, 208, 209, 210,
	211, 212, 215, 219, 220, 221, 223, 224, 225, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	229, 230, 231, 232, 233, 234, 238, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 253, 254, 257, 260,
	261, 267, 272, 273, 274, 276, 277, 278, 284, 286,
	289, 290, 293, 295, 297, 299, 300, 301, 303, 304,
	305, 306, 309, 310, 311, 312, 313, 314, 316, 324,
	325, 327, 328, 329, 330, 333, 336, 338, 340, 341,
	343, 344, 346, 349, 350, 352, 353, 356, 357, 359,
	362, 365, 368, 370, 371, 372, 373, 376, 377, 378,
	379, 381, 384, 387, 389, 390, 392, 395, 397, 398,
	399, 400, 401, 402, 406, 409, 410, 411, 412, 414,
	416, 417, 418, 420, 422, 423, 424, 425, 426, 427,
	430, 431, 433, 434, 435, 436, 437, 442, 443, 446,
	447, 448, 451, 452, 453, 454, 455, 456, 458, 461,
	462, 466, 468, 471, 472, 478, 479, 481, 482, 484,
	485, 486, 487, 490, 492, 493, 495, 496, 500, 501,
	502, 509, 510, 514, 515, 516, 517, 520, 521, 522,
	523, 524, 525, 527, 528, 529, 530, 534, 535, 537,
	538, 539, 540, 543, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 532, 0,
	369, 531, 473, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	227, 0, 375, 0, 268, 0, 88, 0, 1272, 168,
	169, 170, 0, 491, 0, 0, 280, 239, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 275, 0, 0, 0, 386, 252,
	302, 259, 251, 499, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 181,
	256, 439, 0, 0, 176, 0, 0, 0, 237, 0,
	459, 0, 307, 536, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 308, 175, 202, 0, 0, 374, 0,
	445, 474, 0, 271, 0, 264, 0, 0, 513, 213,
	0, 0, 0, 0, 415, 269, 354, 405, 0, 0,
	0, 421, 511, 0, 0, 0, 363, 0, 0, 0,
	0, 203, 243, 391, 480, 0, 465, 355, 503, 0,
	320, 464, 279, 178, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 483, 508, 216, 450, 457, 438,
	542, 195, 0, 477, 0, 317, 318, 194, 0, 429,
	255, 0, 0, 383, 506, 507, 0, 557, 206, 533,
	0, 207, 0, 366, 504, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 265, 0, 0,
	0, 285, 0, 0, 0, 0, 419, 0, 460, 498,
	0, 0, 0, 0, 364, 288, 469, 321, 342, 428,
	544, 0, 440, 217, 519, 467, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 358, 0, 0,
	361, 0, 463, 0, 0, 0, 441, 0, 0, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 512, 323,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 196, 337,
	87, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 291, 292, 331, 0, 0, 0,
	0, 0, 0, 385, 396, 0, 0, 432, 0, 497,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 281, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 367, 0, 380, 382, 0, 388,
	0, 393, 0, 394, 404, 408, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 449,
	0, 0, 0, 0, 1127, 475, 476, 0, 0, 505,
	518, 315, 526, 244, 283, 0, 0, 345, 0, 198,
	0, 263, 0, 0, 0, 1291, 270, 0, 0, 0,
	0, 222, 470, 347, 0, 335, 0, 200, 0, 407,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	532, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 227, 0, 375, 0, 268, 0, 0, 0,
	0, 168, 169, 170, 0, 1293, 0, 0, 280, 239,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 275, 0, 0, 0,
	386, 252, 302, 259, 251, 499, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 1125, 0, 1126,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 181, 256, 439, 0, 0, 176, 0, 0, 0,
	237, 0, 459, 0, 307, 536, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 441, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	512, 323, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 315, 526, 244, 283, 0, 0, 345,
	0, 198, 0, 263, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 222, 470, 347, 0, 335, 0, 200,
	0, 407, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 1235, 1238, 0, 0,
	280, 239, 1234, 1237, 0, 0, 1233, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 0,
	0, 0, 386, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 459, 0, 307, 536, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 315, 526, 244, 283, 0,
	0, 345, 0, 198, 0, 263, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 222, 470, 347, 0, 335,
	0, 200, 0, 407, 403, 287, 182, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 227, 0, 375, 0,
	268, 0, 0, 0, 0, 168, 169, 170, 0, 491,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 0, 0, 0, 386, 252, 302, 259, 251, 499,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 181, 256, 439, 0, 0,
	176, 0, 0, 0, 237, 0, 459, 0, 307, 536,
	0, 0, 298, 0, 0, 0, 0, 0, 952, 308,
	175, 202, 950, 0, 374, 0, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 265, 0, 0, 0, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 0, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 0, 440, 217,
	519, 467, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	291, 292, 331, 0, 0, 0, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 505, 518, 315, 526, 244,
	283, 0, 0, 345, 0, 198, 0, 263, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 222, 470, 347,
	0, 335, 0, 200, 0, 407, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 0, 0, 1272, 168, 169, 170,
	0, 491, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 0, 0, 0, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 459, 0,
	307, 536, 0, 0, 298, 2501, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 331, 0, 0, 0, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 315,
	526, 244, 283, 0, 0, 345, 0, 198, 0, 263,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 222,
	470, 347, 0, 335, 0, 200, 0, 407, 403, 287,
	182, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 173,
	174, 179, 180, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 197, 199, 201, 204, 205, 208, 209, 210,
	211, 212, 215, 219, 220, 221, 223, 224, 225, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	229, 230, 231, 232, 233, 234, 238, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 253, 254, 257, 260,
	261, 267, 272, 273, 274, 276, 277, 278, 284, 286,
	289, 290, 293, 295, 297, 299, 300, 301, 303, 304,
	305, 306, 309, 310, 311, 312, 313, 314, 316, 324,
	325, 327, 328, 329, 330, 333, 336, 338, 340, 341,
	343, 344, 346, 349, 350, 352, 353, 356, 357, 359,
	362, 365, 368, 370, 371, 372, 373, 376, 377, 378,
	379, 381, 384, 387, 389, 390, 392, 395, 397, 398,
	399, 400, 401, 402, 406, 409, 410, 411, 412, 414,
	416, 417, 418, 420, 422, 423, 424, 425, 426, 427,
	430, 431, 433, 434, 435, 436, 437, 442, 443, 446,
	447, 448, 451, 452, 453, 454, 455, 456, 458, 461,
	462, 466, 468, 471, 472, 478, 479, 481, 482, 484,
	485, 486, 487, 490, 492, 493, 495, 496, 500, 501,
	502, 509, 510, 514, 515, 516, 517, 520, 521, 522,
	523, 524, 525, 527, 528, 529, 530, 534, 535, 537,
	538, 539, 540, 543, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 532, 0,
	369, 531, 473, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	227, 0, 375, 0, 268, 0, 88, 0, 0, 168,
	169, 170, 0, 491, 0, 0, 280, 239, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 275, 0, 0, 0, 386, 252,
	302, 259, 251, 499, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 181,
	256, 439, 0, 0, 176, 0, 0, 0, 237, 0,
	459, 0, 307, 536, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 308, 175, 202, 0, 0, 374, 0,
	445, 474, 0, 271, 0, 264, 0, 0, 513, 213,
	0, 0, 0, 0, 415, 269, 354, 405, 0, 0,
	0, 421, 511, 0, 0, 0, 363, 0, 0, 0,
	0, 203, 243, 391, 480, 0, 465, 355, 503, 0,
	320, 464, 279, 178, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 483, 508, 216, 450, 457, 438,
	542, 195, 0, 477, 0, 317, 318, 194, 0, 429,
	255, 0, 0, 383, 506, 507, 0, 557, 206, 533,
	0, 207, 0, 366, 504, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 265, 0, 0,
	0, 285, 0, 0, 0, 0, 419, 0, 460, 498,
	0, 0, 0, 0, 364, 288, 469, 321, 342, 428,
	544, 0, 440, 217, 519, 467, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 358, 0, 0,
	361, 0, 463, 0, 0, 0, 441, 0, 0, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 512, 323,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 196, 337,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 291, 292, 1715, 0, 0, 1714,
	0, 0, 0, 385, 396, 0, 0, 432, 0, 497,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 281, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 367, 0, 380, 382, 0, 388,
	0, 393, 0, 394, 404, 408, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 449,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 505,
	518, 315, 526, 244, 283, 0, 0, 345, 0, 198,
	0, 263, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 222, 470, 347, 0, 335, 0, 200, 0, 407,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	532, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 227, 0, 375, 0, 268, 0, 0, 0,
	0, 168, 169, 170, 0, 491, 0, 0, 280, 239,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 275, 0, 0, 0,
	386, 252, 302, 259, 251, 499, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 181, 256, 439, 627, 626, 176, 0, 0, 0,
	237, 0, 459, 0, 307, 536, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 441, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	512, 323, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 315, 526, 244, 625, 0, 0, 345,
	0, 198, 0, 263, 0, 0, 0, 1667, 270, 0,
	0, 0, 0, 222, 470, 347, 0, 335, 0, 200,
	0, 407, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 0, 1669, 0, 0,
	280, 239, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 0,
	0, 0, 386, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 459, 0, 307, 536, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 315, 526, 244, 283, 0,
	0, 345, 0, 198, 0, 263, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 222, 470, 347, 0, 335,
	0, 200, 0, 407, 403, 287, 182, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 227, 0, 375, 0,
	268, 0, 0, 0, 0, 168, 169, 170, 0, 491,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 0, 0, 0, 386, 252, 302, 259, 251, 499,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 181, 256, 439, 0, 0,
	176, 0, 0, 0, 237, 0, 459, 0, 307, 536,
	0, 0, 298, 2558, 0, 0, 0, 0, 0, 308,
	175, 202, 0, 0, 374, 0, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 265, 0, 0, 0, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 0, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 0, 440, 217,
	519, 467, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	291, 292, 331, 0, 0, 0, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 505, 518, 315, 526, 244,
	283, 0, 0, 345, 0, 198, 0, 263, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 222, 470, 347,
	0, 335, 0, 200, 0, 407, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 0, 0, 0, 168, 169, 170,
	0, 491, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 0, 0, 0, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 459, 0,
	307, 536, 0, 0, 298, 2501, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 331, 0, 0, 0, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 315,
	526, 244, 283, 0, 0, 345, 0, 198, 0, 263,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 222,
	470, 347, 0, 335, 0, 200, 0, 407, 403, 287,
	182, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 173,
	174, 179, 180, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 197, 199, 201, 204, 205, 208, 209, 210,
	211, 212, 215, 219, 220, 221, 223, 224, 225, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	229, 230, 231, 232, 233, 234, 238, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 253, 254, 257, 260,
	261, 267, 272, 273, 274, 276, 277, 278, 284, 286,
	289, 290, 293, 295, 297, 299, 300, 301, 303, 304,
	305, 306, 309, 310, 311, 312, 313, 314, 316, 324,
	325, 327, 328, 329, 330, 333, 336, 338, 340, 341,
	343, 344, 346, 349, 350, 352, 353, 356, 357, 359,
	362, 365, 368, 370, 371, 372, 373, 376, 377, 378,
	379, 381, 384, 387, 389, 390, 392, 395, 397, 398,
	399, 400, 401, 402, 406, 409, 410, 411, 412, 414,
	416, 417, 418, 420, 422, 423, 424, 425, 426, 427,
	430, 431, 433, 434, 435, 436, 437, 442, 443, 446,
	447, 448, 451, 452, 453, 454, 455, 456, 458, 461,
	462, 466, 468, 471, 472, 478, 479, 481, 482, 484,
	485, 486, 487, 490, 492, 493, 495, 496, 500, 501,
	502, 509, 510, 514, 515, 516, 517, 520, 521, 522,
	523, 524, 525, 527, 528, 529, 530, 534, 535, 537,
	538, 539, 540, 543, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 532, 0,
	369, 531, 473, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	227, 0, 375, 0, 268, 0, 0, 0, 0, 168,
	169, 170, 0, 1554, 0, 0, 280, 239, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 275, 0, 0, 0, 386, 252,
	302, 259, 251, 499, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 181,
	256, 439, 0, 0, 176, 0, 0, 0, 237, 0,
	459, 0, 307, 536, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 308, 175, 202, 0, 0, 374, 0,
	445, 474, 0, 271, 0, 264, 0, 0, 513, 213,
	0, 0, 0, 0, 415, 269, 354, 405, 0, 0,
	0, 421, 511, 0, 0, 0, 363, 0, 0, 0,
	0, 203, 243, 391, 480, 0, 465, 355, 503, 0,
	320, 464, 279, 178, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 483, 508, 216, 450, 457, 438,
	542, 195, 0, 477, 0, 317, 318, 194, 0, 429,
	255, 0, 0, 383, 506, 507, 0, 557, 206, 533,
	0, 207, 0, 366, 504, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 265, 0, 0,
	0, 285, 0, 0, 0, 0, 419, 0, 460, 498,
	0, 0, 0, 0, 364, 288, 469, 321, 342, 428,
	544, 0, 440, 217, 519, 467, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 358, 0, 0,
	361, 0, 463, 0, 0, 0, 441, 0, 0, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 512, 323,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 196, 337,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 291, 292, 331, 0, 0, 0,
	0, 0, 0, 385, 396, 0, 0, 432, 0, 497,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 281, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 367, 0, 380, 382, 0, 388,
	0, 393, 0, 394, 404, 408, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 449,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 505,
	518, 315, 526, 244, 283, 0, 0, 345, 0, 198,
	0, 263, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 222, 470, 347, 0, 335, 0, 200, 0, 407,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	532, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 227, 0, 375, 0, 268, 0, 0, 0,
	0, 168, 169, 170, 0, 2040, 0, 0, 280, 239,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 275, 0, 0, 0,
	386, 252, 302, 259, 251, 499, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 181, 256, 439, 0, 0, 176, 0, 0, 0,
	237, 0, 459, 0, 307, 536, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 441, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	512, 323, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 315, 526, 244, 283, 0, 0, 345,
	0, 198, 0, 263, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 222, 470, 347, 0, 335, 0, 200,
	0, 407, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 0, 491, 0, 0,
	280, 239, 0, 1967, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 0,
	0, 0, 386, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 459, 0, 307, 536, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 315, 526, 244, 283, 0,
	0, 345, 0, 198, 0, 263, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 222, 470, 347, 0, 335,
	0, 200, 0, 407, 403, 287, 182, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 227, 0, 375, 0,
	268, 0, 88, 0, 0, 168, 169, 170, 0, 491,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 0, 0, 0, 386, 252, 302, 259, 251, 499,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 181, 256, 439, 0, 0,
	176, 0, 0, 0, 237, 0, 459, 0, 307, 536,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 308,
	175, 202, 0, 0, 374, 0, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 265, 0, 0, 0, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 0, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 0, 440, 217,
	519, 467, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	291, 292, 331, 0, 0, 0, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 505, 518, 0, 0, 0,
	283, 0, 0, 345, 0, 0, 0, 263, 315, 526,
	244, 1716, 0, 0, 0, 0, 198, 222, 0, 0,
	0, 0, 0, 270, 0, 407, 0, 0, 0, 470,
	347, 0, 335, 0, 200, 488, 0, 403, 287, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 173, 174,
	179, 180, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 197, 199, 201, 204, 205, 208, 209, 210, 211,
	212, 215, 219, 220, 221, 223, 224, 225, 226, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 229,
	230, 231, 232, 233, 234, 238, 240, 241, 242, 245,
	246, 247, 248, 249, 250, 253, 254, 257, 260, 261,
	267, 272, 273, 274, 276, 277, 278, 284, 286, 289,
	290, 293, 295, 297, 299, 300, 301, 303, 304, 305,
	306, 309, 310, 311, 312, 313, 314, 316, 324, 325,
	327, 328, 329, 330, 333, 336, 338, 340, 341, 343,
	344, 346, 349, 350, 352, 353, 356, 357, 359, 362,
	365, 368, 370, 371, 372, 373, 376, 377, 378, 379,
	381, 384, 387, 389, 390, 392, 395, 397, 398, 399,
	400, 401, 402, 406, 409, 410, 411, 412, 414, 416,
	417, 418, 420, 422, 423, 424, 425, 426, 427, 430,
	431, 433, 434, 435, 436, 437, 442, 443, 446, 447,
	448, 451, 452, 453, 454, 455, 456, 458, 461, 462,
	466, 468, 471, 472, 478, 479, 481, 482, 484, 485,
	486, 487, 490, 492, 493, 495, 496, 500, 501, 502,
	509, 510, 514, 515, 516, 517, 520, 521, 522, 523,
	524, 525, 527, 528, 529, 530, 534, 535, 537, 538,
	539, 540, 543, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 532, 0, 369,
	531, 473, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 227,
	0, 375, 0, 268, 0, 0, 0, 0, 168, 169,
	170, 0, 491, 0, 0, 280, 239, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 275, 0, 0, 0, 386, 252, 302,
	259, 251, 499, 0, 489, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 181, 256,
	439, 0, 0, 176, 0, 0, 0, 237, 0, 459,
	0, 307, 536, 0, 0, 298, 0, 0, 0, 0,
	0, 0, 308, 175, 202, 0, 0, 374, 0, 445,
	474, 0, 271, 0, 264, 0, 0, 513, 213, 0,
	0, 0, 0, 415, 269, 354, 405, 0, 0, 0,
	421, 511, 0, 0, 0, 363, 0, 0, 0, 0,
	203, 243, 391, 480, 0, 465, 355, 503, 0, 320,
	464, 279, 178, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 483, 508, 216, 450, 457, 438, 542,
	195, 0, 477, 0, 317, 318, 194, 0, 429, 255,
	0, 0, 383, 506, 507, 0, 557, 206, 533, 0,
	207, 0, 366, 504, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 265, 0, 0, 0,
	285, 0, 0, 0, 0, 419, 0, 460, 498, 0,
	0, 0, 0, 364, 288, 469, 321, 342, 428, 544,
	0, 440, 217, 519, 467, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 296, 0, 0, 0, 0, 358, 0, 0, 361,
	0, 463, 0, 0, 0, 441, 0, 0, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 512, 323, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 196, 337, 0,
	0, 0, 541, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 291, 292, 331, 0, 0, 0, 0,
	0, 0, 385, 396, 0, 0, 432, 0, 497, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 281, 0, 0, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 367, 0, 380, 382, 0, 388, 0,
	393, 0, 394, 404, 408, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 0, 449, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 505, 518,
	315, 526, 244, 283, 0, 0, 345, 0, 198, 0,
	263, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	222, 470, 347, 0, 335, 0, 200, 0, 407, 403,
	287, 182, 0, 0, 0, 0, 0, 0, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	173, 174, 179, 180, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 197, 199, 201, 204, 205, 208, 209,
	210, 211, 212, 215, 219, 220, 221, 223, 224, 225,
	226, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 229, 230, 231, 232, 233, 234, 238, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 253, 254, 257,
	260, 261, 267, 272, 273, 274, 276, 277, 278, 284,
	286, 289, 290, 293, 295, 297, 299, 300, 301, 303,
	304, 305, 306, 309, 310, 311, 312, 313, 314, 316,
	324, 325, 327, 328, 329, 330, 333, 336, 338, 340,
	341, 343, 344, 346, 349, 350, 352, 353, 356, 357,
	359, 362, 365, 368, 370, 371, 372, 373, 376, 377,
	378, 379, 381, 384, 387, 389, 390, 392, 395, 397,
	398, 399, 400, 401, 402, 406, 409, 410, 411, 412,
	414, 416, 417, 418, 420, 422, 423, 424, 425, 426,
	427, 430, 431, 433, 434, 435, 436, 437, 442, 443,
	446, 447, 448, 451, 452, 453, 454, 455, 456, 458,
	461, 462, 466, 468, 471, 472, 478, 479, 481, 482,
	484, 485, 486, 487, 490, 492, 493, 495, 496, 500,
	501, 502, 509, 510, 514, 515, 516, 517, 520, 521,
	522, 523, 524, 525, 527, 528, 529, 530, 534, 535,
	537, 538, 539, 540, 543, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 532,
	0, 369, 531, 473, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 227, 0, 375, 0, 268, 0, 0, 0, 0,
	168, 169, 170, 0, 491, 0, 0, 280, 239, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 275, 0, 0, 0, 386,
	252, 302, 259, 251, 499, 0, 489, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	181, 256, 439, 0, 0, 176, 0, 0, 0, 237,
	0, 459, 0, 307, 536, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 308, 175, 202, 0, 0, 374,
	0, 445, 474, 0, 271, 0, 264, 0, 0, 513,
	213, 0, 0, 0, 0, 415, 269, 354, 405, 0,
	0, 0, 421, 511, 0, 0, 0, 363, 0, 0,
	0, 0, 203, 243, 391, 480, 0, 465, 355, 503,
	0, 320, 464, 279, 178, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 483, 508, 216, 450, 457,
	438, 542, 195, 0, 477, 0, 317, 318, 194, 0,
	429, 255, 0, 0, 383, 506, 507, 0, 557, 206,
	533, 0, 207, 0, 366, 504, 0, 0, 0, 0,
	0, 0, 0, 322, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 265, 0,
	0, 0, 285, 0, 0, 0, 0, 419, 0, 460,
	498, 0, 0, 0, 0, 364, 288, 469, 321, 342,
	428, 544, 0, 440, 217, 519, 467, 0, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 236, 0,
	0, 0, 0, 296, 0, 0, 0, 0, 358, 0,
	0, 361, 0, 463, 0, 0, 0, 441, 0, 0,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 512,
	323, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 196,
	337, 0, 0, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 291, 292, 331, 0, 0,
	0, 0, 0, 0, 385, 396, 0, 0, 432, 0,
	497, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 281, 0, 0, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 367, 0, 380, 382, 0,
	388, 0, 393, 0, 394, 404, 408, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 444, 0, 0,
	449, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	505, 518, 315, 526, 244, 283, 0, 0, 345, 0,
	198, 0, 263, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 222, 470, 347, 0, 335, 0, 200, 0,
	407, 403, 287, 182, 0, 0, 0, 0, 0, 0,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 173, 174, 179, 180, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 197, 199, 201, 204, 205,
	208, 209, 210, 211, 212, 215, 219, 220, 221, 223,
	224, 225, 226, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 229, 230, 231, 232, 233, 234, 238,
	240, 241, 242, 245, 246, 247, 248, 249, 250, 253,
	254, 257, 260, 261, 267, 272, 273, 274, 276, 277,
	278, 284, 286, 289, 290, 293, 295, 297, 299, 300,
	301, 303, 304, 305, 306, 309, 310, 311, 312, 313,
	314, 316, 324, 325, 327, 328, 329, 330, 333, 336,
	338, 340, 341, 343, 344, 346, 349, 350, 352, 353,
	356, 357, 359, 362, 365, 368, 370, 371, 372, 373,
	376, 377, 378, 379, 381, 384, 387, 389, 390, 392,
	395, 397, 398, 399, 400, 401, 402, 406, 409, 410,
	411, 412, 414, 416, 417, 418, 420, 422, 423, 424,
	425, 426, 427, 430, 431, 433, 434, 435, 436, 437,
	442, 443, 446, 447, 448, 451, 452, 453, 454, 455,
	456, 458, 461, 462, 466, 468, 471, 472, 478, 479,
	481, 482, 484, 485, 486, 487, 490, 492, 493, 495,
	496, 500, 501, 502, 509, 510, 514, 515, 516, 517,
	520, 521, 522, 523, 524, 525, 527, 528, 529, 530,
	534, 535, 537, 538, 539, 540, 543, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 532, 0, 369, 531, 473, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 227, 0, 375, 0, 268, 0, 0,
	0, 0, 168, 169, 170, 0, 491, 0, 0, 280,
	239, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 275, 0, 0,
	0, 386, 252, 302, 259, 251, 499, 0, 489, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 181, 256, 439, 0, 0, 176, 0, 0,
	0, 237, 0, 459, 0, 307, 536, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 308, 175, 202, 0,
	0, 374, 0, 445, 474, 0, 271, 0, 264, 0,
	0, 513, 213, 0, 0, 0, 0, 415, 269, 354,
	405, 0, 0, 0, 421, 511, 0, 0, 0, 363,
	0, 0, 0, 0, 203, 243, 391, 480, 0, 465,
	355, 503, 0, 320, 464, 279, 178, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 483, 508, 216,
	450, 457, 438, 542, 195, 0, 477, 0, 317, 318,
	194, 0, 429, 255, 0, 0, 383, 506, 507, 0,
	557, 206, 533, 0, 207, 0, 366, 504, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	265, 0, 0, 0, 285, 0, 0, 0, 0, 419,
	0, 460, 498, 0, 0, 0, 0, 364, 288, 469,
	321, 342, 428, 544, 0, 440, 217, 519, 467, 0,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 0, 0, 296, 0, 0, 0, 0,
	358, 0, 0, 361, 0, 463, 0, 0, 0, 441,
	0, 0, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 512, 323, 326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 196, 337, 1510, 0, 0, 541, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 291, 292, 331,
	0, 0, 0, 0, 0, 0, 385, 396, 0, 0,
	432, 0, 497, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 281, 0, 0, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 367, 0, 380,
	382, 0, 388, 0, 393, 0, 394, 404, 408, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 444,
	0, 0, 449, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 505, 518, 315, 526, 244, 283, 0, 0,
	345, 0, 198, 0, 263, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 222, 470, 347, 0, 335, 0,
	200, 0, 407, 403, 287, 182, 0, 0, 0, 0,
	0, 0, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 173, 174, 179, 180, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 197, 199, 201,
	204, 205, 208, 209, 210, 211, 212, 215, 219, 220,
	221, 223, 224, 225, 226, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 229, 230, 231, 232, 233,
	234, 238, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 253, 254, 257, 260, 261, 267, 272, 273, 274,
	276, 277, 278, 284, 286, 289, 290, 293, 295, 297,
	299, 300, 301, 303, 304, 305, 306, 309, 310, 311,
	312, 313, 314, 316, 324, 325, 327, 328, 329, 330,
	333, 336, 338, 340, 341, 343, 344, 346, 349, 350,
	352, 353, 356, 357, 359, 362, 365, 368, 370, 371,
	372, 373, 376, 377, 378, 379, 381, 384, 387, 389,
	390, 392, 395, 397, 398, 399, 400, 401, 402, 406,
	409, 410, 411, 412, 414, 416, 417, 418, 420, 422,
	423, 424, 425, 426, 427, 430, 431, 433, 434, 435,
	436, 437, 442, 443, 446, 447, 448, 451, 452, 453,
	454, 455, 456, 458, 461, 462, 466, 468, 471, 472,
	478, 479, 481, 482, 484, 485, 486, 487, 490, 492,
	493, 495, 496, 500, 501, 502, 509, 510, 514, 515,
	516, 517, 520, 521, 522, 523, 524, 525, 527, 528,
	529, 530, 534, 535, 537, 538, 539, 540, 543, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 532, 0, 369, 531, 473, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 227, 0, 375, 0, 268,
	0, 1390, 0, 0, 168, 169, 170, 0, 491, 0,
	0, 280, 239, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 275,
	0, 0, 0, 386, 252, 302, 259, 251, 499, 0,
	489, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 181, 256, 439, 0, 0, 176,
	0, 0, 0, 237, 0, 459, 0, 307, 536, 0,
	0, 298, 0, 0, 0, 0, 0, 0, 308, 175,
	202, 0, 0, 374, 0, 445, 474, 0, 271, 0,
	264, 0, 0, 513, 213, 0, 0, 0, 0, 415,
	269, 354, 405, 0, 0, 0, 421, 511, 0, 0,
	0, 363, 0, 0, 0, 0, 203, 243, 391, 480,
	0, 465, 355, 503, 0, 320, 464, 279, 178, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 483,
	508, 216, 450, 457, 438, 542, 195, 0, 477, 0,
	317, 318, 194, 0, 429, 255, 0, 0, 383, 506,
	507, 0, 557, 206, 533, 0, 207, 0, 366, 504,
	0, 0, 0, 0, 0, 0, 0, 322, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 265, 0, 0, 0, 285, 0, 0, 0,
	0, 419, 0, 460, 498, 0, 0, 0, 0, 364,
	288, 469, 321, 342, 428, 544, 0, 440, 217, 519,
	467, 0, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 358, 0, 0, 361, 0, 463, 0, 0,
	0, 441, 0, 0, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 512, 323, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 196, 337, 0, 0, 0, 541, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 291,
	292, 331, 0, 0, 0, 0, 0, 0, 385, 396,
	0, 0, 432, 0, 497, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 281, 0, 0,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 367,
	0, 380, 382, 0, 388, 0, 393, 0, 394, 404,
	408, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	0, 444, 0, 0, 449, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 505, 518, 0, 0, 0, 283,
	0, 0, 345, 0, 0, 0, 263, 315, 526, 244,
	0, 0, 0, 0, 0, 198, 222, 0, 0, 0,
	0, 0, 270, 0, 407, 0, 0, 1313, 470, 347,
	0, 335, 0, 200, 488, 0, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 0, 0, 0, 168, 169, 170,
	0, 1312, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 0, 0, 0, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 459, 0,
	307, 536, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 331, 0, 0, 0, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 315,
	526, 244, 283, 0, 0, 345, 0, 198, 0, 263,
	0, 0, 0, 0, 270, 0, 0, 1297, 0, 222,
	470, 347, 0, 335, 0, 200, 0, 407, 403, 287,
	182, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 173,
	174, 179, 180, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 197, 199, 201, 204, 205, 208, 209, 210,
	211, 212, 215, 219, 220, 221, 223, 224, 225, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	229, 230, 231, 232, 233, 234, 238, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 253, 254, 257, 260,
	261, 267, 272, 273, 274, 276, 277, 278, 284, 286,
	289, 290, 293, 295, 297, 299, 300, 301, 303, 304,
	305, 306, 309, 310, 311, 312, 313, 314, 316, 324,
	325, 327, 328, 329, 330, 333, 336, 338, 340, 341,
	343, 344, 346, 349, 350, 352, 353, 356, 357, 359,
	362, 365, 368, 370, 371, 372, 373, 376, 377, 378,
	379, 381, 384, 387, 389, 390, 392, 395, 397, 398,
	399, 400, 401, 402, 406, 409, 410, 411, 412, 414,
	416, 417, 418, 420, 422, 423, 424, 425, 426, 427,
	430, 431, 433, 434, 435, 436, 437, 442, 443, 446,
	447, 448, 451, 452, 453, 454, 455, 456, 458, 461,
	462, 466, 468, 471, 472, 478, 479, 481, 482, 484,
	485, 486, 487, 490, 492, 493, 495, 496, 500, 501,
	502, 509, 510, 514, 515, 516, 517, 520, 521, 522,
	523, 524, 525, 527, 528, 529, 530, 534, 535, 537,
	538, 539, 540, 543, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 532, 0,
	369, 531, 473, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	227, 0, 375, 0, 268, 0, 0, 0, 0, 168,
	169, 170, 0, 491, 0, 0, 280, 239, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 275, 0, 0, 0, 386, 252,
	302, 259, 251, 499, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 181,
	256, 439, 0, 0, 176, 0, 0, 0, 237, 0,
	459, 0, 307, 536, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 308, 175, 202, 0, 0, 374, 0,
	445, 474, 0, 271, 0, 264, 0, 0, 513, 213,
	0, 0, 0, 0, 415, 269, 354, 405, 0, 0,
	0, 421, 511, 0, 0, 0, 363, 0, 0, 0,
	0, 203, 243, 391, 480, 0, 465, 355, 503, 0,
	320, 464, 279, 178, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 483, 508, 216, 450, 457, 438,
	542, 195, 0, 477, 0, 317, 318, 194, 0, 429,
	255, 0, 0, 383, 506, 507, 0, 557, 206, 533,
	0, 207, 0, 366, 504, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 265, 0, 0,
	0, 285, 0, 0, 0, 0, 419, 0, 460, 498,
	0, 0, 0, 0, 364, 288, 469, 321, 342, 428,
	544, 0, 440, 217, 519, 467, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 358, 0, 0,
	361, 0, 463, 0, 0, 0, 441, 0, 0, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 512, 323,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 196, 337,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 291, 292, 331, 0, 0, 0,
	0, 0, 0, 385, 396, 0, 0, 432, 0, 497,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 281, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 367, 0, 380, 382, 0, 388,
	0, 393, 0, 394, 404, 408, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 449,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 505,
	518, 315, 526, 244, 283, 0, 0, 345, 0, 198,
	0, 263, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 222, 470, 347, 0, 335, 0, 200, 0, 407,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	532, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 227, 0, 375, 0, 268, 0, 0, 0,
	0, 168, 169, 170, 0, 491, 0, 0, 280, 239,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 275, 0, 0, 0,
	386, 252, 302, 259, 251, 499, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 181, 256, 439, 0, 0, 176, 0, 0, 0,
	237, 0, 459, 582, 307, 536, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 441, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	512, 323, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 315, 526, 244, 283, 0, 0, 345,
	0, 198, 0, 263, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 222, 470, 347, 0, 335, 0, 200,
	0, 407, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 0, 491, 0, 0,
	280, 239, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 0,
	0, 0, 386, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 459, 0, 307, 536, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 2563, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 315, 526, 244, 283, 0,
	0, 345, 0, 198, 0, 263, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 222, 470, 347, 0, 335,
	0, 200, 0, 407, 403, 287, 182, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 227, 0, 375, 0,
	268, 0, 0, 0, 0, 168, 169, 170, 0, 491,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 0, 0, 0, 386, 252, 302, 259, 251, 499,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 181, 256, 439, 0, 0,
	176, 0, 0, 0, 237, 0, 459, 0, 307, 536,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 308,
	175, 202, 0, 0, 374, 0, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 265, 0, 0, 0, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 0, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 0, 440, 217,
	519, 467, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	291, 292, 331, 0, 0, 0, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 505, 518, 315, 526, 244,
	283, 0, 0, 345, 0, 198, 0, 263, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 222, 470, 347,
	0, 335, 0, 200, 0, 407, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 0, 0, 0, 168, 2353, 170,
	0, 491, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 0, 0, 0, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 459, 0,
	307, 536, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 331, 0, 0, 0, 0, 0,
	0, 385, 396, 0, 0, 432, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 315,
	526, 244, 283, 0, 0, 345, 0, 198, 0, 263,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 222,
	470, 347, 0, 335, 0, 200, 0, 407, 403, 287,
	182, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 173,
	174, 179, 180, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 197, 199, 201, 204, 205, 208, 209, 210,
	211, 212, 215, 219, 220, 221, 223, 224, 225, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	229, 230, 231, 232, 233, 234, 238, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 253, 254, 257, 260,
	261, 267, 272, 273, 274, 276, 277, 278, 284, 286,
	289, 290, 293, 295, 297, 299, 300, 301, 303, 304,
	305, 306, 309, 310, 311, 312, 313, 314, 316, 324,
	325, 327, 328, 329, 330, 333, 336, 338, 340, 341,
	343, 344, 346, 349, 350, 352, 353, 356, 357, 359,
	362, 365, 368, 370, 371, 372, 373, 376, 377, 378,
	379, 381, 384, 387, 389, 390, 392, 395, 397, 398,
	399, 400, 401, 402, 406, 409, 410, 411, 412, 414,
	416, 417, 418, 420, 422, 423, 424, 425, 426, 427,
	430, 431, 433, 434, 435, 436, 437, 442, 443, 446,
	447, 448, 451, 452, 453, 454, 455, 456, 458, 461,
	462, 466, 468, 471, 472, 478, 479, 481, 482, 484,
	485, 486, 487, 490, 492, 493, 495, 496, 500, 501,
	502, 509, 510, 514, 515, 516, 517, 520, 521, 522,
	523, 524, 525, 527, 528, 529, 530, 534, 535, 537,
	538, 539, 540, 543, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 532, 0,
	369, 531, 473, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	227, 0, 375, 0, 268, 0, 0, 0, 0, 168,
	1963, 170, 0, 491, 0, 0, 280, 239, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 275, 0, 0, 0, 386, 252,
	302, 259, 251, 499, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 181,
	256, 439, 0, 0, 176, 0, 0, 0, 237, 0,
	459, 0, 307, 536, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 308, 175, 202, 0, 0, 374, 0,
	445, 474, 0, 271, 0, 264, 0, 0, 513, 213,
	0, 0, 0, 0, 415, 269, 354, 405, 0, 0,
	0, 421, 511, 0, 0, 0, 363, 0, 0, 0,
	0, 203, 243, 391, 480, 0, 465, 355, 503, 0,
	320, 464, 279, 178, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 483, 508, 216, 450, 457, 438,
	542, 195, 0, 477, 0, 317, 318, 194, 0, 429,
	255, 0, 0, 383, 506, 507, 0, 557, 206, 533,
	0, 207, 0, 366, 504, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 265, 0, 0,
	0, 285, 0, 0, 0, 0, 419, 0, 460, 498,
	0, 0, 0, 0, 364, 288, 469, 321, 342, 428,
	544, 0, 440, 217, 519, 467, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 358, 0, 0,
	361, 0, 463, 0, 0, 0, 441, 0, 0, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 512, 323,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 196, 337,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 291, 292, 331, 0, 0, 0,
	0, 0, 0, 385, 396, 0, 0, 432, 0, 497,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 281, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 367, 0, 380, 382, 0, 388,
	0, 393, 0, 394, 404, 408, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 449,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 505,
	518, 315, 526, 244, 283, 0, 0, 345, 0, 198,
	0, 263, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 222, 470, 347, 0, 335, 0, 200, 0, 407,
	403, 287, 182, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 173, 174, 179, 180, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 197, 199, 201, 204, 205, 208,
	209, 210, 211, 212, 215, 219, 220, 221, 223, 224,
	225, 226, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 229, 230, 231, 232, 233, 234, 238, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 253, 254,
	257, 260, 261, 267, 272, 273, 274, 276, 277, 278,
	284, 286, 289, 290, 293, 295, 297, 299, 300, 301,
	303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
	316, 324, 325, 327, 328, 329, 330, 333, 336, 338,
	340, 341, 343, 344, 346, 349, 350, 352, 353, 356,
	357, 359, 362, 365, 368, 370, 371, 372, 373, 376,
	377, 378, 379, 381, 384, 387, 389, 390, 392, 395,
	397, 398, 399, 400, 401, 402, 406, 409, 410, 411,
	412, 414, 416, 417, 418, 420, 422, 423, 424, 425,
	426, 427, 430, 431, 433, 434, 435, 436, 437, 442,
	443, 446, 447, 448, 451, 452, 453, 454, 455, 456,
	458, 461, 462, 466, 468, 471, 472, 478, 479, 481,
	482, 484, 485, 486, 487, 490, 492, 493, 495, 496,
	500, 501, 502, 509, 510, 514, 515, 516, 517, 520,
	521, 522, 523, 524, 525, 527, 528, 529, 530, 534,
	535, 537, 538, 539, 540, 543, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	532, 0, 369, 531, 473, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 227, 0, 375, 0, 268, 0, 0, 0,
	0, 168, 169, 170, 0, 1669, 0, 0, 280, 239,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 275, 0, 0, 0,
	386, 252, 302, 259, 251, 499, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 181, 256, 439, 0, 0, 176, 0, 0, 0,
	237, 0, 459, 0, 307, 536, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 308, 175, 202, 0, 0,
	374, 0, 445, 474, 0, 271, 0, 264, 0, 0,
	513, 213, 0, 0, 0, 0, 415, 269, 354, 405,
	0, 0, 0, 421, 511, 0, 0, 0, 363, 0,
	0, 0, 0, 203, 243, 391, 480, 0, 465, 355,
	503, 0, 320, 464, 279, 178, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 483, 508, 216, 450,
	457, 438, 542, 195, 0, 477, 0, 317, 318, 194,
	0, 429, 255, 0, 0, 383, 506, 507, 0, 557,
	206, 533, 0, 207, 0, 366, 504, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 265,
	0, 0, 0, 285, 0, 0, 0, 0, 419, 0,
	460, 498, 0, 0, 0, 0, 364, 288, 469, 321,
	342, 428, 544, 0, 440, 217, 519, 467, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 358,
	0, 0, 361, 0, 463, 0, 0, 0, 441, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	512, 323, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	196, 337, 0, 0, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 291, 292, 331, 0,
	0, 0, 0, 0, 0, 385, 396, 0, 0, 432,
	0, 497, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 281, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 367, 0, 380, 382,
	0, 388, 0, 393, 0, 394, 404, 408, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 449, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 505, 518, 315, 526, 244, 283, 0, 0, 345,
	0, 198, 0, 263, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 222, 470, 347, 0, 335, 0, 200,
	0, 407, 403, 287, 182, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 173, 174, 179, 180, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 197, 199, 201, 204,
	205, 208, 209, 210, 211, 212, 215, 219, 220, 221,
	223, 224, 225, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 229, 230, 231, 232, 233, 234,
	238, 240, 241, 242, 245, 246, 247, 248, 249, 250,
	253, 254, 257, 260, 261, 267, 272, 273, 274, 276,
	277, 278, 284, 286, 289, 290, 293, 295, 297, 299,
	300, 301, 303, 304, 305, 306, 309, 310, 311, 312,
	313, 314, 316, 324, 325, 327, 328, 329, 330, 333,
	336, 338, 340, 341, 343, 344, 346, 349, 350, 352,
	353, 356, 357, 359, 362, 365, 368, 370, 371, 372,
	373, 376, 377, 378, 379, 381, 384, 387, 389, 390,
	392, 395, 397, 398, 399, 400, 401, 402, 406, 409,
	410, 411, 412, 414, 416, 417, 418, 420, 422, 423,
	424, 425, 426, 427, 430, 431, 433, 434, 435, 436,
	437, 442, 443, 446, 447, 448, 451, 452, 453, 454,
	455, 456, 458, 461, 462, 466, 468, 471, 472, 478,
	479, 481, 482, 484, 485, 486, 487, 490, 492, 493,
	495, 496, 500, 501, 502, 509, 510, 514, 515, 516,
	517, 520, 521, 522, 523, 524, 525, 527, 528, 529,
	530, 534, 535, 537, 538, 539, 540, 543, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 532, 0, 369, 531, 473, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 227, 0, 375, 0, 268, 0,
	0, 0, 0, 168, 169, 170, 0, 1293, 0, 0,
	280, 239, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 275, 0,
	0, 0, 386, 252, 302, 259, 251, 499, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 181, 256, 439, 0, 0, 176, 0,
	0, 0, 237, 0, 459, 0, 307, 536, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 308, 175, 202,
	0, 0, 374, 0, 445, 474, 0, 271, 0, 264,
	0, 0, 513, 213, 0, 0, 0, 0, 415, 269,
	354, 405, 0, 0, 0, 421, 511, 0, 0, 0,
	363, 0, 0, 0, 0, 203, 243, 391, 480, 0,
	465, 355, 503, 0, 320, 464, 279, 178, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 483, 508,
	216, 450, 457, 438, 542, 195, 0, 477, 0, 317,
	318, 194, 0, 429, 255, 0, 0, 383, 506, 507,
	0, 557, 206, 533, 0, 207, 0, 366, 504, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 265, 0, 0, 0, 285, 0, 0, 0, 0,
	419, 0, 460, 498, 0, 0, 0, 0, 364, 288,
	469, 321, 342, 428, 544, 0, 440, 217, 519, 467,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 296, 0, 0, 0,
	0, 358, 0, 0, 361, 0, 463, 0, 0, 0,
	441, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 512, 323, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 196, 337, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 291, 292,
	331, 0, 0, 0, 0, 0, 0, 385, 396, 0,
	0, 432, 0, 497, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 281, 0, 0, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 367, 0,
	380, 382, 0, 388, 0, 393, 0, 394, 404, 408,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 0, 449, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 505, 518, 315, 526, 244, 283, 0,
	0, 345, 0, 198, 0, 263, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 222, 470, 347, 0, 335,
	0, 200, 0, 407, 403, 287, 182, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 173, 174, 179, 180, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 197, 199,
	201, 204, 205, 208, 209, 210, 211, 212, 215, 219,
	220, 221, 223, 224, 225, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 229, 230, 231, 232,
	233, 234, 238, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 253, 254, 257, 260, 261, 267, 272, 273,
	274, 276, 277, 278, 284, 286, 289, 290, 293, 295,
	297, 299, 300, 301, 303, 304, 305, 306, 309, 310,
	311, 312, 313, 314, 316, 324, 325, 327, 328, 329,
	330, 333, 336, 338, 340, 341, 343, 344, 346, 349,
	350, 352, 353, 356, 357, 359, 362, 365, 368, 370,
	371, 372, 373, 376, 377, 378, 379, 381, 384, 387,
	389, 390, 392, 395, 397, 398, 399, 400, 401, 402,
	406, 409, 410, 411, 412, 414, 416, 417, 418, 420,
	422, 423, 424, 425, 426, 427, 430, 431, 433, 434,
	435, 436, 437, 442, 443, 446, 447, 448, 451, 452,
	453, 454, 455, 456, 458, 461, 462, 466, 468, 471,
	472, 478, 479, 481, 482, 484, 485, 486, 487, 490,
	492, 493, 495, 496, 500, 501, 502, 509, 510, 514,
	515, 516, 517, 520, 521, 522, 523, 524, 525, 527,
	528, 529, 530, 534, 535, 537, 538, 539, 540, 543,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 532, 0, 369, 531, 473, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 227, 0, 375, 0,
	268, 0, 0, 0, 0, 168, 169, 170, 0, 1103,
	0, 0, 280, 239, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	275, 0, 0, 0, 386, 252, 302, 259, 251, 499,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 181, 256, 439, 0, 0,
	176, 0, 0, 0, 237, 0, 459, 0, 307, 536,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 308,
	175, 202, 0, 0, 374, 0, 445, 474, 0, 271,
	0, 264, 0, 0, 513, 213, 0, 0, 0, 0,
	415, 269, 354, 405, 0, 0, 0, 421, 511, 0,
	0, 0, 363, 0, 0, 0, 0, 203, 243, 391,
	480, 0, 465, 355, 503, 0, 320, 464, 279, 178,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	483, 508, 216, 450, 457, 438, 542, 195, 0, 477,
	0, 317, 318, 194, 0, 429, 255, 0, 0, 383,
	506, 507, 0, 557, 206, 533, 0, 207, 0, 366,
	504, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 265, 0, 0, 0, 285, 0, 0,
	0, 0, 419, 0, 460, 498, 0, 0, 0, 0,
	364, 288, 469, 321, 342, 428, 544, 0, 440, 217,
	519, 467, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 358, 0, 0, 361, 0, 463, 0,
	0, 0, 441, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 512, 323, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 196, 337, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	291, 292, 331, 0, 0, 0, 0, 0, 0, 385,
	396, 0, 0, 432, 0, 497, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 281, 0,
	0, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	367, 0, 380, 382, 0, 388, 0, 393, 0, 394,
	404, 408, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 449, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 505, 518, 315, 526, 244,
	283, 0, 0, 345, 0, 198, 0, 263, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 222, 470, 347,
	0, 335, 0, 200, 0, 407, 403, 287, 182, 0,
	0, 0, 0, 0, 0, 488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 173, 174, 179,
	180, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	197, 199, 201, 204, 205, 208, 209, 210, 211, 212,
	215, 219, 220, 221, 223, 224, 225, 226, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 229, 230,
	231, 232, 233, 234, 238, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 253, 254, 257, 260, 261, 267,
	272, 273, 274, 276, 277, 278, 284, 286, 289, 290,
	293, 295, 297, 299, 300, 301, 303, 304, 305, 306,
	309, 310, 311, 312, 313, 314, 316, 324, 325, 327,
	328, 329, 330, 333, 336, 338, 340, 341, 343, 344,
	346, 349, 350, 352, 353, 356, 357, 359, 362, 365,
	368, 370, 371, 372, 373, 376, 377, 378, 379, 381,
	384, 387, 389, 390, 392, 395, 397, 398, 399, 400,
	401, 402, 406, 409, 410, 411, 412, 414, 416, 417,
	418, 420, 422, 423, 424, 425, 426, 427, 430, 431,
	433, 434, 435, 436, 437, 442, 443, 446, 447, 448,
	451, 452, 453, 454, 455, 456, 458, 461, 462, 466,
	468, 471, 472, 478, 479, 481, 482, 484, 485, 486,
	487, 490, 492, 493, 495, 496, 500, 501, 502, 509,
	510, 514, 515, 516, 517, 520, 521, 522, 523, 524,
	525, 527, 528, 529, 530, 534, 535, 537, 538, 539,
	540, 543, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 532, 0, 369, 531,
	473, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 227, 0,
	375, 0, 268, 0, 0, 0, 0, 168, 169, 170,
	0, 491, 0, 0, 280, 239, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 275, 0, 0, 0, 386, 252, 302, 259,
	251, 499, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 181, 256, 439,
	0, 0, 176, 0, 0, 0, 237, 0, 459, 0,
	307, 536, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 308, 175, 202, 0, 0, 374, 0, 445, 474,
	0, 271, 0, 264, 0, 0, 513, 213, 0, 0,
	0, 0, 415, 269, 354, 405, 0, 0, 0, 421,
	511, 0, 0, 0, 363, 0, 0, 0, 0, 203,
	243, 391, 480, 0, 465, 355, 503, 0, 320, 464,
	279, 178, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 483, 508, 216, 450, 457, 438, 542, 195,
	0, 477, 0, 317, 318, 194, 0, 429, 255, 0,
	0, 383, 506, 507, 0, 557, 206, 533, 0, 207,
	0, 366, 504, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 265, 0, 0, 0, 285,
	0, 0, 0, 0, 419, 0, 460, 498, 0, 0,
	0, 0, 364, 288, 469, 321, 342, 428, 544, 0,
	440, 217, 519, 467, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 358, 0, 0, 361, 0,
	463, 0, 0, 0, 441, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 512, 323, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 196, 337, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 291, 292, 331, 0, 0, 0, 0, 0,
	0, 385, 396, 0, 0, 805, 0, 497, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	281, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 367, 0, 380, 382, 0, 388, 0, 393,
	0, 394, 404, 408, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 449, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 505, 518, 0,
	0, 0, 283, 0, 0, 345, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 488,
}

var psqPact = [...]int{
	3059, -1000, -690, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1446, 1514, -1000, 1360,
	-1000, -1000, -1000, 1586, -1000, 223, 796, -1000, 1425, 2350,
	1150, -1000, 43614, 21, -1000, 42010, 20, -191, 43614, -1000,
	-166, -1000, -185, 43614, -167, 30760, -1000, -1000, -604, 13545,
	1247, -292, -294, 43614, -1000, -1000, -1000, 1569, 1033, -1000,
	261, -1000, -1000, -1000, -1000, -1000, -1000, 48426, -1000, -1000,
	-1000, -1000, -1000, 1606, 141, 43614, -1000, 1529, 1033, -1000,
	13545, 1552, 1521, -1000, 11919, -1000, 11919, -8, -1000, -1000,
	21086, -1000, -1000, 28354, 43614, 36374, -79, -1000, 1425, -1000,
	-1000, -1000, -220, -1000, -1000, 704, 690, -1000, -1000, 474,
	45, -20, -50, -50, 6, 1381, 1374, 285, 233, 181,
	-1000, 470, 170, -480, -485, -1000, -23, 170, 170, 170,
	-118, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	-1000, 5, -152, 1425, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43614, -183, 43614, -1000, 73, 43614, 602, 602, -257, 602,
	602, 602, -157, 408, -295, -1000, -169, -116, -196, -123,
	554, -168, -1000, -188, -1000, 19404, -171, 19404, -1000, 1419,
	-1000, -1000, -1000, -1000, 433, -1000, 4, -1000, -1000, -1000,
	-1000, -1000, 43614, 47624, 262, 190, -1000, -1000, -1000, -1000,
	-261, -1000, -1000, 511, 632, 13545, 353, -1000, 2232, 123,
	-1000, -1000, -1000, -1000, -1000, 42, 14358, 14358, 14358, 14358,
	-1000, -1000, 648, 648, 648, 648, 14358, 648, 22740, 648,
	648, 648, 648, 13545, 648, 648, 648, -1000, 648, 648,
	648, 648, 648, 648, 648, 648, 648, 648, 648, 648,
	648, 648, 648, 648, 648, 648, 648, 648, 648, 648,
	648, 648, 648, 648, 648, 648, 648, 648, 648, 648,
	648, 648, 648, 648, 648, 648, 648, 648, 71, 648,
	648, 648, 648, 648, -1000, -1000, -1000, -1000, 648, 648,
	648, 648, 648, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27552, -1000, 10293, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43614, -1000, 648, 43614,
	43614, -99, 1529, 1033, -1000, 1569, 1540, 261, -1000, 1539,
	898, 897, 461, 1033, 616, 43614, -1000, 731, -1000, 1017,
	-1000, -1000, -1000, -1000, -1000, 888, 13545, -1000, -1000, 1124,
	1581, -1000, 26750, 66, 1357, 1580, 41208, -1000, -8, -8,
	686, 20245, -351, -1000, -1000, -1000, 177, 40406, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1419, 755, 43614, -1000, -1000, 3548,
	482, -1000, 790, -1000, 752, -1000, 758, 13545, -128, 19,
	482, 16, 15, 14, -1000, -406, -1000, -1000, -1000, -1000,
	-1000, 170, 170, 170, 219, 2350, -1000, -1000, -1000, -1000,
	39593, 482, -1000, 783, -1000, 274, 43, 111, 111, 482,
	-1000, -1000, 43614, 482, 482, 43614, 43614, -18, -1000, -1000,
	-1000, -1000, 43614, 482, 271, 258, 482, 482, 43614, 482,
	-1000, -1000, 1067, -1000, -1000, -1000, 170, 170, 428, 426,
	422, 170, 418, -96, 1434, 416, 169, 1430, 1429, 43614,
	780, 437, -1000, 43614, -1000, -140, 185, 482, 166, 1425,
	677, 3, 18, 482, -13, -13, 43614, -1000, 21927, -1000,
	-1000, 414, 13545, -1000, 599, 554, 554, -1000, -1000, -1000,
	-1000, -1000, 602, 43614, 599, -1000, -1000, -1000, 554, 602,
	43614, 602, 602, 602, 602, 554, 554, 554, 602, 43614,
	43614, 43614, 43614, 43614, 43614, 43614, 43614, 43614, 19404, -1000,
	1144, -1000, -1000, -1000, 19404, 19404, -1000, -1000, -1000, -170,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -407,
	649, 38791, -1000, -630, -632, -633, -1000, -1000, -1000, -634,
	-635, -1000, -1000, -1000, 13545, 13545, 13545, -507, -1000, 380,
	14358, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 355, 213,
	14358, 14358, 14358, 1339, 14358, 14358, 14358, 14358, 14358, 14358,
	14358, 14358, 14358, 14358, 14358, 14358, 33968, 6794, 6794, 123,
	123, 123, 123, -1000, 11919, 13545, 13545, 123, -1000, 482,
	37989, 11919, 11919, 13545, 1409, 173, 632, 43614, -1000, 461,
	-1000, -1000, -1000, 425, -1000, 43614, 43614, 55, 13545, 13545,
	13545, 13545, 13545, 13545, 9480, 13545, 13545, 13545, 13545, 13545,
	13545, 13545, 13545, 13545, 13545, 13545, 13545, 13545, 13545, 13545,
	13545, 13545, 13545, 13545, 13545, 13545, 13545, 13545, 13545, 13545,
	13545, 8667, 21927, 11919, 11919, 11919, 11919, 11919, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	63, 904, 767, 549, -1000, 638, -1000, -444, 31562, 13545,
	1579, 813, 43614, -1000, -1000, -1000, 1529, -1000, 1529, 904,
	1527, 1022, 11919, -1000, -1000, 1527, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 461, -1000, 43614, 616, 1510, 43614,
	1001, 13545, 13545, 613, -1000, 751, 27, -1000, 43614, -1000,
	-1000, 46822, -1000, -1000, 18563, 43614, 231, 43614, -1000, 29958,
	37187, 17722, -351, -1000, 17722, 582, -1000, -328, -359, 12732,
	120, -1000, -1000, -1000, 474, 24344, 505, 120, -236, -1000,
	-1000, -1000, 758, -1000, 758, 758, 758, 758, 70, 70,
	70, 70, -1000, -1000, -1000, -1000, -1000, 768, 766, -1000,
	758, 758, 758, 758, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -26, -1000, 13545, -108,
	36374, 1449, 357, 953, -140, -12, 805, 482, 482, 482,
	-12, -1000, 516, 491, 457, 1551, -1000, -1000, 610, -1000,
	43614, -149, -1000, -40, -1000, 36374, 482, 255, 111, 482,
	-1000, 482, -1000, -1000, 509, -164, -556, 43614, -149, 33968,
	-1000, -1000, -1000, 482, -1000, -1000, -1000, -2, -1000, -1000,
	-1000, -1000, 33968, 33968, -1000, -1000, -1000, 398, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -685, 43614, -1000, -1000, 9, -146,
	-106, -67, -75, 43614, -1000, -1000, -54, 43614, 43614, -13,
	940, 43614, 1456, 43614, -1000, -1000, -1000, -1000, -1000, 632,
	43614, -1000, -1000, 602, 602, -1000, -1000, 43614, 602, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 602, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43614,
	-1000, -1000, -1000, -1000, 43614, -1000, -1000, -1000, -1000, -234,
	-330, 238, -1000, -1000, -1000, -1000, 1530, -1000, 632, 228,
	-1000, 648, -1000, -1000, 295, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 355, 14358, 14358, 14358, 1218, 1, 1739, 355,
	1726, 837, 269, 269, 320, 320, 127, 127, 127, 127,
	127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	396, -1000, 696, -1000, 847, 896, 461, -1000, 696, 696,
	932, 11919, -1000, -1000, 215, -1000, 13545, 461, -1000, -1000,
	461, 606, 603, 1574, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 632, 953, 953, 953, 953,
	953, 13545, 875, -1000, -1000, -1000, 1361, 1358, 461, 511,
	461, 600, -1000, 1355, 953, 1351, 1347, 1344, 933, 1338,
	1332, 1321, 953, 953, 953, 874, 1315, 1300, 1286, 1280,
	1279, 1272, 1228, 1157, 1139, 953, 461, 11919, 11919, 591,
	648, 61, -1000, 696, 461, 461, 696, 696, 21927, -1000,
	43614, -1000, -618, -1000, -369, 150, -1000, 46020, -1000, -1000,
	461, 6551, -1000, 45218, -1000, -1000, -1000, -1000, -1000, 35572,
	892, 1527, -1000, -1000, 648, 743, -1000, -1000, 632, 632,
	13545, -1000, -1000, -1000, 145, -1000, -1000, -1000, 54, 1565,
	939, 43614, 648, -1000, 25948, -1000, 770, 1487, -1000, -1000,
	-1000, 1506, 25146, -1000, 648, 648, 43614, 903, 814, -1000,
	53, -1000, 582, -351, -334, -1000, -1000, -1000, -1000, 632,
	-1000, 452, -1000, 319, -1000, -42, -1000, -1000, -1000, -1000,
	-1000, -1000, 1348, -255, -1000, -1000, -1000, -134, 70, -1000,
	-1000, -1000, 34770, 99, 99, -227, -1000, -1000, -1000, 395,
	395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1095, -1000, -108, -1000, -1000, 388, -1000, -1000, 1352,
	43614, -1000, -1000, 490, 1449, 2, 43614, 212, 936, -1000,
	805, 805, 805, 43614, -1000, -1000, -1000, -1000, -1000, -1000,
	43614, 152, 727, -1000, -156, -1000, -1000, 725, 765, 482,
	482, -1000, -1000, 1410, 188, -1000, -1000, -526, -1000, -1000,
	-149, -156, 120, -1000, 482, -1000, -1000, -1000, -1000, -695,
	701, 43614, -131, 43614, 43614, 43614, 43614, 43614, 40, -1000,
	760, 424, -1000, -1000, -4, -1000, 43614, 43614, 149, -1000,
	-1000, -1000, 554, -1000, -1000, 554, -1000, -1000, -1000, -1000,
	-1000, 1404, 43614, -335, -657, -1000, -654, 13545, -1000, -1000,
	-1000, -1000, 1186, -1, 1739, 14358, 14358, -1000, -1000, 11919,
	-445, 266, 266, 33968, -1000, -1000, -1000, 13545, 13545, 885,
	192, -1000, 13545, 673, -1000, -1000, 13545, 13545, 13545, 461,
	-1000, -1000, -1000, -1000, -1000, 1572, -1000, 13545, 13545, 13545,
	-1000, -1000, 13545, 13545, -1000, 13545, 13545, 23542, 461, 23542,
	13545, 13545, 23542, -1000, -1000, -1000, -1000, 23542, 13545, 13545,
	13545, 13545, 13545, 13545, 13545, 13545, 13545, -1000, -1000, 696,
	696, 11919, 21927, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 150, -1000, 111, 111, 111, -1000, -1000,
	-1000, -1000, -1000, -1000, 574, 1526, -1000, 1037, 1565, -1000,
	29958, 1527, -1000, -1000, 43614, -1000, 6794, 16881, 1529, 13545,
	-1000, 1437, 596, -1000, 165, 515, -1000, -1000, 11106, 593,
	1034, 52, 43614, 29958, 29958, 29958, 29958, 29958, -1000, 977,
	913, -1000, 1004, 984, 1029, 43614, -1000, 589, 461, 1540,
	25146, 261, 13545, 31562, 496, 29958, -1000, -1000, 29958, 43614,
	16040, -1000, -1000, -341, -364, -1000, -1000, -1000, 474, -1000,
	-1000, 421, 1504, 1345, -1000, -1000, -1000, -1000, -1000, 99,
	99, -1000, -1000, -1000, -1000, -1000, -1000, 584, -1000, 579,
	-164, -1000, -1000, 482, -1000, -1000, -1000, 43614, -1000, 1448,
	43614, 931, 930, 929, -1000, 524, 1550, 43614, -1000, -1000,
	43614, -108, 43614, -1000, -1000, -1000, 5674, -1000, -1000, -1000,
	-156, -1000, -1000, -1000, -1000, -1000, -1000, 731, -1000, -1000,
	-1000, 608, -1000, -1000, -1000, -1000, -147, -107, 467, -1000,
	-1000, 43614, 130, -1000, 43614, -1000, -1000, -1000, 602, 602,
	-1000, -1000, 1396, -1000, 482, 953, 14358, 14358, -1000, 123,
	-1000, 648, 461, 758, 758, -1000, 758, -1000, -1000, 758,
	-181, 758, -184, 758, -1000, -1000, 461, 461, 815, 750,
	-413, -1000, 632, 13545, 1131, 1090, 953, -1000, 13545, 953,
	953, 953, -1000, 632, 933, 1087, 544, -1000, -1000, -1000,
	-1000, 552, 953, 1050, -610, 461, 565, 565, 565, 565,
	565, 549, 549, 549, 549, -1000, -1000, 461, -1000, -1000,
	1515, 1515, 1515, 44416, 43614, -1000, -1000, -1000, 1563, 526,
	-1000, -1000, -1000, -1000, -1000, 632, 254, -1000, 43614, 13545,
	648, -1000, 306, 43614, 648, 43614, 906, 1487, 843, 912,
	1568, -1000, -1000, -1000, -1000, 902, -1000, 884, -1000, -1000,
	731, -1000, -1000, 767, 461, 1018, 1565, 29958, 870, 870,
	-1000, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 311,
	4276, 1591, -1000, 367, -1000, 444, 136, 326, -1000, -1000,
	-1000, 253, 248, -1000, 43614, 742, -1000, -1000, -1000, 70,
	365, 70, -1000, -1000, -1000, 731, -1000, -1000, 43614, 43614,
	43614, 43614, -1000, -1000, -1000, 546, -1000, 13545, -1000, -1000,
	-1000, 435, 435, -1000, -1000, -1000, 1466, -456, 43614, 43614,
	43614, 43614, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 123, 14358, -1000, -1000, 70, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13545, -1000, 13545, -1000,
	1529, 363, 632, 13545, 13545, -1000, 953, -1000, -1000, -1000,
	461, 23542, -1000, 23542, -1000, 13545, 146, 266, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 648,
	1439, 648, 648, -1000, -1000, 1556, 1546, 1590, -1000, 632,
	-1000, 648, -1000, 50, 515, -1000, 1541, -1000, -1000, 13545,
	717, -1000, 13545, -1000, -1000, -1000, -1000, -1000, -1000, 6794,
	1541, 870, -1000, -1000, 134, -1000, 13545, -1000, -1000, -1000,
	2761, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 715, 13545, -1000, -1000, -1000, 1465, -1000, -1000, -1000,
	524, -81, 953, -1000, -1000, 261, -1000, 21927, -1000, -1000,
	709, 778, -1000, -90, -1000, 953, 953, 461, -1000, 953,
	953, -1000, -1000, 544, -1000, 712, -1000, 146, 461, 899,
	-1000, -1000, 6794, -1000, 29156, -1000, 1538, 1534, 33166, 33166,
	-1000, 13545, 13545, 43614, 515, 43614, 1529, 632, 43614, 632,
	-271, 1529, -1000, 953, -1000, 648, 648, 648, 648, 648,
	43614, 900, 261, -1000, -1000, -455, 513, -1000, 164, 43614,
	43614, 461, -56, -459, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13545, -1000, 461, 878, -1000, -547, -1000, 541, -1000,
	-1000, -1000, -1000, -1000, 541, 541, 632, 511, 471, -1000,
	-1000, 534, 461, 648, -1000, -1000, 531, -1000, -455, -1000,
	-349, 21927, 15199, 508, -1000, -1000, 995, -450, -468, 933,
	-1000, -645, -1000, -1000, 32364, -1000, -1000, -1000, -1000, 31562,
	42812, -443, -91, -1000, -27, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 608, -1000, 987, -1000, 461, -1000, -1000, -1000,
	476, -1000, 2444, -557, 877, -1000, -414, -1000, -1000, -1000,
	299, 360, -1000, -1000, -1000, -1000, -1000, -133, -456, -457,
	-1000, -1000, 42812, -549, 120, 6794, -1000, 876, 830, 1578,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -466, -1000,
	-1000, 1447, -271, -1000, 1589, -1000, 1587, 400, 400, -477,
	-558, -1000, -1000, -1000, -1000, -1000, -71, 647, -1000, -1000,
	6794, -1000, -1000, -1000, 148, 148, -1000, -1000,
}

var psqPgo = [...]int{
	0, 1984, 20, 65, 228, 27, 225, 103, 1983, 1982,
	1981, 1980, 1979, 1977, 1974, 396, 395, 391, 1973, 1972,
	1970, 1967, 1965, 1962, 1961, 1959, 1956, 1955, 1953, 378,
	141, 221, 147, 1952, 1948, 1947, 1941, 1938, 94, 156,
	153, 1937, 1936, 1935, 1933, 1932, 171, 169, 165, 1363,
	1931, 149, 90, 1930, 1929, 1928, 1927, 1926, 1925, 1922,
	1921, 1920, 1919, 1916, 1914, 1913, 1912, 1910, 168, 1390,
	1909, 18, 1906, 54, 1905, 1895, 1894, 1893, 1892, 1891,
	1885, 1882, 124, 1881, 1880, 1872, 227, 1870, 1868, 203,
	83, 86, 1864, 1862, 81, 1860, 136, 1859, 1858, 1856,
	148, 1850, 5917, 1849, 55, 46, 1846, 47, 62, 43,
	38, 26, 14, 1844, 1843, 52, 75, 1841, 1840, 69,
	1833, 77, 84, 1831, 1828, 19, 3, 1824, 1, 4,
	2, 48, 1815, 1814, 87, 1812, 1809, 1807, 76, 1806,
	1805, 39, 1803, 73, 110, 82, 51, 1800, 1798, 31,
	1797, 1796, 1795, 1793, 1789, 30, 1788, 1785, 1784, 125,
	93, 143, 36, 35, 49, 117, 1783, 40, 57, 1780,
	120, 122, 1779, 1777, 1776, 33, 1774, 34, 108, 98,
	29, 85, 1773, 1772, 1435, 224, 1769, 28, 1767, 45,
	23, 1766, 80, 24, 1765, 138, 1764, 50, 142, 106,
	139, 1762, 1761, 1759, 1751, 176, 1749, 1747, 1745, 67,
	129, 131, 70, 1740, 398, 1739, 1736, 71, 2812, 1508,
	3204, 44, 140, 1728, 1727, 1726, 4378, 133, 118, 12,
	1724, 151, 1723, 1722, 1721, 251, 144, 92, 1370, 32,
	1719, 1716, 7, 1715, 1711, 1709, 1708, 1706, 1701, 78,
	254, 42, 16, 72, 150, 60, 1692, 1691, 100, 61,
	1690, 137, 134, 109, 91, 1689, 145, 126, 107, 1688,
	204, 1684, 1682, 1675, 1673, 79, 1672, 1667, 1666, 1663,
	132, 127, 104, 68, 1662, 63, 97, 130, 128, 17,
	1660, 6, 41, 37, 15, 89, 195, 1659, 0, 1656,
	8, 152, 381, 1386, 1655, 1654, 5, 9, 11, 1653,
	1652, 1651, 1648, 121, 1636, 1633, 1632, 1631, 13, 25,
	10, 22, 1630, 1626, 6261, 4335, 102, 1620, 1592, 287,
}

//line psql.y:6213
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterSchemaUnion() *ast.AlterSchema {
	v, _ := st.union.(*ast.AlterSchema)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 322, 323, 323, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 298, 298,
	298, 301, 301, 26, 64, 29, 29, 28, 28, 31,
	31, 30, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 7, 7, 7, 13, 14, 6, 15, 15,
	76, 76, 16, 17, 17, 17, 17, 326, 326, 136,
	136, 134, 134, 135, 135, 18, 19, 19, 200, 200,
	199, 199, 199, 201, 201, 201, 201, 238, 238, 20,
	20, 20, 20, 20, 87, 87, 300, 300, 299, 291,
	291, 290, 290, 289, 297, 297, 296, 296, 295, 33,
	36, 37, 43, 43, 43, 43, 44, 45, 302, 271,
	50, 50, 49, 49, 49, 49, 49, 49, 51, 51,
	47, 47, 46, 46, 48, 48, 273, 273, 260, 260,
	272, 272, 272, 272, 272, 272, 272, 259, 259, 97,
	97, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 317, 317, 317, 316,
	316, 183, 183, 183, 183, 183, 183, 183, 183, 106,
	106, 115, 115, 115, 115, 115, 104, 104, 105, 103,
	103, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 114, 114, 110, 110,
	110, 111, 111, 111, 112, 112, 318, 318, 318, 318,
	242, 242, 242, 242, 245, 245, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 244, 244, 244, 244, 244,
	246, 246, 246, 246, 246, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 248, 248, 248, 248, 248, 248, 248, 248, 258,
	258, 249, 249, 254, 255, 256, 256, 256, 257, 257,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 253,
	253, 252, 252, 252, 261, 285, 285, 284, 284, 282,
	282, 282, 282, 282, 270, 270, 279, 279, 279, 279,
	279, 269, 269, 265, 265, 265, 266, 266, 267, 267,
	264, 264, 268, 268, 281, 281, 280, 280, 262, 262,
	263, 263, 287, 319, 319, 319, 319, 319, 320, 320,
	288, 309, 311, 311, 311, 310, 310, 307, 308, 306,
	306, 306, 306, 306, 73, 73, 73, 212, 212, 213,
	213, 277, 277, 276, 276, 276, 278, 278, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 208, 208, 208, 305, 305, 305, 305,
	305, 305, 304, 304, 304, 274, 274, 274, 303, 303,
	52, 52, 168, 168, 35, 41, 41, 41, 41, 41,
	41, 40, 40, 40, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 42, 42, 39, 39, 39, 39,
	39, 39, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 124, 126, 127, 127, 125, 125,
	125, 125, 125, 125, 54, 54, 53, 53, 129, 128,
	130, 130, 130, 22, 34, 34, 23, 23, 23, 23,
	24, 24, 55, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 207, 207, 215, 215, 206, 206, 231,
	231, 231, 209, 209, 209, 315, 315, 315, 203, 203,
	57, 57, 57, 59, 59, 60, 61, 61, 233, 233,
	234, 234, 62, 63, 74, 74, 74, 74, 74, 74,
	77, 77, 77, 9, 9, 9, 9, 70, 70, 70,
	8, 8, 58, 58, 65, 312, 312, 313, 314, 314,
	314, 314, 66, 25, 25, 25, 25, 25, 25, 93,
	93, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 88, 88, 88, 83, 83, 327, 27, 328,
	68, 69, 69, 86, 86, 86, 80, 80, 80, 85,
	85, 85, 10, 10, 11, 191, 191, 12, 12, 90,
	90, 92, 92, 92, 92, 92, 94, 94, 94, 94,
	94, 94, 94, 89, 89, 91, 91, 91, 91, 223,
	223, 223, 222, 222, 118, 118, 120, 119, 119, 121,
	121, 122, 122, 122, 122, 166, 166, 144, 189, 189,
	187, 187, 188, 188, 190, 190, 190, 190, 123, 123,
	123, 123, 131, 131, 132, 132, 133, 133, 32, 232,
	232, 229, 229, 229, 228, 228, 137, 137, 137, 139,
	138, 138, 138, 138, 140, 140, 142, 142, 141, 141,
	143, 148, 148, 147, 147, 145, 145, 145, 145, 146,
	146, 146, 146, 149, 149, 102, 102, 102, 102, 102,
	102, 113, 113, 113, 113, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 75, 75, 75, 204, 204, 150, 150,
	158, 158, 158, 158, 151, 151, 151, 151, 151, 151,
	151, 159, 159, 159, 165, 160, 160, 156, 156, 156,
	156, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 240,
	240, 294, 294, 293, 293, 292, 292, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 329, 329,
	250, 250, 250, 157, 157, 157, 157, 157, 84, 84,
	84, 84, 84, 237, 237, 237, 241, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 171, 171, 81, 81, 169, 169, 170, 172,
	172, 167, 167, 167, 153, 153, 173, 173, 174, 174,
	175, 175, 177, 176, 176, 178, 179, 179, 179, 180,
	180, 181, 181, 181, 96, 96, 95, 95, 71, 71,
	72, 72, 72, 100, 100, 101, 101, 101, 98, 98,
	99, 99, 184, 184, 185, 152, 152, 152, 152, 152,
	186, 186, 186, 186, 192, 192, 162, 162, 164, 164,
	163, 117, 193, 193, 197, 194, 194, 198, 198, 198,
	198, 198, 195, 195, 196, 196, 225, 225, 225, 202,
	202, 214, 214, 210, 210, 211, 211, 205, 205, 216,
	216, 216, 67, 161, 161, 286, 286, 283, 220, 220,
	220, 221, 221, 224, 226, 226, 226, 230, 230, 227,
	227, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 324, 325, 235, 236, 236, 236,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 2, 5, 7, 8, 6, 7,
	1, 1, 10, 10, 9, 8, 8, 1, 1, 1,
	3, 1, 3, 1, 3, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 5, 11, 2, 0, 2, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 1, 1, 3, 3, 3,
	6, 4, 7, 8, 8, 8, 6, 3, 1, 4,
	0, 1, 1, 1, 1, 2, 2, 2, 0, 1,
	4, 4, 4, 4, 4, 4, 2, 4, 1, 3,
	1, 1, 3, 4, 3, 3, 3, 5, 10, 0,
	2, 0, 2, 3, 5, 3, 4, 2, 3, 2,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 5,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 0, 0, 1, 1, 0, 1,
	0, 3, 3, 2, 2, 2, 1, 2, 2, 0,
	1, 0, 2, 2, 5, 0, 1, 1, 2, 1,
	2, 1, 1, 3, 0, 1, 4, 3, 3, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 1, 3, 3, 4, 3, 1,
	3, 1, 7, 6, 7, 7, 8, 8, 0, 1,
	5, 2, 1, 1, 1, 0, 1, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 1, 1, 2, 0,
	1, 0, 1, 1, 3, 2, 1, 2, 4, 4,
	3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 2, 3, 0, 1, 5, 1, 3,
	7, 1, 3, 3, 1, 2, 2, 2, 5, 5,
	5, 6, 8, 5, 5, 4, 4, 4, 6, 5,
	5, 2, 2, 2, 2, 3, 3, 3, 4, 3,
	3, 1, 3, 5, 1, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 10, 3, 8, 6, 6, 6,
	13, 8, 6, 10, 8, 4, 1, 3, 3, 6,
	7, 7, 8, 4, 0, 1, 0, 1, 3, 3,
	1, 1, 2, 3, 3, 5, 7, 6, 6, 5,
	3, 2, 3, 3, 3, 7, 3, 3, 3, 4,
	7, 5, 2, 4, 4, 4, 4, 4, 5, 5,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 4, 4, 4, 4,
	4, 5, 3, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 1, 1,
	2, 1, 3, 1, 2, 1, 1, 5, 0, 1,
	0, 1, 2, 3, 0, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 3, 2, 2, 3, 1, 3, 2, 1, 2,
	1, 2, 2, 3, 3, 6, 4, 7, 6, 1,
	3, 2, 2, 2, 1, 1, 1, 3, 2, 1,
	1, 1, 0, 1, 1, 0, 3, 0, 7, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 5, 5, 4, 0, 2, 4, 4, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 3, 1,
	1, 1, 4, 3, 1, 3, 4, 3, 0, 3,
	1, 3, 1, 3, 1, 1, 3, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 1, 1, 2, 6, 5, 6, 6, 0,
	2, 3, 3, 0, 2, 3, 3, 2, 3, 1,
	6, 3, 4, 3, 1, 3, 4, 5, 6, 3,
	4, 5, 6, 3, 4, 1, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 3, 1, 1, 2, 2, 2,
	2, 1, 1, 2, 9, 6, 6, 6, 2, 2,
	3, 3, 3, 1, 1, 1, 0, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 5, 5,
	6, 4, 4, 8, 6, 8, 6, 8, 5, 4,
	2, 2, 1, 2, 2, 2, 8, 8, 6, 5,
	4, 4, 4, 4, 4, 7, 4, 6, 6, 6,
	4, 4, 4, 7, 8, 6, 5, 6, 8, 11,
	7, 8, 8, 9, 4, 4, 4, 4, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
	2, 0, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 2, 3, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 1, 0, 2, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 2,
	1, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 2, 0, 3, 0, 2,
	0, 1, 3, 1, 3, 2, 0, 1, 1, 0,
	1, 2, 4, 4, 0, 3, 1, 1, 0, 4,
	0, 1, 1, 0, 3, 1, 3, 2, 1, 1,
	0, 1, 2, 4, 2, 2, 1, 5, 4, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 0, 3, 0, 1, 0,
	1, 1, 5, 0, 1, 0, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -322, -1, -5, -27, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -55, -56, -57,
	-59, -60, -61, -62, -63, -8, -58, -25, -26, -64,
	-65, -66, -67, -10, -11, -12, -3, -2, -7, -327,
	9, 10, -76, -28, 32, -36, -43, 480, -44, -37,
	-33, 481, -45, 483, 482, 520, 484, 513, 337, 565,
	566, 568, 569, 570, 571, -77, 518, 519, 487, 36,
	173, 33, 34, 37, 526, 527, 490, -4, -29, 8,
	-324, 11, 688, 515, 514, 28, -6, 722, 348, -323,
	854, -184, -185, 22, 33, 29, -181, -177, -86, -185,
	20, 18, 7, 38, -68, -328, -68, -68, 12, 13,
	-68, -271, -273, 348, 416, 348, -68, -50, -49, -47,
	-46, -48, -51, 31, -41, -40, -42, -38, -39, -278,
	486, 481, 488, 489, 689, 384, 383, 381, 382, 482,
	338, 483, 33, 722, 725, -275, -51, 363, 365, 833,
	494, 836, 837, 840, 841, 847, 848, 849, 385, 7,
	-35, 203, -68, -230, -226, -298, -218, -219, 351, 352,
	353, 69, 70, 71, 72, 506, 486, 754, 555, 73,
	74, 481, 42, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 565, 402, 579, 573, 720, 84, 19, 85,
	37, 86, 507, 543, 87, 88, 590, 593, 89, 90,
	91, 92, 93, 521, 626, 94, 568, 655, 365, 95,
	96, 97, 833, 98, 99, 100, 101, 342, 102, 112,
	113, 114, 115, 116, 117, 659, 669, 490, 118, 359,
	119, 120, 121, 544, 13, 122, 123, 124, 125, 126,
	127, 384, 381, 128, 129, 582, 482, 130, 733, 383,
	131, 132, 607, 823, 517, 629, 763, 133, 346, 527,
	26, 515, 134, 135, 136, 376, 137, 138, 139, 554,
	358, 764, 338, 816, 140, 633, 141, 41, 647, 142,
	143, 736, 737, 144, 111, 145, 674, 146, 498, 147,
	148, 149, 382, 150, 151, 152, 153, 494, 505, 154,
	155, 156, 157, 158, 159, 11, 160, 577, 578, 476,
	552, 649, 604, 701, 161, 162, 702, 163, 164, 165,
	166, 738, 375, 167, 395, 35, 168, 721, 169, 556,
	170, 171, 650, 172, 173, 819, 174, 33, 771, 175,
	176, 718, 177, 178, 528, 549, 179, 180, 679, 181,
	325, 682, 182, 538, 646, 183, 595, 776, 184, 322,
	185, 186, 187, 188, 510, 344, 189, 190, 191, 192,
	778, 193, 779, 585, 194, 745, 380, 195, 781, 196,
	197, 545, 198, 783, 785, 199, 746, 200, 201, 202,
	203, 204, 205, 40, 786, 529, 206, 841, 787, 207,
	208, 209, 210, 790, 211, 526, 212, 213, 214, 638,
	215, 533, 216, 217, 218, 219, 220, 221, 651, 581,
	222, 223, 749, 224, 225, 226, 227, 228, 571, 483,
	654, 688, 229, 230, 798, 512, 231, 232, 233, 801,
	569, 234, 235, 236, 237, 238, 239, 570, 240, 492,
	640, 241, 242, 684, 553, 548, 243, 657, 244, 648,
	32, 245, 246, 324, 513, 807, 808, 575, 247, 248,
	546, 249, 250, 566, 251, 252, 253, 254, 851, 387,
	255, 355, 256, 257, 692, 258, 259, 751, 641, 385,
	260, 261, 262, 550, 596, 811, 586, 587, 567, 263,
	264, 534, 700, 520, 265, 266, 267, 268, 812, 656,
	269, 270, 271, 272, 273, 274, 12, 275, 276, 277,
	278, 323, 320, 591, 279, 280, 495, 281, 282, 283,
	284, 725, 572, 285, 652, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 296, 297, 589, 298, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	493, -68, 493, -141, -226, 493, -195, 625, -215, 627,
	640, 635, 633, -207, 636, 638, 533, -315, 647, 493,
	642, 480, 637, 645, 542, -298, 433, 851, 393, 593,
	632, 630, 648, 819, -226, 567, -233, 572, -220, -298,
	-218, -219, 570, -141, -74, 816, 485, 484, -235, -235,
	-88, 819, 821, -160, -102, 400, -113, -116, -107, -108,
	-154, -155, -156, -157, -114, -167, 422, 423, 430, 401,
	-165, -117, 26, 718, 690, 689, 433, 31, 476, 331,
	332, 692, 693, 403, 320, 665, 666, -115, 660, 667,
	662, 695, 696, 376, 697, 366, 368, 367, 698, 699,
	700, 605, 606, 701, 702, 703, 369, 370, 371, 372,
	373, 374, 375, 704, 707, 705, 706, 708, 709, 710,
	715, 716, 711, 712, 713, 714, 717, -220, -226, 498,
	659, 492, 428, 688, -109, -105, -2, -163, 658, 663,
	664, 668, 661, -298, -218, -219, -111, -110, -150, 354,
	360, 364, 361, -321, 377, -324, 359, 358, 355, 356,
	357, 378, 379, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 117, 641, 641, -141, -68,
	-68, -68, -175, -86, -177, -4, -2, -324, 8, -68,
	-2, -3, -7, -29, -31, 749, -30, -226, 12, 418,
	-141, -180, -181, -6, -2, -102, 19, 23, 24, -69,
	-91, 424, -102, -226, -69, -91, -205, 497, -68, -68,
	-194, -238, 567, -198, 648, 647, -221, -196, -220, -217,
	-195, 646, 23, 485, 484, 399, 43, 728, 25, 27,
	44, 45, 433, 388, 403, 690, 504, 432, 625, 500,
	38, 46, 508, 480, 335, 47, 660, 48, 49, 662,
	658, 665, 31, 50, 28, 24, 36, 406, 407, 734,
	379, 51, 22, 509, 52, 14, 632, 53, 16, 17,
	54, 418, 55, 333, 56, 29, 415, 57, 329, 741,
	389, 331, 416, 20, 663, 664, 336, 400, 58, 377,
	21, 339, 653, 397, 18, 334, 59, 60, 499, 511,
	815, 332, 8, 61, 62, 63, 64, 65, 493, 66,
	405, 496, 390, 378, 7, 394, 643, 340, 67, 68,
	404, 15, 752, 722, 593, -272, 416, -259, -263, -220,
	508, -288, 504, -141, -281, -280, -220, -324, -87, -214,
	494, 502, 501, 394, -302, 397, 550, 659, -46, -47,
	-48, -195, 432, 836, 349, 349, -275, -263, -262, -261,
	-303, 508, -287, -279, 500, 509, -269, 501, 502, -264,
	494, 395, -303, 504, 494, -303, -303, 496, 35, 35,
	385, 385, -303, -264, 499, 509, 504, 508, -216, -264,
	496, 25, -270, 408, 726, 726, -195, 432, -270, -270,
	-270, 537, -270, -270, -270, -270, -270, -270, -270, -270,
	-270, 496, -32, 493, -302, -100, 645, 492, 544, -49,
	-34, -141, -214, 494, 495, -302, 526, -141, 477, -141,
	-209, 416, 15, -209, -206, 641, 639, 626, 631, -209,
	-209, -209, 540, 624, -265, 494, 35, 505, 641, 540,
	624, 540, 541, 540, 541, 634, 644, 540, -231, 14,
	418, 659, 629, 633, 533, 493, 534, 495, 643, 641,
	536, -236, -324, -221, -298, 822, -236, 32, 352, 496,
	-220, -70, -220, 355, -9, -5, -16, -15, -17, 408,
	-93, 641, -82, 433, 823, 824, 825, 822, 638, 830,
	828, 826, 540, 827, 349, 397, 399, 4, -102, 415,
	-151, 408, 409, 410, 411, 412, 413, 414, 418, 400,
	402, 416, 417, 408, 398, 419, 420, 421, 422, 423,
	424, 425, 427, 426, 428, 429, 432, 478, 479, -108,
	-108, -108, -108, -165, -324, -324, -324, -108, -204, -324,
	-108, -324, -324, -324, -324, -171, -102, -324, -329, -324,
	-329, -329, -250, -324, -250, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, 477, -324, -324, -324, -324, -324, -250, -250,
	-250, -250, -250, 364, 360, 354, -167, 361, 355, -220,
	-226, -2, -3, -160, -235, -312, -313, -144, -141, -324,
	-220, -220, 526, -180, -6, -2, -175, -181, -177, -2,
	-68, -80, -92, 326, 327, -94, 24, 39, 330, 328,
	23, -325, 350, -325, -184, -325, 349, -31, -189, 348,
	324, 349, 21, -176, -178, -102, 339, 38, 14, -223,
	-222, 25, -220, 355, 477, 14, -142, 29, -141, -205,
	-205, 349, 567, -198, -238, -200, -199, 649, 651, 408,
	-225, -220, 355, 31, 350, 349, -141, -242, -245, -247,
	-246, -248, -243, -244, 590, 591, 433, 594, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 607, 32, 516,
	586, 587, 588, 589, 608, 609, 610, 611, 612, 613,
	614, 615, 573, 592, 720, 574, 575, 576, 577, 578,
	579, 581, 582, 583, 584, 585, -301, -298, 348, 350,
	349, -249, 348, -102, -100, 493, -298, 494, 494, 494,
	-68, 688, -270, -270, -270, 18, -38, -39, -40, -39,
	348, -259, -268, -301, -298, 348, 395, 499, 394, -267,
	-264, -267, -268, -298, -167, -298, -298, -167, -259, -195,
	-167, -298, 395, 395, -298, -298, -141, -298, 31, 344,
	345, 346, -270, -270, 355, 355, 355, -270, 355, -304,
	510, 554, 556, 31, 355, -305, 31, 843, 842, 844,
	845, 846, 31, 31, -220, 348, 351, -141, -96, 546,
	480, 482, 486, 339, -224, -298, 408, 349, 496, 493,
	-298, -210, 498, -210, -220, -227, -226, -217, 355, -102,
	-266, 14, 418, -231, -231, -209, -141, -266, -231, -209,
	-141, -209, -209, -209, -209, -231, -231, -231, -209, -226,
	-226, -141, -141, -141, -141, -141, -141, -141, -236, -203,
	14, 339, -236, -236, -234, 570, 604, 817, 818, 349,
	722, -134, -141, 822, 822, 822, 822, 822, -102, -102,
	-102, 745, -158, 377, 400, 378, 379, -116, -159, -163,
	-165, 362, 418, 402, 416, 417, -107, -108, -107, 43,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -237, -220, 355, 433, -112, -111, 361, 355,
	-321, -112, -89, -91, -102, -102, -298, -220, -89, -89,
	-102, -85, 24, 39, -169, -170, 404, -167, -325, -325,
	361, -220, -220, -79, -78, 670, 671, 672, 673, 675,
	676, 677, 680, 681, 685, 686, 669, 687, 674, 679,
	682, 683, 684, 678, 589, -102, -102, -102, -102, -102,
	-102, -75, -102, 388, 389, 390, -102, -102, -161, -160,
	-297, -296, -295, -102, -102, -102, -102, -102, -102, -102,
	-102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
	-102, -102, -102, -102, -102, -102, -90, 24, 39, -89,
	-221, -227, -217, -89, -90, -90, -89, -89, 477, -325,
	349, -314, 651, 652, 820, -229, -228, 25, -226, 355,
	-161, 14, -191, 340, -220, -180, -180, 326, 327, 322,
	-89, -94, -325, -30, 25, -187, -220, 325, -102, -102,
	349, -179, 27, 28, -32, -141, -222, 424, -227, -141,
	-152, 32, 320, -5, -324, -141, -119, -121, -122, -123,
	-144, -166, -324, -124, 741, 738, 14, -134, -135, -143,
	-226, -198, -200, 349, 650, 652, 653, 339, 380, -102,
	-252, 432, -277, -276, -275, -259, -261, -262, -263, 494,
	395, 350, -252, -256, 622, 621, -249, -249, -249, -249,
	-249, -251, -195, 616, 617, 433, -251, -251, -251, 348,
	348, -249, -249, -249, -249, -254, -254, -254, -255, -255,
	-288, -102, -285, -284, -282, -283, 363, 814, 770, 722,
	340, -280, -179, 357, -325, -96, -211, 498, -286, -283,
	-298, -298, -298, -211, -298, 355, -298, 355, -298, 355,
	19, 349, -260, -259, -52, 554, -287, -281, -268, 395,
	-267, -268, -268, 482, 32, -212, 761, 400, 814, 770,
	-259, -52, -237, -298, 496, -237, -237, 355, -208, 851,
	-134, 495, 553, 535, 535, 493, 493, 548, -141, -101,
	665, -98, 355, 351, -141, -141, -210, 339, -136, -141,
	26, -226, -141, -209, -209, -141, -209, -209, -141, -220,
	-82, 651, 349, 722, 22, -83, 22, -324, 377, 378,
	379, -159, -107, -108, -107, 399, 517, -159, 355, 349,
	-325, 25, 349, 340, -325, -325, -325, 349, 14, -89,
	-172, -170, 406, -102, -325, -325, 349, 349, 14, -241,
	-325, -325, -325, -325, -325, -171, -325, 14, 349, 349,
	-325, -325, 349, 349, -325, 349, 349, 349, -294, 349,
	349, 349, 349, -325, -325, -325, -325, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, -325, -325, -89,
	-89, -324, 477, -325, -325, -325, -325, -325, -221, -313,
	819, 652, -148, -147, -145, 337, 497, 338, -228, -325,
	-112, 352, -188, 352, -187, -153, -220, 361, -118, -120,
	14, -94, -165, 350, 349, -178, 415, 477, -149, 15,
	-192, 339, -193, -197, -167, -162, -164, -163, -324, -186,
	-325, -220, 32, 349, -137, -139, -138, -140, 329, 333,
	335, 330, 331, 332, 336, -232, 25, -119, -3, -2,
	-324, -324, -324, -141, -134, -326, 14, 340, -326, 349,
	477, -199, -201, 654, 651, 657, -298, 355, 349, -275,
	-263, -182, -97, 41, -257, 623, -251, 729, -251, -220,
	355, 433, -253, 433, -253, 616, 617, -258, 355, -258,
	350, -282, 355, 40, -220, 350, -179, 495, -141, 400,
	339, -286, -286, -286, -226, -187, 18, 349, 350, -168,
	555, 350, 348, -268, -268, 31, 31, 814, 770, 761,
	-52, -168, -252, -298, 853, 852, 350, -141, -95, 544,
	552, -141, -141, -141, -141, -141, 486, 482, 348, -99,
	352, 496, -134, -141, 349, -73, 512, 507, -231, -231,
	33, -141, 651, 831, 829, -102, 399, 517, -116, -108,
	-91, 719, -239, 433, 590, 516, 588, 584, 604, 595,
	621, 586, 622, 583, 582, 581, -239, -237, -102, -102,
	-175, 407, -102, 405, -102, -102, -102, -325, 14, -102,
	-102, -102, -295, -102, -102, -102, -293, -292, -112, -167,
	-325, -293, -102, -102, -292, -292, -296, -296, -296, -296,
	-296, -160, -160, -160, -160, -325, -325, -90, -221, -145,
	-264, -264, -264, 349, -202, 22, 14, 320, -149, -119,
	-94, -220, -112, 424, -180, -102, 30, -192, 349, 408,
	349, -325, -325, 349, 320, 477, -193, -121, -122, -122,
	-121, -122, 329, 329, 329, 334, 329, 334, 329, -138,
	-226, -325, -325, -3, -3, -102, -229, 340, -119, -119,
	-143, -226, 424, 651, 655, 656, -275, -320, 377, 400,
	31, 339, 619, 363, -318, 432, 758, 809, 814, 770,
	-319, 499, 394, 395, 511, 25, 42, -253, -253, 350,
	349, 350, -213, -212, -298, -141, 26, -141, 339, 339,
	339, 19, -259, -167, -285, -187, -104, -324, -103, -105,
	-109, 422, 423, 358, 359, -168, -189, -300, 340, 535,
	619, 535, 350, -141, -73, -141, -209, -209, 33, -298,
	-325, -116, -108, -324, -325, -249, -249, -249, -255, -249,
	578, -249, 578, -249, -325, -325, 349, -325, 22, -325,
	-81, 694, -102, 349, 349, -325, -102, -325, -325, -325,
	-294, 349, -325, 349, -325, 349, -240, 815, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -146,
	22, -146, -146, 352, -141, -173, 16, 395, -197, -102,
	-164, 320, -5, -220, -162, -220, -149, -132, -131, 339,
	340, -133, 339, -131, 329, 329, -189, -325, -325, 349,
	-149, -119, -149, -149, 477, 377, -324, -106, -115, -104,
	12, 355, 355, -298, -317, 842, 843, 31, 357, 395,
	395, -141, 348, -251, 355, -251, -189, -141, -141, -141,
	-187, 350, -102, -110, -110, 25, -291, 722, -299, -220,
	-220, -220, -220, -107, -251, -102, -102, -180, 355, -102,
	-102, -325, -325, -293, -292, -102, -325, -129, -128, -130,
	823, 377, 31, -239, -324, 329, 18, 16, -324, -324,
	-174, 17, 19, 12, -162, 477, -175, -102, 348, -102,
	-112, -175, -149, -102, -155, 376, 700, 701, 702, 375,
	348, -102, 25, -319, -325, -5, -290, -289, -221, 348,
	340, -84, 418, 722, -325, -325, -325, -325, -325, -325,
	-325, 349, -325, -128, -130, -325, 339, -112, -190, -325,
	-220, 499, 19, 19, -190, -190, -102, -160, -193, -220,
	-180, -187, -126, 626, -180, -325, -187, 350, -5, -71,
	722, 349, 408, -187, -141, -325, 720, 336, 723, -102,
	-325, 339, 733, 823, 349, -325, -325, -325, 350, -325,
	-324, 350, -183, -71, -72, 543, 819, -289, -274, -221,
	355, 357, 350, 325, 721, 724, -294, -220, 499, -229,
	-127, -125, -220, 776, -310, -309, 718, -320, -316, 377,
	400, 363, -318, 814, 770, 386, 387, 504, -300, 325,
	-325, -325, 349, 22, -242, -54, 787, -307, -308, 339,
	-311, 632, 786, 807, 377, 355, 545, -291, 722, -125,
	783, -252, -112, -308, 339, -307, 339, 13, 12, 723,
	-53, 26, -126, -306, 512, 507, 510, 32, -306, 724,
	787, 506, 31, 377, -112, -129, -128, -128,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 0,
	679, 679, 679, 0, 679, 0, 0, 679, -2, -2,
	0, 679, 1117, 0, 679, 0, 0, -2, 611, 613,
	0, 615, -2, 0, 0, 624, 1634, 1634, 672, 0,
	0, 0, 0, 0, 679, 679, 679, 1020, 48, 679,
	0, 80, 81, 630, 631, 632, 63, 0, 1632, 1,
	3, 69, 73, 0, 0, 0, 56, 1029, 0, 74,
	0, 0, 683, 681, 0, 681, 0, 1097, 679, 679,
	0, 109, 110, 0, 0, 0, -2, 113, -2, 142,
	143, 144, 0, 149, 512, 466, 468, 471, 504, -2,
	-2, 458, 458, 458, 0, 0, 0, 0, 0, 458,
	501, 1099, 364, 0, 0, 426, 0, 364, 364, 364,
	0, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	513, 0, 1043, 148, 1118, 1114, 1115, 1116, 38, 39,
	40, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	0, 1091, 0, 551, 778, 0, 602, 602, 0, 602,
	602, 602, 0, 0, 0, 562, 0, 0, 0, 0,
	599, 0, 578, 0, 584, 1635, 0, 1635, 1082, 0,
	596, 594, 606, 607, 610, 614, 0, 619, 622, 1108,
	1109, 1110, 0, 637, 47, 1335, 628, 629, 642, 643,
	0, 673, 674, 43, 875, 0, 799, 804, 815, 829,
	830, 831, 832, 833, 835, 836, 0, 0, 0, 0,
	841, 842, 1322, 1403, 0, 0, 0, 856, 1371, 0,
	0, 1546, 0, 1002, 1584, 968, 968, 892, 968, 970,
	970, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	1564, 0, 0, 1375, 1378, 0, 0, 0, 0, 0,
	0, 0, 1384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 1350,
	1287, 1511, 0, 1493, 266, 267, 874, 1071, 970, 970,
	970, 970, 970, -2, -2, -2, 212, 213, 214, 215,
	216, 217, 218, 0, 208, 0, -2, -2, -2, 272,
	268, 858, 859, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 1634, 0, 652, 0, 0,
	0, 0, 1029, 0, 1021, 1020, 61, 0, 679, -2,
	0, 0, 0, 0, 45, 1484, 50, 738, 1052, 0,
	1054, 57, 1030, 65, 67, 1031, 0, 684, 685, 0,
	0, 715, 719, 0, 680, 0, 0, 1098, 1097, 1097,
	95, 0, 1560, 1075, -2, -2, 0, 0, 1111, 1112,
	1084, -2, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1259, 0, 0, 160, 161, 0,
	41, 391, 0, 156, 0, 384, 331, 0, 1043, 0,
	0, 0, 0, 0, 679, 0, 1092, 138, 145, 146,
	147, 364, 364, 364, 148, 148, 427, 475, 476, 477,
	0, -2, 389, 0, 459, 0, 0, 378, 378, 382,
	380, 381, 0, 0, 0, 0, 0, 0, 491, 492,
	493, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 1101, 0, 365, 510, 511, 364, 364, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 137, 1034, 0, 0, 0, -2,
	543, 0, 0, 0, 1093, 1093, 0, 550, 0, 552,
	553, 0, 0, 554, 0, 599, 599, 597, 598, 556,
	557, 558, 602, 0, 0, 373, 374, 375, 599, 602,
	0, 602, 602, 602, 602, 599, 599, 599, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1635, 581,
	582, 585, 1636, 1637, 1635, 1635, 592, 1083, 612, 620,
	623, 640, 638, 639, 641, 633, 634, 635, 636, 0,
	653, 654, 659, 0, 0, 0, 664, 665, 666, 0,
	0, 669, 670, 671, 0, 0, 0, 0, 797, 0,
	0, 864, 865, 866, 867, 868, 869, 870, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	838, 839, 840, 843, 0, 0, 0, 848, 849, 0,
	0, 0, 0, 0, 689, 0, 1003, 0, 890, 0,
	891, 893, 894, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 0, 0, 699, 699, 0, 0, 201, 202,
	203, 204, 205, 219, 220, 221, 222, 223, -2, 1011,
	0, 874, 0, 0, 44, 644, 645, 0, 761, 1103,
	0, 695, 0, 55, 64, 66, 1029, 59, 1029, 0,
	701, 0, 0, -2, -2, 702, 708, 709, 710, 711,
	712, 52, 1633, 53, 0, 72, 0, 46, 0, 0,
	0, 0, 0, 1022, 1023, 1026, 0, 682, 0, 716,
	720, 0, 722, 723, 0, 0, 0, 0, 777, 0,
	0, 0, 1560, 1081, 0, 97, 98, 0, 0, 0,
	351, 1086, 1087, 1088, -2, 371, 0, 351, 335, 281,
	282, 283, 331, 285, 331, 331, 331, 331, 340, 340,
	340, 340, 314, 315, 316, 317, 318, 0, 0, 300,
	331, 331, 331, 331, 321, 322, 323, 324, 325, 326,
	327, 328, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 333, 333, 333, 334, 334, 0, 42, 0, 355,
	0, 1026, 0, 0, 1034, 1095, 1105, 0, 0, 0,
	1095, 115, 0, 0, 0, 0, 472, 473, 469, 505,
	0, 460, 372, 0, -2, 0, 382, 0, 378, 382,
	379, 382, 370, 383, 0, 0, 0, 0, 460, 0,
	495, 496, 497, 0, 499, 500, 502, 0, 506, 507,
	508, 509, 0, 0, 430, 431, 432, 0, 434, 435,
	452, 453, 454, 436, 437, 438, 446, 447, 448, 449,
	450, 451, 439, 440, 443, 0, 464, 131, 0, 0,
	0, 0, 0, 0, 758, 1113, 0, 0, 0, 1093,
	0, 0, 0, 0, 698, 779, 1119, 1120, 603, 604,
	0, 376, 377, 602, 602, 559, 589, 0, 602, 563,
	590, 564, 566, 565, 567, 579, 580, 602, 570, 600,
	601, 571, 572, 573, 574, 575, 576, 577, 586, 0,
	608, 609, 587, 588, 0, 621, 625, 626, 627, 0,
	0, 656, 91, 661, 662, 663, 675, 668, 876, 795,
	796, 0, 798, 801, 0, 860, 862, 803, 805, 871,
	872, 873, 0, 0, 0, 0, 0, 809, 813, 0,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 834, 983, 984, 985, 851, 274, 275, 271,
	0, 852, 0, 713, 0, 0, 0, 850, 0, 0,
	0, 0, 690, 691, 1009, 1006, 0, 0, 969, 971,
	0, 0, 0, 0, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 986, 0, 0, 0, 0,
	0, 1002, 0, 853, 854, 855, 0, 0, 0, 1104,
	0, 125, 126, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 700,
	1012, 0, -2, 0, 0, 0, 0, 0, 0, 1070,
	0, 647, 648, 650, 0, 781, 762, 0, 764, 765,
	0, 0, 694, 0, 697, 58, 60, 706, 707, 0,
	724, 703, 54, 49, 0, 0, 740, 1053, 1032, 1033,
	0, 1025, 1027, 1028, 0, 75, 721, 717, 0, 793,
	1064, 0, 0, 1056, 0, 776, 0, 727, 729, 730,
	731, 759, 0, 734, 0, 1383, 0, 0, 0, 93,
	778, 1076, 96, 0, 0, 101, 102, 1077, -2, 1079,
	1080, 0, 139, -2, 423, 162, 164, 165, 166, -2,
	-2, 157, -2, 338, 336, 337, 284, 340, 340, 308,
	309, 310, 0, 349, 349, 346, 311, 312, 313, 0,
	0, 301, 302, 303, 304, 295, 296, 297, 298, 299,
	390, 0, 111, 356, 357, 359, 0, 361, 362, 0,
	0, 385, 386, 0, 1026, 0, 0, 0, 0, 1106,
	1105, 1105, 1105, 0, 150, 151, 152, 153, 154, 155,
	0, 148, 0, 158, 462, 461, 388, 0, 0, 382,
	382, 367, 368, 0, 0, 485, 417, 0, 486, 487,
	460, 462, 351, 498, 0, 428, 429, 433, 441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	1045, 1050, 1048, 1049, 0, 544, 0, 0, 414, 89,
	1094, 549, 599, 569, 591, 599, 561, 568, 583, 617,
	660, 0, 0, 0, 0, 667, 0, 0, 802, 861,
	863, 806, 0, 810, 814, 0, 0, 816, 273, 0,
	0, 0, 0, 0, 857, 881, 882, 0, 0, 1020,
	0, 1007, 0, 0, 889, 972, 0, 0, 0, 0,
	900, 901, 902, 903, 904, 0, 906, 0, 0, 0,
	910, 911, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 924, 925, 926, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 877, 0,
	0, 699, 0, 973, 974, 975, 976, 977, 1012, 646,
	649, 651, 737, 782, 783, 0, 0, 0, 763, 1102,
	692, 693, 696, -2, 0, 0, 1014, 0, 793, 725,
	0, 704, 51, 739, 0, 1024, 0, 0, 1029, 0,
	78, 0, 1064, 1072, 0, 1055, 1066, 1068, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 769, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 87, 88, 0, 0,
	0, 99, 100, 0, 0, 106, 352, 353, 148, 425,
	163, 398, 0, 0, 280, 339, 305, 306, 307, 349,
	349, 343, 344, 350, 345, 347, 348, 0, 329, 0,
	419, 358, 360, 0, 1107, 332, 387, 0, 130, 0,
	0, 0, 0, 0, 136, 467, 0, 0, 478, 479,
	0, 355, 0, 366, 369, 480, 0, 483, 484, 418,
	462, 489, 490, 503, 444, 445, 442, 738, 1035, 1036,
	1037, 116, 517, 519, 518, 522, 0, 0, 0, 1047,
	1051, 0, 414, 547, 0, 548, 415, 416, 602, 602,
	655, 92, 0, 658, 0, 0, 0, 0, 807, 811,
	714, 0, 0, 331, 331, 989, 331, 334, 992, 331,
	994, 331, 997, 331, 1000, 1001, 0, 0, 0, 0,
	1004, 888, 1010, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 127, 128, 941, 0, 0, 943, 945, 946,
	916, 942, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 879, 0, 1013, 784,
	789, 789, 789, 0, 0, 1089, 1090, 1015, 1016, 726,
	705, 741, 678, 718, 76, 794, 0, 79, 0, 0,
	0, 1069, 0, 0, 0, 0, 793, 728, 754, 756,
	0, 751, 767, 768, 770, 0, 772, 0, 774, 775,
	738, 733, 735, 0, 0, 0, 793, 0, 793, 793,
	94, 0, 780, 103, 104, 105, 424, 167, 172, 0,
	0, 0, 177, 0, 179, 0, 0, 0, 184, 185,
	399, 0, 277, 279, 0, 0, 170, 341, 342, 340,
	0, 340, 400, 420, 363, 738, 1096, 132, 0, 0,
	0, 0, 159, 463, 354, 0, 481, 0, 206, 207,
	209, 0, 0, 269, 270, 488, 0, 119, 0, 0,
	0, 0, 1046, 545, 546, 90, 555, 560, 657, 676,
	800, 808, 812, 0, 845, 987, 340, 990, 991, 993,
	995, 996, 998, 999, 846, 847, 0, 884, 0, 886,
	1029, 0, 1008, 0, 0, 898, 0, 907, 908, 909,
	0, 0, 915, 0, 917, 0, 0, 0, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 880, 0,
	0, 0, 0, -2, 62, 1018, 0, 0, 1073, 1074,
	1067, 0, 1059, 1062, 1058, 1061, 1020, 748, 755, 0,
	0, 749, 0, 750, 771, 773, 732, -2, 736, 0,
	1020, 793, 85, 86, 0, 173, 0, 175, 199, 200,
	0, 178, 180, 181, 182, 186, 187, 188, 183, 276,
	278, 0, 0, 319, 330, 320, 0, 133, 134, 135,
	470, 0, 0, 210, 211, 0, 516, 0, 117, 118,
	0, 0, 521, 978, 988, 0, 0, 0, 1005, 0,
	0, 905, 913, 0, 944, 0, 920, 0, 0, 0,
	540, 541, 0, 940, 0, 790, 0, 0, 0, 0,
	77, 0, 0, 0, 1057, 0, 1029, 752, 0, 757,
	0, 1029, 84, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 482, 1038, 120, 121, 0, 0,
	0, 0, 0, 0, 883, 885, 887, 896, 897, 914,
	918, 0, 921, 0, 0, 922, 0, 542, 0, 786,
	744, 745, 791, 792, 0, 0, 1019, 1017, 1065, 1063,
	82, 0, 0, 0, 83, 174, 0, 191, 1038, 514,
	1040, 0, 0, 0, 523, 844, 0, 0, 0, 941,
	923, 0, 538, 539, 0, 785, 787, 788, 753, 761,
	0, 405, 398, 112, 0, 1041, 1042, 122, 123, 455,
	456, 457, 116, 979, 0, 982, 0, 746, 747, 524,
	0, 526, 0, -2, 393, 406, 0, 168, 192, 193,
	0, 0, 196, 197, 198, 189, 190, 0, 119, 980,
	919, 525, 0, 0, 351, 0, 535, 394, 395, 0,
	401, 402, 403, 404, 194, 195, 1039, 520, 0, 527,
	528, 536, 0, 396, 0, 397, 0, 0, 0, 0,
	0, 537, 533, 407, 409, 410, 0, 0, 408, 981,
	0, 411, 412, 413, 529, 530, 531, 532,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 401, 3, 3, 3, 427, 419, 3,
	348, 350, 424, 422, 349, 423, 477, 425, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 854,
	409, 408, 410, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 429, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 398, 3, 430,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 351, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 399, 57738, 400, 57739, 402,
	57740, 403, 57741, 404, 57742, 405, 57743, 406, 57744, 407,
	57745, 411, 57746, 412, 57747, 413, 57748, 414, 57749, 415,
	57750, 416, 57751, 417, 57752, 418, 57753, 420, 57754, 421,
	57755, 426, 57756, 428, 57757, 431, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 58178, 853, 0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	psqDebug        = 4
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if psqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", psqTokname(token), uint(char), token)
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state-%d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:561
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:566
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:567
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:571
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 5:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:575
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 37:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:610
		{
			setParseTree(psqlex, nil)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:616
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:620
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:624
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:629
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 42:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:633
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 43:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:639
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:645
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:651
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:655
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:660
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:664
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:670
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 50:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:674
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:680
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:686
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:690
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:694
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:717
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:723
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:728
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:734
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:741
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:747
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:754
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 62:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:758
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:764
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:768
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:772
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:776
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:780
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:786
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:790
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:795
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:799
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:805
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:809
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:814
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:821
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:827
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:835
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:843
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:854
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:866
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:870
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:876
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:882
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:886
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:890
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:894
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:899
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:900
		{
		}
	case 89:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:904
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:908
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:914
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:918
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 93:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:924
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:928
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 95:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:934
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:940
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:944
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:950
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:954
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 100:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:960
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:964
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:968
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:974
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:978
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:982
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:986
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:992
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:996
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1002
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1008
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1015
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1023
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1027
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1034
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1038
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1043
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 117:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1047
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1053
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 119:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1058
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1063
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1069
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1074
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1080
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 124:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1085
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1089
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1095
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1099
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1105
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 129:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSchema
//line psql.y:1111
		{
			psqLOCAL = &ast.AlterSchema{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Schema: psqDollar[3].schemaName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1118
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1125
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[4].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1132
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1137
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1142
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1147
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1154
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 137:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1161
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1171
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1177
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1181
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1187
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1191
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1195
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1199
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1203
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 147:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1207
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 148:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1213
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1217
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 150:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1223
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 151:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1227
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 152:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1233
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1237
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1243
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1247
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 156:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1253
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 157:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1257
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 158:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1263
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 159:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1267
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1273
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1278
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1283
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1287
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 164:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1292
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1296
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1300
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 167:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1311
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1320
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 169:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1329
		{
			psqVAL.str = ""
		}
	case 170:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1333
		{
			psqVAL.str = ""
		}
	case 171:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1342
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1346
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1352
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 174:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1358
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1363
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1368
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1373
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1378
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1383
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1388
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1392
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 182:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1397
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 183:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1401
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 184:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1406
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1412
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1420
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1424
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1428
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1434
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1438
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1443
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1447
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1452
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1458
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1464
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1469
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1474
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1480
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 199:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1488
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1495
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1499
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 203:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1503
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1507
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1511
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1522
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1529
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1533
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1539
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1543
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1547
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1551
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1555
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1559
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1563
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1568
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1572
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1576
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1580
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1584
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1591
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1595
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1599
		{
			psqVAL.str = ast.Big5Str
		}
	case 227:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1603
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1607
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1611
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1615
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1619
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1623
		{
			psqVAL.str = ast.Cp850Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1627
		{
			psqVAL.str = ast.Cp852Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1631
		{
			psqVAL.str = ast.Cp866Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1635
		{
			psqVAL.str = ast.Cp932Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1639
		{
			psqVAL.str = ast.Dec8Str
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1643
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1647
		{
			psqVAL.str = ast.EuckrStr
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1651
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1655
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1659
		{
			psqVAL.str = ast.GbkStr
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1663
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1667
		{
			psqVAL.str = ast.GreekStr
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1671
		{
			psqVAL.str = ast.HebrewStr
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1675
		{
			psqVAL.str = ast.Hp8Str
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1679
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1683
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1687
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1691
		{
			psqVAL.str = ast.Latin1Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1695
		{
			psqVAL.str = ast.Latin2Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1699
		{
			psqVAL.str = ast.Latin5Str
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1703
		{
			psqVAL.str = ast.Latin7Str
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1707
		{
			psqVAL.str = ast.MacceStr
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1711
		{
			psqVAL.str = ast.MacromanStr
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1715
		{
			psqVAL.str = ast.SjisStr
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1719
		{
			psqVAL.str = ast.Swe7Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1723
		{
			psqVAL.str = ast.Tis620Str
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1727
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1731
		{
			psqVAL.str = ast.UjisStr
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1735
		{
			psqVAL.str = ast.Utf16Str
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1739
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1743
		{
			psqVAL.str = ast.Utf32Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1747
		{
			psqVAL.str = ast.Utf8Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1751
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1755
		{
			psqVAL.str = ast.Utf8Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1765
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1769
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1773
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1779
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1783
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1787
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1793
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1797
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1804
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1808
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1812
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1816
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 280:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1822
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 284:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1833
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1838
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1844
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1848
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1852
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1856
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1860
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1864
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1868
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1872
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1876
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 295:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1882
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 296:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1888
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 297:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1894
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 298:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1900
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 299:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1906
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 300:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1914
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1918
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1922
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1926
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 304:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1930
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 305:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1936
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 306:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1940
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 307:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1946
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1950
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1954
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1958
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 311:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1962
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1966
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1970
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1974
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 315:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1978
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1982
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 317:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1986
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 318:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1990
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 319:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1994
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 320:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1999
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2005
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2009
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2013
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2017
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2021
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2025
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2029
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2033
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2039
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 330:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2044
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 331:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2049
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 332:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2053
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 333:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2058
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2063
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 335:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2068
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2072
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2076
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 338:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2081
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 339:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2085
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 340:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2090
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2094
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2098
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 343:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2102
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 344:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2106
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2111
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 346:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2116
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2121
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 348:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2126
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 349:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2132
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 350:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2136
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 351:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2141
		{
			psqVAL.str = ""
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2145
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 353:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2149
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 354:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2156
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2161
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2165
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 357:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2171
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 358:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2175
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 359:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2181
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2185
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2189
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2193
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2197
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 364:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2203
		{
			psqVAL.str = ""
		}
	case 365:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2207
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 366:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2213
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2217
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2221
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2225
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2229
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 371:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2234
		{
			psqVAL.str = ""
		}
	case 372:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2238
		{
			psqVAL.str = psqDollar[2].str
		}
	case 373:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2244
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 374:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2248
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2252
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2259
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 377:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2263
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 378:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2268
		{
			psqVAL.str = "key"
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2272
		{
			psqVAL.str = psqDollar[1].str
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2278
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2282
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 382:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2287
		{
			psqVAL.str = ""
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2291
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 384:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2297
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 385:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2301
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 386:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2307
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2311
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2317
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2321
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2327
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2331
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2337
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2343
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2347
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2351
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2355
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2359
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2364
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2368
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2374
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2380
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2386
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2390
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2394
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2399
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2403
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2409
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2415
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2421
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2425
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2429
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2433
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2437
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 414:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2442
		{
			psqVAL.str = ""
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2446
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2450
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 417:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2456
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2460
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2465
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2469
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2474
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2478
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2484
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2488
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2492
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 426:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2498
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2502
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 428:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2508
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2512
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2516
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2520
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2524
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2528
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2532
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2536
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2540
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2544
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2548
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2552
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2556
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2560
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2564
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2569
		{
			psqVAL.str = ""
		}
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2573
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 445:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2577
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2596
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2600
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 457:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2604
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 458:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2609
		{
			psqVAL.str = ""
		}
	case 460:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2615
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2619
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2624
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2628
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2634
		{
			psqLOCAL = []ast.AlterOption{&ast.AlterOwner{Owner: &ast.RoleName{Name: ast.RoleIdent{V: psqDollar[3].str}}}}
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2639
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 466:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2643
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 467:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2647
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 468:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2651
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2655
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 470:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2659
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 471:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2665
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 472:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2669
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 473:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2673
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 474:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2679
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2683
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2687
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 477:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2691
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2695
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2699
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2703
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2707
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2711
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2715
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2720
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2725
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2729
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2733
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2737
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2741
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2745
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2749
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2753
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2757
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2761
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2765
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2769
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2773
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2777
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2781
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2785
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2789
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2793
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2797
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2803
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2807
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 506:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2813
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2817
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2821
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2825
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2829
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2833
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2839
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2845
		{
			psqDollar[1].alterSchemaUnion().FullyParsed = true
			psqDollar[1].alterSchemaUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterSchemaUnion()
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2851
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[6].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Definer: psqDollar[3].definerUnion(), Security: psqDollar[4].str, Columns: psqDollar[7].columnsUnion(), Select: psqDollar[9].selStmtUnion(), CheckOption: psqDollar[10].str}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2861
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2868
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2880
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2890
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2894
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2898
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2911
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2921
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2925
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:2938
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2944
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2950
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2954
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 528:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2960
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2964
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2970
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2976
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2982
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2988
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2994
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2998
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3002
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3006
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3012
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3018
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3024
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3028
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3032
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3038
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3044
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3048
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 546:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3054
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3058
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}})}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}})}
			}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3067
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3071
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3077
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3081
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3086
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3092
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3096
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3100
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3104
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3108
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3112
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3116
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3120
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3124
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3128
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3132
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3136
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3140
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3144
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3148
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3152
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3156
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3160
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3164
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3168
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3172
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3176
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3180
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3184
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3188
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3192
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3196
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3200
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3204
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3208
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3212
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3216
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3223
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3227
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3231
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3235
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3239
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3243
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3247
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3251
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3257
		{
			psqVAL.str = ""
		}
	case 594:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3261
		{
			psqVAL.str = "extended "
		}
	case 595:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3267
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 596:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3271
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3277
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 598:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3281
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 599:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3287
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 600:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3291
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 601:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3295
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 602:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3301
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 603:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3305
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 604:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3309
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3315
		{
			psqVAL.empty = struct{}{}
		}
	case 606:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3319
		{
			psqVAL.empty = struct{}{}
		}
	case 607:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3323
		{
			psqVAL.empty = struct{}{}
		}
	case 608:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3329
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 609:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3333
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 610:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3339
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 611:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3343
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 612:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3347
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3353
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3357
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3363
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3369
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3373
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3378
		{
			psqVAL.empty = struct{}{}
		}
	case 619:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3380
		{
			psqVAL.empty = struct{}{}
		}
	case 620:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3383
		{
			psqVAL.empty = struct{}{}
		}
	case 621:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3385
		{
			psqVAL.empty = struct{}{}
		}
	case 622:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3390
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 623:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3396
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 624:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3401
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3405
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3409
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 627:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3413
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3417
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3421
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3427
		{
			psqVAL.str = psqDollar[1].str
		}
	case 631:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3431
		{
			psqVAL.str = psqDollar[1].str
		}
	case 632:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3435
		{
			psqVAL.str = psqDollar[1].str
		}
	case 633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3441
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3445
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 635:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3449
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3453
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3458
		{
			psqVAL.str = ""
		}
	case 638:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3462
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 639:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3466
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 640:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3472
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 641:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3476
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 642:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3482
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3486
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3492
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3498
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3502
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 647:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3508
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 648:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3514
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 649:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3518
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3522
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3526
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 652:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3532
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3538
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3542
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3546
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3550
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3554
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3558
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3564
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 660:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3568
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 661:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3574
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 662:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3578
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 663:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3582
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 664:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3586
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 665:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3590
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3594
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 667:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3598
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 668:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3602
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 669:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3606
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 670:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3610
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3614
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3619
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 673:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3623
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 674:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3627
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3632
		{
			psqVAL.str = ""
		}
	case 676:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3636
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 677:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3641
		{
			setAllowComments(psqlex, true)
		}
	case 678:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3645
		{
			// Strange argumets shift
			psqLOCAL = &ast.CommentOnSchema{Comments: ast.Comments{psqDollar[2].str}.Parsed(), Schema: psqDollar[5].schemaName.Name, Value: psqDollar[7].exprUnion()}
			setAllowComments(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 679:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3653
		{
			setAllowComments(psqlex, true)
		}
	case 680:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3657
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 681:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3663
		{
			psqVAL.strs = nil
		}
	case 682:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3667
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 683:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3673
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3677
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 685:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3681
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 686:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3686
		{
			psqVAL.str = ""
		}
	case 687:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3690
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 688:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3694
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 689:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3699
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3703
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3707
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3713
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3717
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 694:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3729
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 695:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3734
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 696:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3738
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3744
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3748
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3753
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 700:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3757
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 701:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3762
		{
			psqVAL.strs = nil
		}
	case 702:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3766
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 703:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3770
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 704:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3774
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 705:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3778
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 706:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3784
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 707:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3788
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 708:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3792
		{
			psqVAL.str = ast.DistinctStr
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3796
		{
			psqVAL.str = ast.DistinctStr
		}
	case 710:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3800
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 711:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3804
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 712:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3808
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 713:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3814
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 714:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3818
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 715:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3824
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 716:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3828
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 717:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3832
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 718:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3836
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 719:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3841
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 720:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3845
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 721:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3849
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 723:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3856
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 724:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3861
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3865
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3871
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3877
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 728:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3881
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 731:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3891
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3895
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 733:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3899
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3903
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3909
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3913
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 737:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:3919
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 738:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3924
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3928
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3934
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 741:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3938
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 742:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3944
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 743:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3948
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3954
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 745:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3958
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 746:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3962
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 747:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3966
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 748:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3979
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 749:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3983
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 750:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3987
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 751:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3991
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 752:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3997
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 753:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3999
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 754:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4003
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 755:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4005
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 756:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4009
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 757:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4011
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 758:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4015
		{
			psqVAL.schemaName = ast.SchemaName{Name: psqDollar[2].schemaIdent}
		}
	case 759:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4020
		{
			psqVAL.empty = struct{}{}
		}
	case 760:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4022
		{
			psqVAL.empty = struct{}{}
		}
	case 761:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4025
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 762:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4029
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 763:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4033
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 765:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4040
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 766:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4046
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 767:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4050
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 768:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4054
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4060
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4066
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4070
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4074
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 773:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4078
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4084
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 775:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4088
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4098
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 777:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4102
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 778:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4108
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 779:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4112
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 780:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4118
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 781:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4123
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4127
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 783:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4133
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 784:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4137
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 785:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4143
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4147
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 787:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4151
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 788:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4155
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4160
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 790:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4164
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 791:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4168
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 792:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4172
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4178
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4182
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4189
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 796:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4193
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4197
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4201
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4205
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4209
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 801:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4216
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 802:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4220
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4224
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4228
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4234
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4238
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4242
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4246
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4250
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4254
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4258
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4262
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4266
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4270
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4274
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4278
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4284
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4288
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4292
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4296
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4300
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4304
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4308
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4312
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4316
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4320
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4324
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4328
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4332
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4338
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4342
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4346
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4350
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4354
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4358
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4362
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4366
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4370
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4374
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4378
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4382
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4386
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4390
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4394
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4398
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4402
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4406
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4410
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4418
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4422
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4430
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4434
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4440
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4444
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4448
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4454
		{
			psqVAL.str = ""
		}
	case 857:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4458
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 858:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4464
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4468
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4475
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4479
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4483
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4487
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4493
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4497
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4501
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4505
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4509
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4513
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4517
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4523
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4527
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4531
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4538
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4544
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4548
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 877:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4558
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4562
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4566
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4570
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4580
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4584
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4588
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4592
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4596
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4600
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4604
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4608
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4612
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4616
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4627
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4631
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4637
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4641
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4646
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4650
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4654
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4658
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4662
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4666
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4670
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4674
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4678
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4682
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4686
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4690
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4694
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4698
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4702
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4706
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4710
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4714
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4718
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4722
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4726
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4730
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4734
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4738
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4742
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4746
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4750
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4754
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4758
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4762
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4766
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4770
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4774
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4778
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4782
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4786
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4790
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4794
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4798
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4802
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4806
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4810
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4814
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4818
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4823
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4827
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4832
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4836
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4842
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4846
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 945:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4852
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 946:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4856
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 947:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4862
		{
		}
	case 948:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4864
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4868
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4872
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4876
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4880
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4884
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4888
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4892
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4896
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4900
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4904
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4910
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4914
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4918
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4922
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4926
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4930
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4934
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4938
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4942
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4952
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4956
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4960
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4971
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4975
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4979
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4983
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4987
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4993
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4997
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5001
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5005
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5009
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 983:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5015
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 984:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5019
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 985:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5023
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 986:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5029
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5035
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5039
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5043
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5047
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5051
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5057
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5061
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5065
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5069
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5073
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5077
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5081
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5085
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5089
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5093
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5099
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5103
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5108
		{
			psqVAL.str = string("")
		}
	case 1005:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5112
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1006:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5118
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5122
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1008:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5128
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5133
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5137
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5143
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5147
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5151
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1014:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5157
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5166
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5172
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5176
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5181
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5185
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5190
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5194
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5200
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1023:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5206
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5210
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1025:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5216
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5221
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5225
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5229
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5234
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5238
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5244
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5248
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5252
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5257
		{
			psqVAL.str = ""
		}
	case 1035:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5261
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1036:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5267
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1037:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5271
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1038:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5276
		{
			psqVAL.str = ""
		}
	case 1039:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5280
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1040:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5285
		{
			psqVAL.str = "cascaded"
		}
	case 1041:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5289
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1042:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5293
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1043:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5298
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5302
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5308
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1046:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5314
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1047:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5320
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1048:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5329
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1049:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5333
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1050:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5338
		{
			psqVAL.str = ""
		}
	case 1051:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5342
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1052:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5348
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1053:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5352
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1054:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5358
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1055:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5371
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1056:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5375
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1057:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5379
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1058:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5383
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1059:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5387
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5393
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1061:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5397
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1062:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5401
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1063:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5405
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1064:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5410
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5414
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5420
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5424
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1068:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5430
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1069:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5434
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5440
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5445
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1072:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5455
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5459
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1074:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5465
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5471
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5475
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1077:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5481
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1078:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5485
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1079:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5489
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1080:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5493
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5497
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1083:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5505
		{
			psqVAL.str = "charset"
		}
	case 1086:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5515
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1087:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5519
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1088:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5523
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5532
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5534
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1093:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5537
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1094:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5539
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5542
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1096:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5544
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1097:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5547
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5549
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1099:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5552
		{
			psqVAL.empty = struct{}{}
		}
	case 1100:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5554
		{
			psqVAL.empty = struct{}{}
		}
	case 1101:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5556
		{
			psqVAL.empty = struct{}{}
		}
	case 1102:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5560
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5565
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1104:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5569
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1105:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5574
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5576
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5580
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5586
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1109:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5590
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1110:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5594
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1112:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5601
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1113:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5607
		{
			psqVAL.schemaIdent = ast.NewSchemaIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1114:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5613
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1115:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5617
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1116:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5621
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1117:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5627
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5631
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5638
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1632:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6183
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6192
		{
			decNesting(psqlex)
		}
	case 1634:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6197
		{
			skipToEnd(psqlex)
		}
	case 1635:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6202
		{
			skipToEnd(psqlex)
		}
	case 1636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6206
		{
			skipToEnd(psqlex)
		}
	case 1637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6210
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
