// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:18
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:18

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const DISTINCTROW = 57380
const PARSER = 57381
const GENERATED = 57382
const ALWAYS = 57383
const ANY = 57384
const ASYMMETRIC = 57385
const AUTHORIZATION = 57386
const CONCURRENTLY = 57387
const CURRENT_CATALOG = 57388
const CURRENT_ROLE = 57389
const CURRENT_SCHEMA = 57390
const DEFERRABLE = 57391
const FETCH = 57392
const FREEZE = 57393
const GRANT = 57394
const ILIKE = 57395
const INITIALLY = 57396
const INTERSECT = 57397
const ISNULL = 57398
const NOTNULL = 57399
const OVERLAPS = 57400
const PLACING = 57401
const SESSION_USER = 57402
const SIMILAR = 57403
const SOME = 57404
const SYMMETRIC = 57405
const SYSTEM_USER = 57406
const TABLESAMPLE = 57407
const VARIADIC = 57408
const VERBOSE = 57409
const ABORT = 57410
const ABSENT = 57411
const ABSOLUTE = 57412
const ACCESS = 57413
const AGGREGATE = 57414
const ALSO = 57415
const ASENSITIVE = 57416
const ASSERTION = 57417
const ASSIGNMENT = 57418
const AT = 57419
const ATOMIC = 57420
const ATTACH = 57421
const ATTRIBUTE = 57422
const BACKWARD = 57423
const BEFORE = 57424
const BREADTH = 57425
const CACHE = 57426
const CALLED = 57427
const CATALOG = 57428
const CHAIN = 57429
const CHARACTERISTICS = 57430
const CHECKPOINT = 57431
const CLASS = 57432
const CLOSE = 57433
const CLUSTER = 57434
const COMMENTS = 57435
const CONDITIONAL = 57436
const CONFIGURATION = 57437
const CONFLICT = 57438
const CONSTRAINTS = 57439
const CONTENT = 57440
const CONTINUE = 57441
const CONVERSION = 57442
const COST = 57443
const OPTIONALLY = 57444
const ESCAPED = 57445
const ENCLOSED = 57446
const TERMINATED = 57447
const STARTING = 57448
const LINES = 57449
const OVERWRITE = 57450
const MANIFEST = 57451
const HEADER = 57452
const CSV = 57453
const CUBE = 57454
const CURRENT = 57455
const CURSOR = 57456
const CYCLE = 57457
const DATA = 57458
const DEC = 57459
const DECLARE = 57460
const DEFAULTS = 57461
const DEFERRED = 57462
const DELIMITER = 57463
const DELIMITERS = 57464
const DEPENDS = 57465
const DEPTH = 57466
const DETACH = 57467
const DICTIONARY = 57468
const DOCUMENT = 57469
const DOMAIN = 57470
const EACH = 57471
const ENCODING = 57472
const ENCRYPTED = 57473
const EXCLUDING = 57474
const EXPRESSION = 57475
const EXTENSION = 57476
const EXTERNAL = 57477
const FAMILY = 57478
const FILTER = 57479
const FINALIZE = 57480
const FORWARD = 57481
const FUNCTIONS = 57482
const GRANTED = 57483
const GREATEST = 57484
const HANDLER = 57485
const HOLD = 57486
const IDENTITY = 57487
const IMMEDIATE = 57488
const IMMUTABLE = 57489
const IMPLICIT = 57490
const INCLUDE = 57491
const INCLUDING = 57492
const INCREMENT = 57493
const INDENT = 57494
const INHERIT = 57495
const INHERITS = 57496
const INLINE = 57497
const INOUT = 57498
const INPUT = 57499
const INSENSITIVE = 57500
const INSTEAD = 57501
const JSON_ARRAYAGG = 57502
const JSON_EXISTS = 57503
const JSON_OBJECTAGG = 57504
const JSON_QUERY = 57505
const JSON_SCALAR = 57506
const JSON_SERIALIZE = 57507
const KEEP = 57508
const LABEL = 57509
const LARGE = 57510
const LEAKPROOF = 57511
const LEAST = 57512
const LISTEN = 57513
const LOAD = 57514
const LOCATION = 57515
const LOGGED = 57516
const MAPPING = 57517
const MATCHED = 57518
const MATERIALIZED = 57519
const MERGE_ACTION = 57520
const METHOD = 57521
const MINVALUE = 57522
const MOVE = 57523
const NATIONAL = 57524
const NEW = 57525
const NFC = 57526
const NFD = 57527
const NFKC = 57528
const NFKD = 57529
const NORMALIZE = 57530
const NORMALIZED = 57531
const NOTHING = 57532
const NOTIFY = 57533
const NULLIF = 57534
const OBJECT = 57535
const OIDS = 57536
const OMIT = 57537
const OPERATOR = 57538
const OPTIONS = 57539
const OUT = 57540
const OVERLAY = 57541
const OVERRIDING = 57542
const OWNED = 57543
const OWNER = 57544
const PARALLEL = 57545
const PARAMETER = 57546
const PASSING = 57547
const PLAN = 57548
const PLANS = 57549
const POLICY = 57550
const POSITION = 57551
const PRECISION = 57552
const PREPARED = 57553
const PRESERVE = 57554
const PRIOR = 57555
const PROCEDURAL = 57556
const PROCEDURES = 57557
const PROGRAM = 57558
const PUBLICATION = 57559
const QUOTE = 57560
const QUOTES = 57561
const RANGE = 57562
const REASSIGN = 57563
const RECHECK = 57564
const REF = 57565
const REFERENCING = 57566
const REFRESH = 57567
const REINDEX = 57568
const RELATIVE = 57569
const REPLICA = 57570
const RESET = 57571
const RETURN = 57572
const RETURNS = 57573
const REVOKE = 57574
const ROLLUP = 57575
const ROUTINE = 57576
const ROUTINES = 57577
const ROW = 57578
const ROWS = 57579
const RULE = 57580
const SCALAR = 57581
const SCROLL = 57582
const SEARCH = 57583
const SEQUENCES = 57584
const SERVER = 57585
const SETOF = 57586
const SETS = 57587
const SNAPSHOT = 57588
const SOURCE = 57589
const STABLE = 57590
const STANDALONE = 57591
const STATEMENT = 57592
const STATISTICS = 57593
const STDIN = 57594
const STDOUT = 57595
const STRICT = 57596
const STRIP = 57597
const SUBSCRIPTION = 57598
const SUPPORT = 57599
const SYSID = 57600
const TARGET = 57601
const TEMP = 57602
const TEMPLATE = 57603
const TRANSFORM = 57604
const TREAT = 57605
const TRUSTED = 57606
const TYPE = 57607
const TYPES = 57608
const UESCAPE = 57609
const UNCONDITIONAL = 57610
const UNENCRYPTED = 57611
const UNKNOWN = 57612
const UNLISTEN = 57613
const UNLOGGED = 57614
const UNTIL = 57615
const VACUUM = 57616
const VALID = 57617
const VALIDATE = 57618
const VALIDATOR = 57619
const VARYING = 57620
const VERSION = 57621
const VIEWS = 57622
const VOLATILE = 57623
const WHITESPACE = 57624
const WITHIN = 57625
const WRAPPER = 57626
const XML = 57627
const XMLATTRIBUTES = 57628
const XMLCONCAT = 57629
const XMLELEMENT = 57630
const XMLEXISTS = 57631
const XMLFOREST = 57632
const XMLNAMESPACES = 57633
const XMLPARSE = 57634
const XMLPI = 57635
const XMLROOT = 57636
const XMLSERIALIZE = 57637
const XMLTABLE = 57638
const YES = 57639
const ZONE = 57640
const ARRAY_MAX_CARDINALITY = 57641
const CHARACTER_SET_CATALOG = 57642
const COMMAND_FUNCTION_CODE = 57643
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57644
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57645
const DATETIME_INTERVAL_CODE = 57646
const DATETIME_INTERVAL_PRECISION = 57647
const DYNAMIC_FUNCTION_CODE = 57648
const END_EXEC = 57649
const PARAMETER_ORDINAL_POSITION = 57650
const PARAMETER_SPECIFIC_CATALOG = 57651
const PARAMETER_SPECIFIC_NAME = 57652
const PARAMETER_SPECIFIC_SCHEMA = 57653
const RETURNED_OCTET_LENGTH = 57654
const TRANSACTIONS_COMMITTED = 57655
const TRANSACTIONS_ROLLED_BACK = 57656
const USER_DEFINED_TYPE_CATALOG = 57657
const USER_DEFINED_TYPE_CODE = 57658
const USER_DEFINED_TYPE_NAME = 57659
const USER_DEFINED_TYPE_SCHEMA = 57660
const VALUES = 57661
const LAST_INSERT_ID = 57662
const NEXT = 57663
const VALUE = 57664
const SHARE = 57665
const MODE = 57666
const SQL_NO_CACHE = 57667
const SQL_CACHE = 57668
const SQL_CALC_FOUND_ROWS = 57669
const JOIN = 57670
const STRAIGHT_JOIN = 57671
const LEFT = 57672
const RIGHT = 57673
const INNER = 57674
const OUTER = 57675
const CROSS = 57676
const NATURAL = 57677
const USE = 57678
const FORCE = 57679
const ON = 57680
const USING = 57681
const INPLACE = 57682
const COPY = 57683
const INSTANT = 57684
const ALGORITHM = 57685
const NONE = 57686
const SHARED = 57687
const EXCLUSIVE = 57688
const SUBQUERY_AS_EXPR = 57689
const ID = 57690
const AT_ID = 57691
const AT_AT_ID = 57692
const HEX = 57693
const STRING = 57694
const NCHAR_STRING = 57695
const INTEGRAL = 57696
const FLOAT = 57697
const DECIMAL = 57698
const HEXNUM = 57699
const VALUE_ARG = 57700
const LIST_ARG = 57701
const COMMENT = 57702
const COMMENT_KEYWORD = 57703
const BIT_LITERAL = 57704
const COMPRESSION = 57705
const JSON_PRETTY = 57706
const JSON_STORAGE_SIZE = 57707
const JSON_STORAGE_FREE = 57708
const JSON_CONTAINS = 57709
const JSON_CONTAINS_PATH = 57710
const JSON_EXTRACT = 57711
const JSON_KEYS = 57712
const JSON_OVERLAPS = 57713
const JSON_SEARCH = 57714
const JSON_VALUE = 57715
const EXTRACT = 57716
const NULL = 57717
const TRUE = 57718
const FALSE = 57719
const OFF = 57720
const DISCARD = 57721
const IMPORT = 57722
const ENABLE = 57723
const DISABLE = 57724
const TABLESPACE = 57725
const VIRTUAL = 57726
const STORED = 57727
const BOTH = 57728
const LEADING = 57729
const TRAILING = 57730
const EMPTY_FROM_CLAUSE = 57731
const LOWER_THAN_CHARSET = 57732
const CHARSET = 57733
const UNIQUE = 57734
const KEY = 57735
const EXPRESSION_PREC_SETTER = 57736
const OR = 57737
const AND = 57738
const NOT = 57739
const BETWEEN = 57740
const CASE = 57741
const WHEN = 57742
const THEN = 57743
const ELSE = 57744
const END = 57745
const LE = 57746
const GE = 57747
const NE = 57748
const NULL_SAFE_EQUAL = 57749
const IS = 57750
const LIKE = 57751
const REGEXP = 57752
const IN = 57753
const SHIFT_LEFT = 57754
const SHIFT_RIGHT = 57755
const DIV = 57756
const MOD = 57757
const UNARY = 57758
const COLLATE = 57759
const BINARY = 57760
const UNDERSCORE_ARMSCII8 = 57761
const UNDERSCORE_ASCII = 57762
const UNDERSCORE_BIG5 = 57763
const UNDERSCORE_BINARY = 57764
const UNDERSCORE_CP1250 = 57765
const UNDERSCORE_CP1251 = 57766
const UNDERSCORE_CP1256 = 57767
const UNDERSCORE_CP1257 = 57768
const UNDERSCORE_CP850 = 57769
const UNDERSCORE_CP852 = 57770
const UNDERSCORE_CP866 = 57771
const UNDERSCORE_CP932 = 57772
const UNDERSCORE_DEC8 = 57773
const UNDERSCORE_EUCJPMS = 57774
const UNDERSCORE_EUCKR = 57775
const UNDERSCORE_GB18030 = 57776
const UNDERSCORE_GB2312 = 57777
const UNDERSCORE_GBK = 57778
const UNDERSCORE_GEOSTD8 = 57779
const UNDERSCORE_GREEK = 57780
const UNDERSCORE_HEBREW = 57781
const UNDERSCORE_HP8 = 57782
const UNDERSCORE_KEYBCS2 = 57783
const UNDERSCORE_KOI8R = 57784
const UNDERSCORE_KOI8U = 57785
const UNDERSCORE_LATIN1 = 57786
const UNDERSCORE_LATIN2 = 57787
const UNDERSCORE_LATIN5 = 57788
const UNDERSCORE_LATIN7 = 57789
const UNDERSCORE_MACCE = 57790
const UNDERSCORE_MACROMAN = 57791
const UNDERSCORE_SJIS = 57792
const UNDERSCORE_SWE7 = 57793
const UNDERSCORE_TIS620 = 57794
const UNDERSCORE_UCS2 = 57795
const UNDERSCORE_UJIS = 57796
const UNDERSCORE_UTF16 = 57797
const UNDERSCORE_UTF16LE = 57798
const UNDERSCORE_UTF32 = 57799
const UNDERSCORE_UTF8 = 57800
const UNDERSCORE_UTF8MB4 = 57801
const UNDERSCORE_UTF8MB3 = 57802
const INTERVAL = 57803
const JSON_EXTRACT_OP = 57804
const JSON_UNQUOTE_EXTRACT_OP = 57805
const CREATE = 57806
const ALTER = 57807
const DROP = 57808
const RENAME = 57809
const ANALYZE = 57810
const ANALYSE = 57811
const ADD = 57812
const FLUSH = 57813
const CHANGE = 57814
const MODIFY = 57815
const DEALLOCATE = 57816
const REVERT = 57817
const SCHEMA = 57818
const TABLE = 57819
const INDEX = 57820
const VIEW = 57821
const TO = 57822
const IGNORE = 57823
const IF = 57824
const PRIMARY = 57825
const COLUMN = 57826
const SPATIAL = 57827
const FULLTEXT = 57828
const KEY_BLOCK_SIZE = 57829
const CHECK = 57830
const INDEXES = 57831
const ACTION = 57832
const CASCADE = 57833
const CONSTRAINT = 57834
const FOREIGN = 57835
const NO = 57836
const REFERENCES = 57837
const RESTRICT = 57838
const SHOW = 57839
const DESCRIBE = 57840
const EXPLAIN = 57841
const DATE = 57842
const ESCAPE = 57843
const REPAIR = 57844
const OPTIMIZE = 57845
const TRUNCATE = 57846
const COALESCE = 57847
const EXCHANGE = 57848
const REBUILD = 57849
const PARTITIONING = 57850
const REMOVE = 57851
const PREPARE = 57852
const EXECUTE = 57853
const MAXVALUE = 57854
const PARTITION = 57855
const REORGANIZE = 57856
const LESS = 57857
const THAN = 57858
const PROCEDURE = 57859
const TRIGGER = 57860
const VINDEX = 57861
const VINDEXES = 57862
const DIRECTORY = 57863
const NAME = 57864
const UPGRADE = 57865
const STATUS = 57866
const VARIABLES = 57867
const WARNINGS = 57868
const CASCADED = 57869
const DEFINER = 57870
const OPTION = 57871
const SQL = 57872
const UNDEFINED = 57873
const SEQUENCE = 57874
const MERGE = 57875
const TEMPORARY = 57876
const TEMPTABLE = 57877
const INVOKER = 57878
const SECURITY = 57879
const FIRST = 57880
const AFTER = 57881
const LAST = 57882
const CANCEL = 57883
const RETRY = 57884
const COMPLETE = 57885
const CLEANUP = 57886
const THROTTLE = 57887
const UNTHROTTLE = 57888
const EXPIRE = 57889
const RATIO = 57890
const BEGIN = 57891
const START = 57892
const TRANSACTION = 57893
const COMMIT = 57894
const ROLLBACK = 57895
const SAVEPOINT = 57896
const RELEASE = 57897
const WORK = 57898
const BIT = 57899
const TINYINT = 57900
const SMALLINT = 57901
const MEDIUMINT = 57902
const INT = 57903
const INTEGER = 57904
const BIGINT = 57905
const INTNUM = 57906
const REAL = 57907
const DOUBLE = 57908
const FLOAT_TYPE = 57909
const DECIMAL_TYPE = 57910
const NUMERIC = 57911
const TIME = 57912
const TIMESTAMP = 57913
const DATETIME = 57914
const YEAR = 57915
const CHAR = 57916
const VARCHAR = 57917
const BOOL = 57918
const CHARACTER = 57919
const VARBINARY = 57920
const NCHAR = 57921
const TEXT = 57922
const TINYTEXT = 57923
const MEDIUMTEXT = 57924
const LONGTEXT = 57925
const BLOB = 57926
const TINYBLOB = 57927
const MEDIUMBLOB = 57928
const LONGBLOB = 57929
const JSON = 57930
const JSON_SCHEMA_VALID = 57931
const JSON_SCHEMA_VALIDATION_REPORT = 57932
const ENUM = 57933
const GEOMETRY = 57934
const POINT = 57935
const LINESTRING = 57936
const POLYGON = 57937
const GEOMETRYCOLLECTION = 57938
const MULTIPOINT = 57939
const MULTILINESTRING = 57940
const MULTIPOLYGON = 57941
const ASCII = 57942
const UNICODE = 57943
const NULLX = 57944
const AUTO_INCREMENT = 57945
const APPROXNUM = 57946
const SIGNED = 57947
const UNSIGNED = 57948
const ZEROFILL = 57949
const CODE = 57950
const COLLATION = 57951
const COLUMNS = 57952
const DATABASES = 57953
const ENGINES = 57954
const EVENT = 57955
const EXTENDED = 57956
const FIELDS = 57957
const FULL = 57958
const FUNCTION = 57959
const GTID_EXECUTED = 57960
const KEYSPACES = 57961
const OPEN = 57962
const PLUGINS = 57963
const PRIVILEGES = 57964
const PROCESSLIST = 57965
const SCHEMAS = 57966
const TABLES = 57967
const TRIGGERS = 57968
const USER = 57969
const VGTID_EXECUTED = 57970
const VSCHEMA = 57971
const NAMES = 57972
const GLOBAL = 57973
const SESSION = 57974
const ISOLATION = 57975
const LEVEL = 57976
const READ = 57977
const WRITE = 57978
const ONLY = 57979
const REPEATABLE = 57980
const COMMITTED = 57981
const UNCOMMITTED = 57982
const SERIALIZABLE = 57983
const CURRENT_TIMESTAMP = 57984
const DATABASE = 57985
const CURRENT_DATE = 57986
const NOW = 57987
const CURRENT_TIME = 57988
const LOCALTIME = 57989
const LOCALTIMESTAMP = 57990
const CURRENT_USER = 57991
const UTC_DATE = 57992
const UTC_TIME = 57993
const UTC_TIMESTAMP = 57994
const DAY = 57995
const DAY_HOUR = 57996
const DAY_MICROSECOND = 57997
const DAY_MINUTE = 57998
const DAY_SECOND = 57999
const HOUR = 58000
const HOUR_MICROSECOND = 58001
const HOUR_MINUTE = 58002
const HOUR_SECOND = 58003
const MICROSECOND = 58004
const MINUTE = 58005
const MINUTE_MICROSECOND = 58006
const MINUTE_SECOND = 58007
const MONTH = 58008
const QUARTER = 58009
const SECOND = 58010
const SECOND_MICROSECOND = 58011
const YEAR_MONTH = 58012
const WEEK = 58013
const REPLACE = 58014
const CONVERT = 58015
const CAST = 58016
const SUBSTR = 58017
const SUBSTRING = 58018
const GROUP_CONCAT = 58019
const SEPARATOR = 58020
const TIMESTAMPADD = 58021
const TIMESTAMPDIFF = 58022
const WEIGHT_STRING = 58023
const LTRIM = 58024
const RTRIM = 58025
const TRIM = 58026
const JSON_ARRAY = 58027
const JSON_OBJECT = 58028
const JSON_QUOTE = 58029
const JSON_DEPTH = 58030
const JSON_TYPE = 58031
const JSON_LENGTH = 58032
const JSON_VALID = 58033
const JSON_ARRAY_APPEND = 58034
const JSON_ARRAY_INSERT = 58035
const JSON_INSERT = 58036
const JSON_MERGE = 58037
const JSON_MERGE_PATCH = 58038
const JSON_MERGE_PRESERVE = 58039
const JSON_REMOVE = 58040
const JSON_REPLACE = 58041
const JSON_SET = 58042
const JSON_UNQUOTE = 58043
const MATCH = 58044
const AGAINST = 58045
const BOOLEAN = 58046
const LANGUAGE = 58047
const WITH = 58048
const QUERY = 58049
const EXPANSION = 58050
const WITHOUT = 58051
const VALIDATION = 58052
const UNUSED = 58053
const ARRAY = 58054
const BYTE = 58055
const CUME_DIST = 58056
const DESCRIPTION = 58057
const DENSE_RANK = 58058
const EMPTY = 58059
const EXCEPT = 58060
const FIRST_VALUE = 58061
const GROUPING = 58062
const GROUPS = 58063
const JSON_TABLE = 58064
const LAG = 58065
const LAST_VALUE = 58066
const LATERAL = 58067
const LEAD = 58068
const NTH_VALUE = 58069
const NTILE = 58070
const OF = 58071
const OVER = 58072
const PERCENT_RANK = 58073
const RANK = 58074
const RECURSIVE = 58075
const ROW_NUMBER = 58076
const SYSTEM = 58077
const WINDOW = 58078
const ACTIVE = 58079
const ADMIN = 58080
const AUTOEXTEND_SIZE = 58081
const BUCKETS = 58082
const CLONE = 58083
const COLUMN_FORMAT = 58084
const COMPONENT = 58085
const DEFINITION = 58086
const ENFORCED = 58087
const ENGINE_ATTRIBUTE = 58088
const EXCLUDE = 58089
const FOLLOWING = 58090
const GEOMCOLLECTION = 58091
const GET_MASTER_PUBLIC_KEY = 58092
const HISTOGRAM = 58093
const HISTORY = 58094
const INACTIVE = 58095
const INVISIBLE = 58096
const LOCKED = 58097
const MASTER_COMPRESSION_ALGORITHMS = 58098
const MASTER_PUBLIC_KEY_PATH = 58099
const MASTER_TLS_CIPHERSUITES = 58100
const MASTER_ZSTD_COMPRESSION_LEVEL = 58101
const NESTED = 58102
const NETWORK_NAMESPACE = 58103
const NOWAIT = 58104
const NULLS = 58105
const OJ = 58106
const OLD = 58107
const OPTIONAL = 58108
const ORDINALITY = 58109
const ORGANIZATION = 58110
const OTHERS = 58111
const PARTIAL = 58112
const PATH = 58113
const PERSIST = 58114
const PERSIST_ONLY = 58115
const PRECEDING = 58116
const PRIVILEGE_CHECKS_USER = 58117
const PROCESS = 58118
const RANDOM = 58119
const REFERENCE = 58120
const REQUIRE_ROW_FORMAT = 58121
const RESOURCE = 58122
const RESPECT = 58123
const RESTART = 58124
const RETAIN = 58125
const REUSE = 58126
const ROLE = 58127
const SECONDARY = 58128
const SECONDARY_ENGINE = 58129
const SECONDARY_ENGINE_ATTRIBUTE = 58130
const SECONDARY_LOAD = 58131
const SECONDARY_UNLOAD = 58132
const SIMPLE = 58133
const SKIP = 58134
const SRID = 58135
const THREAD_PRIORITY = 58136
const TIES = 58137
const UNBOUNDED = 58138
const VCPU = 58139
const VISIBLE = 58140
const RETURNING = 58141
const FORMAT = 58142
const TREE = 58143
const TRADITIONAL = 58144
const LOCAL = 58145
const LOW_PRIORITY = 58146
const NO_WRITE_TO_BINLOG = 58147
const LOGS = 58148
const ERROR = 58149
const GENERAL = 58150
const HOSTS = 58151
const OPTIMIZER_COSTS = 58152
const USER_RESOURCES = 58153
const SLOW = 58154
const CHANNEL = 58155
const RELAY = 58156
const EXPORT = 58157
const AVG_ROW_LENGTH = 58158
const CONNECTION = 58159
const CHECKSUM = 58160
const DELAY_KEY_WRITE = 58161
const ENCRYPTION = 58162
const INSERT_METHOD = 58163
const MAX_ROWS = 58164
const MIN_ROWS = 58165
const PACK_KEYS = 58166
const PASSWORD = 58167
const FIXED = 58168
const DYNAMIC = 58169
const COMPRESSED = 58170
const REDUNDANT = 58171
const COMPACT = 58172
const ROW_FORMAT = 58173
const STATS_AUTO_RECALC = 58174
const STATS_PERSISTENT = 58175
const STATS_SAMPLE_PAGES = 58176
const STORAGE = 58177
const MEMORY = 58178
const DISK = 58179

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 46,
	13, 46,
	-2, 36,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 139,
	855, 139,
	-2, 147,
	-1, 47,
	1, 463,
	855, 463,
	-2, 147,
	-1, 54,
	35, 594,
	495, 594,
	506, 594,
	541, 606,
	542, 606,
	-2, 596,
	-1, 59,
	497, 619,
	-2, 617,
	-1, 112,
	494, 1106,
	-2, 113,
	-1, 114,
	1, 140,
	855, 140,
	-2, 147,
	-1, 125,
	394, 147,
	433, 147,
	594, 147,
	-2, 472,
	-1, 126,
	395, 370,
	500, 370,
	-2, 457,
	-1, 719,
	478, 1128,
	-2, 1123,
	-1, 720,
	478, 1129,
	-2, 1124,
	-1, 721,
	478, 1130,
	-2, 1125,
	-1, 732,
	348, 1305,
	478, 1305,
	479, 1305,
	480, 1305,
	-2, 269,
	-1, 733,
	348, 1346,
	478, 1346,
	479, 1346,
	480, 1346,
	-2, 268,
	-1, 734,
	348, 1557,
	478, 1557,
	479, 1557,
	480, 1557,
	-2, 270,
	-1, 795,
	321, 685,
	-2, 700,
	-1, 829,
	409, 1535,
	-2, 106,
	-1, 830,
	409, 1354,
	-2, 107,
	-1, 836,
	409, 1430,
	-2, 1100,
	-1, 976,
	505, 40,
	510, 40,
	-2, 381,
	-1, 1032,
	1, 516,
	855, 516,
	-2, 147,
	-1, 1231,
	478, 1557,
	-2, 272,
	-1, 1256,
	321, 686,
	-2, 705,
	-1, 1257,
	321, 687,
	-2, 706,
	-1, 1306,
	1, 420,
	855, 420,
	-2, 147,
	-1, 1386,
	505, 41,
	510, 41,
	-2, 382,
	-1, 1645,
	478, 1134,
	-2, 1127,
	-1, 1720,
	1, 1093,
	349, 1093,
	855, 1093,
	-2, 1452,
	-1, 1725,
	1, 421,
	855, 421,
	-2, 147,
	-1, 1731,
	348, 379,
	351, 379,
	352, 379,
	353, 379,
	-2, 1373,
	-1, 1732,
	348, 380,
	351, 380,
	352, 380,
	353, 380,
	-2, 1400,
	-1, 1734,
	25, 168,
	-2, 170,
	-1, 1954,
	349, 38,
	-2, 741,
	-1, 2003,
	339, 90,
	349, 90,
	-2, 759,
	-1, 2357,
	349, 38,
	-2, 742,
	-1, 2381,
	7, 52,
	18, 52,
	20, 52,
	350, 52,
	-2, 734,
	-1, 2574,
	22, 1433,
	32, 1433,
	434, 1433,
	517, 1433,
	574, 1433,
	575, 1433,
	576, 1433,
	577, 1433,
	578, 1433,
	579, 1433,
	580, 1433,
	582, 1433,
	583, 1433,
	584, 1433,
	585, 1433,
	586, 1433,
	587, 1433,
	588, 1433,
	589, 1433,
	590, 1433,
	591, 1433,
	592, 1433,
	593, 1433,
	595, 1433,
	597, 1433,
	598, 1433,
	599, 1433,
	600, 1433,
	601, 1433,
	602, 1433,
	603, 1433,
	604, 1433,
	605, 1433,
	608, 1433,
	609, 1433,
	610, 1433,
	611, 1433,
	612, 1433,
	613, 1433,
	614, 1433,
	615, 1433,
	616, 1433,
	721, 1433,
	-2, 535,
}

const psqPrivate = 57344

const psqLast = 49060

var psqAct = [...]int{
	719, 2451, 2452, 2628, 729, 2525, 2450, 2601, 1722, 2153,
	2602, 2572, 2429, 1309, 2291, 2556, 1658, 722, 2231, 2238,
	1909, 2244, 3, 712, 36, 2511, 2490, 637, 94, 1236,
	1972, 1968, 1975, 641, 713, 723, 1271, 2117, 788, 807,
	2151, 710, 711, 663, 2152, 2274, 1086, 1678, 2372, 634,
	160, 1760, 1976, 160, 2041, 601, 160, 1743, 2353, 2100,
	1997, 615, 2064, 160, 1973, 635, 1781, 1764, 2042, 834,
	1807, 160, 2032, 2043, 1711, 1699, 1986, 35, 633, 1007,
	1970, 808, 1258, 1945, 1639, 160, 142, 1700, 1615, 1545,
	1556, 1796, 123, 160, 1780, 941, 629, 1504, 1766, 792,
	1298, 796, 1823, 790, 1684, 1384, 2037, 615, 37, 1614,
	615, 160, 615, 942, 2005, 1277, 646, 1659, 93, 810,
	1168, 1702, 1239, 1568, 1521, 1391, 1105, 945, 1458, 1778,
	973, 1454, 1757, 948, 1443, 974, 977, 949, 1392, 1744,
	1297, 1281, 802, 1295, 1611, 1084, 1358, 1463, 1642, 143,
	1379, 117, 156, 831, 121, 797, 1043, 1029, 163, 164,
	165, 2080, 2079, 1821, 87, 100, 115, 2108, 1071, 2109,
	116, 1106, 2234, 2545, 604, 2455, 119, 2455, 163, 164,
	165, 1510, 1509, 2544, 2401, 1508, 798, 1507, 821, 1655,
	1656, 815, 1506, 820, 582, 1432, 118, 1106, 124, 2590,
	1363, 604, 627, 1499, 628, 102, 103, 1941, 106, 2341,
	1811, 112, 971, 967, 157, 2605, 800, 577, 89, 1009,
	2635, 2600, 1772, 74, 1014, 1015, 1016, 95, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 785, 786, 787,
	972, 602, 795, 83, 2614, 624, 835, 1768, 2071, 1809,
	828, 2074, 1514, 1011, 1810, 96, 76, 604, 966, 76,
	1010, 2634, 78, 2582, 118, 984, 965, 2566, 1855, 76,
	823, 824, 156, 2545, 998, 2624, 1004, 2580, 1115, 2540,
	1693, 964, 2612, 1012, 2430, 963, 2586, 2587, 597, 2557,
	2565, 1137, 2539, 2116, 2246, 2247, 119, 1747, 2577, 791,
	2581, 595, 789, 2325, 1115, 76, 1373, 1299, 118, 1300,
	625, 2495, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146,
	1145, 1147, 1148, 2088, 1078, 1942, 1080, 2087, 962, 2227,
	1036, 1037, 1031, 2107, 1175, 1171, 1852, 2014, 1716, 809,
	2013, 592, 1083, 2015, 2228, 2229, 1717, 1718, 1050, 1061,
	600, 957, 783, 1051, 959, 782, 2526, 2025, 1657, 799,
	75, 1049, 1039, 1048, 1077, 1079, 2316, 1066, 1067, 2606,
	1062, 1737, 1736, 604, 605, 604, 1111, 2314, 1055, 1104,
	958, 2293, 2035, 2036, 604, 8, 960, 953, 613, 1498,
	2607, 618, 611, 7, 2065, 6, 1797, 2286, 2083, 2245,
	1824, 605, 1111, 2623, 1832, 2287, 1833, 1444, 1834, 1064,
	1065, 2248, 1013, 1070, 1829, 1017, 1500, 1501, 2295, 1149,
	1826, 1828, 1426, 1245, 1747, 1149, 2632, 2248, 946, 2636,
	1059, 946, 944, 583, 986, 585, 980, 2610, 607, 946,
	606, 588, 979, 587, 590, 598, 591, 1082, 586, 962,
	596, 954, 1390, 599, 1063, 594, 608, 605, 956, 955,
	1075, 1068, 1056, 1827, 1076, 2294, 1427, 1455, 1428, 1830,
	1779, 1069, 822, 1853, 1081, 2591, 1806, 2096, 2263, 2235,
	1745, 1746, 962, 1027, 1946, 1948, 986, 1006, 2099, 2082,
	1074, 989, 1816, 1371, 2018, 961, 1265, 979, 1451, 1092,
	992, 988, 1370, 1369, 2112, 2237, 1452, 960, 1367, 144,
	1867, 145, 581, 576, 2118, 2468, 2095, 2388, 2199, 2232,
	2094, 2010, 2454, 1448, 2454, 1150, 1151, 1967, 1933, 1651,
	1285, 155, 1215, 985, 1041, 2033, 2246, 2247, 1028, 979,
	982, 983, 2233, 946, 1723, 1149, 1148, 976, 980, 1141,
	1142, 1143, 1144, 1146, 1145, 1147, 1148, 1389, 2226, 1072,
	1110, 1107, 1108, 1109, 1114, 1116, 1113, 1694, 1112, 805,
	1464, 2534, 1008, 605, 2239, 605, 1045, 160, 986, 160,
	2365, 2193, 160, 1825, 605, 985, 1110, 1107, 1108, 1109,
	1114, 1116, 1113, 2027, 1112, 1853, 85, 2120, 1526, 85,
	1449, 1301, 615, 1087, 615, 109, 1771, 1745, 1746, 85,
	1808, 1102, 1527, 1528, 1525, 2496, 961, 968, 2136, 615,
	615, 1143, 1144, 1146, 1145, 1147, 1148, 609, 1569, 144,
	1883, 145, 2102, 1569, 2054, 1030, 1119, 2101, 2085, 2404,
	147, 2245, 1120, 1098, 36, 85, 1947, 2102, 2403, 961,
	1088, 155, 2101, 2248, 1770, 2361, 1516, 1518, 1519, 603,
	1801, 996, 2130, 2129, 2128, 2122, 1445, 2126, 1446, 2121,
	2585, 2119, 1447, 1120, 110, 1405, 2124, 985, 2538, 1517,
	1404, 1388, 999, 979, 995, 2123, 2608, 1001, 2389, 1120,
	1286, 1002, 1000, 1859, 1860, 1861, 1685, 1686, 1769, 85,
	1137, 2111, 2125, 2127, 1120, 1265, 2290, 2402, 1152, 1153,
	1154, 1155, 2637, 1524, 2584, 1775, 1573, 2609, 1160, 2441,
	1163, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1145,
	1147, 1148, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1122,
	1046, 2408, 1052, 1053, 1054, 2395, 1120, 2047, 1137, 1089,
	1132, 1120, 1133, 2038, 1869, 1234, 1597, 1819, 1136, 1461,
	147, 2236, 1430, 1229, 1424, 1156, 1134, 1135, 1131, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1146, 1145, 1147, 1148,
	736, 2281, 2282, 160, 1422, 1421, 615, 615, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1146, 1145, 1147, 1148, 163,
	164, 165, 160, 2396, 163, 164, 165, 1420, 2017, 1235,
	1091, 2006, 1120, 1248, 163, 164, 165, 1252, 615, 1265,
	790, 1251, 160, 792, 90, 2596, 1265, 615, 1246, 2428,
	1249, 92, 2050, 615, 1733, 91, 1589, 1578, 1579, 1580,
	1581, 1591, 1582, 1583, 1584, 1596, 1592, 1585, 1586, 1593,
	1594, 1595, 1587, 1588, 1590, 1120, 1120, 2192, 986, 1139,
	1140, 1141, 1142, 1143, 1144, 1146, 1145, 1147, 1148, 1120,
	1120, 1235, 1117, 831, 1250, 1965, 2563, 1872, 93, 2533,
	1120, 2221, 163, 164, 165, 1120, 1791, 2322, 1965, 2553,
	1058, 1853, 1137, 1866, 1982, 1898, 1965, 2550, 2546, 1265,
	2240, 1060, 2630, 2194, 1240, 2631, 1961, 2629, 1137, 2337,
	1265, 1120, 2243, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1146, 1145, 1147, 1148, 1965, 2423, 1120, 1805, 1275, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1146, 1145, 1147, 1148,
	79, 160, 1120, 1117, 1265, 1359, 163, 164, 165, 1965,
	1789, 2241, 1879, 1120, 1120, 1368, 2242, 985, 1038, 1005,
	1253, 1903, 1265, 1120, 1073, 1035, 835, 1969, 2453, 1854,
	2453, 84, 2254, 2255, 84, 1465, 615, 1386, 1044, 146,
	75, 1983, 148, 149, 84, 1395, 150, 151, 2073, 1397,
	1398, 1969, 615, 152, 153, 154, 2399, 2400, 1173, 1403,
	1174, 1177, 1406, 1407, 160, 1409, 1101, 1434, 1433, 1435,
	1436, 1437, 1291, 1292, 1099, 96, 1100, 1120, 1270, 789,
	84, 1396, 1120, 791, 1399, 98, 615, 1237, 160, 1120,
	99, 1402, 2072, 1247, 2504, 1265, 1118, 1453, 1119, 2337,
	615, 98, 160, 97, 2138, 2178, 1374, 1375, 1376, 1221,
	1222, 1223, 1224, 1225, 1120, 2254, 2253, 160, 1715, 2638,
	1120, 2006, 1378, 1870, 160, 1120, 721, 1118, 1903, 1119,
	1888, 1383, 1887, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 615, 1118, 1793, 1119, 1874, 1400, 615, 615,
	1394, 1910, 1418, 1419, 1983, 1265, 1873, 1423, 1118, 146,
	1119, 90, 148, 149, 1683, 160, 150, 151, 1269, 1393,
	1366, 1460, 91, 152, 153, 154, 162, 1971, 1120, 162,
	1653, 1381, 162, 1385, 1372, 1380, 2410, 617, 2192, 162,
	1120, 1120, 1401, 1502, 1120, 1120, 2007, 162, 2197, 1265,
	1118, 1450, 1119, 1293, 1120, 1118, 2009, 1119, 1870, 1265,
	615, 162, 1265, 1853, 2081, 1553, 1553, 2320, 1265, 162,
	1549, 1554, 1120, 1559, 615, 1120, 1522, 970, 1550, 1550,
	1456, 1362, 2066, 617, 2062, 2063, 617, 162, 617, 615,
	615, 969, 118, 1529, 965, 1531, 85, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 964,
	1530, 2530, 1520, 963, 1570, 1470, 1118, 1120, 1119, 794,
	1120, 1983, 1468, 1965, 1964, 1265, 1265, 1466, 1467, 1472,
	1612, 1474, 1475, 1476, 1477, 1918, 1265, 1491, 1481, 1414,
	1471, 1265, 2492, 1495, 1496, 1272, 1120, 1478, 1479, 1480,
	1120, 1870, 160, 2483, 1120, 1120, 615, 2471, 1523, 1118,
	1118, 1119, 1119, 163, 164, 165, 1274, 1787, 1362, 1361,
	1307, 1306, 1643, 1118, 1118, 1119, 1119, 2406, 1364, 2288,
	160, 2383, 1612, 615, 1118, 2067, 1119, 1752, 1751, 1118,
	160, 1119, 1441, 615, 1387, 1645, 2414, 1878, 160, 1668,
	160, 1669, 160, 160, 615, 1360, 111, 615, 2339, 2335,
	1410, 1983, 1647, 1648, 99, 1118, 1555, 1119, 615, 2040,
	2044, 1695, 36, 1561, 1562, 98, 93, 97, 1734, 2620,
	1118, 2045, 1119, 1031, 2292, 2192, 92, 2373, 2374, 2493,
	1772, 1666, 1643, 2618, 93, 1493, 1118, 2603, 1119, 2543,
	831, 1674, 2509, 831, 1644, 2379, 2376, 1118, 1118, 1119,
	1119, 2593, 1698, 2268, 2267, 1645, 1870, 1118, 2266, 1119,
	2055, 2378, 2328, 615, 1971, 1646, 1838, 2327, 1649, 1650,
	1782, 1783, 1784, 1265, 1927, 1786, 1788, 1790, 1273, 1748,
	1749, 1750, 2212, 615, 1992, 1993, 2007, 1663, 615, 1395,
	1709, 2207, 1395, 1726, 1395, 2460, 1853, 2459, 2206, 1926,
	615, 2564, 615, 1727, 1673, 1925, 1815, 1680, 1672, 1761,
	1924, 1118, 1676, 1119, 1690, 2198, 1118, 2210, 1119, 615,
	615, 1730, 2211, 1118, 1688, 1119, 2182, 2208, 1767, 1265,
	1263, 1259, 2209, 835, 781, 1714, 835, 1713, 1729, 2411,
	2412, 2413, 160, 1728, 1296, 1260, 984, 1532, 1118, 160,
	1119, 160, 160, 2250, 1118, 160, 1119, 160, 114, 1118,
	2023, 1119, 2048, 1923, 160, 994, 1263, 1259, 1774, 1565,
	1267, 160, 993, 2302, 2044, 1922, 1921, 2105, 1795, 1920,
	1919, 1260, 1090, 1566, 2070, 119, 1762, 1758, 1759, 1913,
	1439, 1814, 1813, 160, 1800, 1812, 1438, 1803, 615, 1804,
	1773, 1777, 1785, 1429, 2190, 2626, 88, 1912, 1817, 1818,
	1911, 2264, 1118, 1762, 1119, 1738, 1802, 1739, 1740, 1741,
	1742, 1799, 1798, 1841, 1118, 1118, 1119, 1119, 1118, 1118,
	1119, 1119, 2531, 1753, 1754, 1755, 1756, 2488, 1118, 1822,
	1119, 2249, 1415, 1416, 1417, 1996, 90, 975, 1677, 85,
	2354, 826, 1908, 92, 1857, 1907, 1118, 91, 1119, 1118,
	1522, 1119, 1988, 1991, 1992, 1993, 1989, 1522, 1990, 1994,
	1685, 1686, 2373, 2374, 813, 814, 1863, 97, 1865, 2181,
	2516, 1906, 2515, 2465, 1837, 1904, 2269, 2180, 1792, 1900,
	1899, 99, 812, 1864, 99, 2415, 2416, 2417, 98, 2464,
	1969, 1118, 98, 1119, 1118, 98, 1119, 97, 2360, 1411,
	1412, 1413, 1988, 1991, 1992, 1993, 1989, 1032, 1990, 1994,
	2045, 2143, 99, 1844, 1845, 2622, 2621, 2621, 1847, 1851,
	1118, 1889, 1119, 98, 1118, 97, 1119, 1848, 1118, 1118,
	1119, 1119, 1523, 162, 92, 162, 1664, 1265, 162, 1523,
	1862, 1287, 1279, 2622, 160, 104, 105, 1868, 2466, 1494,
	2394, 160, 804, 101, 86, 1, 2398, 615, 617, 1553,
	617, 2579, 593, 615, 1951, 987, 990, 991, 1654, 1238,
	2604, 2575, 1550, 997, 2576, 617, 617, 1431, 1425, 2431,
	1613, 1882, 2489, 1765, 978, 125, 1724, 615, 1939, 1725,
	2559, 108, 939, 107, 981, 160, 1057, 2458, 1794, 160,
	2024, 1735, 1313, 1880, 1955, 1311, 1312, 1310, 1315, 1314,
	796, 1645, 1890, 2340, 2016, 1896, 1497, 1974, 1999, 1977,
	612, 1995, 1670, 1671, 1262, 158, 1261, 1302, 1280, 1003,
	584, 2256, 1820, 589, 1047, 615, 1161, 1492, 2179, 2012,
	832, 825, 1665, 1953, 1979, 2554, 2021, 1962, 1276, 2463,
	2359, 1881, 1567, 1703, 1515, 639, 638, 636, 1256, 1257,
	1262, 1956, 1261, 615, 797, 1240, 1940, 1692, 1949, 160,
	1644, 1123, 1998, 724, 1943, 1944, 160, 1288, 1987, 1930,
	1931, 1985, 1984, 615, 1963, 1839, 1710, 2026, 2028, 1966,
	2375, 2371, 1395, 1395, 2571, 798, 2004, 1705, 1701, 1960,
	1959, 647, 2019, 640, 632, 2391, 2011, 2078, 2276, 2034,
	2084, 2289, 2086, 2077, 2022, 2008, 2285, 160, 160, 160,
	160, 160, 1767, 1103, 1255, 626, 952, 1564, 160, 160,
	2060, 2020, 2494, 1856, 2324, 1254, 1576, 1577, 62, 162,
	40, 1604, 617, 617, 160, 620, 2589, 1094, 819, 2039,
	31, 30, 29, 28, 2046, 23, 22, 21, 162, 20,
	19, 25, 18, 17, 16, 615, 2076, 2056, 2057, 2058,
	2052, 2051, 2599, 2625, 617, 113, 1378, 49, 162, 46,
	44, 122, 120, 617, 47, 43, 1033, 41, 27, 617,
	26, 15, 14, 13, 2075, 12, 11, 2068, 2069, 790,
	10, 2131, 9, 1553, 5, 1553, 4, 34, 1553, 2135,
	33, 32, 1097, 1553, 24, 2, 1550, 0, 1550, 0,
	0, 1550, 0, 2114, 615, 2097, 1550, 0, 0, 0,
	0, 0, 2154, 0, 2154, 2113, 0, 2154, 0, 0,
	0, 2156, 2154, 0, 2166, 2167, 2168, 2169, 2159, 0,
	0, 2115, 160, 2160, 2132, 0, 615, 0, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2173, 0, 0, 0, 160, 160, 160, 160, 160, 0,
	0, 2183, 2147, 0, 0, 0, 160, 0, 0, 0,
	0, 160, 0, 0, 160, 0, 160, 162, 2188, 160,
	160, 160, 2103, 2200, 2173, 2104, 1974, 2172, 0, 0,
	2220, 0, 2184, 0, 1252, 1999, 0, 0, 2174, 2161,
	2162, 2163, 2164, 2165, 0, 0, 0, 0, 0, 0,
	0, 0, 617, 0, 0, 2185, 0, 0, 0, 2262,
	0, 0, 0, 2191, 0, 0, 160, 0, 617, 2201,
	0, 0, 2204, 615, 0, 0, 2222, 0, 615, 2223,
	162, 2213, 2202, 2203, 0, 2205, 0, 0, 2217, 2218,
	1460, 93, 0, 160, 2224, 2175, 2176, 2177, 0, 0,
	0, 0, 617, 0, 162, 0, 0, 160, 0, 2271,
	160, 0, 2251, 2252, 0, 2230, 617, 0, 162, 0,
	2303, 2257, 2259, 2278, 2277, 2273, 2258, 0, 0, 0,
	0, 0, 0, 162, 2260, 2261, 0, 0, 0, 0,
	162, 0, 720, 1767, 2272, 0, 0, 0, 2283, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 617, 0,
	0, 0, 0, 2298, 617, 617, 0, 2297, 2270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2334, 162, 0, 0, 2312, 0, 0, 0, 2306, 615,
	160, 0, 161, 0, 0, 161, 0, 0, 161, 0,
	2305, 0, 0, 616, 0, 161, 0, 0, 615, 0,
	615, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 617, 161, 0, 2366,
	36, 0, 160, 0, 0, 161, 1974, 2597, 0, 1977,
	617, 2368, 2370, 1977, 0, 2355, 2356, 1330, 0, 616,
	2397, 0, 616, 161, 616, 617, 617, 2364, 0, 160,
	0, 2380, 2384, 2377, 2386, 2387, 0, 2362, 0, 0,
	2300, 2301, 0, 0, 160, 0, 0, 160, 160, 160,
	615, 0, 0, 0, 0, 0, 2278, 2277, 2392, 0,
	2393, 0, 2385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 615, 615, 615, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 2407, 617, 2409, 0, 2425, 2426, 2422, 0, 2309,
	2310, 2427, 2311, 0, 0, 2313, 0, 2315, 0, 2317,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 617,
	1553, 0, 1553, 0, 0, 0, 162, 0, 0, 617,
	0, 0, 0, 1550, 162, 1550, 162, 2436, 162, 162,
	617, 0, 0, 617, 2440, 0, 0, 0, 2437, 2154,
	0, 2154, 0, 0, 617, 0, 2446, 0, 0, 2456,
	0, 0, 2447, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 0, 2473, 0, 0, 0, 0, 2467, 790,
	1977, 1550, 0, 0, 0, 0, 0, 0, 0, 2469,
	0, 0, 0, 790, 0, 0, 0, 2475, 0, 0,
	0, 0, 2477, 2474, 0, 0, 0, 0, 0, 617,
	0, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2486, 0, 0, 0, 617,
	0, 0, 2506, 2507, 617, 2485, 0, 0, 615, 0,
	1553, 0, 615, 615, 0, 2510, 617, 0, 617, 615,
	0, 0, 615, 1550, 0, 0, 0, 2491, 0, 0,
	0, 0, 0, 0, 615, 617, 617, 2517, 2518, 0,
	0, 0, 0, 615, 160, 2520, 0, 2521, 0, 0,
	1974, 0, 0, 0, 0, 0, 0, 0, 162, 2523,
	0, 2532, 36, 0, 2527, 162, 0, 162, 162, 2524,
	0, 162, 0, 162, 0, 0, 0, 0, 0, 0,
	162, 2529, 0, 0, 615, 615, 0, 162, 0, 0,
	2535, 0, 0, 0, 0, 0, 0, 615, 0, 0,
	0, 0, 160, 615, 2555, 36, 0, 0, 0, 162,
	2558, 0, 2567, 0, 617, 0, 0, 0, 2570, 0,
	0, 2588, 0, 2578, 2583, 0, 0, 0, 2592, 0,
	2491, 2560, 1952, 0, 0, 1552, 735, 2598, 0, 0,
	0, 1551, 0, 0, 0, 0, 0, 615, 0, 0,
	0, 0, 0, 156, 1553, 2611, 0, 2615, 2613, 2616,
	2619, 0, 2617, 0, 2061, 0, 0, 1550, 0, 0,
	0, 0, 2627, 0, 0, 0, 2633, 119, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 1318,
	1553, 2641, 2642, 2507, 0, 2639, 2640, 0, 1377, 0,
	0, 0, 0, 1550, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 139, 0, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 0, 0, 161,
	0, 161, 0, 0, 161, 0, 0, 0, 0, 0,
	162, 0, 1331, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 617, 616, 0, 616, 0, 0, 617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 162, 0, 703, 0, 1344,
	1347, 1348, 1349, 1350, 1351, 1352, 0, 1353, 1354, 1355,
	1356, 1357, 1332, 1333, 1334, 1335, 1316, 1317, 1345, 0,
	1319, 0, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 617, 0, 1329, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 0, 0, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 617,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 119,
	0, 139, 162, 0, 0, 0, 0, 0, 0, 617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 943, 0, 950,
	0, 0, 0, 162, 162, 162, 162, 162, 0, 0,
	0, 0, 0, 0, 162, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 616, 616,
	162, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 136, 161, 0, 0, 0, 0, 138,
	0, 617, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 161, 0, 0, 0, 0, 616,
	144, 0, 145, 0, 0, 616, 0, 136, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 133, 134,
	132, 131, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 145, 0, 0, 0,
	617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 134, 132, 131, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 617, 0, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 162, 162, 162, 162, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 162, 0, 0,
	162, 0, 162, 161, 0, 162, 162, 162, 127, 135,
	137, 0, 0, 126, 0, 128, 129, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 127, 135, 137, 0, 0, 126, 0, 128,
	129, 0, 162, 0, 616, 147, 0, 0, 0, 617,
	0, 0, 0, 0, 617, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 136, 0, 0, 616, 0,
	161, 138, 0, 162, 0, 0, 162, 0, 0, 0,
	0, 0, 616, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 145, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 0,
	133, 134, 132, 131, 155, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 616, 0, 0, 0, 0, 0,
	616, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 617, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 617, 0, 617, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 0, 0, 0, 130, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 0, 0,
	127, 135, 137, 0, 0, 126, 0, 128, 129, 0,
	0, 616, 616, 147, 0, 162, 0, 0, 0, 140,
	130, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 162, 162, 162, 617, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 141, 0, 0, 617,
	617, 617, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 616, 833,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 1095, 0, 0,
	0, 0, 161, 0, 0, 616, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 616, 0, 0, 0, 0,
	161, 0, 161, 0, 161, 161, 616, 0, 0, 616,
	146, 0, 0, 148, 149, 0, 0, 150, 151, 0,
	616, 0, 0, 0, 152, 153, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 148, 149, 0,
	0, 150, 151, 0, 0, 0, 0, 0, 152, 153,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1232, 130, 0,
	0, 0, 0, 0, 0, 616, 0, 0, 0, 0,
	616, 0, 0, 0, 617, 0, 0, 0, 617, 617,
	0, 0, 616, 0, 616, 617, 0, 0, 617, 0,
	0, 140, 0, 0, 141, 0, 0, 0, 0, 0,
	617, 616, 616, 0, 0, 0, 0, 0, 0, 617,
	162, 0, 0, 1243, 1244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 161, 0, 161, 161, 0, 0, 161, 0, 161,
	0, 0, 0, 0, 0, 1283, 161, 0, 0, 0,
	617, 617, 0, 161, 833, 0, 0, 0, 0, 0,
	1303, 0, 0, 617, 0, 0, 0, 0, 162, 617,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 148, 149, 0, 0, 150,
	151, 0, 0, 617, 0, 0, 152, 153, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 0, 580, 0, 0, 610, 0, 0,
	1330, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 803, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 580, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1232, 0, 0, 1232, 943,
	0, 0, 0, 0, 0, 1232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 161, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 1440, 0, 616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 833, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 616, 0, 1546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 0, 0, 0, 0, 0, 1232, 0,
	0, 0, 0, 0, 0, 0, 1574, 1575, 0, 161,
	161, 161, 161, 161, 0, 0, 0, 0, 0, 0,
	161, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1283, 0, 0, 833, 0, 0, 616, 0, 0, 0,
	0, 833, 0, 0, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 616, 0,
	616, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 161, 161, 161,
	161, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 161, 0, 0, 161, 0, 161, 0,
	950, 161, 161, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 943, 0, 1546,
	0, 0, 0, 0, 0, 1331, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 616, 1546, 1546, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 580, 0,
	580, 0, 0, 580, 0, 0, 0, 0, 0, 161,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 1347, 1348, 1349, 1350, 1351, 1352, 0,
	1353, 1354, 1355, 1356, 1357, 1332, 1333, 1334, 1335, 1316,
	1317, 1345, 0, 1319, 0, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 0, 1850, 1329, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 0, 0, 0, 0, 0,
	76, 38, 39, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 616, 161, 0, 42, 68, 69, 0, 66, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 161,
	161, 161, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 616, 616, 616, 616, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 803, 1679, 0, 0, 0, 0, 0,
	1957, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 1232, 0, 0, 1981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 673, 672, 682, 683, 684,
	685, 686, 687, 2482, 2478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2029, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 616, 0, 0, 0, 0, 0, 0,
	1679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 1266, 1268, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 616, 616, 0, 0, 0, 0,
	0, 616, 0, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 55, 0,
	0, 0, 0, 0, 0, 616, 161, 0, 0, 1233,
	85, 0, 1233, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 1546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 616, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 1459, 161, 616, 1232, 0, 1232, 0,
	0, 1232, 0, 0, 0, 0, 1232, 0, 580, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 833, 0, 0, 1482, 1483, 580, 580, 580, 580,
	580, 580, 580, 677, 678, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2186, 0, 833, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1232, 0, 0, 45, 48, 51, 50, 53, 0, 0,
	65, 0, 0, 73, 0, 0, 714, 0, 664, 718,
	666, 715, 716, 0, 662, 665, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 81, 80, 818,
	0, 63, 64, 52, 0, 0, 818, 818, 0, 71,
	72, 0, 1233, 667, 668, 670, 674, 675, 2479, 2480,
	2481, 681, 689, 691, 692, 690, 693, 694, 695, 698,
	699, 700, 701, 696, 697, 702, 0, 0, 0, 0,
	943, 0, 0, 1232, 0, 1679, 0, 0, 56, 57,
	0, 58, 59, 60, 61, 0, 818, 1459, 818, 818,
	818, 818, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 1459, 0, 580,
	0, 580, 0, 580, 1712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2186, 0, 1571, 0,
	0, 0, 1572, 0, 0, 0, 0, 0, 0, 0,
	1232, 79, 0, 0, 0, 2367, 0, 2369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1679, 0, 0,
	0, 0, 0, 1675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2432, 2433, 2434, 2435, 1552, 735, 0, 0, 0, 0,
	1551, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	580, 0, 580, 580, 0, 0, 580, 0, 1842, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 580, 1232, 0, 1232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1776, 0, 0, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2513, 0, 0, 0, 2513,
	2513, 0, 0, 0, 1232, 0, 2522, 0, 0, 1679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1679, 0, 630, 0, 0, 0, 0, 0, 0,
	1679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 818, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 811, 580, 0, 0, 0, 0,
	0, 0, 1661, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2568, 0, 0, 0, 0, 0,
	2573, 0, 0, 0, 0, 1233, 0, 0, 0, 0,
	0, 1871, 0, 0, 0, 1875, 580, 1876, 1877, 0,
	580, 0, 0, 0, 0, 0, 1885, 0, 0, 1886,
	0, 731, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2573, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1891, 1892, 1893, 1894, 1895,
	0, 1897, 0, 0, 0, 0, 0, 1901, 0, 1902,
	0, 0, 0, 1905, 0, 0, 0, 0, 0, 0,
	0, 1914, 1915, 1916, 1917, 0, 0, 0, 0, 0,
	580, 0, 0, 0, 1928, 1929, 0, 2059, 0, 0,
	0, 0, 1934, 1935, 1936, 1937, 1938, 793, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1950,
	0, 0, 0, 0, 0, 0, 0, 793, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 580,
	580, 580, 580, 951, 0, 0, 0, 0, 0, 580,
	580, 0, 1980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 0, 1233, 0, 0, 1233, 0, 0, 0, 0,
	1233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1233, 580, 580, 580, 580, 580,
	0, 0, 0, 0, 0, 0, 0, 2214, 0, 0,
	0, 0, 580, 0, 0, 1661, 0, 580, 0, 0,
	580, 2225, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2142, 0, 0, 0,
	0, 0, 0, 0, 1241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2155, 0, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1233, 0, 0,
	0, 0, 0, 0, 0, 0, 2170, 2171, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 580, 0,
	0, 580, 0, 0, 0, 0, 0, 619, 0, 0,
	0, 0, 0, 0, 0, 784, 0, 0, 0, 0,
	0, 0, 0, 0, 2195, 2196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 0, 2215, 2216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 1233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1169, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 0, 0, 0, 0, 0, 2304, 0, 0, 0,
	0, 0, 0, 2308, 0, 580, 0, 0, 580, 580,
	580, 0, 0, 0, 0, 0, 0, 2318, 2319, 2321,
	2323, 0, 0, 0, 0, 0, 0, 2329, 630, 0,
	2331, 2332, 2333, 0, 0, 0, 0, 2336, 0, 0,
	0, 0, 0, 2338, 0, 0, 2342, 2343, 2344, 2345,
	2346, 2347, 2348, 2349, 2350, 2351, 0, 0, 2352, 0,
	0, 0, 0, 1085, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1233, 0, 1233,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2381, 2382, 0, 0, 0, 0, 1278,
	793, 1157, 1158, 1159, 0, 1162, 0, 1164, 1165, 1166,
	1167, 0, 1170, 1172, 1172, 0, 1172, 1176, 1176, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 0, 1216, 1217, 1218,
	1219, 1220, 0, 0, 0, 0, 1176, 1176, 1176, 1176,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1233, 0,
	0, 0, 0, 0, 0, 0, 2444, 0, 0, 0,
	2445, 0, 0, 0, 0, 0, 2449, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1242, 0, 1365, 0,
	0, 793, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2497, 2498, 2499, 0, 2500, 2501,
	0, 0, 2502, 0, 2503, 0, 2505, 2508, 0, 0,
	0, 0, 1462, 2512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1034, 2528, 1040, 0, 0, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2542, 0, 0, 0, 0, 2547, 0, 0,
	0, 0, 0, 2548, 2549, 0, 0, 0, 0, 0,
	0, 2551, 0, 0, 1511, 1512, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2594, 0, 1557, 1558, 2595, 0, 0,
	0, 0, 0, 1563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1598, 1599,
	1600, 1601, 1602, 1603, 1605, 1609, 1610, 630, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 725, 1552, 735,
	736, 2281, 2282, 726, 728, 0, 0, 0, 727, 630,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 1085,
	1085, 730, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1681, 1682, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2279, 2280, 1721, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	0, 0, 0, 0, 0, 0, 0, 1763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1696, 0, 0, 1704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 718, 0, 715, 716, 0,
	0, 1469, 717, 0, 0, 0, 0, 0, 1473, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 1169, 725, 1552, 735, 736, 2281, 2282, 726, 728,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 737, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2279, 2280, 0, 0, 0, 1858, 0, 0, 0,
	1278, 0, 0, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1687, 0, 0, 0, 0, 0,
	0, 0, 1691, 0, 1697, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 793,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2110, 1978, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 2000, 0, 2001, 2002,
	0, 0, 0, 0, 0, 2133, 2134, 0, 0, 0,
	2137, 0, 0, 0, 2139, 2140, 2141, 0, 0, 0,
	0, 0, 0, 0, 0, 2144, 2145, 2146, 0, 0,
	1616, 2148, 0, 2149, 2150, 0, 0, 0, 2157, 2158,
	0, 0, 0, 0, 0, 0, 1616, 1616, 1616, 1616,
	1616, 630, 630, 630, 630, 0, 1505, 0, 0, 0,
	0, 0, 0, 1831, 0, 1835, 1836, 0, 0, 1840,
	0, 0, 0, 0, 0, 0, 0, 0, 1843, 0,
	0, 0, 0, 0, 0, 1846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2189, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 1849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2326, 0, 0, 0, 0,
	2330, 0, 0, 0, 0, 1704, 1704, 1704, 1704, 1704,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2000, 793, 0, 0, 0, 1704, 0, 0,
	1704, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2363, 0, 0, 2003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2053, 0, 0, 0, 0, 0, 0,
	0, 0, 2424, 0, 0, 0, 0, 0, 2307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2089, 2090, 2091, 2092, 2093, 0, 2438, 0, 2439,
	0, 0, 1505, 2098, 2442, 2443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2448, 0, 2106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1978, 0, 77, 0,
	1978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2470, 0, 0, 2472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1704, 0, 0, 0, 2476, 0, 0,
	0, 0, 0, 0, 0, 0, 2390, 0, 0, 0,
	0, 0, 0, 2484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2519, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2457, 0, 2461, 2462, 0,
	0, 0, 0, 0, 0, 0, 0, 1978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2296, 0, 0, 2299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1180, 1187, 1190, 1191, 1199, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2552, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2418, 0,
	0, 2419, 2420, 2421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 1640, 0, 648, 0, 0, 0, 0,
	653, 466, 343, 0, 331, 0, 195, 1641, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 2536, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 660, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 655,
	656, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 85, 0, 0,
	163, 164, 165, 725, 734, 735, 736, 733, 732, 726,
	728, 0, 210, 0, 727, 214, 671, 673, 672, 682,
	683, 684, 685, 686, 687, 688, 669, 730, 737, 738,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	631, 645, 188, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 642, 643, 816, 0, 0, 0, 708, 0,
	644, 0, 0, 652, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 654, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 707, 0, 303, 532, 0, 0, 705, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 677, 678, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 714, 706,
	664, 718, 666, 715, 716, 661, 662, 665, 717, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 709, 651,
	650, 0, 657, 658, 0, 667, 668, 670, 674, 675,
	676, 679, 680, 681, 689, 691, 692, 690, 693, 694,
	695, 698, 699, 700, 701, 696, 697, 702, 649, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 648,
	0, 403, 0, 0, 653, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 660, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 655, 656, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 85, 0, 0, 163, 164, 165, 725, 734, 735,
	736, 733, 732, 726, 728, 0, 210, 0, 727, 214,
	671, 673, 672, 682, 683, 684, 685, 686, 687, 688,
	669, 730, 737, 738, 382, 248, 298, 255, 247, 495,
	0, 485, 1606, 1607, 1608, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 631, 645, 188, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 643, 0, 0,
	0, 0, 708, 0, 644, 0, 0, 652, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	654, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 707, 0, 303, 532,
	0, 0, 705, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 677,
	678, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 714, 706, 664, 718, 666, 715, 716, 661,
	662, 665, 717, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 709, 651, 650, 0, 657, 658, 0, 667,
	668, 670, 674, 675, 676, 679, 680, 681, 689, 691,
	692, 690, 693, 694, 695, 698, 699, 700, 701, 696,
	697, 702, 649, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 76, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 648, 0, 403, 0, 0, 653, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 660, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 655, 656, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 85, 0, 0, 163, 164,
	165, 725, 734, 735, 736, 733, 732, 726, 728, 0,
	210, 0, 727, 214, 671, 673, 672, 682, 683, 684,
	685, 686, 687, 688, 669, 730, 737, 738, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 631, 645,
	188, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	642, 643, 0, 0, 0, 0, 708, 0, 644, 0,
	0, 652, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 654, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	707, 0, 303, 532, 0, 0, 705, 0, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 677, 678, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 714, 706, 664, 718,
	666, 715, 716, 661, 662, 665, 717, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 709, 651, 650, 0,
	657, 658, 0, 667, 668, 670, 674, 675, 676, 679,
	680, 681, 689, 691, 692, 690, 693, 694, 695, 698,
	699, 700, 701, 696, 697, 702, 649, 0, 191, 333,
	84, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 311, 522, 240, 0, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 648, 0, 403,
	0, 0, 653, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	660, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 655, 656, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 85,
	0, 1265, 163, 164, 165, 725, 734, 735, 736, 733,
	732, 726, 728, 0, 210, 0, 727, 214, 671, 673,
	672, 682, 683, 684, 685, 686, 687, 688, 669, 730,
	737, 738, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 631, 645, 188, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 642, 643, 0, 0, 0, 0,
	708, 0, 644, 0, 0, 652, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 654, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 707, 0, 303, 532, 0, 0,
	705, 0, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 677, 678, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	714, 706, 664, 718, 666, 715, 716, 661, 662, 665,
	717, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	709, 651, 650, 0, 657, 658, 0, 667, 668, 670,
	674, 675, 676, 679, 680, 681, 689, 691, 692, 690,
	693, 694, 695, 698, 699, 700, 701, 696, 697, 702,
	649, 0, 191, 333, 0, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	327, 0, 0, 0, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 0, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 648, 0, 403, 0, 0, 653, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 660, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 655, 656, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 85, 0, 0, 163, 164, 165, 725,
	734, 735, 736, 733, 732, 726, 728, 0, 210, 0,
	727, 214, 671, 673, 672, 682, 683, 684, 685, 686,
	687, 688, 669, 730, 737, 738, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 631, 645, 188, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 643,
	816, 0, 0, 0, 708, 0, 644, 0, 0, 652,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 654, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 707, 0,
	303, 532, 0, 0, 705, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 677, 678, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 714, 706, 664, 718, 666, 715,
	716, 661, 662, 665, 717, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 709, 651, 650, 0, 657, 658,
	0, 667, 668, 670, 674, 675, 676, 679, 680, 681,
	689, 691, 692, 690, 693, 694, 695, 698, 699, 700,
	701, 696, 697, 702, 649, 0, 191, 333, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 327, 0, 0, 0, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 648, 0, 403, 0, 0,
	653, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 660, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 655,
	656, 0, 0, 0, 0, 0, 278, 1719, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 85, 0, 0,
	163, 164, 165, 725, 734, 735, 736, 733, 732, 726,
	728, 0, 210, 0, 727, 214, 671, 673, 672, 682,
	683, 684, 685, 686, 687, 688, 669, 730, 737, 738,
	1720, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	631, 645, 188, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 642, 643, 0, 0, 0, 0, 708, 0,
	644, 0, 0, 652, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 654, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 707, 0, 303, 532, 0, 0, 705, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 677, 678, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 714, 706,
	664, 718, 666, 715, 716, 661, 662, 665, 717, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 709, 651,
	650, 0, 657, 658, 0, 667, 668, 670, 674, 675,
	676, 679, 680, 681, 689, 691, 692, 690, 693, 694,
	695, 698, 699, 700, 701, 696, 697, 702, 649, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 648,
	0, 403, 0, 0, 653, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 660, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 655, 656, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 85, 0, 0, 163, 164, 165, 725, 734, 735,
	736, 733, 732, 726, 728, 0, 210, 0, 727, 214,
	671, 673, 672, 682, 683, 684, 685, 686, 687, 688,
	669, 730, 737, 738, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 631, 645, 188, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 643, 0, 0,
	0, 0, 708, 0, 644, 0, 0, 652, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	654, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 707, 0, 303, 532,
	0, 0, 705, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 677,
	678, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 714, 706, 664, 718, 666, 715, 716, 661,
	662, 665, 717, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 709, 651, 650, 0, 657, 658, 0, 667,
	668, 670, 674, 675, 676, 679, 680, 681, 689, 691,
	692, 690, 693, 694, 695, 698, 699, 700, 701, 696,
	697, 702, 649, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 648, 0, 403, 0, 0, 653, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 660, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 655, 656, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 85, 0, 0, 163, 164,
	165, 725, 734, 735, 736, 733, 732, 726, 728, 0,
	210, 0, 727, 214, 671, 673, 672, 682, 683, 684,
	685, 686, 687, 688, 669, 730, 737, 738, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 645,
	188, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	642, 643, 0, 0, 0, 0, 708, 0, 644, 0,
	0, 652, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 654, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	707, 0, 303, 532, 0, 0, 705, 0, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 677, 678, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 714, 706, 664, 718,
	666, 715, 716, 661, 662, 665, 717, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 709, 651, 650, 0,
	657, 658, 0, 667, 668, 670, 674, 675, 676, 679,
	680, 681, 689, 691, 692, 690, 693, 694, 695, 698,
	699, 700, 701, 696, 697, 702, 649, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 928, 916, 0, 484,
	311, 522, 240, 879, 935, 882, 883, 908, 193, 897,
	904, 876, 837, 869, 843, 266, 844, 868, 889, 0,
	866, 466, 343, 0, 331, 870, 195, 0, 399, 283,
	177, 841, 845, 846, 855, 859, 861, 862, 867, 875,
	878, 881, 884, 886, 888, 891, 902, 910, 911, 917,
	918, 919, 920, 921, 923, 932, 933, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 892, 0, 895,
	915, 887, 909, 858, 900, 0, 278, 905, 931, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 2561, 0, 2562, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 903, 927, 874,
	382, 248, 298, 255, 247, 495, 0, 485, 848, 894,
	926, 0, 0, 0, 929, 330, 0, 907, 0, 840,
	901, 0, 188, 849, 934, 924, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 890, 896, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	857, 176, 252, 435, 839, 838, 171, 0, 0, 0,
	233, 0, 455, 922, 303, 532, 925, 0, 294, 912,
	854, 0, 0, 0, 851, 304, 170, 197, 856, 877,
	370, 913, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 209, 0, 0, 261,
	0, 0, 880, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 930, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 906, 436, 213, 515, 463, 864, 231,
	860, 0, 863, 898, 899, 865, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	850, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 937, 0, 0, 537, 0, 0, 842, 0,
	0, 0, 0, 254, 873, 0, 287, 288, 327, 0,
	0, 893, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 936, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 914, 279, 0, 0, 341,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 928, 916,
	0, 484, 311, 522, 240, 879, 935, 882, 883, 908,
	193, 897, 904, 876, 837, 869, 843, 266, 844, 868,
	889, 0, 866, 466, 343, 0, 331, 870, 195, 0,
	399, 283, 177, 841, 845, 846, 855, 859, 861, 862,
	867, 875, 878, 881, 884, 886, 888, 891, 902, 910,
	911, 917, 918, 919, 920, 921, 923, 932, 933, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 892,
	0, 895, 915, 887, 909, 858, 900, 0, 278, 905,
	931, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 0, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 903,
	927, 874, 382, 248, 298, 255, 247, 495, 0, 485,
	848, 894, 926, 0, 0, 0, 929, 330, 0, 907,
	0, 840, 901, 0, 188, 849, 934, 924, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 890, 896, 0,
	885, 0, 0, 0, 0, 0, 2226, 0, 0, 0,
	0, 0, 0, 0, 852, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 857, 176, 252, 435, 839, 838, 171, 0,
	0, 0, 233, 0, 455, 922, 303, 532, 925, 0,
	294, 912, 854, 0, 0, 0, 851, 304, 170, 197,
	856, 877, 370, 913, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 209, 0,
	0, 261, 0, 0, 880, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 930, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 906, 436, 213, 515, 463,
	864, 231, 860, 0, 863, 898, 899, 865, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 850, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 937, 0, 0, 537, 0, 0,
	842, 0, 0, 0, 0, 254, 873, 0, 287, 288,
	327, 0, 0, 893, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 936, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 914, 279, 0,
	0, 341, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	928, 916, 0, 484, 311, 522, 240, 879, 935, 882,
	883, 908, 193, 897, 904, 876, 837, 869, 843, 266,
	844, 868, 889, 0, 866, 466, 343, 0, 331, 870,
	195, 0, 399, 283, 177, 841, 845, 846, 855, 859,
	861, 862, 867, 875, 878, 881, 884, 886, 888, 891,
	902, 910, 911, 917, 918, 919, 920, 921, 923, 932,
	933, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 892, 0, 895, 915, 887, 909, 858, 900, 0,
	278, 905, 931, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 487, 0,
	0, 276, 235, 0, 0, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 903, 927, 874, 382, 248, 298, 255, 247, 495,
	0, 485, 848, 894, 926, 0, 0, 0, 929, 330,
	0, 907, 0, 840, 901, 0, 188, 849, 934, 924,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 890,
	896, 0, 885, 0, 0, 0, 0, 0, 2187, 0,
	0, 0, 0, 0, 0, 0, 852, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 857, 176, 252, 435, 839, 838,
	171, 0, 0, 0, 233, 0, 455, 922, 303, 532,
	925, 0, 294, 912, 854, 0, 0, 0, 851, 304,
	170, 197, 856, 877, 370, 913, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	209, 0, 0, 261, 0, 0, 880, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 930, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 906, 436, 213,
	515, 463, 864, 231, 860, 0, 863, 898, 899, 865,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 850, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 937, 0, 0, 537,
	0, 0, 842, 0, 0, 0, 0, 254, 873, 0,
	287, 288, 327, 0, 0, 893, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 936, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 914,
	279, 0, 0, 341, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 928, 916, 0, 484, 311, 522, 240, 879,
	935, 882, 883, 908, 193, 897, 904, 876, 837, 869,
	843, 266, 844, 868, 889, 0, 866, 466, 343, 0,
	331, 870, 195, 0, 399, 283, 177, 841, 845, 846,
	855, 859, 861, 862, 867, 875, 878, 881, 884, 886,
	888, 891, 902, 910, 911, 917, 918, 919, 920, 921,
	923, 932, 933, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 892, 0, 895, 915, 887, 909, 858,
	900, 0, 278, 905, 931, 0, 223, 0, 0, 371,
	0, 264, 0, 0, 0, 0, 163, 164, 165, 0,
	487, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 903, 927, 874, 382, 248, 298, 255,
	247, 495, 0, 485, 848, 894, 926, 0, 0, 604,
	929, 330, 0, 907, 0, 840, 901, 0, 188, 849,
	934, 924, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 890, 896, 0, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 857, 176, 252, 435,
	839, 838, 171, 0, 0, 0, 233, 0, 455, 922,
	303, 532, 925, 0, 294, 912, 854, 0, 0, 0,
	851, 304, 170, 197, 856, 877, 370, 913, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 938,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 209, 0, 0, 261, 0, 0, 880, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 930,
	0, 0, 836, 830, 829, 317, 338, 424, 540, 906,
	436, 213, 515, 463, 864, 231, 860, 0, 863, 898,
	899, 865, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 850, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 937, 0,
	0, 537, 0, 0, 842, 0, 0, 0, 0, 254,
	873, 0, 287, 288, 327, 0, 0, 893, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 936, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 914, 279, 0, 0, 341, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 928, 916, 0, 484, 311, 522,
	240, 879, 935, 882, 883, 908, 193, 897, 904, 876,
	837, 869, 843, 266, 844, 868, 889, 0, 866, 466,
	343, 0, 331, 870, 195, 0, 399, 283, 177, 841,
	845, 846, 855, 859, 861, 862, 867, 875, 878, 881,
	884, 886, 888, 891, 902, 910, 911, 917, 918, 919,
	920, 921, 923, 932, 933, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 892, 0, 895, 915, 887,
	909, 858, 900, 0, 278, 905, 931, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 164,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 903, 927, 874, 382, 248,
	298, 255, 247, 495, 0, 485, 848, 894, 926, 0,
	0, 0, 929, 330, 0, 907, 0, 840, 901, 0,
	188, 849, 934, 924, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 890, 896, 0, 885, 0, 0, 0,
	0, 0, 1689, 0, 0, 0, 0, 0, 0, 0,
	852, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 857, 176,
	252, 435, 839, 838, 171, 0, 0, 0, 233, 0,
	455, 922, 303, 532, 925, 0, 294, 912, 854, 0,
	0, 0, 851, 304, 170, 197, 856, 877, 370, 913,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 209, 0, 0, 261, 0, 0,
	880, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 930, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 906, 436, 213, 515, 463, 864, 231, 860, 0,
	863, 898, 899, 865, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 850, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	937, 0, 0, 537, 0, 0, 842, 0, 0, 0,
	0, 254, 873, 0, 287, 288, 327, 0, 0, 893,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	936, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 914, 279, 0, 0, 341, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 928, 916, 0, 484,
	311, 522, 240, 879, 935, 882, 883, 908, 193, 897,
	904, 876, 837, 869, 843, 266, 844, 868, 889, 0,
	866, 466, 343, 0, 331, 870, 195, 0, 399, 283,
	177, 841, 845, 846, 855, 859, 861, 862, 867, 875,
	878, 881, 884, 886, 888, 891, 902, 910, 911, 917,
	918, 919, 920, 921, 923, 932, 933, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 892, 0, 895,
	915, 887, 909, 858, 900, 0, 278, 905, 931, 0,
	223, 0, 0, 371, 0, 264, 0, 85, 0, 0,
	163, 164, 165, 0, 487, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 903, 927, 874,
	382, 248, 298, 255, 247, 495, 0, 485, 848, 894,
	926, 0, 0, 0, 929, 330, 0, 907, 0, 840,
	901, 0, 188, 849, 934, 924, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 890, 896, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	857, 176, 252, 435, 839, 838, 171, 0, 0, 0,
	233, 0, 455, 922, 303, 532, 925, 0, 294, 912,
	854, 0, 0, 0, 851, 304, 170, 197, 856, 877,
	370, 913, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 209, 0, 0, 261,
	0, 0, 880, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 930, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 906, 436, 213, 515, 463, 864, 231,
	860, 0, 863, 898, 899, 865, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	850, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 937, 0, 0, 537, 0, 0, 842, 0,
	0, 0, 0, 254, 873, 0, 287, 288, 327, 0,
	0, 893, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 936, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 914, 279, 0, 0, 341,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 928, 916,
	0, 484, 311, 522, 240, 879, 935, 882, 883, 908,
	193, 897, 904, 876, 837, 869, 843, 266, 844, 868,
	889, 0, 866, 466, 343, 0, 331, 870, 195, 0,
	399, 283, 177, 841, 845, 846, 855, 859, 861, 862,
	867, 875, 878, 881, 884, 886, 888, 891, 902, 910,
	911, 917, 918, 919, 920, 921, 923, 932, 933, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 892,
	0, 895, 915, 887, 909, 858, 900, 0, 278, 905,
	931, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 0, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 903,
	927, 874, 382, 248, 298, 255, 247, 495, 0, 485,
	848, 894, 926, 0, 0, 604, 929, 330, 0, 907,
	0, 840, 901, 0, 188, 849, 934, 924, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 890, 896, 0,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 852, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 857, 176, 252, 435, 839, 838, 171, 0,
	0, 0, 233, 0, 455, 922, 303, 532, 925, 0,
	294, 912, 854, 0, 0, 0, 851, 304, 170, 197,
	856, 877, 370, 913, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 1294,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 938, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 209, 0,
	0, 261, 0, 0, 880, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 930, 0, 0, 836, 830,
	829, 317, 338, 424, 540, 906, 436, 213, 515, 463,
	864, 231, 860, 0, 863, 898, 899, 865, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 850, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 937, 0, 0, 537, 0, 0,
	842, 0, 0, 0, 0, 254, 873, 0, 287, 288,
	327, 0, 0, 893, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 936, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 914, 279, 0,
	0, 341, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	928, 916, 0, 484, 311, 522, 240, 879, 935, 882,
	883, 908, 193, 897, 904, 876, 837, 869, 843, 266,
	844, 868, 889, 0, 866, 466, 343, 0, 331, 870,
	195, 0, 399, 283, 177, 841, 845, 846, 855, 859,
	861, 862, 867, 875, 878, 881, 884, 886, 888, 891,
	902, 910, 911, 917, 918, 919, 920, 921, 923, 932,
	933, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 892, 0, 895, 915, 887, 909, 858, 900, 0,
	278, 905, 931, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 487, 0,
	0, 276, 235, 0, 0, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 903, 927, 874, 382, 248, 298, 255, 247, 495,
	0, 485, 848, 894, 926, 0, 0, 604, 929, 330,
	0, 907, 0, 840, 901, 0, 188, 849, 934, 924,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 890,
	896, 0, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 852, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 857, 176, 252, 435, 839, 838,
	171, 0, 0, 0, 233, 0, 455, 922, 303, 532,
	925, 0, 294, 912, 854, 0, 0, 0, 851, 304,
	170, 197, 856, 877, 370, 913, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 827, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 938, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	209, 0, 0, 261, 0, 0, 880, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 930, 0, 0,
	836, 830, 829, 317, 338, 424, 540, 906, 436, 213,
	515, 463, 864, 231, 860, 0, 863, 898, 899, 865,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 850, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 937, 0, 0, 537,
	0, 0, 842, 0, 0, 0, 0, 254, 873, 0,
	287, 288, 327, 0, 0, 893, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 936, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 914,
	279, 0, 0, 341, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 928, 916, 0, 484, 311, 522, 240, 879,
	935, 882, 883, 908, 193, 897, 904, 876, 837, 869,
	843, 266, 844, 868, 889, 0, 866, 466, 343, 0,
	331, 870, 195, 0, 399, 283, 177, 841, 845, 846,
	855, 859, 861, 862, 867, 875, 878, 881, 884, 886,
	888, 891, 902, 910, 911, 917, 918, 919, 920, 921,
	923, 932, 933, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 892, 0, 895, 915, 887, 909, 858,
	900, 0, 278, 905, 931, 0, 223, 0, 0, 371,
	0, 264, 0, 0, 0, 0, 163, 164, 165, 0,
	487, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 903, 927, 874, 382, 248, 298, 255,
	247, 495, 0, 485, 848, 894, 926, 0, 0, 0,
	929, 330, 0, 907, 0, 840, 901, 0, 188, 849,
	934, 924, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 890, 896, 0, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 857, 176, 252, 435,
	839, 838, 171, 0, 0, 0, 233, 0, 455, 922,
	303, 532, 925, 0, 294, 912, 854, 0, 0, 0,
	851, 304, 170, 197, 856, 877, 370, 913, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 209, 0, 0, 261, 0, 0, 880, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 930,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 906,
	436, 213, 515, 463, 864, 231, 860, 0, 863, 898,
	899, 865, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 850, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 937, 0,
	0, 537, 0, 0, 842, 0, 0, 0, 0, 254,
	873, 0, 287, 288, 327, 0, 0, 893, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 936, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 914, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 648, 0, 403, 0, 0,
	653, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 660, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 165, 725, 734, 735, 736, 733, 732, 726,
	728, 0, 210, 0, 727, 214, 671, 673, 672, 682,
	683, 684, 685, 686, 687, 688, 669, 730, 737, 738,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 645, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	644, 0, 0, 652, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 654, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 707, 0, 303, 532, 0, 0, 705, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 677, 678, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 714, 706,
	664, 718, 666, 715, 716, 661, 662, 665, 717, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 709, 651,
	650, 0, 657, 658, 0, 667, 668, 670, 674, 675,
	676, 679, 680, 681, 689, 691, 692, 690, 693, 694,
	695, 698, 699, 700, 701, 696, 697, 702, 649, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 734, 735,
	0, 276, 235, 0, 1551, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 0, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 164,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 1732, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 1731, 532, 0, 0, 294, 0, 0, 982,
	983, 0, 946, 304, 170, 197, 976, 980, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 76,
	0, 259, 311, 522, 240, 0, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 266, 0, 403,
	0, 0, 0, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 85,
	0, 0, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 0,
	0, 0, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 455, 0, 303, 532, 0, 0,
	294, 0, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 84, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	1707, 0, 0, 1706, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 76, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 266, 0, 403, 0, 0, 0, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 85, 0, 1265, 163, 164, 165, 0,
	487, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 0, 0, 0, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 455, 0,
	303, 532, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 84, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 327, 0, 0, 0, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 1120, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 1282, 266, 0, 403, 0, 0,
	0, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 1284, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 0, 0, 0,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 1118, 0, 1119,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 455, 0, 303, 532, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 1228, 1231, 0,
	0, 276, 235, 1227, 1230, 0, 210, 0, 1226, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 0, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 164,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 303, 532, 0, 0, 294, 0, 0, 0,
	0, 0, 946, 304, 170, 197, 944, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 311, 522, 240, 0, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 266, 0, 403,
	0, 0, 0, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 1265, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 0,
	0, 0, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 455, 0, 303, 532, 0, 0,
	294, 2514, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 0, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	327, 0, 0, 0, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 0, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 266, 0, 403, 0, 0, 0, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 85, 0, 0, 163, 164, 165, 0,
	487, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 0, 0, 0, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 455, 0,
	303, 532, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 1707, 0, 0, 1706, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 266, 0, 403, 0, 0,
	0, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 487, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 0, 0, 0,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 176, 252, 435, 623, 622, 171, 0, 0, 0,
	233, 0, 455, 0, 303, 532, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 621, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 1660, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 1662, 0,
	0, 276, 235, 0, 0, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 0, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 164,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 303, 532, 0, 0, 294, 2569, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 311, 522, 240, 0, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 266, 0, 403,
	0, 0, 0, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 0, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 0,
	0, 0, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 455, 0, 303, 532, 0, 0,
	294, 2514, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 0, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	327, 0, 0, 0, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 0, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 266, 0, 403, 0, 0, 0, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 0, 0, 0, 163, 164, 165, 0,
	1547, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 0, 0, 0, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 455, 0,
	303, 532, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 327, 0, 0, 0, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 266, 0, 403, 0, 0,
	0, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 2030, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 0, 0, 0,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 455, 0, 303, 532, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 487, 0,
	0, 276, 235, 0, 1958, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 0, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 85, 0, 0, 163, 164,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 303, 532, 0, 0, 294, 0, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 311, 522, 240, 1708, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 266, 0, 403,
	0, 0, 0, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 0, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 0,
	0, 0, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 455, 0, 303, 532, 0, 0,
	294, 0, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 0, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	327, 0, 0, 0, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 0, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 266, 0, 403, 0, 0, 0, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 0, 0, 0, 163, 164, 165, 0,
	487, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 0, 0, 0, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 455, 0,
	303, 532, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 327, 0, 0, 0, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 266, 0, 403, 0, 0,
	0, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 487, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 0, 0, 0,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 455, 0, 303, 532, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 1503, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 1382, 0, 0, 163, 164, 165, 0, 487, 0,
	0, 276, 235, 0, 0, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 1305, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 164,
	165, 0, 1304, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 303, 532, 0, 0, 294, 0, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 311, 522, 240, 0, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 266, 0, 403,
	1289, 0, 0, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 0, 163, 164, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 0,
	0, 0, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 455, 0, 303, 532, 0, 0,
	294, 0, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 0, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	327, 0, 0, 0, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 0, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 266, 0, 403, 0, 0, 0, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 0, 0, 0, 163, 164, 165, 0,
	487, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 0, 0, 0, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 455, 578,
	303, 532, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 327, 0, 0, 0, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 266, 0, 403, 0, 0,
	0, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 487, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 0, 0, 0,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 455, 0, 303, 532, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 2574, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 487, 0,
	0, 276, 235, 0, 0, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 0, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 2357,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 303, 532, 0, 0, 294, 0, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 428, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 311, 522, 240, 0, 0, 0, 0, 0,
	193, 218, 0, 0, 0, 0, 0, 266, 0, 403,
	0, 0, 0, 466, 343, 0, 331, 0, 195, 484,
	399, 283, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 168, 169, 174, 175, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 192, 194, 196, 199, 200, 203,
	204, 205, 206, 207, 211, 215, 216, 217, 219, 220,
	221, 222, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 225, 226, 227, 228, 229, 230, 234, 236,
	237, 238, 241, 242, 243, 244, 245, 246, 249, 250,
	253, 256, 257, 263, 268, 269, 270, 272, 273, 274,
	280, 282, 285, 286, 289, 291, 293, 295, 296, 297,
	299, 300, 301, 302, 305, 306, 307, 308, 309, 310,
	312, 320, 321, 323, 324, 325, 326, 329, 332, 334,
	336, 337, 339, 340, 342, 345, 346, 348, 349, 352,
	353, 355, 358, 361, 364, 366, 367, 368, 369, 372,
	373, 374, 375, 377, 380, 383, 385, 386, 388, 391,
	393, 394, 395, 396, 397, 398, 402, 405, 406, 407,
	408, 410, 412, 413, 414, 416, 418, 419, 420, 421,
	422, 423, 426, 427, 429, 430, 431, 432, 433, 438,
	439, 442, 443, 444, 447, 448, 449, 450, 451, 452,
	454, 457, 458, 462, 464, 467, 468, 474, 475, 477,
	478, 480, 481, 482, 483, 486, 488, 489, 491, 492,
	496, 497, 498, 505, 506, 510, 511, 512, 513, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 530,
	531, 533, 534, 535, 536, 539, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	528, 0, 365, 527, 469, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 223, 0, 0, 371, 0, 264, 0, 0,
	0, 0, 163, 1954, 165, 0, 487, 0, 0, 276,
	235, 0, 0, 0, 210, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 271, 0,
	0, 0, 382, 248, 298, 255, 247, 495, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 176, 252, 435, 0, 0, 171, 0,
	0, 0, 233, 0, 455, 0, 303, 532, 0, 0,
	294, 0, 0, 0, 0, 0, 0, 304, 170, 197,
	0, 0, 370, 0, 441, 470, 0, 267, 0, 260,
	0, 0, 509, 208, 0, 0, 0, 0, 411, 265,
	350, 401, 0, 0, 0, 417, 507, 0, 0, 0,
	359, 0, 0, 0, 0, 198, 239, 387, 476, 0,
	461, 351, 499, 0, 316, 460, 275, 173, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 479, 504,
	212, 446, 453, 434, 538, 190, 0, 473, 0, 313,
	314, 189, 0, 425, 251, 0, 0, 379, 502, 503,
	0, 553, 201, 529, 0, 202, 0, 362, 500, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 261, 0, 0, 0, 281, 0, 0, 0, 0,
	415, 0, 456, 494, 0, 0, 0, 0, 360, 284,
	465, 317, 338, 424, 540, 0, 436, 213, 515, 463,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 354, 0, 0, 357, 0, 459, 0, 0, 0,
	437, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 0, 508, 319, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 191, 333, 0, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 287, 288,
	327, 0, 0, 0, 0, 0, 0, 381, 392, 0,
	0, 428, 0, 493, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 277, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 363, 0,
	376, 378, 0, 384, 0, 389, 0, 390, 400, 404,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 445, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 501, 514, 0, 0, 0, 279, 0,
	0, 341, 0, 0, 0, 259, 311, 522, 240, 0,
	0, 0, 0, 0, 193, 218, 0, 0, 0, 0,
	0, 266, 0, 403, 0, 0, 0, 466, 343, 0,
	331, 0, 195, 484, 399, 283, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 167, 168, 169, 174, 175, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 192, 194,
	196, 199, 200, 203, 204, 205, 206, 207, 211, 215,
	216, 217, 219, 220, 221, 222, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 225, 226, 227, 228,
	229, 230, 234, 236, 237, 238, 241, 242, 243, 244,
	245, 246, 249, 250, 253, 256, 257, 263, 268, 269,
	270, 272, 273, 274, 280, 282, 285, 286, 289, 291,
	293, 295, 296, 297, 299, 300, 301, 302, 305, 306,
	307, 308, 309, 310, 312, 320, 321, 323, 324, 325,
	326, 329, 332, 334, 336, 337, 339, 340, 342, 345,
	346, 348, 349, 352, 353, 355, 358, 361, 364, 366,
	367, 368, 369, 372, 373, 374, 375, 377, 380, 383,
	385, 386, 388, 391, 393, 394, 395, 396, 397, 398,
	402, 405, 406, 407, 408, 410, 412, 413, 414, 416,
	418, 419, 420, 421, 422, 423, 426, 427, 429, 430,
	431, 432, 433, 438, 439, 442, 443, 444, 447, 448,
	449, 450, 451, 452, 454, 457, 458, 462, 464, 467,
	468, 474, 475, 477, 478, 480, 481, 482, 483, 486,
	488, 489, 491, 492, 496, 497, 498, 505, 506, 510,
	511, 512, 513, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 530, 531, 533, 534, 535, 536, 539,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 528, 0, 365, 527, 469, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 223, 0, 0, 371,
	0, 264, 0, 0, 0, 0, 163, 164, 165, 0,
	1662, 0, 0, 276, 235, 0, 0, 0, 210, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 271, 0, 0, 0, 382, 248, 298, 255,
	247, 495, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 176, 252, 435,
	0, 0, 171, 0, 0, 0, 233, 0, 455, 0,
	303, 532, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 304, 170, 197, 0, 0, 370, 0, 441, 470,
	0, 267, 0, 260, 0, 0, 509, 208, 0, 0,
	0, 0, 411, 265, 350, 401, 0, 0, 0, 417,
	507, 0, 0, 0, 359, 0, 0, 0, 0, 198,
	239, 387, 476, 0, 461, 351, 499, 0, 316, 460,
	275, 173, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 479, 504, 212, 446, 453, 434, 538, 190,
	0, 473, 0, 313, 314, 189, 0, 425, 251, 0,
	0, 379, 502, 503, 0, 553, 201, 529, 0, 202,
	0, 362, 500, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 261, 0, 0, 0, 281,
	0, 0, 0, 0, 415, 0, 456, 494, 0, 0,
	0, 0, 360, 284, 465, 317, 338, 424, 540, 0,
	436, 213, 515, 463, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 354, 0, 0, 357, 0,
	459, 0, 0, 0, 437, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 508, 319, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 191, 333, 0, 0,
	0, 537, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 287, 288, 327, 0, 0, 0, 0, 0,
	0, 381, 392, 0, 0, 428, 0, 493, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	277, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 363, 0, 376, 378, 0, 384, 0, 389,
	0, 390, 400, 404, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 445, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 501, 514, 0,
	0, 0, 279, 0, 0, 341, 0, 0, 0, 259,
	311, 522, 240, 0, 0, 0, 0, 0, 193, 218,
	0, 0, 0, 0, 0, 266, 0, 403, 0, 0,
	0, 466, 343, 0, 331, 0, 195, 484, 399, 283,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 167, 168,
	169, 174, 175, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 192, 194, 196, 199, 200, 203, 204, 205,
	206, 207, 211, 215, 216, 217, 219, 220, 221, 222,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	225, 226, 227, 228, 229, 230, 234, 236, 237, 238,
	241, 242, 243, 244, 245, 246, 249, 250, 253, 256,
	257, 263, 268, 269, 270, 272, 273, 274, 280, 282,
	285, 286, 289, 291, 293, 295, 296, 297, 299, 300,
	301, 302, 305, 306, 307, 308, 309, 310, 312, 320,
	321, 323, 324, 325, 326, 329, 332, 334, 336, 337,
	339, 340, 342, 345, 346, 348, 349, 352, 353, 355,
	358, 361, 364, 366, 367, 368, 369, 372, 373, 374,
	375, 377, 380, 383, 385, 386, 388, 391, 393, 394,
	395, 396, 397, 398, 402, 405, 406, 407, 408, 410,
	412, 413, 414, 416, 418, 419, 420, 421, 422, 423,
	426, 427, 429, 430, 431, 432, 433, 438, 439, 442,
	443, 444, 447, 448, 449, 450, 451, 452, 454, 457,
	458, 462, 464, 467, 468, 474, 475, 477, 478, 480,
	481, 482, 483, 486, 488, 489, 491, 492, 496, 497,
	498, 505, 506, 510, 511, 512, 513, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 530, 531, 533,
	534, 535, 536, 539, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 528, 0,
	365, 527, 469, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	223, 0, 0, 371, 0, 264, 0, 0, 0, 0,
	163, 164, 165, 0, 1284, 0, 0, 276, 235, 0,
	0, 0, 210, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 271, 0, 0, 0,
	382, 248, 298, 255, 247, 495, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 176, 252, 435, 0, 0, 171, 0, 0, 0,
	233, 0, 455, 0, 303, 532, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 304, 170, 197, 0, 0,
	370, 0, 441, 470, 0, 267, 0, 260, 0, 0,
	509, 208, 0, 0, 0, 0, 411, 265, 350, 401,
	0, 0, 0, 417, 507, 0, 0, 0, 359, 0,
	0, 0, 0, 198, 239, 387, 476, 0, 461, 351,
	499, 0, 316, 460, 275, 173, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 479, 504, 212, 446,
	453, 434, 538, 190, 0, 473, 0, 313, 314, 189,
	0, 425, 251, 0, 0, 379, 502, 503, 0, 553,
	201, 529, 0, 202, 0, 362, 500, 0, 0, 0,
	0, 0, 0, 0, 318, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 261,
	0, 0, 0, 281, 0, 0, 0, 0, 415, 0,
	456, 494, 0, 0, 0, 0, 360, 284, 465, 317,
	338, 424, 540, 0, 436, 213, 515, 463, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 354,
	0, 0, 357, 0, 459, 0, 0, 0, 437, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	508, 319, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	191, 333, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 287, 288, 327, 0,
	0, 0, 0, 0, 0, 381, 392, 0, 0, 428,
	0, 493, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 277, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 363, 0, 376, 378,
	0, 384, 0, 389, 0, 390, 400, 404, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 445, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 501, 514, 0, 0, 0, 279, 0, 0, 341,
	0, 0, 0, 259, 311, 522, 240, 0, 0, 0,
	0, 0, 193, 218, 0, 0, 0, 0, 0, 266,
	0, 403, 0, 0, 0, 466, 343, 0, 331, 0,
	195, 484, 399, 283, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 169, 174, 175, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 192, 194, 196, 199,
	200, 203, 204, 205, 206, 207, 211, 215, 216, 217,
	219, 220, 221, 222, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 225, 226, 227, 228, 229, 230,
	234, 236, 237, 238, 241, 242, 243, 244, 245, 246,
	249, 250, 253, 256, 257, 263, 268, 269, 270, 272,
	273, 274, 280, 282, 285, 286, 289, 291, 293, 295,
	296, 297, 299, 300, 301, 302, 305, 306, 307, 308,
	309, 310, 312, 320, 321, 323, 324, 325, 326, 329,
	332, 334, 336, 337, 339, 340, 342, 345, 346, 348,
	349, 352, 353, 355, 358, 361, 364, 366, 367, 368,
	369, 372, 373, 374, 375, 377, 380, 383, 385, 386,
	388, 391, 393, 394, 395, 396, 397, 398, 402, 405,
	406, 407, 408, 410, 412, 413, 414, 416, 418, 419,
	420, 421, 422, 423, 426, 427, 429, 430, 431, 432,
	433, 438, 439, 442, 443, 444, 447, 448, 449, 450,
	451, 452, 454, 457, 458, 462, 464, 467, 468, 474,
	475, 477, 478, 480, 481, 482, 483, 486, 488, 489,
	491, 492, 496, 497, 498, 505, 506, 510, 511, 512,
	513, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 530, 531, 533, 534, 535, 536, 539, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 528, 0, 365, 527, 469, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 223, 0, 0, 371, 0, 264,
	0, 0, 0, 0, 163, 164, 165, 0, 1096, 0,
	0, 276, 235, 0, 0, 0, 210, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	271, 0, 0, 0, 382, 248, 298, 255, 247, 495,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 176, 252, 435, 0, 0,
	171, 0, 0, 0, 233, 0, 455, 0, 303, 532,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 304,
	170, 197, 0, 0, 370, 0, 441, 470, 0, 267,
	0, 260, 0, 0, 509, 208, 0, 0, 0, 0,
	411, 265, 350, 401, 0, 0, 0, 417, 507, 0,
	0, 0, 359, 0, 0, 0, 0, 198, 239, 387,
	476, 0, 461, 351, 499, 0, 316, 460, 275, 173,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	479, 504, 212, 446, 453, 434, 538, 190, 0, 473,
	0, 313, 314, 189, 0, 425, 251, 0, 0, 379,
	502, 503, 0, 553, 201, 529, 0, 202, 0, 362,
	500, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 261, 0, 0, 0, 281, 0, 0,
	0, 0, 415, 0, 456, 494, 0, 0, 0, 0,
	360, 284, 465, 317, 338, 424, 540, 0, 436, 213,
	515, 463, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 354, 0, 0, 357, 0, 459, 0,
	0, 0, 437, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 508, 319, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 191, 333, 0, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	287, 288, 327, 0, 0, 0, 0, 0, 0, 381,
	392, 0, 0, 428, 0, 493, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 277, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	363, 0, 376, 378, 0, 384, 0, 389, 0, 390,
	400, 404, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 445, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 501, 514, 0, 0, 0,
	279, 0, 0, 341, 0, 0, 0, 259, 311, 522,
	240, 0, 0, 0, 0, 0, 193, 218, 0, 0,
	0, 0, 0, 266, 0, 403, 0, 0, 0, 466,
	343, 0, 331, 0, 195, 484, 399, 283, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 174,
	175, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	192, 194, 196, 199, 200, 203, 204, 205, 206, 207,
	211, 215, 216, 217, 219, 220, 221, 222, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 225, 226,
	227, 228, 229, 230, 234, 236, 237, 238, 241, 242,
	243, 244, 245, 246, 249, 250, 253, 256, 257, 263,
	268, 269, 270, 272, 273, 274, 280, 282, 285, 286,
	289, 291, 293, 295, 296, 297, 299, 300, 301, 302,
	305, 306, 307, 308, 309, 310, 312, 320, 321, 323,
	324, 325, 326, 329, 332, 334, 336, 337, 339, 340,
	342, 345, 346, 348, 349, 352, 353, 355, 358, 361,
	364, 366, 367, 368, 369, 372, 373, 374, 375, 377,
	380, 383, 385, 386, 388, 391, 393, 394, 395, 396,
	397, 398, 402, 405, 406, 407, 408, 410, 412, 413,
	414, 416, 418, 419, 420, 421, 422, 423, 426, 427,
	429, 430, 431, 432, 433, 438, 439, 442, 443, 444,
	447, 448, 449, 450, 451, 452, 454, 457, 458, 462,
	464, 467, 468, 474, 475, 477, 478, 480, 481, 482,
	483, 486, 488, 489, 491, 492, 496, 497, 498, 505,
	506, 510, 511, 512, 513, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 530, 531, 533, 534, 535,
	536, 539, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 528, 0, 365, 527,
	469, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 223, 0,
	0, 371, 0, 264, 0, 0, 0, 0, 163, 164,
	165, 0, 487, 0, 0, 276, 235, 0, 0, 0,
	210, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 271, 0, 0, 0, 382, 248,
	298, 255, 247, 495, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 176,
	252, 435, 0, 0, 171, 0, 0, 0, 233, 0,
	455, 0, 303, 532, 0, 0, 294, 0, 0, 0,
	0, 0, 0, 304, 170, 197, 0, 0, 370, 0,
	441, 470, 0, 267, 0, 260, 0, 0, 509, 208,
	0, 0, 0, 0, 411, 265, 350, 401, 0, 0,
	0, 417, 507, 0, 0, 0, 359, 0, 0, 0,
	0, 198, 239, 387, 476, 0, 461, 351, 499, 0,
	316, 460, 275, 173, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 479, 504, 212, 446, 453, 434,
	538, 190, 0, 473, 0, 313, 314, 189, 0, 425,
	251, 0, 0, 379, 502, 503, 0, 553, 201, 529,
	0, 202, 0, 362, 500, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 261, 0, 0,
	0, 281, 0, 0, 0, 0, 415, 0, 456, 494,
	0, 0, 0, 0, 360, 284, 465, 317, 338, 424,
	540, 0, 436, 213, 515, 463, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 459, 0, 0, 0, 437, 0, 0, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 508, 319,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 191, 333,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 287, 288, 327, 0, 0, 0,
	0, 0, 0, 381, 392, 0, 0, 801, 0, 493,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 277, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 363, 0, 376, 378, 0, 384,
	0, 389, 0, 390, 400, 404, 0, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 445,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 501,
	514, 0, 0, 0, 279, 0, 0, 341, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 484,
}

var psqPact = [...]int{
	4282, -1000, -691, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1524, 1615, -1000, -1000, -1000,
	-1000, 1643, -1000, 257, 948, -1000, 1454, 2818, -1000, 43323,
	19, -1000, 41695, 18, -193, 43323, -1000, -176, -1000, -185,
	43323, -180, 30299, -1000, -1000, -618, 12953, 1318, -287, -290,
	43323, -1000, -1000, -1000, 1584, 1201, -1000, 297, -1000, -1000,
	-1000, -1000, -1000, -1000, 48207, -1000, -1000, -1000, -1000, -1000,
	1650, 150, 43323, -1000, 1557, 1201, -1000, 12953, 1573, 1551,
	11325, -1000, 11325, -26, -1000, -1000, 20503, -1000, -1000, 27857,
	43323, 35997, -44, -1000, 1454, -1000, -1000, -1000, -220, -1000,
	-1000, 832, 818, -1000, -1000, 265, 38, -4, -59, -59,
	3, 1437, 1430, 298, 275, 182, -1000, 462, 163, 163,
	-467, -474, -1000, -21, 163, 163, 163, -123, 163, 163,
	163, 163, 163, 163, 163, 163, 163, -11, 1454, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43323, -165, 43323, -1000,
	56, 43323, 561, 561, -279, 561, 561, 561, -163, 395,
	-293, -1000, -171, -132, -174, -128, 545, -170, -1000, -195,
	-1000, 18819, -173, 18819, -1000, 1450, -1000, -1000, -1000, -1000,
	458, -1000, 2, -1000, -1000, -1000, -1000, -1000, 43323, 47393,
	251, 202, -1000, -1000, -1000, -1000, -263, -1000, -1000, 523,
	700, 12953, 323, -1000, 349, 112, -1000, -1000, -1000, -1000,
	-1000, 46, 13767, 13767, 13767, 13767, -1000, -1000, 838, 838,
	838, 838, 13767, 838, 22159, 838, 838, 838, 838, 12953,
	838, 838, 838, -1000, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 54, 838, 838, 838, 838, 838,
	-1000, -1000, -1000, -1000, 838, 838, 838, 838, 838, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27043,
	-1000, 9697, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43323, -1000, 838, 43323, 43323, -104, 1557, 1201,
	-1000, 1584, 1587, 297, -1000, 1443, 1297, 802, 469, 1201,
	759, 43323, -1000, 887, -1000, 1055, -1000, -1000, -1000, -1000,
	-1000, 907, 12953, -1000, -1000, 1638, -1000, 26229, 52, 327,
	1637, 40881, -1000, -26, -26, 794, 19661, -343, -1000, -1000,
	-1000, 192, 40067, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1450, 911,
	43323, -1000, -1000, 3668, 463, -1000, 947, -1000, 909, -1000,
	920, 12953, 980, 14, 463, 8, 7, -2, -1000, -383,
	-1000, -1000, -1000, -1000, -1000, -1000, 163, 163, 163, 2630,
	2818, -1000, -1000, -1000, -1000, 39253, 463, -1000, 936, -1000,
	285, 57, 90, 90, 463, -1000, -1000, 43323, 463, 463,
	43323, 43323, -19, -1000, -1000, -1000, -1000, 43323, 463, 284,
	279, 463, 463, 43323, 463, -1000, -1000, 1269, -1000, 1198,
	-1000, -1000, 163, 163, 452, 430, 429, 163, 409, -89,
	1472, 407, 164, 1465, 1459, 43323, 934, 43323, -1000, -138,
	185, 191, 1454, 792, 1, 12, 463, -32, -32, 43323,
	-1000, 21345, -1000, -1000, 404, 12953, -1000, 556, 545, 545,
	-1000, -1000, -1000, -1000, -1000, 561, 43323, 556, -1000, -1000,
	-1000, 545, 561, 43323, 561, 561, 561, 561, 545, 545,
	545, 561, 43323, 43323, 43323, 43323, 43323, 43323, 43323, 43323,
	43323, 18819, -1000, 1321, -1000, -1000, -1000, 18819, 18819, -1000,
	-1000, -1000, -182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -402, 784, 38439, -1000, -631, -636, -638, -1000,
	-1000, -1000, -641, -642, -1000, -1000, -1000, 12953, 12953, 12953,
	-494, -1000, 278, 13767, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 351, 195, 13767, 13767, 13767, 1405, 13767, 13767, 13767,
	13767, 13767, 13767, 13767, 13767, 13767, 13767, 13767, 13767, 33555,
	4719, 4719, 112, 112, 112, 112, -1000, 11325, 12953, 12953,
	112, -1000, 463, 37625, 11325, 11325, 12953, 1445, 228, 700,
	43323, -1000, 469, -1000, -1000, -1000, 355, -1000, 43323, 43323,
	166, 12953, 12953, 12953, 12953, 12953, 12953, 8883, 12953, 12953,
	12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953,
	12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953,
	12953, 12953, 12953, 12953, 8069, 21345, 11325, 11325, 11325, 11325,
	11325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 51, 1023, 1079, 594, -1000, 771, -1000,
	-463, 31113, 12953, 1632, 992, 43323, -1000, -1000, -1000, 1557,
	-1000, 1557, 1023, 1407, 1087, 11325, -1000, -1000, 1407, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 469, -1000, 43323,
	759, 1523, 43323, 1083, 12953, 12953, 755, -1000, 669, 43323,
	-1000, -1000, 46579, -1000, -1000, 17977, -1000, 43323, 248, 43323,
	-1000, 29485, 36811, 17135, -343, -1000, 17135, 709, -1000, -313,
	-307, 12139, 111, -1000, -1000, -1000, 265, 23787, 484, 111,
	-251, -1000, -1000, -1000, 920, -1000, 920, 920, 920, 920,
	-10, -10, -10, -10, -1000, -1000, -1000, -1000, -1000, 930,
	929, -1000, 920, 920, 920, 920, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -66, -1000,
	12953, -117, 35997, 1543, 358, 866, -138, -29, 991, 463,
	463, 463, -29, -1000, 902, 595, 531, 1569, -1000, -1000,
	735, -1000, 43323, -159, -1000, -74, -1000, 35997, 463, 264,
	90, 463, -1000, 463, -1000, -1000, 444, -152, -561, 43323,
	-159, 33555, -1000, -1000, -1000, 463, -1000, -1000, -1000, -5,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 33555, 33555,
	-1000, -1000, -1000, 402, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-689, 43323, -1000, -147, 174, -116, -73, -80, 43323, -144,
	43323, 43323, -32, 1028, 43323, 1497, 43323, -1000, -1000, -1000,
	-1000, -1000, 700, 43323, -1000, -1000, 561, 561, -1000, -1000,
	43323, 561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43323, -1000, -1000, -1000, -1000, 43323, -1000, -1000,
	-1000, -1000, -237, -316, 246, -1000, -1000, -1000, -1000, 1532,
	-1000, 700, 236, -1000, 838, -1000, -1000, 315, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 351, 13767, 13767, 13767, 493,
	-8, 509, 351, 368, 438, 126, 126, 196, 196, 116,
	116, 116, 116, 116, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 399, -1000, 799, -1000, 852, 747, 469,
	-1000, 799, 799, 938, 11325, -1000, -1000, 223, -1000, 12953,
	469, -1000, -1000, 469, 723, 721, 1617, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 700, 866,
	866, 866, 866, 866, 12953, 881, -1000, -1000, -1000, 1241,
	1240, 469, 523, 469, 719, -1000, 1236, 866, 1232, 1206,
	1203, 742, 1161, 1158, 1140, 866, 866, 866, 876, 1131,
	1130, 1127, 1126, 1114, 1061, 1056, 1050, 1025, 866, 469,
	11325, 11325, 714, 838, 50, -1000, 799, 469, 469, 799,
	799, 21345, -1000, 43323, -1000, -613, -1000, -328, 148, -1000,
	45765, -1000, -1000, 469, 2230, -1000, 44951, -1000, -1000, -1000,
	-1000, -1000, 35183, 892, 1407, -1000, -1000, 838, 864, -1000,
	-1000, 700, 700, 12953, -1000, -1000, -1000, -1000, -1000, -1000,
	49, 1585, 1026, 43323, 838, -1000, 25415, -1000, 862, 1284,
	-1000, -1000, -1000, 1520, 24601, -1000, 838, 838, 43323, 1047,
	797, -1000, 43, -1000, 709, -343, -315, -1000, -1000, -1000,
	-1000, 700, -1000, 453, -1000, 145, -1000, -77, -1000, -1000,
	-1000, -1000, -1000, -1000, 1420, -267, -1000, -1000, -1000, -137,
	-10, -1000, -1000, -1000, 34369, 101, 101, -235, -1000, -1000,
	-1000, 398, 398, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 959, 1277, -117, -1000, -1000, 392, -1000,
	-1000, 1423, 43323, -1000, -1000, 482, 1543, -147, 43323, 233,
	1022, -1000, 991, 991, 991, 43323, -1000, -1000, -1000, -1000,
	-1000, -1000, 43323, 2596, 825, -1000, -162, -1000, -1000, 822,
	927, 463, 463, -1000, -1000, 1453, 217, -1000, -1000, -511,
	-1000, -1000, -159, -162, 111, -1000, 463, -1000, -1000, -1000,
	-1000, -692, 804, -7, -156, -28, 43323, 43323, 43323, 43323,
	43323, 33, -1000, -1000, -1000, -20, -1000, 43323, 43323, 139,
	-1000, -1000, -1000, 545, -1000, -1000, 545, -1000, -1000, -1000,
	-1000, -1000, 1444, 43323, -319, -665, -1000, -661, 12953, -1000,
	-1000, -1000, -1000, 301, -14, 509, 13767, 13767, -1000, -1000,
	11325, -427, 80, 80, 33555, -1000, -1000, -1000, 12953, 12953,
	1007, 210, -1000, 12953, 638, -1000, -1000, 12953, 12953, 12953,
	469, -1000, -1000, -1000, -1000, -1000, 1607, -1000, 12953, 12953,
	12953, -1000, -1000, 12953, 12953, -1000, 12953, 12953, 22973, 469,
	22973, 12953, 12953, 22973, -1000, -1000, -1000, -1000, 22973, 12953,
	12953, 12953, 12953, 12953, 12953, 12953, 12953, 12953, -1000, -1000,
	799, 799, 11325, 21345, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 148, -1000, 90, 90, 90, -1000,
	-1000, -1000, -1000, -1000, -1000, 696, 1565, -1000, 1107, 1585,
	-1000, 29485, 1407, -1000, -1000, 43323, -1000, 16293, 1557, 12953,
	-1000, 1474, 779, -1000, 172, 554, -1000, -1000, 10511, 789,
	1096, 40, 43323, 29485, 29485, 29485, 29485, 29485, -1000, 1070,
	1063, -1000, 1099, 1089, 1054, 43323, -1000, 745, 469, 1587,
	24601, 297, 12953, 31113, 542, 29485, -1000, -1000, 29485, 43323,
	15451, -1000, -1000, -323, -312, -1000, -1000, -1000, 265, -1000,
	-1000, 141, 1516, 1412, -1000, -1000, -1000, -1000, -1000, 101,
	101, -1000, -1000, -1000, -1000, -1000, -1000, 706, -1000, 623,
	-152, -1000, 978, 1441, 163, 163, -1000, -1000, 463, -1000,
	-1000, -1000, -18, -1000, 1485, 43323, 1020, 1016, 1015, -1000,
	600, 1567, 43323, -1000, -1000, 43323, -117, 43323, -1000, -1000,
	-1000, 6448, -1000, -1000, -1000, -162, -1000, -1000, -1000, -1000,
	-1000, -1000, 43323, -148, -1000, 921, 354, -1000, -1000, 985,
	-1000, -1000, -1000, -1000, -155, -118, 43323, 124, 1277, 43323,
	-1000, -1000, -1000, 561, 561, -1000, -1000, 1440, -1000, 463,
	866, 13767, 13767, -1000, 112, -1000, 838, 469, 920, 920,
	-1000, 920, -1000, -1000, 920, -202, 920, -213, 920, -1000,
	-1000, 469, 469, 808, 865, -392, -1000, 700, 12953, 1018,
	1013, 866, -1000, 12953, 866, 866, 866, -1000, 700, 742,
	950, 560, -1000, -1000, -1000, -1000, 690, 866, 949, -607,
	469, 612, 612, 612, 612, 612, 594, 594, 594, 594,
	-1000, -1000, 469, -1000, -1000, 1528, 1528, 1528, 44137, 43323,
	-1000, -1000, -1000, 1592, 632, -1000, -1000, -1000, -1000, 700,
	259, -1000, 43323, 12953, 838, -1000, 261, 43323, 838, 43323,
	976, 1284, 989, 1008, 1234, -1000, -1000, -1000, -1000, 1033,
	-1000, 1017, -1000, -1000, 887, -1000, -1000, 1079, 469, 922,
	1585, 29485, 952, 952, -1000, 39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 310, 6073, 1648, -1000, 390, -1000, 448,
	153, 350, -1000, -1000, -1000, 252, 243, -1000, 43323, 919,
	-1000, -1000, -1000, -10, 386, -10, -1000, -1000, -1000, -1000,
	1095, 1255, -1000, 43323, -1000, -1000, 43323, 43323, 43323, 43323,
	-1000, -1000, -1000, 575, -1000, 12953, -1000, -1000, -1000, 423,
	423, -1000, -1000, -1000, 887, -1000, -1000, -1000, 479, -1000,
	-1000, -439, 43323, 43323, 43323, 43323, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 112, 13767, -1000, -1000,
	-10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12953, -1000, 12953, -1000, 1557, 364, 700, 12953, 12953, -1000,
	866, -1000, -1000, -1000, 469, 22973, -1000, 22973, -1000, 12953,
	146, 80, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 838, 1379, 838, 838, -1000, -1000, 1582,
	1564, 1646, -1000, 700, -1000, 838, -1000, 37, 554, -1000,
	1580, -1000, -1000, 12953, 899, -1000, 12953, -1000, -1000, -1000,
	-1000, -1000, -1000, 4719, 1580, 952, -1000, -1000, 133, -1000,
	12953, -1000, -1000, -1000, 4117, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 895, 12953, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 887, -1000,
	-1000, -1000, 600, -85, 866, -1000, -1000, 1512, -1000, -1000,
	21345, -1000, -1000, 884, 990, -1000, -108, -1000, 866, 866,
	469, -1000, 866, 866, -1000, -1000, 560, -1000, 685, -1000,
	146, 469, 1004, -1000, -1000, 4719, -1000, 28671, -1000, 1563,
	1561, 32741, 32741, -1000, 12953, 12953, 43323, 554, 43323, 1557,
	700, 43323, 700, -271, 1557, -1000, 866, -1000, 838, 838,
	838, 838, 838, 43323, 851, 1507, -1000, -1000, 297, 530,
	-1000, 162, 43323, 43323, 469, -43, -445, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12953, -1000, 469, 1001, -1000, -551,
	-1000, 549, -1000, -1000, -1000, -1000, -1000, 549, 549, 700,
	523, 508, -1000, -1000, 547, 469, 838, -1000, -1000, 539,
	-1000, 297, -434, 21345, 14609, 526, -1000, -1000, 1077, -432,
	-458, 742, -1000, -651, -1000, -1000, 31927, -1000, -1000, -1000,
	-1000, 31113, 42509, -421, -101, -434, -1000, -345, -1000, -1000,
	-1000, -1000, -1000, 985, -1000, 1027, -1000, 469, -1000, -1000,
	-1000, 476, -1000, 2205, -567, 999, -1000, -418, -1000, -1000,
	-1000, 308, 362, -1000, -1000, -1000, -1000, -1000, -1000, -68,
	-1000, -1000, -439, -441, -1000, -1000, 42509, -540, 111, 4719,
	-1000, 995, 981, 1613, -1000, -1000, -1000, -1000, -1000, -1000,
	-143, -1000, -449, -1000, -1000, 1479, -271, -1000, 1641, -1000,
	1614, 394, 394, -1000, -464, -568, -1000, -1000, -1000, -1000,
	-1000, -78, 681, -1000, -1000, 4719, -1000, -1000, -1000, 144,
	144, -1000, -1000,
}

var psqPgo = [...]int{
	0, 1925, 23, 77, 223, 22, 243, 108, 1924, 1922,
	1921, 1920, 1917, 1916, 1914, 395, 393, 385, 1912, 1910,
	1906, 1905, 1903, 1902, 1901, 1900, 1898, 1897, 359, 142,
	216, 1896, 1895, 1894, 92, 150, 68, 73, 154, 1892,
	1891, 54, 1890, 1889, 1887, 170, 166, 151, 1458, 1885,
	149, 91, 1883, 1882, 1874, 1873, 1872, 1871, 1870, 1869,
	1867, 1866, 1865, 1863, 1862, 1861, 1860, 165, 1858, 1857,
	15, 1856, 59, 1855, 1851, 1850, 1848, 1847, 1846, 1845,
	1844, 126, 1843, 1842, 1837, 227, 1836, 1835, 148, 84,
	90, 1834, 1833, 82, 157, 1826, 102, 1824, 1822, 1821,
	134, 1820, 5196, 1818, 45, 42, 1815, 49, 65, 41,
	35, 17, 9, 1814, 1813, 43, 78, 1811, 1810, 60,
	1809, 75, 87, 1808, 1807, 11, 5, 1804, 1, 6,
	2, 48, 1801, 1800, 97, 1796, 1795, 1792, 76, 1791,
	1788, 5684, 1787, 74, 121, 83, 58, 1785, 1784, 31,
	1783, 1781, 1777, 1771, 1767, 27, 1766, 1765, 1764, 124,
	29, 144, 32, 34, 52, 116, 1763, 33, 62, 1762,
	123, 120, 1761, 1760, 1759, 38, 1758, 28, 115, 104,
	39, 81, 1756, 1755, 1470, 218, 1754, 47, 1753, 36,
	25, 1752, 80, 30, 1751, 139, 1750, 64, 143, 100,
	140, 1749, 1748, 1747, 1746, 188, 1744, 1743, 1742, 156,
	131, 129, 70, 1741, 387, 1740, 1739, 69, 2132, 1066,
	2777, 46, 141, 1738, 1737, 3641, 128, 117, 16, 1735,
	168, 1731, 1730, 1726, 245, 145, 89, 1444, 37, 1723,
	1722, 13, 1719, 1718, 1717, 1716, 1715, 1712, 200, 334,
	57, 8, 72, 132, 51, 1711, 1710, 106, 95, 1708,
	135, 130, 113, 138, 1706, 147, 125, 105, 1704, 79,
	1703, 1702, 1701, 1700, 86, 1699, 1696, 1695, 1694, 137,
	133, 98, 66, 1693, 67, 94, 136, 127, 26, 1692,
	12, 44, 40, 20, 88, 109, 1690, 0, 1689, 14,
	146, 380, 1547, 1688, 1687, 3, 7, 10, 1684, 1681,
	1680, 1679, 122, 1678, 1672, 1671, 1666, 19, 21, 18,
	4, 1665, 1664, 5361, 3785, 114, 1663, 335,
}

//line psql.y:6250
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colSetExprUnion() *ast.ColSetExpr {
	v, _ := st.union.(*ast.ColSetExpr)
	return v
}

func (st *psqSymType) colSetExprsUnion() ast.ColSetExprs {
	v, _ := st.union.(ast.ColSetExprs)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 321, 322, 322, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 297, 297, 297,
	300, 300, 26, 63, 28, 28, 27, 27, 30, 30,
	29, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
	5, 7, 7, 7, 13, 14, 6, 15, 15, 75,
	75, 16, 17, 17, 17, 17, 325, 325, 136, 136,
	134, 134, 135, 135, 18, 19, 19, 200, 200, 199,
	199, 199, 201, 201, 201, 201, 237, 237, 20, 20,
	20, 20, 20, 86, 86, 299, 299, 298, 290, 290,
	289, 289, 288, 296, 296, 295, 295, 294, 32, 33,
	42, 42, 42, 42, 43, 44, 301, 301, 270, 49,
	49, 48, 48, 48, 48, 48, 48, 50, 50, 46,
	46, 45, 45, 47, 47, 272, 272, 259, 259, 271,
	271, 271, 271, 271, 271, 271, 258, 258, 97, 97,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 316, 316, 316, 315, 315,
	183, 183, 183, 183, 183, 183, 183, 183, 106, 106,
	115, 115, 115, 115, 115, 104, 104, 105, 103, 103,
	103, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 114, 114, 110, 110, 110,
	111, 111, 111, 112, 112, 317, 317, 317, 317, 241,
	241, 241, 241, 244, 244, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 243, 243, 243, 243, 243, 245,
	245, 245, 245, 245, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	247, 247, 247, 247, 247, 247, 247, 247, 257, 257,
	248, 248, 253, 254, 255, 255, 255, 256, 256, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 252, 252,
	251, 251, 251, 260, 284, 284, 283, 283, 281, 281,
	281, 281, 281, 269, 269, 278, 278, 278, 278, 278,
	268, 268, 264, 264, 264, 265, 265, 266, 266, 263,
	263, 267, 267, 280, 280, 279, 279, 261, 261, 262,
	262, 286, 318, 318, 318, 318, 318, 319, 319, 287,
	308, 310, 310, 310, 309, 309, 306, 307, 305, 305,
	305, 305, 305, 72, 72, 72, 212, 212, 213, 213,
	276, 276, 275, 275, 275, 277, 277, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 208, 208, 208, 304, 304, 304, 304, 304,
	304, 303, 303, 303, 273, 273, 273, 302, 302, 51,
	51, 168, 168, 39, 39, 39, 39, 39, 39, 38,
	38, 38, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 40, 40, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 124, 126, 127, 127, 125,
	125, 125, 125, 125, 125, 53, 53, 52, 52, 129,
	128, 130, 130, 130, 22, 31, 31, 23, 23, 23,
	23, 24, 24, 54, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 207, 207, 215, 215, 206, 206,
	230, 230, 230, 209, 209, 209, 314, 314, 314, 203,
	203, 56, 56, 56, 58, 58, 59, 60, 60, 232,
	232, 233, 233, 61, 62, 73, 73, 73, 73, 73,
	73, 76, 76, 76, 9, 9, 9, 9, 69, 69,
	69, 8, 8, 57, 57, 64, 311, 311, 312, 313,
	313, 313, 313, 65, 25, 25, 25, 25, 25, 25,
	92, 92, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 87, 87, 87, 82, 82, 326, 67,
	68, 68, 85, 85, 85, 79, 79, 79, 84, 84,
	84, 10, 10, 11, 191, 191, 12, 12, 89, 89,
	91, 91, 91, 91, 91, 93, 93, 93, 93, 93,
	93, 93, 88, 88, 90, 90, 90, 90, 223, 223,
	223, 222, 222, 118, 118, 120, 119, 119, 121, 121,
	122, 122, 122, 122, 166, 166, 144, 189, 189, 187,
	187, 188, 188, 190, 190, 190, 190, 123, 123, 123,
	123, 131, 131, 132, 132, 133, 133, 231, 231, 228,
	228, 228, 227, 227, 137, 137, 137, 139, 138, 138,
	138, 138, 140, 140, 142, 142, 141, 141, 143, 148,
	148, 147, 147, 145, 145, 145, 145, 146, 146, 146,
	146, 149, 149, 102, 102, 102, 102, 102, 102, 113,
	113, 113, 113, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 74, 74, 74, 204, 204, 150, 150, 158, 158,
	158, 158, 151, 151, 151, 151, 151, 151, 151, 159,
	159, 159, 165, 160, 160, 156, 156, 156, 156, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 239, 239, 293,
	293, 292, 292, 291, 291, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 327, 327, 249, 249,
	249, 157, 157, 157, 157, 157, 83, 83, 83, 83,
	83, 236, 236, 236, 240, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	171, 171, 80, 80, 169, 169, 170, 172, 172, 167,
	167, 167, 153, 153, 173, 173, 174, 174, 175, 175,
	177, 176, 176, 178, 179, 179, 179, 180, 180, 181,
	181, 181, 41, 41, 41, 41, 41, 36, 36, 36,
	36, 37, 37, 37, 37, 94, 94, 94, 94, 96,
	96, 95, 95, 70, 70, 71, 71, 71, 100, 100,
	101, 101, 101, 98, 98, 99, 99, 184, 184, 185,
	152, 152, 152, 152, 152, 186, 186, 186, 186, 192,
	192, 162, 162, 164, 164, 163, 117, 193, 193, 197,
	194, 194, 198, 198, 198, 198, 198, 195, 195, 196,
	196, 224, 224, 224, 202, 202, 214, 214, 210, 210,
	211, 211, 205, 205, 216, 216, 216, 66, 161, 161,
	285, 285, 282, 220, 220, 220, 221, 221, 225, 225,
	225, 229, 229, 226, 226, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 323, 324, 234, 235,
	235, 235,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	0, 1, 2, 3, 2, 3, 0, 1, 3, 1,
	4, 3, 3, 4, 3, 2, 3, 4, 3, 4,
	2, 7, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 3, 2, 2, 5, 7, 8, 6, 7, 1,
	1, 10, 10, 9, 8, 8, 1, 1, 1, 3,
	1, 3, 1, 3, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	6, 12, 2, 0, 2, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 1, 1, 3, 3, 6, 4,
	7, 8, 8, 8, 6, 3, 1, 1, 4, 0,
	1, 1, 1, 1, 2, 2, 2, 0, 1, 4,
	4, 4, 4, 4, 4, 2, 4, 1, 3, 1,
	1, 3, 4, 3, 3, 3, 5, 10, 0, 2,
	0, 2, 3, 5, 3, 4, 2, 3, 2, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 5, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 0, 0, 1, 1, 0, 1, 0,
	3, 3, 2, 2, 2, 1, 2, 2, 0, 1,
	0, 2, 2, 5, 0, 1, 1, 2, 1, 2,
	1, 1, 3, 0, 1, 4, 3, 3, 4, 2,
	0, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 1, 3, 3, 4, 3, 1, 3,
	1, 7, 6, 7, 7, 8, 8, 0, 1, 5,
	2, 1, 1, 1, 0, 1, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 1, 1, 2, 0, 1,
	0, 1, 1, 3, 2, 1, 2, 4, 4, 3,
	3, 3, 4, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 0, 2, 0, 1, 5, 1, 3, 7, 1,
	3, 3, 1, 2, 2, 2, 5, 5, 5, 6,
	8, 5, 5, 4, 4, 4, 6, 5, 5, 2,
	2, 2, 2, 3, 3, 3, 4, 3, 3, 1,
	3, 5, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 11, 3, 8, 6, 6,
	6, 13, 8, 6, 10, 8, 4, 1, 3, 3,
	6, 7, 7, 8, 4, 0, 1, 0, 1, 3,
	3, 1, 1, 2, 3, 3, 5, 7, 7, 6,
	5, 3, 2, 3, 3, 3, 7, 3, 3, 3,
	4, 7, 5, 2, 4, 4, 4, 4, 4, 5,
	5, 4, 4, 4, 4, 4, 4, 4, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 4, 4, 4,
	4, 4, 5, 3, 0, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 1,
	1, 2, 1, 3, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 3, 3, 6, 4, 7, 6,
	1, 3, 2, 2, 2, 1, 1, 1, 3, 2,
	1, 1, 1, 0, 1, 1, 0, 3, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 5, 5, 4, 0, 2, 4, 4, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 3, 1, 3, 4, 3, 0, 3, 1,
	3, 1, 3, 1, 1, 3, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 3, 0,
	1, 1, 2, 6, 5, 6, 6, 0, 2, 3,
	3, 0, 2, 3, 3, 2, 3, 1, 6, 3,
	4, 3, 1, 3, 4, 5, 6, 3, 4, 5,
	6, 3, 4, 1, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 3, 1, 1, 2, 2, 2, 2, 1,
	1, 2, 9, 6, 6, 6, 2, 2, 3, 3,
	3, 1, 1, 1, 0, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 5, 5, 6, 4,
	4, 8, 6, 8, 6, 8, 5, 4, 2, 2,
	1, 2, 2, 2, 8, 8, 6, 5, 4, 4,
	4, 4, 4, 7, 4, 6, 6, 6, 4, 4,
	4, 7, 8, 6, 5, 6, 8, 11, 7, 8,
	8, 9, 4, 4, 4, 4, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 4, 0, 2, 0,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 2,
	3, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 1, 0, 2, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 2, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 2, 0, 3, 0, 2, 0, 1,
	3, 1, 3, 2, 0, 1, 1, 0, 1, 2,
	4, 4, 0, 2, 2, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 3, 3, 3, 0,
	3, 1, 1, 0, 4, 0, 1, 1, 0, 3,
	1, 3, 2, 1, 1, 0, 1, 2, 4, 2,
	2, 1, 5, 4, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	0, 3, 0, 1, 0, 1, 1, 5, 0, 1,
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var psqChk = [...]int{
	-1000, -321, -1, -5, -13, -14, -15, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -54, -55, -56, -58,
	-59, -60, -61, -62, -8, -57, -25, -26, -63, -64,
	-65, -66, -10, -11, -12, -3, -2, -7, 9, 10,
	-75, -27, 32, -32, -42, 481, -43, -33, 482, -44,
	484, 483, 521, 485, 514, 336, 566, 567, 569, 570,
	571, 572, -76, 519, 520, 488, 36, 172, 33, 34,
	37, 527, 528, 491, -4, -28, 8, -323, 11, 689,
	516, 515, 28, -6, 723, 348, -322, 855, -184, -185,
	22, 33, 29, -181, -177, -85, -185, 20, 18, 7,
	-67, -326, -67, -67, 12, 13, -67, -270, -272, 348,
	417, 348, -67, -49, -48, -46, -45, -47, -50, 31,
	-39, -38, -40, -34, -35, -277, 487, 482, 489, 490,
	690, 385, 384, 382, 383, 483, 337, 484, 343, 33,
	723, 726, -274, -50, 364, 366, 834, 495, 837, 838,
	841, 842, 848, 849, 850, 386, 7, -67, -229, -225,
	-297, -218, -219, 351, 352, 353, 68, 69, 70, 71,
	507, 487, 755, 556, 72, 73, 482, 41, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 566, 403, 580,
	574, 721, 83, 19, 84, 37, 85, 508, 544, 86,
	87, 591, 594, 88, 89, 90, 91, 92, 522, 627,
	363, 93, 569, 656, 366, 94, 95, 96, 834, 97,
	98, 99, 100, 341, 101, 111, 112, 113, 114, 115,
	116, 660, 670, 491, 117, 359, 118, 119, 120, 545,
	13, 121, 122, 123, 124, 125, 126, 385, 382, 127,
	128, 583, 483, 129, 734, 384, 130, 131, 608, 824,
	518, 630, 764, 132, 346, 528, 26, 516, 133, 134,
	135, 377, 136, 137, 138, 555, 358, 765, 337, 817,
	139, 634, 140, 40, 648, 141, 142, 737, 738, 143,
	110, 144, 675, 145, 499, 146, 147, 148, 383, 149,
	150, 151, 152, 495, 506, 153, 154, 155, 156, 157,
	158, 11, 159, 578, 579, 477, 553, 650, 605, 702,
	160, 161, 703, 162, 163, 164, 165, 739, 376, 166,
	396, 35, 167, 722, 168, 557, 169, 170, 651, 171,
	172, 820, 173, 33, 772, 174, 175, 719, 176, 177,
	529, 550, 178, 179, 680, 180, 324, 683, 181, 539,
	647, 182, 596, 777, 183, 321, 184, 185, 186, 187,
	511, 344, 188, 189, 190, 191, 779, 192, 780, 586,
	193, 746, 381, 194, 782, 195, 196, 546, 197, 784,
	786, 198, 747, 199, 200, 201, 202, 203, 204, 39,
	787, 530, 205, 842, 788, 206, 207, 208, 209, 791,
	210, 527, 211, 212, 213, 639, 214, 534, 215, 216,
	217, 218, 219, 220, 652, 582, 221, 222, 750, 223,
	224, 225, 226, 227, 572, 484, 655, 689, 228, 229,
	799, 513, 230, 231, 232, 802, 570, 233, 234, 235,
	236, 237, 238, 571, 239, 493, 641, 240, 241, 685,
	554, 549, 242, 658, 243, 649, 32, 244, 245, 323,
	514, 808, 809, 576, 246, 247, 547, 248, 249, 567,
	250, 251, 252, 253, 852, 388, 254, 355, 255, 256,
	693, 257, 258, 752, 642, 386, 259, 260, 261, 551,
	597, 812, 587, 588, 568, 262, 263, 535, 701, 521,
	264, 265, 266, 267, 813, 657, 268, 269, 270, 271,
	272, 273, 12, 274, 275, 276, 277, 322, 319, 592,
	278, 279, 496, 280, 281, 282, 283, 726, 573, 284,
	653, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 296, 590, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 494, -67, 494, -141,
	-225, 494, -195, 626, -215, 628, 641, 636, 634, -207,
	637, 639, 534, -314, 648, 494, 643, 481, 638, 646,
	543, -297, 434, 852, 394, 594, 633, 631, 649, 820,
	-225, 568, -232, 573, -220, -297, -218, -219, 571, -141,
	-73, 817, 486, 485, -234, -234, -87, 820, 822, -160,
	-102, 401, -113, -116, -107, -108, -154, -155, -156, -157,
	-114, -167, 423, 424, 431, 402, -165, -117, 26, 719,
	691, 690, 434, 31, 477, 330, 331, 693, 694, 404,
	319, 666, 667, -115, 661, 668, 663, 696, 697, 377,
	698, 367, 369, 368, 699, 700, 701, 606, 607, 702,
	703, 704, 370, 371, 372, 373, 374, 375, 376, 705,
	708, 706, 707, 709, 710, 711, 716, 717, 712, 713,
	714, 715, 718, -220, -225, 499, 660, 493, 429, 689,
	-109, -105, -2, -163, 659, 664, 665, 669, 662, -297,
	-218, -219, -111, -110, -150, 354, 360, 365, 361, -320,
	378, -323, 359, 358, 355, 356, 357, 379, 380, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 116, 642, 642, -141, -67, -67, -67, -175, -85,
	-177, -4, -2, -323, 8, -67, -2, -3, -7, -28,
	-30, 750, -29, -225, 12, 419, -141, -180, -181, -6,
	-2, -102, 19, 23, 24, -90, 425, -102, -225, -68,
	-90, -205, 498, -67, -67, -194, -237, 568, -198, 649,
	648, -221, -196, -220, -217, -195, 647, 23, 486, 485,
	400, 42, 729, 25, 27, 43, 44, 434, 389, 404,
	691, 505, 433, 626, 501, 45, 509, 481, 334, 46,
	661, 47, 48, 663, 659, 666, 31, 49, 28, 24,
	36, 407, 408, 735, 380, 50, 22, 510, 51, 14,
	633, 52, 16, 17, 53, 419, 54, 332, 55, 29,
	416, 56, 328, 742, 390, 330, 417, 20, 664, 665,
	335, 401, 57, 378, 21, 338, 654, 398, 18, 333,
	58, 59, 500, 512, 816, 331, 8, 60, 61, 62,
	63, 64, 494, 65, 406, 497, 391, 379, 7, 395,
	644, 339, 66, 67, 405, 15, 753, 723, 594, -271,
	417, -258, -262, -220, 509, -287, 505, -141, -280, -279,
	-220, -323, -86, -214, 495, 503, 502, 395, -301, 398,
	551, 660, 493, -45, -46, -47, -195, 433, 837, 349,
	349, -274, -262, -261, -260, -302, 509, -286, -278, 501,
	510, -268, 502, 503, -263, 495, 396, -302, 505, 495,
	-302, -302, 497, 35, 35, 386, 386, -302, -263, 500,
	510, 505, 509, -216, -263, 497, 25, -269, 409, -269,
	727, 727, -195, 433, -269, -269, -269, 538, -269, -269,
	-269, -269, -269, -269, -269, -269, -269, 494, -301, -94,
	646, 343, -48, -31, -141, -214, 495, 496, -301, 527,
	-141, 478, -141, -209, 417, 15, -209, -206, 642, 640,
	627, 632, -209, -209, -209, 541, 625, -264, 495, 35,
	506, 642, 541, 625, 541, 542, 541, 542, 635, 645,
	541, -230, 14, 419, 660, 630, 634, 534, 494, 535,
	496, 644, 642, 537, -235, -323, -221, -297, 823, -235,
	32, 352, 497, -220, -69, -220, 355, -9, -5, -16,
	-15, -17, 409, -92, 642, -81, 434, 824, 825, 826,
	823, 639, 831, 829, 827, 541, 828, 349, 398, 400,
	4, -102, 416, -151, 409, 410, 411, 412, 413, 414,
	415, 419, 401, 403, 417, 418, 409, 399, 420, 421,
	422, 423, 424, 425, 426, 428, 427, 429, 430, 433,
	479, 480, -108, -108, -108, -108, -165, -323, -323, -323,
	-108, -204, -323, -108, -323, -323, -323, -323, -171, -102,
	-323, -327, -323, -327, -327, -249, -323, -249, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, 478, -323, -323, -323, -323,
	-323, -249, -249, -249, -249, -249, 365, 360, 354, -167,
	361, 355, -220, -225, -2, -3, -160, -234, -311, -312,
	-144, -141, -323, -220, -220, 527, -180, -6, -2, -175,
	-181, -177, -2, -67, -79, -91, 325, 326, -93, 24,
	38, 329, 327, 23, -324, 350, -324, -184, -324, 349,
	-30, -189, 348, 323, 349, 21, -176, -178, -102, 14,
	-223, -222, 25, -220, 355, 478, 363, 14, -142, 29,
	-141, -205, -205, 349, 568, -198, -237, -200, -199, 650,
	652, 409, -224, -220, 355, 31, 350, 349, -141, -241,
	-244, -246, -245, -247, -242, -243, 591, 592, 434, 595,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 608,
	32, 517, 587, 588, 589, 590, 609, 610, 611, 612,
	613, 614, 615, 616, 574, 593, 721, 575, 576, 577,
	578, 579, 580, 582, 583, 584, 585, 586, -300, -297,
	348, 350, 349, -248, 348, -102, -94, 494, -297, 495,
	495, 495, -67, 689, -269, -269, -269, 18, -34, -35,
	-38, -35, 348, -258, -267, -300, -297, 348, 396, 500,
	395, -266, -263, -266, -267, -297, -167, -297, -297, -167,
	-258, -195, -167, -297, 396, 396, -297, -297, -141, -297,
	31, 340, 341, 342, 31, 344, 345, 346, -269, -269,
	355, 355, 355, -269, 355, -303, 511, 555, 557, 31,
	355, -304, 31, 844, 843, 845, 846, 847, 31, 31,
	-220, 348, -141, -100, 545, 481, 483, 487, 338, 409,
	349, 497, 494, -297, -210, 499, -210, -220, -226, -225,
	-217, 355, -102, -265, 14, 419, -230, -230, -209, -141,
	-265, -230, -209, -141, -209, -209, -209, -209, -230, -230,
	-230, -209, -225, -225, -141, -141, -141, -141, -141, -141,
	-141, -235, -203, 14, 338, -235, -235, -233, 571, 605,
	818, 819, 349, 723, -134, -141, 823, 823, 823, 823,
	823, -102, -102, -102, 746, -158, 378, 401, 379, 380,
	-116, -159, -163, -165, 362, 419, 403, 417, 418, -107,
	-108, -107, 42, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -236, -220, 355, 434, -112,
	-111, 361, 355, -320, -112, -88, -90, -102, -102, -297,
	-220, -88, -88, -102, -84, 24, 38, -169, -170, 405,
	-167, -324, -324, 361, -220, -220, -78, -77, 671, 672,
	673, 674, 676, 677, 678, 681, 682, 686, 687, 670,
	688, 675, 680, 683, 684, 685, 679, 590, -102, -102,
	-102, -102, -102, -102, -74, -102, 389, 390, 391, -102,
	-102, -161, -160, -296, -295, -294, -102, -102, -102, -102,
	-102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
	-102, -102, -102, -102, -102, -102, -102, -102, -102, -89,
	24, 38, -88, -221, -226, -217, -88, -89, -89, -88,
	-88, 478, -324, 349, -313, 652, 653, 821, -228, -227,
	25, -225, 355, -161, 14, -191, 339, -220, -180, -180,
	325, 326, 321, -88, -93, -324, -29, 25, -187, -220,
	324, -102, -102, 349, -179, 27, 28, -141, -222, 425,
	-226, -141, -152, 32, 319, -5, -323, -141, -119, -121,
	-122, -123, -144, -166, -323, -124, 742, 739, 14, -134,
	-135, -143, -225, -198, -200, 349, 651, 653, 654, 338,
	381, -102, -251, 433, -276, -275, -274, -258, -260, -261,
	-262, 495, 396, 350, -251, -255, 623, 622, -248, -248,
	-248, -248, -248, -250, -195, 617, 618, 434, -250, -250,
	-250, 348, 348, -248, -248, -248, -248, -253, -253, -253,
	-254, -254, -287, -102, -284, -283, -281, -282, 364, 815,
	771, 723, 339, -279, -179, 357, -324, -100, -211, 499,
	-285, -282, -297, -297, -297, -211, -297, 355, -297, 355,
	-297, 355, 19, 349, -259, -258, -51, 555, -286, -280,
	-267, 396, -266, -267, -267, 483, 32, -212, 762, 401,
	815, 771, -258, -51, -236, -297, 497, -236, -236, 355,
	-208, 852, -134, -96, 547, 409, 536, 536, 494, 494,
	549, -141, 548, 550, 552, -141, -141, -210, 338, -136,
	-141, 26, -225, -141, -209, -209, -141, -209, -209, -141,
	-220, -81, 652, 349, 723, 22, -82, 22, -323, 378,
	379, 380, -159, -107, -108, -107, 400, 518, -159, 355,
	349, -324, 25, 349, 339, -324, -324, -324, 349, 14,
	-88, -172, -170, 407, -102, -324, -324, 349, 349, 14,
	-240, -324, -324, -324, -324, -324, -171, -324, 14, 349,
	349, -324, -324, 349, 349, -324, 349, 349, 349, -293,
	349, 349, 349, 349, -324, -324, -324, -324, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, -324, -324,
	-88, -88, -323, 478, -324, -324, -324, -324, -324, -221,
	-312, 820, 653, -148, -147, -145, 336, 498, 337, -227,
	-324, -112, 352, -188, 352, -187, -153, -220, 361, -118,
	-120, 14, -93, -165, 350, 349, -178, 478, -149, 15,
	-192, 338, -193, -197, -167, -162, -164, -163, -323, -186,
	-324, -220, 32, 349, -137, -139, -138, -140, 328, 332,
	334, 329, 330, 331, 335, -231, 25, -119, -3, -2,
	-323, -323, -323, -141, -134, -325, 14, 339, -325, 349,
	478, -199, -201, 655, 652, 658, -297, 355, 349, -274,
	-262, -182, -97, 40, -256, 624, -250, 730, -250, -220,
	355, 434, -252, 434, -252, 617, 618, -257, 355, -257,
	350, -41, -36, -37, 33, 343, -281, 355, 39, -220,
	350, -179, -96, -141, 401, 338, -285, -285, -285, -225,
	-187, 18, 349, 350, -168, 556, 350, 348, -267, -267,
	31, 31, 815, 771, 762, -51, -168, -251, -297, 854,
	853, 350, 496, 554, -101, 666, -98, 355, 351, -141,
	-141, -141, -141, -141, 487, 483, 497, -134, -141, 349,
	-72, 513, 508, -230, -230, 33, -141, 652, 832, 830,
	-102, 400, 518, -116, -108, -90, 720, -238, 434, 591,
	517, 589, 585, 605, 596, 622, 587, 623, 584, 583,
	582, -238, -236, -102, -102, -175, 408, -102, 406, -102,
	-102, -102, -324, 14, -102, -102, -102, -294, -102, -102,
	-102, -292, -291, -112, -167, -324, -292, -102, -102, -291,
	-291, -295, -295, -295, -295, -295, -160, -160, -160, -160,
	-324, -324, -89, -221, -145, -263, -263, -263, 349, -202,
	22, 14, 319, -149, -119, -93, -220, 425, -180, -102,
	30, -192, 349, 409, 349, -324, -324, 349, 319, 478,
	-193, -121, -122, -122, -121, -122, 328, 328, 328, 333,
	328, 333, 328, -138, -225, -324, -324, -3, -3, -102,
	-228, 339, -119, -119, -143, -225, 425, 652, 656, 657,
	-274, -319, 378, 401, 31, 338, 620, 364, -317, 433,
	759, 810, 815, 771, -318, 500, 395, 396, 512, 25,
	41, -252, -252, 350, 349, 350, -213, -212, -37, -36,
	-269, -269, -297, 496, 26, -141, 338, 338, 338, 19,
	-258, -167, -284, -187, -104, -323, -103, -105, -109, 423,
	424, 358, 359, -168, -141, -95, 545, 553, 348, -99,
	352, -299, 339, 536, 620, 536, -141, -72, -41, -141,
	-209, -209, 33, -297, -324, -116, -108, -323, -324, -248,
	-248, -248, -254, -248, 579, -248, 579, -248, -324, -324,
	349, -324, 22, -324, -80, 695, -102, 349, 349, -324,
	-102, -324, -324, -324, -293, 349, -324, 349, -324, 349,
	-239, 816, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -146, 22, -146, -146, 352, -141, -173,
	16, 396, -197, -102, -164, 319, -5, -220, -162, -220,
	-149, -132, -131, 338, 339, -133, 338, -131, 328, 328,
	-189, -324, -324, 349, -149, -119, -149, -149, 478, 378,
	-323, -106, -115, -104, 12, 355, 355, -297, -316, 843,
	844, 31, 357, 396, 396, -141, 348, -250, 355, -250,
	31, 344, 345, 346, 31, 340, 341, 342, -141, -141,
	-141, -141, -187, 350, -102, -110, -110, -189, 350, -290,
	723, -298, -220, -220, -220, -220, -107, -250, -102, -102,
	-180, 355, -102, -102, -324, -324, -292, -291, -102, -324,
	-129, -128, -130, 824, 378, 31, -238, -323, 328, 18,
	16, -323, -323, -174, 17, 19, 12, -162, 478, -175,
	-102, 348, -102, -112, -175, -149, -102, -155, 377, 701,
	702, 703, 376, 348, -102, -189, -318, -324, 25, -289,
	-288, -221, 348, 339, -83, 419, 723, -324, -324, -324,
	-324, -324, -324, -324, 349, -324, -128, -130, -324, 338,
	-112, -190, -324, -220, 500, 19, 19, -190, -190, -102,
	-160, -193, -220, -180, -187, -126, 627, -180, -324, -187,
	350, 25, -5, 349, 409, -187, -141, -324, 721, 335,
	724, -102, -324, 338, 734, 824, 349, -324, -324, -324,
	350, -324, -323, 350, -183, -5, -70, 723, -288, -273,
	-221, 355, 357, 350, 324, 722, 725, -293, -220, 500,
	-228, -127, -125, -220, 777, -309, -308, 719, -319, -315,
	378, 401, 364, -317, 815, 771, 387, 388, -70, -71,
	544, 820, -299, 324, -324, -324, 349, 22, -241, -53,
	788, -306, -307, 338, -310, 633, 787, 808, 378, 355,
	505, -290, 723, -125, 784, -251, -112, -307, 338, -306,
	338, 13, 12, 546, 724, -52, 26, -126, -305, 513,
	508, 511, 32, -305, 725, 788, 507, 31, 378, -112,
	-129, -128, -128,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 67, 69, 70, 678, 678,
	678, 0, 678, 0, 0, 678, -2, -2, 678, 1131,
	0, 678, 0, 0, -2, 612, 614, 0, 616, -2,
	0, 0, 625, 1648, 1648, 673, 0, 0, 0, 0,
	0, 678, 678, 678, 1018, 47, 678, 0, 79, 80,
	631, 632, 633, 62, 0, 1646, 1, 3, 68, 72,
	0, 0, 0, 55, 1027, 0, 73, 0, 0, 682,
	0, 680, 0, 1112, 678, 678, 0, 108, 109, 0,
	0, 0, -2, 112, -2, 141, 142, 143, 0, 148,
	514, 464, 466, 469, 502, -2, -2, 457, 457, 457,
	0, 0, 0, 0, 0, 457, 499, 1114, 363, 363,
	0, 0, 425, 0, 363, 363, 363, 0, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 1045, 147, 1132,
	1128, 1129, 1130, 37, 38, 39, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 0, 1106, 0, 552,
	776, 0, 603, 603, 0, 603, 603, 603, 0, 0,
	0, 563, 0, 0, 0, 0, 600, 0, 579, 0,
	585, 1649, 0, 1649, 1097, 0, 597, 595, 607, 608,
	611, 615, 0, 620, 623, 1123, 1124, 1125, 0, 638,
	46, 1349, 629, 630, 643, 644, 0, 674, 675, 42,
	873, 0, 797, 802, 813, 827, 828, 829, 830, 831,
	833, 834, 0, 0, 0, 0, 839, 840, 1336, 1417,
	0, 0, 0, 854, 1385, 0, 0, 1560, 0, 1000,
	1598, 966, 966, 890, 966, 968, 968, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 1578, 0, 0, 1389,
	1392, 0, 0, 0, 0, 0, 0, 0, 1398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 1364, 1301, 1525, 0, 1507,
	265, 266, 872, 1086, 968, 968, 968, 968, 968, -2,
	-2, -2, 211, 212, 213, 214, 215, 216, 217, 0,
	207, 0, -2, -2, -2, 271, 267, 856, 857, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 1648, 0, 653, 0, 0, 0, 0, 1027, 0,
	1019, 1018, 60, 0, 678, -2, 0, 0, 0, 0,
	44, 1498, 49, 737, 1067, 0, 1069, 56, 1028, 64,
	66, 1029, 0, 683, 684, 0, 714, 718, 0, 679,
	0, 0, 1113, 1112, 1112, 94, 0, 1574, 1090, -2,
	-2, 0, 0, 1126, 1127, 1099, -2, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1272, 0,
	0, 159, 160, 0, 40, 390, 0, 155, 0, 383,
	330, 0, 1045, 0, 0, 0, 0, 0, 678, 0,
	1107, 136, 137, 144, 145, 146, 363, 363, 363, 147,
	147, 426, 473, 474, 475, 0, -2, 388, 0, 458,
	0, 0, 377, 377, 381, 379, 380, 0, 0, 0,
	0, 0, 0, 489, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 1116, 0, 364, 0,
	512, 513, 363, 363, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 1058,
	0, 0, -2, 544, 0, 0, 0, 1108, 1108, 0,
	551, 0, 553, 554, 0, 0, 555, 0, 600, 600,
	598, 599, 557, 558, 559, 603, 0, 0, 372, 373,
	374, 600, 603, 0, 603, 603, 603, 603, 600, 600,
	600, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1649, 582, 583, 586, 1650, 1651, 1649, 1649, 593,
	1098, 613, 621, 624, 641, 639, 640, 642, 634, 635,
	636, 637, 0, 654, 655, 660, 0, 0, 0, 665,
	666, 667, 0, 0, 670, 671, 672, 0, 0, 0,
	0, 795, 0, 0, 862, 863, 864, 865, 866, 867,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 836, 837, 838, 841, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 688, 0, 1001,
	0, 888, 0, 889, 891, 892, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 698, 698, 0,
	0, 200, 201, 202, 203, 204, 218, 219, 220, 221,
	222, -2, 1009, 0, 872, 0, 0, 43, 645, 646,
	0, 759, 1118, 0, 694, 0, 54, 63, 65, 1027,
	58, 1027, 0, 700, 0, 0, -2, -2, 701, 707,
	708, 709, 710, 711, 51, 1647, 52, 0, 71, 0,
	45, 0, 0, 0, 0, 0, 1020, 1021, 1024, 0,
	715, 719, 0, 721, 722, 0, 681, 0, 0, 0,
	775, 0, 0, 0, 1574, 1096, 0, 96, 97, 0,
	0, 0, 350, 1101, 1102, 1103, -2, 370, 0, 350,
	334, 280, 281, 282, 330, 284, 330, 330, 330, 330,
	339, 339, 339, 339, 313, 314, 315, 316, 317, 0,
	0, 299, 330, 330, 330, 330, 320, 321, 322, 323,
	324, 325, 326, 327, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 332, 332, 332, 333, 333, 0, 41,
	0, 354, 0, 1024, 0, 0, 1058, 1110, 1120, 0,
	0, 0, 1110, 114, 0, 0, 0, 0, 470, 471,
	467, 503, 0, 459, 371, 0, -2, 0, 381, 0,
	377, 381, 378, 381, 369, 382, 0, 0, 0, 0,
	459, 0, 493, 494, 495, 0, 497, 498, 500, 0,
	504, 505, 506, 507, 508, 509, 510, 511, 0, 0,
	429, 430, 431, 0, 433, 434, 451, 452, 453, 435,
	436, 437, 445, 446, 447, 448, 449, 450, 438, 439,
	442, 0, 129, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 0, 0, 697, 777, 1133,
	1134, 604, 605, 0, 375, 376, 603, 603, 560, 590,
	0, 603, 564, 591, 565, 567, 566, 568, 580, 581,
	603, 571, 601, 602, 572, 573, 574, 575, 576, 577,
	578, 587, 0, 609, 610, 588, 589, 0, 622, 626,
	627, 628, 0, 0, 657, 90, 662, 663, 664, 676,
	669, 874, 793, 794, 0, 796, 799, 0, 858, 860,
	801, 803, 869, 870, 871, 0, 0, 0, 0, 0,
	807, 811, 0, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 832, 981, 982, 983, 849,
	273, 274, 270, 0, 850, 0, 712, 0, 0, 0,
	848, 0, 0, 0, 0, 689, 690, 1007, 1004, 0,
	0, 967, 969, 0, 0, 0, 0, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 984, 0,
	0, 0, 0, 0, 1000, 0, 851, 852, 853, 0,
	0, 0, 1119, 0, 124, 125, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 1010, 0, -2, 0, 0, 0, 0,
	0, 0, 1085, 0, 648, 649, 651, 0, 779, 760,
	0, 762, 763, 0, 0, 693, 0, 696, 57, 59,
	705, 706, 0, 723, 702, 53, 48, 0, 0, 739,
	1068, 1030, 1031, 0, 1023, 1025, 1026, 74, 720, 716,
	0, 791, 1079, 0, 0, 1071, 0, 774, 0, 726,
	728, 729, 730, 757, 0, 733, 0, 1397, 0, 0,
	0, 92, 776, 1091, 95, 0, 0, 100, 101, 1092,
	-2, 1094, 1095, 0, 138, -2, 422, 161, 163, 164,
	165, -2, -2, 156, -2, 337, 335, 336, 283, 339,
	339, 307, 308, 309, 0, 348, 348, 345, 310, 311,
	312, 0, 0, 300, 301, 302, 303, 294, 295, 296,
	297, 298, 389, 0, 1032, 355, 356, 358, 0, 360,
	361, 0, 0, 384, 385, 0, 1024, 1049, 0, 0,
	0, 1121, 1120, 1120, 1120, 0, 149, 150, 151, 152,
	153, 154, 0, 147, 0, 157, 461, 460, 387, 0,
	0, 381, 381, 366, 367, 0, 0, 483, 416, 0,
	484, 485, 459, 461, 350, 496, 0, 427, 428, 432,
	440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1046, 1047, 1048, 0, 545, 0, 0, 413,
	88, 1109, 550, 600, 570, 592, 600, 562, 569, 584,
	618, 661, 0, 0, 0, 0, 668, 0, 0, 800,
	859, 861, 804, 0, 808, 812, 0, 0, 814, 272,
	0, 0, 0, 0, 0, 855, 879, 880, 0, 0,
	1018, 0, 1005, 0, 0, 887, 970, 0, 0, 0,
	0, 898, 899, 900, 901, 902, 0, 904, 0, 0,
	0, 908, 909, 0, 0, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 875,
	0, 0, 698, 0, 971, 972, 973, 974, 975, 1010,
	647, 650, 652, 736, 780, 781, 0, 0, 0, 761,
	1117, 691, 692, 695, -2, 0, 0, 1012, 0, 791,
	724, 0, 703, 50, 738, 0, 1022, 0, 1027, 0,
	77, 0, 1079, 1087, 0, 1070, 1081, 1083, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 767, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 86, 87, 0, 0,
	0, 98, 99, 0, 0, 105, 351, 352, 147, 424,
	162, 397, 0, 0, 279, 338, 304, 305, 306, 348,
	348, 342, 343, 349, 344, 346, 347, 0, 328, 0,
	418, 110, 1036, 1035, 363, 363, 357, 359, 0, 1122,
	331, 386, 0, 128, 0, 0, 0, 0, 0, 134,
	465, 0, 0, 476, 477, 0, 354, 0, 365, 368,
	478, 0, 481, 482, 417, 461, 487, 488, 501, 443,
	444, 441, 0, 0, 1059, 1060, 1065, 1063, 1064, 115,
	518, 520, 519, 523, 0, 0, 0, 413, 1032, 0,
	549, 414, 415, 603, 603, 656, 91, 0, 659, 0,
	0, 0, 0, 805, 809, 713, 0, 0, 330, 330,
	987, 330, 333, 990, 330, 992, 330, 995, 330, 998,
	999, 0, 0, 0, 0, 1002, 886, 1008, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 126, 127, 939,
	0, 0, 941, 943, 944, 914, 940, 0, 0, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 877, 0, 1011, 782, 787, 787, 787, 0, 0,
	1104, 1105, 1013, 1014, 725, 704, 740, 717, 75, 792,
	0, 78, 0, 0, 0, 1084, 0, 0, 0, 0,
	791, 727, 753, 755, 0, 750, 765, 766, 768, 0,
	770, 0, 772, 773, 737, 732, 734, 0, 0, 0,
	791, 0, 791, 791, 93, 0, 778, 102, 103, 104,
	423, 166, 171, 0, 0, 0, 176, 0, 178, 0,
	0, 0, 183, 184, 398, 0, 276, 278, 0, 0,
	169, 340, 341, 339, 0, 339, 399, 419, 1033, 1034,
	0, 0, 362, 0, 1111, 130, 0, 0, 0, 0,
	158, 462, 353, 0, 479, 0, 205, 206, 208, 0,
	0, 268, 269, 486, 737, 1050, 1051, 1052, 0, 1062,
	1066, 118, 0, 0, 0, 0, 546, 547, 548, 89,
	556, 561, 658, 677, 798, 806, 810, 0, 843, 985,
	339, 988, 989, 991, 993, 994, 996, 997, 844, 845,
	0, 882, 0, 884, 1027, 0, 1006, 0, 0, 896,
	0, 905, 906, 907, 0, 0, 913, 0, 915, 0,
	0, 0, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 878, 0, 0, 0, 0, -2, 61, 1016,
	0, 0, 1088, 1089, 1082, 0, 1074, 1077, 1073, 1076,
	1018, 747, 754, 0, 0, 748, 0, 749, 769, 771,
	731, -2, 735, 0, 1018, 791, 84, 85, 0, 172,
	0, 174, 198, 199, 0, 177, 179, 180, 181, 185,
	186, 187, 182, 275, 277, 0, 0, 318, 329, 319,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 737, 131,
	132, 133, 468, 0, 0, 209, 210, 0, 1061, 517,
	0, 116, 117, 0, 0, 522, 976, 986, 0, 0,
	0, 1003, 0, 0, 903, 911, 0, 942, 0, 918,
	0, 0, 0, 541, 542, 0, 938, 0, 788, 0,
	0, 0, 0, 76, 0, 0, 0, 1072, 0, 1027,
	751, 0, 756, 0, 1027, 83, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 480, 0, 119,
	120, 0, 0, 0, 0, 0, 0, 881, 883, 885,
	894, 895, 912, 916, 0, 919, 0, 0, 920, 0,
	543, 0, 784, 743, 744, 789, 790, 0, 0, 1017,
	1015, 1080, 1078, 81, 0, 0, 0, 82, 173, 0,
	190, 0, 1053, 0, 0, 0, 524, 842, 0, 0,
	0, 939, 921, 0, 539, 540, 0, 783, 785, 786,
	752, 759, 0, 404, 397, 1053, 515, 1055, 121, 122,
	454, 455, 456, 115, 977, 0, 980, 0, 745, 746,
	525, 0, 527, 0, -2, 392, 405, 0, 167, 191,
	192, 0, 0, 195, 196, 197, 188, 189, 111, 0,
	1056, 1057, 118, 978, 917, 526, 0, 0, 350, 0,
	536, 393, 394, 0, 400, 401, 402, 403, 193, 194,
	0, 521, 0, 528, 529, 537, 0, 395, 0, 396,
	0, 0, 0, 1054, 0, 0, 538, 534, 406, 408,
	409, 0, 0, 407, 979, 0, 410, 411, 412, 530,
	531, 532, 533,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 402, 3, 3, 3, 428, 420, 3,
	348, 350, 425, 423, 349, 424, 478, 426, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 855,
	410, 409, 411, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 399, 3, 431,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 351, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 398, 57738, 400, 57739, 401,
	57740, 403, 57741, 404, 57742, 405, 57743, 406, 57744, 407,
	57745, 408, 57746, 412, 57747, 413, 57748, 414, 57749, 415,
	57750, 416, 57751, 417, 57752, 418, 57753, 419, 57754, 421,
	57755, 422, 57756, 427, 57757, 429, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 477, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 58178, 853, 58179, 854,
	0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	psqDebug        = 0
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", psqTokname(token), uint(char))
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:552
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:557
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:558
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:562
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 36:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:597
		{
			setParseTree(psqlex, nil)
		}
	case 37:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:603
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:607
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:611
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:616
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 41:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:620
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 42:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:626
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 43:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:632
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:638
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:642
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:647
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:651
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:657
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 49:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:661
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 50:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:667
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:673
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:677
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:681
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:704
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:710
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:715
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:721
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:728
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:734
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:741
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 61:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:745
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 62:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:751
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:755
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:759
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:763
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:767
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:773
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:777
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:782
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:786
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:792
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:796
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:801
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:808
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:814
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:822
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:830
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:841
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:853
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:857
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:863
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:869
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:873
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:877
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:881
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:886
		{
		}
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:887
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:891
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 89:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:895
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 90:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:901
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 91:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:905
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 92:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:911
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 93:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:915
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:921
		{
			psqLOCAL = &ast.ColSet{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].colSetExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 95:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:927
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:931
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:937
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:941
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:947
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 100:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:951
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:955
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:961
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:965
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:969
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:973
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:979
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:983
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:989
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:995
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1002
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().AlterOptions = append(psqDollar[1].alterTableUnion().AlterOptions, psqDollar[6].alterOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1011
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[8].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Algorithm: psqDollar[4].str, Definer: psqDollar[5].definerUnion(), Security: psqDollar[6].str, Columns: psqDollar[9].columnsUnion(), Select: psqDollar[11].selStmtUnion(), CheckOption: psqDollar[12].str}
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1015
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1022
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1026
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1031
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 116:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1035
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 117:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1041
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 118:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1046
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 119:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1051
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1057
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1062
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1068
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 123:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1073
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1077
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1083
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1087
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1093
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 128:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1099
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 129:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1106
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[4].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1113
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1118
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1123
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1128
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1135
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1142
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 138:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1153
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1159
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1163
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1169
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1173
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1177
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1181
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 145:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1185
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1189
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 147:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1195
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 148:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1199
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1205
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 150:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1209
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 151:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1215
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 152:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1219
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1225
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1229
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1235
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 156:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1239
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 157:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1245
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 158:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1249
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 159:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1255
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1260
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1265
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 162:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1269
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1274
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 164:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1278
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1282
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1293
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 167:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1302
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1311
		{
			psqVAL.str = ""
		}
	case 169:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1315
		{
			psqVAL.str = ""
		}
	case 170:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1324
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 171:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1328
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1334
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1340
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 174:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1345
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1350
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1355
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1360
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1365
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1370
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 180:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1374
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1379
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 182:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1383
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 183:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1388
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 184:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1394
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1402
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1406
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1410
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1416
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1420
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1425
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1429
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1434
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1440
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1446
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1451
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1456
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1462
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1470
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 200:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1477
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1481
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1485
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 203:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1489
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1493
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 207:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1504
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 209:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1511
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1515
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1521
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1525
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1529
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1533
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1537
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1541
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1545
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1550
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1554
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1558
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1562
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1566
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1573
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1577
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1581
		{
			psqVAL.str = ast.Big5Str
		}
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1585
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 227:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1589
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1593
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1597
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1601
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1605
		{
			psqVAL.str = ast.Cp850Str
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1609
		{
			psqVAL.str = ast.Cp852Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1613
		{
			psqVAL.str = ast.Cp866Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1617
		{
			psqVAL.str = ast.Cp932Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1621
		{
			psqVAL.str = ast.Dec8Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1625
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1629
		{
			psqVAL.str = ast.EuckrStr
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1633
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1637
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1641
		{
			psqVAL.str = ast.GbkStr
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1645
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1649
		{
			psqVAL.str = ast.GreekStr
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1653
		{
			psqVAL.str = ast.HebrewStr
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1657
		{
			psqVAL.str = ast.Hp8Str
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1661
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1665
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1669
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1673
		{
			psqVAL.str = ast.Latin1Str
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1677
		{
			psqVAL.str = ast.Latin2Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1681
		{
			psqVAL.str = ast.Latin5Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1685
		{
			psqVAL.str = ast.Latin7Str
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1689
		{
			psqVAL.str = ast.MacceStr
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1693
		{
			psqVAL.str = ast.MacromanStr
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1697
		{
			psqVAL.str = ast.SjisStr
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1701
		{
			psqVAL.str = ast.Swe7Str
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1705
		{
			psqVAL.str = ast.Tis620Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1709
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1713
		{
			psqVAL.str = ast.UjisStr
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1717
		{
			psqVAL.str = ast.Utf16Str
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1721
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1725
		{
			psqVAL.str = ast.Utf32Str
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1729
		{
			psqVAL.str = ast.Utf8Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1733
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1737
		{
			psqVAL.str = ast.Utf8Str
		}
	case 267:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1747
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1751
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1755
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1761
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1765
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 272:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1769
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1775
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1779
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1786
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1790
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1794
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1798
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1804
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 283:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1815
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 284:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1820
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1826
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1830
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1834
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1838
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1842
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1846
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1850
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1854
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1858
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1864
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 295:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1870
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 296:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1876
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 297:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1882
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 298:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1888
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 299:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1896
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 300:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1900
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1904
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1908
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1912
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 304:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1918
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 305:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1922
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 306:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1928
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 307:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1932
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1936
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1940
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1944
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 311:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1948
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1952
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 313:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1956
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1960
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 315:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1964
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1968
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 317:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1972
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 318:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1976
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 319:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1981
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 320:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1987
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1991
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1995
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1999
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2003
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2007
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2011
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2015
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2021
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 329:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2026
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 330:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2031
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 331:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2035
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 332:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2040
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 333:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2045
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2050
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 335:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2054
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2058
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2063
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 338:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2067
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 339:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2072
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 340:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2076
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2080
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2084
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 343:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2088
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 344:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2093
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2098
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 346:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2103
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2108
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 348:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2114
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 349:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2118
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 350:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2123
		{
			psqVAL.str = ""
		}
	case 351:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2127
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2131
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 353:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2138
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 354:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2143
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2147
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2153
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 357:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2157
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 358:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2163
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 359:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2167
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2171
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2175
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2179
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2185
		{
			psqVAL.str = ""
		}
	case 364:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2189
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 365:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2195
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 366:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2199
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2203
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2207
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2211
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2216
		{
			psqVAL.str = ""
		}
	case 371:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2220
		{
			psqVAL.str = psqDollar[2].str
		}
	case 372:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2226
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 373:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2230
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 374:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2234
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2241
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2245
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 377:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2250
		{
			psqVAL.str = "key"
		}
	case 378:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2254
		{
			psqVAL.str = psqDollar[1].str
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2260
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2264
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2269
		{
			psqVAL.str = ""
		}
	case 382:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2273
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2279
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 384:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2283
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 385:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2289
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 386:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2293
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2299
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2303
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2309
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2313
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2319
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2325
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2329
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2333
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2337
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2341
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2346
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2350
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2356
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2362
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2368
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2372
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2376
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2381
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2385
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2391
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2397
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2403
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2407
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2411
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2415
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2419
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2424
		{
			psqVAL.str = ""
		}
	case 414:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2428
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2432
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2438
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 417:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2442
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2447
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2451
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2456
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2460
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2466
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2470
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 424:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2474
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2480
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 426:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2484
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 427:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2490
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 428:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2494
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2498
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2502
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2506
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2510
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2514
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2518
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2522
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2526
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2530
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2534
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2538
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2542
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2546
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2551
		{
			psqVAL.str = ""
		}
	case 443:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2555
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2559
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 454:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2578
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2582
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2586
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 457:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2591
		{
			psqVAL.str = ""
		}
	case 459:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2597
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 460:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2601
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2606
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2610
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2615
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2619
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2623
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 466:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2627
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 467:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2631
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 468:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2635
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2641
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2645
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 471:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2649
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 472:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2655
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 473:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2659
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2663
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2667
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2671
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 477:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2675
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2679
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2683
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2687
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2691
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2696
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2701
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2705
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2709
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2713
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2717
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2721
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2725
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2729
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2733
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2737
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2741
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2745
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2749
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2753
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2757
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2761
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2765
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2769
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2773
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2779
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2783
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 504:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2789
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2793
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2797
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2801
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2805
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2809
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2813
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2817
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2821
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2825
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2831
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2837
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Algorithm: psqDollar[3].str, Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2847
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2854
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2866
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2876
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2880
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2884
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2897
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2907
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2911
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:2924
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2930
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2936
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2940
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 529:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2946
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2950
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2956
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2962
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2968
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2974
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2980
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2984
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2988
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2992
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:2998
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3004
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3010
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3014
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3018
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3024
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3030
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3034
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 547:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3040
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3044
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, psqDollar[7].alterOptionsUnion()...)}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}}, psqDollar[7].alterOptionsUnion()...)}
			}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3053
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3057
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3063
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3067
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3072
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3078
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3082
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3086
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3090
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3094
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3098
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3102
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3106
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3110
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3114
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3118
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3122
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3126
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3130
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3134
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3138
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3142
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3146
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3150
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3154
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3158
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3162
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3166
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3170
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3174
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3178
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3182
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3186
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3190
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3194
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3198
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3202
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3209
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3213
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3217
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3221
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3225
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3229
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3233
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3237
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3243
		{
			psqVAL.str = ""
		}
	case 595:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3247
		{
			psqVAL.str = "extended "
		}
	case 596:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3253
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3257
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3263
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 599:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3267
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 600:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3273
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 601:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3277
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 602:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3281
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 603:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3287
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 604:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3291
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3295
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3301
		{
			psqVAL.empty = struct{}{}
		}
	case 607:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3305
		{
			psqVAL.empty = struct{}{}
		}
	case 608:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3309
		{
			psqVAL.empty = struct{}{}
		}
	case 609:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3315
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 610:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3319
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 611:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3325
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 612:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3329
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3333
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3339
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3343
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3349
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3355
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3359
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3364
		{
			psqVAL.empty = struct{}{}
		}
	case 620:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3366
		{
			psqVAL.empty = struct{}{}
		}
	case 621:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3369
		{
			psqVAL.empty = struct{}{}
		}
	case 622:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3371
		{
			psqVAL.empty = struct{}{}
		}
	case 623:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3376
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 624:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3382
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3387
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3391
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 627:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3395
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3399
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3403
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3407
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 631:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3413
		{
			psqVAL.str = psqDollar[1].str
		}
	case 632:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3417
		{
			psqVAL.str = psqDollar[1].str
		}
	case 633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3421
		{
			psqVAL.str = psqDollar[1].str
		}
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3427
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 635:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3431
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3435
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3439
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 638:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3444
		{
			psqVAL.str = ""
		}
	case 639:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3448
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3452
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 641:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3458
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 642:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3462
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3468
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3472
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3478
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3484
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3488
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 648:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3494
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 649:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3500
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3504
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3508
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 652:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3512
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3518
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3524
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3528
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3532
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3536
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3540
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3544
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3550
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 661:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3554
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 662:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3560
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 663:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3564
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 664:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3568
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 665:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3572
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3576
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 667:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3580
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 668:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3584
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 669:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3588
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 670:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3592
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3596
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3600
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 673:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3605
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 674:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3609
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3613
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3618
		{
			psqVAL.str = ""
		}
	case 677:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3622
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 678:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3627
		{
			setAllowComments(psqlex, true)
		}
	case 679:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3631
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 680:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3637
		{
			psqVAL.strs = nil
		}
	case 681:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3641
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 682:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3647
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 683:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3651
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3655
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 685:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3660
		{
			psqVAL.str = ""
		}
	case 686:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3664
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 687:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3668
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 688:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3673
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3677
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3681
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3687
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3691
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3703
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 694:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3708
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 695:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3712
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 696:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3718
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3722
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3727
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3731
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 700:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3736
		{
			psqVAL.strs = nil
		}
	case 701:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3740
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 702:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3744
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 703:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3748
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 704:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3752
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 705:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3758
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 706:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3762
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 707:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3766
		{
			psqVAL.str = ast.DistinctStr
		}
	case 708:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3770
		{
			psqVAL.str = ast.DistinctStr
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3774
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 710:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3778
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 711:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3782
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 712:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3788
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 713:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3792
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3798
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 715:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3802
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 716:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3806
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 717:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3810
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 718:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3815
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 719:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3819
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 720:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3823
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 722:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3830
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 723:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3835
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 724:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3839
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3845
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3851
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3855
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 730:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3865
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 731:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3869
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3873
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 733:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3877
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3883
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3887
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:3893
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 737:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3898
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 738:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3902
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3908
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3912
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 741:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3918
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 742:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3922
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 743:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3928
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3932
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 745:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3936
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 746:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3940
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 747:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3953
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 748:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3957
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 749:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3961
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 750:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3965
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 751:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3971
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 752:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3973
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 753:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3977
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 754:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3979
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 755:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3983
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 756:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3985
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 757:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3988
		{
			psqVAL.empty = struct{}{}
		}
	case 758:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3990
		{
			psqVAL.empty = struct{}{}
		}
	case 759:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3993
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 760:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3997
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 761:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4001
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 763:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4008
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 764:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4014
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 765:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4018
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 766:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4022
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 767:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4028
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 768:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4034
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4038
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4042
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4046
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4052
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 773:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4056
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4066
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 775:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4070
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 776:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4076
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 777:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4080
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 778:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4086
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 779:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4091
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 780:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4095
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 781:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4101
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4105
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 783:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4111
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 784:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4115
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 785:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4119
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4123
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 787:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4128
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 788:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4132
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4136
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 790:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4140
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 791:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4146
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 792:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4150
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4157
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4161
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4165
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 796:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4169
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4173
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4177
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4184
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4188
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 801:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4192
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 802:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4196
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4202
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4206
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4210
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4214
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4218
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4222
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4226
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4230
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4234
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4238
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4242
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4246
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4252
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4256
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4260
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4264
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4268
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4272
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4276
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4280
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4284
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4288
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4292
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4296
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4300
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4306
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4310
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4314
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4318
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4322
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4326
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4330
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4334
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4338
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4342
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4346
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4350
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4354
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4358
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4362
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4366
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4370
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4374
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4378
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4386
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4390
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4398
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4402
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4408
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4412
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4416
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4422
		{
			psqVAL.str = ""
		}
	case 855:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4426
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 856:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4432
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4436
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4443
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4447
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4451
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4455
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4461
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4465
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4469
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4473
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4477
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4481
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4485
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4491
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4495
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4499
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4506
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4512
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4516
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 875:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4526
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4530
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4534
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4538
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4548
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4552
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4556
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4560
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4564
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4568
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4572
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4576
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4580
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4584
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4595
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4599
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4605
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4609
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4614
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4618
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4622
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4626
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4630
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4634
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4638
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4642
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4646
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4650
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4654
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4658
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4662
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4666
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4670
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4674
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4678
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4682
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4686
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4690
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4694
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4698
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4702
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4706
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4710
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4714
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4718
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4722
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4726
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4730
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4734
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4738
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4742
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4746
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4750
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4754
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4758
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4762
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4766
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4770
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4774
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4778
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4782
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4786
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4791
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4795
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4800
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4804
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4810
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4814
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 943:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4820
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 944:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4824
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 945:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4830
		{
		}
	case 946:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4832
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4836
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 948:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4840
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4844
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4848
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4852
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4856
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4860
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4864
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4868
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4872
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4878
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4882
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4886
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4890
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4894
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4898
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4902
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4906
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4910
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4920
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4924
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4928
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4939
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4943
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4947
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4951
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4955
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4961
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4965
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4969
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4973
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4977
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4983
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 982:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4987
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 983:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4991
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 984:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4997
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5003
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 986:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5007
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5011
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5015
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5019
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5025
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5029
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5033
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5037
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5041
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5045
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5049
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5053
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5057
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5061
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5067
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5071
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5076
		{
			psqVAL.str = string("")
		}
	case 1003:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5080
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1004:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5086
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5090
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1006:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5096
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5101
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1008:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5105
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5111
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5115
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5119
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5125
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5134
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1014:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5140
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5144
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5149
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5153
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5158
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5162
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5168
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5174
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5178
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1023:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5184
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5189
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5193
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5197
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5202
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5206
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5212
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5216
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5220
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5225
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5229
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5233
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5237
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5241
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5248
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5252
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5256
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5260
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5266
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5270
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5274
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5278
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5283
		{
			psqVAL.str = ""
		}
	case 1046:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5287
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1047:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5291
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1048:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5295
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1049:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5300
		{
			psqVAL.str = ""
		}
	case 1050:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5304
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1051:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5310
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1052:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5314
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1053:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5319
		{
			psqVAL.str = ""
		}
	case 1054:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5323
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1055:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5328
		{
			psqVAL.str = "cascaded"
		}
	case 1056:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5332
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1057:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5336
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1058:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5341
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1059:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5345
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5351
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1061:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5357
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1062:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5363
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5372
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1064:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5376
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1065:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5381
		{
			psqVAL.str = ""
		}
	case 1066:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5385
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1067:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5391
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5395
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1069:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5401
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5414
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5418
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1072:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5422
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5426
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5430
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5436
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5440
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1077:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5444
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1078:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5448
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1079:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5453
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1080:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5457
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5463
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1082:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5467
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1083:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5473
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1084:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5477
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1085:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5483
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1086:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5488
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1087:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5498
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1088:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5502
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1089:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5508
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColSetExprs
//line psql.y:5514
		{
			psqLOCAL = ast.ColSetExprs{psqDollar[1].colSetExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5518
		{
			psqSLICE := (*ast.ColSetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colSetExprUnion())
		}
	case 1092:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColSetExpr
//line psql.y:5524
		{
			psqLOCAL = &ast.ColSetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1093:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColSetExpr
//line psql.y:5528
		{
			psqLOCAL = &ast.ColSetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1094:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColSetExpr
//line psql.y:5532
		{
			psqLOCAL = &ast.ColSetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColSetExpr
//line psql.y:5536
		{
			psqLOCAL = &ast.ColSetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1096:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColSetExpr
//line psql.y:5540
		{
			psqDollar[2].colSetExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].colSetExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5548
		{
			psqVAL.str = "charset"
		}
	case 1101:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5558
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5562
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5566
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5575
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5577
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1108:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5580
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5582
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1110:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5585
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1111:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5587
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1112:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5590
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5592
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5595
		{
			psqVAL.empty = struct{}{}
		}
	case 1115:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5597
		{
			psqVAL.empty = struct{}{}
		}
	case 1116:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5599
		{
			psqVAL.empty = struct{}{}
		}
	case 1117:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5603
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1118:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5608
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1119:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5612
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1120:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5617
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5619
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1122:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5623
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1123:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5629
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5633
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5637
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1127:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5644
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1128:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5650
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1129:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5654
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1130:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5658
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1131:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5664
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1132:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5668
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1134:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5675
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1646:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6220
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1647:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6229
		{
			decNesting(psqlex)
		}
	case 1648:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6234
		{
			skipToEnd(psqlex)
		}
	case 1649:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6239
		{
			skipToEnd(psqlex)
		}
	case 1650:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6243
		{
			skipToEnd(psqlex)
		}
	case 1651:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6247
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
