// Code generated by goyacc -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:18
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:18

import (
	"github.com/usalko/sent/internal/sql_parser/ast"
	"github.com/usalko/sent/internal/sql_parser/dialect"
	"github.com/usalko/sent/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(dialect.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(dialect.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(dialect.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(dialect.Tokenizer).IncNesting()
	if psqlex.(dialect.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(dialect.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(dialect.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(dialect.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const DISTINCTROW = 57380
const PARSER = 57381
const GENERATED = 57382
const ALWAYS = 57383
const ANY = 57384
const ASYMMETRIC = 57385
const AUTHORIZATION = 57386
const CONCURRENTLY = 57387
const CURRENT_CATALOG = 57388
const CURRENT_ROLE = 57389
const CURRENT_SCHEMA = 57390
const DEFERRABLE = 57391
const FETCH = 57392
const FREEZE = 57393
const GRANT = 57394
const ILIKE = 57395
const INITIALLY = 57396
const INTERSECT = 57397
const ISNULL = 57398
const NOTNULL = 57399
const OVERLAPS = 57400
const PLACING = 57401
const SESSION_USER = 57402
const SIMILAR = 57403
const SOME = 57404
const SYMMETRIC = 57405
const SYSTEM_USER = 57406
const TABLESAMPLE = 57407
const VARIADIC = 57408
const VERBOSE = 57409
const ABORT = 57410
const ABSENT = 57411
const ABSOLUTE = 57412
const ACCESS = 57413
const AGGREGATE = 57414
const ALSO = 57415
const ASENSITIVE = 57416
const ASSERTION = 57417
const ASSIGNMENT = 57418
const AT = 57419
const ATOMIC = 57420
const ATTACH = 57421
const ATTRIBUTE = 57422
const BACKWARD = 57423
const BEFORE = 57424
const BREADTH = 57425
const CACHE = 57426
const CALLED = 57427
const CATALOG = 57428
const CHAIN = 57429
const CHARACTERISTICS = 57430
const CHECKPOINT = 57431
const CLASS = 57432
const CLOSE = 57433
const CLUSTER = 57434
const COMMENTS = 57435
const CONDITIONAL = 57436
const CONFIGURATION = 57437
const CONFLICT = 57438
const CONSTRAINTS = 57439
const CONTENT = 57440
const CONTINUE = 57441
const CONVERSION = 57442
const COST = 57443
const OPTIONALLY = 57444
const ESCAPED = 57445
const ENCLOSED = 57446
const TERMINATED = 57447
const STARTING = 57448
const LINES = 57449
const OVERWRITE = 57450
const MANIFEST = 57451
const HEADER = 57452
const CSV = 57453
const CUBE = 57454
const CURRENT = 57455
const CURSOR = 57456
const CYCLE = 57457
const DATA = 57458
const DEC = 57459
const DECLARE = 57460
const DEFAULTS = 57461
const DEFERRED = 57462
const DELIMITER = 57463
const DELIMITERS = 57464
const DEPENDS = 57465
const DEPTH = 57466
const DETACH = 57467
const DICTIONARY = 57468
const DOCUMENT = 57469
const DOMAIN = 57470
const EACH = 57471
const ENCODING = 57472
const ENCRYPTED = 57473
const EXCLUDING = 57474
const EXPRESSION = 57475
const EXTENSION = 57476
const EXTERNAL = 57477
const FAMILY = 57478
const FILTER = 57479
const FINALIZE = 57480
const FORWARD = 57481
const FUNCTIONS = 57482
const GRANTED = 57483
const GREATEST = 57484
const HANDLER = 57485
const HOLD = 57486
const IDENTITY = 57487
const IMMEDIATE = 57488
const IMMUTABLE = 57489
const IMPLICIT = 57490
const INCLUDE = 57491
const INCLUDING = 57492
const INCREMENT = 57493
const INDENT = 57494
const INHERIT = 57495
const INHERITS = 57496
const INLINE = 57497
const INOUT = 57498
const INPUT = 57499
const INSENSITIVE = 57500
const INSTEAD = 57501
const JSON_ARRAYAGG = 57502
const JSON_EXISTS = 57503
const JSON_OBJECTAGG = 57504
const JSON_QUERY = 57505
const JSON_SCALAR = 57506
const JSON_SERIALIZE = 57507
const KEEP = 57508
const LABEL = 57509
const LARGE = 57510
const LEAKPROOF = 57511
const LEAST = 57512
const LISTEN = 57513
const LOAD = 57514
const LOCATION = 57515
const LOGGED = 57516
const MAPPING = 57517
const MATCHED = 57518
const MATERIALIZED = 57519
const MERGE_ACTION = 57520
const METHOD = 57521
const MINVALUE = 57522
const MOVE = 57523
const NATIONAL = 57524
const NEW = 57525
const NFC = 57526
const NFD = 57527
const NFKC = 57528
const NFKD = 57529
const NORMALIZE = 57530
const NORMALIZED = 57531
const NOTHING = 57532
const NOTIFY = 57533
const NULLIF = 57534
const OBJECT = 57535
const OIDS = 57536
const OMIT = 57537
const OPERATOR = 57538
const OPTIONS = 57539
const OUT = 57540
const OVERLAY = 57541
const OVERRIDING = 57542
const OWNED = 57543
const OWNER = 57544
const PARALLEL = 57545
const PARAMETER = 57546
const PASSING = 57547
const PLAN = 57548
const PLANS = 57549
const POLICY = 57550
const POSITION = 57551
const PRECISION = 57552
const PREPARED = 57553
const PRESERVE = 57554
const PRIOR = 57555
const PROCEDURAL = 57556
const PROCEDURES = 57557
const PROGRAM = 57558
const PUBLICATION = 57559
const QUOTE = 57560
const QUOTES = 57561
const RANGE = 57562
const REASSIGN = 57563
const RECHECK = 57564
const REF = 57565
const REFERENCING = 57566
const REFRESH = 57567
const REINDEX = 57568
const RELATIVE = 57569
const REPLICA = 57570
const RESET = 57571
const RETURN = 57572
const RETURNS = 57573
const REVOKE = 57574
const ROLLUP = 57575
const ROUTINE = 57576
const ROUTINES = 57577
const ROW = 57578
const ROWS = 57579
const RULE = 57580
const SCALAR = 57581
const SCROLL = 57582
const SEARCH = 57583
const SEQUENCES = 57584
const SERVER = 57585
const SETOF = 57586
const SETS = 57587
const SNAPSHOT = 57588
const SOURCE = 57589
const STABLE = 57590
const STANDALONE = 57591
const STATEMENT = 57592
const STATISTICS = 57593
const STDIN = 57594
const STDOUT = 57595
const STRICT = 57596
const STRIP = 57597
const SUBSCRIPTION = 57598
const SUPPORT = 57599
const SYSID = 57600
const TARGET = 57601
const TEMP = 57602
const TEMPLATE = 57603
const TRANSFORM = 57604
const TREAT = 57605
const TRUSTED = 57606
const TYPE = 57607
const TYPES = 57608
const UESCAPE = 57609
const UNCONDITIONAL = 57610
const UNENCRYPTED = 57611
const UNKNOWN = 57612
const UNLISTEN = 57613
const UNLOGGED = 57614
const UNTIL = 57615
const VACUUM = 57616
const VALID = 57617
const VALIDATE = 57618
const VALIDATOR = 57619
const VARYING = 57620
const VERSION = 57621
const VIEWS = 57622
const VOLATILE = 57623
const WHITESPACE = 57624
const WITHIN = 57625
const WRAPPER = 57626
const XML = 57627
const XMLATTRIBUTES = 57628
const XMLCONCAT = 57629
const XMLELEMENT = 57630
const XMLEXISTS = 57631
const XMLFOREST = 57632
const XMLNAMESPACES = 57633
const XMLPARSE = 57634
const XMLPI = 57635
const XMLROOT = 57636
const XMLSERIALIZE = 57637
const XMLTABLE = 57638
const YES = 57639
const ZONE = 57640
const VALUES = 57641
const LAST_INSERT_ID = 57642
const NEXT = 57643
const VALUE = 57644
const SHARE = 57645
const MODE = 57646
const SQL_NO_CACHE = 57647
const SQL_CACHE = 57648
const SQL_CALC_FOUND_ROWS = 57649
const JOIN = 57650
const STRAIGHT_JOIN = 57651
const LEFT = 57652
const RIGHT = 57653
const INNER = 57654
const OUTER = 57655
const CROSS = 57656
const NATURAL = 57657
const USE = 57658
const FORCE = 57659
const ON = 57660
const USING = 57661
const INPLACE = 57662
const COPY = 57663
const INSTANT = 57664
const ALGORITHM = 57665
const NONE = 57666
const SHARED = 57667
const EXCLUSIVE = 57668
const SUBQUERY_AS_EXPR = 57669
const ID = 57670
const AT_ID = 57671
const AT_AT_ID = 57672
const HEX = 57673
const STRING = 57674
const NCHAR_STRING = 57675
const INTEGRAL = 57676
const FLOAT = 57677
const DECIMAL = 57678
const HEXNUM = 57679
const VALUE_ARG = 57680
const LIST_ARG = 57681
const COMMENT = 57682
const COMMENT_KEYWORD = 57683
const BIT_LITERAL = 57684
const COMPRESSION = 57685
const JSON_PRETTY = 57686
const JSON_STORAGE_SIZE = 57687
const JSON_STORAGE_FREE = 57688
const JSON_CONTAINS = 57689
const JSON_CONTAINS_PATH = 57690
const JSON_EXTRACT = 57691
const JSON_KEYS = 57692
const JSON_OVERLAPS = 57693
const JSON_SEARCH = 57694
const JSON_VALUE = 57695
const EXTRACT = 57696
const NULL = 57697
const TRUE = 57698
const FALSE = 57699
const OFF = 57700
const DISCARD = 57701
const IMPORT = 57702
const ENABLE = 57703
const DISABLE = 57704
const TABLESPACE = 57705
const VIRTUAL = 57706
const STORED = 57707
const BOTH = 57708
const LEADING = 57709
const TRAILING = 57710
const EMPTY_FROM_CLAUSE = 57711
const LOWER_THAN_CHARSET = 57712
const CHARSET = 57713
const UNIQUE = 57714
const KEY = 57715
const EXPRESSION_PREC_SETTER = 57716
const OR = 57717
const AND = 57718
const NOT = 57719
const BETWEEN = 57720
const CASE = 57721
const WHEN = 57722
const THEN = 57723
const ELSE = 57724
const END = 57725
const LE = 57726
const GE = 57727
const NE = 57728
const NULL_SAFE_EQUAL = 57729
const IS = 57730
const LIKE = 57731
const REGEXP = 57732
const IN = 57733
const SHIFT_LEFT = 57734
const SHIFT_RIGHT = 57735
const DIV = 57736
const MOD = 57737
const UNARY = 57738
const COLLATE = 57739
const BINARY = 57740
const UNDERSCORE_ARMSCII8 = 57741
const UNDERSCORE_ASCII = 57742
const UNDERSCORE_BIG5 = 57743
const UNDERSCORE_BINARY = 57744
const UNDERSCORE_CP1250 = 57745
const UNDERSCORE_CP1251 = 57746
const UNDERSCORE_CP1256 = 57747
const UNDERSCORE_CP1257 = 57748
const UNDERSCORE_CP850 = 57749
const UNDERSCORE_CP852 = 57750
const UNDERSCORE_CP866 = 57751
const UNDERSCORE_CP932 = 57752
const UNDERSCORE_DEC8 = 57753
const UNDERSCORE_EUCJPMS = 57754
const UNDERSCORE_EUCKR = 57755
const UNDERSCORE_GB18030 = 57756
const UNDERSCORE_GB2312 = 57757
const UNDERSCORE_GBK = 57758
const UNDERSCORE_GEOSTD8 = 57759
const UNDERSCORE_GREEK = 57760
const UNDERSCORE_HEBREW = 57761
const UNDERSCORE_HP8 = 57762
const UNDERSCORE_KEYBCS2 = 57763
const UNDERSCORE_KOI8R = 57764
const UNDERSCORE_KOI8U = 57765
const UNDERSCORE_LATIN1 = 57766
const UNDERSCORE_LATIN2 = 57767
const UNDERSCORE_LATIN5 = 57768
const UNDERSCORE_LATIN7 = 57769
const UNDERSCORE_MACCE = 57770
const UNDERSCORE_MACROMAN = 57771
const UNDERSCORE_SJIS = 57772
const UNDERSCORE_SWE7 = 57773
const UNDERSCORE_TIS620 = 57774
const UNDERSCORE_UCS2 = 57775
const UNDERSCORE_UJIS = 57776
const UNDERSCORE_UTF16 = 57777
const UNDERSCORE_UTF16LE = 57778
const UNDERSCORE_UTF32 = 57779
const UNDERSCORE_UTF8 = 57780
const UNDERSCORE_UTF8MB4 = 57781
const UNDERSCORE_UTF8MB3 = 57782
const INTERVAL = 57783
const JSON_EXTRACT_OP = 57784
const JSON_UNQUOTE_EXTRACT_OP = 57785
const CREATE = 57786
const ALTER = 57787
const DROP = 57788
const RENAME = 57789
const ANALYZE = 57790
const ANALYSE = 57791
const ADD = 57792
const FLUSH = 57793
const CHANGE = 57794
const MODIFY = 57795
const DEALLOCATE = 57796
const REVERT = 57797
const SCHEMA = 57798
const TABLE = 57799
const INDEX = 57800
const VIEW = 57801
const TO = 57802
const IGNORE = 57803
const IF = 57804
const PRIMARY = 57805
const COLUMN = 57806
const SPATIAL = 57807
const FULLTEXT = 57808
const KEY_BLOCK_SIZE = 57809
const CHECK = 57810
const INDEXES = 57811
const ACTION = 57812
const CASCADE = 57813
const CONSTRAINT = 57814
const FOREIGN = 57815
const NO = 57816
const REFERENCES = 57817
const RESTRICT = 57818
const SHOW = 57819
const DESCRIBE = 57820
const EXPLAIN = 57821
const DATE = 57822
const ESCAPE = 57823
const REPAIR = 57824
const OPTIMIZE = 57825
const TRUNCATE = 57826
const COALESCE = 57827
const EXCHANGE = 57828
const REBUILD = 57829
const PARTITIONING = 57830
const REMOVE = 57831
const PREPARE = 57832
const EXECUTE = 57833
const MAXVALUE = 57834
const PARTITION = 57835
const REORGANIZE = 57836
const LESS = 57837
const THAN = 57838
const PROCEDURE = 57839
const TRIGGER = 57840
const VINDEX = 57841
const VINDEXES = 57842
const DIRECTORY = 57843
const NAME = 57844
const UPGRADE = 57845
const STATUS = 57846
const VARIABLES = 57847
const WARNINGS = 57848
const CASCADED = 57849
const DEFINER = 57850
const OPTION = 57851
const SQL = 57852
const UNDEFINED = 57853
const SEQUENCE = 57854
const MERGE = 57855
const TEMPORARY = 57856
const TEMPTABLE = 57857
const INVOKER = 57858
const SECURITY = 57859
const FIRST = 57860
const AFTER = 57861
const LAST = 57862
const VITESS_MIGRATION = 57863
const CANCEL = 57864
const RETRY = 57865
const COMPLETE = 57866
const CLEANUP = 57867
const THROTTLE = 57868
const UNTHROTTLE = 57869
const EXPIRE = 57870
const RATIO = 57871
const BEGIN = 57872
const START = 57873
const TRANSACTION = 57874
const COMMIT = 57875
const ROLLBACK = 57876
const SAVEPOINT = 57877
const RELEASE = 57878
const WORK = 57879
const BIT = 57880
const TINYINT = 57881
const SMALLINT = 57882
const MEDIUMINT = 57883
const INT = 57884
const INTEGER = 57885
const BIGINT = 57886
const INTNUM = 57887
const REAL = 57888
const DOUBLE = 57889
const FLOAT_TYPE = 57890
const DECIMAL_TYPE = 57891
const NUMERIC = 57892
const TIME = 57893
const TIMESTAMP = 57894
const DATETIME = 57895
const YEAR = 57896
const CHAR = 57897
const VARCHAR = 57898
const BOOL = 57899
const CHARACTER = 57900
const VARBINARY = 57901
const NCHAR = 57902
const TEXT = 57903
const TINYTEXT = 57904
const MEDIUMTEXT = 57905
const LONGTEXT = 57906
const BLOB = 57907
const TINYBLOB = 57908
const MEDIUMBLOB = 57909
const LONGBLOB = 57910
const JSON = 57911
const JSON_SCHEMA_VALID = 57912
const JSON_SCHEMA_VALIDATION_REPORT = 57913
const ENUM = 57914
const GEOMETRY = 57915
const POINT = 57916
const LINESTRING = 57917
const POLYGON = 57918
const GEOMETRYCOLLECTION = 57919
const MULTIPOINT = 57920
const MULTILINESTRING = 57921
const MULTIPOLYGON = 57922
const ASCII = 57923
const UNICODE = 57924
const NULLX = 57925
const AUTO_INCREMENT = 57926
const APPROXNUM = 57927
const SIGNED = 57928
const UNSIGNED = 57929
const ZEROFILL = 57930
const CODE = 57931
const COLLATION = 57932
const COLUMNS = 57933
const DATABASES = 57934
const ENGINES = 57935
const EVENT = 57936
const EXTENDED = 57937
const FIELDS = 57938
const FULL = 57939
const FUNCTION = 57940
const GTID_EXECUTED = 57941
const KEYSPACES = 57942
const OPEN = 57943
const PLUGINS = 57944
const PRIVILEGES = 57945
const PROCESSLIST = 57946
const SCHEMAS = 57947
const TABLES = 57948
const TRIGGERS = 57949
const USER = 57950
const VGTID_EXECUTED = 57951
const VITESS_KEYSPACES = 57952
const VITESS_METADATA = 57953
const VITESS_MIGRATIONS = 57954
const VITESS_REPLICATION_STATUS = 57955
const VITESS_SHARDS = 57956
const VITESS_TABLETS = 57957
const VITESS_TARGET = 57958
const VSCHEMA = 57959
const VITESS_THROTTLED_APPS = 57960
const NAMES = 57961
const GLOBAL = 57962
const SESSION = 57963
const ISOLATION = 57964
const LEVEL = 57965
const READ = 57966
const WRITE = 57967
const ONLY = 57968
const REPEATABLE = 57969
const COMMITTED = 57970
const UNCOMMITTED = 57971
const SERIALIZABLE = 57972
const CURRENT_TIMESTAMP = 57973
const DATABASE = 57974
const CURRENT_DATE = 57975
const NOW = 57976
const CURRENT_TIME = 57977
const LOCALTIME = 57978
const LOCALTIMESTAMP = 57979
const CURRENT_USER = 57980
const UTC_DATE = 57981
const UTC_TIME = 57982
const UTC_TIMESTAMP = 57983
const DAY = 57984
const DAY_HOUR = 57985
const DAY_MICROSECOND = 57986
const DAY_MINUTE = 57987
const DAY_SECOND = 57988
const HOUR = 57989
const HOUR_MICROSECOND = 57990
const HOUR_MINUTE = 57991
const HOUR_SECOND = 57992
const MICROSECOND = 57993
const MINUTE = 57994
const MINUTE_MICROSECOND = 57995
const MINUTE_SECOND = 57996
const MONTH = 57997
const QUARTER = 57998
const SECOND = 57999
const SECOND_MICROSECOND = 58000
const YEAR_MONTH = 58001
const WEEK = 58002
const REPLACE = 58003
const CONVERT = 58004
const CAST = 58005
const SUBSTR = 58006
const SUBSTRING = 58007
const GROUP_CONCAT = 58008
const SEPARATOR = 58009
const TIMESTAMPADD = 58010
const TIMESTAMPDIFF = 58011
const WEIGHT_STRING = 58012
const LTRIM = 58013
const RTRIM = 58014
const TRIM = 58015
const JSON_ARRAY = 58016
const JSON_OBJECT = 58017
const JSON_QUOTE = 58018
const JSON_DEPTH = 58019
const JSON_TYPE = 58020
const JSON_LENGTH = 58021
const JSON_VALID = 58022
const JSON_ARRAY_APPEND = 58023
const JSON_ARRAY_INSERT = 58024
const JSON_INSERT = 58025
const JSON_MERGE = 58026
const JSON_MERGE_PATCH = 58027
const JSON_MERGE_PRESERVE = 58028
const JSON_REMOVE = 58029
const JSON_REPLACE = 58030
const JSON_SET = 58031
const JSON_UNQUOTE = 58032
const MATCH = 58033
const AGAINST = 58034
const BOOLEAN = 58035
const LANGUAGE = 58036
const WITH = 58037
const QUERY = 58038
const EXPANSION = 58039
const WITHOUT = 58040
const VALIDATION = 58041
const UNUSED = 58042
const ARRAY = 58043
const BYTE = 58044
const CUME_DIST = 58045
const DESCRIPTION = 58046
const DENSE_RANK = 58047
const EMPTY = 58048
const EXCEPT = 58049
const FIRST_VALUE = 58050
const GROUPING = 58051
const GROUPS = 58052
const JSON_TABLE = 58053
const LAG = 58054
const LAST_VALUE = 58055
const LATERAL = 58056
const LEAD = 58057
const NTH_VALUE = 58058
const NTILE = 58059
const OF = 58060
const OVER = 58061
const PERCENT_RANK = 58062
const RANK = 58063
const RECURSIVE = 58064
const ROW_NUMBER = 58065
const SYSTEM = 58066
const WINDOW = 58067
const ACTIVE = 58068
const ADMIN = 58069
const AUTOEXTEND_SIZE = 58070
const BUCKETS = 58071
const CLONE = 58072
const COLUMN_FORMAT = 58073
const COMPONENT = 58074
const DEFINITION = 58075
const ENFORCED = 58076
const ENGINE_ATTRIBUTE = 58077
const EXCLUDE = 58078
const FOLLOWING = 58079
const GEOMCOLLECTION = 58080
const GET_MASTER_PUBLIC_KEY = 58081
const HISTOGRAM = 58082
const HISTORY = 58083
const INACTIVE = 58084
const INVISIBLE = 58085
const LOCKED = 58086
const MASTER_COMPRESSION_ALGORITHMS = 58087
const MASTER_PUBLIC_KEY_PATH = 58088
const MASTER_TLS_CIPHERSUITES = 58089
const MASTER_ZSTD_COMPRESSION_LEVEL = 58090
const NESTED = 58091
const NETWORK_NAMESPACE = 58092
const NOWAIT = 58093
const NULLS = 58094
const OJ = 58095
const OLD = 58096
const OPTIONAL = 58097
const ORDINALITY = 58098
const ORGANIZATION = 58099
const OTHERS = 58100
const PARTIAL = 58101
const PATH = 58102
const PERSIST = 58103
const PERSIST_ONLY = 58104
const PRECEDING = 58105
const PRIVILEGE_CHECKS_USER = 58106
const PROCESS = 58107
const RANDOM = 58108
const REFERENCE = 58109
const REQUIRE_ROW_FORMAT = 58110
const RESOURCE = 58111
const RESPECT = 58112
const RESTART = 58113
const RETAIN = 58114
const REUSE = 58115
const ROLE = 58116
const SECONDARY = 58117
const SECONDARY_ENGINE = 58118
const SECONDARY_ENGINE_ATTRIBUTE = 58119
const SECONDARY_LOAD = 58120
const SECONDARY_UNLOAD = 58121
const SIMPLE = 58122
const SKIP = 58123
const SRID = 58124
const THREAD_PRIORITY = 58125
const TIES = 58126
const UNBOUNDED = 58127
const VCPU = 58128
const VISIBLE = 58129
const RETURNING = 58130
const FORMAT = 58131
const TREE = 58132
const VITESS = 58133
const TRADITIONAL = 58134
const LOCAL = 58135
const LOW_PRIORITY = 58136
const NO_WRITE_TO_BINLOG = 58137
const LOGS = 58138
const ERROR = 58139
const GENERAL = 58140
const HOSTS = 58141
const OPTIMIZER_COSTS = 58142
const USER_RESOURCES = 58143
const SLOW = 58144
const CHANNEL = 58145
const RELAY = 58146
const EXPORT = 58147
const AVG_ROW_LENGTH = 58148
const CONNECTION = 58149
const CHECKSUM = 58150
const DELAY_KEY_WRITE = 58151
const ENCRYPTION = 58152
const INSERT_METHOD = 58153
const MAX_ROWS = 58154
const MIN_ROWS = 58155
const PACK_KEYS = 58156
const PASSWORD = 58157
const FIXED = 58158
const DYNAMIC = 58159
const COMPRESSED = 58160
const REDUNDANT = 58161
const COMPACT = 58162
const ROW_FORMAT = 58163
const STATS_AUTO_RECALC = 58164
const STATS_PERSISTENT = 58165
const STATS_SAMPLE_PAGES = 58166
const STORAGE = 58167
const MEMORY = 58168
const DISK = 58169

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"VITESS_MIGRATION",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VITESS_KEYSPACES",
	"VITESS_METADATA",
	"VITESS_MIGRATIONS",
	"VITESS_REPLICATION_STATUS",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VITESS_TARGET",
	"VSCHEMA",
	"VITESS_THROTTLED_APPS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	1, 140,
	845, 140,
	-2, 148,
	-1, 48,
	1, 468,
	845, 468,
	-2, 148,
	-1, 55,
	35, 622,
	475, 622,
	486, 622,
	521, 636,
	522, 636,
	-2, 624,
	-1, 60,
	477, 649,
	-2, 647,
	-1, 114,
	474, 1165,
	-2, 114,
	-1, 116,
	1, 141,
	845, 141,
	-2, 148,
	-1, 127,
	374, 148,
	413, 148,
	575, 148,
	-2, 477,
	-1, 128,
	375, 371,
	480, 371,
	-2, 458,
	-1, 708,
	458, 1186,
	-2, 1182,
	-1, 709,
	458, 1187,
	-2, 1183,
	-1, 720,
	328, 1362,
	458, 1362,
	459, 1362,
	460, 1362,
	-2, 270,
	-1, 721,
	328, 1403,
	458, 1403,
	459, 1403,
	460, 1403,
	-2, 269,
	-1, 722,
	328, 1614,
	458, 1614,
	459, 1614,
	460, 1614,
	-2, 271,
	-1, 784,
	301, 717,
	-2, 732,
	-1, 818,
	389, 1592,
	-2, 107,
	-1, 819,
	389, 1411,
	-2, 108,
	-1, 825,
	389, 1487,
	-2, 1159,
	-1, 965,
	485, 41,
	490, 41,
	-2, 382,
	-1, 1022,
	1, 521,
	845, 521,
	-2, 148,
	-1, 1229,
	458, 1614,
	-2, 273,
	-1, 1255,
	301, 718,
	-2, 737,
	-1, 1256,
	301, 719,
	-2, 738,
	-1, 1305,
	1, 421,
	845, 421,
	-2, 148,
	-1, 1385,
	485, 42,
	490, 42,
	-2, 383,
	-1, 1653,
	458, 1191,
	-2, 1185,
	-1, 1729,
	1, 1152,
	329, 1152,
	845, 1152,
	-2, 1509,
	-1, 1734,
	1, 422,
	845, 422,
	-2, 148,
	-1, 1740,
	328, 380,
	331, 380,
	332, 380,
	333, 380,
	-2, 1430,
	-1, 1741,
	328, 381,
	331, 381,
	332, 381,
	333, 381,
	-2, 1457,
	-1, 1743,
	25, 169,
	-2, 171,
	-1, 1972,
	329, 39,
	-2, 773,
	-1, 2021,
	319, 91,
	329, 91,
	-2, 791,
	-1, 2382,
	329, 39,
	-2, 774,
	-1, 2406,
	7, 53,
	18, 53,
	20, 53,
	330, 53,
	-2, 766,
	-1, 2600,
	22, 1490,
	32, 1490,
	414, 1490,
	497, 1490,
	555, 1490,
	556, 1490,
	557, 1490,
	558, 1490,
	559, 1490,
	560, 1490,
	561, 1490,
	563, 1490,
	564, 1490,
	565, 1490,
	566, 1490,
	567, 1490,
	568, 1490,
	569, 1490,
	570, 1490,
	571, 1490,
	572, 1490,
	573, 1490,
	574, 1490,
	576, 1490,
	578, 1490,
	579, 1490,
	580, 1490,
	581, 1490,
	582, 1490,
	583, 1490,
	584, 1490,
	585, 1490,
	586, 1490,
	589, 1490,
	590, 1490,
	591, 1490,
	592, 1490,
	593, 1490,
	594, 1490,
	595, 1490,
	596, 1490,
	597, 1490,
	710, 1490,
	-2, 549,
}

const psqPrivate = 57344

const psqLast = 47057

var psqAct = [...]int{
	708, 717, 2477, 2478, 2174, 2476, 2551, 2654, 2627, 1731,
	710, 2628, 2454, 1308, 2312, 2582, 1666, 2598, 2252, 2259,
	1927, 1234, 3, 2516, 630, 1990, 701, 37, 1687, 2265,
	1270, 626, 1986, 2537, 2172, 1084, 1993, 702, 711, 2138,
	2173, 652, 699, 700, 96, 2295, 2397, 1994, 1991, 796,
	777, 162, 2015, 2378, 162, 1033, 591, 162, 623, 1769,
	622, 2317, 605, 2059, 162, 2121, 2082, 1773, 1790, 2061,
	930, 2050, 162, 1752, 2060, 1816, 624, 1720, 144, 36,
	2004, 996, 797, 823, 1709, 1963, 1988, 162, 1257, 618,
	1708, 1623, 1647, 1564, 125, 162, 1693, 2114, 1789, 1832,
	1553, 1775, 1383, 1805, 781, 2055, 785, 1297, 2023, 605,
	38, 1622, 605, 162, 605, 931, 1276, 1391, 635, 1711,
	95, 779, 1667, 1512, 799, 1237, 1461, 1576, 1103, 1166,
	1529, 1390, 966, 937, 1457, 1787, 1442, 1766, 962, 963,
	1294, 1753, 1296, 1280, 820, 791, 934, 938, 1619, 1082,
	1076, 145, 119, 117, 1357, 1018, 118, 1466, 89, 786,
	1830, 1378, 123, 594, 164, 165, 166, 1431, 1062, 2098,
	2097, 1104, 2129, 2426, 2130, 2481, 2481, 2571, 1663, 1664,
	1362, 1104, 164, 165, 166, 1650, 810, 1518, 158, 1517,
	787, 2570, 1516, 1515, 2608, 1514, 804, 563, 809, 120,
	1497, 102, 956, 616, 1506, 617, 960, 594, 2606, 2616,
	126, 1959, 121, 2366, 2089, 1820, 2631, 2612, 2613, 789,
	91, 97, 2661, 998, 85, 2267, 2268, 76, 1003, 1004,
	1005, 2607, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1781, 104, 105, 961, 108, 973, 592, 114, 817,
	824, 159, 2626, 2640, 558, 987, 1818, 993, 98, 1819,
	2092, 613, 955, 1522, 1000, 999, 1777, 2660, 120, 954,
	953, 2592, 2650, 952, 773, 774, 775, 776, 1113, 78,
	784, 2566, 2571, 594, 2638, 2455, 78, 1001, 1113, 2583,
	1873, 2591, 78, 2565, 579, 80, 2137, 2603, 778, 2350,
	1372, 1169, 2249, 2250, 1298, 780, 1299, 577, 812, 813,
	1702, 158, 120, 2106, 1960, 2032, 2248, 2105, 2031, 2128,
	78, 2033, 798, 1756, 1726, 1727, 1725, 614, 1870, 1079,
	2266, 946, 1052, 771, 948, 121, 770, 788, 77, 1173,
	1021, 1069, 2269, 1071, 8, 2552, 1040, 574, 1665, 1057,
	1058, 1041, 1053, 7, 6, 2043, 587, 2341, 1046, 1039,
	594, 1038, 2339, 2139, 595, 594, 951, 594, 1026, 1027,
	947, 583, 2255, 1746, 1745, 2053, 2054, 1109, 2632, 942,
	1102, 1068, 1070, 603, 2314, 2318, 1505, 1109, 607, 601,
	1135, 1844, 1841, 1843, 1842, 1845, 1846, 1241, 2115, 2633,
	1029, 2083, 2649, 1838, 1806, 1756, 1002, 2101, 595, 1448,
	2521, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1143,
	1145, 1146, 2307, 1833, 949, 1507, 1508, 1509, 1443, 951,
	2308, 943, 1850, 1425, 1851, 1078, 1852, 1054, 945, 944,
	564, 1073, 566, 1047, 1059, 597, 2141, 596, 570, 1061,
	568, 572, 580, 573, 1060, 567, 1006, 578, 1839, 1837,
	569, 581, 582, 585, 588, 589, 590, 586, 584, 2315,
	576, 598, 1055, 1056, 1264, 2316, 1835, 1426, 1066, 1427,
	1244, 2269, 1067, 935, 595, 1050, 2662, 949, 969, 2658,
	951, 1016, 1072, 935, 1147, 2617, 1871, 933, 2636, 2120,
	935, 1836, 2480, 2480, 968, 1458, 1147, 1754, 1755, 1389,
	2036, 1788, 2151, 2150, 2149, 2143, 1065, 2147, 978, 2142,
	811, 2140, 1964, 1966, 968, 146, 2145, 147, 977, 2117,
	1017, 1825, 1454, 1090, 981, 2144, 2284, 2100, 1370, 975,
	1369, 1368, 950, 1455, 1366, 562, 557, 157, 975, 2494,
	2113, 1815, 2146, 2148, 2112, 1020, 1148, 1149, 162, 2413,
	162, 595, 2220, 162, 2028, 1985, 595, 1951, 595, 1659,
	1108, 1105, 1106, 1107, 1112, 1114, 1111, 1703, 1110, 2133,
	1108, 1105, 1106, 1107, 1112, 1114, 1111, 975, 1110, 1754,
	1755, 1885, 605, 1085, 605, 1447, 1284, 1871, 1213, 87,
	995, 1031, 2051, 1732, 1147, 950, 87, 1146, 605, 605,
	2611, 2390, 87, 1449, 1388, 1534, 957, 1450, 1451, 2247,
	1036, 794, 1042, 1043, 1044, 1045, 1817, 1077, 2045, 1535,
	1536, 1533, 1096, 1063, 1780, 111, 37, 2103, 974, 2560,
	87, 1467, 997, 599, 1080, 1081, 1035, 974, 146, 2214,
	147, 1019, 988, 968, 2610, 2123, 149, 990, 2123, 2256,
	2122, 991, 989, 2122, 1086, 1834, 950, 2072, 1452, 1300,
	157, 1100, 1577, 2157, 1901, 593, 1577, 1117, 2429, 1524,
	1526, 1527, 1779, 985, 1965, 2258, 974, 2428, 2564, 2386,
	1810, 1404, 968, 971, 972, 1403, 935, 984, 1387, 2253,
	965, 969, 1525, 1118, 112, 2634, 1135, 2132, 1150, 1151,
	1152, 1153, 1877, 1878, 1879, 2663, 2267, 2268, 1158, 1118,
	1161, 2414, 2254, 2522, 1118, 1285, 1778, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1144, 1143, 1145, 1146, 1444, 1135,
	1445, 87, 1227, 1087, 1446, 2461, 1232, 1694, 1695, 2427,
	2311, 1074, 1784, 1118, 2260, 1532, 1154, 724, 2302, 2303,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1143, 1145,
	1146, 162, 2635, 2467, 2433, 605, 605, 2420, 2319, 149,
	2065, 1605, 1139, 1140, 1141, 1142, 1144, 1143, 1145, 1146,
	1118, 162, 1141, 1142, 1144, 1143, 1145, 1146, 2056, 1233,
	164, 165, 166, 1887, 2421, 1247, 1264, 605, 2347, 1251,
	1828, 162, 1118, 1135, 1884, 781, 605, 1581, 164, 165,
	166, 2266, 605, 1672, 1498, 779, 1250, 1245, 164, 165,
	166, 1248, 2035, 2269, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1144, 1143, 1145, 1146, 164, 165, 166, 1464, 1800,
	1429, 820, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1143,
	1145, 1146, 1233, 1118, 1249, 1423, 1421, 1420, 95, 1597,
	1586, 1587, 1588, 1589, 1599, 1590, 1591, 1592, 1604, 1600,
	1593, 1594, 1601, 1602, 1603, 1595, 1596, 1598, 1419, 1135,
	1238, 1130, 1118, 1131, 164, 165, 166, 1075, 1798, 1134,
	1118, 1118, 164, 165, 166, 1089, 1796, 1132, 1133, 1129,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1143, 1145,
	1146, 2622, 1264, 1264, 92, 1049, 1983, 2589, 2024, 1028,
	162, 94, 1983, 2579, 1358, 93, 1051, 1118, 1025, 1983,
	2576, 2453, 2257, 2091, 1367, 2656, 2068, 77, 2657, 2000,
	2655, 975, 1742, 1171, 1099, 1172, 1118, 824, 2479, 2479,
	87, 1118, 81, 1097, 1098, 605, 1385, 100, 1118, 1433,
	1432, 1434, 1435, 1436, 1394, 2424, 2425, 1118, 1396, 1397,
	1872, 605, 1814, 86, 2213, 1252, 1115, 2090, 1402, 1890,
	86, 1405, 1406, 162, 1408, 1175, 86, 2572, 1264, 1290,
	1291, 1395, 778, 1246, 1398, 148, 98, 2559, 150, 151,
	1269, 1401, 152, 153, 92, 605, 780, 162, 1064, 154,
	155, 156, 2362, 1264, 86, 93, 1468, 1456, 1034, 2215,
	605, 1235, 162, 1118, 1118, 1382, 1987, 1373, 1374, 1375,
	1983, 2448, 2664, 1219, 1220, 1221, 1222, 1223, 162, 2024,
	974, 1399, 994, 1377, 1983, 162, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1120, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 605, 1115, 1264, 1393, 1116, 1928, 1117,
	1921, 1264, 1979, 1417, 1418, 2159, 605, 605, 1422, 2261,
	2275, 2276, 1987, 1116, 1989, 1117, 1118, 1365, 1116, 2001,
	1117, 2264, 1471, 162, 1392, 2213, 1897, 1118, 2362, 1475,
	2199, 1477, 1478, 1479, 1480, 1463, 1264, 1724, 1484, 1888,
	1384, 1380, 1379, 1400, 1274, 2275, 2274, 1116, 148, 1117,
	1496, 150, 151, 2001, 1264, 152, 153, 2530, 1264, 1921,
	2262, 1906, 154, 155, 156, 2263, 2218, 1264, 605, 1371,
	1561, 1561, 1905, 1557, 1562, 1888, 1264, 1802, 1118, 1558,
	1558, 1567, 605, 1459, 1116, 1692, 1117, 1530, 1916, 1871,
	2099, 1361, 2084, 1268, 120, 954, 953, 605, 605, 952,
	1661, 1118, 1528, 2080, 2081, 1118, 1116, 1510, 1117, 2556,
	1537, 1118, 1539, 1578, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1473, 1469, 1470, 1538,
	1620, 1118, 1118, 1983, 1982, 1118, 1453, 2345, 1264, 1292,
	1118, 1474, 1494, 1118, 1495, 1936, 1264, 1264, 1481, 1482,
	1483, 1118, 1264, 2025, 2435, 1502, 1503, 1116, 783, 1117,
	162, 1118, 959, 2027, 1118, 605, 2001, 1118, 1531, 1651,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1143, 1145,
	1146, 958, 1620, 2058, 1361, 1360, 1116, 1118, 1117, 162,
	2242, 1892, 605, 1118, 1116, 1116, 1117, 1117, 1888, 162,
	1871, 1891, 605, 2518, 1118, 2313, 2408, 162, 101, 162,
	1271, 162, 162, 605, 1118, 2509, 605, 1653, 1677, 100,
	1678, 99, 2364, 1118, 1306, 1305, 2497, 605, 1655, 1656,
	1704, 1116, 1118, 1117, 37, 95, 2431, 1118, 1743, 1363,
	1651, 2309, 1264, 2085, 1761, 101, 1760, 1440, 820, 1386,
	1116, 820, 1117, 1359, 95, 1116, 100, 1117, 99, 113,
	1652, 1563, 1116, 1707, 1117, 2439, 1683, 94, 1569, 1570,
	2001, 1116, 1500, 1117, 2025, 1409, 2063, 1021, 2360, 2353,
	1413, 2062, 605, 2519, 1871, 1781, 709, 1675, 1653, 1791,
	1792, 1793, 2398, 2399, 1795, 1797, 1799, 1736, 2646, 2644,
	2629, 2569, 605, 2535, 1735, 2401, 2404, 605, 1394, 1671,
	2289, 1394, 2288, 1394, 1757, 1758, 1759, 1888, 2287, 605,
	1654, 605, 2073, 1657, 1658, 1824, 2213, 1116, 1116, 1117,
	1117, 1699, 1989, 1856, 1685, 1718, 1770, 163, 605, 605,
	163, 1896, 1739, 163, 973, 1697, 2231, 2403, 606, 1776,
	163, 2232, 1273, 1722, 824, 2228, 1723, 824, 163, 2229,
	1682, 162, 1262, 1258, 2230, 1738, 1737, 2233, 162, 2010,
	2011, 2227, 1804, 163, 162, 162, 2619, 1259, 162, 1783,
	162, 163, 1262, 1258, 2486, 2590, 2485, 162, 1689, 1821,
	1116, 1272, 1117, 1681, 162, 606, 769, 1259, 606, 163,
	606, 1116, 2219, 1117, 1264, 2203, 1540, 2271, 2066, 116,
	1809, 1767, 1768, 1812, 1747, 1813, 1748, 1749, 1750, 1751,
	162, 1823, 1786, 1822, 1771, 605, 2352, 1794, 2041, 1782,
	1945, 983, 1762, 1763, 1764, 1765, 1944, 1807, 1826, 1827,
	1808, 1811, 1295, 1266, 1573, 1862, 1863, 2436, 2437, 2438,
	1865, 1771, 1116, 982, 1117, 964, 1943, 1942, 1574, 1866,
	1941, 2327, 92, 2062, 2126, 1940, 1088, 2088, 1939, 94,
	121, 2652, 1438, 93, 1437, 1116, 1938, 1117, 87, 1116,
	90, 1117, 1428, 2211, 1831, 1116, 1937, 1117, 2285, 1931,
	1859, 1530, 1930, 2006, 2009, 2010, 2011, 2007, 1530, 2008,
	2012, 1694, 1695, 2398, 2399, 1116, 1116, 1117, 1117, 1116,
	1855, 1117, 1929, 1881, 1116, 1883, 1117, 1116, 1926, 1117,
	2557, 2514, 2270, 101, 2014, 1116, 1686, 1117, 1849, 1925,
	1848, 1264, 1882, 1847, 100, 1116, 99, 1117, 1116, 1924,
	1117, 1116, 2202, 1117, 2379, 94, 802, 803, 1922, 1875,
	2201, 815, 99, 2542, 2440, 2441, 2442, 1918, 2541, 1869,
	2491, 1116, 1917, 1117, 1410, 1411, 1412, 1116, 1264, 1117,
	1022, 2063, 1531, 1414, 1415, 1416, 1501, 2290, 1116, 1531,
	1117, 101, 162, 1801, 1880, 976, 979, 980, 1116, 162,
	1117, 1886, 100, 986, 99, 1561, 605, 1116, 1969, 1117,
	801, 101, 605, 100, 1558, 2490, 1116, 2385, 1117, 2647,
	1987, 1116, 100, 1117, 2164, 1957, 2648, 2647, 103, 1907,
	1673, 1286, 1278, 1900, 1973, 2648, 605, 106, 107, 2006,
	2009, 2010, 2011, 2007, 162, 2008, 2012, 2492, 162, 2419,
	793, 88, 1, 2423, 1679, 1680, 1261, 1992, 1260, 2605,
	575, 1662, 785, 2034, 1236, 2630, 2601, 2602, 1430, 1424,
	2017, 1995, 1914, 1653, 1255, 1256, 1261, 2456, 1260, 1621,
	2515, 1774, 967, 127, 605, 1733, 2484, 1734, 1898, 692,
	2585, 110, 928, 109, 970, 1048, 1803, 2042, 1744, 1312,
	1310, 1311, 1980, 1309, 1314, 1313, 1908, 2365, 1504, 602,
	2013, 1238, 605, 160, 1301, 786, 1652, 1958, 162, 1279,
	992, 1967, 565, 2016, 2277, 162, 1829, 571, 1037, 1159,
	1499, 2200, 605, 2030, 821, 1981, 814, 1674, 1971, 1984,
	1997, 1394, 1394, 2037, 2580, 2039, 787, 1275, 2489, 2384,
	1899, 604, 2044, 2046, 1575, 1712, 2096, 2052, 2026, 1523,
	2078, 628, 2029, 2095, 1948, 1949, 162, 162, 162, 162,
	162, 2022, 627, 1776, 625, 1974, 1701, 1121, 712, 1961,
	1962, 1287, 2038, 2005, 2003, 2002, 162, 162, 1857, 1719,
	2400, 2396, 2597, 1714, 1710, 1978, 1977, 2057, 822, 636,
	629, 932, 162, 939, 621, 2416, 2064, 2297, 2102, 2310,
	2104, 2040, 2069, 2306, 1101, 1254, 2070, 615, 941, 2094,
	2074, 2075, 2076, 605, 1572, 2520, 1874, 1377, 2349, 1253,
	1584, 1585, 63, 41, 1612, 609, 2615, 1092, 808, 32,
	31, 30, 29, 2086, 2087, 28, 23, 22, 21, 20,
	19, 25, 18, 17, 163, 2093, 163, 16, 1561, 163,
	1561, 2152, 2625, 1561, 2651, 115, 50, 1558, 1561, 1558,
	47, 45, 1558, 779, 124, 2134, 2116, 1558, 122, 2156,
	48, 2175, 605, 2175, 44, 1023, 2175, 42, 606, 27,
	606, 2175, 2135, 2177, 2187, 2188, 2189, 2190, 26, 15,
	14, 13, 2180, 12, 606, 606, 11, 2181, 10, 2118,
	162, 9, 2136, 5, 605, 4, 605, 2194, 35, 34,
	33, 1095, 24, 2153, 2, 0, 0, 0, 0, 0,
	0, 0, 162, 162, 162, 162, 162, 0, 0, 0,
	2204, 0, 0, 2168, 162, 0, 0, 0, 0, 162,
	0, 2194, 162, 0, 162, 1992, 2221, 162, 162, 162,
	2124, 0, 2205, 2125, 0, 0, 2209, 0, 2241, 0,
	0, 0, 0, 2193, 0, 1251, 2017, 0, 2195, 2182,
	2183, 2184, 2185, 2186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2283, 0, 2206,
	0, 0, 0, 0, 162, 0, 2243, 2212, 0, 2244,
	0, 605, 2196, 2197, 2198, 0, 605, 2223, 2224, 0,
	2226, 0, 2222, 2234, 0, 2225, 0, 0, 2238, 2239,
	95, 162, 0, 0, 0, 2245, 0, 0, 2292, 0,
	0, 0, 1463, 0, 2294, 2251, 0, 0, 162, 2272,
	2273, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	2279, 2328, 2299, 2298, 2278, 0, 2280, 163, 0, 0,
	0, 606, 606, 0, 2281, 2282, 0, 0, 0, 0,
	0, 2291, 2293, 1776, 0, 0, 0, 163, 0, 0,
	2304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 163, 2320, 0,
	2325, 2326, 606, 2323, 2322, 0, 0, 0, 606, 0,
	0, 2359, 0, 2330, 0, 0, 0, 0, 0, 0,
	605, 162, 0, 2337, 0, 0, 0, 0, 0, 0,
	2331, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1992, 0,
	2391, 0, 0, 162, 37, 0, 0, 0, 0, 0,
	0, 2380, 2381, 1995, 2395, 0, 2393, 1995, 0, 0,
	0, 2422, 2387, 2389, 0, 0, 2405, 0, 0, 0,
	162, 0, 2402, 0, 2409, 0, 2411, 2412, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 162, 162,
	162, 605, 0, 0, 0, 2410, 163, 2417, 2299, 2298,
	0, 2418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 605, 605, 605, 0, 2447,
	2334, 2335, 0, 2336, 0, 0, 2338, 0, 2340, 0,
	2342, 606, 0, 0, 0, 0, 2452, 0, 0, 2450,
	2451, 0, 0, 0, 0, 0, 0, 606, 2432, 0,
	2434, 822, 0, 822, 0, 0, 0, 0, 0, 163,
	0, 0, 1561, 0, 1561, 0, 0, 1091, 1093, 0,
	0, 1558, 0, 1558, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 163, 0, 2175, 0, 2175, 0, 0,
	0, 2462, 0, 0, 0, 2472, 606, 0, 163, 2466,
	0, 0, 0, 2473, 0, 0, 2482, 0, 0, 2463,
	1561, 0, 0, 2499, 163, 0, 0, 0, 0, 1558,
	0, 163, 0, 0, 0, 0, 0, 2493, 1995, 0,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 606,
	779, 0, 0, 2501, 0, 0, 2495, 0, 0, 0,
	0, 2503, 606, 606, 779, 0, 605, 0, 0, 0,
	2500, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 0, 2511, 0, 0, 1230, 2512, 2532,
	2533, 0, 0, 1561, 605, 0, 2536, 0, 605, 605,
	0, 2517, 1558, 0, 0, 605, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 2546, 606, 0, 0, 1992, 2547, 605,
	162, 2543, 2544, 0, 0, 0, 2550, 0, 606, 0,
	0, 0, 0, 0, 1242, 1243, 0, 2558, 2555, 0,
	0, 37, 0, 606, 606, 2549, 0, 2561, 0, 0,
	2553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 605, 0, 0, 0, 0, 1282, 0, 0, 0,
	0, 0, 0, 605, 0, 822, 0, 0, 162, 605,
	2581, 1302, 0, 2584, 37, 0, 0, 0, 2593, 0,
	0, 0, 0, 0, 2596, 2517, 2586, 2614, 1970, 2604,
	2609, 1560, 723, 0, 2618, 0, 163, 1559, 0, 0,
	0, 606, 0, 2624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 1561, 0, 0,
	2642, 2637, 0, 0, 2641, 163, 1558, 2645, 606, 2643,
	2639, 0, 0, 0, 0, 163, 0, 0, 606, 2653,
	0, 0, 0, 163, 0, 163, 2659, 163, 163, 606,
	0, 0, 606, 1561, 0, 0, 2665, 0, 2667, 2668,
	2533, 2666, 1558, 606, 0, 0, 0, 0, 0, 0,
	0, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 0, 932, 0, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 0, 1230, 0, 0, 1230,
	932, 0, 0, 0, 0, 0, 1230, 0, 606, 0,
	0, 0, 0, 606, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 606, 0, 606, 0, 0,
	0, 0, 0, 158, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 606, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 141,
	0, 693, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 0, 0,
	163, 163, 0, 0, 163, 0, 163, 0, 0, 0,
	0, 0, 822, 163, 0, 0, 0, 0, 0, 0,
	163, 0, 0, 0, 0, 822, 822, 0, 0, 0,
	0, 0, 161, 0, 0, 561, 0, 0, 600, 0,
	0, 0, 0, 0, 0, 561, 163, 0, 0, 0,
	0, 606, 0, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 807, 1554, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 0, 0, 0,
	0, 1568, 0, 0, 0, 0, 0, 0, 1230, 0,
	0, 0, 0, 0, 0, 0, 1582, 1583, 0, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 158, 141, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 1376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1676, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	0, 1688, 0, 0, 0, 163, 0, 0, 0, 0,
	0, 1282, 606, 0, 822, 0, 0, 0, 606, 0,
	0, 0, 822, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 0, 138, 163, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	606, 939, 0, 0, 0, 0, 0, 0, 135, 136,
	134, 133, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 939, 0, 606, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 932, 0,
	1554, 163, 0, 0, 0, 0, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 1554, 1554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 163, 163, 163, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 163, 0, 0, 0, 0, 129, 137,
	139, 0, 0, 128, 0, 130, 131, 0, 163, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 140, 0, 606,
	0, 0, 0, 0, 1868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 146, 0,
	147, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 136, 134, 133,
	157, 0, 0, 146, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	0, 135, 136, 134, 133, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	606, 0, 606, 0, 0, 0, 0, 0, 0, 561,
	0, 561, 0, 0, 561, 0, 0, 0, 163, 163,
	163, 163, 163, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 0, 0, 0, 163, 0, 0, 163, 0,
	163, 0, 0, 163, 163, 163, 129, 137, 139, 0,
	0, 128, 0, 130, 131, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 129, 137, 139, 0, 0, 128, 0, 130, 131,
	0, 0, 0, 0, 149, 1688, 0, 0, 0, 0,
	163, 1975, 0, 0, 0, 132, 0, 606, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1230, 0, 0, 1999, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 143, 0, 0, 163, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 719, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2047, 0, 0, 0, 0, 0, 1231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2067, 0, 0, 0, 1265, 1267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1688, 0, 0, 0, 0, 606, 163, 0, 0,
	0, 0, 561, 0, 0, 782, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 606, 0, 0,
	148, 0, 792, 150, 151, 782, 0, 152, 153, 0,
	0, 0, 0, 0, 154, 155, 156, 0, 0, 163,
	0, 940, 561, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 143,
	0, 163, 1554, 0, 163, 163, 163, 606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 143, 0, 0, 0, 0, 0,
	606, 606, 606, 606, 0, 0, 1230, 0, 1230, 0,
	0, 1230, 0, 0, 0, 0, 1230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2207, 0, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	1230, 150, 151, 0, 0, 152, 153, 0, 0, 0,
	0, 0, 154, 155, 156, 0, 0, 0, 1231, 0,
	0, 1231, 0, 148, 0, 0, 150, 151, 1231, 0,
	152, 153, 0, 0, 561, 0, 0, 154, 155, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	932, 0, 0, 1230, 0, 1688, 0, 0, 0, 561,
	606, 0, 0, 0, 606, 606, 561, 0, 0, 0,
	0, 606, 0, 0, 606, 1485, 1486, 561, 561, 561,
	561, 561, 561, 561, 0, 0, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 606, 0, 1579,
	0, 0, 0, 1580, 0, 0, 0, 0, 0, 606,
	0, 0, 0, 0, 163, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 2207,
	0, 0, 0, 0, 807, 807, 0, 0, 0, 0,
	1231, 0, 0, 1230, 0, 0, 0, 0, 2392, 0,
	2394, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 1265, 1660, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 807, 1462, 807, 807, 807, 807,
	807, 0, 0, 0, 0, 1684, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1669, 0, 0, 0, 0, 0, 0, 0, 0,
	1688, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 2457, 2458, 2459, 2460, 0, 0, 0,
	561, 0, 0, 0, 0, 0, 1462, 0, 561, 1083,
	561, 1083, 561, 1721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1230, 0, 1230, 1785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 782, 1155, 1156, 1157, 0,
	1160, 0, 1162, 1163, 1164, 1165, 0, 1168, 1170, 1170,
	0, 1170, 1174, 1174, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 0, 1214, 1215, 1216, 1217, 1218, 0, 0, 0,
	0, 1174, 1174, 1174, 1174, 1174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 2539, 0, 0, 0, 2539, 2539, 561,
	0, 0, 1230, 0, 2548, 561, 561, 1688, 0, 561,
	0, 1860, 0, 0, 0, 0, 0, 0, 561, 1688,
	1240, 0, 0, 0, 0, 561, 782, 0, 1688, 0,
	782, 0, 0, 0, 0, 0, 782, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 0,
	0, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	822, 0, 1889, 0, 0, 0, 1893, 0, 1894, 1895,
	800, 0, 2594, 0, 0, 0, 0, 1903, 2599, 0,
	1904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1909, 1910, 1911, 1912,
	1913, 0, 1915, 0, 807, 0, 0, 0, 1919, 0,
	1920, 0, 2599, 0, 1923, 0, 0, 0, 0, 0,
	0, 0, 1932, 1933, 1934, 1935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1946, 1947, 0, 0, 0,
	0, 0, 0, 1952, 1953, 1954, 1955, 1956, 0, 0,
	0, 2623, 0, 0, 0, 0, 0, 0, 0, 0,
	1968, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 561, 1998, 0, 0, 1239, 0, 0,
	1669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 561,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 795, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 1083, 1083, 0, 0, 0, 0, 561,
	0, 0, 0, 0, 0, 0, 2077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 561, 561,
	561, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 2163, 0, 0,
	0, 0, 0, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2176, 0, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2191, 2192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1231, 0,
	1231, 0, 0, 1231, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 2216, 2217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2236, 2237, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 1705, 0, 0, 1713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1231, 561, 561, 561, 561, 561, 0, 0,
	0, 0, 0, 1317, 0, 2235, 0, 0, 0, 0,
	561, 0, 0, 1669, 0, 561, 0, 0, 561, 2246,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 1167,
	0, 0, 0, 0, 940, 1231, 0, 0, 0, 0,
	2329, 0, 0, 0, 0, 0, 1330, 2333, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 2343, 2344, 2346, 2348, 0, 0, 0, 0, 561,
	0, 2354, 561, 0, 2356, 2357, 2358, 0, 0, 0,
	0, 2361, 0, 0, 0, 0, 0, 2363, 0, 0,
	2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376,
	619, 0, 2377, 0, 1343, 1346, 1347, 1348, 1349, 1350,
	1351, 0, 1352, 1353, 1354, 1355, 1356, 1331, 1332, 1333,
	1334, 1315, 1316, 1344, 0, 1318, 0, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 0, 0, 1328, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 2406, 2407, 0,
	0, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1231, 0, 0, 0, 0,
	1876, 0, 0, 0, 0, 1024, 0, 1030, 0, 0,
	1032, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 561,
	561, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 2470, 0, 0, 0, 2471, 0,
	0, 0, 0, 0, 2475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1950,
	78, 39, 40, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 1231, 0, 1231, 0, 0, 0, 0, 0,
	84, 1364, 0, 0, 43, 69, 70, 0, 67, 71,
	0, 0, 0, 0, 782, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1996, 0, 79, 0, 0, 0, 0, 2513, 0,
	0, 2018, 0, 2019, 2020, 0, 0, 0, 0, 0,
	0, 0, 0, 2523, 2524, 2525, 0, 2526, 2527, 0,
	0, 2528, 0, 2529, 0, 2531, 2534, 0, 1329, 0,
	0, 0, 2538, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2554, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 2563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2568, 0, 0, 1231, 0, 2573, 0, 0, 0,
	0, 0, 2574, 2575, 0, 0, 0, 0, 0, 0,
	2577, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 561, 660, 662, 661, 671, 672, 673, 674, 675,
	676, 2508, 2504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 1520, 1521, 0,
	0, 0, 2620, 0, 0, 0, 2621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1669,
	0, 0, 0, 0, 0, 0, 0, 1565, 1566, 0,
	0, 0, 0, 0, 0, 1571, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1606, 1607, 1608, 1609, 1610, 1611, 1613, 1617, 1618, 619,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	1407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 619, 0, 0, 0, 0, 0, 1713, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1713,
	1713, 1713, 1713, 1713, 1690, 1691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 2018, 782, 0, 0,
	0, 1713, 1476, 0, 1713, 0, 0, 0, 0, 0,
	0, 1730, 0, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 667, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2296, 0, 0,
	1772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 49, 52, 51, 54, 0, 0,
	66, 0, 0, 75, 72, 0, 0, 0, 0, 0,
	1317, 0, 0, 703, 0, 653, 707, 655, 704, 705,
	0, 651, 654, 706, 0, 2332, 55, 83, 82, 0,
	0, 64, 65, 53, 0, 0, 0, 0, 0, 73,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 657, 659, 663, 664, 2505, 2506, 2507, 670, 678,
	680, 681, 679, 682, 683, 684, 687, 688, 689, 690,
	685, 686, 691, 0, 0, 0, 0, 0, 0, 57,
	58, 0, 59, 60, 61, 62, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1996, 0, 79, 0, 1996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1713, 0, 0, 0, 0, 0, 1696, 0, 0, 0,
	0, 0, 0, 2415, 1700, 0, 1706, 0, 0, 1513,
	0, 1343, 1346, 1347, 1348, 1349, 1350, 1351, 0, 1352,
	1353, 1354, 1355, 1356, 1331, 1332, 1333, 1334, 1315, 1316,
	1344, 0, 1318, 0, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 0, 0, 1328, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 0, 0, 0, 0, 1902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2483, 0, 2487, 2488,
	0, 0, 0, 0, 0, 0, 0, 0, 1996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 1840, 1345, 0, 0, 0,
	0, 1853, 1854, 1277, 0, 1858, 0, 0, 0, 0,
	0, 0, 0, 0, 1861, 0, 0, 0, 0, 0,
	0, 1864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1867, 0, 87,
	0, 0, 0, 0, 0, 713, 1560, 723, 724, 2302,
	2303, 714, 716, 0, 0, 0, 715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	725, 726, 1178, 1185, 1188, 1189, 1197, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2300, 2301, 0, 0, 0, 0,
	2578, 0, 0, 0, 0, 79, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2154, 2155, 0,
	0, 0, 2158, 0, 0, 0, 2160, 2161, 2162, 0,
	0, 0, 0, 0, 0, 0, 0, 2165, 2166, 2167,
	0, 0, 1624, 2169, 0, 2170, 2171, 0, 0, 0,
	2178, 2179, 0, 0, 0, 0, 0, 0, 1624, 1624,
	1624, 1624, 1624, 619, 619, 619, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 2021, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2210, 0,
	0, 0, 0, 0, 0, 0, 0, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2240, 0, 87, 0, 2071, 0, 0, 0, 713,
	1560, 723, 724, 2302, 2303, 714, 716, 0, 0, 0,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 725, 726, 0, 0, 0, 703,
	0, 0, 707, 0, 704, 705, 0, 0, 0, 706,
	0, 0, 0, 2107, 2108, 2109, 2110, 2111, 0, 0,
	0, 0, 0, 0, 0, 0, 1560, 723, 0, 0,
	0, 0, 1559, 1513, 2119, 0, 0, 0, 2300, 2301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2127,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 0, 0, 0, 0, 0, 0, 0, 0,
	2351, 0, 0, 0, 0, 2355, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 0, 0,
	0, 0, 0, 0, 0, 2388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2305, 0,
	0, 0, 0, 0, 0, 0, 2464, 0, 2465, 0,
	0, 0, 0, 2468, 2469, 2321, 0, 0, 2324, 0,
	0, 0, 0, 0, 0, 2474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2496,
	0, 0, 2498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2510, 0, 0, 0, 0, 0, 2383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2545, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2443, 0, 0, 2444, 2445, 2446, 0, 0,
	0, 2567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	523, 241, 0, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 1648, 0, 637, 0, 0, 0, 0, 642,
	467, 344, 0, 332, 0, 196, 1649, 400, 284, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 2562, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 649, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 644, 645,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 87, 0, 0, 164,
	165, 166, 713, 722, 723, 724, 721, 720, 714, 716,
	0, 211, 0, 715, 215, 660, 662, 661, 671, 672,
	673, 674, 675, 676, 677, 658, 718, 725, 726, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 620,
	634, 189, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 632, 805, 0, 0, 0, 697, 0, 633,
	0, 0, 641, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 643, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 696, 0, 304, 533, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 666, 667, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 703, 695, 653, 707,
	655, 704, 705, 650, 651, 654, 706, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 698, 640, 639, 0,
	646, 647, 0, 656, 657, 659, 663, 664, 665, 668,
	669, 670, 678, 680, 681, 679, 682, 683, 684, 687,
	688, 689, 690, 685, 686, 691, 638, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	637, 0, 219, 0, 0, 642, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 649, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 644, 645, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 87, 0, 0, 164, 165, 166, 713, 722,
	723, 724, 721, 720, 714, 716, 0, 211, 0, 715,
	215, 660, 662, 661, 671, 672, 673, 674, 675, 676,
	677, 658, 718, 725, 726, 383, 249, 299, 256, 248,
	496, 0, 486, 1614, 1615, 1616, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 620, 634, 189, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 632, 0,
	0, 0, 0, 697, 0, 633, 0, 0, 641, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 643, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 696, 0, 304,
	533, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 666, 667, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 703, 695, 653, 707, 655, 704, 705, 650,
	651, 654, 706, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 698, 640, 639, 0, 646, 647, 0, 656,
	657, 659, 663, 664, 665, 668, 669, 670, 678, 680,
	681, 679, 682, 683, 684, 687, 688, 689, 690, 685,
	686, 691, 638, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 78, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 637, 0, 219, 0,
	0, 642, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 649,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	644, 645, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 87, 0,
	0, 164, 165, 166, 713, 722, 723, 724, 721, 720,
	714, 716, 0, 211, 0, 715, 215, 660, 662, 661,
	671, 672, 673, 674, 675, 676, 677, 658, 718, 725,
	726, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 620, 634, 189, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 697,
	0, 633, 0, 0, 641, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 643, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 696, 0, 304, 533, 0, 0, 694,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 666, 667, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 703, 695,
	653, 707, 655, 704, 705, 650, 651, 654, 706, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 698, 640,
	639, 0, 646, 647, 0, 656, 657, 659, 663, 664,
	665, 668, 669, 670, 678, 680, 681, 679, 682, 683,
	684, 687, 688, 689, 690, 685, 686, 691, 638, 0,
	192, 334, 86, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 637, 0, 219, 0, 0, 642, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 649, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 644, 645, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 87, 0, 1264, 164, 165, 166,
	713, 722, 723, 724, 721, 720, 714, 716, 0, 211,
	0, 715, 215, 660, 662, 661, 671, 672, 673, 674,
	675, 676, 677, 658, 718, 725, 726, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 620, 634, 189,
	648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	632, 0, 0, 0, 0, 697, 0, 633, 0, 0,
	641, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 643, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 696,
	0, 304, 533, 0, 0, 694, 0, 0, 0, 0,
	0, 0, 305, 171, 198, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 666, 667, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 703, 695, 653, 707, 655, 704,
	705, 650, 651, 654, 706, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 698, 640, 639, 0, 646, 647,
	0, 656, 657, 659, 663, 664, 665, 668, 669, 670,
	678, 680, 681, 679, 682, 683, 684, 687, 688, 689,
	690, 685, 686, 691, 638, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 637, 0,
	219, 0, 0, 642, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 649, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 644, 645, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	87, 0, 0, 164, 165, 166, 713, 722, 723, 724,
	721, 720, 714, 716, 0, 211, 0, 715, 215, 660,
	662, 661, 671, 672, 673, 674, 675, 676, 677, 658,
	718, 725, 726, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 620, 634, 189, 648, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 632, 805, 0, 0,
	0, 697, 0, 633, 0, 0, 641, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 643,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 696, 0, 304, 533, 0,
	0, 694, 0, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 666,
	667, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	703, 695, 653, 707, 655, 704, 705, 650, 651, 654,
	706, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	698, 640, 639, 0, 646, 647, 0, 656, 657, 659,
	663, 664, 665, 668, 669, 670, 678, 680, 681, 679,
	682, 683, 684, 687, 688, 689, 690, 685, 686, 691,
	638, 0, 192, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 637, 0, 219, 0, 0, 642,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 649, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 644, 645,
	0, 0, 0, 0, 0, 279, 1728, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 87, 0, 0, 164,
	165, 166, 713, 722, 723, 724, 721, 720, 714, 716,
	0, 211, 0, 715, 215, 660, 662, 661, 671, 672,
	673, 674, 675, 676, 677, 658, 718, 725, 726, 1729,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 620,
	634, 189, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 697, 0, 633,
	0, 0, 641, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 643, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 696, 0, 304, 533, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 666, 667, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 703, 695, 653, 707,
	655, 704, 705, 650, 651, 654, 706, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 698, 640, 639, 0,
	646, 647, 0, 656, 657, 659, 663, 664, 665, 668,
	669, 670, 678, 680, 681, 679, 682, 683, 684, 687,
	688, 689, 690, 685, 686, 691, 638, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	637, 0, 219, 0, 0, 642, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 649, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 644, 645, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 87, 0, 0, 164, 165, 166, 713, 722,
	723, 724, 721, 720, 714, 716, 0, 211, 0, 715,
	215, 660, 662, 661, 671, 672, 673, 674, 675, 676,
	677, 658, 718, 725, 726, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 620, 634, 189, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 632, 0,
	0, 0, 0, 697, 0, 633, 0, 0, 641, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 643, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 696, 0, 304,
	533, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 666, 667, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 703, 695, 653, 707, 655, 704, 705, 650,
	651, 654, 706, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 698, 640, 639, 0, 646, 647, 0, 656,
	657, 659, 663, 664, 665, 668, 669, 670, 678, 680,
	681, 679, 682, 683, 684, 687, 688, 689, 690, 685,
	686, 691, 638, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 637, 0, 219, 0,
	0, 642, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 649,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	644, 645, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 87, 0,
	0, 164, 165, 166, 713, 722, 723, 724, 721, 720,
	714, 716, 0, 211, 0, 715, 215, 660, 662, 661,
	671, 672, 673, 674, 675, 676, 677, 658, 718, 725,
	726, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 634, 189, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 697,
	0, 633, 0, 0, 641, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 643, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 696, 0, 304, 533, 0, 0, 694,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 666, 667, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 703, 695,
	653, 707, 655, 704, 705, 650, 651, 654, 706, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 698, 640,
	639, 0, 646, 647, 0, 656, 657, 659, 663, 664,
	665, 668, 669, 670, 678, 680, 681, 679, 682, 683,
	684, 687, 688, 689, 690, 685, 686, 691, 638, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 0, 0, 0,
	342, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 0, 0, 0, 0, 917,
	905, 0, 485, 312, 523, 241, 868, 924, 871, 872,
	897, 194, 886, 893, 865, 826, 858, 832, 267, 833,
	857, 878, 0, 855, 467, 344, 0, 332, 859, 196,
	0, 400, 284, 178, 830, 834, 835, 844, 848, 850,
	851, 856, 864, 867, 870, 873, 875, 877, 880, 891,
	899, 900, 906, 907, 908, 909, 910, 912, 921, 922,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	881, 0, 884, 904, 876, 898, 847, 889, 0, 279,
	894, 920, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 164, 165, 166, 0, 2587, 0, 2588,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	892, 916, 863, 383, 249, 299, 256, 248, 496, 0,
	486, 837, 883, 915, 0, 0, 0, 918, 331, 0,
	896, 0, 829, 890, 0, 189, 838, 923, 913, 860,
	861, 0, 0, 0, 0, 0, 0, 0, 879, 885,
	0, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 846, 177, 253, 436, 828, 827, 172,
	0, 0, 0, 234, 0, 456, 911, 304, 533, 914,
	0, 295, 901, 843, 0, 0, 0, 840, 305, 171,
	198, 845, 866, 371, 902, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	210, 0, 0, 262, 0, 0, 869, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 895, 437, 214, 516, 464,
	853, 232, 849, 0, 852, 887, 888, 854, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 839, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 926, 0, 0, 538, 0, 0,
	831, 0, 0, 0, 0, 255, 862, 0, 288, 289,
	328, 0, 0, 882, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 925, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 903, 280, 0,
	0, 0, 342, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 0, 0, 0,
	0, 917, 905, 0, 485, 312, 523, 241, 868, 924,
	871, 872, 897, 194, 886, 893, 865, 826, 858, 832,
	267, 833, 857, 878, 0, 855, 467, 344, 0, 332,
	859, 196, 0, 400, 284, 178, 830, 834, 835, 844,
	848, 850, 851, 856, 864, 867, 870, 873, 875, 877,
	880, 891, 899, 900, 906, 907, 908, 909, 910, 912,
	921, 922, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 881, 0, 884, 904, 876, 898, 847, 889,
	0, 279, 894, 920, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 892, 916, 863, 383, 249, 299, 256, 248,
	496, 0, 486, 837, 883, 915, 0, 0, 0, 918,
	331, 0, 896, 0, 829, 890, 0, 189, 838, 923,
	913, 860, 861, 0, 0, 0, 0, 0, 0, 0,
	879, 885, 0, 874, 0, 0, 0, 0, 0, 2247,
	0, 0, 0, 0, 0, 0, 0, 841, 836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 846, 177, 253, 436, 828,
	827, 172, 0, 0, 0, 234, 0, 456, 911, 304,
	533, 914, 0, 295, 901, 843, 0, 0, 0, 840,
	305, 171, 198, 845, 866, 371, 902, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 210, 0, 0, 262, 0, 0, 869, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 919,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 895, 437, 214,
	516, 464, 853, 232, 849, 0, 852, 887, 888, 854,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 839, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 926, 0, 0, 538,
	0, 0, 831, 0, 0, 0, 0, 255, 862, 0,
	288, 289, 328, 0, 0, 882, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 925, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 903,
	280, 0, 0, 0, 342, 0, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 917, 905, 0, 485, 312, 523, 241,
	868, 924, 871, 872, 897, 194, 886, 893, 865, 826,
	858, 832, 267, 833, 857, 878, 0, 855, 467, 344,
	0, 332, 859, 196, 0, 400, 284, 178, 830, 834,
	835, 844, 848, 850, 851, 856, 864, 867, 870, 873,
	875, 877, 880, 891, 899, 900, 906, 907, 908, 909,
	910, 912, 921, 922, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 881, 0, 884, 904, 876, 898,
	847, 889, 0, 279, 894, 920, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 892, 916, 863, 383, 249, 299,
	256, 248, 496, 0, 486, 837, 883, 915, 0, 0,
	0, 918, 331, 0, 896, 0, 829, 890, 0, 189,
	838, 923, 913, 860, 861, 0, 0, 0, 0, 0,
	0, 0, 879, 885, 0, 874, 0, 0, 0, 0,
	0, 2208, 0, 0, 0, 0, 0, 0, 0, 841,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 846, 177, 253,
	436, 828, 827, 172, 0, 0, 0, 234, 0, 456,
	911, 304, 533, 914, 0, 295, 901, 843, 0, 0,
	0, 840, 305, 171, 198, 845, 866, 371, 902, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 210, 0, 0, 262, 0, 0,
	869, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 895,
	437, 214, 516, 464, 853, 232, 849, 0, 852, 887,
	888, 854, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 839, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 926, 0,
	0, 538, 0, 0, 831, 0, 0, 0, 0, 255,
	862, 0, 288, 289, 328, 0, 0, 882, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 925, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 903, 280, 0, 0, 0, 342, 0, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 0, 0, 0, 0, 917, 905, 0, 485, 312,
	523, 241, 868, 924, 871, 872, 897, 194, 886, 893,
	865, 826, 858, 832, 267, 833, 857, 878, 0, 855,
	467, 344, 0, 332, 859, 196, 0, 400, 284, 178,
	830, 834, 835, 844, 848, 850, 851, 856, 864, 867,
	870, 873, 875, 877, 880, 891, 899, 900, 906, 907,
	908, 909, 910, 912, 921, 922, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 881, 0, 884, 904,
	876, 898, 847, 889, 0, 279, 894, 920, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 164,
	165, 166, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 892, 916, 863, 383,
	249, 299, 256, 248, 496, 0, 486, 837, 883, 915,
	0, 0, 594, 918, 331, 0, 896, 0, 829, 890,
	0, 189, 838, 923, 913, 860, 861, 0, 0, 0,
	0, 0, 0, 0, 879, 885, 0, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 841, 836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 846,
	177, 253, 436, 828, 827, 172, 0, 0, 0, 234,
	0, 456, 911, 304, 533, 914, 0, 295, 901, 843,
	0, 0, 0, 840, 305, 171, 198, 845, 866, 371,
	902, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 927, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 210, 0, 0, 262,
	0, 0, 869, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 819, 818, 318, 339, 425,
	541, 895, 437, 214, 516, 464, 853, 232, 849, 0,
	852, 887, 888, 854, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 839, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	926, 0, 0, 538, 0, 0, 831, 0, 0, 0,
	0, 255, 862, 0, 288, 289, 328, 0, 0, 882,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	925, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 903, 280, 0, 0, 0, 342, 0,
	0, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 0, 0, 0, 0, 0, 917, 905, 0,
	485, 312, 523, 241, 868, 924, 871, 872, 897, 194,
	886, 893, 865, 826, 858, 832, 267, 833, 857, 878,
	0, 855, 467, 344, 0, 332, 859, 196, 0, 400,
	284, 178, 830, 834, 835, 844, 848, 850, 851, 856,
	864, 867, 870, 873, 875, 877, 880, 891, 899, 900,
	906, 907, 908, 909, 910, 912, 921, 922, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 881, 0,
	884, 904, 876, 898, 847, 889, 0, 279, 894, 920,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 0, 488, 0, 0, 277, 236,
	0, 0, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 892, 916,
	863, 383, 249, 299, 256, 248, 496, 0, 486, 837,
	883, 915, 0, 0, 0, 918, 331, 0, 896, 0,
	829, 890, 0, 189, 838, 923, 913, 860, 861, 0,
	0, 0, 0, 0, 0, 0, 879, 885, 0, 874,
	0, 0, 0, 0, 0, 1698, 0, 0, 0, 0,
	0, 0, 0, 841, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 846, 177, 253, 436, 828, 827, 172, 0, 0,
	0, 234, 0, 456, 911, 304, 533, 914, 0, 295,
	901, 843, 0, 0, 0, 840, 305, 171, 198, 845,
	866, 371, 902, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 210, 0,
	0, 262, 0, 0, 869, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 895, 437, 214, 516, 464, 853, 232,
	849, 0, 852, 887, 888, 854, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	839, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 926, 0, 0, 538, 0, 0, 831, 0,
	0, 0, 0, 255, 862, 0, 288, 289, 328, 0,
	0, 882, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 925, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 903, 280, 0, 0, 0,
	342, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 0, 0, 0, 0, 917,
	905, 0, 485, 312, 523, 241, 868, 924, 871, 872,
	897, 194, 886, 893, 865, 826, 858, 832, 267, 833,
	857, 878, 0, 855, 467, 344, 0, 332, 859, 196,
	0, 400, 284, 178, 830, 834, 835, 844, 848, 850,
	851, 856, 864, 867, 870, 873, 875, 877, 880, 891,
	899, 900, 906, 907, 908, 909, 910, 912, 921, 922,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	881, 0, 884, 904, 876, 898, 847, 889, 0, 279,
	894, 920, 0, 224, 0, 0, 372, 0, 265, 0,
	87, 0, 0, 164, 165, 166, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	892, 916, 863, 383, 249, 299, 256, 248, 496, 0,
	486, 837, 883, 915, 0, 0, 0, 918, 331, 0,
	896, 0, 829, 890, 0, 189, 838, 923, 913, 860,
	861, 0, 0, 0, 0, 0, 0, 0, 879, 885,
	0, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 846, 177, 253, 436, 828, 827, 172,
	0, 0, 0, 234, 0, 456, 911, 304, 533, 914,
	0, 295, 901, 843, 0, 0, 0, 840, 305, 171,
	198, 845, 866, 371, 902, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	210, 0, 0, 262, 0, 0, 869, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 895, 437, 214, 516, 464,
	853, 232, 849, 0, 852, 887, 888, 854, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 839, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 926, 0, 0, 538, 0, 0,
	831, 0, 0, 0, 0, 255, 862, 0, 288, 289,
	328, 0, 0, 882, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 925, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 903, 280, 0,
	0, 0, 342, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 0, 0, 0,
	0, 917, 905, 0, 485, 312, 523, 241, 868, 924,
	871, 872, 897, 194, 886, 893, 865, 826, 858, 832,
	267, 833, 857, 878, 0, 855, 467, 344, 0, 332,
	859, 196, 0, 400, 284, 178, 830, 834, 835, 844,
	848, 850, 851, 856, 864, 867, 870, 873, 875, 877,
	880, 891, 899, 900, 906, 907, 908, 909, 910, 912,
	921, 922, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 881, 0, 884, 904, 876, 898, 847, 889,
	0, 279, 894, 920, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 892, 916, 863, 383, 249, 299, 256, 248,
	496, 0, 486, 837, 883, 915, 0, 0, 594, 918,
	331, 0, 896, 0, 829, 890, 0, 189, 838, 923,
	913, 860, 861, 0, 0, 0, 0, 0, 0, 0,
	879, 885, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 846, 177, 253, 436, 828,
	827, 172, 0, 0, 0, 234, 0, 456, 911, 304,
	533, 914, 0, 295, 901, 843, 0, 0, 0, 840,
	305, 171, 198, 845, 866, 371, 902, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 1293, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 927,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 210, 0, 0, 262, 0, 0, 869, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 919,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 819, 818, 318, 339, 425, 541, 895, 437, 214,
	516, 464, 853, 232, 849, 0, 852, 887, 888, 854,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 839, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 926, 0, 0, 538,
	0, 0, 831, 0, 0, 0, 0, 255, 862, 0,
	288, 289, 328, 0, 0, 882, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 925, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 903,
	280, 0, 0, 0, 342, 0, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 917, 905, 0, 485, 312, 523, 241,
	868, 924, 871, 872, 897, 194, 886, 893, 865, 826,
	858, 832, 267, 833, 857, 878, 0, 855, 467, 344,
	0, 332, 859, 196, 0, 400, 284, 178, 830, 834,
	835, 844, 848, 850, 851, 856, 864, 867, 870, 873,
	875, 877, 880, 891, 899, 900, 906, 907, 908, 909,
	910, 912, 921, 922, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 881, 0, 884, 904, 876, 898,
	847, 889, 0, 279, 894, 920, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 892, 916, 863, 383, 249, 299,
	256, 248, 496, 0, 486, 837, 883, 915, 0, 0,
	594, 918, 331, 0, 896, 0, 829, 890, 0, 189,
	838, 923, 913, 860, 861, 0, 0, 0, 0, 0,
	0, 0, 879, 885, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 846, 177, 253,
	436, 828, 827, 172, 0, 0, 0, 234, 0, 456,
	911, 304, 533, 914, 0, 295, 901, 843, 0, 0,
	0, 840, 305, 171, 198, 845, 866, 371, 902, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 816, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 927, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 210, 0, 0, 262, 0, 0,
	869, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 819, 818, 318, 339, 425, 541, 895,
	437, 214, 516, 464, 853, 232, 849, 0, 852, 887,
	888, 854, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 839, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 926, 0,
	0, 538, 0, 0, 831, 0, 0, 0, 0, 255,
	862, 0, 288, 289, 328, 0, 0, 882, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 925, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 903, 280, 0, 0, 0, 342, 0, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 0, 0, 0, 0, 917, 905, 0, 485, 312,
	523, 241, 868, 924, 871, 872, 897, 194, 886, 893,
	865, 826, 858, 832, 267, 833, 857, 878, 0, 855,
	467, 344, 0, 332, 859, 196, 0, 400, 284, 178,
	830, 834, 835, 844, 848, 850, 851, 856, 864, 867,
	870, 873, 875, 877, 880, 891, 899, 900, 906, 907,
	908, 909, 910, 912, 921, 922, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 881, 0, 884, 904,
	876, 898, 847, 889, 0, 279, 894, 920, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 164,
	165, 166, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 892, 916, 863, 383,
	249, 299, 256, 248, 496, 0, 486, 837, 883, 915,
	0, 0, 0, 918, 331, 0, 896, 0, 829, 890,
	0, 189, 838, 923, 913, 860, 861, 0, 0, 0,
	0, 0, 0, 0, 879, 885, 0, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 841, 836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 846,
	177, 253, 436, 828, 827, 172, 0, 0, 0, 234,
	0, 456, 911, 304, 533, 914, 0, 295, 901, 843,
	0, 0, 0, 840, 305, 171, 198, 845, 866, 371,
	902, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 210, 0, 0, 262,
	0, 0, 869, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 895, 437, 214, 516, 464, 853, 232, 849, 0,
	852, 887, 888, 854, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 839, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	926, 0, 0, 538, 0, 0, 831, 0, 0, 0,
	0, 255, 862, 0, 288, 289, 328, 0, 0, 882,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	925, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 903, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	637, 0, 219, 0, 0, 642, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 649, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 166, 713, 722,
	723, 724, 721, 720, 714, 716, 0, 211, 0, 715,
	215, 660, 662, 661, 671, 672, 673, 674, 675, 676,
	677, 658, 718, 725, 726, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 641, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 643, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 696, 0, 304,
	533, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 666, 667, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 703, 695, 653, 707, 655, 704, 705, 650,
	651, 654, 706, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 698, 640, 639, 0, 646, 647, 0, 656,
	657, 659, 663, 664, 665, 668, 669, 670, 678, 680,
	681, 679, 682, 683, 684, 687, 688, 689, 690, 685,
	686, 691, 638, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 267, 0, 219, 0,
	0, 0, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 0, 722, 723, 0, 277, 236,
	0, 1559, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 1741, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	0, 1740, 533, 0, 0, 295, 0, 0, 971, 972,
	0, 935, 305, 171, 198, 965, 969, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	78, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 267, 0,
	219, 0, 0, 0, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	87, 0, 0, 164, 165, 166, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 86, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	1716, 0, 0, 1715, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 78, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 267, 0, 219, 0, 0, 0,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 87, 0, 1264, 164,
	165, 166, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	86, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 1118, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 1281,
	267, 0, 219, 0, 0, 0, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 1283,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 1116, 0, 1117, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 267, 0, 219, 0,
	0, 0, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 1226, 1229, 0, 0, 277, 236,
	1225, 1228, 0, 211, 0, 1224, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 935, 305, 171, 198, 933, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 267, 0,
	219, 0, 0, 0, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 1264, 164, 165, 166, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 2540, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 267, 0, 219, 0, 0, 0,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 87, 0, 0, 164,
	165, 166, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 1716, 0, 0, 1715,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	267, 0, 219, 0, 0, 0, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 177, 253, 436, 612,
	611, 172, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	610, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 1668, 267, 0, 219, 0,
	0, 0, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 0, 1670, 0, 0, 277, 236,
	0, 0, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 2595, 0, 0, 0,
	0, 0, 305, 171, 198, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 267, 0,
	219, 0, 0, 0, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 164, 165, 166, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 2540, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 267, 0, 219, 0, 0, 0,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 164,
	165, 166, 0, 1555, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	267, 0, 219, 0, 0, 0, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 2048,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 267, 0, 219, 0,
	0, 0, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 0, 488, 0, 0, 277, 236,
	0, 1976, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 87, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 305, 171, 198, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 0, 0, 0, 342, 0, 0, 0,
	260, 312, 523, 241, 1717, 0, 0, 0, 0, 194,
	219, 0, 0, 0, 0, 0, 267, 0, 404, 0,
	0, 0, 467, 344, 0, 332, 0, 196, 485, 400,
	284, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 0, 488, 0, 0, 277, 236,
	0, 0, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 305, 171, 198, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 267, 0,
	219, 0, 0, 0, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 164, 165, 166, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 1511, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 267, 0, 219, 0, 0, 0,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 1381, 0, 0, 164,
	165, 166, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	267, 0, 219, 0, 0, 1304, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 1303,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 267, 0, 219, 1288,
	0, 0, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 165, 166, 0, 488, 0, 0, 277, 236,
	0, 0, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	559, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 305, 171, 198, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 267, 0,
	219, 0, 0, 0, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 164, 165, 166, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 2600, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 267, 0, 219, 0, 0, 0,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 164,
	165, 166, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	267, 0, 219, 0, 0, 0, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 2382, 166, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 312, 523, 241, 342, 0, 0, 0, 260, 194,
	0, 0, 0, 0, 0, 0, 267, 0, 219, 0,
	0, 0, 467, 344, 0, 332, 404, 196, 0, 400,
	284, 178, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 168,
	169, 170, 175, 176, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 195, 197, 200, 201, 204, 205,
	206, 207, 208, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 164, 1972, 166, 0, 488, 0, 0, 277, 236,
	0, 0, 0, 211, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 177, 253, 436, 0, 0, 172, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 171, 198, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 209, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 199, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 174, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 480, 505,
	213, 447, 454, 435, 539, 191, 0, 474, 0, 314,
	315, 190, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 202, 530, 0, 203, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	192, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 0, 0, 0, 280, 312, 523, 241,
	342, 0, 0, 0, 260, 194, 0, 0, 0, 0,
	0, 0, 267, 0, 219, 0, 0, 0, 467, 344,
	0, 332, 404, 196, 0, 400, 284, 178, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 168, 169, 170, 175, 176,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 193,
	195, 197, 200, 201, 204, 205, 206, 207, 208, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 164, 165, 166,
	0, 1670, 0, 0, 277, 236, 0, 0, 0, 211,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 177, 253,
	436, 0, 0, 172, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 305, 171, 198, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 209, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	199, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 174, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 480, 505, 213, 447, 454, 435,
	539, 191, 0, 474, 0, 314, 315, 190, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 202, 530,
	0, 203, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 192, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 0,
	0, 0, 280, 312, 523, 241, 342, 0, 0, 0,
	260, 194, 0, 0, 0, 0, 0, 0, 267, 0,
	219, 0, 0, 0, 467, 344, 0, 332, 404, 196,
	0, 400, 284, 178, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 175, 176, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 193, 195, 197, 200, 201,
	204, 205, 206, 207, 208, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 164, 165, 166, 0, 1283, 0, 0,
	277, 236, 0, 0, 0, 211, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 177, 253, 436, 0, 0, 172,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 305, 171,
	198, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 209, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 199, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 174, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	480, 505, 213, 447, 454, 435, 539, 191, 0, 474,
	0, 314, 315, 190, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 202, 530, 0, 203, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 192, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 0, 0, 0, 280, 312,
	523, 241, 342, 0, 0, 0, 260, 194, 0, 0,
	0, 0, 0, 0, 267, 0, 219, 0, 0, 0,
	467, 344, 0, 332, 404, 196, 0, 400, 284, 178,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 168, 169, 170,
	175, 176, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 193, 195, 197, 200, 201, 204, 205, 206, 207,
	208, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 164,
	165, 166, 0, 1094, 0, 0, 277, 236, 0, 0,
	0, 211, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	177, 253, 436, 0, 0, 172, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 171, 198, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	209, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 199, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 174, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 480, 505, 213, 447,
	454, 435, 539, 191, 0, 474, 0, 314, 315, 190,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	202, 530, 0, 203, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 192, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 0, 0, 0, 280, 312, 523, 241, 342, 0,
	0, 0, 260, 194, 0, 0, 0, 0, 0, 0,
	267, 0, 219, 0, 0, 0, 467, 344, 0, 332,
	404, 196, 0, 400, 284, 178, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 169, 170, 175, 176, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 193, 195, 197,
	200, 201, 204, 205, 206, 207, 208, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 164, 165, 166, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 211, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 177, 253, 436, 0,
	0, 172, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 171, 198, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 209, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 199, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	174, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 480, 505, 213, 447, 454, 435, 539, 191,
	0, 474, 0, 314, 315, 190, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 202, 530, 0, 203,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 192, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 790, 0, 494, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 0, 0, 0, 342, 0, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 485,
}

var psqPact = [...]int{
	5142, -1000, -687, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1520, 1596, -1000, -1000,
	-1000, -1000, 1695, -1000, 307, 1011, -1000, 1519, 2766, -1000,
	41438, 72, -1000, 39846, 71, -167, 41438, -1000, -160, -1000,
	-171, 41438, -164, 28694, -1000, -1000, -607, 11654, 1360, -287,
	-290, 41438, -1000, -1000, -1000, -1000, 1674, 1230, -1000, 271,
	-1000, -1000, -1000, -1000, -1000, -1000, 46214, -1000, -1000, -1000,
	-1000, -1000, 1708, 222, 41438, -1000, 1612, 1230, -1000, 11654,
	1661, 1603, 10062, -1000, 10062, 42, -1000, -1000, 19106, -1000,
	-1000, 26306, 41438, 34266, -44, -1000, 1519, -1000, -1000, -1000,
	-211, -1000, -1000, 932, 913, -1000, -1000, 304, 211, 43,
	23, 23, 57, 1498, 1476, 331, 317, 172, -1000, 575,
	253, 253, -451, -452, -1000, -7, 253, 253, 253, -62,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 17,
	1519, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41438, -107, 41438,
	-1000, 143, 41438, 631, 631, -262, 631, 631, 631, 631,
	-163, 450, -291, -1000, -169, -49, -172, -72, 619, -133,
	-1000, -81, 619, 562, -1000, 230, -188, -1000, 631, 631,
	-1000, 17442, -149, 17442, -1000, 1514, -1000, -1000, -1000, -1000,
	573, -1000, 56, -1000, -1000, -1000, -1000, 41438, 45418, 284,
	282, -1000, -1000, -1000, -1000, -243, -1000, -1000, 657, 715,
	11654, 667, -1000, 510, 191, -1000, -1000, -1000, -1000, -1000,
	97, 12450, 12450, 12450, 12450, -1000, -1000, 632, 632, 632,
	632, 12450, 632, 20734, 632, 632, 632, 632, 11654, 632,
	632, 632, -1000, 632, 632, 632, 632, 632, 632, 632,
	632, 632, 632, 632, 632, 632, 632, 632, 632, 632,
	632, 632, 632, 632, 632, 632, 632, 632, 632, 632,
	632, 632, 632, 632, 632, 632, 632, 632, 632, 632,
	632, 632, 632, 140, 632, 632, 632, 632, 632, -1000,
	-1000, -1000, -1000, 632, 632, 632, 632, 632, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25510, -1000, 8470,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41438, -1000, 632, -141, 41438, 41438, -27, 1612, 1230, -1000,
	1674, 1654, 271, -1000, 1439, 1318, 902, 593, 1230, 844,
	41438, -1000, 962, -1000, 1168, -1000, -1000, -1000, -1000, -1000,
	1103, 11654, -1000, -1000, 1688, -1000, 24714, 138, 382, 1687,
	39050, -1000, 42, 42, 890, 18274, -335, -1000, -1000, -1000,
	280, 38254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1514, 975, 41438,
	-1000, -1000, 5206, 487, -1000, 1005, -1000, 935, -1000, 991,
	11654, 1034, 70, 487, 66, 65, 63, -1000, -378, -1000,
	-1000, -1000, -1000, -1000, -1000, 253, 253, 253, 2959, 2766,
	-1000, -1000, -1000, -1000, 37458, 487, -1000, 1001, -1000, 322,
	134, 163, 163, 487, -1000, -1000, 41438, 487, 487, 41438,
	41438, -14, -1000, -1000, -1000, -1000, 41438, 487, 319, 315,
	487, 487, 41438, 487, -1000, -1000, 1324, -1000, 1329, -1000,
	-1000, 253, 253, 553, 532, 531, 253, 530, -58, 1531,
	515, 136, 1523, 1521, 41438, 999, 41438, -1000, -97, 277,
	74, 279, 1519, 887, 55, 69, 487, 26, 26, 41438,
	-1000, 19938, -1000, -1000, 513, 11654, -1000, 627, 619, 619,
	-1000, -1000, -1000, -1000, -1000, -1000, 631, 41438, 627, -1000,
	-1000, -1000, 619, 631, 41438, 631, 631, 631, 631, 619,
	619, 619, 631, 41438, 41438, 41438, 41438, 41438, 41438, 41438,
	41438, 41438, 17442, 230, 631, -613, -1000, 489, -1000, 1338,
	-1000, -1000, -1000, -1000, -1000, 17442, 17442, -1000, -1000, -1000,
	-166, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-382, 858, 36662, -1000, -618, -620, -621, -1000, -1000, -1000,
	-624, -626, -1000, -1000, -1000, 11654, 11654, 11654, -472, -1000,
	321, 12450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 413,
	232, 12450, 12450, 12450, 1444, 12450, 12450, 12450, 12450, 12450,
	12450, 12450, 12450, 12450, 12450, 12450, 12450, 31878, 5981, 5981,
	191, 191, 191, 191, -1000, 10062, 11654, 11654, 191, -1000,
	487, 35866, 10062, 10062, 11654, 1500, 291, 715, 41438, -1000,
	593, -1000, -1000, -1000, 476, -1000, 41438, 41438, 210, 11654,
	11654, 11654, 11654, 11654, 11654, 7674, 11654, 11654, 11654, 11654,
	11654, 11654, 11654, 11654, 11654, 11654, 11654, 11654, 11654, 11654,
	11654, 11654, 11654, 11654, 11654, 11654, 11654, 11654, 11654, 11654,
	11654, 11654, 6878, 19938, 10062, 10062, 10062, 10062, 10062, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 111, 1281, 992, 745, -1000, 851, -1000, -463, 29490,
	11654, 488, 1686, 1048, 41438, -1000, -1000, -1000, 1612, -1000,
	1612, 1281, 1419, 1172, 10062, -1000, -1000, 1419, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 593, -1000, 41438, 844,
	1581, 41438, 1164, 11654, 11654, 836, -1000, 720, 41438, -1000,
	-1000, 44622, -1000, -1000, 16610, -1000, 41438, 278, 41438, -1000,
	27898, 35070, 15778, -335, -1000, 15778, 788, -1000, -314, -318,
	10858, 190, -1000, -1000, -1000, 304, 22326, 622, 190, -230,
	-1000, -1000, -1000, 991, -1000, 991, 991, 991, 991, -9,
	-9, -9, -9, -1000, -1000, -1000, -1000, -1000, 998, 996,
	-1000, 991, 991, 991, 991, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15, -1000, 11654,
	-78, 34266, 1554, 415, 897, -97, 32, 1046, 487, 487,
	487, 32, -1000, 571, 563, 514, 1644, -1000, -1000, 828,
	-1000, 41438, -131, -1000, -2, -1000, 34266, 487, 314, 163,
	487, -1000, 487, -1000, -1000, 519, -125, -545, 41438, -131,
	31878, -1000, -1000, -1000, 487, -1000, -1000, -1000, 54, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31878, 31878, -1000,
	-1000, -1000, 475, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -682,
	41438, -1000, -104, 276, -40, -15, -71, 41438, -148, 1590,
	1587, 1585, -96, 41438, 41438, 26, 1095, 41438, 1544, 41438,
	-1000, -1000, -1000, -1000, -1000, 715, 41438, -1000, -1000, 631,
	631, -1000, -1000, 41438, 631, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 631, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41438,
	-1000, -1000, -1000, -1000, 41438, -1000, -1000, -1000, -1000, -1000,
	-233, -313, 268, -1000, -1000, -1000, -1000, 1607, -1000, 715,
	297, -1000, 632, -1000, -1000, 354, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 413, 12450, 12450, 12450, 434, 93, 360,
	413, 850, 451, 379, 379, 387, 387, 197, 197, 197,
	197, 197, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 468, -1000, 826, -1000, 964, 952, 593, -1000, 826,
	826, 1092, 10062, -1000, -1000, 287, -1000, 11654, 593, -1000,
	-1000, 593, 823, 812, 1685, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 715, 897, 897, 897,
	897, 897, 11654, 1154, -1000, -1000, -1000, 1313, 1308, 593,
	657, 593, 810, -1000, 1299, 897, 1290, 1280, 1269, 749,
	1263, 1243, 1240, 897, 897, 897, 896, 1237, 1227, 1219,
	1216, 1211, 1208, 1207, 1187, 1181, 897, 593, 10062, 10062,
	790, 632, 109, -1000, 826, 593, 593, 826, 826, 19938,
	-1000, 41438, -1000, -599, -1000, -328, 206, -1000, 43826, -1000,
	-1000, 593, -1000, 2266, -1000, 43030, -1000, -1000, -1000, -1000,
	-1000, 33470, 1068, 1419, -1000, -1000, 632, 884, -1000, -1000,
	715, 715, 11654, -1000, -1000, -1000, -1000, -1000, -1000, 107,
	1675, 1094, 41438, 632, -1000, 23918, -1000, 917, 1401, -1000,
	-1000, -1000, 1579, 23122, -1000, 632, 632, 41438, 1035, 914,
	-1000, 106, -1000, 788, -335, -326, -1000, -1000, -1000, -1000,
	715, -1000, 497, -1000, 181, -1000, 8, -1000, -1000, -1000,
	-1000, -1000, -1000, 1468, -250, -1000, -1000, -1000, -91, -9,
	-1000, -1000, -1000, 32674, 188, 188, -223, -1000, -1000, -1000,
	463, 463, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 933, 1328, -78, -1000, -1000, 445, -1000, -1000,
	1449, 41438, -1000, -1000, 616, 1554, -104, 41438, 286, 1084,
	-1000, 1046, 1046, 1046, 41438, -1000, -1000, -1000, -1000, -1000,
	-1000, 41438, 2934, 854, -1000, -135, -1000, -1000, 842, 995,
	487, 487, -1000, -1000, 1516, 183, -1000, -1000, -491, -1000,
	-1000, -131, -135, 190, -1000, 487, -1000, -1000, -1000, -1000,
	-674, 840, 61, -127, -18, 41438, 41438, 41438, 41438, 41438,
	87, -1000, -1000, -1000, -1000, -147, -1000, -1000, -147, -1000,
	-1000, -1000, -1000, 52, -1000, 41438, 41438, 170, -1000, -1000,
	-1000, 619, -1000, -1000, 619, -1000, -1000, -1000, -1000, -1000,
	1511, 41438, -322, -650, -1000, -646, 11654, -1000, -1000, -1000,
	-1000, 327, 81, 360, 12450, 12450, -1000, -1000, 10062, -413,
	-51, -51, 31878, -1000, -1000, -1000, 11654, 11654, 949, 285,
	-1000, 11654, 699, -1000, -1000, 11654, 11654, 11654, 593, -1000,
	-1000, -1000, -1000, -1000, 1680, -1000, 11654, 11654, 11654, -1000,
	-1000, 11654, 11654, -1000, 11654, 11654, 21530, 593, 21530, 11654,
	11654, 21530, -1000, -1000, -1000, -1000, 21530, 11654, 11654, 11654,
	11654, 11654, 11654, 11654, 11654, 11654, -1000, -1000, 826, 826,
	10062, 19938, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 206, -1000, 163, 163, 163, -1000, -1000, -1000,
	-1000, -1000, -1000, 781, 1608, -1000, 1186, 1675, -1000, 27898,
	1419, -1000, -1000, 41438, -1000, 14946, 1612, 11654, -1000, 1533,
	776, -1000, 260, 700, -1000, -1000, 9266, 817, 1183, 104,
	41438, 27898, 27898, 27898, 27898, 27898, -1000, 1143, 1127, -1000,
	1131, 1118, 1139, 41438, -1000, 804, 593, 1654, 23122, 271,
	11654, 29490, 951, 27898, -1000, -1000, 27898, 41438, 14114, -1000,
	-1000, -325, -343, -1000, -1000, -1000, 304, -1000, -1000, 341,
	1577, 1446, -1000, -1000, -1000, -1000, -1000, 188, 188, -1000,
	-1000, -1000, -1000, -1000, -1000, 796, -1000, 761, -125, -1000,
	1033, 1510, 253, 253, -1000, -1000, 487, -1000, -1000, -1000,
	60, -1000, 1542, 41438, 1080, 1074, 1072, -1000, 725, 1638,
	41438, -1000, -1000, 41438, -78, 41438, -1000, -1000, -1000, 5925,
	-1000, -1000, -1000, -135, -1000, -1000, -1000, -1000, -1000, -1000,
	41438, -103, -1000, 993, 418, -1000, -1000, 966, -1000, -1000,
	-1000, -1000, -132, -41, -161, 443, -161, 41438, 167, 1328,
	41438, -1000, -1000, -1000, 631, 631, -1000, -1000, 1508, -1000,
	487, 897, 12450, 12450, -1000, 191, -1000, 632, 593, 991,
	991, -1000, 991, -1000, -1000, 991, -198, 991, -203, 991,
	-1000, -1000, 593, 593, 888, 786, -385, -1000, 715, 11654,
	1177, 1030, 897, -1000, 11654, 897, 897, 897, -1000, 715,
	749, 1029, 693, -1000, -1000, -1000, -1000, 779, 897, 973,
	-592, 593, 751, 751, 751, 751, 751, 745, 745, 745,
	745, -1000, -1000, 593, -1000, -1000, 1602, 1602, 1602, 42234,
	41438, -1000, -1000, -1000, 1671, 770, -1000, -1000, -1000, -1000,
	715, 313, -1000, 41438, 11654, 632, -1000, 312, 41438, 632,
	41438, 1077, 1401, 1054, 1067, 1265, -1000, -1000, -1000, -1000,
	1119, -1000, 1078, -1000, -1000, 962, -1000, -1000, 992, 593,
	957, 1675, 27898, 1021, 1021, -1000, 101, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 363, 5641, 1707, -1000, 442, -1000,
	469, 142, 412, -1000, -1000, -1000, 311, 302, -1000, 41438,
	988, -1000, -1000, -1000, -9, 439, -9, -1000, -1000, -1000,
	-1000, 1203, 1314, -1000, 41438, -1000, -1000, 41438, 41438, 41438,
	41438, -1000, -1000, -1000, 711, -1000, 11654, -1000, -1000, -1000,
	420, 420, -1000, -1000, -1000, 962, -1000, -1000, -1000, 611,
	-1000, -1000, -427, 41438, 41438, 41438, 41438, -1000, 406, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 191, 12450, -1000, -1000, -9, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11654, -1000, 11654, -1000, 1612,
	438, 715, 11654, 11654, -1000, 897, -1000, -1000, -1000, 593,
	21530, -1000, 21530, -1000, 11654, 144, -51, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 632, 1448,
	632, 632, -1000, -1000, 1668, 1621, 1705, -1000, 715, -1000,
	632, -1000, 91, 700, -1000, 1665, -1000, -1000, 11654, 978,
	-1000, 11654, -1000, -1000, -1000, -1000, -1000, -1000, 5981, 1665,
	1021, -1000, -1000, 214, -1000, 11654, -1000, -1000, -1000, 4975,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	967, 11654, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 962, -1000, -1000, -1000, 725, -11, 897,
	-1000, -1000, 1576, -1000, -1000, 19938, -1000, -1000, 955, 1044,
	-1000, -1000, 11, -1000, 897, 897, 593, -1000, 897, 897,
	-1000, -1000, 693, -1000, 808, -1000, 144, 593, 1065, -1000,
	-1000, 5981, -1000, 27102, -1000, 1619, 1614, 31082, 31082, -1000,
	11654, 11654, 41438, 700, 41438, 1612, 715, 41438, 715, -263,
	1612, -1000, 897, -1000, 632, 632, 632, 632, 632, 41438,
	859, 1575, -1000, -1000, 271, 678, -1000, 250, 41438, 41438,
	593, -22, -432, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11654, -1000, 593, 1063, -1000, -532, -1000, 668, -1000, -1000,
	-1000, -1000, -1000, 668, 668, 715, 657, 655, -1000, -1000,
	610, 593, 632, -1000, -1000, 603, -1000, 271, -423, 19938,
	13282, 597, -1000, -1000, 1161, -420, -443, 749, -1000, -637,
	-1000, -1000, 30286, -1000, -1000, -1000, -1000, 29490, 40642, -411,
	-150, -423, -1000, -315, -1000, -1000, -1000, -1000, -1000, 966,
	-1000, 1152, -1000, 593, -1000, -1000, -1000, 592, -1000, 4399,
	-525, 1062, -1000, -398, -1000, -1000, -1000, 347, 437, -1000,
	-1000, -1000, -1000, -1000, -1000, 13, -1000, -1000, -427, -428,
	-1000, -1000, 40642, -520, 190, 5981, -1000, 1061, 1060, 1684,
	-1000, -1000, -1000, -1000, -1000, -1000, -124, -1000, -441, -1000,
	-1000, 1525, -263, -1000, 1693, -1000, 1676, 457, 457, -1000,
	-447, -555, -1000, -1000, -1000, -1000, -1000, -1, 684, -1000,
	-1000, 5981, -1000, -1000, -1000, 145, 145, -1000, -1000,
}

var psqPgo = [...]int{
	0, 1994, 26, 79, 227, 22, 224, 110, 1992, 1991,
	1990, 1989, 1988, 1985, 1983, 354, 353, 344, 1981, 1978,
	1976, 1973, 1971, 1970, 1969, 1968, 1959, 1957, 337, 145,
	219, 1955, 1954, 1950, 94, 161, 74, 69, 162, 1948,
	1944, 63, 1941, 1940, 1936, 156, 153, 152, 1489, 1935,
	151, 103, 1934, 1932, 1927, 1923, 1922, 1921, 1920, 1919,
	1918, 1917, 1916, 1915, 1912, 1911, 1910, 1909, 201, 1908,
	1907, 15, 1906, 65, 1905, 1904, 1903, 1902, 1901, 1900,
	1899, 1898, 128, 1896, 1896, 1895, 1894, 221, 1888, 1887,
	185, 92, 93, 1885, 1884, 88, 155, 1883, 99, 1881,
	1880, 1879, 136, 1878, 4230, 1877, 45, 43, 1875, 58,
	76, 42, 38, 10, 4, 1874, 1870, 41, 60, 1869,
	1866, 52, 1865, 90, 84, 1864, 1863, 17, 6, 1862,
	2, 5, 3, 46, 1861, 1860, 123, 1859, 1858, 1855,
	80, 1854, 1853, 4467, 1851, 77, 119, 85, 53, 1850,
	1849, 32, 1848, 1847, 1846, 1845, 1844, 31, 1842, 1831,
	1829, 130, 21, 148, 36, 37, 47, 118, 1825, 24,
	66, 1824, 127, 129, 1820, 1819, 1818, 50, 1817, 44,
	116, 96, 49, 82, 1815, 1814, 1814, 1814, 1814, 1814,
	1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1523, 220,
	1810, 28, 1808, 30, 33, 1807, 86, 25, 1806, 141,
	1804, 48, 140, 107, 142, 1803, 1801, 1800, 1799, 186,
	1798, 1797, 1796, 55, 150, 134, 135, 75, 1794, 379,
	1792, 1790, 83, 1366, 1759, 35, 143, 1789, 1784, 2801,
	126, 122, 16, 1783, 168, 1780, 1779, 1778, 261, 149,
	100, 1522, 39, 1777, 1776, 13, 1775, 1774, 1773, 1771,
	1770, 1769, 180, 339, 73, 9, 71, 137, 59, 1768,
	1767, 1767, 105, 70, 1766, 139, 138, 115, 117, 1765,
	157, 131, 102, 1764, 81, 1763, 1762, 1761, 1760, 78,
	1757, 1755, 1753, 1752, 147, 133, 101, 68, 1751, 67,
	98, 132, 146, 23, 1750, 12, 40, 34, 20, 91,
	111, 1749, 0, 1747, 14, 154, 370, 1535, 1739, 1738,
	7, 8, 11, 1737, 1736, 1735, 1734, 125, 1731, 1730,
	1729, 1723, 19, 29, 18, 1, 97, 61, 1722, 1721,
	3497, 2758, 108, 1698, 301,
}

//line psql.y:6498
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 338, 339, 339, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 312, 312,
	312, 315, 315, 26, 63, 28, 28, 27, 27, 30,
	30, 29, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 7, 7, 7, 13, 14, 6, 15, 15,
	76, 76, 16, 17, 17, 17, 17, 342, 342, 138,
	138, 136, 136, 137, 137, 18, 19, 19, 214, 214,
	213, 213, 213, 215, 215, 215, 215, 251, 251, 20,
	20, 20, 20, 20, 88, 88, 314, 314, 313, 305,
	305, 304, 304, 303, 311, 311, 310, 310, 309, 32,
	33, 42, 42, 42, 42, 43, 44, 316, 316, 285,
	49, 49, 48, 48, 48, 48, 48, 48, 50, 50,
	46, 46, 45, 45, 47, 47, 287, 287, 274, 274,
	286, 286, 286, 286, 286, 286, 286, 273, 273, 99,
	99, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 331, 331, 331, 330,
	330, 185, 185, 185, 185, 185, 185, 185, 185, 108,
	108, 117, 117, 117, 117, 117, 106, 106, 107, 105,
	105, 105, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 116, 116, 112, 112,
	112, 113, 113, 113, 114, 114, 332, 332, 332, 332,
	255, 255, 255, 255, 258, 258, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 257, 257, 257, 257, 257,
	259, 259, 259, 259, 259, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 261, 261, 261, 261, 261, 261, 261, 261, 272,
	272, 262, 262, 267, 268, 269, 269, 269, 270, 270,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 266,
	266, 265, 265, 265, 275, 299, 299, 298, 298, 296,
	296, 296, 296, 296, 284, 284, 293, 293, 293, 293,
	293, 283, 283, 279, 279, 279, 280, 280, 281, 281,
	278, 278, 282, 282, 295, 295, 294, 294, 276, 276,
	277, 277, 301, 333, 333, 333, 333, 333, 334, 334,
	302, 323, 325, 325, 325, 324, 324, 321, 322, 320,
	320, 320, 320, 320, 73, 73, 73, 227, 227, 228,
	228, 291, 291, 290, 290, 290, 292, 292, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 222, 222, 222, 319, 319, 319, 319,
	319, 319, 318, 318, 318, 288, 288, 288, 317, 317,
	51, 51, 170, 170, 336, 336, 337, 337, 39, 39,
	39, 39, 39, 39, 38, 38, 38, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 40, 40, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 126,
	128, 129, 129, 127, 127, 127, 127, 127, 127, 53,
	53, 52, 52, 131, 130, 132, 132, 132, 271, 271,
	271, 84, 84, 22, 31, 31, 23, 23, 23, 23,
	24, 24, 54, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 221, 221, 230, 230, 220, 220, 244, 244,
	244, 223, 223, 223, 224, 224, 329, 329, 329, 217,
	217, 56, 56, 56, 58, 58, 59, 60, 60, 246,
	246, 247, 247, 61, 62, 74, 74, 74, 74, 74,
	74, 74, 77, 77, 77, 9, 9, 9, 9, 70,
	70, 70, 8, 8, 57, 57, 64, 326, 326, 327,
	328, 328, 328, 328, 65, 67, 25, 25, 25, 25,
	25, 25, 94, 94, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 89, 89, 89, 83, 83,
	343, 68, 69, 69, 87, 87, 87, 80, 80, 80,
	86, 86, 86, 10, 10, 11, 205, 205, 12, 12,
	91, 91, 93, 93, 93, 93, 93, 95, 95, 95,
	95, 95, 95, 95, 90, 90, 92, 92, 92, 92,
	237, 237, 237, 236, 236, 120, 120, 122, 121, 121,
	123, 123, 124, 124, 124, 124, 168, 168, 146, 203,
	203, 201, 201, 202, 202, 204, 204, 204, 204, 125,
	125, 125, 125, 133, 133, 134, 134, 135, 135, 245,
	245, 242, 242, 242, 241, 241, 139, 139, 139, 141,
	140, 140, 140, 140, 142, 142, 144, 144, 143, 143,
	145, 150, 150, 149, 149, 147, 147, 147, 147, 148,
	148, 148, 148, 151, 151, 104, 104, 104, 104, 104,
	104, 115, 115, 115, 115, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 75, 75, 75, 218, 218, 152, 152,
	160, 160, 160, 160, 153, 153, 153, 153, 153, 153,
	153, 161, 161, 161, 167, 162, 162, 158, 158, 158,
	158, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 253,
	253, 308, 308, 307, 307, 306, 306, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 344, 344,
	263, 263, 263, 159, 159, 159, 159, 159, 85, 85,
	85, 85, 85, 250, 250, 250, 254, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 173, 173, 81, 81, 171, 171, 172, 174,
	174, 169, 169, 169, 155, 155, 175, 175, 176, 176,
	177, 177, 179, 178, 178, 180, 181, 181, 181, 182,
	182, 183, 183, 183, 41, 41, 41, 41, 41, 36,
	36, 36, 36, 37, 37, 37, 37, 96, 96, 96,
	96, 98, 98, 97, 97, 71, 71, 72, 72, 72,
	102, 102, 103, 103, 103, 100, 100, 101, 101, 198,
	198, 199, 190, 190, 190, 186, 186, 188, 188, 188,
	189, 189, 189, 187, 195, 195, 197, 197, 196, 196,
	192, 192, 193, 193, 194, 194, 194, 191, 191, 154,
	154, 154, 154, 154, 200, 200, 200, 200, 206, 206,
	164, 164, 166, 166, 165, 119, 207, 207, 211, 208,
	208, 212, 212, 212, 212, 212, 209, 209, 210, 210,
	238, 238, 238, 216, 216, 229, 229, 225, 225, 226,
	226, 219, 219, 231, 231, 231, 66, 163, 163, 300,
	300, 297, 234, 234, 235, 235, 239, 239, 243, 243,
	240, 240, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 340, 341, 248, 249, 249, 249,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 2, 5, 7, 8, 6, 7,
	1, 1, 10, 10, 9, 8, 8, 1, 1, 1,
	3, 1, 3, 1, 3, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 6, 12, 2, 0, 2, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 1, 1, 3, 3, 6,
	4, 7, 8, 8, 8, 6, 3, 1, 1, 4,
	0, 1, 1, 1, 1, 2, 2, 2, 0, 1,
	4, 4, 4, 4, 4, 4, 2, 4, 1, 3,
	1, 1, 3, 4, 3, 3, 3, 5, 10, 0,
	2, 0, 2, 3, 5, 3, 4, 2, 3, 2,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 5,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 0, 0, 1, 1, 0, 1,
	0, 3, 3, 2, 2, 2, 1, 2, 2, 0,
	1, 0, 2, 2, 5, 0, 1, 1, 2, 1,
	2, 1, 1, 3, 0, 1, 4, 3, 3, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 1, 3, 3, 4, 3, 1,
	3, 1, 7, 6, 7, 7, 8, 8, 0, 1,
	5, 2, 1, 1, 1, 0, 1, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 1, 1, 2, 0,
	1, 0, 1, 1, 3, 2, 1, 2, 4, 4,
	3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 2, 0, 2, 0, 2, 0, 1,
	5, 1, 3, 7, 1, 3, 3, 1, 2, 2,
	2, 5, 5, 5, 6, 8, 5, 5, 4, 4,
	4, 6, 5, 5, 2, 2, 2, 2, 3, 3,
	3, 4, 3, 3, 1, 3, 5, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	11, 3, 8, 6, 6, 6, 13, 8, 6, 10,
	5, 5, 5, 5, 5, 7, 7, 5, 5, 8,
	4, 1, 3, 3, 6, 7, 7, 8, 4, 0,
	1, 0, 1, 3, 3, 1, 1, 2, 0, 2,
	2, 1, 3, 3, 3, 5, 7, 7, 6, 5,
	3, 2, 3, 3, 3, 7, 3, 3, 3, 3,
	4, 7, 5, 2, 4, 4, 4, 4, 4, 5,
	5, 4, 4, 4, 4, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 2, 3, 3, 3, 5,
	2, 3, 3, 2, 3, 4, 4, 4, 4, 4,
	5, 3, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 1,
	1, 2, 1, 3, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 4, 3, 3, 6, 4,
	7, 6, 1, 3, 2, 2, 2, 1, 1, 1,
	3, 2, 1, 1, 1, 0, 1, 1, 0, 3,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 5, 5, 4, 0, 2, 4, 4,
	0, 1, 0, 1, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 3, 1, 3, 4, 3, 0,
	3, 1, 3, 1, 3, 1, 1, 3, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 1, 1, 2, 6, 5, 6, 6, 0,
	2, 3, 3, 0, 2, 3, 3, 2, 3, 1,
	6, 3, 4, 3, 1, 3, 4, 5, 6, 3,
	4, 5, 6, 3, 4, 1, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 3, 1, 1, 2, 2, 2,
	2, 1, 1, 2, 9, 6, 6, 6, 2, 2,
	3, 3, 3, 1, 1, 1, 0, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 5, 5,
	6, 4, 4, 8, 6, 8, 6, 8, 5, 4,
	2, 2, 1, 2, 2, 2, 8, 8, 6, 5,
	4, 4, 4, 4, 4, 7, 4, 6, 6, 6,
	4, 4, 4, 7, 8, 6, 5, 6, 8, 11,
	7, 8, 8, 9, 4, 4, 4, 4, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
	2, 0, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 2, 3, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 1, 0, 2, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 2,
	1, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 2, 0, 3, 0, 2,
	0, 1, 3, 1, 3, 2, 0, 1, 1, 0,
	1, 2, 4, 4, 0, 2, 2, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 3, 3,
	3, 0, 3, 1, 1, 0, 4, 0, 1, 1,
	0, 3, 1, 3, 2, 1, 1, 0, 1, 2,
	4, 2, 0, 3, 3, 0, 1, 0, 2, 2,
	0, 2, 2, 2, 0, 2, 1, 2, 3, 3,
	0, 2, 1, 2, 3, 4, 3, 0, 1, 2,
	1, 5, 4, 4, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 0,
	3, 0, 1, 0, 1, 1, 5, 0, 1, 0,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -338, -1, -5, -13, -14, -15, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -54, -55, -56, -58,
	-59, -60, -61, -62, -8, -57, -25, -26, -63, -64,
	-65, -66, -67, -10, -11, -12, -3, -2, -7, 9,
	10, -76, -27, 32, -32, -42, 461, -43, -33, 462,
	-44, 464, 463, 501, 465, 494, 316, 547, 548, 550,
	551, 552, 553, -77, 499, 500, 468, 36, 172, 33,
	34, 37, 472, 507, 508, 471, -4, -28, 8, -340,
	11, 678, 496, 495, 28, -6, 712, 328, -339, 845,
	-198, -199, 22, 33, 29, -183, -179, -87, -199, 20,
	18, 7, -68, -343, -68, -68, 12, 13, -68, -285,
	-287, 328, 397, 328, -68, -49, -48, -46, -45, -47,
	-50, 31, -39, -38, -40, -34, -35, -292, 467, 462,
	469, 470, 679, 365, 364, 362, 363, 463, 317, 464,
	323, 33, 712, 715, -289, -50, 344, 346, 824, 475,
	827, 828, 831, 832, 838, 839, 840, 366, 7, -68,
	-243, -239, -312, -233, 331, 332, 333, 68, 69, 70,
	71, 487, 467, 744, 536, 72, 73, 462, 41, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 547, 383,
	561, 555, 710, 83, 19, 84, 37, 85, 488, 524,
	86, 87, 572, 575, 88, 89, 90, 91, 92, 502,
	608, 343, 93, 550, 645, 346, 94, 95, 96, 824,
	97, 98, 99, 100, 321, 101, 111, 112, 113, 114,
	115, 116, 649, 659, 471, 117, 339, 118, 119, 120,
	525, 13, 121, 122, 123, 124, 125, 126, 365, 362,
	127, 128, 564, 463, 129, 723, 364, 130, 131, 589,
	814, 498, 611, 753, 132, 326, 508, 26, 496, 133,
	134, 135, 357, 136, 137, 138, 535, 338, 754, 317,
	806, 139, 615, 140, 40, 637, 141, 142, 726, 727,
	143, 110, 144, 664, 145, 479, 146, 147, 148, 363,
	149, 150, 151, 152, 475, 486, 153, 154, 155, 156,
	157, 158, 11, 159, 559, 560, 457, 533, 639, 586,
	691, 160, 161, 692, 162, 163, 164, 165, 728, 356,
	166, 376, 35, 167, 711, 168, 537, 169, 170, 640,
	171, 172, 810, 173, 33, 761, 174, 175, 708, 176,
	177, 509, 530, 178, 179, 669, 180, 304, 672, 181,
	519, 636, 182, 577, 766, 183, 301, 184, 185, 186,
	187, 491, 324, 188, 189, 190, 191, 768, 192, 769,
	567, 193, 735, 361, 194, 771, 195, 196, 526, 197,
	773, 775, 198, 736, 199, 200, 201, 202, 203, 204,
	39, 776, 510, 205, 832, 777, 206, 207, 208, 209,
	780, 210, 507, 211, 212, 213, 620, 214, 514, 215,
	216, 217, 218, 219, 220, 641, 563, 221, 222, 739,
	223, 224, 225, 226, 227, 553, 464, 644, 678, 228,
	229, 788, 493, 230, 231, 232, 791, 551, 233, 234,
	235, 236, 237, 238, 552, 239, 473, 622, 240, 241,
	674, 534, 529, 242, 647, 243, 638, 32, 244, 245,
	303, 494, 797, 798, 557, 246, 247, 527, 248, 249,
	548, 250, 251, 252, 253, 842, 368, 254, 335, 255,
	256, 682, 257, 258, 741, 623, 366, 259, 260, 261,
	531, 578, 801, 568, 569, 549, 262, 263, 515, 690,
	501, 264, 265, 266, 267, 802, 646, 268, 269, 270,
	271, 272, 273, 12, 274, 275, 276, 277, 302, 299,
	573, 278, 279, 476, 280, 281, 282, 283, 715, 554,
	284, 642, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 571, 297, 298, 474, -68, 474,
	-143, -239, 474, -209, 607, -230, 609, 622, 617, 627,
	615, -221, 618, 620, 514, -329, 637, 474, 624, 461,
	619, 628, 629, 538, 635, 630, 634, 523, 631, 632,
	633, -312, 414, 842, 374, 575, 614, 612, 638, 810,
	-239, 549, -246, 554, -234, -312, -233, 552, -143, -74,
	806, 466, 465, -248, -248, -89, 810, 812, -162, -104,
	381, -115, -118, -109, -110, -156, -157, -158, -159, -116,
	-169, 403, 404, 411, 382, -167, -119, 26, 708, 680,
	679, 414, 31, 457, 310, 311, 682, 683, 384, 299,
	655, 656, -117, 650, 657, 652, 685, 686, 357, 687,
	347, 349, 348, 688, 689, 690, 587, 588, 691, 692,
	693, 350, 351, 352, 353, 354, 355, 356, 694, 697,
	695, 696, 698, 699, 700, 705, 706, 701, 702, 703,
	704, 707, -234, -239, 479, 649, 473, 409, 678, -111,
	-107, -2, -165, 648, 653, 654, 658, 651, -312, -233,
	-113, -112, -152, 334, 340, 345, 341, -335, 358, -340,
	339, 338, 335, 336, 337, 359, 360, 415, 416, 417,
	418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 116,
	623, 623, -143, -68, -68, -68, -68, -177, -87, -179,
	-4, -2, -340, 8, -68, -2, -3, -7, -28, -30,
	739, -29, -239, 12, 399, -143, -182, -183, -6, -2,
	-104, 19, 23, 24, -92, 405, -104, -239, -69, -92,
	-219, 478, -68, -68, -208, -251, 549, -212, 638, 637,
	-235, -210, -234, -232, -209, 636, 23, 466, 465, 380,
	42, 718, 25, 27, 43, 44, 414, 369, 384, 680,
	485, 413, 607, 481, 45, 489, 461, 314, 46, 650,
	47, 48, 652, 648, 655, 31, 49, 28, 24, 36,
	387, 388, 724, 360, 50, 22, 490, 51, 14, 614,
	52, 16, 17, 53, 399, 54, 312, 55, 29, 396,
	56, 308, 731, 370, 310, 397, 20, 653, 654, 315,
	381, 57, 358, 21, 318, 643, 378, 18, 313, 58,
	59, 480, 492, 805, 311, 8, 60, 61, 62, 63,
	64, 474, 65, 386, 477, 371, 359, 7, 375, 625,
	319, 66, 67, 385, 15, 742, 712, 575, -286, 397,
	-273, -277, -234, 489, -302, 485, -143, -295, -294, -234,
	-340, -88, -229, 475, 483, 482, 375, -316, 378, 531,
	649, 473, -45, -46, -47, -209, 413, 827, 329, 329,
	-289, -277, -276, -275, -317, 489, -301, -293, 481, 490,
	-283, 482, 483, -278, 475, 376, -317, 485, 475, -317,
	-317, 477, 35, 35, 366, 366, -317, -278, 480, 490,
	485, 489, -231, -278, 477, 25, -284, 389, -284, 716,
	716, -209, 413, -284, -284, -284, 518, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, 474, -316, -96, 634,
	538, 323, -48, -31, -143, -229, 475, 476, -316, 507,
	-143, 458, -143, -223, 397, 15, -223, -220, 623, 621,
	608, 613, -223, -223, -223, -223, 521, 606, -279, 475,
	35, 486, 623, 521, 606, 521, 522, 521, 522, 616,
	626, 521, -244, 14, 399, 649, 611, 615, 514, 474,
	515, 476, 625, 522, -244, 335, -224, 397, 623, 517,
	-223, -223, -249, -340, -235, -312, 813, -249, 32, 332,
	477, -234, -70, -234, 335, -9, -5, -16, -15, -17,
	389, -94, 623, -82, 414, 814, 815, 816, 813, 620,
	821, 819, 817, 521, 818, 329, 378, 380, 4, -104,
	396, -153, 389, 390, 391, 392, 393, 394, 395, 399,
	381, 383, 397, 398, 389, 379, 400, 401, 402, 403,
	404, 405, 406, 408, 407, 409, 410, 413, 459, 460,
	-110, -110, -110, -110, -167, -340, -340, -340, -110, -218,
	-340, -110, -340, -340, -340, -340, -173, -104, -340, -344,
	-340, -344, -344, -263, -340, -263, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, 458, -340, -340, -340, -340, -340, -263,
	-263, -263, -263, -263, 345, 340, 334, -169, 341, 335,
	-234, -239, -2, -3, -162, -248, -326, -327, -146, -143,
	-340, 538, -234, -234, 507, -182, -6, -2, -177, -183,
	-179, -2, -68, -80, -93, 305, 306, -95, 24, 38,
	309, 307, 23, -341, 330, -341, -198, -341, 329, -30,
	-203, 328, 303, 329, 21, -178, -180, -104, 14, -237,
	-236, 25, -234, 335, 458, 343, 14, -144, 29, -143,
	-219, -219, 329, 549, -212, -251, -214, -213, 639, 641,
	389, -238, -234, 335, 31, 330, 329, -143, -255, -258,
	-260, -259, -261, -256, -257, 572, 573, 414, 576, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 589, 32,
	497, 568, 569, 570, 571, 590, 591, 592, 593, 594,
	595, 596, 597, 555, 574, 710, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, -315, -312, 328,
	330, 329, -262, 328, -104, -96, 474, -312, 475, 475,
	475, -68, 678, -284, -284, -284, 18, -34, -35, -38,
	-35, 328, -273, -282, -315, -312, 328, 376, 480, 375,
	-281, -278, -281, -282, -312, -169, -312, -312, -169, -273,
	-209, -169, -312, 376, 376, -312, -312, -143, -312, 31,
	320, 321, 322, 31, 324, 325, 326, -284, -284, 335,
	335, 335, -284, 335, -318, 491, 535, 537, 31, 335,
	-319, 31, 834, 833, 835, 836, 837, 31, 31, -234,
	328, -143, -102, 525, 461, 463, 467, 318, 335, 539,
	543, 544, 389, 329, 477, 474, -312, -225, 479, -225,
	-234, -240, -239, -232, 335, -104, -280, 14, 399, -244,
	-244, -223, -143, -280, -244, -223, -143, -223, -223, -223,
	-223, -244, -244, -244, -223, -239, -239, -143, -143, -143,
	-143, -143, -143, -143, -249, -224, -223, 813, 335, -217,
	14, 318, -249, -249, -247, 552, 586, 807, 808, 809,
	329, 712, -136, -143, 813, 813, 813, 813, 813, -104,
	-104, -104, 735, -160, 358, 381, 359, 360, -118, -161,
	-165, -167, 342, 399, 383, 397, 398, -109, -110, -109,
	42, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-109, -109, -109, -250, -234, 335, 414, -114, -113, 341,
	335, -335, -114, -90, -92, -104, -104, -312, -234, -90,
	-90, -104, -86, 24, 38, -171, -172, 385, -169, -341,
	-341, 341, -234, -234, -79, -78, 660, 661, 662, 663,
	665, 666, 667, 670, 671, 675, 676, 659, 677, 664,
	669, 672, 673, 674, 668, 571, -104, -104, -104, -104,
	-104, -104, -75, -104, 369, 370, 371, -104, -104, -163,
	-162, -311, -310, -309, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -104, -104, -104, -91, 24, 38,
	-90, -235, -240, -232, -90, -91, -91, -90, -90, 458,
	-341, 329, -328, 641, 642, 811, -242, -241, 25, -239,
	335, -163, 335, 14, -205, 319, -234, -182, -182, 305,
	306, 301, -90, -95, -341, -29, 25, -201, -234, 304,
	-104, -104, 329, -181, 27, 28, -143, -236, 405, -240,
	-143, -154, 32, 299, -5, -340, -143, -121, -123, -124,
	-125, -146, -168, -340, -126, 731, 728, 14, -136, -137,
	-145, -239, -212, -214, 329, 640, 642, 643, 318, 361,
	-104, -265, 413, -291, -290, -289, -273, -275, -276, -277,
	475, 376, 330, -265, -269, 604, 603, -262, -262, -262,
	-262, -262, -264, -209, 598, 599, 414, -264, -264, -264,
	328, 328, -262, -262, -262, -262, -267, -267, -267, -268,
	-268, -302, -104, -299, -298, -296, -297, 344, 804, 760,
	712, 319, -294, -181, 337, -341, -102, -226, 479, -300,
	-297, -312, -312, -312, -226, -312, 335, -312, 335, -312,
	335, 19, 329, -274, -273, -51, 535, -301, -295, -282,
	376, -281, -282, -282, 463, 32, -227, 751, 381, 804,
	760, -273, -51, -250, -312, 477, -250, -250, 335, -222,
	842, -136, -98, 527, 389, 516, 516, 474, 474, 529,
	-143, 540, 542, 541, 539, 543, 544, 23, 23, 23,
	528, 530, 532, -143, -143, -225, 318, -138, -143, 26,
	-239, -143, -223, -223, -143, -223, -223, -143, -234, -82,
	641, 329, 712, 22, -83, 22, -340, 358, 359, 360,
	-161, -109, -110, -109, 380, 498, -161, 335, 329, -341,
	25, 329, 319, -341, -341, -341, 329, 14, -90, -174,
	-172, 387, -104, -341, -341, 329, 329, 14, -254, -341,
	-341, -341, -341, -341, -173, -341, 14, 329, 329, -341,
	-341, 329, 329, -341, 329, 329, 329, -308, 329, 329,
	329, 329, -341, -341, -341, -341, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, -341, -341, -90, -90,
	-340, 458, -341, -341, -341, -341, -341, -235, -327, 810,
	642, -150, -149, -147, 316, 478, 317, -241, -341, -114,
	332, -202, 332, -201, -155, -234, 341, -120, -122, 14,
	-95, -167, 330, 329, -180, 458, -151, 15, -206, 318,
	-207, -211, -169, -164, -166, -165, -340, -200, -341, -234,
	32, 329, -139, -141, -140, -142, 308, 312, 314, 309,
	310, 311, 315, -245, 25, -121, -3, -2, -340, -340,
	-340, -143, -136, -342, 14, 319, -342, 329, 458, -213,
	-215, 644, 641, 647, -312, 335, 329, -289, -277, -184,
	-99, 40, -270, 605, -264, 719, -264, -234, 335, 414,
	-266, 414, -266, 598, 599, -272, 335, -272, 330, -41,
	-36, -37, 33, 323, -296, 335, 39, -234, 330, -181,
	-98, -143, 381, 318, -300, -300, -300, -239, -201, 18,
	329, 330, -170, 536, 330, 328, -282, -282, 31, 31,
	804, 760, 751, -51, -170, -265, -312, 844, 843, 330,
	476, 534, -103, 655, -100, 335, 331, -143, -143, -143,
	-143, -143, 467, 463, -336, 545, -336, 477, -136, -143,
	329, -73, 493, 488, -244, -244, 33, -143, 641, 822,
	820, -104, 380, 498, -118, -110, -92, 709, -252, 414,
	572, 497, 570, 566, 586, 577, 603, 568, 604, 565,
	564, 563, -252, -250, -104, -104, -177, 388, -104, 386,
	-104, -104, -104, -341, 14, -104, -104, -104, -309, -104,
	-104, -104, -307, -306, -114, -169, -341, -307, -104, -104,
	-306, -306, -310, -310, -310, -310, -310, -162, -162, -162,
	-162, -341, -341, -91, -235, -147, -278, -278, -278, 329,
	-216, 22, 14, 299, -151, -121, -95, -234, 405, -182,
	-104, 30, -206, 329, 389, 329, -341, -341, 329, 299,
	458, -207, -123, -124, -124, -123, -124, 308, 308, 308,
	313, 308, 313, 308, -140, -239, -341, -341, -3, -3,
	-104, -242, 319, -121, -121, -145, -239, 405, 641, 645,
	646, -289, -334, 358, 381, 31, 318, 601, 344, -332,
	413, 748, 799, 804, 760, -333, 480, 375, 376, 492,
	25, 41, -266, -266, 330, 329, 330, -228, -227, -37,
	-36, -284, -284, -312, 476, 26, -143, 318, 318, 318,
	19, -273, -169, -299, -201, -106, -340, -105, -107, -111,
	403, 404, 338, 339, -170, -143, -97, 525, 533, 328,
	-101, 332, -314, 319, 516, 601, 516, -337, 546, 335,
	-337, -143, -73, -41, -143, -223, -223, 33, -312, -341,
	-118, -110, -340, -341, -262, -262, -262, -268, -262, 560,
	-262, 560, -262, -341, -341, 329, -341, 22, -341, -81,
	684, -104, 329, 329, -341, -104, -341, -341, -341, -308,
	329, -341, 329, -341, 329, -253, 805, -341, -341, -341,
	-341, -341, -341, -341, -341, -341, -341, -341, -148, 22,
	-148, -148, 332, -143, -175, 16, 376, -211, -104, -166,
	299, -5, -234, -164, -234, -151, -134, -133, 318, 319,
	-135, 318, -133, 308, 308, -203, -341, -341, 329, -151,
	-121, -151, -151, 458, 358, -340, -108, -117, -106, 12,
	335, 335, -312, -331, 833, 834, 31, 337, 376, 376,
	-143, 328, -264, 335, -264, 31, 324, 325, 326, 31,
	320, 321, 322, -143, -143, -143, -143, -201, 330, -104,
	-112, -112, -203, 330, -305, 712, -313, -234, -234, -234,
	-234, 339, -109, -264, -104, -104, -182, 335, -104, -104,
	-341, -341, -307, -306, -104, -341, -131, -130, -132, 814,
	358, 31, -252, -340, 308, 18, 16, -340, -340, -176,
	17, 19, 12, -164, 458, -177, -104, 328, -104, -114,
	-177, -151, -104, -157, 357, 690, 691, 692, 356, 328,
	-104, -203, -333, -341, 25, -304, -303, -235, 328, 319,
	-85, 399, 712, -341, -341, -341, -341, -341, -341, -341,
	329, -341, -130, -132, -341, 318, -114, -204, -341, -234,
	480, 19, 19, -204, -204, -104, -162, -207, -234, -182,
	-201, -128, 608, -182, -341, -201, 330, 25, -5, 329,
	389, -201, -143, -341, 710, 315, 713, -104, -341, 318,
	723, 814, 329, -341, -341, -341, 330, -341, -340, 330,
	-185, -5, -71, 712, -303, -288, -235, 335, 337, 330,
	304, 711, 714, -308, -234, 480, -242, -129, -127, -234,
	766, -324, -323, 708, -334, -330, 358, 381, 344, -332,
	804, 760, 367, 368, -71, -72, 524, 810, -314, 304,
	-341, -341, 329, 22, -255, -53, 777, -321, -322, 318,
	-325, 614, 776, 797, 358, 335, 485, -305, 712, -127,
	773, -265, -114, -322, 318, -321, 318, 13, 12, 526,
	713, -52, 26, -128, -320, 493, 488, 491, 32, -320,
	714, 777, 487, 31, 358, -114, -131, -130, -130,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 710,
	710, 710, 0, 710, 0, 0, 710, -2, -2, 710,
	1188, 0, 710, 0, 0, -2, 642, 644, 0, 646,
	-2, 0, 0, 655, 1685, 1685, 705, 0, 0, 0,
	0, 0, 710, 710, 710, 710, 1050, 48, 710, 0,
	80, 81, 662, 663, 664, 63, 0, 1683, 1, 3,
	69, 73, 0, 0, 0, 56, 1059, 0, 74, 0,
	0, 714, 0, 712, 0, 1171, 710, 710, 0, 109,
	110, 0, 0, 0, -2, 113, -2, 142, 143, 144,
	0, 149, 519, 469, 471, 474, 507, -2, -2, 458,
	458, 458, 0, 0, 0, 0, 0, 458, 504, 1173,
	364, 364, 0, 0, 426, 0, 364, 364, 364, 0,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 1077,
	148, 1189, 1186, 1187, 38, 39, 40, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 0, 1165, 0,
	571, 808, 0, 631, 631, 0, 631, 631, 631, 631,
	0, 0, 0, 583, 0, 0, 0, 0, 628, 0,
	599, 0, 628, 0, 605, 634, 0, 610, 631, 631,
	613, 1686, 0, 1686, 1156, 0, 625, 623, 637, 638,
	641, 645, 0, 650, 653, 1182, 1183, 0, 669, 47,
	1406, 660, 661, 674, 675, 0, 706, 707, 43, 905,
	0, 829, 834, 845, 859, 860, 861, 862, 863, 865,
	866, 0, 0, 0, 0, 871, 872, 1393, 1474, 0,
	0, 0, 886, 1442, 0, 0, 1617, 0, 1032, 1655,
	998, 998, 922, 998, 1000, 1000, 0, 0, 1398, 0,
	0, 0, 0, 0, 0, 1635, 0, 0, 1446, 1449,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 1421, 1358, 1582, 0, 1564, 266,
	267, 904, 1145, 1000, 1000, 1000, 1000, 1000, -2, -2,
	212, 213, 214, 215, 216, 217, 218, 0, 208, 0,
	-2, -2, -2, 272, 268, 888, 889, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 1685,
	0, 684, 0, 0, 0, 0, 0, 1059, 0, 1051,
	1050, 61, 0, 710, -2, 0, 0, 0, 0, 45,
	1555, 50, 769, 1099, 0, 1101, 57, 1060, 65, 67,
	1061, 0, 715, 716, 0, 746, 750, 0, 711, 0,
	0, 1172, 1171, 1171, 95, 0, 1631, 1149, -2, -2,
	0, 0, 1184, 1185, 1158, -2, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1329, 0, 0,
	160, 161, 0, 41, 391, 0, 156, 0, 384, 331,
	0, 1077, 0, 0, 0, 0, 0, 710, 0, 1166,
	137, 138, 145, 146, 147, 364, 364, 364, 148, 148,
	427, 478, 479, 480, 0, -2, 389, 0, 459, 0,
	0, 378, 378, 382, 380, 381, 0, 0, 0, 0,
	0, 0, 494, 495, 496, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 1174, 1175, 0, 365, 0, 517,
	518, 364, 364, 0, 0, 0, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 1090, 0,
	0, 0, -2, 563, 0, 0, 0, 1167, 1167, 0,
	570, 0, 572, 573, 0, 0, 574, 0, 628, 628,
	626, 627, 576, 577, 578, 579, 631, 0, 0, 373,
	374, 375, 628, 631, 0, 631, 631, 631, 631, 628,
	628, 628, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1686, 634, 631, 0, 606, 0, 607, 608,
	611, 612, 614, 1687, 1688, 1686, 1686, 621, 1157, 643,
	651, 654, 672, 670, 671, 673, 665, 666, 667, 668,
	0, 686, 687, 692, 0, 0, 0, 697, 698, 699,
	0, 0, 702, 703, 704, 0, 0, 0, 0, 827,
	0, 0, 894, 895, 896, 897, 898, 899, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 868, 869, 870, 873, 0, 0, 0, 878, 879,
	0, 0, 0, 0, 0, 720, 0, 1033, 0, 920,
	0, 921, 923, 924, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1177, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 730, 730, 0, 0, 201,
	202, 203, 204, 205, 219, 220, 221, 222, 223, -2,
	1041, 0, 904, 0, 0, 44, 676, 677, 0, 791,
	1177, 0, 0, 726, 0, 55, 64, 66, 1059, 59,
	1059, 0, 732, 0, 0, -2, -2, 733, 739, 740,
	741, 742, 743, 52, 1684, 53, 0, 72, 0, 46,
	0, 0, 0, 0, 0, 1052, 1053, 1056, 0, 747,
	751, 0, 753, 754, 0, 713, 0, 0, 0, 807,
	0, 0, 0, 1631, 1155, 0, 97, 98, 0, 0,
	0, 351, 1160, 1161, 1162, -2, 371, 0, 351, 335,
	281, 282, 283, 331, 285, 331, 331, 331, 331, 340,
	340, 340, 340, 314, 315, 316, 317, 318, 0, 0,
	300, 331, 331, 331, 331, 321, 322, 323, 324, 325,
	326, 327, 328, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 333, 333, 333, 334, 334, 0, 42, 0,
	355, 0, 1056, 0, 0, 1090, 1169, 1179, 0, 0,
	0, 1169, 115, 0, 0, 0, 0, 475, 476, 472,
	508, 0, 460, 372, 0, -2, 0, 382, 0, 378,
	382, 379, 382, 370, 383, 0, 0, 0, 0, 460,
	0, 498, 499, 500, 0, 502, 503, 505, 0, 509,
	510, 511, 512, 513, 514, 515, 516, 0, 0, 430,
	431, 432, 0, 434, 435, 452, 453, 454, 436, 437,
	438, 446, 447, 448, 449, 450, 451, 439, 440, 443,
	0, 130, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1167, 0, 0, 0, 0,
	729, 809, 1190, 1191, 632, 633, 0, 376, 377, 631,
	631, 580, 618, 0, 631, 584, 619, 585, 587, 586,
	588, 600, 601, 631, 591, 629, 630, 592, 593, 594,
	595, 596, 597, 598, 615, 602, 603, 604, 635, 0,
	639, 640, 616, 617, 0, 652, 656, 657, 658, 659,
	0, 0, 689, 91, 694, 695, 696, 708, 701, 906,
	825, 826, 0, 828, 831, 0, 890, 892, 833, 835,
	901, 902, 903, 0, 0, 0, 0, 0, 839, 843,
	0, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 864, 1013, 1014, 1015, 881, 274, 275,
	271, 0, 882, 0, 744, 0, 0, 0, 880, 0,
	0, 0, 0, 721, 722, 1039, 1036, 0, 0, 999,
	1001, 0, 0, 0, 0, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 1016, 0, 0, 0,
	0, 0, 1032, 0, 883, 884, 885, 0, 0, 0,
	1178, 0, 125, 126, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 1042, 0, -2, 0, 0, 0, 0, 0, 0,
	1144, 0, 679, 680, 682, 0, 811, 792, 0, 794,
	795, 0, 685, 0, 725, 0, 728, 58, 60, 737,
	738, 0, 755, 734, 54, 49, 0, 0, 771, 1100,
	1062, 1063, 0, 1055, 1057, 1058, 75, 752, 748, 0,
	823, 1138, 0, 0, 1130, 0, 806, 0, 758, 760,
	761, 762, 789, 0, 765, 0, 1454, 0, 0, 0,
	93, 808, 1150, 96, 0, 0, 101, 102, 1151, -2,
	1153, 1154, 0, 139, -2, 423, 162, 164, 165, 166,
	-2, -2, 157, -2, 338, 336, 337, 284, 340, 340,
	308, 309, 310, 0, 349, 349, 346, 311, 312, 313,
	0, 0, 301, 302, 303, 304, 295, 296, 297, 298,
	299, 390, 0, 1064, 356, 357, 359, 0, 361, 362,
	0, 0, 385, 386, 0, 1056, 1081, 0, 0, 0,
	1180, 1179, 1179, 1179, 0, 150, 151, 152, 153, 154,
	155, 0, 148, 0, 158, 462, 461, 388, 0, 0,
	382, 382, 367, 368, 0, 0, 488, 417, 0, 489,
	490, 460, 462, 351, 501, 0, 428, 429, 433, 441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 532, 533, 464, 537, 534, 464, 538,
	1078, 1079, 1080, 0, 564, 0, 0, 414, 89, 1168,
	569, 628, 590, 620, 628, 582, 589, 609, 648, 693,
	0, 0, 0, 0, 700, 0, 0, 832, 891, 893,
	836, 0, 840, 844, 0, 0, 846, 273, 0, 0,
	0, 0, 0, 887, 911, 912, 0, 0, 1050, 0,
	1037, 0, 0, 919, 1002, 0, 0, 0, 0, 930,
	931, 932, 933, 934, 0, 936, 0, 0, 0, 940,
	941, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 954, 955, 956, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 907, 0, 0,
	730, 0, 1003, 1004, 1005, 1006, 1007, 1042, 678, 681,
	683, 768, 812, 813, 0, 0, 0, 793, 1176, 723,
	724, 727, -2, 0, 0, 1044, 0, 823, 756, 0,
	735, 51, 770, 0, 1054, 0, 1059, 0, 78, 0,
	1138, 1146, 0, 1129, 1140, 1142, 0, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 796, 0, 0, 799,
	0, 0, 0, 0, 790, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 87, 88, 0, 0, 0, 99,
	100, 0, 0, 106, 352, 353, 148, 425, 163, 398,
	0, 0, 280, 339, 305, 306, 307, 349, 349, 343,
	344, 350, 345, 347, 348, 0, 329, 0, 419, 111,
	1068, 1067, 364, 364, 358, 360, 0, 1181, 332, 387,
	0, 129, 0, 0, 0, 0, 0, 135, 470, 0,
	0, 481, 482, 0, 355, 0, 366, 369, 483, 0,
	486, 487, 418, 462, 492, 493, 506, 444, 445, 442,
	0, 0, 1091, 1092, 1097, 1095, 1096, 116, 523, 525,
	524, 528, 0, 0, 466, 0, 466, 0, 414, 1064,
	0, 568, 415, 416, 631, 631, 688, 92, 0, 691,
	0, 0, 0, 0, 837, 841, 745, 0, 0, 331,
	331, 1019, 331, 334, 1022, 331, 1024, 331, 1027, 331,
	1030, 1031, 0, 0, 0, 0, 1034, 918, 1040, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 127, 128,
	971, 0, 0, 973, 975, 976, 946, 972, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 909, 0, 1043, 814, 819, 819, 819, 0,
	0, 1163, 1164, 1045, 1046, 757, 736, 772, 749, 76,
	824, 0, 79, 0, 0, 0, 1143, 0, 0, 0,
	0, 823, 759, 785, 787, 0, 782, 797, 798, 800,
	0, 802, 0, 804, 805, 769, 764, 766, 0, 0,
	0, 823, 0, 823, 823, 94, 0, 810, 103, 104,
	105, 424, 167, 172, 0, 0, 0, 177, 0, 179,
	0, 0, 0, 184, 185, 399, 0, 277, 279, 0,
	0, 170, 341, 342, 340, 0, 340, 400, 420, 1065,
	1066, 0, 0, 363, 0, 1170, 131, 0, 0, 0,
	0, 159, 463, 354, 0, 484, 0, 206, 207, 209,
	0, 0, 269, 270, 491, 769, 1082, 1083, 1084, 0,
	1094, 1098, 119, 0, 0, 0, 0, 535, 0, 465,
	536, 565, 566, 567, 90, 575, 581, 690, 709, 830,
	838, 842, 0, 875, 1017, 340, 1020, 1021, 1023, 1025,
	1026, 1028, 1029, 876, 877, 0, 914, 0, 916, 1059,
	0, 1038, 0, 0, 928, 0, 937, 938, 939, 0,
	0, 945, 0, 947, 0, 0, 0, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 910, 0, 0,
	0, 0, -2, 62, 1048, 0, 0, 1147, 1148, 1141,
	0, 1133, 1136, 1132, 1135, 1050, 779, 786, 0, 0,
	780, 0, 781, 801, 803, 763, -2, 767, 0, 1050,
	823, 85, 86, 0, 173, 0, 175, 199, 200, 0,
	178, 180, 181, 182, 186, 187, 188, 183, 276, 278,
	0, 0, 319, 330, 320, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 769, 132, 133, 134, 473, 0, 0,
	210, 211, 0, 1093, 522, 0, 117, 118, 0, 0,
	527, 467, 1008, 1018, 0, 0, 0, 1035, 0, 0,
	935, 943, 0, 974, 0, 950, 0, 0, 0, 555,
	556, 0, 970, 0, 820, 0, 0, 0, 0, 77,
	0, 0, 0, 1131, 0, 1059, 783, 0, 788, 0,
	1059, 84, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 392, 485, 0, 120, 121, 0, 0, 0,
	0, 0, 0, 913, 915, 917, 926, 927, 944, 948,
	0, 951, 0, 0, 952, 0, 557, 0, 816, 775,
	776, 821, 822, 0, 0, 1049, 1047, 1139, 1137, 82,
	0, 0, 0, 83, 174, 0, 191, 0, 1085, 0,
	0, 0, 529, 874, 0, 0, 0, 971, 953, 0,
	553, 554, 0, 815, 817, 818, 784, 791, 0, 405,
	398, 1085, 520, 1087, 122, 123, 455, 456, 457, 116,
	1009, 0, 1012, 0, 777, 778, 539, 0, 541, 0,
	-2, 393, 406, 0, 168, 192, 193, 0, 0, 196,
	197, 198, 189, 190, 112, 0, 1088, 1089, 119, 1010,
	949, 540, 0, 0, 351, 0, 550, 394, 395, 0,
	401, 402, 403, 404, 194, 195, 0, 526, 0, 542,
	543, 551, 0, 396, 0, 397, 0, 0, 0, 1086,
	0, 0, 552, 548, 407, 409, 410, 0, 0, 408,
	1011, 0, 411, 412, 413, 544, 545, 546, 547,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 382, 3, 3, 3, 408, 400, 3,
	328, 330, 405, 403, 329, 404, 458, 406, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 845,
	390, 389, 391, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 410, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 379, 3, 411,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 331, 57671, 332, 57672, 333, 57673, 334, 57674, 335,
	57675, 336, 57676, 337, 57677, 338, 57678, 339, 57679, 340,
	57680, 341, 57681, 342, 57682, 343, 57683, 344, 57684, 345,
	57685, 346, 57686, 347, 57687, 348, 57688, 349, 57689, 350,
	57690, 351, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 380, 57719, 381,
	57720, 383, 57721, 384, 57722, 385, 57723, 386, 57724, 387,
	57725, 388, 57726, 392, 57727, 393, 57728, 394, 57729, 395,
	57730, 396, 57731, 397, 57732, 398, 57733, 399, 57734, 401,
	57735, 402, 57736, 407, 57737, 409, 57738, 412, 57739, 413,
	57740, 414, 57741, 415, 57742, 416, 57743, 417, 57744, 418,
	57745, 419, 57746, 420, 57747, 421, 57748, 422, 57749, 423,
	57750, 424, 57751, 425, 57752, 426, 57753, 427, 57754, 428,
	57755, 429, 57756, 430, 57757, 431, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	psqDebug        = 0
	psqErrorVerbose = false
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", psqTokname(token), uint(char))
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:550
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:555
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:556
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:560
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 37:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:596
		{
			setParseTree(psqlex, nil)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:602
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:606
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:610
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:615
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 42:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:619
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 43:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:625
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:631
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:637
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:641
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:646
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:650
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:656
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 50:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:660
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:666
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:672
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:676
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:680
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:703
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:709
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:714
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:720
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:727
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:733
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:740
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 62:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:744
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:750
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:754
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:758
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:762
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:766
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:772
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:776
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:781
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:785
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:791
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:795
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:800
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:807
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:813
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:821
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:829
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:840
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:852
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:856
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:862
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:868
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:872
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:876
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:880
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:885
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:886
		{
		}
	case 89:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:890
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:894
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:900
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:904
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 93:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:910
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:914
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 95:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:920
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:926
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:930
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:936
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:940
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 100:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:946
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:950
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:954
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:960
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:964
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:968
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:972
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:978
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:982
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:988
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:994
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1001
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().AlterOptions = append(psqDollar[1].alterTableUnion().AlterOptions, psqDollar[6].alterOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1010
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[8].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Algorithm: psqDollar[4].str, Definer: psqDollar[5].definerUnion(), Security: psqDollar[6].str, Columns: psqDollar[9].columnsUnion(), Select: psqDollar[11].selStmtUnion(), CheckOption: psqDollar[12].str}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1014
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1021
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1025
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1030
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 117:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1034
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1040
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 119:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1045
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1050
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1056
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1061
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1067
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 124:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1072
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1076
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1082
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1086
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1092
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 129:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1098
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1105
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[4].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1112
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1117
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1122
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1127
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1134
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1141
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1152
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1158
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1162
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1168
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1172
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1176
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1180
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1184
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 147:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1188
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 148:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1194
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1198
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 150:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1204
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 151:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1208
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 152:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1214
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1218
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1224
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1228
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 156:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1234
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 157:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1238
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 158:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1244
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 159:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1248
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1254
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1259
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1264
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1268
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 164:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1273
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1277
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1281
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 167:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1292
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1301
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 169:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1310
		{
			psqVAL.str = ""
		}
	case 170:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1314
		{
			psqVAL.str = ""
		}
	case 171:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1323
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1327
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1333
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 174:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1339
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1344
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1349
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1354
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1359
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1364
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1369
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1373
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 182:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1378
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 183:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1382
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 184:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1387
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1393
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1401
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1405
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1409
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1415
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1419
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1424
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1428
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1433
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1439
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1445
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1450
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1455
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1461
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 199:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1469
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1476
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1480
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 203:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1484
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1488
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1492
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1503
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1510
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1514
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1520
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1524
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1528
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1532
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1536
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1540
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1544
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1549
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1553
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1557
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1561
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1565
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1572
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1576
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1580
		{
			psqVAL.str = ast.Big5Str
		}
	case 227:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1584
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1588
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1592
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1596
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1600
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1604
		{
			psqVAL.str = ast.Cp850Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1608
		{
			psqVAL.str = ast.Cp852Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1612
		{
			psqVAL.str = ast.Cp866Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1616
		{
			psqVAL.str = ast.Cp932Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1620
		{
			psqVAL.str = ast.Dec8Str
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1624
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1628
		{
			psqVAL.str = ast.EuckrStr
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1632
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1636
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1640
		{
			psqVAL.str = ast.GbkStr
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1644
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1648
		{
			psqVAL.str = ast.GreekStr
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1652
		{
			psqVAL.str = ast.HebrewStr
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1656
		{
			psqVAL.str = ast.Hp8Str
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1660
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1664
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1668
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1672
		{
			psqVAL.str = ast.Latin1Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1676
		{
			psqVAL.str = ast.Latin2Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1680
		{
			psqVAL.str = ast.Latin5Str
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1684
		{
			psqVAL.str = ast.Latin7Str
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1688
		{
			psqVAL.str = ast.MacceStr
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1692
		{
			psqVAL.str = ast.MacromanStr
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1696
		{
			psqVAL.str = ast.SjisStr
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1700
		{
			psqVAL.str = ast.Swe7Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1704
		{
			psqVAL.str = ast.Tis620Str
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1708
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1712
		{
			psqVAL.str = ast.UjisStr
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1716
		{
			psqVAL.str = ast.Utf16Str
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1720
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1724
		{
			psqVAL.str = ast.Utf32Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1728
		{
			psqVAL.str = ast.Utf8Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1732
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1736
		{
			psqVAL.str = ast.Utf8Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1746
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1750
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1754
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1760
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1764
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1768
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1774
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1778
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1785
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1789
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1793
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1797
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 280:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1803
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 284:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1814
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1819
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1825
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1829
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1833
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1837
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1841
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1845
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1849
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1853
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1857
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 295:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1863
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 296:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1869
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 297:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1875
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 298:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1881
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 299:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1887
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 300:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1895
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1899
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1903
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1907
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 304:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1911
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 305:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1917
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 306:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1921
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 307:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1927
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1931
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1935
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1939
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 311:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1943
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1947
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1951
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1955
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 315:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1959
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1963
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 317:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1967
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 318:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1971
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 319:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1975
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 320:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1980
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1986
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1990
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1994
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1998
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2002
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2006
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2010
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2014
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2020
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 330:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2025
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 331:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2030
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 332:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2034
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 333:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2039
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2044
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 335:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2049
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2053
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2057
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 338:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2062
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 339:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2066
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 340:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2071
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2075
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2079
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 343:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2083
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 344:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2087
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2092
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 346:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2097
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2102
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 348:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2107
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 349:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2113
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 350:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2117
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 351:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2122
		{
			psqVAL.str = ""
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2126
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 353:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2130
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 354:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2137
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2142
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2146
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 357:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2152
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 358:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2156
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 359:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2162
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2166
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2170
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2174
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2178
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 364:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2184
		{
			psqVAL.str = ""
		}
	case 365:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2188
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 366:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2194
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2198
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2202
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2206
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2210
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 371:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2215
		{
			psqVAL.str = ""
		}
	case 372:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2219
		{
			psqVAL.str = psqDollar[2].str
		}
	case 373:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2225
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 374:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2229
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2233
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2240
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 377:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2244
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 378:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2249
		{
			psqVAL.str = "key"
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2253
		{
			psqVAL.str = psqDollar[1].str
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2259
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2263
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 382:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2268
		{
			psqVAL.str = ""
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2272
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 384:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2278
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 385:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2282
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 386:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2288
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2292
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2298
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2302
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2308
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2312
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2318
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2324
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2328
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2332
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2336
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2340
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2345
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2349
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2355
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2361
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2367
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2371
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2375
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2380
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2384
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2390
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2396
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2402
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2406
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2410
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2414
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2418
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 414:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2423
		{
			psqVAL.str = ""
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2427
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2431
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 417:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2437
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2441
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2446
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2450
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2455
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2459
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2465
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2469
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2473
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 426:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2479
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2483
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 428:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2489
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2493
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2497
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2501
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2505
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2509
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2513
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2517
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2521
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2525
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2529
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2533
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2537
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2541
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2545
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2550
		{
			psqVAL.str = ""
		}
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2554
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 445:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2558
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2577
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2581
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 457:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2585
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 458:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2590
		{
			psqVAL.str = ""
		}
	case 460:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2596
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2600
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2605
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2609
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2614
		{
			psqVAL.str = ""
		}
	case 465:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2618
		{
			psqVAL.str = string(psqDollar[2].str)
		}
	case 466:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2623
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 467:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2627
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 468:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2632
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2636
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2640
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 471:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2644
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 472:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2648
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 473:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2652
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2658
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2662
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 476:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2666
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 477:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2672
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2676
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2680
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2684
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2688
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2692
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2696
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2700
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2704
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2708
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2713
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2718
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2722
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2726
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2730
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2734
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2738
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2742
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2746
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2750
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2754
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2758
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2762
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2766
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2770
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2774
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2778
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2782
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2786
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2790
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2796
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2800
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2806
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2810
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2814
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2818
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2822
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2826
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2830
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2834
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2838
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2842
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2848
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2854
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Algorithm: psqDollar[3].str, Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2864
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2871
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2883
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2893
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2897
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2901
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2914
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2924
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2928
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2939
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.RetryMigrationType,
				UUID: string(psqDollar[4].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2946
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.CleanupMigrationType,
				UUID: string(psqDollar[4].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2953
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.CompleteMigrationType,
				UUID: string(psqDollar[4].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2960
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.CancelMigrationType,
				UUID: string(psqDollar[4].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2967
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.CancelAllMigrationType,
			}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2973
		{
			psqLOCAL = &ast.AlterMigration{
				Type:   ast.ThrottleMigrationType,
				UUID:   string(psqDollar[4].str),
				Expire: psqDollar[6].str,
				Ratio:  psqDollar[7].literalUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2982
		{
			psqLOCAL = &ast.AlterMigration{
				Type:   ast.ThrottleAllMigrationType,
				Expire: psqDollar[6].str,
				Ratio:  psqDollar[7].literalUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2990
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.UnthrottleMigrationType,
				UUID: string(psqDollar[4].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2997
		{
			psqLOCAL = &ast.AlterMigration{
				Type: ast.UnthrottleAllMigrationType,
			}
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3005
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:3011
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:3017
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3021
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 543:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3027
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3031
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3037
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3043
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3049
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3055
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3061
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3065
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3069
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3073
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3079
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3085
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3091
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3095
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3099
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3104
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3108
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3112
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3118
		{
			psqVAL.str = ""
		}
	case 562:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3122
		{
			psqVAL.str = ""
		}
	case 563:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3128
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3134
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3138
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 566:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3144
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3148
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, psqDollar[7].alterOptionsUnion()...)}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}}, psqDollar[7].alterOptionsUnion()...)}
			}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3157
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3161
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3167
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3171
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3176
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3182
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3186
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3190
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3194
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3198
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3202
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3206
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3210
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3214
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3218
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3222
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3226
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3230
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3234
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3238
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3242
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3246
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3250
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3254
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3258
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3262
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3266
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 595:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3270
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 596:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3274
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3278
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3282
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 599:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3286
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 600:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3290
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 601:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3294
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 602:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3298
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VitessVariables, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 603:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3302
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VitessMigrations, Filter: psqDollar[4].showFilterUnion(), DbName: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 604:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3306
		{
			psqLOCAL = &ast.ShowMigrationLogs{UUID: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3310
		{
			psqLOCAL = &ast.ShowThrottledApps{}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3314
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VitessReplicationStatus, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 607:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3318
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 608:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3322
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 609:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3326
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 610:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3330
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 611:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3334
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VitessShards, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 612:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3338
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VitessTablets, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3342
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VitessTarget}}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3349
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3353
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3357
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3361
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3365
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3369
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 620:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3373
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 621:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3377
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 622:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3383
		{
			psqVAL.str = ""
		}
	case 623:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3387
		{
			psqVAL.str = "extended "
		}
	case 624:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3393
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3397
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3403
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 627:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3407
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 628:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3413
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 629:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3417
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 630:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3421
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 631:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3427
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 632:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3431
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 633:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3435
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 634:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3441
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 635:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3445
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3451
		{
			psqVAL.empty = struct{}{}
		}
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3455
		{
			psqVAL.empty = struct{}{}
		}
	case 638:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3459
		{
			psqVAL.empty = struct{}{}
		}
	case 639:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3465
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3469
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 641:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3475
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 642:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3479
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3483
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3489
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3493
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3499
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3505
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 648:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3509
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 649:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3514
		{
			psqVAL.empty = struct{}{}
		}
	case 650:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3516
		{
			psqVAL.empty = struct{}{}
		}
	case 651:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3519
		{
			psqVAL.empty = struct{}{}
		}
	case 652:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3521
		{
			psqVAL.empty = struct{}{}
		}
	case 653:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3526
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3532
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3537
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3541
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3545
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3549
		{
			psqLOCAL = ast.VitessType
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3553
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3557
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 661:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3561
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 662:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3567
		{
			psqVAL.str = psqDollar[1].str
		}
	case 663:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3571
		{
			psqVAL.str = psqDollar[1].str
		}
	case 664:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3575
		{
			psqVAL.str = psqDollar[1].str
		}
	case 665:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3581
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3585
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 667:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3589
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 668:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3593
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 669:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3598
		{
			psqVAL.str = ""
		}
	case 670:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3602
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3606
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3612
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 673:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3616
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 674:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3622
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3626
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3632
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 677:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3638
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 678:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3642
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 679:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3648
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 680:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3654
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 681:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3658
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 682:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3662
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 683:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3666
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3672
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 685:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3678
		{
			psqLOCAL = &ast.RevertMigration{Comments: ast.Comments(psqDollar[2].strs).Parsed(), UUID: string(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 686:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3684
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 687:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3688
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 688:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3692
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3696
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3700
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3704
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3710
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 693:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3714
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 694:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3720
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 695:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3724
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 696:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3728
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 697:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3732
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 698:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3736
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 699:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3740
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 700:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3744
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 701:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3748
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 702:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3752
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 703:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3756
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 704:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3760
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 705:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3765
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 706:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3769
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 707:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3773
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 708:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3778
		{
			psqVAL.str = ""
		}
	case 709:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3782
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 710:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3787
		{
			setAllowComments(psqlex, true)
		}
	case 711:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3791
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 712:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3797
		{
			psqVAL.strs = nil
		}
	case 713:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3801
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3807
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 715:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3811
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 716:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3815
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 717:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3820
		{
			psqVAL.str = ""
		}
	case 718:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3824
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 719:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3828
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 720:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3833
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 721:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3837
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 722:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3841
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 723:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3847
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 724:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3851
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3863
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3868
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3872
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 728:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3878
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 729:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3882
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 730:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3887
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 731:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3891
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3896
		{
			psqVAL.strs = nil
		}
	case 733:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3900
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 734:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3904
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 735:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3908
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 736:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3912
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 737:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3918
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 738:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3922
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 739:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3926
		{
			psqVAL.str = ast.DistinctStr
		}
	case 740:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3930
		{
			psqVAL.str = ast.DistinctStr
		}
	case 741:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3934
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 742:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3938
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 743:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3942
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3948
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 745:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3952
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 746:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3958
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 747:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3962
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 748:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3966
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 749:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3970
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 750:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3975
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 751:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3979
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 752:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3983
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 754:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3990
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 755:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3995
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 756:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3999
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 757:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4005
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 758:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4011
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 759:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4015
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 762:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4025
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 763:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4029
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 764:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4033
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 765:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4037
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 766:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:4043
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 767:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:4047
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 768:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:4053
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4058
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4062
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4068
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4072
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 773:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4078
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4082
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 775:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4088
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4092
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 777:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4096
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 778:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4100
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 779:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4113
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 780:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4117
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 781:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4121
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4125
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 783:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4131
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 784:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4133
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 785:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4137
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 786:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4139
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 787:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4143
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 788:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4145
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 789:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4148
		{
			psqVAL.empty = struct{}{}
		}
	case 790:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4150
		{
			psqVAL.empty = struct{}{}
		}
	case 791:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4153
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 792:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4157
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 793:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4161
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 795:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4168
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 796:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4174
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4178
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4182
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4188
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4194
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 801:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4198
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 802:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4202
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4206
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4212
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4216
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4226
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 807:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4230
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 808:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4236
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 809:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4240
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 810:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4246
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 811:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4251
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4255
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4261
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4265
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 815:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4271
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4275
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4279
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4283
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4288
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4292
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4296
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4300
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4306
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4310
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4317
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4321
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4325
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4329
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4333
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4337
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4344
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4348
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4352
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4356
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4362
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4366
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4370
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4374
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4378
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4382
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4386
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4390
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4394
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4398
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4402
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4406
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4412
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4416
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4420
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4424
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4428
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4432
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4436
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4440
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4444
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4448
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4452
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4456
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4460
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4466
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4470
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4474
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4478
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4482
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4486
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4490
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4494
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4498
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4502
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4506
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4510
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4514
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4518
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4522
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4526
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4530
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4534
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4538
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4546
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4550
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4558
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4562
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4568
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4572
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4576
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4582
		{
			psqVAL.str = ""
		}
	case 887:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4586
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 888:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4592
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4596
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4603
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4607
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4611
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4615
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4621
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4625
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4629
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4633
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4637
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4641
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4645
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4651
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4655
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4659
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4666
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4672
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4676
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 907:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4686
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4690
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4694
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4698
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4708
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4712
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4716
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4720
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4724
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4728
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4732
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4736
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4740
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4744
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4755
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4759
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4765
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4769
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4774
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4778
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4782
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4786
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4790
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4794
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4798
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4802
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4806
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4810
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4814
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4818
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4822
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4826
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4830
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4834
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4838
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4842
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4846
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4850
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 945:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4854
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 946:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4858
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4862
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 948:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4866
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4870
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4874
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4878
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4882
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4886
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4890
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4894
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4898
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4902
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4906
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4910
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4914
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4918
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4922
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4926
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4930
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4934
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4938
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4942
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4946
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4951
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4955
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4960
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4964
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4970
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4974
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 975:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4980
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 976:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4984
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 977:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4990
		{
		}
	case 978:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4992
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4996
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5000
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5004
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5008
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 983:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5012
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 984:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5016
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5020
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 986:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5024
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5028
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5032
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5038
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5042
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5046
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5050
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5054
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5058
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5062
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5066
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5070
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5080
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5084
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5088
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5099
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5103
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5107
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1006:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5111
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5115
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1008:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5121
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5125
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5129
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5133
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5137
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5143
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 1014:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5147
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1015:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5151
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1016:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5157
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5163
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5167
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5171
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5175
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5179
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5185
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1023:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5189
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5193
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5197
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5201
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5205
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5209
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5213
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5217
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5221
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5227
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5231
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5236
		{
			psqVAL.str = string("")
		}
	case 1035:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5240
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1036:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5246
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5250
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1038:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5256
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5261
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5265
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5271
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5275
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5279
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5285
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5294
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1046:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5300
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1047:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5304
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1048:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5309
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1049:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5313
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1050:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5318
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1051:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5322
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1052:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5328
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1053:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5334
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1054:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5338
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1055:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5344
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1056:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5349
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1057:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5353
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1058:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5357
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1059:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5362
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5366
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1061:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5372
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1062:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5376
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5380
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1064:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5385
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5389
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5393
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5397
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5401
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1069:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5408
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5412
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5416
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 1072:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5420
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5426
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5430
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5434
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5438
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1077:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5443
		{
			psqVAL.str = ""
		}
	case 1078:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5447
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1079:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5451
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1080:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5455
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1081:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5460
		{
			psqVAL.str = ""
		}
	case 1082:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5464
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1083:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5470
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1084:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5474
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1085:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5479
		{
			psqVAL.str = ""
		}
	case 1086:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5483
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1087:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5488
		{
			psqVAL.str = "cascaded"
		}
	case 1088:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5492
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1089:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5496
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1090:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5501
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5505
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5511
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1093:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5517
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1094:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5523
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5532
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1096:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5536
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1097:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5541
		{
			psqVAL.str = ""
		}
	case 1098:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5545
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1099:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5551
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1100:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5555
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5561
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5566
		{
			psqVAL.str = ""
		}
	case 1103:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5570
		{
			psqVAL.str = " format csv" + psqDollar[3].str
		}
	case 1104:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5574
		{
			psqVAL.str = " format text" + psqDollar[3].str
		}
	case 1105:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5579
		{
			psqVAL.str = ""
		}
	case 1106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5583
		{
			psqVAL.str = " header"
		}
	case 1107:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5588
		{
			psqVAL.str = ""
		}
	case 1108:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5592
		{
			psqVAL.str = " manifest on"
		}
	case 1109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5596
		{
			psqVAL.str = " manifest off"
		}
	case 1110:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5601
		{
			psqVAL.str = ""
		}
	case 1111:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5605
		{
			psqVAL.str = " overwrite on"
		}
	case 1112:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5609
		{
			psqVAL.str = " overwrite off"
		}
	case 1113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5615
		{
			psqVAL.str = psqDollar[1].str + psqDollar[2].str
		}
	case 1114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5620
		{
			psqVAL.str = ""
		}
	case 1115:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5624
		{
			psqVAL.str = " lines" + psqDollar[2].str
		}
	case 1116:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5630
		{
			psqVAL.str = psqDollar[1].str
		}
	case 1117:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5634
		{
			psqVAL.str = psqDollar[1].str + psqDollar[2].str
		}
	case 1118:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5640
		{
			psqVAL.str = " starting by " + sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 1119:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5644
		{
			psqVAL.str = " terminated by " + sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 1120:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5649
		{
			psqVAL.str = ""
		}
	case 1121:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5653
		{
			psqVAL.str = " " + psqDollar[1].str + psqDollar[2].str
		}
	case 1122:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5659
		{
			psqVAL.str = psqDollar[1].str
		}
	case 1123:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5663
		{
			psqVAL.str = psqDollar[1].str + psqDollar[2].str
		}
	case 1124:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5669
		{
			psqVAL.str = " terminated by " + sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 1125:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5673
		{
			psqVAL.str = psqDollar[1].str + " enclosed by " + sql_types.EncodeStringSQL(psqDollar[4].str)
		}
	case 1126:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5677
		{
			psqVAL.str = " escaped by " + sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 1127:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5682
		{
			psqVAL.str = ""
		}
	case 1128:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5686
		{
			psqVAL.str = " optionally"
		}
	case 1129:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5699
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1130:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5703
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1131:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5707
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1132:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5711
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1133:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5715
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1134:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5721
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1135:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5725
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1136:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5729
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1137:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5733
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1138:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5738
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1139:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5742
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1140:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5748
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1141:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5752
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5758
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1143:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5762
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1144:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5768
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1145:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5773
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1146:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5783
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1147:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5787
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1148:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5793
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1149:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5799
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1150:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5803
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1151:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5809
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1152:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5813
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1153:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5817
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1154:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5821
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1155:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5825
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1157:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5833
		{
			psqVAL.str = "charset"
		}
	case 1160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5843
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5847
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1162:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5851
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1165:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5860
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1166:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5862
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1167:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5865
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1168:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5867
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1169:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5870
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1170:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5872
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1171:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5875
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1172:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5877
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1173:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5880
		{
			psqVAL.empty = struct{}{}
		}
	case 1174:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5882
		{
			psqVAL.empty = struct{}{}
		}
	case 1175:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5884
		{
			psqVAL.empty = struct{}{}
		}
	case 1176:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5888
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1177:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5893
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1178:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5897
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1179:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5902
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1180:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5904
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1181:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5908
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1182:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5914
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1183:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5918
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1185:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5925
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5931
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5935
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1188:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5941
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5945
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1191:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5952
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1683:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6468
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1684:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6477
		{
			decNesting(psqlex)
		}
	case 1685:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6482
		{
			skipToEnd(psqlex)
		}
	case 1686:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6487
		{
			skipToEnd(psqlex)
		}
	case 1687:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6491
		{
			skipToEnd(psqlex)
		}
	case 1688:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6495
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
