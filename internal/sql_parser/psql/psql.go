// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:19
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:19

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setIgnoreCommentKeyword(psqlex psqLexer, ignore bool) {
	psqlex.(tokenizer.Tokenizer).SetIgnoreCommentKeyword(ignore)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const STOP = 57642
const LOG_VERBOSITY = 57643
const ON_ERROR = 57644
const FORCE_NULL = 57645
const FORCE_NOT_NULL = 57646
const FORCE_QUOTE = 57647
const ARRAY_MAX_CARDINALITY = 57648
const CHARACTER_SET_CATALOG = 57649
const COMMAND_FUNCTION_CODE = 57650
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57651
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57652
const DATETIME_INTERVAL_CODE = 57653
const DATETIME_INTERVAL_PRECISION = 57654
const DYNAMIC_FUNCTION_CODE = 57655
const END_EXEC = 57656
const PARAMETER_ORDINAL_POSITION = 57657
const PARAMETER_SPECIFIC_CATALOG = 57658
const PARAMETER_SPECIFIC_NAME = 57659
const PARAMETER_SPECIFIC_SCHEMA = 57660
const RETURNED_OCTET_LENGTH = 57661
const TRANSACTIONS_COMMITTED = 57662
const TRANSACTIONS_ROLLED_BACK = 57663
const USER_DEFINED_TYPE_CATALOG = 57664
const USER_DEFINED_TYPE_CODE = 57665
const USER_DEFINED_TYPE_NAME = 57666
const USER_DEFINED_TYPE_SCHEMA = 57667
const VALUES = 57668
const LAST_INSERT_ID = 57669
const NEXT = 57670
const VALUE = 57671
const SHARE = 57672
const MODE = 57673
const SQL_NO_CACHE = 57674
const SQL_CACHE = 57675
const SQL_CALC_FOUND_ROWS = 57676
const JOIN = 57677
const STRAIGHT_JOIN = 57678
const LEFT = 57679
const RIGHT = 57680
const INNER = 57681
const OUTER = 57682
const CROSS = 57683
const NATURAL = 57684
const USE = 57685
const FORCE = 57686
const ON = 57687
const USING = 57688
const INPLACE = 57689
const COPY = 57690
const INSTANT = 57691
const NONE = 57692
const SHARED = 57693
const EXCLUSIVE = 57694
const SUBQUERY_AS_EXPR = 57695
const ID = 57696
const AT_ID = 57697
const AT_AT_ID = 57698
const HEX = 57699
const STRING = 57700
const NCHAR_STRING = 57701
const INTEGRAL = 57702
const FLOAT = 57703
const DECIMAL = 57704
const HEXNUM = 57705
const VALUE_ARG = 57706
const LIST_ARG = 57707
const COMMENT_KEYWORD = 57708
const BIT_LITERAL = 57709
const COMPRESSION = 57710
const JSON_PRETTY = 57711
const JSON_STORAGE_SIZE = 57712
const JSON_STORAGE_FREE = 57713
const JSON_CONTAINS = 57714
const JSON_CONTAINS_PATH = 57715
const JSON_EXTRACT = 57716
const JSON_KEYS = 57717
const JSON_OVERLAPS = 57718
const JSON_SEARCH = 57719
const JSON_VALUE = 57720
const EXTRACT = 57721
const NULL = 57722
const TRUE = 57723
const FALSE = 57724
const OFF = 57725
const DISCARD = 57726
const IMPORT = 57727
const ENABLE = 57728
const DISABLE = 57729
const TABLESPACE = 57730
const VIRTUAL = 57731
const STORED = 57732
const BOTH = 57733
const LEADING = 57734
const TRAILING = 57735
const EMPTY_FROM_CLAUSE = 57736
const LOWER_THAN_CHARSET = 57737
const CHARSET = 57738
const UNIQUE = 57739
const KEY = 57740
const EXPRESSION_PREC_SETTER = 57741
const OR = 57742
const AND = 57743
const NOT = 57744
const BETWEEN = 57745
const CASE = 57746
const WHEN = 57747
const THEN = 57748
const ELSE = 57749
const END = 57750
const LE = 57751
const GE = 57752
const NE = 57753
const NULL_SAFE_EQUAL = 57754
const IS = 57755
const LIKE = 57756
const REGEXP = 57757
const IN = 57758
const SHIFT_LEFT = 57759
const SHIFT_RIGHT = 57760
const DIV = 57761
const MOD = 57762
const UNARY = 57763
const COLLATE = 57764
const BINARY = 57765
const UNDERSCORE_ARMSCII8 = 57766
const UNDERSCORE_ASCII = 57767
const UNDERSCORE_BIG5 = 57768
const UNDERSCORE_BINARY = 57769
const UNDERSCORE_CP1250 = 57770
const UNDERSCORE_CP1251 = 57771
const UNDERSCORE_CP1256 = 57772
const UNDERSCORE_CP1257 = 57773
const UNDERSCORE_CP850 = 57774
const UNDERSCORE_CP852 = 57775
const UNDERSCORE_CP866 = 57776
const UNDERSCORE_CP932 = 57777
const UNDERSCORE_DEC8 = 57778
const UNDERSCORE_EUCJPMS = 57779
const UNDERSCORE_EUCKR = 57780
const UNDERSCORE_GB18030 = 57781
const UNDERSCORE_GB2312 = 57782
const UNDERSCORE_GBK = 57783
const UNDERSCORE_GEOSTD8 = 57784
const UNDERSCORE_GREEK = 57785
const UNDERSCORE_HEBREW = 57786
const UNDERSCORE_HP8 = 57787
const UNDERSCORE_KEYBCS2 = 57788
const UNDERSCORE_KOI8R = 57789
const UNDERSCORE_KOI8U = 57790
const UNDERSCORE_LATIN1 = 57791
const UNDERSCORE_LATIN2 = 57792
const UNDERSCORE_LATIN5 = 57793
const UNDERSCORE_LATIN7 = 57794
const UNDERSCORE_MACCE = 57795
const UNDERSCORE_MACROMAN = 57796
const UNDERSCORE_SJIS = 57797
const UNDERSCORE_SWE7 = 57798
const UNDERSCORE_TIS620 = 57799
const UNDERSCORE_UCS2 = 57800
const UNDERSCORE_UJIS = 57801
const UNDERSCORE_UTF16 = 57802
const UNDERSCORE_UTF16LE = 57803
const UNDERSCORE_UTF32 = 57804
const UNDERSCORE_UTF8 = 57805
const UNDERSCORE_UTF8MB4 = 57806
const UNDERSCORE_UTF8MB3 = 57807
const JSON_EXTRACT_OP = 57808
const JSON_UNQUOTE_EXTRACT_OP = 57809
const CREATE = 57810
const ALTER = 57811
const DROP = 57812
const RENAME = 57813
const ANALYZE = 57814
const ANALYSE = 57815
const ADD = 57816
const FLUSH = 57817
const CHANGE = 57818
const MODIFY = 57819
const DEALLOCATE = 57820
const REVERT = 57821
const SCHEMA = 57822
const TABLE = 57823
const INDEX = 57824
const VIEW = 57825
const TO = 57826
const IGNORE = 57827
const IF = 57828
const PRIMARY = 57829
const COLUMN = 57830
const SPATIAL = 57831
const FULLTEXT = 57832
const KEY_BLOCK_SIZE = 57833
const CHECK = 57834
const INDEXES = 57835
const ACTION = 57836
const CASCADE = 57837
const CONSTRAINT = 57838
const FOREIGN = 57839
const NO = 57840
const REFERENCES = 57841
const RESTRICT = 57842
const SHOW = 57843
const DESCRIBE = 57844
const EXPLAIN = 57845
const ESCAPE = 57846
const REPAIR = 57847
const OPTIMIZE = 57848
const TRUNCATE = 57849
const COALESCE = 57850
const EXCHANGE = 57851
const REBUILD = 57852
const PARTITIONING = 57853
const REMOVE = 57854
const PREPARE = 57855
const EXECUTE = 57856
const MAXVALUE = 57857
const PARTITION = 57858
const REORGANIZE = 57859
const LESS = 57860
const THAN = 57861
const PROCEDURE = 57862
const TRIGGER = 57863
const VINDEX = 57864
const VINDEXES = 57865
const DIRECTORY = 57866
const NAME = 57867
const UPGRADE = 57868
const STATUS = 57869
const VARIABLES = 57870
const WARNINGS = 57871
const CASCADED = 57872
const DEFINER = 57873
const OPTION = 57874
const SQL = 57875
const UNDEFINED = 57876
const SEQUENCE = 57877
const MERGE = 57878
const TEMPORARY = 57879
const TEMPTABLE = 57880
const INVOKER = 57881
const SECURITY = 57882
const FIRST = 57883
const AFTER = 57884
const LAST = 57885
const CANCEL = 57886
const RETRY = 57887
const COMPLETE = 57888
const CLEANUP = 57889
const THROTTLE = 57890
const UNTHROTTLE = 57891
const EXPIRE = 57892
const RATIO = 57893
const BEGIN = 57894
const START = 57895
const TRANSACTION = 57896
const COMMIT = 57897
const ROLLBACK = 57898
const SAVEPOINT = 57899
const RELEASE = 57900
const WORK = 57901
const BIT = 57902
const TINYINT = 57903
const SMALLINT = 57904
const MEDIUMINT = 57905
const INT = 57906
const INTEGER = 57907
const BIGINT = 57908
const INTNUM = 57909
const REAL = 57910
const DOUBLE = 57911
const FLOAT_TYPE = 57912
const DECIMAL_TYPE = 57913
const NUMERIC = 57914
const DATE = 57915
const TIME = 57916
const TIMESTAMP = 57917
const INTERVAL = 57918
const CHAR = 57919
const VARCHAR = 57920
const BOOL = 57921
const CHARACTER = 57922
const VARBINARY = 57923
const NCHAR = 57924
const TEXT = 57925
const JSON = 57926
const JSON_SCHEMA_VALID = 57927
const JSON_SCHEMA_VALIDATION_REPORT = 57928
const ENUM = 57929
const GEOMETRY = 57930
const POINT = 57931
const LINESTRING = 57932
const POLYGON = 57933
const GEOMETRYCOLLECTION = 57934
const MULTIPOINT = 57935
const MULTILINESTRING = 57936
const MULTIPOLYGON = 57937
const ASCII = 57938
const UNICODE = 57939
const NULLX = 57940
const AUTO_INCREMENT = 57941
const APPROXNUM = 57942
const SIGNED = 57943
const UNSIGNED = 57944
const ZEROFILL = 57945
const CODE = 57946
const COLLATION = 57947
const COLUMNS = 57948
const DATABASES = 57949
const ENGINES = 57950
const EVENT = 57951
const EXTENDED = 57952
const FIELDS = 57953
const FULL = 57954
const FUNCTION = 57955
const GTID_EXECUTED = 57956
const KEYSPACES = 57957
const OPEN = 57958
const PLUGINS = 57959
const PRIVILEGES = 57960
const PROCESSLIST = 57961
const SCHEMAS = 57962
const TABLES = 57963
const TRIGGERS = 57964
const USER = 57965
const VGTID_EXECUTED = 57966
const VSCHEMA = 57967
const NAMES = 57968
const GLOBAL = 57969
const SESSION = 57970
const ISOLATION = 57971
const LEVEL = 57972
const READ = 57973
const WRITE = 57974
const ONLY = 57975
const REPEATABLE = 57976
const COMMITTED = 57977
const UNCOMMITTED = 57978
const SERIALIZABLE = 57979
const CURRENT_TIMESTAMP = 57980
const DATABASE = 57981
const CURRENT_DATE = 57982
const NOW = 57983
const CURRENT_TIME = 57984
const LOCALTIME = 57985
const LOCALTIMESTAMP = 57986
const CURRENT_USER = 57987
const UTC_DATE = 57988
const UTC_TIME = 57989
const UTC_TIMESTAMP = 57990
const DAY = 57991
const DAY_HOUR = 57992
const DAY_MICROSECOND = 57993
const DAY_MINUTE = 57994
const DAY_SECOND = 57995
const HOUR = 57996
const HOUR_MICROSECOND = 57997
const HOUR_MINUTE = 57998
const HOUR_SECOND = 57999
const MICROSECOND = 58000
const MINUTE = 58001
const MINUTE_MICROSECOND = 58002
const MINUTE_SECOND = 58003
const MONTH = 58004
const QUARTER = 58005
const SECOND = 58006
const SECOND_MICROSECOND = 58007
const YEAR_MONTH = 58008
const WEEK = 58009
const YEAR = 58010
const REPLACE = 58011
const CONVERT = 58012
const CAST = 58013
const SUBSTR = 58014
const SUBSTRING = 58015
const GROUP_CONCAT = 58016
const SEPARATOR = 58017
const TIMESTAMPADD = 58018
const TIMESTAMPDIFF = 58019
const WEIGHT_STRING = 58020
const LTRIM = 58021
const RTRIM = 58022
const TRIM = 58023
const JSON_ARRAY = 58024
const JSON_OBJECT = 58025
const JSON_QUOTE = 58026
const JSON_DEPTH = 58027
const JSON_TYPE = 58028
const JSON_LENGTH = 58029
const JSON_VALID = 58030
const JSON_ARRAY_APPEND = 58031
const JSON_ARRAY_INSERT = 58032
const JSON_INSERT = 58033
const JSON_MERGE = 58034
const JSON_MERGE_PATCH = 58035
const JSON_MERGE_PRESERVE = 58036
const JSON_REMOVE = 58037
const JSON_REPLACE = 58038
const JSON_SET = 58039
const JSON_UNQUOTE = 58040
const MATCH = 58041
const AGAINST = 58042
const BOOLEAN = 58043
const LANGUAGE = 58044
const WITH = 58045
const QUERY = 58046
const EXPANSION = 58047
const WITHOUT = 58048
const VALIDATION = 58049
const UNUSED = 58050
const ARRAY = 58051
const BYTEA = 58052
const BYTE = 58053
const CUME_DIST = 58054
const DESCRIPTION = 58055
const DENSE_RANK = 58056
const EMPTY = 58057
const EXCEPT = 58058
const FIRST_VALUE = 58059
const GROUPING = 58060
const GROUPS = 58061
const JSON_TABLE = 58062
const LAG = 58063
const LAST_VALUE = 58064
const LATERAL = 58065
const LEAD = 58066
const NTH_VALUE = 58067
const NTILE = 58068
const OF = 58069
const OVER = 58070
const PERCENT_RANK = 58071
const RANK = 58072
const RECURSIVE = 58073
const ROW_NUMBER = 58074
const SYSTEM = 58075
const WINDOW = 58076
const ACTIVE = 58077
const ADMIN = 58078
const AUTOEXTEND_SIZE = 58079
const BUCKETS = 58080
const CLONE = 58081
const COLUMN_FORMAT = 58082
const COMPONENT = 58083
const DEFINITION = 58084
const ENFORCED = 58085
const ENGINE_ATTRIBUTE = 58086
const EXCLUDE = 58087
const FOLLOWING = 58088
const GEOMCOLLECTION = 58089
const GET_MASTER_PUBLIC_KEY = 58090
const HISTOGRAM = 58091
const HISTORY = 58092
const INACTIVE = 58093
const INVISIBLE = 58094
const LOCKED = 58095
const MASTER_COMPRESSION_ALGORITHMS = 58096
const MASTER_PUBLIC_KEY_PATH = 58097
const MASTER_TLS_CIPHERSUITES = 58098
const MASTER_ZSTD_COMPRESSION_LEVEL = 58099
const NESTED = 58100
const NETWORK_NAMESPACE = 58101
const NOWAIT = 58102
const NULLS = 58103
const OJ = 58104
const OLD = 58105
const OPTIONAL = 58106
const ORDINALITY = 58107
const ORGANIZATION = 58108
const OTHERS = 58109
const PARTIAL = 58110
const PATH = 58111
const PERSIST = 58112
const PERSIST_ONLY = 58113
const PRECEDING = 58114
const PRIVILEGE_CHECKS_USER = 58115
const PROCESS = 58116
const RANDOM = 58117
const REFERENCE = 58118
const REQUIRE_ROW_FORMAT = 58119
const RESOURCE = 58120
const RESPECT = 58121
const RESTART = 58122
const RETAIN = 58123
const REUSE = 58124
const ROLE = 58125
const SECONDARY = 58126
const SECONDARY_ENGINE = 58127
const SECONDARY_ENGINE_ATTRIBUTE = 58128
const SECONDARY_LOAD = 58129
const SECONDARY_UNLOAD = 58130
const SIMPLE = 58131
const SKIP = 58132
const SRID = 58133
const THREAD_PRIORITY = 58134
const TIES = 58135
const UNBOUNDED = 58136
const VCPU = 58137
const VISIBLE = 58138
const RETURNING = 58139
const FORMAT = 58140
const TREE = 58141
const TRADITIONAL = 58142
const LOCAL = 58143
const LOW_PRIORITY = 58144
const NO_WRITE_TO_BINLOG = 58145
const LOGS = 58146
const ERROR = 58147
const GENERAL = 58148
const HOSTS = 58149
const OPTIMIZER_COSTS = 58150
const USER_RESOURCES = 58151
const SLOW = 58152
const CHANNEL = 58153
const RELAY = 58154
const EXPORT = 58155
const AVG_ROW_LENGTH = 58156
const CONNECTION = 58157
const CHECKSUM = 58158
const DELAY_KEY_WRITE = 58159
const ENCRYPTION = 58160
const INSERT_METHOD = 58161
const MAX_ROWS = 58162
const MIN_ROWS = 58163
const PACK_KEYS = 58164
const PASSWORD = 58165
const FIXED = 58166
const DYNAMIC = 58167
const COMPRESSED = 58168
const REDUNDANT = 58169
const COMPACT = 58170
const ROW_FORMAT = 58171
const STATS_AUTO_RECALC = 58172
const STATS_PERSISTENT = 58173
const STATS_SAMPLE_PAGES = 58174
const STORAGE = 58175
const MEMORY = 58176
const DISK = 58177

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"STOP",
	"LOG_VERBOSITY",
	"ON_ERROR",
	"FORCE_NULL",
	"FORCE_NOT_NULL",
	"FORCE_QUOTE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"DATE",
	"TIME",
	"TIMESTAMP",
	"INTERVAL",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"YEAR",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTEA",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 48,
	13, 48,
	38, 717,
	-2, 38,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	1, 176,
	853, 176,
	-2, 184,
	-1, 51,
	1, 504,
	853, 504,
	-2, 184,
	-1, 60,
	35, 633,
	499, 633,
	510, 633,
	544, 645,
	545, 645,
	-2, 635,
	-1, 65,
	501, 658,
	-2, 656,
	-1, 120,
	498, 1135,
	-2, 148,
	-1, 122,
	1, 177,
	853, 177,
	-2, 184,
	-1, 135,
	399, 184,
	438, 184,
	597, 184,
	-2, 513,
	-1, 136,
	400, 410,
	504, 410,
	-2, 497,
	-1, 731,
	482, 1159,
	-2, 1152,
	-1, 732,
	482, 1160,
	-2, 1153,
	-1, 733,
	482, 1161,
	-2, 1154,
	-1, 744,
	354, 1344,
	482, 1344,
	483, 1344,
	484, 1344,
	-2, 307,
	-1, 745,
	354, 1385,
	482, 1385,
	483, 1385,
	484, 1385,
	-2, 306,
	-1, 746,
	354, 1596,
	482, 1596,
	483, 1596,
	484, 1596,
	-2, 308,
	-1, 808,
	328, 728,
	-2, 743,
	-1, 843,
	414, 1574,
	-2, 140,
	-1, 844,
	414, 1393,
	-2, 141,
	-1, 850,
	414, 1469,
	-2, 1129,
	-1, 999,
	509, 42,
	514, 42,
	-2, 421,
	-1, 1058,
	1, 555,
	853, 555,
	-2, 184,
	-1, 1257,
	482, 1596,
	-2, 310,
	-1, 1285,
	328, 729,
	-2, 748,
	-1, 1286,
	328, 730,
	-2, 749,
	-1, 1337,
	1, 460,
	853, 460,
	-2, 184,
	-1, 1415,
	509, 43,
	514, 43,
	-2, 422,
	-1, 1674,
	482, 1165,
	-2, 1156,
	-1, 1752,
	1, 1122,
	355, 1122,
	853, 1122,
	-2, 1491,
	-1, 1757,
	1, 461,
	853, 461,
	-2, 184,
	-1, 1763,
	354, 419,
	357, 419,
	358, 419,
	359, 419,
	-2, 1412,
	-1, 1764,
	354, 420,
	357, 420,
	358, 420,
	359, 420,
	-2, 1439,
	-1, 1766,
	25, 205,
	-2, 207,
	-1, 1993,
	355, 40,
	-2, 785,
	-1, 2048,
	346, 124,
	355, 124,
	-2, 804,
	-1, 2409,
	355, 40,
	-2, 786,
	-1, 2453,
	7, 54,
	18, 54,
	20, 54,
	356, 54,
	-2, 777,
	-1, 2668,
	22, 1472,
	32, 1472,
	365, 1472,
	439, 1472,
	577, 1472,
	578, 1472,
	579, 1472,
	580, 1472,
	581, 1472,
	582, 1472,
	583, 1472,
	585, 1472,
	586, 1472,
	587, 1472,
	588, 1472,
	589, 1472,
	590, 1472,
	591, 1472,
	592, 1472,
	593, 1472,
	594, 1472,
	595, 1472,
	596, 1472,
	597, 1472,
	598, 1472,
	600, 1472,
	601, 1472,
	604, 1472,
	605, 1472,
	606, 1472,
	607, 1472,
	608, 1472,
	609, 1472,
	610, 1472,
	611, 1472,
	612, 1472,
	718, 1472,
	727, 1472,
	-2, 574,
}

const psqPrivate = 57344

const psqLast = 49676

var psqAct = [...]int{
	731, 2516, 2517, 741, 2515, 2720, 2615, 2693, 1754, 734,
	2694, 2666, 2494, 1340, 2200, 2343, 2288, 2295, 1687, 1948,
	2578, 2623, 724, 38, 820, 2415, 1709, 2414, 649, 1112,
	2301, 1262, 3, 2014, 2018, 653, 2599, 1300, 725, 2021,
	101, 2165, 2198, 801, 735, 722, 2199, 646, 1778, 736,
	723, 675, 2332, 2444, 2043, 2022, 172, 2231, 2019, 172,
	645, 613, 172, 1389, 1793, 2148, 2112, 627, 647, 172,
	1816, 1069, 1799, 1844, 2405, 2078, 848, 172, 1743, 2032,
	962, 1732, 2016, 1287, 1731, 1997, 1421, 1984, 1833, 151,
	37, 1585, 172, 1668, 133, 1574, 1400, 1715, 1644, 1801,
	172, 1815, 1533, 2083, 641, 805, 2050, 809, 39, 1307,
	1413, 1329, 963, 1688, 1734, 627, 1265, 658, 627, 172,
	627, 1487, 803, 1597, 1643, 823, 1194, 1550, 1131, 1483,
	1420, 969, 966, 1813, 1000, 970, 1470, 1313, 996, 1789,
	997, 1326, 1328, 1050, 845, 1779, 1110, 1492, 1384, 1408,
	815, 131, 1054, 2128, 2127, 1858, 94, 2473, 1132, 821,
	1457, 1097, 2156, 1640, 152, 125, 123, 124, 1030, 175,
	176, 177, 835, 616, 1132, 810, 2157, 175, 176, 177,
	2637, 1684, 1685, 2636, 2520, 1539, 2520, 108, 1538, 1537,
	1536, 165, 1535, 811, 639, 1528, 640, 2650, 100, 1980,
	829, 134, 834, 813, 2393, 2119, 594, 96, 81, 1848,
	2697, 616, 989, 2727, 126, 127, 1671, 2692, 2707, 2122,
	1543, 1807, 1846, 1007, 102, 994, 1201, 1033, 1032, 2726,
	110, 111, 1021, 114, 1027, 90, 120, 2660, 2676, 2716,
	636, 2632, 169, 2705, 1803, 589, 103, 83, 2495, 995,
	2624, 614, 2674, 1847, 2233, 616, 842, 1787, 991, 2291,
	849, 2680, 2681, 1141, 2659, 797, 798, 799, 800, 2303,
	2304, 808, 988, 2637, 2631, 2675, 83, 2164, 83, 1141,
	83, 749, 750, 85, 165, 1894, 2671, 126, 987, 986,
	985, 804, 2377, 1399, 1469, 1782, 1981, 609, 1034, 2284,
	837, 838, 1725, 1197, 2155, 1873, 802, 1891, 127, 1872,
	607, 637, 1087, 2059, 1056, 1051, 2058, 1748, 795, 2060,
	2285, 2286, 1036, 1037, 1038, 2616, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 126, 1749, 1750, 822, 1104,
	1330, 1106, 1331, 794, 2166, 1062, 1063, 2070, 9, 604,
	1109, 616, 1686, 2087, 1137, 1088, 978, 1130, 612, 981,
	812, 82, 2689, 1092, 1093, 1057, 2698, 2367, 1163, 983,
	1137, 617, 1356, 2302, 8, 1081, 1065, 2365, 1103, 1105,
	625, 7, 1769, 1768, 2345, 2305, 2420, 2699, 2583, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1172, 1171, 1173, 1174,
	982, 2081, 2082, 1527, 616, 623, 974, 2417, 980, 617,
	1529, 1530, 1618, 1607, 1608, 1609, 1610, 1620, 1611, 1612,
	1613, 1625, 1621, 1614, 1615, 1622, 1623, 1624, 1616, 1617,
	1619, 1626, 1089, 630, 595, 129, 597, 1451, 616, 619,
	2113, 618, 600, 1035, 599, 602, 610, 603, 1108, 598,
	1094, 608, 1082, 617, 611, 975, 606, 620, 1862, 1055,
	1095, 2346, 977, 976, 1834, 1866, 2421, 1101, 2651, 1780,
	1781, 1102, 2703, 984, 1076, 2132, 1471, 2418, 1782, 1077,
	1452, 1107, 1453, 2133, 1057, 1096, 2428, 1075, 1039, 1074,
	2177, 2176, 2175, 2169, 1865, 2168, 2173, 1100, 2347, 2167,
	1863, 2648, 984, 1271, 2171, 1175, 2170, 1175, 983, 1294,
	982, 2305, 1090, 1091, 2622, 1892, 2147, 2487, 967, 1867,
	967, 2724, 965, 2172, 2174, 1003, 2728, 1085, 2683, 967,
	1002, 1419, 1985, 1987, 2545, 1864, 2519, 1484, 2519, 2063,
	1136, 1133, 1134, 1135, 1140, 1142, 1139, 1814, 1138, 617,
	836, 2144, 1853, 153, 1698, 154, 1136, 1133, 1134, 1135,
	1140, 1142, 1139, 1029, 1138, 2437, 1995, 1480, 1755, 1118,
	1481, 1049, 1015, 2292, 2422, 164, 1845, 1012, 1053, 2096,
	1861, 1009, 1009, 1002, 2072, 1397, 1396, 1011, 2160, 172,
	1906, 172, 1395, 92, 172, 1806, 1726, 2294, 1009, 1393,
	593, 588, 617, 1056, 2140, 1475, 1843, 2554, 2139, 990,
	1870, 2289, 984, 2538, 627, 1113, 627, 2460, 1892, 2256,
	2232, 2055, 92, 2013, 92, 1972, 92, 1821, 2303, 2304,
	621, 627, 627, 1680, 2290, 1418, 617, 2079, 2679, 1176,
	1177, 1114, 1175, 1174, 1805, 1317, 153, 1241, 154, 1067,
	2630, 1301, 1780, 1781, 2283, 38, 2429, 2427, 2426, 2425,
	2424, 1098, 615, 1493, 818, 1124, 2296, 1072, 164, 1078,
	1079, 1080, 2150, 2150, 1071, 117, 2012, 2149, 2149, 1008,
	1008, 2626, 2678, 156, 2584, 1002, 1005, 1006, 1804, 967,
	2250, 1986, 1478, 999, 1003, 1031, 1008, 1332, 1128, 2183,
	1598, 1022, 1002, 2476, 2098, 1383, 1024, 1545, 1547, 1548,
	1025, 1023, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172,
	1171, 1173, 1174, 1178, 1179, 1180, 1181, 1302, 1146, 1598,
	1546, 1922, 2302, 1186, 1145, 1189, 2546, 1146, 2419, 2475,
	1146, 1146, 2433, 118, 2305, 1472, 1838, 1473, 1146, 1434,
	1433, 1474, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1171,
	1173, 1174, 1115, 1163, 1417, 1158, 1260, 1159, 1019, 1018,
	2729, 1716, 1717, 1162, 1146, 2700, 156, 1255, 1182, 1350,
	2461, 1160, 1161, 1157, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1172, 1171, 1173, 1174, 172, 1555, 2702, 627, 627,
	1146, 172, 1167, 1168, 1169, 1170, 1172, 1171, 1173, 1174,
	1556, 1557, 1554, 749, 750, 172, 1169, 1170, 1172, 1171,
	1173, 1174, 1294, 1274, 2548, 1277, 1275, 2482, 2474, 1281,
	1163, 2159, 627, 1602, 1261, 805, 172, 1898, 1899, 1900,
	2326, 627, 1146, 1146, 2293, 803, 1280, 627, 1278, 2088,
	1810, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1171,
	1173, 1174, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1148,
	845, 92, 748, 2339, 2340, 1146, 2423, 1405, 1146, 2701,
	2547, 1146, 175, 176, 177, 1553, 2468, 2540, 1937, 2539,
	2536, 1273, 2535, 2374, 2534, 1146, 1146, 1261, 175, 176,
	177, 2506, 2062, 2480, 2467, 1203, 1918, 2411, 1146, 1266,
	2234, 2091, 1305, 2532, 2084, 1146, 1908, 1369, 1372, 1373,
	1374, 1375, 1376, 1377, 1856, 1378, 1379, 1380, 1381, 1382,
	1357, 1358, 1359, 1360, 1347, 1349, 1370, 1348, 1352, 1009,
	1353, 1354, 1146, 2121, 1355, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1247, 1248, 1249, 1250, 1251, 86, 91,
	1146, 1490, 172, 1911, 1455, 1279, 1385, 2471, 2472, 100,
	1459, 1458, 1460, 1461, 1462, 2518, 1394, 2518, 1199, 1146,
	1200, 1127, 1146, 1893, 1401, 2297, 849, 2120, 91, 1146,
	91, 1084, 91, 82, 1146, 1282, 1061, 2300, 1064, 627,
	1415, 2722, 1086, 1449, 2723, 1447, 2721, 1125, 1424, 1446,
	1322, 1323, 1426, 1427, 1126, 627, 155, 103, 1299, 157,
	158, 804, 1432, 159, 160, 1435, 1436, 172, 1438, 802,
	161, 162, 163, 1999, 1263, 1445, 2298, 1008, 1276, 1028,
	2143, 2299, 1117, 175, 176, 177, 1425, 1827, 627, 1428,
	175, 176, 177, 1996, 1825, 1146, 1431, 1477, 1371, 2688,
	1294, 1842, 1467, 1482, 2010, 2657, 627, 1351, 172, 1294,
	2000, 1099, 2571, 1494, 175, 176, 177, 2348, 1823, 1412,
	2249, 1070, 2094, 172, 175, 176, 177, 1407, 2592, 1294,
	172, 2372, 1294, 2620, 1765, 1429, 2228, 2010, 2645, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 627, 155,
	2010, 2642, 157, 158, 627, 627, 159, 160, 1423, 2638,
	1294, 2278, 2730, 161, 162, 163, 1392, 1144, 1143, 1145,
	1892, 172, 2229, 2531, 2607, 2185, 1144, 1422, 1145, 1144,
	1144, 1145, 1145, 1410, 1489, 1409, 105, 1144, 1414, 1145,
	2051, 1957, 1294, 1497, 2015, 1146, 1146, 1402, 1403, 1404,
	1501, 1430, 1503, 1504, 1505, 1506, 2389, 1294, 1398, 1510,
	2416, 2051, 2017, 1144, 1146, 1145, 627, 1998, 2625, 1146,
	1582, 1582, 2249, 1146, 1913, 2251, 1579, 1579, 2028, 1588,
	627, 1578, 1583, 1912, 1485, 1294, 1551, 2531, 2530, 1144,
	1146, 1145, 2006, 1443, 1444, 627, 627, 1558, 1448, 1560,
	1549, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 126, 987, 986, 985, 1294, 1146, 1559,
	1294, 1499, 1599, 2089, 1146, 1146, 1495, 1496, 1146, 1146,
	2227, 1144, 1144, 1145, 1145, 1146, 1304, 1917, 1641, 1500,
	2010, 1146, 2010, 2489, 1520, 1146, 1507, 1508, 1509, 1949,
	1524, 1525, 1163, 1905, 1143, 1294, 2455, 2015, 172, 2029,
	97, 1672, 627, 2389, 1144, 1552, 1145, 1144, 2225, 1145,
	1144, 98, 1145, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1172, 1171, 1173, 1174, 1144, 1144, 1145, 1145, 1747, 172,
	1641, 1909, 627, 1699, 1942, 1700, 1146, 1144, 1927, 1145,
	1697, 2391, 172, 1146, 1144, 627, 1145, 1926, 1674, 172,
	1830, 172, 1714, 172, 172, 627, 1942, 1294, 627, 1298,
	2387, 2316, 2315, 2380, 1682, 106, 1531, 1676, 1677, 627,
	2379, 1144, 38, 1145, 1479, 1966, 105, 1672, 104, 1766,
	1439, 106, 1727, 1324, 845, 2312, 2313, 845, 97, 1144,
	807, 1145, 105, 1673, 104, 99, 2312, 2311, 993, 98,
	992, 1705, 92, 99, 2029, 1294, 2580, 1730, 1144, 2569,
	1145, 1144, 2557, 1145, 2254, 1294, 1909, 1294, 1144, 627,
	1145, 1892, 2129, 1144, 1674, 1145, 1817, 1818, 1819, 2478,
	1584, 1388, 2114, 1822, 1824, 1826, 1965, 1590, 1591, 1770,
	2413, 1771, 627, 1774, 1775, 1776, 1777, 627, 1424, 1759,
	100, 1424, 1785, 1424, 1788, 1007, 1741, 1758, 1390, 627,
	1794, 627, 1692, 2141, 100, 1852, 2110, 2111, 2115, 1722,
	1784, 100, 2010, 2009, 627, 627, 733, 1795, 1796, 1707,
	1783, 1762, 1720, 1718, 1144, 1466, 1145, 1416, 1802, 1675,
	1388, 1387, 1678, 1679, 1338, 1337, 1745, 172, 1746, 172,
	849, 1386, 119, 849, 2445, 2446, 172, 1761, 2344, 1760,
	172, 172, 2052, 1909, 172, 1522, 172, 1809, 2581, 1807,
	1695, 2054, 1832, 172, 2029, 2713, 2451, 1310, 2711, 2695,
	172, 1704, 174, 2052, 2635, 174, 1964, 1963, 174, 1849,
	2597, 2029, 1892, 629, 2448, 174, 2325, 1797, 1850, 1790,
	1792, 2324, 172, 174, 1808, 1962, 1851, 627, 1837, 1812,
	1961, 1840, 1820, 1841, 1960, 2323, 2099, 2017, 174, 1854,
	1855, 2450, 1877, 1909, 2264, 2263, 174, 1797, 1836, 1835,
	1839, 1959, 2685, 2267, 1144, 1144, 1145, 1145, 2268, 2658,
	2269, 629, 2038, 2039, 629, 174, 629, 1883, 1884, 1859,
	1711, 2265, 1886, 1144, 1303, 1145, 2266, 1703, 1144, 1958,
	1145, 1887, 1144, 2255, 1145, 1952, 1951, 2238, 2314, 1950,
	1947, 1163, 1773, 1551, 1292, 1288, 1946, 2369, 1791, 1144,
	1551, 1145, 1945, 1902, 1294, 1904, 1943, 2249, 167, 2573,
	1289, 1876, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172,
	1171, 1173, 1174, 122, 1828, 1903, 2525, 1144, 2524, 1145,
	979, 1292, 1288, 1144, 1144, 1145, 1145, 1144, 1144, 1145,
	1145, 793, 828, 1327, 1144, 998, 1145, 1289, 2682, 1561,
	1144, 2307, 1145, 2068, 1144, 128, 1145, 1939, 2092, 1310,
	1890, 107, 1017, 1296, 1938, 1016, 2354, 2153, 1116, 1440,
	1441, 1442, 1552, 1594, 2034, 2037, 2038, 2039, 2035, 1552,
	2036, 2040, 1901, 172, 1294, 2118, 127, 97, 1595, 1907,
	172, 1464, 1294, 1463, 99, 1454, 627, 1582, 98, 2247,
	1294, 95, 2718, 1579, 627, 1144, 92, 1145, 1990, 168,
	1978, 2321, 1144, 1880, 1145, 1716, 1717, 2572, 2493, 2306,
	1921, 2042, 1994, 1708, 2034, 2037, 2038, 2039, 2035, 627,
	2036, 2040, 106, 2406, 2445, 2446, 2237, 172, 826, 827,
	1896, 172, 106, 105, 2236, 104, 104, 2604, 2603, 2551,
	2327, 809, 833, 105, 99, 104, 2061, 1674, 840, 1274,
	1935, 2020, 2107, 1829, 106, 2023, 825, 105, 2550, 2432,
	2015, 2715, 2714, 2715, 2190, 105, 1928, 1693, 1318, 1311,
	627, 112, 113, 1010, 1013, 1014, 2714, 2552, 2466, 2007,
	817, 1020, 109, 40, 1058, 93, 1, 1266, 2544, 1979,
	1052, 2226, 1673, 1988, 1309, 2470, 2673, 605, 627, 1683,
	1919, 1264, 2696, 2669, 172, 2670, 1523, 1456, 1450, 810,
	2071, 172, 1401, 2074, 2011, 2496, 2008, 2044, 1642, 2577,
	627, 1800, 1001, 135, 1756, 1757, 2073, 811, 2653, 1424,
	1424, 116, 960, 2049, 115, 1004, 1083, 2064, 1831, 2053,
	2086, 2069, 1767, 1786, 2126, 1772, 2108, 2080, 1344, 2056,
	2125, 1342, 172, 1343, 172, 172, 172, 172, 172, 1341,
	1346, 1802, 2065, 1345, 1929, 2392, 2104, 172, 172, 1526,
	624, 2041, 170, 1333, 1476, 1312, 1969, 1970, 2085, 1026,
	596, 2317, 1857, 172, 601, 1073, 1187, 1521, 2106, 2235,
	2090, 2057, 846, 1701, 1702, 1291, 839, 1290, 1694, 2095,
	1992, 2025, 2646, 2066, 627, 1306, 2549, 2124, 2105, 2100,
	2101, 2102, 2431, 1920, 1596, 1407, 1735, 1544, 651, 650,
	648, 2001, 1724, 1149, 1982, 1983, 1319, 2033, 2123, 2031,
	1285, 1286, 1291, 2030, 1290, 2523, 1878, 1742, 2447, 2116,
	2117, 1582, 2443, 1582, 2178, 2665, 1582, 1579, 1737, 1579,
	803, 1582, 1579, 2182, 1733, 2005, 2161, 1579, 2004, 659,
	652, 644, 2463, 627, 2334, 2162, 1869, 2142, 1871, 2145,
	2067, 2131, 1129, 2201, 1284, 2201, 1468, 638, 2201, 973,
	1593, 2582, 2203, 2201, 1895, 2213, 2214, 2215, 2216, 2206,
	2376, 2163, 2220, 1283, 2207, 1605, 1606, 172, 68, 2179,
	43, 627, 1633, 632, 627, 2649, 1582, 1120, 32, 31,
	30, 29, 1579, 24, 23, 22, 21, 2243, 20, 26,
	172, 172, 172, 172, 172, 174, 19, 174, 2239, 2245,
	174, 2194, 172, 2220, 2151, 18, 172, 2152, 17, 172,
	2691, 172, 2717, 121, 172, 172, 172, 55, 49, 47,
	629, 2240, 629, 2257, 2020, 2219, 132, 2277, 1281, 1274,
	130, 2221, 2222, 2223, 2224, 51, 46, 629, 629, 166,
	1059, 53, 2230, 2208, 2209, 2210, 2211, 2212, 50, 52,
	44, 2241, 36, 2319, 4, 28, 27, 172, 16, 15,
	172, 2248, 14, 13, 12, 2279, 11, 10, 2280, 6,
	5, 627, 2259, 2260, 2258, 2262, 627, 2261, 35, 34,
	2270, 33, 2308, 1123, 25, 2, 0, 0, 0, 0,
	0, 0, 1489, 2281, 0, 0, 2274, 2275, 0, 0,
	0, 0, 2331, 0, 0, 172, 0, 0, 172, 2329,
	0, 2309, 2310, 2287, 0, 0, 0, 0, 2355, 0,
	0, 0, 0, 2318, 0, 2336, 0, 0, 2342, 0,
	2335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1802, 0, 2330, 0, 0,
	2341, 2328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2350, 0, 0, 0, 0, 2386, 0, 0, 0,
	2357, 0, 0, 2352, 2353, 0, 627, 0, 0, 2358,
	2361, 2362, 0, 0, 2363, 2364, 172, 2366, 0, 2368,
	0, 174, 0, 0, 629, 629, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 627, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 629, 172,
	0, 0, 174, 0, 2410, 2020, 2438, 629, 2412, 0,
	2023, 2442, 0, 629, 2023, 2440, 0, 2469, 2407, 2408,
	0, 0, 0, 0, 0, 0, 172, 2436, 2434, 2452,
	0, 2456, 0, 2458, 2459, 2449, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 172, 172, 0, 627, 165,
	0, 0, 0, 2457, 0, 0, 0, 2336, 0, 0,
	2109, 0, 2335, 2464, 2465, 627, 627, 627, 627, 0,
	0, 0, 0, 127, 2488, 148, 0, 0, 2483, 0,
	2479, 0, 2481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2491, 2492, 0, 0, 0, 0, 0, 0,
	0, 1582, 0, 1582, 0, 0, 0, 1579, 0, 1579,
	0, 2505, 0, 0, 0, 0, 0, 2501, 174, 0,
	0, 2502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2201, 0, 2201, 0, 0, 0, 0,
	2511, 0, 0, 0, 0, 2521, 2512, 0, 0, 1356,
	0, 2529, 0, 0, 2528, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1582,
	0, 629, 2541, 2542, 2543, 1579, 0, 2533, 0, 0,
	2559, 2537, 0, 174, 0, 0, 2023, 2553, 0, 0,
	0, 0, 0, 803, 0, 0, 2555, 0, 0, 0,
	0, 2561, 0, 0, 629, 2563, 627, 803, 0, 0,
	2560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 174, 0, 38, 2594, 2595, 0,
	2574, 0, 0, 627, 1582, 2579, 2576, 627, 627, 174,
	1579, 0, 0, 0, 0, 2598, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 629, 627, 0, 2608, 627, 0,
	629, 629, 0, 2605, 2606, 0, 0, 0, 0, 0,
	627, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	2613, 627, 172, 2610, 2614, 2617, 0, 2611, 2020, 0,
	0, 0, 0, 0, 0, 38, 2619, 0, 0, 0,
	0, 0, 0, 0, 0, 2621, 0, 2627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 0, 627, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 627,
	0, 0, 0, 2647, 172, 627, 2652, 0, 0, 0,
	0, 629, 629, 2661, 0, 2579, 2654, 0, 0, 0,
	0, 0, 2664, 2672, 2677, 0, 146, 0, 0, 0,
	0, 0, 0, 2684, 0, 0, 0, 0, 0, 0,
	0, 2690, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 153, 0, 154, 0, 1582, 0, 2704, 0, 2708,
	2706, 1579, 2712, 0, 2710, 0, 2709, 0, 0, 143,
	144, 142, 141, 164, 174, 0, 2719, 0, 629, 0,
	0, 2725, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 1582, 0, 2733, 2734, 2595, 2732, 1579, 1406, 0,
	0, 0, 2731, 0, 0, 174, 0, 0, 629, 0,
	0, 127, 0, 148, 0, 0, 0, 165, 174, 0,
	0, 629, 0, 0, 0, 174, 0, 174, 0, 174,
	174, 629, 1383, 0, 629, 0, 0, 0, 0, 0,
	732, 127, 0, 148, 0, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 145,
	147, 0, 0, 136, 0, 138, 139, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 173, 0, 0, 173,
	0, 0, 173, 0, 0, 0, 1350, 628, 0, 173,
	0, 0, 0, 0, 0, 0, 0, 173, 629, 0,
	0, 0, 0, 629, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 629, 0, 629, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 629, 0, 0, 0, 628, 0, 0, 628, 173,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 174, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 174, 174, 0, 0,
	174, 0, 174, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 83, 41, 42, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 89, 629, 0, 0, 45, 74, 75, 0,
	72, 76, 0, 0, 1369, 1372, 1373, 1374, 1375, 1376,
	1377, 0, 1378, 1379, 1380, 1381, 1382, 1357, 1358, 1359,
	1360, 1347, 1349, 1370, 1348, 1352, 0, 1353, 1354, 140,
	0, 1355, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 154, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 144, 142,
	141, 164, 0, 0, 0, 0, 0, 73, 0, 153,
	0, 154, 0, 0, 0, 1371, 0, 0, 0, 174,
	0, 0, 0, 0, 1351, 0, 174, 143, 144, 142,
	141, 164, 629, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 0, 155, 0, 0, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 161, 162,
	163, 0, 0, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 715, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 145, 147, 0,
	0, 136, 0, 138, 139, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 145, 147, 0,
	0, 136, 0, 138, 139, 0, 0, 0, 0, 156,
	0, 0, 626, 0, 629, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 92, 0,
	847, 0, 0, 964, 0, 971, 0, 0, 174, 0,
	174, 174, 174, 174, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 173, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 628, 628, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	54, 57, 56, 59, 0, 0, 71, 140, 0, 79,
	149, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 629, 0, 0,
	629, 0, 60, 88, 87, 0, 69, 70, 58, 0,
	149, 0, 0, 150, 77, 78, 174, 174, 174, 174,
	174, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 174, 0, 0, 174, 0, 174, 0, 0,
	174, 174, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 63, 0, 64, 65, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 174, 0, 0, 0,
	0, 0, 155, 0, 0, 157, 158, 629, 0, 159,
	160, 0, 629, 0, 0, 0, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 628, 628,
	0, 173, 155, 0, 0, 157, 158, 0, 0, 159,
	160, 174, 0, 0, 174, 173, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 173, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 628, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 174, 174, 0, 629, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 629, 629, 629, 628, 0, 0, 0, 847,
	0, 847, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 628, 0,
	0, 0, 0, 0, 628, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	628, 0, 0, 629, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 1270, 628, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 629, 174, 0,
	0, 0, 1334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 629, 0, 0, 0, 0, 0, 173,
	0, 0, 628, 0, 0, 629, 0, 0, 0, 0,
	174, 629, 173, 0, 0, 628, 0, 0, 0, 173,
	0, 173, 0, 173, 173, 628, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 1258, 628, 0, 1258,
	964, 0, 0, 0, 0, 0, 1258, 0, 0, 628,
	1293, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 628, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 173,
	0, 1486, 0, 716, 0, 0, 173, 0, 0, 0,
	173, 173, 0, 0, 173, 0, 173, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 0, 847,
	847, 0, 173, 0, 0, 0, 0, 628, 0, 171,
	0, 0, 592, 0, 0, 622, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 1575, 832, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 1589, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 0,
	1603, 1604, 683, 685, 684, 694, 695, 696, 697, 698,
	699, 2568, 2564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1696, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 1710, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 0, 0, 847, 0, 0, 0, 0, 0, 628,
	847, 0, 0, 847, 0, 0, 0, 173, 0, 0,
	0, 173, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 173, 0, 0, 964, 0, 0,
	0, 173, 971, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 0, 964, 0, 1575, 0, 0, 0,
	0, 0, 689, 690, 0, 0, 0, 0, 0, 1575,
	1575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 173, 173, 173, 173, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 726, 0, 676, 730, 678,
	727, 728, 0, 674, 677, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1889, 679, 680, 682, 686, 687, 2565, 2566,
	2567, 693, 701, 703, 704, 702, 705, 706, 707, 710,
	711, 712, 713, 708, 709, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 628, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 173, 173, 173, 173, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 173, 0, 0, 173,
	0, 173, 0, 0, 173, 173, 173, 0, 0, 0,
	0, 0, 592, 0, 592, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	173, 1710, 0, 0, 0, 0, 0, 0, 0, 2002,
	0, 628, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1258, 0, 0, 2027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2093, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 1710, 173, 0, 0, 0,
	0, 1295, 1297, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 84, 0, 0, 628, 0, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	806, 0, 0, 0, 592, 0, 0, 0, 0, 173,
	0, 0, 0, 0, 0, 0, 0, 972, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1575,
	0, 0, 0, 0, 173, 173, 173, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 628, 628, 628, 0,
	0, 0, 0, 1258, 0, 1258, 1991, 0, 1258, 1581,
	747, 0, 0, 1258, 0, 1580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2242, 0, 0, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 592, 0, 0, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	0, 0, 0, 0, 1259, 0, 0, 1259, 0, 0,
	0, 0, 0, 0, 1259, 0, 628, 0, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 1258,
	0, 1710, 0, 628, 0, 0, 0, 628, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 592, 0, 628, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	628, 0, 1511, 1512, 592, 592, 592, 592, 592, 592,
	592, 628, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 628, 0, 1600,
	0, 2242, 0, 1601, 0, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 173, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 0, 832, 0, 0,
	2439, 0, 2441, 0, 832, 832, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 1295, 1681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 1488, 832, 832, 832, 832,
	832, 0, 0, 0, 0, 0, 0, 1706, 0, 0,
	0, 0, 0, 1710, 0, 0, 0, 0, 0, 0,
	0, 1690, 0, 0, 0, 0, 0, 0, 0, 0,
	2497, 2498, 2499, 2500, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 1111, 0, 592, 0, 0, 0, 0,
	0, 1488, 592, 1258, 592, 1258, 592, 1744, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1811, 0, 0, 0, 0, 0, 806, 1183,
	1184, 1185, 0, 1188, 0, 1190, 1191, 1192, 1193, 0,
	1196, 1198, 1198, 0, 1198, 1202, 1202, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 0, 1242, 1243, 1244, 1245, 1246,
	0, 0, 0, 0, 1202, 1202, 1202, 1202, 1202, 0,
	0, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2601, 0,
	0, 0, 2601, 2601, 0, 0, 0, 0, 0, 0,
	592, 0, 592, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 592, 592, 0, 0, 592, 1258, 1881,
	2612, 0, 0, 1710, 1268, 0, 592, 0, 806, 0,
	806, 0, 0, 592, 806, 1710, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 1710, 0, 0, 0,
	0, 642, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1910, 0, 0, 0, 1914,
	0, 1915, 1916, 824, 0, 0, 0, 0, 0, 0,
	1924, 847, 847, 1925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2662, 0, 0, 0, 0, 0,
	2667, 0, 0, 0, 0, 0, 0, 0, 0, 1930,
	1931, 1932, 1933, 1934, 0, 1936, 0, 832, 0, 0,
	0, 1940, 0, 1941, 0, 0, 0, 1944, 0, 0,
	0, 0, 0, 0, 0, 1953, 1954, 1955, 1956, 0,
	0, 0, 0, 0, 2667, 0, 0, 0, 1967, 1968,
	0, 0, 0, 0, 0, 0, 1973, 1974, 1975, 1976,
	1977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1581, 747, 0, 0,
	0, 0, 1580, 832, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 592, 0, 0, 2026,
	0, 0, 0, 1690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 592, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 1267, 0, 0,
	0, 1111, 1111, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 2103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 592, 592, 592,
	592, 592, 0, 0, 0, 0, 631, 0, 0, 0,
	592, 592, 0, 0, 796, 0, 0, 0, 0, 0,
	2189, 0, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 2202,
	0, 0, 0, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	2217, 2218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 1259, 0, 0, 1259, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2252, 2253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2272, 2273, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 1728, 0, 0,
	1736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1259, 592, 592, 592, 592, 592, 0, 0,
	0, 0, 0, 0, 0, 2271, 0, 0, 0, 592,
	0, 0, 1690, 0, 592, 0, 0, 592, 2282, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 1147, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 1259, 0, 2356,
	1195, 0, 0, 0, 0, 0, 2360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2370,
	2371, 2373, 2375, 0, 0, 0, 0, 0, 592, 2381,
	0, 592, 2383, 2384, 2385, 0, 0, 0, 0, 2388,
	0, 0, 0, 0, 0, 2390, 0, 0, 2394, 2395,
	2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 0, 0,
	2404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 642, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2453, 2454, 0, 0, 592,
	0, 1897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 592, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2509, 0, 0, 0, 2510, 0, 0,
	0, 0, 0, 2514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 1259, 0, 0, 1060, 0, 1066, 0,
	0, 1068, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1391, 0, 0, 2024, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 2045, 0, 2046, 2047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2585, 2586, 2587, 0, 2588, 2589,
	0, 0, 2590, 0, 2591, 0, 2593, 2596, 0, 0,
	0, 0, 0, 2600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 2618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2634, 1259, 0, 0, 0,
	2639, 0, 0, 0, 0, 0, 2640, 2641, 0, 0,
	0, 0, 0, 0, 0, 0, 2643, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 1540, 1541, 1542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2686, 0, 0, 0, 2687, 0, 0, 0,
	0, 0, 0, 1586, 1587, 0, 0, 0, 0, 0,
	0, 1592, 0, 1321, 0, 0, 0, 1690, 0, 0,
	0, 0, 0, 0, 0, 0, 1627, 1628, 1629, 1630,
	1631, 1632, 1634, 1638, 1639, 642, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1736, 1736, 1736,
	1736, 1736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2045, 806, 0, 0, 0, 1736, 0,
	0, 1736, 0, 1712, 1713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 1798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2359, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 0, 92, 0, 0, 0,
	0, 0, 737, 1581, 747, 748, 2339, 2340, 738, 740,
	0, 0, 739, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 742, 749, 750, 0, 2024,
	0, 84, 0, 2024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2462,
	2337, 2338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 0, 0, 0, 1923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2522, 0, 2526, 2527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1719,
	0, 0, 0, 0, 0, 0, 1723, 0, 1729, 0,
	0, 1534, 0, 0, 0, 2024, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	730, 0, 727, 728, 0, 0, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1206, 1213, 1216, 1217, 1225, 0, 0, 0,
	84, 0, 0, 0, 1534, 0, 1860, 0, 0, 0,
	0, 0, 0, 1868, 0, 0, 0, 1874, 1875, 0,
	0, 1879, 0, 0, 0, 0, 0, 0, 0, 0,
	1882, 0, 0, 0, 0, 0, 0, 1885, 0, 0,
	0, 0, 0, 0, 2644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1888,
	0, 92, 0, 0, 0, 0, 0, 737, 1581, 747,
	748, 2339, 2340, 738, 740, 0, 2158, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 749, 750, 0, 0, 0, 2180, 2181, 0, 0,
	0, 2184, 0, 0, 0, 2186, 2187, 2188, 0, 0,
	0, 0, 0, 0, 0, 0, 2191, 2192, 2193, 0,
	0, 1645, 2195, 0, 2196, 2197, 0, 0, 0, 2204,
	2205, 0, 0, 0, 0, 2337, 2338, 1645, 1645, 1645,
	1645, 1645, 642, 642, 642, 642, 0, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 0,
	0, 0, 0, 0, 2246, 0, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2378, 0, 0, 0, 0, 2382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2130,
	0, 2134, 2135, 2136, 2137, 2138, 0, 0, 0, 0,
	0, 0, 0, 0, 1534, 2146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2435,
	2154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2503, 0, 2504, 0, 0, 0, 0, 2507, 2508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2556, 0, 0, 2558, 0, 0,
	0, 0, 0, 0, 2320, 0, 0, 2322, 0, 0,
	0, 2562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2349, 0, 0, 2351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2609,
	642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2633, 0, 2430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 534, 251, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 1669, 0,
	660, 0, 0, 2477, 0, 665, 477, 354, 0, 342,
	0, 207, 0, 1670, 410, 294, 189, 0, 0, 0,
	0, 2484, 2485, 2486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 2628,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	672, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 667, 668, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 92, 0,
	0, 175, 176, 177, 737, 746, 747, 748, 745, 744,
	738, 740, 0, 0, 739, 225, 683, 685, 684, 694,
	695, 696, 697, 698, 699, 700, 681, 742, 749, 750,
	393, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	643, 657, 200, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 655, 830, 0, 0, 0, 720, 0,
	656, 0, 0, 664, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 719, 0, 314, 544, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 666, 213, 541,
	0, 214, 0, 373, 511, 329, 689, 690, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 726,
	718, 676, 730, 678, 727, 728, 673, 674, 677, 729,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	721, 663, 662, 0, 669, 670, 0, 679, 680, 682,
	686, 687, 688, 691, 692, 693, 701, 703, 704, 702,
	705, 706, 707, 710, 711, 712, 713, 708, 709, 714,
	661, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 0, 512, 526, 0, 0, 0, 290,
	0, 0, 352, 0, 0, 0, 270, 322, 534, 251,
	0, 0, 0, 0, 0, 205, 229, 0, 0, 0,
	0, 0, 660, 0, 414, 0, 0, 665, 477, 354,
	0, 342, 0, 207, 495, 0, 410, 294, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 0, 0, 0, 0,
	0, 0, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 672, 0, 376, 539, 480, 367, 0, 0,
	0, 0, 0, 667, 668, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 234, 0, 382, 0, 275, 0,
	92, 0, 0, 175, 176, 177, 737, 746, 747, 748,
	745, 744, 738, 740, 0, 0, 739, 225, 683, 685,
	684, 694, 695, 696, 697, 698, 699, 700, 681, 742,
	749, 750, 393, 259, 309, 266, 258, 506, 0, 496,
	1635, 1636, 1637, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 643, 657, 200, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 654, 655, 0, 0, 0, 0,
	720, 0, 656, 0, 0, 664, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 0, 0,
	0, 0, 188, 263, 446, 0, 0, 183, 0, 0,
	0, 244, 0, 719, 0, 314, 544, 0, 0, 717,
	0, 0, 0, 0, 0, 0, 315, 182, 209, 0,
	0, 381, 0, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 666,
	213, 541, 0, 214, 0, 373, 511, 329, 689, 690,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 272, 0, 0, 0, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 0, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 0, 447, 224, 527,
	474, 726, 718, 676, 730, 678, 727, 728, 673, 674,
	677, 729, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 721, 663, 662, 0, 669, 670, 0, 679,
	680, 682, 686, 687, 688, 691, 692, 693, 701, 703,
	704, 702, 705, 706, 707, 710, 711, 712, 713, 708,
	709, 714, 661, 0, 203, 344, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 298, 299, 338, 0, 0, 0, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	0, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 2655, 0, 2656,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 0, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 0, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 2283, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 0, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 2244, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 616, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 959, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 850,
	844, 843, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 0, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 1721, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	92, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 0, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 949, 936, 0, 495, 322, 534, 251,
	897, 956, 900, 901, 928, 205, 915, 923, 0, 851,
	885, 857, 277, 858, 884, 907, 0, 882, 477, 354,
	0, 342, 886, 207, 870, 0, 410, 294, 189, 855,
	859, 860, 871, 875, 877, 878, 883, 891, 896, 899,
	902, 904, 906, 909, 921, 930, 931, 937, 938, 939,
	941, 942, 944, 953, 954, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 940, 918, 925, 894,
	893, 892, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 910, 0, 913, 935, 905, 929, 874, 919, 0,
	289, 924, 952, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 922,
	948, 890, 393, 259, 309, 266, 258, 506, 0, 496,
	862, 912, 947, 0, 0, 616, 950, 341, 0, 927,
	0, 854, 920, 0, 200, 864, 955, 945, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 908, 914, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 188, 263, 446, 853, 852, 183, 0, 0,
	0, 244, 0, 466, 943, 314, 544, 946, 0, 305,
	932, 869, 0, 0, 0, 866, 315, 182, 209, 872,
	895, 381, 933, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 1325, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 959, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 221,
	0, 0, 272, 0, 0, 898, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 951, 0, 0, 850,
	844, 843, 328, 349, 435, 552, 926, 447, 224, 527,
	474, 880, 242, 876, 0, 879, 916, 917, 881, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 865, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 958, 0, 0, 549,
	0, 0, 856, 863, 0, 0, 0, 0, 265, 889,
	0, 298, 299, 338, 0, 0, 911, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 957, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	934, 290, 0, 0, 352, 0, 83, 0, 270, 322,
	534, 251, 0, 0, 0, 0, 0, 205, 229, 0,
	0, 0, 0, 0, 660, 0, 414, 0, 0, 665,
	477, 354, 0, 342, 0, 207, 495, 0, 410, 294,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 0, 0,
	0, 0, 0, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 672, 0, 376, 539, 480, 367,
	0, 0, 0, 0, 0, 667, 668, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 234, 0, 382, 0,
	275, 0, 92, 0, 0, 175, 176, 177, 737, 746,
	747, 748, 745, 744, 738, 740, 0, 0, 739, 225,
	683, 685, 684, 694, 695, 696, 697, 698, 699, 700,
	681, 742, 749, 750, 393, 259, 309, 266, 258, 506,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 643, 657, 200, 671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 655, 0, 0,
	0, 0, 720, 0, 656, 0, 0, 664, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	0, 0, 0, 0, 188, 263, 446, 0, 0, 183,
	0, 0, 0, 244, 0, 719, 0, 314, 544, 0,
	0, 717, 0, 0, 0, 0, 0, 0, 315, 182,
	209, 0, 0, 381, 0, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 516,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 666, 213, 541, 0, 214, 0, 373, 511, 329,
	689, 690, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 272, 0, 0, 0, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 0, 0,
	0, 371, 295, 476, 328, 349, 435, 552, 0, 447,
	224, 527, 474, 726, 718, 676, 730, 678, 727, 728,
	673, 674, 677, 729, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 721, 663, 662, 0, 669, 670,
	0, 679, 680, 682, 686, 687, 688, 691, 692, 693,
	701, 703, 704, 702, 705, 706, 707, 710, 711, 712,
	713, 708, 709, 714, 661, 0, 203, 344, 91, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 298, 299, 338, 0, 0, 0, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	0, 0, 0, 290, 0, 0, 352, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 949, 936, 0, 495, 322,
	534, 251, 897, 956, 900, 901, 928, 205, 915, 923,
	0, 851, 885, 857, 277, 858, 884, 907, 0, 882,
	477, 354, 0, 342, 886, 207, 870, 0, 410, 294,
	189, 855, 859, 860, 871, 875, 877, 878, 883, 891,
	896, 899, 902, 904, 906, 909, 921, 930, 931, 937,
	938, 939, 941, 942, 944, 953, 954, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 940, 918,
	925, 894, 893, 892, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 540, 0, 376, 539, 480, 367,
	0, 0, 0, 910, 0, 913, 935, 905, 929, 874,
	919, 0, 289, 924, 952, 0, 234, 0, 382, 0,
	275, 0, 0, 0, 0, 175, 176, 177, 0, 498,
	0, 0, 287, 246, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	282, 922, 948, 890, 393, 259, 309, 266, 258, 506,
	0, 496, 862, 912, 947, 0, 0, 616, 950, 341,
	0, 927, 0, 854, 920, 0, 200, 864, 955, 945,
	887, 888, 0, 0, 0, 0, 0, 0, 0, 908,
	914, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 188, 263, 446, 853, 852, 183,
	0, 0, 0, 244, 0, 466, 943, 314, 544, 946,
	0, 305, 932, 869, 0, 0, 0, 866, 315, 182,
	209, 872, 895, 381, 933, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 841,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 326, 213, 541, 0, 959, 0, 373, 511, 329,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 221, 0, 0, 272, 0, 0, 898, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 951, 0,
	0, 850, 844, 843, 328, 349, 435, 552, 926, 447,
	224, 527, 474, 880, 242, 876, 0, 879, 916, 917,
	881, 0, 0, 0, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 448, 0, 865, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 520, 330, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 203, 344, 958, 0,
	0, 549, 0, 0, 856, 863, 0, 0, 0, 0,
	265, 889, 0, 298, 299, 338, 0, 0, 911, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 957,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	0, 0, 934, 290, 0, 0, 352, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 949, 936, 0, 495, 322,
	534, 251, 897, 956, 900, 901, 928, 205, 915, 923,
	0, 851, 885, 857, 277, 858, 884, 907, 0, 882,
	477, 354, 0, 342, 886, 207, 870, 0, 410, 294,
	189, 855, 859, 860, 871, 875, 877, 878, 883, 891,
	896, 899, 902, 904, 906, 909, 921, 930, 931, 937,
	938, 939, 941, 942, 944, 953, 954, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 940, 918,
	925, 894, 893, 892, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 540, 0, 376, 539, 480, 367,
	0, 0, 0, 910, 0, 913, 935, 905, 929, 874,
	919, 0, 289, 924, 952, 0, 234, 0, 382, 0,
	275, 0, 0, 0, 0, 175, 176, 177, 0, 498,
	0, 0, 287, 246, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	282, 922, 948, 890, 393, 259, 309, 266, 258, 506,
	0, 496, 862, 912, 947, 0, 0, 0, 950, 341,
	0, 927, 0, 854, 920, 0, 200, 864, 955, 945,
	887, 888, 0, 0, 0, 0, 0, 0, 0, 908,
	914, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 188, 263, 446, 853, 852, 183,
	0, 0, 0, 244, 0, 466, 943, 314, 544, 946,
	0, 305, 932, 869, 0, 0, 0, 866, 315, 182,
	209, 872, 895, 381, 933, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 516,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 326, 213, 541, 0, 214, 0, 373, 511, 329,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 221, 0, 0, 272, 0, 0, 898, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 951, 0,
	0, 371, 295, 476, 328, 349, 435, 552, 926, 447,
	224, 527, 474, 880, 242, 876, 0, 879, 916, 917,
	881, 0, 0, 0, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 448, 0, 865, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 520, 330, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 203, 344, 958, 0,
	0, 549, 0, 0, 856, 863, 0, 0, 0, 0,
	265, 889, 0, 298, 299, 338, 0, 0, 911, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 957,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	0, 0, 934, 290, 0, 0, 352, 0, 0, 0,
	270, 322, 534, 251, 0, 0, 0, 0, 0, 205,
	229, 0, 0, 0, 0, 0, 660, 0, 414, 0,
	0, 665, 477, 354, 0, 342, 0, 207, 495, 0,
	410, 294, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	0, 0, 0, 0, 0, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 672, 0, 376, 539,
	480, 367, 0, 0, 0, 0, 0, 667, 668, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 234, 0,
	382, 0, 275, 0, 92, 0, 1294, 175, 176, 177,
	737, 746, 747, 748, 745, 744, 738, 740, 0, 0,
	739, 225, 683, 685, 684, 694, 695, 696, 697, 698,
	699, 700, 681, 742, 749, 750, 393, 259, 309, 266,
	258, 506, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 643, 657, 200, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 654, 655,
	0, 0, 0, 0, 720, 0, 656, 0, 0, 664,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 0, 0, 0, 0, 188, 263, 446, 0,
	0, 183, 0, 0, 0, 244, 0, 719, 0, 314,
	544, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	315, 182, 209, 0, 0, 381, 0, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 516, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 666, 213, 541, 0, 214, 0, 373,
	511, 329, 689, 690, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 272, 0, 0, 0,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	0, 0, 0, 371, 295, 476, 328, 349, 435, 552,
	0, 447, 224, 527, 474, 726, 718, 676, 730, 678,
	727, 728, 673, 674, 677, 729, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 721, 663, 662, 0,
	669, 670, 0, 679, 680, 682, 686, 687, 688, 691,
	692, 693, 701, 703, 704, 702, 705, 706, 707, 710,
	711, 712, 713, 708, 709, 714, 661, 0, 203, 344,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 0, 0, 0, 290, 0, 0, 352, 0,
	0, 0, 270, 322, 534, 251, 0, 0, 0, 0,
	0, 205, 229, 0, 0, 0, 0, 0, 660, 0,
	414, 0, 0, 665, 477, 354, 0, 342, 0, 207,
	495, 0, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 672, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 667,
	668, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 92, 0, 0, 175,
	176, 177, 737, 746, 747, 748, 745, 744, 738, 740,
	0, 0, 739, 225, 683, 685, 684, 694, 695, 696,
	697, 698, 699, 700, 681, 742, 749, 750, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 643, 657,
	200, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	654, 655, 830, 0, 0, 0, 720, 0, 656, 0,
	0, 664, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 719,
	0, 314, 544, 0, 0, 717, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 666, 213, 541, 0, 214,
	0, 373, 511, 329, 689, 690, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 726, 718, 676,
	730, 678, 727, 728, 673, 674, 677, 729, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 721, 663,
	662, 0, 669, 670, 0, 679, 680, 682, 686, 687,
	688, 691, 692, 693, 701, 703, 704, 702, 705, 706,
	707, 710, 711, 712, 713, 708, 709, 714, 661, 0,
	203, 344, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 0, 0, 0, 290, 0, 0,
	352, 0, 0, 0, 270, 322, 534, 251, 0, 0,
	0, 0, 0, 205, 229, 0, 0, 0, 0, 0,
	660, 0, 414, 0, 0, 665, 477, 354, 0, 342,
	0, 207, 495, 0, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	672, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 667, 668, 0, 0, 0, 0, 0, 289, 1751,
	0, 0, 234, 0, 382, 0, 275, 0, 92, 0,
	0, 175, 176, 177, 737, 746, 747, 748, 745, 744,
	738, 740, 0, 0, 739, 225, 683, 685, 684, 694,
	695, 696, 697, 698, 699, 700, 681, 742, 749, 750,
	1752, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	643, 657, 200, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 655, 0, 0, 0, 0, 720, 0,
	656, 0, 0, 664, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 719, 0, 314, 544, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 666, 213, 541,
	0, 214, 0, 373, 511, 329, 689, 690, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 726,
	718, 676, 730, 678, 727, 728, 673, 674, 677, 729,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	721, 663, 662, 0, 669, 670, 0, 679, 680, 682,
	686, 687, 688, 691, 692, 693, 701, 703, 704, 702,
	705, 706, 707, 710, 711, 712, 713, 708, 709, 714,
	661, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 0, 512, 526, 0, 0, 0, 290,
	0, 0, 352, 0, 0, 0, 270, 322, 534, 251,
	0, 0, 0, 0, 0, 205, 229, 0, 0, 0,
	0, 0, 660, 0, 414, 0, 0, 665, 477, 354,
	0, 342, 0, 207, 495, 0, 410, 294, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 0, 0, 0, 0,
	0, 0, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 672, 0, 376, 539, 480, 367, 0, 0,
	0, 0, 0, 667, 668, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 234, 0, 382, 0, 275, 0,
	92, 0, 0, 175, 176, 177, 737, 746, 747, 748,
	745, 744, 738, 740, 0, 0, 739, 225, 683, 685,
	684, 694, 695, 696, 697, 698, 699, 700, 681, 742,
	749, 750, 393, 259, 309, 266, 258, 506, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 643, 657, 200, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 654, 655, 0, 0, 0, 0,
	720, 0, 656, 0, 0, 664, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 0, 0,
	0, 0, 188, 263, 446, 0, 0, 183, 0, 0,
	0, 244, 0, 719, 0, 314, 544, 0, 0, 717,
	0, 0, 0, 0, 0, 0, 315, 182, 209, 0,
	0, 381, 0, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 666,
	213, 541, 0, 214, 0, 373, 511, 329, 689, 690,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 272, 0, 0, 0, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 0, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 0, 447, 224, 527,
	474, 726, 718, 676, 730, 678, 727, 728, 673, 674,
	677, 729, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 721, 663, 662, 0, 669, 670, 0, 679,
	680, 682, 686, 687, 688, 691, 692, 693, 701, 703,
	704, 702, 705, 706, 707, 710, 711, 712, 713, 708,
	709, 714, 661, 0, 203, 344, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 298, 299, 338, 0, 0, 0, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	0, 290, 0, 0, 352, 0, 0, 0, 270, 322,
	534, 251, 0, 0, 0, 0, 0, 205, 229, 0,
	0, 0, 0, 0, 660, 0, 414, 0, 0, 665,
	477, 354, 0, 342, 0, 207, 495, 0, 410, 294,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 0, 0,
	0, 0, 0, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 672, 0, 376, 539, 480, 367,
	0, 0, 0, 0, 0, 667, 668, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 234, 0, 382, 0,
	275, 0, 92, 0, 0, 175, 176, 177, 737, 746,
	747, 748, 745, 744, 738, 740, 0, 0, 739, 225,
	683, 685, 684, 694, 695, 696, 697, 698, 699, 700,
	681, 742, 749, 750, 393, 259, 309, 266, 258, 506,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 657, 200, 671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 655, 0, 0,
	0, 0, 720, 0, 656, 0, 0, 664, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	0, 0, 0, 0, 188, 263, 446, 0, 0, 183,
	0, 0, 0, 244, 0, 719, 0, 314, 544, 0,
	0, 717, 0, 0, 0, 0, 0, 0, 315, 182,
	209, 0, 0, 381, 0, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 516,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 666, 213, 541, 0, 214, 0, 373, 511, 329,
	689, 690, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 272, 0, 0, 0, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 0, 0,
	0, 371, 295, 476, 328, 349, 435, 552, 0, 447,
	224, 527, 474, 726, 718, 676, 730, 678, 727, 728,
	673, 674, 677, 729, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 721, 663, 662, 0, 669, 670,
	0, 679, 680, 682, 686, 687, 688, 691, 692, 693,
	701, 703, 704, 702, 705, 706, 707, 710, 711, 712,
	713, 708, 709, 714, 661, 0, 203, 344, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 298, 299, 338, 0, 0, 0, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	322, 534, 251, 290, 0, 0, 352, 0, 205, 0,
	270, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	229, 477, 354, 0, 342, 0, 207, 0, 414, 410,
	294, 189, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 186, 187, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 204, 206, 208, 211, 212, 215, 216,
	217, 218, 219, 222, 226, 227, 228, 230, 231, 232,
	233, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 236, 237, 238, 239, 240, 241, 245, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 260, 261, 264,
	267, 268, 274, 279, 280, 281, 283, 284, 285, 291,
	293, 296, 297, 300, 302, 304, 306, 307, 308, 310,
	311, 312, 313, 316, 317, 318, 319, 320, 321, 323,
	331, 332, 334, 335, 336, 337, 340, 343, 345, 347,
	348, 350, 351, 353, 356, 357, 359, 360, 363, 364,
	366, 369, 372, 375, 377, 378, 379, 380, 383, 384,
	385, 386, 388, 391, 394, 396, 397, 399, 402, 404,
	405, 406, 407, 408, 409, 413, 416, 417, 418, 419,
	421, 423, 424, 425, 427, 429, 430, 431, 432, 433,
	434, 437, 438, 440, 441, 442, 443, 444, 449, 450,
	453, 454, 455, 458, 459, 460, 461, 462, 463, 465,
	468, 469, 473, 475, 478, 479, 485, 486, 488, 489,
	491, 492, 493, 494, 497, 499, 500, 502, 503, 507,
	508, 509, 517, 518, 522, 523, 524, 525, 528, 529,
	530, 531, 532, 533, 535, 536, 537, 538, 542, 543,
	545, 546, 547, 548, 551, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 566, 567, 0,
	0, 0, 0, 0, 0, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 540, 0, 376, 539, 480,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 234, 0, 382,
	0, 275, 0, 0, 0, 0, 175, 176, 177, 0,
	746, 747, 0, 287, 246, 0, 1580, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 282, 0, 0, 0, 393, 259, 309, 266, 258,
	506, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 0, 0, 0, 0, 188, 263, 446, 0, 0,
	183, 0, 0, 0, 244, 0, 466, 0, 314, 544,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 315,
	182, 209, 0, 0, 381, 0, 452, 481, 0, 278,
	271, 0, 0, 521, 220, 0, 0, 0, 0, 422,
	276, 361, 412, 0, 0, 0, 428, 519, 0, 0,
	0, 370, 0, 0, 0, 0, 210, 250, 398, 487,
	0, 472, 362, 510, 0, 327, 471, 286, 185, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 490,
	516, 223, 457, 464, 445, 550, 202, 0, 484, 0,
	324, 325, 201, 0, 436, 262, 0, 0, 390, 513,
	514, 515, 326, 213, 541, 0, 214, 0, 373, 511,
	329, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 272, 0, 0, 0, 292,
	0, 0, 0, 0, 426, 0, 467, 505, 0, 0,
	0, 0, 371, 295, 476, 328, 349, 435, 552, 0,
	447, 224, 527, 474, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 365, 0, 0, 368, 0,
	470, 0, 0, 0, 565, 448, 0, 0, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 520, 330, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 0, 203, 344, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 298, 299, 338, 0, 0, 0,
	0, 0, 0, 392, 403, 0, 0, 439, 0, 504,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 288, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 374, 0, 387, 389, 0, 395,
	0, 400, 0, 401, 411, 415, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 456,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 512,
	526, 322, 534, 251, 290, 0, 0, 352, 0, 205,
	0, 270, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 229, 477, 354, 0, 342, 0, 207, 0, 414,
	410, 294, 189, 0, 0, 0, 0, 0, 0, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	0, 0, 0, 0, 0, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 540, 0, 376, 539,
	480, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 234, 0,
	382, 0, 275, 0, 0, 0, 0, 175, 176, 177,
	0, 498, 0, 0, 287, 246, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 282, 0, 0, 0, 393, 259, 309, 266,
	258, 506, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 1764, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 263, 446, 0,
	0, 183, 0, 0, 0, 244, 0, 466, 0, 1763,
	544, 0, 0, 305, 0, 0, 1005, 1006, 0, 967,
	315, 182, 209, 999, 1003, 381, 0, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 516, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 326, 213, 541, 0, 214, 0, 373,
	511, 329, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 272, 0, 0, 0,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	0, 0, 0, 371, 295, 476, 328, 349, 435, 552,
	0, 447, 224, 527, 474, 0, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 448, 0, 0, 0,
	501, 0, 0, 0, 0, 0, 0, 0, 520, 330,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 203, 344,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 83,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 91, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 1739, 0,
	0, 1738, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	83, 512, 526, 322, 534, 251, 290, 0, 0, 352,
	0, 205, 0, 270, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 229, 477, 354, 0, 342, 0, 207,
	0, 414, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 92, 0, 1294, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 91, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 1146, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 1314, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1316, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 1144, 0, 1145, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 322, 534, 251, 290, 0,
	0, 352, 0, 205, 0, 270, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 229, 477, 354, 0, 342,
	0, 207, 0, 414, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	540, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 0, 0,
	0, 175, 176, 177, 1254, 1257, 0, 0, 287, 246,
	1253, 1256, 0, 0, 1252, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 282, 0, 0, 0,
	393, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 466, 0, 314, 544, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 326, 213, 541,
	0, 214, 0, 373, 511, 329, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	448, 0, 0, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 520, 330, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 83, 512, 526, 322, 534, 251, 290,
	0, 0, 352, 0, 205, 0, 270, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 229, 477, 354, 0,
	342, 0, 207, 0, 414, 410, 294, 189, 0, 0,
	0, 0, 0, 0, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 186, 187,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 204,
	206, 208, 211, 212, 215, 216, 217, 218, 219, 222,
	226, 227, 228, 230, 231, 232, 233, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 236, 237, 238,
	239, 240, 241, 245, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 260, 261, 264, 267, 268, 274, 279,
	280, 281, 283, 284, 285, 291, 293, 296, 297, 300,
	302, 304, 306, 307, 308, 310, 311, 312, 313, 316,
	317, 318, 319, 320, 321, 323, 331, 332, 334, 335,
	336, 337, 340, 343, 345, 347, 348, 350, 351, 353,
	356, 357, 359, 360, 363, 364, 366, 369, 372, 375,
	377, 378, 379, 380, 383, 384, 385, 386, 388, 391,
	394, 396, 397, 399, 402, 404, 405, 406, 407, 408,
	409, 413, 416, 417, 418, 419, 421, 423, 424, 425,
	427, 429, 430, 431, 432, 433, 434, 437, 438, 440,
	441, 442, 443, 444, 449, 450, 453, 454, 455, 458,
	459, 460, 461, 462, 463, 465, 468, 469, 473, 475,
	478, 479, 485, 486, 488, 489, 491, 492, 493, 494,
	497, 499, 500, 502, 503, 507, 508, 509, 517, 518,
	522, 523, 524, 525, 528, 529, 530, 531, 532, 533,
	535, 536, 537, 538, 542, 543, 545, 546, 547, 548,
	551, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 566, 567, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 540, 0, 376, 539, 480, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 234, 0, 382, 0, 275, 0, 92,
	0, 0, 175, 176, 177, 0, 498, 0, 0, 287,
	246, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 282, 0, 0,
	0, 393, 259, 309, 266, 258, 506, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 263, 446, 0, 0, 183, 0, 0, 0,
	244, 0, 466, 0, 314, 544, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 315, 182, 209, 0, 0,
	381, 0, 452, 481, 0, 278, 271, 0, 0, 521,
	220, 0, 0, 0, 0, 422, 276, 361, 412, 0,
	0, 0, 428, 519, 0, 0, 0, 370, 0, 0,
	0, 0, 210, 250, 398, 487, 0, 472, 362, 510,
	0, 327, 471, 286, 185, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 490, 516, 223, 457, 464,
	445, 550, 202, 0, 484, 0, 324, 325, 201, 0,
	436, 262, 0, 0, 390, 513, 514, 515, 326, 213,
	541, 0, 214, 0, 373, 511, 329, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 272, 0, 0, 0, 292, 0, 0, 0, 0,
	426, 0, 467, 505, 0, 0, 0, 0, 371, 295,
	476, 328, 349, 435, 552, 0, 447, 224, 527, 474,
	0, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 303, 0, 0, 0,
	0, 365, 0, 0, 368, 0, 470, 0, 0, 0,
	565, 448, 0, 0, 0, 501, 0, 0, 0, 0,
	0, 0, 0, 520, 330, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 203, 344, 91, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	298, 299, 338, 0, 0, 0, 0, 0, 0, 392,
	403, 0, 0, 439, 0, 504, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 288, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	374, 0, 387, 389, 0, 395, 0, 400, 0, 401,
	411, 415, 0, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 456, 0, 0, 0, 0,
	0, 482, 483, 0, 0, 512, 526, 322, 534, 251,
	290, 0, 0, 352, 0, 205, 0, 270, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 229, 477, 354,
	0, 342, 0, 207, 0, 414, 410, 294, 189, 0,
	0, 0, 0, 0, 0, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 0, 0, 0, 0,
	0, 0, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 0,
	0, 0, 393, 259, 309, 266, 258, 506, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 263, 446, 0, 0, 183, 0, 0,
	0, 244, 0, 466, 0, 314, 544, 0, 0, 305,
	0, 0, 0, 0, 0, 967, 315, 182, 209, 965,
	0, 381, 0, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 272, 0, 0, 0, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 0, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 0, 447, 224, 527,
	474, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 298, 299, 338, 0, 0, 0, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 322, 534,
	251, 290, 0, 0, 352, 0, 205, 0, 270, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 229, 477,
	354, 0, 342, 0, 207, 0, 414, 410, 294, 189,
	0, 0, 0, 0, 0, 0, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	186, 187, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 204, 206, 208, 211, 212, 215, 216, 217, 218,
	219, 222, 226, 227, 228, 230, 231, 232, 233, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 236,
	237, 238, 239, 240, 241, 245, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 260, 261, 264, 267, 268,
	274, 279, 280, 281, 283, 284, 285, 291, 293, 296,
	297, 300, 302, 304, 306, 307, 308, 310, 311, 312,
	313, 316, 317, 318, 319, 320, 321, 323, 331, 332,
	334, 335, 336, 337, 340, 343, 345, 347, 348, 350,
	351, 353, 356, 357, 359, 360, 363, 364, 366, 369,
	372, 375, 377, 378, 379, 380, 383, 384, 385, 386,
	388, 391, 394, 396, 397, 399, 402, 404, 405, 406,
	407, 408, 409, 413, 416, 417, 418, 419, 421, 423,
	424, 425, 427, 429, 430, 431, 432, 433, 434, 437,
	438, 440, 441, 442, 443, 444, 449, 450, 453, 454,
	455, 458, 459, 460, 461, 462, 463, 465, 468, 469,
	473, 475, 478, 479, 485, 486, 488, 489, 491, 492,
	493, 494, 497, 499, 500, 502, 503, 507, 508, 509,
	517, 518, 522, 523, 524, 525, 528, 529, 530, 531,
	532, 533, 535, 536, 537, 538, 542, 543, 545, 546,
	547, 548, 551, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 566, 567, 0, 0, 0,
	0, 0, 0, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 540, 0, 376, 539, 480, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 234, 0, 382, 0, 275,
	0, 0, 0, 1294, 175, 176, 177, 0, 498, 0,
	0, 287, 246, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 282,
	0, 0, 0, 393, 259, 309, 266, 258, 506, 0,
	496, 0, 0, 0, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 263, 446, 0, 0, 183, 0,
	0, 0, 244, 0, 466, 0, 314, 544, 0, 0,
	305, 2602, 0, 0, 0, 0, 0, 315, 182, 209,
	0, 0, 381, 0, 452, 481, 0, 278, 271, 0,
	0, 521, 220, 0, 0, 0, 0, 422, 276, 361,
	412, 0, 0, 0, 428, 519, 0, 0, 0, 370,
	0, 0, 0, 0, 210, 250, 398, 487, 0, 472,
	362, 510, 0, 327, 471, 286, 185, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 490, 516, 223,
	457, 464, 445, 550, 202, 0, 484, 0, 324, 325,
	201, 0, 436, 262, 0, 0, 390, 513, 514, 515,
	326, 213, 541, 0, 214, 0, 373, 511, 329, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 272, 0, 0, 0, 292, 0, 0,
	0, 0, 426, 0, 467, 505, 0, 0, 0, 0,
	371, 295, 476, 328, 349, 435, 552, 0, 447, 224,
	527, 474, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 303, 0,
	0, 0, 0, 365, 0, 0, 368, 0, 470, 0,
	0, 0, 565, 448, 0, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 0, 520, 330, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 0, 203, 344, 0, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 298, 299, 338, 0, 0, 0, 0, 0,
	0, 392, 403, 0, 0, 439, 0, 504, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	288, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 374, 0, 387, 389, 0, 395, 0, 400,
	0, 401, 411, 415, 0, 0, 420, 0, 0, 0,
	0, 0, 0, 0, 451, 0, 0, 456, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 512, 526, 322,
	534, 251, 290, 0, 0, 352, 0, 205, 0, 270,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 229,
	477, 354, 0, 342, 0, 207, 0, 414, 410, 294,
	189, 0, 0, 0, 0, 0, 0, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 0, 0,
	0, 0, 0, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 540, 0, 376, 539, 480, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 234, 0, 382, 0,
	275, 0, 92, 0, 0, 175, 176, 177, 0, 498,
	0, 0, 287, 246, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	282, 0, 0, 0, 393, 259, 309, 266, 258, 506,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 263, 446, 0, 0, 183,
	0, 0, 0, 244, 0, 466, 0, 314, 544, 0,
	0, 305, 0, 0, 0, 0, 0, 0, 315, 182,
	209, 0, 0, 381, 0, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 516,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 326, 213, 541, 0, 214, 0, 373, 511, 329,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 272, 0, 0, 0, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 0, 0,
	0, 371, 295, 476, 328, 349, 435, 552, 0, 447,
	224, 527, 474, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 448, 0, 0, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 520, 330, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 203, 344, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 298, 299, 1739, 0, 0, 1738, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	322, 534, 251, 290, 0, 0, 352, 0, 205, 0,
	270, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	229, 477, 354, 0, 342, 0, 207, 0, 414, 410,
	294, 189, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 186, 187, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 204, 206, 208, 211, 212, 215, 216,
	217, 218, 219, 222, 226, 227, 228, 230, 231, 232,
	233, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 236, 237, 238, 239, 240, 241, 245, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 260, 261, 264,
	267, 268, 274, 279, 280, 281, 283, 284, 285, 291,
	293, 296, 297, 300, 302, 304, 306, 307, 308, 310,
	311, 312, 313, 316, 317, 318, 319, 320, 321, 323,
	331, 332, 334, 335, 336, 337, 340, 343, 345, 347,
	348, 350, 351, 353, 356, 357, 359, 360, 363, 364,
	366, 369, 372, 375, 377, 378, 379, 380, 383, 384,
	385, 386, 388, 391, 394, 396, 397, 399, 402, 404,
	405, 406, 407, 408, 409, 413, 416, 417, 418, 419,
	421, 423, 424, 425, 427, 429, 430, 431, 432, 433,
	434, 437, 438, 440, 441, 442, 443, 444, 449, 450,
	453, 454, 455, 458, 459, 460, 461, 462, 463, 465,
	468, 469, 473, 475, 478, 479, 485, 486, 488, 489,
	491, 492, 493, 494, 497, 499, 500, 502, 503, 507,
	508, 509, 517, 518, 522, 523, 524, 525, 528, 529,
	530, 531, 532, 533, 535, 536, 537, 538, 542, 543,
	545, 546, 547, 548, 551, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 566, 567, 0,
	0, 0, 0, 0, 0, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 540, 0, 376, 539, 480,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 234, 0, 382,
	0, 275, 0, 0, 0, 0, 175, 176, 177, 0,
	498, 0, 0, 287, 246, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 282, 0, 0, 0, 393, 259, 309, 266, 258,
	506, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 263, 446, 635, 634,
	183, 0, 0, 0, 244, 0, 466, 0, 314, 544,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 315,
	182, 209, 0, 0, 381, 0, 452, 481, 0, 278,
	271, 0, 0, 521, 220, 0, 0, 0, 0, 422,
	276, 361, 412, 0, 0, 0, 428, 519, 0, 0,
	0, 370, 0, 0, 0, 0, 210, 250, 398, 487,
	0, 472, 362, 510, 0, 327, 471, 286, 185, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 490,
	516, 223, 457, 464, 445, 550, 202, 0, 484, 0,
	324, 325, 201, 0, 436, 262, 0, 0, 390, 513,
	514, 515, 326, 213, 541, 0, 214, 0, 373, 511,
	329, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 272, 0, 0, 0, 292,
	0, 0, 0, 0, 426, 0, 467, 505, 0, 0,
	0, 0, 371, 295, 476, 328, 349, 435, 552, 0,
	447, 224, 527, 474, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 365, 0, 0, 368, 0,
	470, 0, 0, 0, 565, 448, 0, 0, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 520, 330, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 0, 203, 344, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 298, 299, 338, 0, 0, 0,
	0, 0, 0, 392, 403, 0, 0, 439, 0, 504,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 288, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 374, 0, 387, 389, 0, 395,
	0, 400, 0, 401, 411, 415, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 456,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 512,
	526, 322, 534, 251, 633, 0, 0, 352, 0, 205,
	0, 270, 0, 0, 0, 1689, 277, 0, 0, 0,
	0, 229, 477, 354, 0, 342, 0, 207, 0, 414,
	410, 294, 189, 0, 0, 0, 0, 0, 0, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	0, 0, 0, 0, 0, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 540, 0, 376, 539,
	480, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 234, 0,
	382, 0, 275, 0, 0, 0, 0, 175, 176, 177,
	0, 1691, 0, 0, 287, 246, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 282, 0, 0, 0, 393, 259, 309, 266,
	258, 506, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 263, 446, 0,
	0, 183, 0, 0, 0, 244, 0, 466, 0, 314,
	544, 0, 0, 305, 0, 0, 0, 0, 0, 0,
	315, 182, 209, 0, 0, 381, 0, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 516, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 326, 213, 541, 0, 214, 0, 373,
	511, 329, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 272, 0, 0, 0,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	0, 0, 0, 371, 295, 476, 328, 349, 435, 552,
	0, 447, 224, 527, 474, 0, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 448, 0, 0, 0,
	501, 0, 0, 0, 0, 0, 0, 0, 520, 330,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 203, 344,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 2663, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 322, 534, 251, 290, 0, 0, 352,
	0, 205, 0, 270, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 229, 477, 354, 0, 342, 0, 207,
	0, 414, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 0, 0, 0, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 2602, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1576, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 322, 534, 251, 290, 0,
	0, 352, 0, 205, 0, 270, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 229, 477, 354, 0, 342,
	0, 207, 0, 414, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	540, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 0, 0,
	0, 175, 176, 177, 0, 2076, 0, 0, 287, 246,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 282, 0, 0, 0,
	393, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 466, 0, 314, 544, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 326, 213, 541,
	0, 214, 0, 373, 511, 329, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	448, 0, 0, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 520, 330, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 0, 512, 526, 322, 534, 251, 290,
	0, 0, 352, 0, 205, 0, 270, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 229, 477, 354, 0,
	342, 0, 207, 0, 414, 410, 294, 189, 0, 0,
	0, 0, 0, 0, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 186, 187,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 204,
	206, 208, 211, 212, 215, 216, 217, 218, 219, 222,
	226, 227, 228, 230, 231, 232, 233, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 236, 237, 238,
	239, 240, 241, 245, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 260, 261, 264, 267, 268, 274, 279,
	280, 281, 283, 284, 285, 291, 293, 296, 297, 300,
	302, 304, 306, 307, 308, 310, 311, 312, 313, 316,
	317, 318, 319, 320, 321, 323, 331, 332, 334, 335,
	336, 337, 340, 343, 345, 347, 348, 350, 351, 353,
	356, 357, 359, 360, 363, 364, 366, 369, 372, 375,
	377, 378, 379, 380, 383, 384, 385, 386, 388, 391,
	394, 396, 397, 399, 402, 404, 405, 406, 407, 408,
	409, 413, 416, 417, 418, 419, 421, 423, 424, 425,
	427, 429, 430, 431, 432, 433, 434, 437, 438, 440,
	441, 442, 443, 444, 449, 450, 453, 454, 455, 458,
	459, 460, 461, 462, 463, 465, 468, 469, 473, 475,
	478, 479, 485, 486, 488, 489, 491, 492, 493, 494,
	497, 499, 500, 502, 503, 507, 508, 509, 517, 518,
	522, 523, 524, 525, 528, 529, 530, 531, 532, 533,
	535, 536, 537, 538, 542, 543, 545, 546, 547, 548,
	551, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 566, 567, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 540, 0, 376, 539, 480, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 234, 0, 382, 0, 275, 0, 0,
	0, 0, 175, 176, 177, 0, 498, 0, 0, 287,
	246, 0, 2003, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 282, 0, 0,
	0, 393, 259, 309, 266, 258, 506, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 263, 446, 0, 0, 183, 0, 0, 0,
	244, 0, 466, 0, 314, 544, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 315, 182, 209, 0, 0,
	381, 0, 452, 481, 0, 278, 271, 0, 0, 521,
	220, 0, 0, 0, 0, 422, 276, 361, 412, 0,
	0, 0, 428, 519, 0, 0, 0, 370, 0, 0,
	0, 0, 210, 250, 398, 487, 0, 472, 362, 510,
	0, 327, 471, 286, 185, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 490, 516, 223, 457, 464,
	445, 550, 202, 0, 484, 0, 324, 325, 201, 0,
	436, 262, 0, 0, 390, 513, 514, 515, 326, 213,
	541, 0, 214, 0, 373, 511, 329, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 272, 0, 0, 0, 292, 0, 0, 0, 0,
	426, 0, 467, 505, 0, 0, 0, 0, 371, 295,
	476, 328, 349, 435, 552, 0, 447, 224, 527, 474,
	0, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 303, 0, 0, 0,
	0, 365, 0, 0, 368, 0, 470, 0, 0, 0,
	565, 448, 0, 0, 0, 501, 0, 0, 0, 0,
	0, 0, 0, 520, 330, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 203, 344, 0, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	298, 299, 338, 0, 0, 0, 0, 0, 0, 392,
	403, 0, 0, 439, 0, 504, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 288, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	374, 0, 387, 389, 0, 395, 0, 400, 0, 401,
	411, 415, 0, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 456, 0, 0, 0, 0,
	0, 482, 483, 0, 0, 512, 526, 322, 534, 251,
	290, 0, 0, 352, 0, 205, 0, 270, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 229, 477, 354,
	0, 342, 0, 207, 0, 414, 410, 294, 189, 0,
	0, 0, 0, 0, 0, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 0, 0, 0, 0,
	0, 0, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 234, 0, 382, 0, 275, 0,
	92, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 0,
	0, 0, 393, 259, 309, 266, 258, 506, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 263, 446, 0, 0, 183, 0, 0,
	0, 244, 0, 466, 0, 314, 544, 0, 0, 305,
	0, 0, 0, 0, 0, 0, 315, 182, 209, 0,
	0, 381, 0, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 272, 0, 0, 0, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 0, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 0, 447, 224, 527,
	474, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 298, 299, 338, 0, 0, 0, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 374, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 0, 0,
	0, 290, 0, 0, 352, 0, 0, 0, 270, 322,
	534, 251, 1740, 0, 0, 0, 0, 205, 229, 0,
	0, 0, 0, 0, 277, 0, 414, 0, 0, 0,
	477, 354, 0, 342, 0, 207, 495, 0, 410, 294,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 0, 0,
	0, 0, 0, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 540, 0, 376, 539, 480, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 234, 0, 382, 0,
	275, 0, 0, 0, 0, 175, 176, 177, 0, 498,
	0, 0, 287, 246, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	282, 0, 0, 0, 393, 259, 309, 266, 258, 506,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 263, 446, 0, 0, 183,
	0, 0, 0, 244, 0, 466, 0, 314, 544, 0,
	0, 305, 0, 0, 0, 0, 0, 0, 315, 182,
	209, 0, 0, 381, 0, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 516,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 326, 213, 541, 0, 214, 0, 373, 511, 329,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 272, 0, 0, 0, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 0, 0,
	0, 371, 295, 476, 328, 349, 435, 552, 0, 447,
	224, 527, 474, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 448, 0, 0, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 520, 330, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 203, 344, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 298, 299, 338, 0, 0, 0, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	322, 534, 251, 290, 0, 0, 352, 0, 205, 0,
	270, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	229, 477, 354, 0, 342, 0, 207, 0, 414, 410,
	294, 189, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 186, 187, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 204, 206, 208, 211, 212, 215, 216,
	217, 218, 219, 222, 226, 227, 228, 230, 231, 232,
	233, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 236, 237, 238, 239, 240, 241, 245, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 260, 261, 264,
	267, 268, 274, 279, 280, 281, 283, 284, 285, 291,
	293, 296, 297, 300, 302, 304, 306, 307, 308, 310,
	311, 312, 313, 316, 317, 318, 319, 320, 321, 323,
	331, 332, 334, 335, 336, 337, 340, 343, 345, 347,
	348, 350, 351, 353, 356, 357, 359, 360, 363, 364,
	366, 369, 372, 375, 377, 378, 379, 380, 383, 384,
	385, 386, 388, 391, 394, 396, 397, 399, 402, 404,
	405, 406, 407, 408, 409, 413, 416, 417, 418, 419,
	421, 423, 424, 425, 427, 429, 430, 431, 432, 433,
	434, 437, 438, 440, 441, 442, 443, 444, 449, 450,
	453, 454, 455, 458, 459, 460, 461, 462, 463, 465,
	468, 469, 473, 475, 478, 479, 485, 486, 488, 489,
	491, 492, 493, 494, 497, 499, 500, 502, 503, 507,
	508, 509, 517, 518, 522, 523, 524, 525, 528, 529,
	530, 531, 532, 533, 535, 536, 537, 538, 542, 543,
	545, 546, 547, 548, 551, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 566, 567, 0,
	0, 0, 0, 0, 0, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 540, 0, 376, 539, 480,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 234, 0, 382,
	0, 275, 0, 0, 0, 0, 175, 176, 177, 0,
	498, 0, 0, 287, 246, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 282, 0, 0, 0, 393, 259, 309, 266, 258,
	506, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 263, 446, 0, 0,
	183, 0, 0, 0, 244, 0, 466, 0, 314, 544,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 315,
	182, 209, 0, 0, 381, 0, 452, 481, 0, 278,
	271, 0, 0, 521, 220, 0, 0, 0, 0, 422,
	276, 361, 412, 0, 0, 0, 428, 519, 0, 0,
	0, 370, 0, 0, 0, 0, 210, 250, 398, 487,
	0, 472, 362, 510, 0, 327, 471, 286, 185, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 490,
	516, 223, 457, 464, 445, 550, 202, 0, 484, 0,
	324, 325, 201, 0, 436, 262, 0, 0, 390, 513,
	514, 515, 326, 213, 541, 0, 214, 0, 373, 511,
	329, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 272, 0, 0, 0, 292,
	0, 0, 0, 0, 426, 0, 467, 505, 0, 0,
	0, 0, 371, 295, 476, 328, 349, 435, 552, 0,
	447, 224, 527, 474, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 365, 0, 0, 368, 0,
	470, 0, 0, 0, 565, 448, 0, 0, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 520, 330, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 0, 203, 344, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 298, 299, 338, 0, 0, 0,
	0, 0, 0, 392, 403, 0, 0, 439, 0, 504,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 288, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 374, 0, 387, 389, 0, 395,
	0, 400, 0, 401, 411, 415, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 456,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 512,
	526, 322, 534, 251, 290, 0, 0, 352, 0, 205,
	0, 270, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 229, 477, 354, 0, 342, 0, 207, 0, 414,
	410, 294, 189, 0, 0, 0, 0, 0, 0, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	0, 0, 0, 0, 0, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 540, 0, 376, 539,
	480, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 234, 0,
	382, 0, 275, 0, 0, 0, 0, 175, 176, 177,
	0, 498, 0, 0, 287, 246, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 282, 0, 0, 0, 393, 259, 309, 266,
	258, 506, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 263, 446, 0,
	0, 183, 0, 0, 0, 244, 0, 466, 0, 314,
	544, 0, 0, 305, 0, 0, 0, 0, 0, 0,
	315, 182, 209, 0, 0, 381, 0, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 516, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 326, 213, 541, 0, 214, 0, 373,
	511, 329, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 272, 0, 0, 0,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	0, 0, 0, 371, 295, 476, 328, 349, 435, 552,
	0, 447, 224, 527, 474, 0, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 448, 0, 0, 0,
	501, 0, 0, 0, 0, 0, 0, 0, 520, 330,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 203, 344,
	1532, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 1411, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 0, 0, 0, 290, 0, 0, 352,
	0, 0, 0, 270, 322, 534, 251, 0, 0, 0,
	0, 0, 205, 229, 0, 0, 0, 0, 0, 277,
	0, 414, 0, 0, 1336, 477, 354, 0, 342, 0,
	207, 495, 0, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1335, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 322, 534, 251, 290, 0,
	0, 352, 0, 205, 0, 270, 0, 0, 0, 0,
	277, 0, 0, 1320, 0, 229, 477, 354, 0, 342,
	0, 207, 0, 414, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	540, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 0, 0,
	0, 175, 176, 177, 0, 498, 0, 0, 287, 246,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 282, 0, 0, 0,
	393, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 466, 0, 314, 544, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 326, 213, 541,
	0, 214, 0, 373, 511, 329, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	448, 0, 0, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 520, 330, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 0, 512, 526, 322, 534, 251, 290,
	0, 0, 352, 0, 205, 0, 270, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 229, 477, 354, 0,
	342, 0, 207, 0, 414, 410, 294, 189, 0, 0,
	0, 0, 0, 0, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 186, 187,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 204,
	206, 208, 211, 212, 215, 216, 217, 218, 219, 222,
	226, 227, 228, 230, 231, 232, 233, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 236, 237, 238,
	239, 240, 241, 245, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 260, 261, 264, 267, 268, 274, 279,
	280, 281, 283, 284, 285, 291, 293, 296, 297, 300,
	302, 304, 306, 307, 308, 310, 311, 312, 313, 316,
	317, 318, 319, 320, 321, 323, 331, 332, 334, 335,
	336, 337, 340, 343, 345, 347, 348, 350, 351, 353,
	356, 357, 359, 360, 363, 364, 366, 369, 372, 375,
	377, 378, 379, 380, 383, 384, 385, 386, 388, 391,
	394, 396, 397, 399, 402, 404, 405, 406, 407, 408,
	409, 413, 416, 417, 418, 419, 421, 423, 424, 425,
	427, 429, 430, 431, 432, 433, 434, 437, 438, 440,
	441, 442, 443, 444, 449, 450, 453, 454, 455, 458,
	459, 460, 461, 462, 463, 465, 468, 469, 473, 475,
	478, 479, 485, 486, 488, 489, 491, 492, 493, 494,
	497, 499, 500, 502, 503, 507, 508, 509, 517, 518,
	522, 523, 524, 525, 528, 529, 530, 531, 532, 533,
	535, 536, 537, 538, 542, 543, 545, 546, 547, 548,
	551, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 566, 567, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 540, 0, 376, 539, 480, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 234, 0, 382, 0, 275, 0, 0,
	0, 0, 175, 176, 177, 0, 498, 0, 0, 287,
	246, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 282, 0, 0,
	0, 393, 259, 309, 266, 258, 506, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 263, 446, 0, 0, 183, 0, 0, 0,
	244, 0, 466, 590, 314, 544, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 315, 182, 209, 0, 0,
	381, 0, 452, 481, 0, 278, 271, 0, 0, 521,
	220, 0, 0, 0, 0, 422, 276, 361, 412, 0,
	0, 0, 428, 519, 0, 0, 0, 370, 0, 0,
	0, 0, 210, 250, 398, 487, 0, 472, 362, 510,
	0, 327, 471, 286, 185, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 490, 516, 223, 457, 464,
	445, 550, 202, 0, 484, 0, 324, 325, 201, 0,
	436, 262, 0, 0, 390, 513, 514, 515, 326, 213,
	541, 0, 214, 0, 373, 511, 329, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 272, 0, 0, 0, 292, 0, 0, 0, 0,
	426, 0, 467, 505, 0, 0, 0, 0, 371, 295,
	476, 328, 349, 435, 552, 0, 447, 224, 527, 474,
	0, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 303, 0, 0, 0,
	0, 365, 0, 0, 368, 0, 470, 0, 0, 0,
	565, 448, 0, 0, 0, 501, 0, 0, 0, 0,
	0, 0, 0, 520, 330, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 203, 344, 0, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	298, 299, 338, 0, 0, 0, 0, 0, 0, 392,
	403, 0, 0, 439, 0, 504, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 288, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	374, 0, 387, 389, 0, 395, 0, 400, 0, 401,
	411, 415, 0, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 456, 0, 0, 0, 0,
	0, 482, 483, 0, 0, 512, 526, 322, 534, 251,
	290, 0, 0, 352, 0, 205, 0, 270, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 229, 477, 354,
	0, 342, 0, 207, 0, 414, 410, 294, 189, 0,
	0, 0, 0, 0, 0, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 186,
	187, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	204, 206, 208, 211, 212, 215, 216, 217, 218, 219,
	222, 226, 227, 228, 230, 231, 232, 233, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 236, 237,
	238, 239, 240, 241, 245, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 260, 261, 264, 267, 268, 274,
	279, 280, 281, 283, 284, 285, 291, 293, 296, 297,
	300, 302, 304, 306, 307, 308, 310, 311, 312, 313,
	316, 317, 318, 319, 320, 321, 323, 331, 332, 334,
	335, 336, 337, 340, 343, 345, 347, 348, 350, 351,
	353, 356, 357, 359, 360, 363, 364, 366, 369, 372,
	375, 377, 378, 379, 380, 383, 384, 385, 386, 388,
	391, 394, 396, 397, 399, 402, 404, 405, 406, 407,
	408, 409, 413, 416, 417, 418, 419, 421, 423, 424,
	425, 427, 429, 430, 431, 432, 433, 434, 437, 438,
	440, 441, 442, 443, 444, 449, 450, 453, 454, 455,
	458, 459, 460, 461, 462, 463, 465, 468, 469, 473,
	475, 478, 479, 485, 486, 488, 489, 491, 492, 493,
	494, 497, 499, 500, 502, 503, 507, 508, 509, 517,
	518, 522, 523, 524, 525, 528, 529, 530, 531, 532,
	533, 535, 536, 537, 538, 542, 543, 545, 546, 547,
	548, 551, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 566, 567, 0, 0, 0, 0,
	0, 0, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 540, 0, 376, 539, 480, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 234, 0, 382, 0, 275, 0,
	0, 0, 0, 175, 176, 177, 0, 498, 0, 0,
	287, 246, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 282, 0,
	0, 0, 393, 259, 309, 266, 258, 506, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 263, 446, 0, 0, 183, 0, 0,
	0, 244, 0, 466, 0, 314, 544, 0, 0, 305,
	0, 0, 0, 0, 0, 0, 315, 182, 209, 0,
	0, 381, 0, 452, 481, 0, 278, 271, 0, 0,
	521, 220, 0, 0, 0, 0, 422, 276, 361, 412,
	0, 0, 0, 428, 519, 0, 0, 0, 370, 0,
	0, 0, 0, 210, 250, 398, 487, 0, 472, 362,
	510, 0, 327, 471, 286, 185, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 490, 516, 223, 457,
	464, 445, 550, 202, 0, 484, 0, 324, 325, 201,
	0, 436, 262, 0, 0, 390, 513, 514, 515, 326,
	213, 541, 0, 214, 0, 373, 511, 329, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 272, 0, 0, 0, 292, 0, 0, 0,
	0, 426, 0, 467, 505, 0, 0, 0, 0, 371,
	295, 476, 328, 349, 435, 552, 0, 447, 224, 527,
	474, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 365, 0, 0, 368, 0, 470, 0, 0,
	0, 565, 448, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 520, 330, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 203, 344, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 298, 299, 338, 0, 0, 0, 0, 0, 0,
	392, 403, 0, 0, 439, 0, 504, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 288,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 2668, 0, 387, 389, 0, 395, 0, 400, 0,
	401, 411, 415, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 456, 0, 0, 0,
	0, 0, 482, 483, 0, 0, 512, 526, 322, 534,
	251, 290, 0, 0, 352, 0, 205, 0, 270, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 229, 477,
	354, 0, 342, 0, 207, 0, 414, 410, 294, 189,
	0, 0, 0, 0, 0, 0, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	186, 187, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 204, 206, 208, 211, 212, 215, 216, 217, 218,
	219, 222, 226, 227, 228, 230, 231, 232, 233, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 236,
	237, 238, 239, 240, 241, 245, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 260, 261, 264, 267, 268,
	274, 279, 280, 281, 283, 284, 285, 291, 293, 296,
	297, 300, 302, 304, 306, 307, 308, 310, 311, 312,
	313, 316, 317, 318, 319, 320, 321, 323, 331, 332,
	334, 335, 336, 337, 340, 343, 345, 347, 348, 350,
	351, 353, 356, 357, 359, 360, 363, 364, 366, 369,
	372, 375, 377, 378, 379, 380, 383, 384, 385, 386,
	388, 391, 394, 396, 397, 399, 402, 404, 405, 406,
	407, 408, 409, 413, 416, 417, 418, 419, 421, 423,
	424, 425, 427, 429, 430, 431, 432, 433, 434, 437,
	438, 440, 441, 442, 443, 444, 449, 450, 453, 454,
	455, 458, 459, 460, 461, 462, 463, 465, 468, 469,
	473, 475, 478, 479, 485, 486, 488, 489, 491, 492,
	493, 494, 497, 499, 500, 502, 503, 507, 508, 509,
	517, 518, 522, 523, 524, 525, 528, 529, 530, 531,
	532, 533, 535, 536, 537, 538, 542, 543, 545, 546,
	547, 548, 551, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 566, 567, 0, 0, 0,
	0, 0, 0, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 540, 0, 376, 539, 480, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 234, 0, 382, 0, 275,
	0, 0, 0, 0, 175, 176, 177, 0, 498, 0,
	0, 287, 246, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 282,
	0, 0, 0, 393, 259, 309, 266, 258, 506, 0,
	496, 0, 0, 0, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 263, 446, 0, 0, 183, 0,
	0, 0, 244, 0, 466, 0, 314, 544, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 315, 182, 209,
	0, 0, 381, 0, 452, 481, 0, 278, 271, 0,
	0, 521, 220, 0, 0, 0, 0, 422, 276, 361,
	412, 0, 0, 0, 428, 519, 0, 0, 0, 370,
	0, 0, 0, 0, 210, 250, 398, 487, 0, 472,
	362, 510, 0, 327, 471, 286, 185, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 490, 516, 223,
	457, 464, 445, 550, 202, 0, 484, 0, 324, 325,
	201, 0, 436, 262, 0, 0, 390, 513, 514, 515,
	326, 213, 541, 0, 214, 0, 373, 511, 329, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 272, 0, 0, 0, 292, 0, 0,
	0, 0, 426, 0, 467, 505, 0, 0, 0, 0,
	371, 295, 476, 328, 349, 435, 552, 0, 447, 224,
	527, 474, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 303, 0,
	0, 0, 0, 365, 0, 0, 368, 0, 470, 0,
	0, 0, 565, 448, 0, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 0, 520, 330, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 0, 203, 344, 0, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 298, 299, 338, 0, 0, 0, 0, 0,
	0, 392, 403, 0, 0, 439, 0, 504, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	288, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 374, 0, 387, 389, 0, 395, 0, 400,
	0, 401, 411, 415, 0, 0, 420, 0, 0, 0,
	0, 0, 0, 0, 451, 0, 0, 456, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 512, 526, 322,
	534, 251, 290, 0, 0, 352, 0, 205, 0, 270,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 229,
	477, 354, 0, 342, 0, 207, 0, 414, 410, 294,
	189, 0, 0, 0, 0, 0, 0, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 186, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 204, 206, 208, 211, 212, 215, 216, 217,
	218, 219, 222, 226, 227, 228, 230, 231, 232, 233,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	236, 237, 238, 239, 240, 241, 245, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 260, 261, 264, 267,
	268, 274, 279, 280, 281, 283, 284, 285, 291, 293,
	296, 297, 300, 302, 304, 306, 307, 308, 310, 311,
	312, 313, 316, 317, 318, 319, 320, 321, 323, 331,
	332, 334, 335, 336, 337, 340, 343, 345, 347, 348,
	350, 351, 353, 356, 357, 359, 360, 363, 364, 366,
	369, 372, 375, 377, 378, 379, 380, 383, 384, 385,
	386, 388, 391, 394, 396, 397, 399, 402, 404, 405,
	406, 407, 408, 409, 413, 416, 417, 418, 419, 421,
	423, 424, 425, 427, 429, 430, 431, 432, 433, 434,
	437, 438, 440, 441, 442, 443, 444, 449, 450, 453,
	454, 455, 458, 459, 460, 461, 462, 463, 465, 468,
	469, 473, 475, 478, 479, 485, 486, 488, 489, 491,
	492, 493, 494, 497, 499, 500, 502, 503, 507, 508,
	509, 517, 518, 522, 523, 524, 525, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 542, 543, 545,
	546, 547, 548, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 566, 567, 0, 0,
	0, 0, 0, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 540, 0, 376, 539, 480, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 234, 0, 382, 0,
	275, 0, 0, 0, 0, 175, 2409, 177, 0, 498,
	0, 0, 287, 246, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	282, 0, 0, 0, 393, 259, 309, 266, 258, 506,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 263, 446, 0, 0, 183,
	0, 0, 0, 244, 0, 466, 0, 314, 544, 0,
	0, 305, 0, 0, 0, 0, 0, 0, 315, 182,
	209, 0, 0, 381, 0, 452, 481, 0, 278, 271,
	0, 0, 521, 220, 0, 0, 0, 0, 422, 276,
	361, 412, 0, 0, 0, 428, 519, 0, 0, 0,
	370, 0, 0, 0, 0, 210, 250, 398, 487, 0,
	472, 362, 510, 0, 327, 471, 286, 185, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 490, 516,
	223, 457, 464, 445, 550, 202, 0, 484, 0, 324,
	325, 201, 0, 436, 262, 0, 0, 390, 513, 514,
	515, 326, 213, 541, 0, 214, 0, 373, 511, 329,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 272, 0, 0, 0, 292, 0,
	0, 0, 0, 426, 0, 467, 505, 0, 0, 0,
	0, 371, 295, 476, 328, 349, 435, 552, 0, 447,
	224, 527, 474, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 470,
	0, 0, 0, 565, 448, 0, 0, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 520, 330, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 203, 344, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 298, 299, 338, 0, 0, 0, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	322, 534, 251, 290, 0, 0, 352, 0, 205, 0,
	270, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	229, 477, 354, 0, 342, 0, 207, 0, 414, 410,
	294, 189, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 186, 187, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 204, 206, 208, 211, 212, 215, 216,
	217, 218, 219, 222, 226, 227, 228, 230, 231, 232,
	233, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 236, 237, 238, 239, 240, 241, 245, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 260, 261, 264,
	267, 268, 274, 279, 280, 281, 283, 284, 285, 291,
	293, 296, 297, 300, 302, 304, 306, 307, 308, 310,
	311, 312, 313, 316, 317, 318, 319, 320, 321, 323,
	331, 332, 334, 335, 336, 337, 340, 343, 345, 347,
	348, 350, 351, 353, 356, 357, 359, 360, 363, 364,
	366, 369, 372, 375, 377, 378, 379, 380, 383, 384,
	385, 386, 388, 391, 394, 396, 397, 399, 402, 404,
	405, 406, 407, 408, 409, 413, 416, 417, 418, 419,
	421, 423, 424, 425, 427, 429, 430, 431, 432, 433,
	434, 437, 438, 440, 441, 442, 443, 444, 449, 450,
	453, 454, 455, 458, 459, 460, 461, 462, 463, 465,
	468, 469, 473, 475, 478, 479, 485, 486, 488, 489,
	491, 492, 493, 494, 497, 499, 500, 502, 503, 507,
	508, 509, 517, 518, 522, 523, 524, 525, 528, 529,
	530, 531, 532, 533, 535, 536, 537, 538, 542, 543,
	545, 546, 547, 548, 551, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 566, 567, 0,
	0, 0, 0, 0, 0, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 540, 0, 376, 539, 480,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 234, 0, 382,
	0, 275, 0, 0, 0, 0, 175, 1993, 177, 0,
	498, 0, 0, 287, 246, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 282, 0, 0, 0, 393, 259, 309, 266, 258,
	506, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 263, 446, 0, 0,
	183, 0, 0, 0, 244, 0, 466, 0, 314, 544,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 315,
	182, 209, 0, 0, 381, 0, 452, 481, 0, 278,
	271, 0, 0, 521, 220, 0, 0, 0, 0, 422,
	276, 361, 412, 0, 0, 0, 428, 519, 0, 0,
	0, 370, 0, 0, 0, 0, 210, 250, 398, 487,
	0, 472, 362, 510, 0, 327, 471, 286, 185, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 490,
	516, 223, 457, 464, 445, 550, 202, 0, 484, 0,
	324, 325, 201, 0, 436, 262, 0, 0, 390, 513,
	514, 515, 326, 213, 541, 0, 214, 0, 373, 511,
	329, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 272, 0, 0, 0, 292,
	0, 0, 0, 0, 426, 0, 467, 505, 0, 0,
	0, 0, 371, 295, 476, 328, 349, 435, 552, 0,
	447, 224, 527, 474, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 365, 0, 0, 368, 0,
	470, 0, 0, 0, 565, 448, 0, 0, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 520, 330, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 0, 203, 344, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 298, 299, 338, 0, 0, 0,
	0, 0, 0, 392, 403, 0, 0, 439, 0, 504,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 288, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 374, 0, 387, 389, 0, 395,
	0, 400, 0, 401, 411, 415, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 456,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 512,
	526, 322, 534, 251, 290, 0, 0, 352, 0, 205,
	0, 270, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 229, 477, 354, 0, 342, 0, 207, 0, 414,
	410, 294, 189, 0, 0, 0, 0, 0, 0, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	0, 0, 0, 0, 0, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 540, 0, 376, 539,
	480, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 234, 0,
	382, 0, 275, 0, 0, 0, 0, 175, 176, 177,
	0, 1691, 0, 0, 287, 246, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 282, 0, 0, 0, 393, 259, 309, 266,
	258, 506, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 263, 446, 0,
	0, 183, 0, 0, 0, 244, 0, 466, 0, 314,
	544, 0, 0, 305, 0, 0, 0, 0, 0, 0,
	315, 182, 209, 0, 0, 381, 0, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 516, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 326, 213, 541, 0, 214, 0, 373,
	511, 329, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 272, 0, 0, 0,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	0, 0, 0, 371, 295, 476, 328, 349, 435, 552,
	0, 447, 224, 527, 474, 0, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 448, 0, 0, 0,
	501, 0, 0, 0, 0, 0, 0, 0, 520, 330,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 203, 344,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 1316, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 322, 534, 251, 290, 0, 0, 352,
	0, 205, 0, 270, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 229, 477, 354, 0, 342, 0, 207,
	0, 414, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 0, 0, 0, 175,
	176, 177, 0, 1122, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 814, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 0, 0, 0, 290, 0,
	0, 352, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 0, 0, 949, 936,
	0, 0, 0, 414, 0, 897, 956, 900, 901, 928,
	0, 915, 923, 495, 851, 885, 857, 0, 858, 884,
	907, 0, 882, 0, 0, 0, 0, 886, 0, 870,
	0, 0, 0, 0, 855, 859, 860, 871, 875, 877,
	878, 883, 891, 896, 899, 902, 904, 906, 909, 921,
	930, 931, 937, 938, 939, 941, 942, 944, 953, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 918, 925, 894, 893, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 913, 935,
	905, 929, 874, 919, 0, 0, 924, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 948, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 912, 947, 0, 0,
	0, 950, 0, 0, 927, 0, 854, 920, 0, 0,
	864, 955, 945, 887, 888, 0, 0, 0, 0, 0,
	0, 0, 908, 914, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	853, 852, 0, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 946, 0, 0, 932, 869, 0, 0, 0,
	866, 0, 0, 0, 872, 895, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 880, 0, 876, 0,
	879, 916, 917, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 856, 863, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934,
}

var psqPact = [...]int{
	2944, -1000, -697, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1665, 1725, -1000,
	1623, -1000, -1000, -1000, 1769, -1000, 321, 1118, -1000, 1655,
	-135, 2750, 1405, -135, -1000, 43227, 103, -1000, 41625, 102,
	-188, 43227, -1000, -166, -1000, -196, 43227, -141, 30389, -1000,
	-1000, -624, 20766, 1524, -295, -320, 43227, -1000, -1000, -1000,
	-1000, 1757, 1352, -1000, 268, -1000, -1000, -1000, -1000, -1000,
	-1000, 48033, -1000, -1000, -1000, -1000, -1000, 1778, 240, 43227,
	-1000, 1726, 1352, -1000, 20766, 1747, 1715, -1000, 19142, -1000,
	19142, 48, -1000, -1000, 16678, -1000, -1000, 27986, 43227, 35996,
	-44, -1000, 1655, -1000, -1000, -1000, -226, -1000, -1000, -462,
	-1000, 1015, 1013, -1000, -1000, 277, 180, 78, 25, 25,
	71, 1630, 1627, 378, 377, 197, -1000, 538, 281, -496,
	-497, -1000, 5, 281, 281, 281, -53, 281, 281, 281,
	281, 281, 281, 281, 281, 281, -1000, 70, -1000, -183,
	1655, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43227, -154,
	43227, -1000, 167, 43227, 659, 659, -149, 659, 659, 659,
	-169, 492, -326, -1000, -189, -32, -181, -59, 647, -159,
	-1000, -190, -1000, 14186, -180, 14186, -1000, 1636, -1000, -1000,
	-1000, -1000, 684, -1000, 68, -1000, -1000, -1000, -1000, -1000,
	43227, 47232, 272, 284, -1000, -1000, -1000, -1000, -281, -1000,
	-1000, 773, 770, 20766, 448, -1000, 359, 204, -1000, -1000,
	-1000, -1000, -1000, 156, 21578, 21578, 21578, 21578, -1000, -1000,
	1018, 1018, 1018, 1018, 21578, 1018, 21578, 1018, 1018, 1018,
	1018, 20766, 1018, 1018, 1018, -1000, 1018, 1018, 1018, 1018,
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
	1018, 1018, 1018, 1018, 1018, 1018, 165, 1018, 1018, 1018,
	1018, 1018, -1000, -1000, -1000, -1000, 1018, 1018, 1018, 1018,
	1018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26384, -1000, 15838, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43227, -1000, 1018, 43227, 43227, -27,
	27185, 1726, 1352, -1000, 1757, 1735, 268, -1000, 1608, 1344,
	1336, 713, 1352, 974, 43227, -1000, 297, -1000, 1244, -1000,
	-1000, -1000, -1000, -1000, 891, 20766, -1000, -1000, 1459, 1765,
	-1000, 25583, 163, 1621, 1764, 40824, -1000, 48, 48, 998,
	15026, -306, -1000, -1000, -1000, 283, 40023, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1636,
	1109, 43227, -1000, -1000, 2407, 727, -1000, 1117, -1000, 1105,
	-1000, 1074, 20766, -64, 101, 727, 93, 87, 86, -1000,
	-1000, -393, -1000, 727, -1000, -1000, -1000, -1000, 281, 281,
	281, 514, 2720, 2750, -1000, -1000, -1000, -1000, 39211, 727,
	-1000, 1103, -1000, 363, 131, 181, 181, 727, -1000, -1000,
	43227, 727, 727, 43227, 43227, -48, -1000, -1000, -1000, -1000,
	43227, 727, 349, 348, 727, 727, 43227, 727, -1000, -1000,
	1319, -1000, -1000, -1000, 281, 281, 674, 648, 644, 281,
	642, -78, 1664, 603, 129, 1662, 1660, 43227, 1101, 705,
	-1000, -356, -1000, -1000, -74, 260, 727, 278, 1655, 989,
	66, 72, 727, 34, 34, 43227, -1000, 17518, -1000, -1000,
	600, 20766, -1000, 649, 647, 647, -1000, -1000, -1000, -1000,
	-1000, 659, 43227, 649, -1000, -1000, -1000, 647, 659, 43227,
	659, 659, 659, 659, 647, 647, 647, 659, 43227, 43227,
	43227, 43227, 43227, 43227, 43227, 43227, 43227, 14186, -1000, 1471,
	-1000, -1000, -1000, 14186, 14186, -1000, -1000, -1000, -171, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -406, 981,
	38410, -1000, -629, -631, -632, -1000, -1000, -1000, -633, -636,
	-1000, -1000, -1000, 20766, 20766, 20766, -524, -1000, 324, 21578,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 517, 388, 21578,
	21578, 21578, 1606, 21578, 21578, 21578, 21578, 21578, 21578, 21578,
	21578, 21578, 21578, 21578, 21578, 33593, 5555, 5555, 204, 204,
	204, 204, -1000, 19142, 20766, 20766, 204, -1000, 727, 37609,
	19142, 19142, 20766, 1649, 290, 770, 43227, -1000, 713, -1000,
	-1000, -1000, 466, -1000, 43227, 43227, -254, 20766, 20766, 20766,
	20766, 20766, 20766, 9146, 20766, 20766, 20766, 20766, 20766, 20766,
	20766, 20766, 20766, 20766, 20766, 20766, 20766, 20766, 20766, 20766,
	20766, 20766, 20766, 20766, 20766, 20766, 20766, 20766, 20766, 20766,
	8334, 17518, 19142, 19142, 19142, 19142, 19142, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 151,
	1328, 1248, 909, -1000, 979, -1000, -467, 31190, 20766, 1763,
	1144, 43227, 297, 53, 1735, -1000, -1000, -1000, 1726, -1000,
	1726, 1328, 1571, 1249, 19142, -1000, -1000, 1571, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 713, -1000, 43227, 974,
	1698, 43227, -1000, 1239, 20766, 20766, 967, -1000, 744, 106,
	-1000, 43227, -1000, -1000, 46431, -1000, -1000, 13346, 43227, 270,
	43227, -1000, 29588, 36808, 12506, -306, -1000, 12506, 943, -1000,
	-330, -313, 19954, 130, -1000, -1000, -1000, 277, 23180, 738,
	130, -236, -1000, -1000, -1000, 1074, -1000, 1074, 1313, 1074,
	1074, 1074, 1074, 39, -1000, 1096, 1086, -1000, 1074, -463,
	1074, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1387,
	-1000, 1076, 1076, 1076, 20, -1000, 20766, -125, 35996, 1688,
	487, 839, -74, 44, 1143, 727, 727, 727, 44, -1000,
	145, -1000, 717, 693, 686, 1472, 1744, -1000, -1000, 965,
	-1000, 43227, -94, -1000, 11, -1000, 35996, 727, 345, 181,
	727, -1000, 727, -1000, -1000, 574, -184, -560, 43227, -94,
	33593, -1000, -1000, -1000, 727, -1000, -1000, -1000, 51, -1000,
	-1000, -1000, -1000, 33593, 33593, -1000, -1000, -1000, 563, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -695, 43227, -1000, 43227, -1000,
	80, -99, -39, -4, -33, 43227, -1000, -1000, -52, 43227,
	43227, 34, 1197, 43227, 1687, 43227, -1000, -1000, -1000, -1000,
	-1000, 770, 43227, -1000, -1000, 659, 659, -1000, -1000, 43227,
	659, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 659,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 43227, -1000, -1000, -1000, -1000, 43227, -1000, -1000, -1000,
	-1000, -265, -341, 263, -1000, -1000, -1000, -1000, 1718, -1000,
	770, 329, -1000, 1018, -1000, -1000, 454, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 517, 21578, 21578, 21578, 858, 69,
	1187, 517, 287, 326, 374, 374, 386, 386, 208, 208,
	208, 208, 208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 555, -1000, 1031, -1000, 938, 838, 713, -1000,
	1031, 1031, 892, 19142, -1000, -1000, 319, -1000, 20766, 713,
	-1000, -1000, 713, 962, 953, 1762, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 770, 839, 839,
	839, 839, 839, 20766, 874, -1000, -1000, -1000, 1309, 1302,
	713, 773, 713, 949, -1000, 1251, 839, 1247, 1241, 1235,
	904, 1234, 1231, 1230, 839, 839, 839, 796, 1224, 1196,
	1179, 1175, 1170, 1152, 1151, 1051, 990, 839, 713, 19142,
	19142, 946, 1018, 143, -1000, 1031, 713, 713, 1031, 1031,
	17518, -1000, 43227, -1000, -619, -1000, -353, 189, -1000, 45630,
	-1000, -1000, 713, 4778, -1000, 44829, -1000, 552, 816, -1000,
	-1000, -1000, -1000, 35195, 1188, 1571, -1000, -1000, 1018, 1087,
	-1000, -1000, 770, 770, 20766, -1000, -1000, -1000, 255, -1000,
	-1000, -1000, 141, 1755, 1192, 43227, 1018, -1000, 24782, -1000,
	1156, 1339, -1000, -1000, -1000, 1696, 23981, -1000, 1018, 1018,
	43227, 1157, 1136, -1000, 139, -1000, 943, -306, -335, -1000,
	-1000, -1000, -1000, 770, -1000, 541, -1000, 184, -1000, 9,
	-1000, -1000, -1000, -1000, -1000, -1000, 1612, -273, -1000, -1000,
	-1000, -144, 1074, -1000, 39, -1000, -1000, -1000, -1000, 34394,
	198, 198, -212, 553, 553, -1000, 1074, -238, -1000, -1000,
	-1000, -1000, -1000, -1000, 486, -1000, -1000, -1000, 877, -1000,
	-125, -1000, -1000, 550, -1000, -1000, 1618, 43227, -1000, -1000,
	726, 1688, 79, 43227, 298, 1191, -1000, 1143, 1143, 1143,
	43227, 48861, -1000, -1000, -1000, -1000, -1000, -1000, 1743, 43227,
	2322, 1081, -1000, -119, -1000, -1000, 1046, 1084, 727, 727,
	-1000, -1000, 1654, 174, -1000, -1000, -541, -1000, -1000, -94,
	-119, 130, -1000, 727, -1000, -1000, -1000, -1000, -698, 1036,
	-1000, 43227, -73, 43227, 43227, 43227, 43227, 43227, 117, -1000,
	1079, 682, -1000, -1000, 50, -1000, 43227, 43227, 161, -1000,
	-1000, -1000, 647, -1000, -1000, 647, -1000, -1000, -1000, -1000,
	-1000, 1634, 43227, -344, -668, -1000, -652, 20766, -1000, -1000,
	-1000, -1000, 426, 67, 1187, 21578, 21578, -1000, -1000, 19142,
	-440, -95, -95, 33593, -1000, -1000, -1000, 20766, 20766, 1128,
	286, -1000, 20766, 724, -1000, -1000, 20766, 20766, 20766, 713,
	-1000, -1000, -1000, -1000, -1000, 1760, -1000, 20766, 20766, 20766,
	-1000, -1000, 20766, 20766, -1000, 20766, 20766, 22379, 713, 22379,
	20766, 20766, 22379, -1000, -1000, -1000, -1000, 22379, 20766, 20766,
	20766, 20766, 20766, 20766, 20766, 20766, 20766, -1000, -1000, 1031,
	1031, 19142, 17518, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 189, -1000, 181, 181, 181, -1000, -1000,
	-1000, -1000, -1000, -1000, 923, 879, 816, -100, -1000, 549,
	-1000, 1722, -1000, 1261, 1755, -1000, 29588, 1571, -1000, -1000,
	43227, -1000, 5555, 11666, 1726, 20766, -1000, 1669, 827, -1000,
	276, 830, -1000, -1000, 18330, 1029, 1257, 137, 43227, 29588,
	29588, 29588, 29588, 29588, -1000, 1210, 1209, -1000, 1236, 1218,
	1225, 43227, -1000, 1019, 713, 23981, 268, 20766, 31190, 775,
	29588, -1000, -1000, 29588, 43227, 10826, -1000, -1000, -349, -332,
	-1000, -1000, -1000, 277, -1000, -1000, 228, 1694, 1609, -1000,
	-1000, -1000, -1000, 39, -1000, 198, 198, -1000, -1000, -1000,
	-1000, -1000, -1000, 1011, -1000, 1000, -1000, 1289, 976, -184,
	-1000, -1000, 727, -1000, -1000, -1000, 43227, -1000, 1685, 43227,
	1190, 1176, 1171, -1000, -1000, -1000, -1000, 477, 895, 1731,
	43227, -1000, -1000, 43227, -125, 43227, -1000, -1000, -1000, 7227,
	-1000, -1000, -1000, -119, -1000, -1000, -1000, -1000, -1000, -1000,
	297, -1000, -1000, -1000, 1132, -1000, -1000, -1000, -1000, -155,
	-41, 721, -1000, -1000, 43227, 160, -1000, 43227, -1000, -1000,
	-1000, 659, 659, -1000, -1000, 1633, -1000, 727, 839, 21578,
	21578, -1000, 204, -1000, 1018, 713, 1074, 1074, -1000, 1076,
	-1000, 1074, -205, 1074, -215, 1074, 1386, -1000, 713, 713,
	736, 871, -400, -1000, 770, 20766, 985, 978, 839, -1000,
	20766, 839, 839, 839, -1000, 770, 904, 975, 811, -1000,
	-1000, -1000, -1000, 918, 839, 956, -610, 713, 971, 971,
	971, 971, 971, 909, 909, 909, 909, -1000, -1000, 713,
	-1000, -1000, 1711, 1711, 1711, 44028, -100, -1000, 546, -1000,
	-100, -1000, 1056, 355, -1000, 43227, -1000, -1000, -1000, 1753,
	914, -1000, -1000, -1000, -1000, -1000, 770, 341, -1000, 43227,
	20766, 1018, -1000, 239, 43227, 1018, 43227, 1252, 1339, 1129,
	1169, 1389, -1000, -1000, -1000, -1000, 1206, -1000, 1161, -1000,
	-1000, 297, -1000, -1000, 1248, 713, 911, 1755, 29588, 1139,
	1139, -1000, 135, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	397, 6812, 1776, -1000, 543, -1000, 525, 126, 465, -1000,
	-1000, -1000, 338, 302, -1000, 43227, 1045, -1000, -1000, -1000,
	-1000, 39, 542, 39, -1000, -1000, 464, -1000, -1000, -1000,
	297, -1000, -1000, 43227, 43227, 43227, 2, 43227, -1000, -1000,
	-1000, 897, -1000, 20766, -1000, -1000, -1000, 509, 509, -1000,
	-1000, -1000, 1693, -472, 43227, 43227, 43227, 43227, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204, 21578,
	-1000, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20766, -1000, 20766, -1000, 1726, 540, 770, 20766,
	20766, -1000, 839, -1000, -1000, -1000, 713, 22379, -1000, 22379,
	-1000, 20766, 153, -95, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1018, 1610, 1018, 1018, -1000,
	1755, -1000, -1000, 355, 842, -1000, 556, 429, 533, 531,
	529, -103, 528, 526, 297, 297, 297, 234, 519, 461,
	-1000, 1751, 1730, 1775, -1000, 770, -1000, 1018, -1000, 125,
	830, -1000, 1749, -1000, -1000, 20766, 1028, -1000, 20766, -1000,
	-1000, -1000, -1000, -1000, -1000, 5555, 1749, 1139, -1000, -1000,
	224, -1000, 20766, -1000, -1000, -1000, 4020, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1025, 20766, -1000,
	-1000, -1000, 716, 1692, -1000, -1000, -1000, 1428, 895, -5,
	839, -1000, -1000, 268, -1000, 17518, -1000, -1000, 1022, 1142,
	-1000, -36, -1000, 839, 839, 713, -1000, 839, 839, -1000,
	-1000, 811, -1000, 733, -1000, 153, 713, 1165, -1000, -1000,
	5555, -1000, 28787, -1000, 1729, 1728, 32792, 32792, -1000, 778,
	-1000, 355, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20766, 20766, 43227, 830, 43227, 1726, 770, 43227, 770, -298,
	1726, -1000, 839, -1000, 1018, 1018, 1018, 1018, 1018, 43227,
	737, -1000, 268, -1, -1000, -1000, -470, 823, -1000, 267,
	43227, 43227, 713, -68, -480, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20766, -1000, 713, 1159, -1000, -549, -1000, 764,
	-1000, -1000, -1000, -1000, -1000, 764, 764, -1000, -1000, 770,
	773, 725, -1000, -1000, 755, 713, 1018, -1000, -1000, 742,
	-1000, -470, -31, -1000, -350, 17518, 9986, 709, -1000, -1000,
	1228, -455, -485, 904, -1000, -642, -1000, -1000, 31991, -1000,
	-1000, -1000, -1000, 31190, 42426, -430, -131, -1000, 1563, 19,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1132, -1000, 1221,
	-1000, 713, -1000, -1000, -1000, 704, -1000, 340, -569, 1154,
	-1000, -419, -1000, -1000, -1000, 392, 518, -1000, -1000, -1000,
	-1000, -1000, 434, -77, -472, -477, -1000, -1000, 42426, -564,
	130, 5555, -1000, 1153, 1150, 1759, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -482, -1000, -1000, 1676, -298,
	-1000, 1761, -1000, 1773, 489, 489, -493, -573, -1000, -1000,
	-1000, -1000, -1000, 15, 739, -1000, -1000, 5555, -1000, -1000,
	-1000, 155, 155, -1000, -1000,
}

var psqPgo = [...]int{
	0, 2125, 22, 90, 208, 32, 235, 108, 2124, 2123,
	2121, 2119, 2118, 2110, 2109, 381, 374, 348, 2107, 2106,
	2104, 2103, 2102, 2099, 2098, 2096, 2095, 2094, 2092, 2090,
	360, 150, 203, 143, 2089, 2088, 2081, 2080, 2079, 1630,
	2076, 2075, 94, 149, 151, 2070, 2066, 2059, 2058, 2057,
	167, 166, 165, 1623, 2053, 164, 88, 2052, 2050, 2048,
	2045, 2036, 2029, 2028, 2026, 2025, 2024, 2023, 2021, 2020,
	2019, 2018, 187, 1642, 2017, 21, 2015, 65, 2013, 2012,
	2010, 2008, 2006, 2005, 2003, 2000, 128, 1994, 1991, 1990,
	224, 1989, 1987, 1986, 216, 93, 91, 1984, 1982, 83,
	1981, 136, 1980, 1978, 1977, 152, 1976, 5698, 1974, 52,
	50, 1972, 47, 68, 45, 44, 9, 14, 1971, 1970,
	51, 60, 1969, 1968, 54, 1965, 84, 81, 1964, 1958,
	11, 6, 1955, 1, 4, 2, 53, 1952, 1948, 102,
	1947, 1946, 1943, 79, 1939, 1937, 6057, 1936, 78, 114,
	87, 74, 1935, 1934, 33, 49, 1933, 1932, 1931, 1930,
	28, 1929, 1928, 1927, 127, 31, 163, 39, 38, 55,
	117, 1926, 35, 66, 1924, 123, 126, 1923, 1922, 1916,
	43, 1915, 40, 109, 97, 24, 159, 1913, 1912, 1663,
	207, 1911, 26, 1910, 37, 36, 1908, 82, 34, 1906,
	145, 1902, 58, 141, 111, 142, 1901, 1899, 1897, 1896,
	172, 1895, 1894, 1892, 71, 129, 133, 73, 1891, 406,
	1890, 1889, 76, 2780, 1446, 3185, 29, 137, 1885, 1884,
	96, 1883, 4253, 121, 113, 18, 1882, 161, 1881, 1880,
	1879, 240, 146, 95, 1876, 1643, 41, 1875, 1874, 13,
	1873, 1870, 1869, 1863, 1861, 1858, 63, 1855, 1853, 226,
	48, 8, 75, 139, 64, 1852, 1851, 103, 80, 1848,
	140, 138, 112, 86, 1846, 147, 130, 110, 1845, 168,
	1844, 1842, 1841, 1838, 89, 1835, 1834, 1833, 1832, 135,
	131, 99, 70, 1831, 72, 101, 134, 132, 20, 1655,
	1829, 12, 46, 42, 19, 98, 124, 1828, 0, 1825,
	15, 148, 408, 1645, 1818, 1817, 5, 7, 10, 1815,
	1813, 1812, 1811, 116, 1809, 1807, 1806, 1805, 17, 30,
	16, 3, 1801, 85, 27, 57, 25, 1798, 1796, 1795,
	4947, 4210, 106, 1793, 1792, 303,
}

//line psql.y:6466
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	sequenceIdent     ast.SequenceIdent
	sequenceName      ast.SequenceName
	copyFromSource    ast.CopyFromSource
	copyToTarget      ast.CopyToTarget
	copyOptions       ast.CopyOptions
	copyOption        ast.CopyOption
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterSchemaUnion() *ast.AlterSchema {
	v, _ := st.union.(*ast.AlterSchema)
	return v
}

func (st *psqSymType) alterSequenceUnion() *ast.AlterSequence {
	v, _ := st.union.(*ast.AlterSequence)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createSequenceUnion() *ast.CreateSequence {
	v, _ := st.union.(*ast.CreateSequence)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) sequenceSpecUnion() *ast.SequenceSpec {
	v, _ := st.union.(*ast.SequenceSpec)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 338, 339, 339, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 308,
	308, 308, 311, 311, 26, 68, 30, 30, 29, 29,
	32, 32, 31, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 5,
	5, 5, 5, 7, 7, 7, 13, 14, 6, 28,
	28, 28, 332, 332, 332, 333, 333, 333, 335, 335,
	335, 334, 334, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 337, 337,
	337, 15, 15, 80, 80, 16, 17, 17, 17, 17,
	342, 342, 141, 141, 139, 139, 140, 140, 18, 19,
	19, 205, 205, 204, 204, 204, 206, 206, 206, 206,
	245, 245, 20, 20, 20, 20, 20, 20, 91, 91,
	310, 310, 309, 301, 301, 300, 300, 298, 307, 307,
	306, 306, 305, 34, 40, 41, 47, 47, 47, 47,
	35, 36, 48, 49, 312, 280, 54, 54, 53, 53,
	53, 53, 53, 53, 55, 55, 51, 51, 50, 50,
	52, 52, 282, 282, 269, 269, 281, 281, 281, 281,
	281, 281, 281, 268, 268, 102, 102, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 327, 327, 327, 326, 326, 188, 188, 188,
	188, 188, 188, 188, 188, 111, 111, 120, 120, 120,
	120, 120, 299, 109, 109, 110, 108, 108, 108, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 119, 119, 115, 115, 115, 116, 116,
	116, 117, 117, 328, 328, 328, 328, 249, 249, 249,
	249, 252, 252, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 251, 251, 251, 251, 251, 251, 251, 253,
	253, 253, 253, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 255, 255, 255, 255, 255, 255,
	255, 255, 267, 267, 256, 256, 257, 257, 258, 258,
	263, 264, 264, 264, 265, 265, 265, 266, 266, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 262, 262,
	261, 261, 261, 270, 294, 294, 293, 293, 291, 291,
	291, 291, 291, 279, 279, 288, 288, 288, 288, 288,
	278, 278, 274, 274, 274, 275, 275, 276, 276, 273,
	273, 277, 277, 290, 290, 289, 289, 271, 271, 272,
	272, 296, 329, 329, 329, 329, 329, 330, 330, 297,
	319, 321, 321, 321, 320, 320, 317, 318, 316, 316,
	316, 316, 316, 77, 77, 77, 217, 217, 218, 218,
	286, 286, 285, 285, 285, 287, 287, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 213, 213, 213, 315, 315, 315, 315, 315,
	315, 314, 314, 314, 283, 283, 283, 313, 313, 56,
	56, 173, 173, 38, 45, 45, 45, 45, 45, 45,
	44, 44, 44, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 46, 46, 43, 43, 43, 43, 43,
	43, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 129, 131, 132, 132, 130, 130,
	130, 130, 130, 130, 58, 58, 57, 57, 134, 133,
	135, 135, 135, 22, 37, 37, 23, 23, 23, 23,
	24, 24, 59, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 212, 212, 220, 220, 211, 211, 237,
	237, 237, 214, 214, 214, 325, 325, 325, 208, 208,
	61, 61, 61, 63, 63, 64, 65, 65, 239, 239,
	240, 240, 66, 67, 78, 78, 78, 78, 78, 78,
	81, 81, 81, 9, 9, 9, 9, 74, 74, 74,
	8, 8, 62, 62, 69, 322, 322, 323, 324, 324,
	324, 324, 70, 25, 25, 25, 25, 25, 25, 98,
	98, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 92, 92, 92, 87, 87, 343, 27, 344,
	72, 73, 73, 93, 93, 90, 90, 90, 84, 84,
	84, 89, 89, 89, 10, 10, 11, 196, 196, 12,
	12, 95, 95, 97, 97, 97, 97, 97, 99, 99,
	99, 99, 99, 99, 99, 94, 94, 96, 96, 96,
	96, 228, 228, 228, 227, 227, 123, 123, 125, 124,
	124, 126, 126, 127, 127, 127, 127, 171, 171, 149,
	194, 194, 194, 192, 192, 193, 193, 195, 195, 195,
	195, 128, 128, 128, 128, 136, 136, 137, 137, 138,
	138, 33, 238, 238, 235, 235, 235, 234, 234, 142,
	142, 142, 144, 143, 143, 143, 143, 145, 145, 147,
	147, 146, 146, 148, 153, 153, 152, 152, 150, 150,
	150, 150, 151, 151, 151, 151, 39, 39, 154, 154,
	107, 107, 107, 107, 107, 107, 118, 118, 118, 118,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 79, 79,
	79, 209, 209, 155, 155, 163, 163, 163, 163, 156,
	156, 156, 156, 156, 156, 156, 164, 164, 164, 170,
	165, 165, 161, 161, 161, 161, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 247, 247, 304, 304, 303, 303,
	302, 302, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 345, 345, 259, 259, 259, 162, 162,
	162, 162, 162, 88, 88, 88, 88, 88, 243, 243,
	243, 248, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 176, 176, 85, 85,
	174, 174, 175, 177, 177, 172, 172, 172, 158, 158,
	178, 178, 179, 179, 180, 180, 182, 181, 181, 183,
	184, 184, 184, 185, 185, 186, 186, 186, 101, 101,
	100, 100, 75, 75, 76, 76, 76, 105, 105, 106,
	106, 106, 103, 103, 104, 104, 189, 189, 190, 157,
	157, 157, 157, 157, 191, 191, 191, 191, 197, 197,
	167, 167, 169, 169, 168, 122, 198, 198, 202, 199,
	199, 203, 203, 203, 203, 203, 200, 200, 201, 201,
	231, 231, 231, 207, 207, 219, 219, 215, 215, 216,
	216, 210, 210, 221, 221, 221, 71, 166, 166, 295,
	295, 292, 225, 225, 225, 226, 226, 229, 230, 232,
	232, 232, 236, 236, 233, 233, 244, 244, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 340, 341, 241, 242,
	242, 242,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 2, 3, 2, 3, 0, 1,
	3, 1, 4, 3, 3, 4, 3, 2, 3, 4,
	3, 4, 2, 7, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 3, 2, 2, 5, 7, 8, 8,
	7, 6, 1, 2, 1, 1, 2, 1, 0, 4,
	3, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 1,
	1, 6, 7, 1, 1, 10, 10, 9, 8, 8,
	1, 1, 1, 3, 1, 3, 1, 3, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 5, 11, 2, 2, 0, 2,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 1,
	1, 3, 3, 3, 6, 5, 7, 8, 8, 8,
	3, 3, 6, 3, 1, 4, 0, 1, 1, 1,
	1, 2, 2, 2, 0, 1, 4, 4, 4, 4,
	4, 4, 2, 4, 1, 3, 1, 1, 3, 4,
	3, 3, 3, 5, 10, 0, 2, 0, 2, 3,
	5, 3, 4, 2, 3, 2, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 1, 2, 2, 2,
	2, 2, 12, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 3, 2, 3, 3, 4, 3, 2, 2, 2,
	2, 1, 5, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 1, 0, 3,
	0, 0, 3, 5, 0, 1, 1, 0, 1, 0,
	3, 3, 2, 2, 2, 1, 2, 2, 0, 1,
	0, 2, 2, 5, 0, 1, 1, 2, 1, 2,
	1, 1, 3, 0, 1, 4, 3, 3, 4, 2,
	0, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 1, 3, 3, 4, 3, 1, 3,
	1, 7, 6, 7, 7, 8, 8, 0, 1, 5,
	2, 1, 1, 1, 0, 1, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 1, 1, 2, 0, 1,
	0, 1, 1, 3, 2, 1, 2, 4, 4, 3,
	3, 3, 4, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 0, 2, 3, 0, 1, 5, 1, 3, 7,
	1, 3, 3, 1, 2, 2, 2, 5, 5, 5,
	6, 8, 5, 5, 4, 4, 4, 6, 5, 5,
	2, 2, 2, 2, 3, 3, 3, 4, 3, 3,
	1, 3, 5, 1, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 10, 3, 8, 6, 6, 6,
	13, 8, 6, 10, 8, 4, 1, 3, 3, 6,
	7, 7, 8, 4, 0, 1, 0, 1, 3, 3,
	1, 1, 2, 3, 3, 5, 7, 6, 6, 5,
	3, 2, 3, 3, 3, 7, 3, 3, 3, 4,
	7, 5, 2, 4, 4, 4, 4, 4, 5, 5,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 4, 4, 4, 4,
	4, 5, 3, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 1, 1,
	2, 1, 3, 1, 2, 1, 1, 5, 0, 1,
	0, 1, 2, 3, 0, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 3, 2, 2, 3, 1, 3, 2, 1, 2,
	1, 2, 2, 3, 3, 6, 4, 7, 6, 1,
	3, 2, 2, 2, 1, 1, 1, 3, 2, 1,
	1, 1, 0, 1, 1, 0, 3, 0, 7, 0,
	2, 0, 2, 0, 1, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 5, 5, 4, 0, 2, 4,
	4, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 3, 1, 3, 4, 3,
	0, 3, 1, 1, 3, 1, 3, 1, 1, 3,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 1, 1, 2, 6, 5,
	6, 6, 0, 2, 3, 3, 2, 4, 0, 2,
	3, 3, 2, 3, 1, 6, 3, 4, 3, 1,
	3, 4, 5, 6, 3, 4, 5, 6, 3, 4,
	1, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 3,
	1, 1, 2, 2, 2, 2, 1, 1, 2, 9,
	6, 6, 6, 2, 2, 3, 3, 3, 1, 1,
	1, 0, 3, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 5, 5, 6, 4, 4, 8, 6,
	8, 6, 8, 5, 4, 2, 2, 1, 2, 2,
	2, 8, 8, 6, 5, 4, 4, 4, 4, 4,
	7, 4, 6, 6, 6, 4, 4, 4, 7, 8,
	6, 5, 6, 8, 11, 7, 8, 8, 9, 4,
	4, 4, 4, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 4, 0, 2, 0, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 2, 3, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	1, 0, 2, 3, 1, 2, 1, 2, 1, 2,
	2, 1, 2, 2, 2, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 2,
	0, 3, 0, 2, 0, 1, 3, 1, 3, 2,
	0, 1, 1, 0, 1, 2, 4, 4, 0, 3,
	1, 1, 0, 4, 0, 1, 1, 0, 3, 1,
	3, 2, 1, 1, 0, 1, 2, 4, 2, 2,
	1, 5, 4, 4, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 0,
	3, 0, 1, 0, 1, 1, 5, 0, 1, 0,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var psqChk = [...]int{
	-1000, -338, -1, -5, -27, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -59, -60, -61,
	-63, -64, -65, -66, -67, -8, -62, -25, -26, -68,
	-69, -70, -71, -10, -11, -12, -28, -3, -2, -7,
	-343, 9, 10, -80, -29, 32, -40, -47, 485, -48,
	-35, -41, -34, -36, 486, -49, 488, 487, 524, 489,
	518, 343, 569, 570, 572, 573, 574, 575, -81, 522,
	523, 492, 36, 173, 33, 34, 37, 530, 531, 495,
	348, -4, -30, 8, -340, 11, 686, 520, 519, 28,
	-6, 720, 354, -339, 853, -189, -190, 22, 33, 29,
	-186, -182, -90, -190, 20, 18, 7, 38, -72, -344,
	-72, -72, 12, 13, -72, -280, -282, 354, 422, 354,
	-72, -54, -53, -51, -50, -52, -55, 31, -299, 570,
	-45, -44, -46, -42, -43, -287, 491, 486, 493, 494,
	687, 390, 389, 387, 388, 487, 344, 488, 33, 720,
	723, -284, -55, 369, 371, 832, 499, 835, 836, 839,
	840, 846, 847, 848, 391, 7, -38, 203, -299, -72,
	-236, -232, -308, -223, -224, 357, 358, 359, 69, 70,
	71, 72, 511, 491, 753, 559, 73, 74, 486, 42,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 569,
	408, 583, 577, 718, 84, 19, 85, 37, 86, 512,
	547, 87, 88, 594, 597, 89, 90, 91, 92, 93,
	525, 623, 94, 572, 652, 371, 95, 96, 97, 832,
	98, 99, 100, 101, 348, 102, 112, 113, 114, 115,
	116, 117, 656, 666, 495, 118, 365, 119, 120, 121,
	548, 13, 122, 123, 124, 125, 126, 127, 390, 387,
	128, 129, 586, 487, 130, 732, 389, 131, 132, 604,
	822, 521, 626, 762, 133, 352, 531, 26, 520, 134,
	135, 136, 382, 137, 138, 139, 558, 364, 763, 344,
	815, 140, 630, 141, 41, 644, 142, 143, 735, 736,
	144, 111, 145, 671, 146, 503, 147, 148, 149, 388,
	150, 151, 152, 153, 499, 510, 154, 155, 156, 157,
	158, 159, 11, 160, 581, 582, 593, 556, 646, 601,
	699, 161, 162, 700, 163, 164, 165, 166, 737, 381,
	167, 401, 35, 168, 719, 169, 560, 170, 171, 647,
	172, 173, 818, 174, 33, 770, 175, 176, 716, 177,
	178, 532, 553, 179, 180, 676, 181, 331, 679, 182,
	542, 643, 183, 599, 775, 184, 328, 185, 186, 187,
	188, 515, 350, 189, 190, 191, 192, 777, 193, 778,
	589, 194, 744, 386, 195, 780, 196, 197, 549, 198,
	782, 784, 199, 745, 200, 201, 202, 203, 204, 205,
	40, 785, 533, 206, 840, 786, 207, 208, 209, 210,
	789, 211, 530, 212, 213, 214, 635, 215, 537, 216,
	217, 218, 219, 220, 221, 648, 585, 222, 223, 748,
	224, 225, 226, 227, 228, 575, 488, 651, 686, 229,
	230, 797, 517, 231, 232, 233, 800, 573, 234, 235,
	236, 237, 238, 239, 574, 240, 497, 637, 241, 242,
	681, 557, 552, 243, 654, 244, 645, 32, 245, 246,
	330, 518, 806, 807, 579, 247, 248, 550, 249, 250,
	570, 251, 252, 253, 254, 850, 393, 255, 361, 256,
	257, 690, 258, 259, 750, 638, 391, 260, 261, 262,
	554, 600, 810, 590, 591, 592, 571, 263, 264, 538,
	698, 524, 265, 266, 267, 268, 811, 653, 269, 270,
	271, 272, 273, 274, 12, 275, 276, 277, 278, 329,
	326, 595, 279, 280, 500, 281, 282, 283, 284, 723,
	576, 285, 649, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 685, 298, 299, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 498, -72,
	498, -146, -232, 498, -200, 622, -220, 624, 637, 632,
	630, -212, 633, 635, 537, -325, 644, 498, 639, 485,
	634, 642, 546, -308, 439, 850, 399, 597, 629, 627,
	645, 818, -232, 571, -239, 576, -225, -308, -223, -224,
	574, -146, -78, 815, 490, 489, -241, -241, -92, 818,
	820, -165, -107, 406, -118, -121, -112, -113, -159, -160,
	-161, -162, -119, -172, 428, 429, 436, 407, -170, -122,
	26, 716, 688, 687, 439, 31, 593, 337, 338, 690,
	691, 409, 326, 662, 663, -120, 657, 664, 659, 693,
	694, 382, 695, 372, 374, 373, 696, 697, 698, 602,
	603, 699, 700, 701, 375, 376, 377, 378, 379, 380,
	381, 702, 705, 703, 704, 706, 707, 708, 713, 714,
	709, 710, 711, 712, 715, -225, -232, 503, 656, 497,
	434, 686, -114, -110, -2, -168, 655, 660, 661, 665,
	658, -308, -223, -224, -116, -115, -155, 360, 366, 370,
	367, -331, 383, -340, 365, 364, 361, 362, 363, 384,
	385, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 117, 638, 638, -146, -72, -72, -72,
	-72, -180, -90, -182, -4, -2, -340, 8, -72, -2,
	-3, -7, -30, -32, 748, -31, -232, 12, 424, -146,
	-185, -186, -6, -2, -107, 19, 23, 24, -73, -96,
	430, -107, -232, -73, -96, -210, 502, -72, -72, -199,
	-245, 571, -203, 645, 644, -226, -201, -225, -222, -200,
	643, 23, 490, 489, 405, 43, 726, 25, 27, 44,
	45, 439, 394, 727, 409, 688, 509, 438, 622, 505,
	38, 46, 513, 485, 341, 47, 657, 48, 49, 659,
	655, 662, 31, 50, 28, 24, 36, 412, 413, 733,
	385, 51, 305, 304, 303, 514, 52, 14, 629, 53,
	16, 17, 54, 424, 55, 339, 56, 29, 421, 57,
	335, 740, 395, 337, 422, 20, 660, 661, 301, 342,
	406, 58, 383, 21, 345, 302, 650, 403, 18, 340,
	59, 60, 504, 516, 814, 338, 8, 61, 62, 63,
	300, 64, 65, 498, 66, 411, 501, 396, 384, 7,
	400, 640, 346, 67, 68, 410, 15, 751, 720, 597,
	-281, 422, -268, -272, -225, 513, -297, 509, -146, -290,
	-289, -225, -340, -91, -219, 499, 507, 506, 400, -39,
	-312, 403, 554, 552, 656, -50, -51, -52, -200, 438,
	835, 720, 355, 355, -284, -272, -271, -270, -313, 513,
	-296, -288, 505, 514, -278, 506, 507, -273, 499, 401,
	-313, 509, 499, -313, -313, 501, 35, 35, 391, 391,
	-313, -273, 504, 514, 509, 513, -221, -273, 501, 25,
	-279, 414, 724, 724, -200, 438, -279, -279, -279, 541,
	-279, -279, -279, -279, -279, -279, -279, -279, -279, 501,
	-33, 498, -39, -312, -105, 642, 497, 548, -53, -37,
	-146, -219, 499, 500, -312, 530, -146, 482, -146, -214,
	422, 15, -214, -211, 638, 636, 623, 628, -214, -214,
	-214, 544, 621, -274, 499, 35, 510, 638, 544, 621,
	544, 545, 544, 545, 631, 641, 544, -237, 14, 424,
	656, 626, 630, 537, 498, 538, 500, 640, 638, 540,
	-242, -340, -226, -308, 821, -242, 32, 358, 501, -225,
	-74, -225, 361, -9, -5, -16, -15, -17, 414, -98,
	638, -86, 439, 822, 823, 824, 821, 635, 829, 827,
	825, 544, 826, 355, 403, 405, 4, -107, 421, -156,
	414, 415, 416, 417, 418, 419, 420, 424, 406, 408,
	422, 423, 414, 404, 425, 426, 427, 428, 429, 430,
	431, 433, 432, 434, 435, 438, 483, 484, -113, -113,
	-113, -113, -170, -340, -340, -340, -113, -209, -340, -113,
	-340, -340, -340, -340, -176, -107, -340, -345, -340, -345,
	-345, -259, -340, -259, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-340, 482, -340, -340, -340, -340, -340, -259, -259, -259,
	-259, -259, 370, 366, 360, -172, 367, 361, -225, -232,
	-2, -3, -165, -241, -322, -323, -149, -146, -340, -225,
	-225, 530, -146, -3, -2, -185, -6, -2, -180, -186,
	-182, -2, -72, -84, -97, 332, 333, -99, 24, 39,
	336, 334, 23, -341, 356, -341, -189, -341, 355, -32,
	-194, 354, 430, 330, 355, 21, -181, -183, -107, 345,
	38, 14, -228, -227, 25, -225, 361, 482, 14, -147,
	29, -146, -210, -210, 355, 571, -203, -245, -205, -204,
	646, 648, 414, -231, -225, 361, 31, 356, 355, -146,
	-249, -252, -254, -253, -255, -250, -251, 594, 597, 595,
	439, 727, 598, 600, 601, 604, 32, 590, 591, 592,
	593, 605, 606, 607, 608, 609, 610, 611, 612, 577,
	596, 718, 578, 579, 580, 581, 582, 583, 585, 586,
	587, 588, 589, 365, -311, -308, 354, 356, 355, -256,
	354, -107, -105, 498, -308, 499, 499, 499, -72, 686,
	-230, -308, -279, -279, -279, 363, 18, -42, -43, -44,
	-43, 354, -268, -277, -311, -308, 354, 401, 504, 400,
	-276, -273, -276, -277, -308, -172, -308, -308, -172, -268,
	-200, -172, -308, 401, 401, -308, -308, -146, -308, 31,
	350, 351, 352, -279, -279, 361, 361, 361, -279, 361,
	-314, 515, 558, 560, 31, 361, -315, 31, 842, 841,
	843, 844, 845, 31, 31, -225, 354, 357, -93, 650,
	-101, 550, 485, 487, 491, 345, -229, -308, 414, 355,
	501, 498, -308, -215, 503, -215, -225, -233, -232, -222,
	361, -107, -275, 14, 424, -237, -237, -214, -146, -275,
	-237, -214, -146, -214, -214, -214, -214, -237, -237, -237,
	-214, -232, -232, -146, -146, -146, -146, -146, -146, -146,
	-242, -208, 14, 345, -242, -242, -240, 574, 601, 816,
	817, 355, 720, -139, -146, 821, 821, 821, 821, 821,
	-107, -107, -107, 744, -163, 383, 406, 384, 385, -121,
	-164, -168, -170, 368, 424, 408, 422, 423, -112, -113,
	-112, 43, -112, -112, -112, -112, -112, -112, -112, -112,
	-112, -112, -112, -112, -243, -225, 361, 439, -117, -116,
	367, 361, -331, -117, -94, -96, -107, -107, -308, -225,
	-94, -94, -107, -89, 24, 39, -174, -175, 410, -172,
	-341, -341, 367, -225, -225, -83, -82, 667, 668, 669,
	670, 672, 673, 674, 677, 678, 682, 683, 666, 684,
	671, 676, 679, 680, 681, 675, 685, -107, -107, -107,
	-107, -107, -107, -79, -107, 394, 395, 396, -107, -107,
	-166, -165, -307, -306, -305, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -107, -107, -107, -95, 24,
	39, -94, -226, -233, -222, -94, -95, -95, -94, -94,
	482, -341, 355, -324, 648, 649, 819, -235, -234, 25,
	-232, 361, -166, 14, -196, 346, -225, -194, 501, -185,
	-185, 332, 333, 328, -94, -99, -341, -31, 25, -192,
	-225, 331, -107, -107, 355, -184, 27, 28, -33, -146,
	-227, 430, -233, -146, -157, 32, 326, -5, -340, -146,
	-124, -126, -127, -128, -149, -171, -340, -129, 740, 737,
	14, -139, -140, -148, -232, -203, -205, 355, 647, 649,
	650, 345, 386, -107, -261, 438, -286, -285, -284, -268,
	-270, -271, -272, 499, 401, 356, -261, -265, 619, 618,
	-256, -256, -257, 279, -256, -256, -256, -256, -260, -200,
	613, 614, 439, 354, 354, -256, -258, 720, -256, -263,
	-263, 211, -263, -264, 354, -264, -264, -297, -107, -294,
	-293, -291, -292, 369, 813, 769, 720, 346, -289, -184,
	363, -341, -101, -216, 503, -295, -292, -308, -308, -308,
	-216, 482, -308, 361, -308, 361, -308, 361, 152, 19,
	355, -269, -268, -56, 558, -296, -290, -277, 401, -276,
	-277, -277, 487, 32, -217, 760, 406, 813, 769, -268,
	-56, -243, -308, 501, -243, -243, 361, -213, 850, -139,
	-146, 500, 557, 539, 539, 498, 498, 552, -146, -106,
	662, -103, 361, 357, -146, -146, -215, 345, -141, -146,
	26, -232, -146, -214, -214, -146, -214, -214, -146, -225,
	-86, 648, 355, 720, 22, -87, 22, -340, 383, 384,
	385, -164, -112, -113, -112, 405, 521, -164, 361, 355,
	-341, 25, 355, 346, -341, -341, -341, 355, 14, -94,
	-177, -175, 412, -107, -341, -341, 355, 355, 14, -248,
	-341, -341, -341, -341, -341, -176, -341, 14, 355, 355,
	-341, -341, 355, 355, -341, 355, 355, 355, -304, 355,
	355, 355, 355, -341, -341, -341, -341, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, -341, -341, -94,
	-94, -340, 482, -341, -341, -341, -341, -341, -226, -323,
	818, 649, -153, -152, -150, 343, 502, 344, -234, -341,
	-117, 358, -193, 358, -192, 14, 501, -333, 361, 217,
	254, -158, -225, 367, -123, -125, 14, -99, -170, 356,
	355, -183, 421, 482, -154, 15, -197, 345, -198, -202,
	-172, -167, -169, -168, -340, -191, -341, -225, 32, 355,
	-142, -144, -143, -145, 335, 339, 341, 336, 337, 338,
	342, -238, 25, -124, -3, -340, -340, -340, -146, -139,
	-342, 14, 346, -342, 355, 482, -204, -206, 651, 648,
	654, -308, 361, 355, -284, -272, -187, -102, 41, -266,
	620, -260, 728, -256, -260, -225, 361, 439, -262, 439,
	-262, 613, 614, -267, 361, -267, -256, 591, 363, 356,
	-291, 361, 40, -225, 356, -184, 500, -146, 406, 345,
	-295, -295, -295, -232, -244, -230, -222, 19, -192, 18,
	355, 356, -173, 559, 356, 354, -277, -277, 31, 31,
	813, 769, 760, -56, -173, -261, -308, 852, 851, 356,
	-146, -100, 548, 556, -146, -146, -146, -146, -146, 491,
	487, 354, -104, 358, 501, -139, -146, 355, -77, 517,
	512, -237, -237, 33, -146, 648, 830, 828, -107, 405,
	521, -121, -113, -96, 717, -246, 439, 594, 590, 588,
	601, 599, 618, 591, 619, 587, 586, 585, -246, -243,
	-107, -107, -180, 413, -107, 411, -107, -107, -107, -341,
	14, -107, -107, -107, -305, -107, -107, -107, -303, -302,
	-117, -172, -341, -303, -107, -107, -302, -302, -306, -306,
	-306, -306, -306, -165, -165, -165, -165, -341, -341, -95,
	-226, -150, -273, -273, -273, 355, -332, 361, 217, 253,
	-333, -335, 720, 354, 361, -207, 22, 14, 326, -154,
	-124, -99, -225, -117, 430, -185, -107, 30, -197, 355,
	414, 355, -341, -341, 355, 326, 482, -198, -126, -127,
	-127, -126, -127, 335, 335, 335, 340, 335, 340, 335,
	-143, -232, -341, -341, -3, -3, -107, -235, 346, -124,
	-124, -148, -232, 430, 648, 652, 653, -284, -330, 383,
	406, 31, 345, 616, 369, -328, 438, 757, 808, 813,
	769, -329, 504, 400, 401, 516, 25, 42, -260, -262,
	-262, 356, 355, 356, 299, 356, 355, -218, -217, -308,
	-146, 26, -146, 345, 345, 345, 363, 19, -268, -172,
	-294, -192, -109, -340, -108, -110, -114, 428, 429, 364,
	365, -173, -194, -310, 346, 539, 616, 539, 356, -146,
	-77, -146, -214, -214, 33, -308, -341, -121, -113, -340,
	-341, -256, -256, -264, -256, 582, -256, 582, -256, 211,
	-341, -341, 355, -341, 22, -341, -85, 692, -107, 355,
	355, -341, -107, -341, -341, -341, -304, 355, -341, 355,
	-341, 355, -247, 814, -341, -341, -341, -341, -341, -341,
	-341, -341, -341, -341, -341, -151, 22, -151, -151, 358,
	-335, 361, -335, 354, -334, -336, 815, 52, 122, 383,
	31, 111, 219, 521, 305, 304, 303, 302, 131, 301,
	-146, -178, 16, 401, -202, -107, -169, 326, -5, -225,
	-167, -225, -154, -137, -136, 345, 346, -138, 345, -136,
	335, 335, -194, -341, -341, 355, -154, -124, -154, -154,
	482, 383, -340, -111, -120, -109, 12, 361, 361, -308,
	-327, 841, 842, 31, 363, 401, 401, -146, 354, -260,
	361, -260, 363, -194, -146, -146, -146, 515, -192, 356,
	-107, -115, -115, 25, -301, 720, -309, -225, -225, -225,
	-225, -112, -260, -107, -107, -185, 361, -107, -107, -341,
	-341, -303, -302, -107, -341, -134, -133, -135, 822, 383,
	31, -246, -340, 335, 18, 16, -340, -340, -154, -334,
	356, 355, 357, -155, 361, 361, 361, -155, 716, 361,
	361, -194, -194, -194, -337, 300, 502, 361, 363, -179,
	17, 19, 12, -167, 482, -180, -107, 354, -107, -117,
	-180, -154, -107, -160, 382, 698, 699, 700, 381, 354,
	-107, 356, 25, 181, -329, -341, -5, -300, -298, -226,
	354, 346, -88, 424, 720, -341, -341, -341, -341, -341,
	-341, -341, 355, -341, -133, -135, -341, 345, -117, -195,
	-341, -225, 504, 19, 19, -195, -195, 356, -336, -107,
	-165, -198, -225, -185, -192, -131, 623, -185, -341, -192,
	356, -5, 515, -75, 720, 355, 414, -192, -146, -341,
	718, 342, 721, -107, -341, 345, 732, 822, 355, -341,
	-341, -341, 356, -341, -340, 356, -188, -75, 532, -76,
	547, 818, -298, -283, -226, 361, 363, 356, 331, 719,
	722, -304, -225, 504, -235, -132, -130, -225, 775, -320,
	-319, 716, -330, -326, 383, 406, 369, -328, 813, 769,
	392, 393, 85, 509, -310, 331, -341, -341, 355, 22,
	-249, -58, 786, -317, -318, 345, -321, 629, 785, 806,
	383, 361, 363, 549, -301, 720, -130, 782, -261, -117,
	-318, 345, -317, 345, 13, 12, 721, -57, 26, -131,
	-316, 517, 512, 515, 32, -316, 722, 786, 511, 31,
	383, -117, -134, -133, -133,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 69, 71, 72,
	0, 719, 719, 719, 0, 719, 0, 0, 719, -2,
	0, -2, 0, 0, 719, 1162, 0, 719, 0, 0,
	-2, 651, 653, 0, 655, -2, 0, 0, 664, 1688,
	1688, 712, 0, 0, 0, 0, 0, 719, 719, 719,
	719, 1064, 49, 719, 0, 113, 114, 670, 671, 672,
	64, 0, 1686, 1, 3, 70, 74, 0, 0, 0,
	57, 1073, 0, 75, 0, 0, 725, 721, 0, 721,
	0, 1141, 719, 719, 0, 142, 143, 0, 0, 0,
	-2, 146, -2, 178, 179, 180, 0, 185, 147, 0,
	551, 505, 507, 510, 543, -2, -2, 497, 497, 497,
	0, 0, 0, 0, 0, 497, 540, 1143, 403, 0,
	0, 465, 0, 403, 403, 403, 0, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 552, 0, 553, 1087,
	184, 1163, 1159, 1160, 1161, 39, 40, 41, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 0, 1135,
	0, 591, 821, 0, 642, 642, 0, 642, 642, 642,
	0, 0, 0, 602, 0, 0, 0, 0, 639, 0,
	618, 0, 624, 1689, 0, 1689, 1126, 0, 636, 634,
	646, 647, 650, 654, 0, 659, 662, 1152, 1153, 1154,
	0, 677, 48, 1388, 668, 669, 682, 683, 0, 713,
	714, 44, 920, 0, 844, 849, 860, 874, 875, 876,
	877, 878, 880, 881, 0, 0, 0, 0, 886, 887,
	1375, 1456, 0, 0, 0, 901, 1424, 0, 0, 1599,
	0, 1046, 1638, 1013, 1013, 937, 1013, 1015, 1015, 0,
	0, 1380, 0, 0, 0, 0, 0, 0, 1618, 0,
	0, 1428, 1431, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 1403, 1340, 1564,
	0, 1546, 303, 304, 919, 1115, 1015, 1015, 1015, 1015,
	1015, -2, -2, -2, 249, 250, 251, 252, 253, 254,
	255, 0, 245, 0, -2, -2, -2, 309, 305, 903,
	904, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 1688, 0, 692, 0, 0, 0, 0,
	0, 1073, 0, 1065, 1064, 62, 0, 719, -2, 0,
	0, 0, 0, 46, 1537, 51, 780, 1096, 0, 1098,
	58, 1074, 66, 68, 1075, 0, 726, 727, 0, 0,
	757, 761, 0, 720, 0, 0, 1142, 1141, 1141, 128,
	0, 1614, 1119, -2, -2, 0, 0, 1155, 1156, 1128,
	-2, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1312,
	0, 0, 196, 197, 0, 42, 430, 0, 192, 0,
	423, 364, 0, 1087, 0, 0, 0, 0, 0, 170,
	719, 0, 1136, 0, 174, 181, 182, 183, 403, 403,
	403, 0, 184, 184, 466, 514, 515, 516, 0, -2,
	428, 0, 498, 0, 0, 417, 417, 421, 419, 420,
	0, 0, 0, 0, 0, 0, 530, 531, 532, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 1145,
	0, 404, 549, 550, 403, 403, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 723, 171, 173, 1078, 0, 0, 0, -2, 583,
	0, 0, 0, 1137, 1137, 0, 590, 0, 592, 593,
	0, 0, 594, 0, 639, 639, 637, 638, 596, 597,
	598, 642, 0, 0, 412, 413, 414, 639, 642, 0,
	642, 642, 642, 642, 639, 639, 639, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1689, 621, 622,
	625, 1690, 1691, 1689, 1689, 632, 1127, 652, 660, 663,
	680, 678, 679, 681, 673, 674, 675, 676, 0, 693,
	694, 699, 0, 0, 0, 704, 705, 706, 0, 0,
	709, 710, 711, 0, 0, 0, 0, 842, 0, 0,
	909, 910, 911, 912, 913, 914, 915, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 883,
	884, 885, 888, 0, 0, 0, 893, 894, 0, 0,
	0, 0, 0, 731, 0, 1047, 0, 935, 0, 936,
	938, 939, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 741, 741, 0, 0, 237, 238, 239,
	240, 241, 256, 257, 258, 259, 260, -2, 1055, 0,
	919, 0, 0, 45, 684, 685, 0, 804, 1147, 0,
	737, 0, 780, 0, 0, 56, 65, 67, 1073, 60,
	1073, 0, 743, 0, 0, -2, -2, 744, 750, 751,
	752, 753, 754, 53, 1687, 54, 0, 73, 0, 47,
	0, 0, 782, 0, 0, 0, 1066, 1067, 1070, 0,
	722, 0, 758, 762, 0, 764, 765, 0, 0, 0,
	0, 820, 0, 0, 0, 1614, 1125, 0, 130, 131,
	0, 0, 0, 390, 1130, 1131, 1132, -2, 410, 0,
	390, 374, 318, 319, 320, 364, 322, 364, 366, 364,
	364, 364, 364, 379, 351, 0, 0, 339, 364, 368,
	364, 354, 355, 356, 357, 358, 359, 360, 361, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 370, 370,
	370, 371, 371, 371, 0, 43, 0, 394, 0, 1070,
	0, 0, 1078, 1139, 1149, 0, 0, 0, 1139, 149,
	836, 1158, 0, 0, 0, 0, 0, 511, 512, 508,
	544, 0, 499, 411, 0, -2, 0, 421, 0, 417,
	421, 418, 421, 409, 422, 0, 0, 0, 0, 499,
	0, 534, 535, 536, 0, 538, 539, 541, 0, 545,
	546, 547, 548, 0, 0, 469, 470, 471, 0, 473,
	474, 491, 492, 493, 475, 476, 477, 485, 486, 487,
	488, 489, 490, 478, 479, 482, 0, 503, 0, 724,
	0, 0, 0, 0, 0, 0, 801, 1157, 0, 0,
	0, 1137, 0, 0, 0, 0, 740, 822, 1164, 1165,
	643, 644, 0, 415, 416, 642, 642, 599, 629, 0,
	642, 603, 630, 604, 606, 605, 607, 619, 620, 642,
	610, 640, 641, 611, 612, 613, 614, 615, 616, 617,
	626, 0, 648, 649, 627, 628, 0, 661, 665, 666,
	667, 0, 0, 696, 124, 701, 702, 703, 715, 708,
	921, 840, 841, 0, 843, 846, 0, 905, 907, 848,
	850, 916, 917, 918, 0, 0, 0, 0, 0, 854,
	858, 0, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 879, 1028, 1029, 1030, 896, 311,
	312, 308, 0, 897, 0, 755, 0, 0, 0, 895,
	0, 0, 0, 0, 732, 733, 1053, 1050, 0, 0,
	1014, 1016, 0, 0, 0, 0, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1031, 0, 0,
	0, 0, 0, 1046, 0, 898, 899, 900, 0, 0,
	0, 1148, 0, 159, 160, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 1056, 0, -2, 0, 0, 0, 0, 0,
	0, 1114, 0, 687, 688, 690, 0, 824, 805, 0,
	807, 808, 0, 0, 736, 0, 739, 0, 0, 59,
	61, 748, 749, 0, 766, 745, 55, 50, 0, 0,
	783, 1097, 1076, 1077, 0, 1069, 1071, 1072, 0, 76,
	763, 759, 0, 838, 1108, 0, 0, 1100, 0, 819,
	0, 769, 771, 772, 773, 802, 0, 776, 0, 1436,
	0, 0, 0, 126, 821, 1120, 129, 0, 0, 134,
	135, 1121, -2, 1123, 1124, 0, 175, -2, 462, 198,
	200, 201, 202, -2, -2, 193, -2, 377, 375, 376,
	321, 379, 364, 367, 379, 347, 348, 349, 350, 0,
	388, 388, 385, 0, 0, 340, 364, 0, 342, 332,
	333, 334, 335, 336, 0, 337, 338, 429, 0, 144,
	395, 396, 398, 0, 400, 401, 0, 0, 424, 425,
	0, 1070, 0, 0, 0, 0, 1150, 1149, 1149, 1149,
	0, 0, 186, 187, 188, 189, 190, 191, 0, 0,
	184, 0, 194, 501, 500, 427, 0, 0, 421, 421,
	406, 407, 0, 0, 524, 456, 0, 525, 526, 499,
	501, 390, 537, 0, 467, 468, 472, 480, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	1089, 1094, 1092, 1093, 0, 584, 0, 0, 453, 122,
	1138, 589, 639, 609, 631, 639, 601, 608, 623, 657,
	700, 0, 0, 0, 0, 707, 0, 0, 847, 906,
	908, 851, 0, 855, 859, 0, 0, 861, 310, 0,
	0, 0, 0, 0, 902, 926, 927, 0, 0, 1064,
	0, 1051, 0, 0, 934, 1017, 0, 0, 0, 0,
	945, 946, 947, 948, 949, 0, 951, 0, 0, 0,
	955, 956, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 922, 0,
	0, 741, 0, 1018, 1019, 1020, 1021, 1022, 1056, 686,
	689, 691, 779, 825, 826, 0, 0, 0, 806, 1146,
	734, 735, 738, -2, 0, 0, 0, 88, 85, 0,
	87, 0, 1058, 0, 838, 767, 0, 746, 52, 781,
	0, 1068, 0, 0, 1073, 0, 111, 0, 1108, 1116,
	0, 1099, 1110, 1112, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 812, 0, 0,
	0, 0, 803, 0, 0, 0, 0, 0, -2, 0,
	0, 120, 121, 0, 0, 0, 132, 133, 0, 0,
	139, 391, 392, 184, 464, 199, 437, 0, 0, 317,
	378, 343, 344, 379, 346, 388, 388, 382, 383, 389,
	384, 386, 387, 0, 362, 0, 341, 0, 0, 458,
	397, 399, 0, 1151, 365, 426, 0, 164, 0, 0,
	0, 0, 0, 172, 837, 1166, 1167, 0, 506, 0,
	0, 517, 518, 0, 394, 0, 405, 408, 519, 0,
	522, 523, 457, 501, 528, 529, 542, 483, 484, 481,
	780, 1079, 1080, 1081, 150, 557, 559, 558, 562, 0,
	0, 0, 1091, 1095, 0, 453, 587, 0, 588, 454,
	455, 642, 642, 695, 125, 0, 698, 0, 0, 0,
	0, 852, 856, 756, 0, 0, 364, 364, 1034, 371,
	1036, 364, 1038, 364, 1041, 364, 0, 1045, 0, 0,
	0, 0, 1048, 933, 1054, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 161, 162, 986, 0, 0, 988,
	990, 991, 961, 987, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 924, 0,
	1057, 827, 832, 832, 832, 0, 88, 82, 0, 84,
	88, 81, 0, 0, 86, 0, 1133, 1134, 1059, 1060,
	768, 747, 784, 718, 760, 77, 839, 0, 112, 0,
	0, 0, 1113, 0, 0, 0, 0, 838, 770, 797,
	799, 0, 794, 810, 811, 813, 0, 815, 0, 817,
	818, 780, 775, 777, 0, 0, 0, 838, 0, 838,
	838, 127, 0, 823, 136, 137, 138, 463, 203, 208,
	0, 0, 0, 213, 0, 215, 0, 0, 0, 220,
	221, 438, 0, 314, 316, 0, 0, 206, 345, 380,
	381, 379, 0, 379, 369, 372, 0, 439, 459, 402,
	780, 1140, 166, 0, 0, 0, 0, 0, 195, 502,
	393, 0, 520, 0, 243, 244, 246, 0, 0, 306,
	307, 527, 0, 153, 0, 0, 0, 0, 1090, 585,
	586, 123, 595, 600, 697, 716, 845, 853, 857, 0,
	890, 1032, 379, 1035, 1037, 1039, 1040, 1042, 1043, 1044,
	891, 892, 0, 929, 0, 931, 1073, 0, 1052, 0,
	0, 943, 0, 952, 953, 954, 0, 0, 960, 0,
	962, 0, 0, 0, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 925, 0, 0, 0, 0, -2,
	838, 83, 80, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 780, 780, 780, 108, 0, 0,
	63, 1062, 0, 0, 1117, 1118, 1111, 0, 1103, 1106,
	1102, 1105, 1064, 791, 798, 0, 0, 792, 0, 793,
	814, 816, 774, -2, 778, 0, 1064, 838, 118, 119,
	0, 209, 0, 211, 235, 236, 0, 214, 216, 217,
	218, 222, 223, 224, 219, 313, 315, 0, 0, 352,
	363, 353, 0, 0, 167, 168, 169, 0, 509, 0,
	0, 247, 248, 0, 556, 0, 151, 152, 0, 0,
	561, 1023, 1033, 0, 0, 0, 1049, 0, 0, 950,
	958, 0, 989, 0, 965, 0, 0, 0, 580, 581,
	0, 985, 0, 833, 0, 0, 0, 0, 79, 0,
	90, 0, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 109, 110, 106, 107, 78,
	0, 0, 0, 1101, 0, 1073, 795, 0, 800, 0,
	1073, 117, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 0, 431, 521, 1082, 154, 155, 0,
	0, 0, 0, 0, 0, 928, 930, 932, 941, 942,
	959, 963, 0, 966, 0, 0, 967, 0, 582, 0,
	829, 787, 788, 834, 835, 0, 0, 89, 92, 1063,
	1061, 1109, 1107, 115, 0, 0, 0, 116, 210, 0,
	227, 1082, 0, 554, 1084, 0, 0, 0, 563, 889,
	0, 0, 0, 986, 968, 0, 578, 579, 0, 828,
	830, 831, 796, 804, 0, 444, 437, 145, 0, 0,
	1085, 1086, 156, 157, 494, 495, 496, 150, 1024, 0,
	1027, 0, 789, 790, 564, 0, 566, 0, -2, 432,
	445, 0, 204, 228, 229, 0, 0, 232, 233, 234,
	225, 226, 0, 0, 153, 1025, 964, 565, 0, 0,
	390, 0, 575, 433, 434, 0, 440, 441, 442, 443,
	230, 231, 242, 1083, 560, 0, 567, 568, 576, 0,
	435, 0, 436, 0, 0, 0, 0, 0, 577, 573,
	446, 448, 449, 0, 0, 447, 1026, 0, 450, 451,
	452, 569, 570, 571, 572,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 407, 3, 3, 3, 433, 425, 3,
	354, 356, 430, 428, 355, 429, 482, 431, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 853,
	415, 414, 416, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 435, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 404, 3, 436,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 398, 57738, 399, 57739, 400,
	57740, 401, 57741, 402, 57742, 403, 57743, 405, 57744, 406,
	57745, 408, 57746, 409, 57747, 410, 57748, 411, 57749, 412,
	57750, 413, 57751, 417, 57752, 418, 57753, 419, 57754, 420,
	57755, 421, 57756, 422, 57757, 423, 57758, 424, 57759, 426,
	57760, 427, 57761, 432, 57762, 434, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 477, 57804, 478,
	57805, 479, 57806, 480, 57807, 481, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	psqDebug        = 0
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if psqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", psqTokname(token), uint(char), token)
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state-%d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:585
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:590
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:591
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:595
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 5:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:599
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 38:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:635
		{
			setParseTree(psqlex, nil)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:641
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:645
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:649
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 42:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:654
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 43:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:658
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 44:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:664
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:670
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:676
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:680
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:685
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:689
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 50:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:695
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 51:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:699
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:705
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:711
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:715
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:719
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:742
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:748
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:753
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:759
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:766
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:772
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 62:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:779
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 63:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:783
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:789
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:793
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:797
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:801
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:805
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:811
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:815
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:820
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:824
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:830
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:834
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:839
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:846
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:852
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:860
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:866
		{
			psqLOCAL = &ast.CopyFrom{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[3].tableName, Columns: psqDollar[4].columnsUnion(), From: psqDollar[6].copyFromSource, With: psqDollar[7].copyOptions, Where: psqDollar[8].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:870
		{
			psqLOCAL = &ast.CopyTo{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[3].tableName, Columns: psqDollar[4].columnsUnion(), To: psqDollar[6].copyToTarget, With: psqDollar[7].copyOptions}
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:874
		{
			psqLOCAL = &ast.CopyTo{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Query: psqDollar[3].selStmtUnion(), To: psqDollar[5].copyToTarget, With: psqDollar[6].copyOptions}
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:880
		{
			psqVAL.copyFromSource = ast.CopyFromSource{Type: ast.CopyFromFile, V: psqDollar[1].str}
		}
	case 83:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:884
		{
			psqVAL.copyFromSource = ast.CopyFromSource{Type: ast.CopyFromProgram, V: psqDollar[1].str}
		}
	case 84:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:888
		{
			psqVAL.copyFromSource = ast.CopyFromSource{Type: ast.CopyFromStdin}
		}
	case 85:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:894
		{
			psqVAL.copyToTarget = ast.CopyToTarget{Type: ast.CopyToFile, V: psqDollar[1].str}
		}
	case 86:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:898
		{
			psqVAL.copyToTarget = ast.CopyToTarget{Type: ast.CopyToProgram, V: psqDollar[1].str}
		}
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:902
		{
			psqVAL.copyToTarget = ast.CopyToTarget{Type: ast.CopyToStdout}
		}
	case 88:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:907
		{
			psqVAL.copyOptions = nil
		}
	case 89:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:911
		{
			psqVAL.copyOptions = psqDollar[3].copyOptions
		}
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:915
		{
			psqVAL.copyOptions = psqDollar[2].copyOptions
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:921
		{
			psqVAL.copyOptions = []ast.CopyOption{psqDollar[1].copyOption}
		}
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:925
		{
			psqVAL.copyOptions = append(psqVAL.copyOptions, psqDollar[3].copyOption)
		}
	case 93:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:931
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionFormat, Value: psqDollar[2].str}
		}
	case 94:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:935
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionFreeze, Value: psqDollar[2].boolValUnion().String()}
		}
	case 95:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:939
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionDelimiter, Value: psqDollar[2].str}
		}
	case 96:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:943
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionNull, Value: psqDollar[2].str}
		}
	case 97:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:947
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionDefault, Value: psqDollar[2].str}
		}
	case 98:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:951
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionHeader, Value: psqDollar[2].boolValUnion().String()}
		}
	case 99:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:955
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionHeaderMatch}
		}
	case 100:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:959
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionQuote, Value: psqDollar[2].str}
		}
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:963
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionEscape, Value: psqDollar[2].str}
		}
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:967
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionForceQuote}
		}
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:971
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionForceNotNull}
		}
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:975
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionForceNull}
		}
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:979
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionOnError, Value: psqDollar[2].str}
		}
	case 106:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:983
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionEncoding, Value: psqDollar[2].str}
		}
	case 107:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:987
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionHeaderLogVerbosity, Value: psqDollar[2].str}
		}
	case 108:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:992
		{
			psqVAL.str = "stop"
		}
	case 109:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:996
		{
			psqVAL.str = "stop"
		}
	case 110:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1000
		{
			psqVAL.str = "ignore"
		}
	case 111:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1006
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1017
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:1029
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:1033
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1039
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1045
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 117:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1049
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 118:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1053
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 119:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1057
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1062
		{
		}
	case 121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1063
		{
		}
	case 122:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:1067
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1071
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:1077
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1081
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:1087
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1091
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1097
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 129:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1103
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1107
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:1113
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1117
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 133:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:1123
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:1127
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:1131
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1137
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 137:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1141
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 138:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1145
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1149
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:1155
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:1159
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1165
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1171
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1178
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1186
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1190
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 147:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1196
		{
			psqDollar[1].createSequenceUnion().SequenceSpec = psqDollar[2].sequenceSpecUnion()
			psqDollar[1].createSequenceUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createSequenceUnion()
		}
		psqVAL.union = psqLOCAL
	case 148:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1203
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1207
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 150:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1212
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 151:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1216
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 152:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1222
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 153:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1227
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 154:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1232
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 155:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1238
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 156:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1243
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 157:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1249
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 158:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1254
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 159:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1258
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1264
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1268
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1274
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 163:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSchema
//line psql.y:1280
		{
			psqLOCAL = &ast.AlterSchema{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Schema: psqDollar[3].schemaName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 164:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1287
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 165:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1294
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Only: psqDollar[4].booleanUnion(), Table: psqDollar[5].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 166:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1301
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 167:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1306
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1311
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 169:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1316
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 170:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.CreateSequence
//line psql.y:1323
		{
			psqLOCAL = &ast.CreateSequence{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Sequence: psqDollar[3].sequenceName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 171:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSequence
//line psql.y:1330
		{
			psqLOCAL = &ast.AlterSequence{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Sequence: psqDollar[3].sequenceName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1337
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1344
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1354
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1360
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1364
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1370
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1374
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1378
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 181:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1382
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 182:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1386
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 183:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1390
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 184:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1396
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1400
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1406
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 187:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1410
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 188:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1416
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 189:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1420
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 190:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1426
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 191:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1430
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1436
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1440
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1446
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1450
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 196:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1456
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1461
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1466
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 199:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1470
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 200:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1475
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 201:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1479
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 202:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1483
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 203:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1494
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1503
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1512
		{
			psqVAL.str = ""
		}
	case 206:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1516
		{
			psqVAL.str = ""
		}
	case 207:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1525
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1529
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 209:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1535
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1541
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1546
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1551
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1556
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1561
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1566
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1571
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 217:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1575
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1580
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 219:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1584
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1589
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1595
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1603
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1607
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1611
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1617
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1621
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 227:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1626
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 228:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1630
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 229:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1635
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 230:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1641
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 231:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1647
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 232:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1652
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 233:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1657
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 234:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1663
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1671
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 237:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1678
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 238:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1682
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 239:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1686
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 240:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1690
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 241:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1694
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 242:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL *ast.SequenceSpec
//line psql.y:1700
		{
			psqLOCAL = &ast.SequenceSpec{StartWith: ast.IntRef(psqDollar[3].str), IncrementBy: ast.IntRef(psqDollar[6].str)}
		}
		psqVAL.union = psqLOCAL
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1710
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 247:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1717
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 248:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1721
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1727
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1731
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1735
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1739
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1743
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1747
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1751
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 256:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1756
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 257:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1760
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 258:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1764
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 259:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1768
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 260:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1772
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1779
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1783
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1787
		{
			psqVAL.str = ast.Big5Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1791
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1795
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 266:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1799
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 267:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1803
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1807
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1811
		{
			psqVAL.str = ast.Cp850Str
		}
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1815
		{
			psqVAL.str = ast.Cp852Str
		}
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1819
		{
			psqVAL.str = ast.Cp866Str
		}
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1823
		{
			psqVAL.str = ast.Cp932Str
		}
	case 273:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1827
		{
			psqVAL.str = ast.Dec8Str
		}
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1831
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1835
		{
			psqVAL.str = ast.EuckrStr
		}
	case 276:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1839
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 277:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1843
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 278:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1847
		{
			psqVAL.str = ast.GbkStr
		}
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1851
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 280:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1855
		{
			psqVAL.str = ast.GreekStr
		}
	case 281:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1859
		{
			psqVAL.str = ast.HebrewStr
		}
	case 282:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1863
		{
			psqVAL.str = ast.Hp8Str
		}
	case 283:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1867
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 284:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1871
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1875
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1879
		{
			psqVAL.str = ast.Latin1Str
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1883
		{
			psqVAL.str = ast.Latin2Str
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1887
		{
			psqVAL.str = ast.Latin5Str
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1891
		{
			psqVAL.str = ast.Latin7Str
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1895
		{
			psqVAL.str = ast.MacceStr
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1899
		{
			psqVAL.str = ast.MacromanStr
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1903
		{
			psqVAL.str = ast.SjisStr
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1907
		{
			psqVAL.str = ast.Swe7Str
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1911
		{
			psqVAL.str = ast.Tis620Str
		}
	case 295:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1915
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 296:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1919
		{
			psqVAL.str = ast.UjisStr
		}
	case 297:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1923
		{
			psqVAL.str = ast.Utf16Str
		}
	case 298:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1927
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 299:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1931
		{
			psqVAL.str = ast.Utf32Str
		}
	case 300:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1935
		{
			psqVAL.str = ast.Utf8Str
		}
	case 301:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1939
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 302:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1943
		{
			psqVAL.str = ast.Utf8Str
		}
	case 305:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1953
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 306:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1957
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 307:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1961
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 308:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1967
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 309:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1971
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1975
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 311:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1981
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 312:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1985
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1992
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1996
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 315:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:2000
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:2004
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 317:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2010
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 321:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2021
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2026
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2032
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2036
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2040
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2044
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2048
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2052
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2056
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 330:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2060
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 331:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2064
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 332:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2070
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 333:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2076
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 334:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2082
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 335:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2086
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 336:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2092
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 337:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2098
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 338:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2104
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 339:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2112
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 340:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2116
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2120
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[3].literalUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2124
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 343:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2130
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 344:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2134
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:2140
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[3].literalUnion(), Charset: psqDollar[4].columnCharset}
		}
	case 346:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2144
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2148
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 348:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2152
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 349:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2156
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 350:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2160
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 351:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2164
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 352:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2168
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 353:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2173
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 354:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2179
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 355:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2183
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2187
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 357:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2191
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 358:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2195
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 359:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2199
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 360:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2203
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2207
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 362:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2213
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 363:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2218
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 364:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2223
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 365:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2227
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 366:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2232
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2236
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2241
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2245
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2250
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 371:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2255
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 372:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2259
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{
				Length: ast.NewIntLiteral(psqDollar[2].str),
			}
		}
	case 373:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2265
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{
				Length: ast.NewIntLiteral(psqDollar[2].str),
				Scale:  ast.NewIntLiteral(psqDollar[4].str),
			}
		}
	case 374:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2273
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2277
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2281
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 377:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2286
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 378:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2290
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 379:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2295
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 380:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2299
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 381:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2303
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 382:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2307
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 383:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2311
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 384:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2316
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 385:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2321
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 386:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2326
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 387:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2331
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 388:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2337
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2341
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2346
		{
			psqVAL.str = ""
		}
	case 391:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2350
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 392:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2354
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 393:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2361
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2366
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2370
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2376
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2380
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 398:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2386
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2390
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2394
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2398
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2402
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2408
		{
			psqVAL.str = ""
		}
	case 404:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2412
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 405:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2418
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2422
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2426
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2430
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2434
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2439
		{
			psqVAL.str = ""
		}
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2443
		{
			psqVAL.str = psqDollar[2].str
		}
	case 412:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2449
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 413:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2453
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 414:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2457
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2464
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2468
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 417:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2473
		{
			psqVAL.str = "key"
		}
	case 418:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2477
		{
			psqVAL.str = psqDollar[1].str
		}
	case 419:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2483
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 420:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2487
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 421:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2492
		{
			psqVAL.str = ""
		}
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2496
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 423:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2502
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2506
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2512
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 426:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2516
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2522
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 428:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2526
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2532
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2536
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2542
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2548
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2552
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2556
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2560
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2564
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2569
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2573
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2579
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2585
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2591
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2595
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2599
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 444:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2604
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 445:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2608
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 446:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2614
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 447:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2620
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 448:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2626
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 449:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2630
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 450:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2634
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 451:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2638
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 452:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2642
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 453:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2647
		{
			psqVAL.str = ""
		}
	case 454:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2651
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2655
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2661
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 457:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2665
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 458:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2670
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 459:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2674
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 460:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2679
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2683
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2689
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2693
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 464:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2697
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 465:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2703
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 466:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2707
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 467:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2713
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 468:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2717
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2721
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2725
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 471:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2729
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 472:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2733
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 473:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2737
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2741
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2745
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2749
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 477:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2753
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2757
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2761
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2765
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2769
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2774
		{
			psqVAL.str = ""
		}
	case 483:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2778
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 484:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2782
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 494:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2801
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 495:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2805
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 496:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2809
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 497:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2814
		{
			psqVAL.str = ""
		}
	case 499:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2820
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2824
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2829
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2833
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2839
		{
			psqLOCAL = []ast.AlterOption{&ast.AlterOwner{Owner: &ast.RoleName{Name: ast.RoleIdent{V: psqDollar[3].str}}}}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2844
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 505:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2848
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2852
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 507:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2856
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2860
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 509:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2864
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2870
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2874
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 512:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2878
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 513:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2884
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2888
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2892
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2896
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2900
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2904
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2908
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2912
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2916
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2920
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2925
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2930
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2934
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2938
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2942
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2946
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2950
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2954
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2958
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2962
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2966
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2970
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2974
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2978
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2982
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2986
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2990
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2994
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2998
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3002
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:3008
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3012
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 545:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3018
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3022
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3026
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3030
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3034
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3038
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3044
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3050
		{
			psqDollar[1].alterSchemaUnion().FullyParsed = true
			psqDollar[1].alterSchemaUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterSchemaUnion()
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3056
		{
			psqDollar[1].alterSequenceUnion().SequenceSpec = psqDollar[2].sequenceSpecUnion()
			psqDollar[1].alterSequenceUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterSequenceUnion()
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3062
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[6].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Definer: psqDollar[3].definerUnion(), Security: psqDollar[4].str, Columns: psqDollar[7].columnsUnion(), Select: psqDollar[9].selStmtUnion(), CheckOption: psqDollar[10].str}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3072
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3079
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3091
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3101
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3105
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3109
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3122
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3132
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3136
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3149
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:3155
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:3161
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3165
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 568:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3171
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3175
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3181
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3187
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3193
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3199
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3205
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3209
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3213
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3217
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3223
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3229
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3235
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3239
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3243
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3249
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3255
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3259
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 586:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3265
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3269
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}})}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}})}
			}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3278
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3282
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3288
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3292
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3297
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3303
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3307
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 595:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3311
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 596:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3315
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3319
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3323
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 599:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3327
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 600:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3331
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 601:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3335
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 602:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3339
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 603:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3343
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 604:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3347
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3351
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3355
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 607:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3359
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 608:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3363
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 609:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3367
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 610:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3371
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 611:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3375
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 612:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3379
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3383
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3387
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3391
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3395
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3399
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3403
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3407
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 620:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3411
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 621:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3415
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 622:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3419
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 623:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3423
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 624:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3427
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3434
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3438
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 627:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3442
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3446
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3450
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3454
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 631:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3458
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 632:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3462
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 633:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3468
		{
			psqVAL.str = ""
		}
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3472
		{
			psqVAL.str = "extended "
		}
	case 635:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3478
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3482
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3488
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 638:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3492
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 639:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3498
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 640:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3502
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 641:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3506
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 642:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3512
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3516
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3520
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3526
		{
			psqVAL.empty = struct{}{}
		}
	case 646:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3530
		{
			psqVAL.empty = struct{}{}
		}
	case 647:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3534
		{
			psqVAL.empty = struct{}{}
		}
	case 648:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3540
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 649:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3544
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 650:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3550
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3554
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 652:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3558
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3564
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3568
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3574
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3580
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3584
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3589
		{
			psqVAL.empty = struct{}{}
		}
	case 659:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3591
		{
			psqVAL.empty = struct{}{}
		}
	case 660:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3594
		{
			psqVAL.empty = struct{}{}
		}
	case 661:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3596
		{
			psqVAL.empty = struct{}{}
		}
	case 662:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3601
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 663:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3607
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 664:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3612
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 665:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3616
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 666:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3620
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 667:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3624
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 668:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3628
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 669:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3632
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 670:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3638
		{
			psqVAL.str = psqDollar[1].str
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3642
		{
			psqVAL.str = psqDollar[1].str
		}
	case 672:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3646
		{
			psqVAL.str = psqDollar[1].str
		}
	case 673:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3652
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 674:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3656
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3660
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3664
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 677:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3669
		{
			psqVAL.str = ""
		}
	case 678:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3673
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 679:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3677
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 680:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3683
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 681:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3687
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 682:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3693
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 683:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3697
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3703
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 685:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3709
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 686:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3713
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 687:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3719
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 688:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3725
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3729
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3733
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3737
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3743
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3749
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 694:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3753
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 695:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3757
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 696:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3761
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3765
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3769
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3775
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 700:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3779
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 701:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3785
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 702:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3789
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 703:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3793
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 704:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3797
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 705:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3801
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 706:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3805
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 707:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3809
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 708:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3813
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3817
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 710:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3821
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 711:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3825
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 712:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3830
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 713:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3834
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3838
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 715:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3843
		{
			psqVAL.str = ""
		}
	case 716:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3847
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 717:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3852
		{
			setAllowComments(psqlex, true)
		}
	case 718:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3856
		{
			// Strange argumets shift
			psqLOCAL = &ast.CommentOnSchema{Comments: ast.Comments{psqDollar[2].str}.Parsed(), Schema: psqDollar[5].schemaName.Name, Value: psqDollar[7].exprUnion()}
			setAllowComments(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 719:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3864
		{
			setAllowComments(psqlex, true)
		}
	case 720:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3868
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 721:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3874
		{
			psqVAL.strs = nil
		}
	case 722:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3878
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 723:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3883
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 724:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3887
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3893
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3897
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3901
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 728:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3906
		{
			psqVAL.str = ""
		}
	case 729:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3910
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 730:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3914
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 731:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3919
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3923
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 733:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3927
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3933
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3937
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3949
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 737:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3954
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 738:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3958
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3964
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3968
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 741:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3973
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 742:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3977
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 743:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3982
		{
			psqVAL.strs = nil
		}
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3986
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 745:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3990
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 746:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3994
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 747:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3998
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 748:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4004
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 749:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4008
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 750:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4012
		{
			psqVAL.str = ast.DistinctStr
		}
	case 751:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4016
		{
			psqVAL.str = ast.DistinctStr
		}
	case 752:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4020
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 753:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4024
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 754:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4028
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 755:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:4034
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 756:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4038
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 757:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4044
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 758:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4048
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 759:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4052
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 760:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4056
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 761:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4061
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 762:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4065
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 763:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4069
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 765:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4076
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 766:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4081
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 767:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4085
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 768:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4091
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4097
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4101
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 773:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4111
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4115
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 775:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4119
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4123
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 777:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:4129
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 778:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:4133
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 779:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:4139
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 780:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4144
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 781:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4148
		{
			setIgnoreCommentKeyword(psqlex, true)
			psqLOCAL = psqDollar[2].columnsUnion()
			setIgnoreCommentKeyword(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4154
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 783:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4160
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 784:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4164
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 785:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4170
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4174
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 787:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4180
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 788:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4184
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4188
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 790:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4192
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 791:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4205
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 792:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4209
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4213
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4217
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4223
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 796:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4225
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 797:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4229
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 798:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4231
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 799:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4235
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 800:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4237
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 801:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4241
		{
			psqVAL.schemaName = ast.SchemaName{Name: psqDollar[2].schemaIdent}
		}
	case 802:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4246
		{
			psqVAL.empty = struct{}{}
		}
	case 803:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4248
		{
			psqVAL.empty = struct{}{}
		}
	case 804:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4251
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 805:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4255
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 806:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4259
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 808:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4266
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 809:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4272
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4276
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4280
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4286
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4292
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4296
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4300
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4304
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4310
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4314
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4324
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 820:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4328
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 821:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4334
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4338
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 823:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4344
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 824:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4349
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4353
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4359
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4363
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 828:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4369
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4373
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4377
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4381
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4386
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4390
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4394
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4398
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4404
		{
			psqVAL.sequenceName = ast.SequenceName{Name: psqDollar[2].sequenceIdent}
		}
	case 837:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4408
		{
			psqVAL.sequenceName = ast.SequenceName{Qualifier: psqDollar[2].sequenceIdent, Name: psqDollar[4].sequenceIdent}
		}
	case 838:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4414
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4418
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4425
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4429
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4433
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4437
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4441
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4445
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4452
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4456
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4460
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4464
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4470
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4474
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4478
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4482
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4486
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4490
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4494
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4498
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4502
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4506
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4510
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4514
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4520
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4524
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4528
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4532
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4536
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4540
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4544
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4548
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4552
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4556
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4560
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4564
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4568
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4574
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4578
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4582
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4586
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4590
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4594
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4598
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4602
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4606
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4610
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4614
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4618
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4622
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4626
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4630
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4634
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4638
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4642
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4646
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4654
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4658
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4666
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4670
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4676
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4680
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4684
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4690
		{
			psqVAL.str = ""
		}
	case 902:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4694
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 903:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4700
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4704
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4711
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4715
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4719
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4723
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4729
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4733
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4737
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4741
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4745
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4749
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4753
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4759
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4763
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4767
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4774
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4780
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4784
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 922:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4794
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4798
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4802
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4806
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4816
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4820
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4824
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4828
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4832
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4836
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4840
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4844
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4848
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4852
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4863
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4867
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4873
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4877
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4882
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4886
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4890
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4894
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4898
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 945:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4902
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 946:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4906
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4910
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 948:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4914
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4918
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4922
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4926
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4930
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4934
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4938
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4942
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4946
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4950
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4954
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4958
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4962
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4966
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4970
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4974
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4978
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4982
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4986
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4990
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4994
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4998
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5002
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5006
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5010
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5014
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5018
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5022
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5026
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5030
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5034
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5038
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5042
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5046
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5050
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 983:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5054
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 984:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5059
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5063
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 986:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:5068
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:5072
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:5078
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5082
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 990:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5088
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 991:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5092
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5098
		{
		}
	case 993:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5100
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5104
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5108
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5112
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5116
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5120
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5124
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5128
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5132
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5136
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5140
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5146
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5150
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 1006:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5154
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5158
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 1008:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5162
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5166
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5170
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5174
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5178
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5188
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5192
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5196
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5207
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5211
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5215
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5219
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5223
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1023:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5229
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5233
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5237
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5241
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5245
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5251
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 1029:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5255
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1030:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5259
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1031:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5265
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5271
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5275
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5279
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5283
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5289
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5293
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5297
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5301
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5305
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5309
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5313
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5317
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5321
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5325
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1046:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5331
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1047:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5335
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1048:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5340
		{
			psqVAL.str = string("")
		}
	case 1049:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5344
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1050:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5350
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1051:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5354
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1052:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5360
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1053:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5365
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1054:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5369
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1055:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5375
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1056:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5379
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1057:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5383
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1058:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5389
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1059:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5398
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1060:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5404
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1061:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5408
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1062:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5413
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5417
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1064:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5422
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5426
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5432
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5438
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5442
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1069:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5448
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5453
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5457
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1072:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5461
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5466
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5470
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5476
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5480
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1077:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5484
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1078:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5489
		{
			psqVAL.str = ""
		}
	case 1079:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5493
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1080:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5499
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1081:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5503
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1082:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5508
		{
			psqVAL.str = ""
		}
	case 1083:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5512
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1084:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5517
		{
			psqVAL.str = "cascaded"
		}
	case 1085:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5521
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1086:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5525
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1087:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5530
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1088:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5534
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1089:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5540
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5546
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5552
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5561
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1093:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5565
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1094:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5570
		{
			psqVAL.str = ""
		}
	case 1095:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5574
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1096:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5580
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1097:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5584
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5590
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1099:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5603
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1100:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5607
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1101:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5611
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5615
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5619
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1104:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5625
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1105:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5629
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5633
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1107:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5637
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1108:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5642
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1109:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5646
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1110:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5652
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1111:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5656
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1112:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5662
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5666
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1114:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5672
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1115:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5677
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1116:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5687
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1117:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5691
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1118:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5697
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1119:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5703
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1120:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5707
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1121:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5713
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5717
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5721
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1124:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5725
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1125:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5729
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1127:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5737
		{
			psqVAL.str = "charset"
		}
	case 1130:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5747
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1131:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5751
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1132:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5755
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1135:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5764
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1136:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5766
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1137:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5769
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1138:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5771
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1139:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5774
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1140:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5776
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1141:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5779
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5781
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1143:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5784
		{
			psqVAL.empty = struct{}{}
		}
	case 1144:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5786
		{
			psqVAL.empty = struct{}{}
		}
	case 1145:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5788
		{
			psqVAL.empty = struct{}{}
		}
	case 1146:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5792
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1147:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5797
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1148:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5801
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1149:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5806
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1150:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5808
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1151:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5812
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1152:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5818
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1153:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5822
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1154:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5826
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1156:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5833
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1157:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5839
		{
			psqVAL.schemaIdent = ast.NewSchemaIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1158:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5845
		{
			psqVAL.sequenceIdent = ast.NewSequenceIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1159:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5851
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5855
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5859
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1162:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5865
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1163:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5869
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1165:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5876
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1167:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5883
		{
			psqVAL.sequenceIdent = ast.NewSequenceIdent(string(psqDollar[1].str))
		}
	case 1686:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6436
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1687:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6445
		{
			decNesting(psqlex)
		}
	case 1688:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6450
		{
			skipToEnd(psqlex)
		}
	case 1689:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6455
		{
			skipToEnd(psqlex)
		}
	case 1690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6459
		{
			skipToEnd(psqlex)
		}
	case 1691:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6463
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
