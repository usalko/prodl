// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:18
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:18

import (
	"github.com/usalko/sent/internal/sql_parser/ast"
	"github.com/usalko/sent/internal/sql_parser/tokenizer"
	"github.com/usalko/sent/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const DISTINCTROW = 57380
const PARSER = 57381
const GENERATED = 57382
const ALWAYS = 57383
const ANY = 57384
const ASYMMETRIC = 57385
const AUTHORIZATION = 57386
const CONCURRENTLY = 57387
const CURRENT_CATALOG = 57388
const CURRENT_ROLE = 57389
const CURRENT_SCHEMA = 57390
const DEFERRABLE = 57391
const FETCH = 57392
const FREEZE = 57393
const GRANT = 57394
const ILIKE = 57395
const INITIALLY = 57396
const INTERSECT = 57397
const ISNULL = 57398
const NOTNULL = 57399
const OVERLAPS = 57400
const PLACING = 57401
const SESSION_USER = 57402
const SIMILAR = 57403
const SOME = 57404
const SYMMETRIC = 57405
const SYSTEM_USER = 57406
const TABLESAMPLE = 57407
const VARIADIC = 57408
const VERBOSE = 57409
const ABORT = 57410
const ABSENT = 57411
const ABSOLUTE = 57412
const ACCESS = 57413
const AGGREGATE = 57414
const ALSO = 57415
const ASENSITIVE = 57416
const ASSERTION = 57417
const ASSIGNMENT = 57418
const AT = 57419
const ATOMIC = 57420
const ATTACH = 57421
const ATTRIBUTE = 57422
const BACKWARD = 57423
const BEFORE = 57424
const BREADTH = 57425
const CACHE = 57426
const CALLED = 57427
const CATALOG = 57428
const CHAIN = 57429
const CHARACTERISTICS = 57430
const CHECKPOINT = 57431
const CLASS = 57432
const CLOSE = 57433
const CLUSTER = 57434
const COMMENTS = 57435
const CONDITIONAL = 57436
const CONFIGURATION = 57437
const CONFLICT = 57438
const CONSTRAINTS = 57439
const CONTENT = 57440
const CONTINUE = 57441
const CONVERSION = 57442
const COST = 57443
const OPTIONALLY = 57444
const ESCAPED = 57445
const ENCLOSED = 57446
const TERMINATED = 57447
const STARTING = 57448
const LINES = 57449
const OVERWRITE = 57450
const MANIFEST = 57451
const HEADER = 57452
const CSV = 57453
const CUBE = 57454
const CURRENT = 57455
const CURSOR = 57456
const CYCLE = 57457
const DATA = 57458
const DEC = 57459
const DECLARE = 57460
const DEFAULTS = 57461
const DEFERRED = 57462
const DELIMITER = 57463
const DELIMITERS = 57464
const DEPENDS = 57465
const DEPTH = 57466
const DETACH = 57467
const DICTIONARY = 57468
const DOCUMENT = 57469
const DOMAIN = 57470
const EACH = 57471
const ENCODING = 57472
const ENCRYPTED = 57473
const EXCLUDING = 57474
const EXPRESSION = 57475
const EXTENSION = 57476
const EXTERNAL = 57477
const FAMILY = 57478
const FILTER = 57479
const FINALIZE = 57480
const FORWARD = 57481
const FUNCTIONS = 57482
const GRANTED = 57483
const GREATEST = 57484
const HANDLER = 57485
const HOLD = 57486
const IDENTITY = 57487
const IMMEDIATE = 57488
const IMMUTABLE = 57489
const IMPLICIT = 57490
const INCLUDE = 57491
const INCLUDING = 57492
const INCREMENT = 57493
const INDENT = 57494
const INHERIT = 57495
const INHERITS = 57496
const INLINE = 57497
const INOUT = 57498
const INPUT = 57499
const INSENSITIVE = 57500
const INSTEAD = 57501
const JSON_ARRAYAGG = 57502
const JSON_EXISTS = 57503
const JSON_OBJECTAGG = 57504
const JSON_QUERY = 57505
const JSON_SCALAR = 57506
const JSON_SERIALIZE = 57507
const KEEP = 57508
const LABEL = 57509
const LARGE = 57510
const LEAKPROOF = 57511
const LEAST = 57512
const LISTEN = 57513
const LOAD = 57514
const LOCATION = 57515
const LOGGED = 57516
const MAPPING = 57517
const MATCHED = 57518
const MATERIALIZED = 57519
const MERGE_ACTION = 57520
const METHOD = 57521
const MINVALUE = 57522
const MOVE = 57523
const NATIONAL = 57524
const NEW = 57525
const NFC = 57526
const NFD = 57527
const NFKC = 57528
const NFKD = 57529
const NORMALIZE = 57530
const NORMALIZED = 57531
const NOTHING = 57532
const NOTIFY = 57533
const NULLIF = 57534
const OBJECT = 57535
const OIDS = 57536
const OMIT = 57537
const OPERATOR = 57538
const OPTIONS = 57539
const OUT = 57540
const OVERLAY = 57541
const OVERRIDING = 57542
const OWNED = 57543
const OWNER = 57544
const PARALLEL = 57545
const PARAMETER = 57546
const PASSING = 57547
const PLAN = 57548
const PLANS = 57549
const POLICY = 57550
const POSITION = 57551
const PRECISION = 57552
const PREPARED = 57553
const PRESERVE = 57554
const PRIOR = 57555
const PROCEDURAL = 57556
const PROCEDURES = 57557
const PROGRAM = 57558
const PUBLICATION = 57559
const QUOTE = 57560
const QUOTES = 57561
const RANGE = 57562
const REASSIGN = 57563
const RECHECK = 57564
const REF = 57565
const REFERENCING = 57566
const REFRESH = 57567
const REINDEX = 57568
const RELATIVE = 57569
const REPLICA = 57570
const RESET = 57571
const RETURN = 57572
const RETURNS = 57573
const REVOKE = 57574
const ROLLUP = 57575
const ROUTINE = 57576
const ROUTINES = 57577
const ROW = 57578
const ROWS = 57579
const RULE = 57580
const SCALAR = 57581
const SCROLL = 57582
const SEARCH = 57583
const SEQUENCES = 57584
const SERVER = 57585
const SETOF = 57586
const SETS = 57587
const SNAPSHOT = 57588
const SOURCE = 57589
const STABLE = 57590
const STANDALONE = 57591
const STATEMENT = 57592
const STATISTICS = 57593
const STDIN = 57594
const STDOUT = 57595
const STRICT = 57596
const STRIP = 57597
const SUBSCRIPTION = 57598
const SUPPORT = 57599
const SYSID = 57600
const TARGET = 57601
const TEMP = 57602
const TEMPLATE = 57603
const TRANSFORM = 57604
const TREAT = 57605
const TRUSTED = 57606
const TYPE = 57607
const TYPES = 57608
const UESCAPE = 57609
const UNCONDITIONAL = 57610
const UNENCRYPTED = 57611
const UNKNOWN = 57612
const UNLISTEN = 57613
const UNLOGGED = 57614
const UNTIL = 57615
const VACUUM = 57616
const VALID = 57617
const VALIDATE = 57618
const VALIDATOR = 57619
const VARYING = 57620
const VERSION = 57621
const VIEWS = 57622
const VOLATILE = 57623
const WHITESPACE = 57624
const WITHIN = 57625
const WRAPPER = 57626
const XML = 57627
const XMLATTRIBUTES = 57628
const XMLCONCAT = 57629
const XMLELEMENT = 57630
const XMLEXISTS = 57631
const XMLFOREST = 57632
const XMLNAMESPACES = 57633
const XMLPARSE = 57634
const XMLPI = 57635
const XMLROOT = 57636
const XMLSERIALIZE = 57637
const XMLTABLE = 57638
const YES = 57639
const ZONE = 57640
const VALUES = 57641
const LAST_INSERT_ID = 57642
const NEXT = 57643
const VALUE = 57644
const SHARE = 57645
const MODE = 57646
const SQL_NO_CACHE = 57647
const SQL_CACHE = 57648
const SQL_CALC_FOUND_ROWS = 57649
const JOIN = 57650
const STRAIGHT_JOIN = 57651
const LEFT = 57652
const RIGHT = 57653
const INNER = 57654
const OUTER = 57655
const CROSS = 57656
const NATURAL = 57657
const USE = 57658
const FORCE = 57659
const ON = 57660
const USING = 57661
const INPLACE = 57662
const COPY = 57663
const INSTANT = 57664
const ALGORITHM = 57665
const NONE = 57666
const SHARED = 57667
const EXCLUSIVE = 57668
const SUBQUERY_AS_EXPR = 57669
const ID = 57670
const AT_ID = 57671
const AT_AT_ID = 57672
const HEX = 57673
const STRING = 57674
const NCHAR_STRING = 57675
const INTEGRAL = 57676
const FLOAT = 57677
const DECIMAL = 57678
const HEXNUM = 57679
const VALUE_ARG = 57680
const LIST_ARG = 57681
const COMMENT = 57682
const COMMENT_KEYWORD = 57683
const BIT_LITERAL = 57684
const COMPRESSION = 57685
const JSON_PRETTY = 57686
const JSON_STORAGE_SIZE = 57687
const JSON_STORAGE_FREE = 57688
const JSON_CONTAINS = 57689
const JSON_CONTAINS_PATH = 57690
const JSON_EXTRACT = 57691
const JSON_KEYS = 57692
const JSON_OVERLAPS = 57693
const JSON_SEARCH = 57694
const JSON_VALUE = 57695
const EXTRACT = 57696
const NULL = 57697
const TRUE = 57698
const FALSE = 57699
const OFF = 57700
const DISCARD = 57701
const IMPORT = 57702
const ENABLE = 57703
const DISABLE = 57704
const TABLESPACE = 57705
const VIRTUAL = 57706
const STORED = 57707
const BOTH = 57708
const LEADING = 57709
const TRAILING = 57710
const EMPTY_FROM_CLAUSE = 57711
const LOWER_THAN_CHARSET = 57712
const CHARSET = 57713
const UNIQUE = 57714
const KEY = 57715
const EXPRESSION_PREC_SETTER = 57716
const OR = 57717
const AND = 57718
const NOT = 57719
const BETWEEN = 57720
const CASE = 57721
const WHEN = 57722
const THEN = 57723
const ELSE = 57724
const END = 57725
const LE = 57726
const GE = 57727
const NE = 57728
const NULL_SAFE_EQUAL = 57729
const IS = 57730
const LIKE = 57731
const REGEXP = 57732
const IN = 57733
const SHIFT_LEFT = 57734
const SHIFT_RIGHT = 57735
const DIV = 57736
const MOD = 57737
const UNARY = 57738
const COLLATE = 57739
const BINARY = 57740
const UNDERSCORE_ARMSCII8 = 57741
const UNDERSCORE_ASCII = 57742
const UNDERSCORE_BIG5 = 57743
const UNDERSCORE_BINARY = 57744
const UNDERSCORE_CP1250 = 57745
const UNDERSCORE_CP1251 = 57746
const UNDERSCORE_CP1256 = 57747
const UNDERSCORE_CP1257 = 57748
const UNDERSCORE_CP850 = 57749
const UNDERSCORE_CP852 = 57750
const UNDERSCORE_CP866 = 57751
const UNDERSCORE_CP932 = 57752
const UNDERSCORE_DEC8 = 57753
const UNDERSCORE_EUCJPMS = 57754
const UNDERSCORE_EUCKR = 57755
const UNDERSCORE_GB18030 = 57756
const UNDERSCORE_GB2312 = 57757
const UNDERSCORE_GBK = 57758
const UNDERSCORE_GEOSTD8 = 57759
const UNDERSCORE_GREEK = 57760
const UNDERSCORE_HEBREW = 57761
const UNDERSCORE_HP8 = 57762
const UNDERSCORE_KEYBCS2 = 57763
const UNDERSCORE_KOI8R = 57764
const UNDERSCORE_KOI8U = 57765
const UNDERSCORE_LATIN1 = 57766
const UNDERSCORE_LATIN2 = 57767
const UNDERSCORE_LATIN5 = 57768
const UNDERSCORE_LATIN7 = 57769
const UNDERSCORE_MACCE = 57770
const UNDERSCORE_MACROMAN = 57771
const UNDERSCORE_SJIS = 57772
const UNDERSCORE_SWE7 = 57773
const UNDERSCORE_TIS620 = 57774
const UNDERSCORE_UCS2 = 57775
const UNDERSCORE_UJIS = 57776
const UNDERSCORE_UTF16 = 57777
const UNDERSCORE_UTF16LE = 57778
const UNDERSCORE_UTF32 = 57779
const UNDERSCORE_UTF8 = 57780
const UNDERSCORE_UTF8MB4 = 57781
const UNDERSCORE_UTF8MB3 = 57782
const INTERVAL = 57783
const JSON_EXTRACT_OP = 57784
const JSON_UNQUOTE_EXTRACT_OP = 57785
const CREATE = 57786
const ALTER = 57787
const DROP = 57788
const RENAME = 57789
const ANALYZE = 57790
const ANALYSE = 57791
const ADD = 57792
const FLUSH = 57793
const CHANGE = 57794
const MODIFY = 57795
const DEALLOCATE = 57796
const REVERT = 57797
const SCHEMA = 57798
const TABLE = 57799
const INDEX = 57800
const VIEW = 57801
const TO = 57802
const IGNORE = 57803
const IF = 57804
const PRIMARY = 57805
const COLUMN = 57806
const SPATIAL = 57807
const FULLTEXT = 57808
const KEY_BLOCK_SIZE = 57809
const CHECK = 57810
const INDEXES = 57811
const ACTION = 57812
const CASCADE = 57813
const CONSTRAINT = 57814
const FOREIGN = 57815
const NO = 57816
const REFERENCES = 57817
const RESTRICT = 57818
const SHOW = 57819
const DESCRIBE = 57820
const EXPLAIN = 57821
const DATE = 57822
const ESCAPE = 57823
const REPAIR = 57824
const OPTIMIZE = 57825
const TRUNCATE = 57826
const COALESCE = 57827
const EXCHANGE = 57828
const REBUILD = 57829
const PARTITIONING = 57830
const REMOVE = 57831
const PREPARE = 57832
const EXECUTE = 57833
const MAXVALUE = 57834
const PARTITION = 57835
const REORGANIZE = 57836
const LESS = 57837
const THAN = 57838
const PROCEDURE = 57839
const TRIGGER = 57840
const VINDEX = 57841
const VINDEXES = 57842
const DIRECTORY = 57843
const NAME = 57844
const UPGRADE = 57845
const STATUS = 57846
const VARIABLES = 57847
const WARNINGS = 57848
const CASCADED = 57849
const DEFINER = 57850
const OPTION = 57851
const SQL = 57852
const UNDEFINED = 57853
const SEQUENCE = 57854
const MERGE = 57855
const TEMPORARY = 57856
const TEMPTABLE = 57857
const INVOKER = 57858
const SECURITY = 57859
const FIRST = 57860
const AFTER = 57861
const LAST = 57862
const CANCEL = 57863
const RETRY = 57864
const COMPLETE = 57865
const CLEANUP = 57866
const THROTTLE = 57867
const UNTHROTTLE = 57868
const EXPIRE = 57869
const RATIO = 57870
const BEGIN = 57871
const START = 57872
const TRANSACTION = 57873
const COMMIT = 57874
const ROLLBACK = 57875
const SAVEPOINT = 57876
const RELEASE = 57877
const WORK = 57878
const BIT = 57879
const TINYINT = 57880
const SMALLINT = 57881
const MEDIUMINT = 57882
const INT = 57883
const INTEGER = 57884
const BIGINT = 57885
const INTNUM = 57886
const REAL = 57887
const DOUBLE = 57888
const FLOAT_TYPE = 57889
const DECIMAL_TYPE = 57890
const NUMERIC = 57891
const TIME = 57892
const TIMESTAMP = 57893
const DATETIME = 57894
const YEAR = 57895
const CHAR = 57896
const VARCHAR = 57897
const BOOL = 57898
const CHARACTER = 57899
const VARBINARY = 57900
const NCHAR = 57901
const TEXT = 57902
const TINYTEXT = 57903
const MEDIUMTEXT = 57904
const LONGTEXT = 57905
const BLOB = 57906
const TINYBLOB = 57907
const MEDIUMBLOB = 57908
const LONGBLOB = 57909
const JSON = 57910
const JSON_SCHEMA_VALID = 57911
const JSON_SCHEMA_VALIDATION_REPORT = 57912
const ENUM = 57913
const GEOMETRY = 57914
const POINT = 57915
const LINESTRING = 57916
const POLYGON = 57917
const GEOMETRYCOLLECTION = 57918
const MULTIPOINT = 57919
const MULTILINESTRING = 57920
const MULTIPOLYGON = 57921
const ASCII = 57922
const UNICODE = 57923
const NULLX = 57924
const AUTO_INCREMENT = 57925
const APPROXNUM = 57926
const SIGNED = 57927
const UNSIGNED = 57928
const ZEROFILL = 57929
const CODE = 57930
const COLLATION = 57931
const COLUMNS = 57932
const DATABASES = 57933
const ENGINES = 57934
const EVENT = 57935
const EXTENDED = 57936
const FIELDS = 57937
const FULL = 57938
const FUNCTION = 57939
const GTID_EXECUTED = 57940
const KEYSPACES = 57941
const OPEN = 57942
const PLUGINS = 57943
const PRIVILEGES = 57944
const PROCESSLIST = 57945
const SCHEMAS = 57946
const TABLES = 57947
const TRIGGERS = 57948
const USER = 57949
const VGTID_EXECUTED = 57950
const VSCHEMA = 57951
const NAMES = 57952
const GLOBAL = 57953
const SESSION = 57954
const ISOLATION = 57955
const LEVEL = 57956
const READ = 57957
const WRITE = 57958
const ONLY = 57959
const REPEATABLE = 57960
const COMMITTED = 57961
const UNCOMMITTED = 57962
const SERIALIZABLE = 57963
const CURRENT_TIMESTAMP = 57964
const DATABASE = 57965
const CURRENT_DATE = 57966
const NOW = 57967
const CURRENT_TIME = 57968
const LOCALTIME = 57969
const LOCALTIMESTAMP = 57970
const CURRENT_USER = 57971
const UTC_DATE = 57972
const UTC_TIME = 57973
const UTC_TIMESTAMP = 57974
const DAY = 57975
const DAY_HOUR = 57976
const DAY_MICROSECOND = 57977
const DAY_MINUTE = 57978
const DAY_SECOND = 57979
const HOUR = 57980
const HOUR_MICROSECOND = 57981
const HOUR_MINUTE = 57982
const HOUR_SECOND = 57983
const MICROSECOND = 57984
const MINUTE = 57985
const MINUTE_MICROSECOND = 57986
const MINUTE_SECOND = 57987
const MONTH = 57988
const QUARTER = 57989
const SECOND = 57990
const SECOND_MICROSECOND = 57991
const YEAR_MONTH = 57992
const WEEK = 57993
const REPLACE = 57994
const CONVERT = 57995
const CAST = 57996
const SUBSTR = 57997
const SUBSTRING = 57998
const GROUP_CONCAT = 57999
const SEPARATOR = 58000
const TIMESTAMPADD = 58001
const TIMESTAMPDIFF = 58002
const WEIGHT_STRING = 58003
const LTRIM = 58004
const RTRIM = 58005
const TRIM = 58006
const JSON_ARRAY = 58007
const JSON_OBJECT = 58008
const JSON_QUOTE = 58009
const JSON_DEPTH = 58010
const JSON_TYPE = 58011
const JSON_LENGTH = 58012
const JSON_VALID = 58013
const JSON_ARRAY_APPEND = 58014
const JSON_ARRAY_INSERT = 58015
const JSON_INSERT = 58016
const JSON_MERGE = 58017
const JSON_MERGE_PATCH = 58018
const JSON_MERGE_PRESERVE = 58019
const JSON_REMOVE = 58020
const JSON_REPLACE = 58021
const JSON_SET = 58022
const JSON_UNQUOTE = 58023
const MATCH = 58024
const AGAINST = 58025
const BOOLEAN = 58026
const LANGUAGE = 58027
const WITH = 58028
const QUERY = 58029
const EXPANSION = 58030
const WITHOUT = 58031
const VALIDATION = 58032
const UNUSED = 58033
const ARRAY = 58034
const BYTE = 58035
const CUME_DIST = 58036
const DESCRIPTION = 58037
const DENSE_RANK = 58038
const EMPTY = 58039
const EXCEPT = 58040
const FIRST_VALUE = 58041
const GROUPING = 58042
const GROUPS = 58043
const JSON_TABLE = 58044
const LAG = 58045
const LAST_VALUE = 58046
const LATERAL = 58047
const LEAD = 58048
const NTH_VALUE = 58049
const NTILE = 58050
const OF = 58051
const OVER = 58052
const PERCENT_RANK = 58053
const RANK = 58054
const RECURSIVE = 58055
const ROW_NUMBER = 58056
const SYSTEM = 58057
const WINDOW = 58058
const ACTIVE = 58059
const ADMIN = 58060
const AUTOEXTEND_SIZE = 58061
const BUCKETS = 58062
const CLONE = 58063
const COLUMN_FORMAT = 58064
const COMPONENT = 58065
const DEFINITION = 58066
const ENFORCED = 58067
const ENGINE_ATTRIBUTE = 58068
const EXCLUDE = 58069
const FOLLOWING = 58070
const GEOMCOLLECTION = 58071
const GET_MASTER_PUBLIC_KEY = 58072
const HISTOGRAM = 58073
const HISTORY = 58074
const INACTIVE = 58075
const INVISIBLE = 58076
const LOCKED = 58077
const MASTER_COMPRESSION_ALGORITHMS = 58078
const MASTER_PUBLIC_KEY_PATH = 58079
const MASTER_TLS_CIPHERSUITES = 58080
const MASTER_ZSTD_COMPRESSION_LEVEL = 58081
const NESTED = 58082
const NETWORK_NAMESPACE = 58083
const NOWAIT = 58084
const NULLS = 58085
const OJ = 58086
const OLD = 58087
const OPTIONAL = 58088
const ORDINALITY = 58089
const ORGANIZATION = 58090
const OTHERS = 58091
const PARTIAL = 58092
const PATH = 58093
const PERSIST = 58094
const PERSIST_ONLY = 58095
const PRECEDING = 58096
const PRIVILEGE_CHECKS_USER = 58097
const PROCESS = 58098
const RANDOM = 58099
const REFERENCE = 58100
const REQUIRE_ROW_FORMAT = 58101
const RESOURCE = 58102
const RESPECT = 58103
const RESTART = 58104
const RETAIN = 58105
const REUSE = 58106
const ROLE = 58107
const SECONDARY = 58108
const SECONDARY_ENGINE = 58109
const SECONDARY_ENGINE_ATTRIBUTE = 58110
const SECONDARY_LOAD = 58111
const SECONDARY_UNLOAD = 58112
const SIMPLE = 58113
const SKIP = 58114
const SRID = 58115
const THREAD_PRIORITY = 58116
const TIES = 58117
const UNBOUNDED = 58118
const VCPU = 58119
const VISIBLE = 58120
const RETURNING = 58121
const FORMAT = 58122
const TREE = 58123
const TRADITIONAL = 58124
const LOCAL = 58125
const LOW_PRIORITY = 58126
const NO_WRITE_TO_BINLOG = 58127
const LOGS = 58128
const ERROR = 58129
const GENERAL = 58130
const HOSTS = 58131
const OPTIMIZER_COSTS = 58132
const USER_RESOURCES = 58133
const SLOW = 58134
const CHANNEL = 58135
const RELAY = 58136
const EXPORT = 58137
const AVG_ROW_LENGTH = 58138
const CONNECTION = 58139
const CHECKSUM = 58140
const DELAY_KEY_WRITE = 58141
const ENCRYPTION = 58142
const INSERT_METHOD = 58143
const MAX_ROWS = 58144
const MIN_ROWS = 58145
const PACK_KEYS = 58146
const PASSWORD = 58147
const FIXED = 58148
const DYNAMIC = 58149
const COMPRESSED = 58150
const REDUNDANT = 58151
const COMPACT = 58152
const ROW_FORMAT = 58153
const STATS_AUTO_RECALC = 58154
const STATS_PERSISTENT = 58155
const STATS_SAMPLE_PAGES = 58156
const STORAGE = 58157
const MEMORY = 58158
const DISK = 58159

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 46,
	13, 46,
	-2, 36,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 139,
	835, 139,
	-2, 147,
	-1, 47,
	1, 463,
	835, 463,
	-2, 147,
	-1, 54,
	35, 594,
	475, 594,
	486, 594,
	521, 606,
	522, 606,
	-2, 596,
	-1, 59,
	477, 619,
	-2, 617,
	-1, 112,
	474, 1106,
	-2, 113,
	-1, 114,
	1, 140,
	835, 140,
	-2, 147,
	-1, 125,
	374, 147,
	413, 147,
	574, 147,
	-2, 472,
	-1, 126,
	375, 370,
	480, 370,
	-2, 457,
	-1, 697,
	458, 1127,
	-2, 1123,
	-1, 698,
	458, 1128,
	-2, 1124,
	-1, 709,
	328, 1303,
	458, 1303,
	459, 1303,
	460, 1303,
	-2, 269,
	-1, 710,
	328, 1344,
	458, 1344,
	459, 1344,
	460, 1344,
	-2, 268,
	-1, 711,
	328, 1555,
	458, 1555,
	459, 1555,
	460, 1555,
	-2, 270,
	-1, 772,
	301, 685,
	-2, 700,
	-1, 806,
	389, 1533,
	-2, 106,
	-1, 807,
	389, 1352,
	-2, 107,
	-1, 813,
	389, 1428,
	-2, 1100,
	-1, 953,
	485, 40,
	490, 40,
	-2, 381,
	-1, 1009,
	1, 516,
	835, 516,
	-2, 147,
	-1, 1208,
	458, 1555,
	-2, 272,
	-1, 1233,
	301, 686,
	-2, 705,
	-1, 1234,
	301, 687,
	-2, 706,
	-1, 1283,
	1, 420,
	835, 420,
	-2, 147,
	-1, 1363,
	485, 41,
	490, 41,
	-2, 382,
	-1, 1622,
	458, 1132,
	-2, 1126,
	-1, 1697,
	1, 1093,
	329, 1093,
	835, 1093,
	-2, 1450,
	-1, 1702,
	1, 421,
	835, 421,
	-2, 147,
	-1, 1708,
	328, 379,
	331, 379,
	332, 379,
	333, 379,
	-2, 1371,
	-1, 1709,
	328, 380,
	331, 380,
	332, 380,
	333, 380,
	-2, 1398,
	-1, 1711,
	25, 168,
	-2, 170,
	-1, 1931,
	329, 38,
	-2, 741,
	-1, 1980,
	319, 90,
	329, 90,
	-2, 759,
	-1, 2334,
	329, 38,
	-2, 742,
	-1, 2358,
	7, 52,
	18, 52,
	20, 52,
	330, 52,
	-2, 734,
	-1, 2551,
	22, 1431,
	32, 1431,
	414, 1431,
	497, 1431,
	554, 1431,
	555, 1431,
	556, 1431,
	557, 1431,
	558, 1431,
	559, 1431,
	560, 1431,
	562, 1431,
	563, 1431,
	564, 1431,
	565, 1431,
	566, 1431,
	567, 1431,
	568, 1431,
	569, 1431,
	570, 1431,
	571, 1431,
	572, 1431,
	573, 1431,
	575, 1431,
	577, 1431,
	578, 1431,
	579, 1431,
	580, 1431,
	581, 1431,
	582, 1431,
	583, 1431,
	584, 1431,
	585, 1431,
	588, 1431,
	589, 1431,
	590, 1431,
	591, 1431,
	592, 1431,
	593, 1431,
	594, 1431,
	595, 1431,
	596, 1431,
	701, 1431,
	-2, 535,
}

const psqPrivate = 57344

const psqLast = 46847

var psqAct = [...]int{
	697, 706, 2428, 2429, 2605, 2427, 2502, 2579, 2578, 1699,
	699, 2406, 1286, 2268, 2130, 2533, 2549, 2208, 2215, 1213,
	2467, 1886, 784, 1635, 1063, 2488, 2221, 1248, 3, 615,
	1945, 2094, 1949, 94, 1720, 691, 700, 1952, 690, 36,
	2129, 688, 689, 641, 1655, 2128, 2251, 612, 1953, 2330,
	160, 765, 1974, 160, 2349, 580, 160, 1950, 1020, 1737,
	611, 594, 613, 160, 619, 2018, 2041, 2019, 2077, 1758,
	1741, 160, 2009, 2020, 142, 811, 1784, 918, 1688, 1963,
	984, 785, 1947, 1369, 1677, 160, 607, 1235, 1922, 1676,
	1592, 1773, 1522, 160, 1533, 1616, 1591, 123, 1757, 1661,
	1800, 1743, 1481, 2014, 1275, 1982, 1254, 594, 767, 37,
	594, 160, 594, 919, 769, 1361, 773, 624, 93, 1636,
	1145, 1545, 1679, 1216, 1082, 1498, 1435, 922, 1368, 1431,
	1755, 808, 925, 926, 787, 954, 950, 35, 1420, 951,
	1272, 1721, 1274, 779, 1258, 1061, 1440, 1588, 121, 117,
	1335, 1048, 87, 1006, 2057, 2056, 1798, 1356, 2378, 2085,
	583, 162, 163, 164, 1409, 143, 115, 2086, 2521, 116,
	2211, 2432, 1734, 2432, 2522, 1083, 1487, 162, 163, 164,
	1632, 1633, 1340, 1486, 1485, 156, 1484, 775, 1483, 605,
	2567, 606, 798, 1476, 1918, 792, 561, 797, 1083, 944,
	948, 2048, 2318, 2582, 583, 124, 1788, 777, 95, 119,
	961, 139, 118, 2612, 2577, 774, 100, 89, 1749, 975,
	986, 981, 83, 2591, 1786, 991, 992, 993, 2051, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 74, 1491,
	949, 988, 602, 1745, 581, 987, 2611, 805, 812, 2543,
	1787, 2601, 1832, 76, 96, 2517, 102, 103, 2522, 106,
	943, 2589, 112, 2559, 942, 157, 76, 1619, 556, 583,
	2407, 2534, 2542, 2516, 2093, 2554, 76, 2557, 2302, 78,
	118, 941, 1092, 766, 940, 989, 2563, 2564, 762, 763,
	764, 576, 1350, 772, 2223, 2224, 1919, 2065, 1148, 156,
	2558, 2064, 1694, 1695, 574, 1092, 2204, 603, 1114, 1724,
	1991, 2084, 934, 1990, 768, 936, 1992, 939, 786, 1013,
	1014, 800, 801, 119, 118, 1055, 76, 1057, 2472, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1123, 1122, 1124, 1125,
	2205, 2206, 1829, 1276, 571, 1277, 1693, 1038, 760, 1634,
	1670, 1016, 1008, 579, 759, 1060, 1027, 2583, 1043, 1044,
	584, 1028, 2503, 2002, 8, 1054, 1056, 1152, 2293, 1026,
	1039, 1025, 1714, 1713, 7, 937, 583, 2291, 2584, 1032,
	1088, 935, 592, 1081, 776, 75, 6, 2270, 2012, 2013,
	930, 1475, 596, 590, 583, 2042, 1403, 1774, 2060, 2222,
	2263, 583, 2600, 1088, 584, 1801, 1477, 1478, 2264, 1806,
	939, 2225, 931, 1809, 1421, 1810, 1724, 1811, 1047, 933,
	932, 1041, 1042, 2272, 994, 1805, 1803, 1222, 1126, 2587,
	2609, 156, 1126, 990, 2225, 923, 562, 1036, 564, 921,
	1404, 586, 1405, 585, 567, 1830, 566, 569, 577, 570,
	2613, 565, 1045, 575, 1040, 119, 578, 2212, 573, 587,
	1059, 1052, 1046, 1033, 1807, 1053, 2568, 1804, 937, 584,
	1242, 2271, 923, 923, 1367, 1058, 966, 957, 956, 1432,
	2076, 799, 956, 2214, 938, 1756, 965, 2073, 1793, 1923,
	1925, 1051, 1722, 1723, 1428, 136, 1348, 2209, 2431, 1069,
	2431, 138, 939, 1004, 1783, 969, 2240, 963, 2059, 1347,
	1346, 1429, 1344, 2089, 2223, 2224, 560, 1844, 555, 2072,
	2210, 2445, 144, 2071, 145, 1127, 1128, 2365, 2176, 1425,
	1987, 1944, 1910, 1628, 1262, 1192, 1018, 2010, 1700, 1005,
	133, 134, 132, 131, 155, 1126, 1120, 1121, 1123, 1122,
	1124, 1125, 2216, 1125, 2203, 1049, 160, 2342, 160, 1830,
	2095, 160, 963, 782, 1087, 1084, 1085, 1086, 1091, 1093,
	1090, 2511, 1089, 85, 985, 2113, 584, 938, 2170, 1366,
	1802, 594, 1064, 594, 1426, 1785, 85, 1087, 1084, 1085,
	1086, 1091, 1093, 1090, 584, 1089, 85, 594, 594, 1722,
	1723, 584, 1748, 945, 2079, 2004, 962, 1278, 1022, 2078,
	109, 1079, 2062, 1441, 1546, 2031, 1860, 1671, 1546, 2222,
	963, 1023, 1096, 1029, 1030, 1031, 2381, 1075, 1097, 2380,
	588, 2225, 2473, 1493, 1495, 1496, 144, 36, 145, 2079,
	127, 135, 137, 2097, 2078, 126, 85, 128, 129, 1065,
	1747, 1924, 2338, 147, 1778, 1007, 1494, 1097, 155, 2515,
	1382, 962, 582, 1381, 1365, 983, 976, 956, 973, 938,
	2562, 978, 1422, 1503, 1423, 979, 977, 972, 1424, 110,
	1662, 1663, 2614, 1129, 1130, 1131, 1132, 1504, 1505, 1502,
	1836, 1837, 1838, 1137, 1746, 1140, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1123, 1122, 1124, 1125, 2585, 2107, 2106,
	2105, 2099, 1097, 2103, 2561, 2098, 1097, 2096, 2366, 962,
	2379, 85, 2101, 1263, 1752, 956, 959, 960, 1066, 923,
	1242, 2100, 2586, 953, 957, 1501, 713, 2258, 2259, 2213,
	2418, 1550, 1097, 2385, 1133, 2372, 2024, 1211, 2102, 2104,
	2015, 1846, 1097, 1995, 162, 163, 164, 1796, 2373, 1097,
	160, 1438, 1875, 594, 594, 1407, 1401, 147, 144, 1399,
	145, 1206, 1097, 1097, 1398, 1397, 1574, 2299, 2267, 160,
	1118, 1119, 1120, 1121, 1123, 1122, 1124, 1125, 1223, 1068,
	155, 2169, 162, 163, 164, 594, 1994, 2573, 1242, 160,
	99, 1242, 767, 1228, 594, 1225, 1097, 1942, 2540, 1229,
	594, 98, 1114, 97, 1109, 769, 1110, 1097, 1942, 2530,
	1226, 2405, 1113, 162, 163, 164, 1097, 1768, 808, 1097,
	1111, 1112, 1108, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1123, 1122, 1124, 1125, 1942, 2527, 1212, 2027, 130, 2523,
	1242, 1227, 162, 163, 164, 93, 1566, 1555, 1556, 1557,
	1558, 1568, 1559, 1560, 1561, 1573, 1569, 1562, 1563, 1570,
	1571, 1572, 1564, 1565, 1567, 2314, 1242, 1035, 2217, 1942,
	2400, 140, 1217, 98, 141, 2198, 2607, 1097, 1037, 2608,
	2220, 2606, 162, 163, 164, 1830, 1766, 1094, 1242, 147,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1099, 1212, 162,
	163, 164, 1710, 1764, 90, 1880, 1242, 90, 160, 2231,
	2232, 2050, 1336, 1097, 92, 91, 2231, 2230, 91, 2218,
	1946, 1097, 1345, 1831, 2219, 1782, 1094, 79, 1015, 1150,
	1050, 1151, 1960, 1242, 2430, 812, 2430, 1012, 84, 1938,
	2376, 2377, 2510, 594, 1363, 2171, 1411, 1410, 1412, 1413,
	1414, 84, 1372, 1078, 1942, 2049, 1374, 1375, 1960, 594,
	2314, 84, 1946, 1076, 2174, 1242, 1380, 766, 2155, 1383,
	1384, 160, 1386, 75, 1692, 1077, 1247, 1097, 1230, 1224,
	1021, 96, 146, 1268, 1269, 148, 149, 1856, 1442, 150,
	151, 1214, 1095, 594, 1096, 160, 152, 153, 154, 2615,
	2115, 1983, 1154, 1983, 1430, 768, 963, 594, 1847, 160,
	1959, 84, 1847, 1242, 1351, 1352, 1353, 1830, 2058, 1373,
	1360, 1095, 1376, 1096, 160, 1339, 2043, 2481, 1242, 1379,
	1880, 160, 2507, 1865, 1355, 1864, 1377, 2039, 2040, 1307,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 594,
	1198, 1199, 1200, 1201, 1202, 594, 594, 2297, 1242, 1770,
	1395, 1396, 1942, 1941, 1660, 1400, 1097, 1371, 1242, 1339,
	1338, 1097, 160, 1343, 1948, 1242, 1095, 1851, 1096, 1370,
	1095, 1445, 1096, 1252, 1437, 2169, 1357, 1850, 1449, 1242,
	1451, 1452, 1453, 1454, 1362, 1358, 146, 1458, 1246, 148,
	149, 1378, 1630, 150, 151, 962, 1095, 982, 1096, 1479,
	152, 153, 154, 1242, 1284, 1283, 1095, 594, 1096, 1530,
	1530, 1895, 1242, 1095, 1097, 1096, 1427, 1097, 1527, 1527,
	1536, 594, 1526, 1531, 1499, 1433, 1095, 1095, 1096, 1096,
	1270, 1887, 1349, 947, 2360, 946, 594, 594, 1506, 942,
	1508, 1497, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1507, 118, 941, 1443, 1444, 940,
	1095, 1447, 1096, 85, 1097, 2469, 771, 1589, 1097, 1249,
	1448, 1095, 1097, 1096, 1847, 2460, 2448, 1455, 1456, 1457,
	1095, 2383, 1096, 1095, 1468, 1096, 1114, 2088, 1341, 1849,
	1472, 1473, 1547, 2017, 2265, 2044, 1729, 1620, 1728, 160,
	2022, 1418, 1242, 594, 1364, 1242, 1500, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1123, 1122, 1124, 1125, 146, 1589,
	1097, 148, 149, 1008, 1960, 150, 151, 160, 2316, 1645,
	594, 1646, 152, 153, 154, 2387, 2312, 160, 1337, 111,
	594, 1095, 1391, 1096, 1847, 160, 1097, 160, 1622, 160,
	160, 594, 2269, 2021, 594, 1116, 1117, 1118, 1119, 1120,
	1121, 1123, 1122, 1124, 1125, 594, 2169, 1620, 2350, 2351,
	1624, 1625, 2470, 93, 1672, 808, 1711, 1095, 808, 1096,
	1749, 1097, 99, 1643, 36, 1095, 2356, 1096, 2597, 1097,
	2595, 93, 1855, 98, 1470, 97, 1984, 1960, 1984, 1621,
	2580, 1675, 2520, 1651, 92, 1241, 1986, 2486, 1830, 1097,
	2353, 2245, 698, 1725, 1726, 1727, 2244, 1097, 1622, 2243,
	594, 2032, 1948, 1815, 2437, 1097, 2436, 1759, 1760, 1761,
	2355, 1097, 1763, 1765, 1767, 1097, 1097, 2391, 1703, 2187,
	594, 1095, 1704, 1096, 2188, 594, 1372, 1640, 961, 1372,
	1387, 1372, 1686, 2185, 2184, 2183, 1250, 594, 2186, 594,
	2570, 1649, 161, 1792, 1097, 161, 2541, 1657, 161, 1667,
	1653, 2175, 1097, 595, 1738, 161, 594, 594, 1707, 1097,
	2159, 1251, 1532, 161, 1665, 1273, 2305, 758, 1744, 1538,
	1539, 1690, 812, 1097, 1691, 812, 1097, 161, 1509, 160,
	2189, 1706, 1969, 1970, 1705, 161, 160, 2227, 160, 160,
	2000, 1295, 160, 2025, 160, 1542, 1244, 1772, 971, 595,
	1751, 160, 595, 161, 595, 970, 2279, 2021, 160, 1543,
	1095, 2082, 1096, 1067, 1789, 1095, 114, 1096, 2047, 2304,
	119, 1623, 1904, 1739, 1626, 1627, 1416, 1415, 1406, 1790,
	160, 1791, 88, 1750, 1715, 594, 1716, 1717, 1718, 1719,
	1762, 1777, 1754, 2167, 1780, 2603, 1781, 2241, 1794, 1795,
	1739, 1818, 1730, 1731, 1732, 1733, 1779, 1776, 1775, 2508,
	1650, 1114, 1821, 1822, 1735, 1736, 85, 1824, 1095, 1903,
	1096, 1095, 803, 1096, 1308, 2465, 1825, 1902, 1662, 1663,
	2226, 1799, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123,
	1122, 1124, 1125, 1965, 1968, 1969, 1970, 1966, 1499, 1967,
	1971, 1973, 1654, 2350, 2351, 1499, 1240, 1236, 2388, 2389,
	2390, 1840, 2331, 1842, 1834, 1392, 1393, 1394, 1095, 1814,
	1096, 1237, 1095, 2022, 1096, 1901, 1095, 1841, 1096, 790,
	791, 1321, 1324, 1325, 1326, 1327, 1328, 1329, 97, 1330,
	1331, 1332, 1333, 1334, 1309, 1310, 1311, 1312, 1293, 1294,
	1322, 1900, 1296, 2493, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 2492, 1828, 1306, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1095, 1009, 1096, 2442, 1471, 99,
	1500, 2246, 90, 1769, 789, 1242, 1899, 1500, 1839, 92,
	98, 160, 97, 91, 1898, 1845, 2435, 2158, 160, 98,
	1095, 92, 1096, 1530, 594, 2157, 2392, 2393, 2394, 2441,
	594, 2337, 1527, 1916, 1897, 1946, 1928, 2599, 2598, 1388,
	1389, 1390, 1896, 2120, 1866, 1641, 1859, 99, 1114, 1843,
	1890, 1264, 1256, 2599, 594, 1095, 1889, 1096, 98, 2598,
	1888, 1885, 160, 1095, 2443, 1096, 160, 2371, 1932, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1123, 1122, 1124, 1125,
	781, 1993, 1873, 1095, 1622, 1096, 952, 1954, 101, 1884,
	86, 1095, 773, 1096, 1, 99, 2375, 1883, 1323, 1095,
	1976, 1096, 594, 2556, 1881, 1095, 98, 1096, 97, 1095,
	1095, 1096, 1096, 104, 105, 1951, 572, 1631, 1877, 1939,
	1215, 1876, 1965, 1968, 1969, 1970, 1966, 2581, 1967, 1971,
	594, 2003, 2005, 1217, 1917, 1621, 160, 1926, 1095, 2552,
	1096, 2553, 1408, 160, 1402, 2408, 1095, 1943, 1096, 1590,
	594, 2466, 1940, 1095, 1742, 1096, 955, 1996, 125, 1372,
	1372, 1701, 1702, 775, 2536, 1240, 1236, 1095, 1981, 1096,
	1095, 108, 1096, 1985, 2055, 916, 2011, 1988, 107, 958,
	1237, 2054, 1034, 1771, 160, 160, 160, 160, 160, 1857,
	2001, 774, 1744, 1712, 2037, 160, 160, 1290, 1997, 1975,
	1288, 1289, 1287, 1292, 1291, 1867, 2317, 1474, 1647, 1648,
	1239, 160, 1238, 2016, 964, 967, 968, 591, 1972, 158,
	1279, 1257, 974, 980, 2023, 563, 2233, 1797, 568, 1024,
	1138, 1469, 594, 2028, 2156, 2029, 1989, 2053, 2033, 2034,
	2035, 809, 802, 1642, 1930, 1956, 2531, 1998, 1355, 1253,
	2440, 2336, 1858, 1544, 1680, 1492, 617, 616, 614, 1933,
	1669, 2052, 2108, 1100, 701, 1907, 1908, 1530, 161, 1530,
	161, 767, 1530, 161, 2045, 2046, 1527, 1530, 1527, 1920,
	1921, 1527, 1265, 1964, 2090, 1962, 1527, 2091, 1961, 2112,
	1816, 594, 1687, 595, 2352, 595, 2348, 2074, 2548, 1682,
	1678, 2143, 2144, 2145, 2146, 1937, 1936, 625, 618, 595,
	595, 2136, 610, 2133, 2368, 2150, 2137, 2253, 2061, 160,
	2266, 2063, 2092, 594, 2109, 594, 1999, 2262, 1080, 1232,
	2131, 604, 2131, 929, 1541, 2131, 2471, 1833, 2301, 1231,
	2131, 160, 160, 160, 160, 160, 1553, 2160, 2165, 2150,
	1554, 2124, 2080, 160, 62, 2081, 40, 1581, 160, 598,
	2566, 160, 1071, 160, 796, 31, 160, 160, 160, 30,
	29, 2161, 2177, 2138, 2139, 2140, 2141, 2142, 28, 23,
	22, 21, 20, 19, 2197, 2149, 25, 2152, 2153, 2154,
	2151, 18, 17, 16, 2576, 2602, 1229, 1976, 113, 49,
	46, 44, 122, 120, 1951, 47, 2239, 2162, 43, 1010,
	41, 27, 2168, 160, 26, 2199, 15, 14, 2200, 13,
	594, 12, 11, 10, 9, 594, 2179, 2180, 5, 2182,
	2178, 2190, 4, 2181, 34, 33, 32, 1074, 93, 24,
	160, 2, 681, 1437, 0, 2201, 0, 1233, 1234, 1239,
	2207, 1238, 0, 0, 160, 0, 0, 160, 0, 2228,
	2229, 0, 0, 0, 0, 0, 0, 2280, 2236, 2250,
	2255, 2254, 161, 2235, 2234, 595, 595, 0, 0, 0,
	1243, 1245, 2237, 2238, 0, 0, 0, 2248, 0, 0,
	0, 161, 0, 1744, 2249, 2194, 2195, 2247, 0, 2260,
	0, 0, 0, 593, 0, 0, 0, 595, 0, 0,
	0, 161, 0, 0, 0, 0, 595, 0, 0, 2277,
	2278, 2275, 595, 2274, 0, 0, 0, 0, 2311, 2282,
	0, 0, 2283, 0, 0, 0, 594, 160, 0, 2289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 920, 0, 927, 594, 0, 594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 2343, 2332, 2333, 0, 0, 1954, 2347, 0,
	0, 1954, 36, 2345, 0, 0, 0, 2374, 0, 2357,
	2341, 0, 0, 0, 0, 0, 160, 2339, 2361, 0,
	2363, 2364, 0, 0, 1951, 0, 2354, 0, 0, 0,
	0, 160, 0, 0, 160, 160, 160, 594, 0, 0,
	161, 2362, 0, 2255, 2254, 2369, 0, 0, 2370, 0,
	0, 0, 0, 0, 0, 2384, 0, 2386, 0, 0,
	594, 594, 594, 594, 0, 0, 0, 0, 2286, 2287,
	0, 2288, 0, 0, 2290, 595, 2292, 0, 2294, 2404,
	0, 2399, 0, 2402, 2403, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 1530, 0, 1530, 0, 0, 0,
	0, 0, 2414, 1527, 2417, 1527, 0, 0, 0, 0,
	0, 0, 2413, 0, 0, 595, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	2433, 161, 0, 0, 0, 2424, 0, 0, 2423, 0,
	0, 0, 1530, 0, 0, 0, 161, 0, 0, 0,
	0, 1527, 0, 161, 0, 2450, 0, 2131, 1954, 2131,
	2444, 767, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 595, 0, 2452, 0, 767, 0, 595, 595, 2446,
	0, 2454, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 0, 0, 2451, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 2462, 0, 0, 0, 2463, 0, 0,
	2483, 2484, 2468, 0, 1530, 594, 0, 0, 0, 594,
	594, 0, 0, 1527, 0, 0, 594, 2487, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 594, 2497, 0, 2494, 2495, 0, 0, 0, 2500,
	594, 160, 0, 595, 2504, 1548, 2498, 0, 0, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 595,
	0, 0, 0, 2501, 2509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 2506, 0, 0, 1951, 0,
	0, 594, 594, 0, 2512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 594, 0, 0, 0, 0, 160,
	594, 2535, 0, 0, 0, 2468, 2537, 2532, 1243, 1629,
	2544, 0, 0, 0, 0, 0, 0, 36, 2565, 2555,
	2560, 161, 2547, 0, 2569, 595, 0, 0, 0, 0,
	0, 0, 0, 2575, 0, 0, 0, 0, 0, 0,
	1652, 0, 0, 0, 594, 0, 0, 0, 1530, 161,
	0, 2588, 595, 0, 0, 2592, 2594, 1527, 2596, 161,
	2590, 2593, 595, 0, 0, 0, 0, 161, 0, 161,
	2604, 161, 161, 595, 2610, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 595, 0, 2618,
	2619, 2484, 2617, 1527, 0, 0, 0, 2616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	1072, 0, 0, 0, 0, 0, 0, 0, 1753, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 595, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2038, 0, 0, 0, 0, 595, 595,
	0, 0, 0, 0, 0, 0, 119, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 161, 0,
	161, 161, 0, 0, 161, 0, 161, 0, 0, 1209,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1220, 1221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1260, 1848, 0,
	0, 0, 1852, 0, 1853, 1854, 810, 0, 0, 0,
	0, 0, 1280, 1862, 0, 0, 1863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1868, 1869, 1870, 1871, 1872, 0, 1874, 0,
	0, 0, 0, 0, 1878, 0, 1879, 0, 0, 0,
	1882, 0, 0, 0, 0, 0, 0, 0, 1891, 1892,
	1893, 1894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1905, 1906, 0, 0, 0, 0, 0, 0, 1911,
	1912, 1913, 1914, 1915, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 1927, 0, 0, 0,
	161, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1957,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 161, 920, 0, 0, 161, 0,
	0, 0, 136, 0, 0, 0, 0, 1209, 138, 0,
	1209, 920, 0, 0, 0, 0, 0, 1209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 145, 0, 0, 595, 0, 0, 0, 0, 682,
	0, 0, 0, 0, 0, 1417, 0, 133, 134, 132,
	131, 155, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 595, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 159,
	0, 0, 559, 2574, 0, 589, 0, 0, 0, 0,
	0, 810, 559, 1307, 0, 0, 0, 810, 810, 0,
	559, 0, 0, 0, 0, 0, 161, 161, 161, 161,
	161, 0, 0, 0, 780, 0, 0, 161, 161, 0,
	0, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	795, 0, 795, 161, 0, 0, 0, 127, 135, 137,
	559, 0, 126, 0, 128, 129, 0, 0, 0, 0,
	147, 0, 0, 0, 595, 0, 0, 0, 0, 1523,
	0, 0, 0, 2119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 0, 0, 0, 0, 0,
	1209, 0, 2132, 0, 0, 0, 0, 0, 1551, 1552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2147, 2148, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 595, 0, 595, 0, 0,
	0, 2172, 2173, 0, 0, 1644, 0, 0, 0, 0,
	0, 0, 0, 161, 161, 161, 161, 161, 0, 0,
	2192, 2193, 0, 0, 0, 161, 0, 0, 0, 0,
	161, 0, 1656, 161, 0, 161, 0, 0, 161, 161,
	161, 0, 1260, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 0, 810, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 130, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 161, 0, 140, 161,
	0, 141, 0, 2281, 0, 0, 0, 0, 0, 0,
	2285, 0, 920, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 2295, 2296, 2298, 2300, 0, 920,
	0, 1523, 0, 0, 2306, 0, 0, 2308, 2309, 2310,
	0, 0, 0, 0, 2313, 0, 0, 0, 1523, 1523,
	2315, 0, 0, 2319, 2320, 2321, 2322, 2323, 2324, 2325,
	2326, 2327, 2328, 0, 0, 2329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 0, 595, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	2358, 2359, 148, 149, 0, 0, 150, 151, 0, 156,
	0, 161, 0, 152, 153, 154, 0, 1827, 0, 0,
	1354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 139, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 161, 161, 161, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 595, 595, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 0, 559, 0, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2421, 0, 0, 0, 2422, 0, 0,
	0, 0, 0, 2426, 0, 1321, 1324, 1325, 1326, 1327,
	1328, 1329, 0, 1330, 1331, 1332, 1333, 1334, 1309, 1310,
	1311, 1312, 1293, 1294, 1322, 0, 1296, 0, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 0, 0, 1306,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1656, 0, 0, 0,
	0, 0, 1934, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2464, 0, 0,
	0, 0, 0, 1209, 0, 0, 1958, 0, 0, 0,
	595, 2474, 2475, 2476, 0, 2477, 2478, 0, 0, 2479,
	0, 2480, 0, 2482, 2485, 0, 0, 0, 0, 0,
	2489, 0, 0, 0, 708, 77, 1210, 595, 0, 0,
	0, 595, 595, 0, 0, 0, 0, 0, 595, 2505,
	0, 595, 0, 0, 2006, 0, 0, 0, 0, 0,
	0, 0, 1323, 595, 0, 0, 0, 2514, 0, 0,
	0, 0, 595, 161, 0, 0, 0, 0, 0, 2519,
	0, 0, 2026, 0, 2524, 0, 0, 0, 0, 559,
	2525, 2526, 0, 0, 0, 0, 0, 0, 2528, 0,
	0, 0, 1656, 0, 0, 0, 0, 0, 780, 136,
	770, 0, 77, 595, 595, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 559, 0,
	770, 161, 595, 0, 0, 0, 144, 0, 145, 0,
	2571, 0, 0, 0, 2572, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 133, 134, 132, 131, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 1523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1209, 0,
	1209, 0, 0, 1209, 0, 0, 0, 0, 1209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 0, 0, 559, 0, 0,
	0, 0, 0, 0, 127, 135, 137, 794, 0, 126,
	0, 128, 129, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 2163, 0, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1209, 0, 1210, 0, 0, 1210, 0, 0,
	0, 0, 0, 0, 1210, 0, 0, 0, 0, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 559, 702, 1529, 712, 713, 2258,
	2259, 703, 705, 0, 0, 0, 704, 0, 1436, 0,
	0, 0, 0, 0, 0, 788, 0, 0, 0, 707,
	714, 715, 0, 559, 0, 0, 0, 0, 0, 0,
	559, 0, 920, 0, 0, 1209, 0, 1656, 0, 1459,
	1460, 559, 559, 559, 559, 559, 559, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2256, 2257, 0, 0, 0, 0,
	0, 559, 0, 0, 0, 0, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 0, 0,
	0, 0, 130, 0, 795, 0, 0, 0, 0, 0,
	0, 795, 795, 0, 0, 0, 0, 1210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2163, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 141, 0,
	0, 0, 1209, 0, 0, 0, 0, 2344, 0, 2346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 795, 1436, 795, 795, 795, 795, 795, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 780, 0, 0, 1656,
	0, 0, 0, 0, 0, 0, 559, 0, 0, 0,
	0, 0, 1436, 0, 559, 0, 559, 0, 559, 1689,
	0, 0, 2409, 2410, 2411, 2412, 146, 0, 0, 148,
	149, 0, 0, 150, 151, 1062, 0, 1062, 0, 0,
	152, 153, 154, 0, 76, 38, 39, 78, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 1209, 0, 1209, 42, 68,
	69, 0, 66, 70, 0, 0, 0, 0, 0, 0,
	0, 770, 1134, 1135, 1136, 0, 1139, 0, 1141, 1142,
	1143, 1144, 0, 1147, 1149, 1149, 0, 1149, 1153, 1153,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 0, 1193, 1194,
	1195, 1196, 1197, 0, 0, 0, 0, 1153, 1153, 1153,
	1153, 1153, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 0, 0, 0, 0, 0, 0, 559, 0,
	0, 0, 0, 0, 0, 559, 0, 559, 559, 0,
	0, 559, 0, 1819, 1218, 0, 0, 2490, 0, 0,
	559, 2490, 2490, 0, 0, 0, 1209, 559, 2499, 0,
	0, 1656, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 1656, 0, 0, 1219, 0, 0, 559,
	0, 770, 1656, 0, 0, 770, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 0, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 810, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2545, 783, 0, 0,
	0, 0, 2550, 0, 0, 0, 0, 1098, 0, 0,
	0, 795, 0, 0, 0, 924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2550, 0, 0, 0,
	0, 649, 651, 650, 660, 661, 662, 663, 664, 665,
	2459, 2455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 795, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	559, 0, 0, 0, 0, 0, 608, 1638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 0, 0, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 48, 51,
	50, 53, 0, 0, 65, 559, 0, 73, 0, 0,
	0, 0, 2036, 1062, 0, 0, 0, 0, 0, 1062,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 81, 80, 0, 0, 63, 64, 52, 0, 0,
	0, 0, 0, 71, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 559, 559, 559, 559, 0, 0,
	0, 0, 0, 0, 559, 559, 0, 0, 0, 0,
	655, 656, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 0, 56, 57, 0, 58, 59, 60, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 692, 0, 642, 696, 644, 693, 694,
	0, 640, 643, 695, 0, 1210, 0, 1210, 0, 0,
	1210, 0, 0, 0, 0, 1210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 795,
	645, 646, 648, 652, 653, 2456, 2457, 2458, 659, 667,
	669, 670, 668, 671, 672, 673, 676, 677, 678, 679,
	674, 675, 680, 0, 0, 0, 0, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 79, 0, 0, 0, 1210,
	559, 559, 559, 559, 559, 0, 0, 0, 0, 0,
	1673, 0, 2191, 1681, 0, 0, 0, 559, 0, 0,
	1638, 0, 559, 0, 0, 559, 2202, 1436, 0, 84,
	1011, 0, 1017, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 1489, 1490, 0, 0, 0, 0, 0,
	0, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1210, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	0, 0, 0, 1534, 1535, 0, 0, 0, 0, 928,
	0, 1540, 0, 559, 0, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1575, 1576, 1577, 1578,
	1579, 1580, 1582, 1586, 1587, 608, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1658,
	1659, 0, 85, 0, 0, 0, 0, 0, 702, 1529,
	712, 713, 2258, 2259, 703, 705, 1835, 0, 559, 704,
	0, 0, 0, 0, 0, 0, 1698, 0, 0, 0,
	0, 0, 707, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 1267, 0, 0, 0, 0, 0, 0,
	559, 0, 0, 559, 559, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2256, 2257, 0,
	0, 0, 0, 0, 0, 1740, 0, 0, 0, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 0, 1210, 0, 1210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1955, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 1977, 0, 1978, 1979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1210, 0, 0, 1929, 0, 0, 1529,
	712, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	559, 0, 0, 0, 1861, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 692, 0, 0, 696, 0, 693, 694,
	0, 0, 0, 695, 0, 0, 0, 0, 0, 1146,
	0, 1529, 712, 0, 0, 0, 1482, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1638, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	0, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1681, 1681, 1681, 1681, 1681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1977, 770, 0, 0, 0, 1681, 0, 0,
	1681, 1664, 0, 0, 0, 0, 0, 0, 0, 1668,
	0, 1674, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2110, 2111, 0, 0, 0, 2114, 0,
	0, 0, 2116, 2117, 2118, 0, 0, 0, 2284, 0,
	0, 0, 0, 2121, 2122, 2123, 0, 0, 1593, 2125,
	0, 2126, 2127, 0, 0, 0, 2134, 2135, 0, 0,
	0, 0, 0, 0, 1593, 1593, 1593, 1593, 1593, 608,
	608, 608, 608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	1808, 0, 1812, 1813, 0, 0, 1817, 0, 0, 0,
	0, 0, 0, 0, 2166, 1820, 1955, 0, 77, 0,
	1955, 0, 1823, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1681, 1826, 0, 0, 2196, 0, 0,
	0, 0, 0, 0, 0, 0, 2367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2434, 0, 2438, 2439, 0,
	0, 0, 0, 2303, 0, 0, 0, 1955, 2307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1157, 1164, 1167, 1168, 1176, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2529, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2415, 0, 2416, 0, 0,
	0, 0, 2419, 2420, 0, 0, 0, 0, 2066, 2067,
	2068, 2069, 2070, 0, 2425, 0, 0, 0, 0, 1482,
	2075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2447, 0,
	0, 2449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2496,
	608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2273, 0,
	0, 2276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2395, 0, 0, 2396, 2397,
	2398, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	1617, 0, 626, 0, 0, 0, 0, 631, 465, 342,
	0, 330, 0, 194, 1618, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 2513, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 638, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 633, 634, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 85, 0, 0, 162, 163, 164,
	702, 711, 712, 713, 710, 709, 703, 705, 0, 209,
	0, 704, 213, 649, 651, 650, 660, 661, 662, 663,
	664, 665, 666, 647, 707, 714, 715, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 609, 623, 187,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	621, 793, 0, 0, 0, 686, 0, 622, 0, 0,
	630, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 632, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 685,
	0, 302, 531, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 655, 656, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 692, 684, 642, 696, 644,
	693, 694, 639, 640, 643, 695, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 687, 629, 628, 0, 635,
	636, 0, 645, 646, 648, 652, 653, 654, 657, 658,
	659, 667, 669, 670, 668, 671, 672, 673, 676, 677,
	678, 679, 674, 675, 680, 627, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 626, 0, 402, 0,
	0, 631, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 638,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	633, 634, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 85, 0,
	0, 162, 163, 164, 702, 711, 712, 713, 710, 709,
	703, 705, 0, 209, 0, 704, 213, 649, 651, 650,
	660, 661, 662, 663, 664, 665, 666, 647, 707, 714,
	715, 381, 247, 297, 254, 246, 494, 0, 484, 1583,
	1584, 1585, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 609, 623, 187, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 621, 0, 0, 0, 0, 686,
	0, 622, 0, 0, 630, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 632, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 685, 0, 302, 531, 0, 0, 683,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 655, 656, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 692,
	684, 642, 696, 644, 693, 694, 639, 640, 643, 695,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 687,
	629, 628, 0, 635, 636, 0, 645, 646, 648, 652,
	653, 654, 657, 658, 659, 667, 669, 670, 668, 671,
	672, 673, 676, 677, 678, 679, 674, 675, 680, 627,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 76, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	626, 0, 402, 0, 0, 631, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 638, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 633, 634, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 85, 0, 0, 162, 163, 164, 702, 711,
	712, 713, 710, 709, 703, 705, 0, 209, 0, 704,
	213, 649, 651, 650, 660, 661, 662, 663, 664, 665,
	666, 647, 707, 714, 715, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 609, 623, 187, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 686, 0, 622, 0, 0, 630, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 632, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 685, 0, 302,
	531, 0, 0, 683, 0, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	655, 656, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 692, 684, 642, 696, 644, 693, 694,
	639, 640, 643, 695, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 687, 629, 628, 0, 635, 636, 0,
	645, 646, 648, 652, 653, 654, 657, 658, 659, 667,
	669, 670, 668, 671, 672, 673, 676, 677, 678, 679,
	674, 675, 680, 627, 0, 190, 332, 84, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 310,
	521, 239, 0, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 626, 0, 402, 0, 0, 631,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 638, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 633, 634,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 85, 0, 1242, 162,
	163, 164, 702, 711, 712, 713, 710, 709, 703, 705,
	0, 209, 0, 704, 213, 649, 651, 650, 660, 661,
	662, 663, 664, 665, 666, 647, 707, 714, 715, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 609,
	623, 187, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 621, 0, 0, 0, 0, 686, 0, 622,
	0, 0, 630, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 632, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 685, 0, 302, 531, 0, 0, 683, 0, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 655, 656, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 692, 684, 642,
	696, 644, 693, 694, 639, 640, 643, 695, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 687, 629, 628,
	0, 635, 636, 0, 645, 646, 648, 652, 653, 654,
	657, 658, 659, 667, 669, 670, 668, 671, 672, 673,
	676, 677, 678, 679, 674, 675, 680, 627, 0, 190,
	332, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 326, 0, 0,
	0, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	0, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 626, 0,
	402, 0, 0, 631, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 638, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 633, 634, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	85, 0, 0, 162, 163, 164, 702, 711, 712, 713,
	710, 709, 703, 705, 0, 209, 0, 704, 213, 649,
	651, 650, 660, 661, 662, 663, 664, 665, 666, 647,
	707, 714, 715, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 609, 623, 187, 637, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 621, 793, 0, 0,
	0, 686, 0, 622, 0, 0, 630, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 632,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 685, 0, 302, 531, 0,
	0, 683, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 655, 656,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 692, 684, 642, 696, 644, 693, 694, 639, 640,
	643, 695, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 687, 629, 628, 0, 635, 636, 0, 645, 646,
	648, 652, 653, 654, 657, 658, 659, 667, 669, 670,
	668, 671, 672, 673, 676, 677, 678, 679, 674, 675,
	680, 627, 0, 190, 332, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 326, 0, 0, 0, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 626, 0, 402, 0, 0, 631, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 638, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 633, 634, 0, 0,
	0, 0, 0, 277, 1696, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 85, 0, 0, 162, 163, 164,
	702, 711, 712, 713, 710, 709, 703, 705, 0, 209,
	0, 704, 213, 649, 651, 650, 660, 661, 662, 663,
	664, 665, 666, 647, 707, 714, 715, 1697, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 609, 623, 187,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	621, 0, 0, 0, 0, 686, 0, 622, 0, 0,
	630, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 632, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 685,
	0, 302, 531, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 655, 656, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 692, 684, 642, 696, 644,
	693, 694, 639, 640, 643, 695, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 687, 629, 628, 0, 635,
	636, 0, 645, 646, 648, 652, 653, 654, 657, 658,
	659, 667, 669, 670, 668, 671, 672, 673, 676, 677,
	678, 679, 674, 675, 680, 627, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 626, 0, 402, 0,
	0, 631, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 638,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	633, 634, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 85, 0,
	0, 162, 163, 164, 702, 711, 712, 713, 710, 709,
	703, 705, 0, 209, 0, 704, 213, 649, 651, 650,
	660, 661, 662, 663, 664, 665, 666, 647, 707, 714,
	715, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 609, 623, 187, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 621, 0, 0, 0, 0, 686,
	0, 622, 0, 0, 630, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 632, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 685, 0, 302, 531, 0, 0, 683,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 655, 656, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 692,
	684, 642, 696, 644, 693, 694, 639, 640, 643, 695,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 687,
	629, 628, 0, 635, 636, 0, 645, 646, 648, 652,
	653, 654, 657, 658, 659, 667, 669, 670, 668, 671,
	672, 673, 676, 677, 678, 679, 674, 675, 680, 627,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	626, 0, 402, 0, 0, 631, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 638, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 633, 634, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 85, 0, 0, 162, 163, 164, 702, 711,
	712, 713, 710, 709, 703, 705, 0, 209, 0, 704,
	213, 649, 651, 650, 660, 661, 662, 663, 664, 665,
	666, 647, 707, 714, 715, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 623, 187, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 686, 0, 622, 0, 0, 630, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 632, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 685, 0, 302,
	531, 0, 0, 683, 0, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	655, 656, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 692, 684, 642, 696, 644, 693, 694,
	639, 640, 643, 695, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 687, 629, 628, 0, 635, 636, 0,
	645, 646, 648, 652, 653, 654, 657, 658, 659, 667,
	669, 670, 668, 671, 672, 673, 676, 677, 678, 679,
	674, 675, 680, 627, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 0,
	0, 0, 0, 905, 893, 0, 483, 310, 521, 239,
	856, 912, 859, 860, 885, 192, 874, 881, 853, 814,
	846, 820, 265, 821, 845, 866, 0, 843, 465, 342,
	0, 330, 847, 194, 0, 398, 282, 176, 818, 822,
	823, 832, 836, 838, 839, 844, 852, 855, 858, 861,
	863, 865, 868, 879, 887, 888, 894, 895, 896, 897,
	898, 900, 909, 910, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 869, 0, 872, 892, 864, 886,
	835, 877, 0, 277, 882, 908, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 2538, 0, 2539, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 880, 904, 851, 381, 247, 297,
	254, 246, 494, 0, 484, 825, 871, 903, 0, 0,
	0, 906, 329, 0, 884, 0, 817, 878, 0, 187,
	826, 911, 901, 848, 849, 0, 0, 0, 0, 0,
	0, 0, 867, 873, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 829,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 834, 175, 251,
	434, 816, 815, 170, 0, 0, 0, 232, 0, 454,
	899, 302, 531, 902, 0, 293, 889, 831, 0, 0,
	0, 828, 303, 169, 196, 833, 854, 369, 890, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 208, 0, 0, 260, 0, 0, 857,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	907, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	883, 435, 212, 514, 462, 841, 230, 837, 0, 840,
	875, 876, 842, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 827, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 914,
	0, 0, 536, 0, 0, 819, 0, 0, 0, 0,
	253, 850, 0, 286, 287, 326, 0, 0, 870, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 913,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 891, 278, 0, 0, 340, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 905, 893, 0, 483, 310,
	521, 239, 856, 912, 859, 860, 885, 192, 874, 881,
	853, 814, 846, 820, 265, 821, 845, 866, 0, 843,
	465, 342, 0, 330, 847, 194, 0, 398, 282, 176,
	818, 822, 823, 832, 836, 838, 839, 844, 852, 855,
	858, 861, 863, 865, 868, 879, 887, 888, 894, 895,
	896, 897, 898, 900, 909, 910, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 869, 0, 872, 892,
	864, 886, 835, 877, 0, 277, 882, 908, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 0, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 880, 904, 851, 381,
	247, 297, 254, 246, 494, 0, 484, 825, 871, 903,
	0, 0, 0, 906, 329, 0, 884, 0, 817, 878,
	0, 187, 826, 911, 901, 848, 849, 0, 0, 0,
	0, 0, 0, 0, 867, 873, 0, 862, 0, 0,
	0, 0, 0, 2203, 0, 0, 0, 0, 0, 0,
	0, 829, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 834,
	175, 251, 434, 816, 815, 170, 0, 0, 0, 232,
	0, 454, 899, 302, 531, 902, 0, 293, 889, 831,
	0, 0, 0, 828, 303, 169, 196, 833, 854, 369,
	890, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 208, 0, 0, 260, 0,
	0, 857, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 907, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 883, 435, 212, 514, 462, 841, 230, 837,
	0, 840, 875, 876, 842, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 827,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 914, 0, 0, 536, 0, 0, 819, 0, 0,
	0, 0, 253, 850, 0, 286, 287, 326, 0, 0,
	870, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 913, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 891, 278, 0, 0, 340, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 0, 0, 0, 0, 905, 893, 0,
	483, 310, 521, 239, 856, 912, 859, 860, 885, 192,
	874, 881, 853, 814, 846, 820, 265, 821, 845, 866,
	0, 843, 465, 342, 0, 330, 847, 194, 0, 398,
	282, 176, 818, 822, 823, 832, 836, 838, 839, 844,
	852, 855, 858, 861, 863, 865, 868, 879, 887, 888,
	894, 895, 896, 897, 898, 900, 909, 910, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 869, 0,
	872, 892, 864, 886, 835, 877, 0, 277, 882, 908,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 486, 0, 0, 275, 234,
	0, 0, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 880, 904,
	851, 381, 247, 297, 254, 246, 494, 0, 484, 825,
	871, 903, 0, 0, 0, 906, 329, 0, 884, 0,
	817, 878, 0, 187, 826, 911, 901, 848, 849, 0,
	0, 0, 0, 0, 0, 0, 867, 873, 0, 862,
	0, 0, 0, 0, 0, 2164, 0, 0, 0, 0,
	0, 0, 0, 829, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 834, 175, 251, 434, 816, 815, 170, 0, 0,
	0, 232, 0, 454, 899, 302, 531, 902, 0, 293,
	889, 831, 0, 0, 0, 828, 303, 169, 196, 833,
	854, 369, 890, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 208, 0, 0,
	260, 0, 0, 857, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 907, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 883, 435, 212, 514, 462, 841,
	230, 837, 0, 840, 875, 876, 842, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 827, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 914, 0, 0, 536, 0, 0, 819,
	0, 0, 0, 0, 253, 850, 0, 286, 287, 326,
	0, 0, 870, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 913, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 891, 278, 0, 0,
	340, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 905,
	893, 0, 483, 310, 521, 239, 856, 912, 859, 860,
	885, 192, 874, 881, 853, 814, 846, 820, 265, 821,
	845, 866, 0, 843, 465, 342, 0, 330, 847, 194,
	0, 398, 282, 176, 818, 822, 823, 832, 836, 838,
	839, 844, 852, 855, 858, 861, 863, 865, 868, 879,
	887, 888, 894, 895, 896, 897, 898, 900, 909, 910,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	869, 0, 872, 892, 864, 886, 835, 877, 0, 277,
	882, 908, 0, 222, 0, 0, 370, 0, 263, 0,
	0, 0, 0, 162, 163, 164, 0, 486, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	880, 904, 851, 381, 247, 297, 254, 246, 494, 0,
	484, 825, 871, 903, 0, 0, 583, 906, 329, 0,
	884, 0, 817, 878, 0, 187, 826, 911, 901, 848,
	849, 0, 0, 0, 0, 0, 0, 0, 867, 873,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 829, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 834, 175, 251, 434, 816, 815, 170,
	0, 0, 0, 232, 0, 454, 899, 302, 531, 902,
	0, 293, 889, 831, 0, 0, 0, 828, 303, 169,
	196, 833, 854, 369, 890, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 915, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 830, 208,
	0, 0, 260, 0, 0, 857, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 907, 0, 0, 813,
	807, 806, 316, 337, 423, 539, 883, 435, 212, 514,
	462, 841, 230, 837, 0, 840, 875, 876, 842, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 827, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 914, 0, 0, 536, 0,
	0, 819, 0, 0, 0, 0, 253, 850, 0, 286,
	287, 326, 0, 0, 870, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 913, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 891, 278,
	0, 0, 340, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 905, 893, 0, 483, 310, 521, 239, 856, 912,
	859, 860, 885, 192, 874, 881, 853, 814, 846, 820,
	265, 821, 845, 866, 0, 843, 465, 342, 0, 330,
	847, 194, 0, 398, 282, 176, 818, 822, 823, 832,
	836, 838, 839, 844, 852, 855, 858, 861, 863, 865,
	868, 879, 887, 888, 894, 895, 896, 897, 898, 900,
	909, 910, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 869, 0, 872, 892, 864, 886, 835, 877,
	0, 277, 882, 908, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 163, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 880, 904, 851, 381, 247, 297, 254, 246,
	494, 0, 484, 825, 871, 903, 0, 0, 0, 906,
	329, 0, 884, 0, 817, 878, 0, 187, 826, 911,
	901, 848, 849, 0, 0, 0, 0, 0, 0, 0,
	867, 873, 0, 862, 0, 0, 0, 0, 0, 1666,
	0, 0, 0, 0, 0, 0, 0, 829, 824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 834, 175, 251, 434, 816,
	815, 170, 0, 0, 0, 232, 0, 454, 899, 302,
	531, 902, 0, 293, 889, 831, 0, 0, 0, 828,
	303, 169, 196, 833, 854, 369, 890, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	830, 208, 0, 0, 260, 0, 0, 857, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 907, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 883, 435,
	212, 514, 462, 841, 230, 837, 0, 840, 875, 876,
	842, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 827, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 914, 0, 0,
	536, 0, 0, 819, 0, 0, 0, 0, 253, 850,
	0, 286, 287, 326, 0, 0, 870, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 913, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	891, 278, 0, 0, 340, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 0,
	0, 0, 0, 905, 893, 0, 483, 310, 521, 239,
	856, 912, 859, 860, 885, 192, 874, 881, 853, 814,
	846, 820, 265, 821, 845, 866, 0, 843, 465, 342,
	0, 330, 847, 194, 0, 398, 282, 176, 818, 822,
	823, 832, 836, 838, 839, 844, 852, 855, 858, 861,
	863, 865, 868, 879, 887, 888, 894, 895, 896, 897,
	898, 900, 909, 910, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 869, 0, 872, 892, 864, 886,
	835, 877, 0, 277, 882, 908, 0, 222, 0, 0,
	370, 0, 263, 0, 85, 0, 0, 162, 163, 164,
	0, 486, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 880, 904, 851, 381, 247, 297,
	254, 246, 494, 0, 484, 825, 871, 903, 0, 0,
	0, 906, 329, 0, 884, 0, 817, 878, 0, 187,
	826, 911, 901, 848, 849, 0, 0, 0, 0, 0,
	0, 0, 867, 873, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 829,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 834, 175, 251,
	434, 816, 815, 170, 0, 0, 0, 232, 0, 454,
	899, 302, 531, 902, 0, 293, 889, 831, 0, 0,
	0, 828, 303, 169, 196, 833, 854, 369, 890, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 208, 0, 0, 260, 0, 0, 857,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	907, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	883, 435, 212, 514, 462, 841, 230, 837, 0, 840,
	875, 876, 842, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 827, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 914,
	0, 0, 536, 0, 0, 819, 0, 0, 0, 0,
	253, 850, 0, 286, 287, 326, 0, 0, 870, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 913,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 891, 278, 0, 0, 340, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 905, 893, 0, 483, 310,
	521, 239, 856, 912, 859, 860, 885, 192, 874, 881,
	853, 814, 846, 820, 265, 821, 845, 866, 0, 843,
	465, 342, 0, 330, 847, 194, 0, 398, 282, 176,
	818, 822, 823, 832, 836, 838, 839, 844, 852, 855,
	858, 861, 863, 865, 868, 879, 887, 888, 894, 895,
	896, 897, 898, 900, 909, 910, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 869, 0, 872, 892,
	864, 886, 835, 877, 0, 277, 882, 908, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 0, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 880, 904, 851, 381,
	247, 297, 254, 246, 494, 0, 484, 825, 871, 903,
	0, 0, 583, 906, 329, 0, 884, 0, 817, 878,
	0, 187, 826, 911, 901, 848, 849, 0, 0, 0,
	0, 0, 0, 0, 867, 873, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 834,
	175, 251, 434, 816, 815, 170, 0, 0, 0, 232,
	0, 454, 899, 302, 531, 902, 0, 293, 889, 831,
	0, 0, 0, 828, 303, 169, 196, 833, 854, 369,
	890, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 1271, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 915, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 208, 0, 0, 260, 0,
	0, 857, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 907, 0, 0, 813, 807, 806, 316, 337,
	423, 539, 883, 435, 212, 514, 462, 841, 230, 837,
	0, 840, 875, 876, 842, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 827,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 914, 0, 0, 536, 0, 0, 819, 0, 0,
	0, 0, 253, 850, 0, 286, 287, 326, 0, 0,
	870, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 913, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 891, 278, 0, 0, 340, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 0, 0, 0, 0, 905, 893, 0,
	483, 310, 521, 239, 856, 912, 859, 860, 885, 192,
	874, 881, 853, 814, 846, 820, 265, 821, 845, 866,
	0, 843, 465, 342, 0, 330, 847, 194, 0, 398,
	282, 176, 818, 822, 823, 832, 836, 838, 839, 844,
	852, 855, 858, 861, 863, 865, 868, 879, 887, 888,
	894, 895, 896, 897, 898, 900, 909, 910, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 869, 0,
	872, 892, 864, 886, 835, 877, 0, 277, 882, 908,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 486, 0, 0, 275, 234,
	0, 0, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 880, 904,
	851, 381, 247, 297, 254, 246, 494, 0, 484, 825,
	871, 903, 0, 0, 583, 906, 329, 0, 884, 0,
	817, 878, 0, 187, 826, 911, 901, 848, 849, 0,
	0, 0, 0, 0, 0, 0, 867, 873, 0, 862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 829, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 834, 175, 251, 434, 816, 815, 170, 0, 0,
	0, 232, 0, 454, 899, 302, 531, 902, 0, 293,
	889, 831, 0, 0, 0, 828, 303, 169, 196, 833,
	854, 369, 890, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 804, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 915, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 208, 0, 0,
	260, 0, 0, 857, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 907, 0, 0, 813, 807, 806,
	316, 337, 423, 539, 883, 435, 212, 514, 462, 841,
	230, 837, 0, 840, 875, 876, 842, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 827, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 914, 0, 0, 536, 0, 0, 819,
	0, 0, 0, 0, 253, 850, 0, 286, 287, 326,
	0, 0, 870, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 913, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 891, 278, 0, 0,
	340, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 905,
	893, 0, 483, 310, 521, 239, 856, 912, 859, 860,
	885, 192, 874, 881, 853, 814, 846, 820, 265, 821,
	845, 866, 0, 843, 465, 342, 0, 330, 847, 194,
	0, 398, 282, 176, 818, 822, 823, 832, 836, 838,
	839, 844, 852, 855, 858, 861, 863, 865, 868, 879,
	887, 888, 894, 895, 896, 897, 898, 900, 909, 910,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	869, 0, 872, 892, 864, 886, 835, 877, 0, 277,
	882, 908, 0, 222, 0, 0, 370, 0, 263, 0,
	0, 0, 0, 162, 163, 164, 0, 486, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	880, 904, 851, 381, 247, 297, 254, 246, 494, 0,
	484, 825, 871, 903, 0, 0, 0, 906, 329, 0,
	884, 0, 817, 878, 0, 187, 826, 911, 901, 848,
	849, 0, 0, 0, 0, 0, 0, 0, 867, 873,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 829, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 834, 175, 251, 434, 816, 815, 170,
	0, 0, 0, 232, 0, 454, 899, 302, 531, 902,
	0, 293, 889, 831, 0, 0, 0, 828, 303, 169,
	196, 833, 854, 369, 890, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 830, 208,
	0, 0, 260, 0, 0, 857, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 907, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 883, 435, 212, 514,
	462, 841, 230, 837, 0, 840, 875, 876, 842, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 827, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 914, 0, 0, 536, 0,
	0, 819, 0, 0, 0, 0, 253, 850, 0, 286,
	287, 326, 0, 0, 870, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 913, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 891, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 626, 0, 402, 0, 0, 631, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 638, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 163, 164,
	702, 711, 712, 713, 710, 709, 703, 705, 0, 209,
	0, 704, 213, 649, 651, 650, 660, 661, 662, 663,
	664, 665, 666, 647, 707, 714, 715, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 623, 0,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	630, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 632, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 685,
	0, 302, 531, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 655, 656, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 692, 684, 642, 696, 644,
	693, 694, 639, 640, 643, 695, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 687, 629, 628, 0, 635,
	636, 0, 645, 646, 648, 652, 653, 654, 657, 658,
	659, 667, 669, 670, 668, 671, 672, 673, 676, 677,
	678, 679, 674, 675, 680, 627, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 711, 712, 0, 275, 234,
	0, 1528, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 0, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 163, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	1709, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 1708,
	531, 0, 0, 293, 0, 0, 959, 960, 0, 923,
	303, 169, 196, 953, 957, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 76, 0, 258, 310,
	521, 239, 0, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 265, 0, 402, 0, 0, 0,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 85, 0, 0, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 0, 0, 0, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 454, 0, 302, 531, 0, 0, 293, 0, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 84, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 1684, 0, 0,
	1683, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	76, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 265, 0,
	402, 0, 0, 0, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	85, 0, 1242, 162, 163, 164, 0, 486, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	0, 0, 0, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 454, 0, 302, 531, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 84, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 326, 0, 0, 0, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	1097, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 1259, 265, 0, 402, 0, 0, 0, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 1261, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 0, 0, 0, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 1095, 0, 1096, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 454,
	0, 302, 531, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 0, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 1205, 1208, 0, 0, 275, 234,
	1204, 1207, 0, 209, 0, 1203, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 0, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 163, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 302,
	531, 0, 0, 293, 0, 0, 0, 0, 0, 923,
	303, 169, 196, 921, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 310,
	521, 239, 0, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 265, 0, 402, 0, 0, 0,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 1242, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 0, 0, 0, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 454, 0, 302, 531, 0, 0, 293, 2491, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 326, 0, 0,
	0, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	0, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 265, 0,
	402, 0, 0, 0, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	85, 0, 0, 162, 163, 164, 0, 486, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	0, 0, 0, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 454, 0, 302, 531, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 1684, 0, 0, 1683, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 265, 0, 402, 0, 0, 0, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 486, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 0, 0, 0, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 175, 251,
	434, 601, 600, 170, 0, 0, 0, 232, 0, 454,
	0, 302, 531, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 0, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 599, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 1637, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 1639, 0, 0, 275, 234,
	0, 0, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 0, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 163, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 302,
	531, 0, 0, 293, 2546, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 310,
	521, 239, 0, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 265, 0, 402, 0, 0, 0,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 0, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 0, 0, 0, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 454, 0, 302, 531, 0, 0, 293, 2491, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 326, 0, 0,
	0, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	0, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 265, 0,
	402, 0, 0, 0, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	0, 0, 0, 162, 163, 164, 0, 1524, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	0, 0, 0, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 454, 0, 302, 531, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 326, 0, 0, 0, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 265, 0, 402, 0, 0, 0, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 2007, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 0, 0, 0, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 454,
	0, 302, 531, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 0, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 486, 0, 0, 275, 234,
	0, 1935, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 0, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 85, 0, 0, 162, 163, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 302,
	531, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 310,
	521, 239, 1685, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 265, 0, 402, 0, 0, 0,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 0, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 0, 0, 0, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 454, 0, 302, 531, 0, 0, 293, 0, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 326, 0, 0,
	0, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	0, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 265, 0,
	402, 0, 0, 0, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	0, 0, 0, 162, 163, 164, 0, 486, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	0, 0, 0, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 454, 0, 302, 531, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 326, 0, 0, 0, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 265, 0, 402, 0, 0, 0, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 486, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 0, 0, 0, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 454,
	0, 302, 531, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 0, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 1480,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 1359, 0,
	0, 162, 163, 164, 0, 486, 0, 0, 275, 234,
	0, 0, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 1282, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 163, 164, 0, 1281,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 302,
	531, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 310,
	521, 239, 0, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 265, 0, 402, 1266, 0, 0,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 0, 162,
	163, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 0, 0, 0, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 454, 0, 302, 531, 0, 0, 293, 0, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 326, 0, 0,
	0, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	0, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 265, 0,
	402, 0, 0, 0, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	0, 0, 0, 162, 163, 164, 0, 486, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	0, 0, 0, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 454, 557, 302, 531, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 326, 0, 0, 0, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 265, 0, 402, 0, 0, 0, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 486, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 0, 0, 0, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 454,
	0, 302, 531, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 0, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 2551, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 486, 0, 0, 275, 234,
	0, 0, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 0, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 2334, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 302,
	531, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 427, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 310,
	521, 239, 0, 0, 0, 0, 0, 192, 217, 0,
	0, 0, 0, 0, 265, 0, 402, 0, 0, 0,
	465, 342, 0, 330, 0, 194, 483, 398, 282, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 168,
	173, 174, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 191, 193, 195, 198, 199, 202, 203, 204, 205,
	206, 210, 214, 215, 216, 218, 219, 220, 221, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 224,
	225, 226, 227, 228, 229, 233, 235, 236, 237, 240,
	241, 242, 243, 244, 245, 248, 249, 252, 255, 256,
	262, 267, 268, 269, 271, 272, 273, 279, 281, 284,
	285, 288, 290, 292, 294, 295, 296, 298, 299, 300,
	301, 304, 305, 306, 307, 308, 309, 311, 319, 320,
	322, 323, 324, 325, 328, 331, 333, 335, 336, 338,
	339, 341, 344, 345, 347, 348, 351, 352, 354, 357,
	360, 363, 365, 366, 367, 368, 371, 372, 373, 374,
	376, 379, 382, 384, 385, 387, 390, 392, 393, 394,
	395, 396, 397, 401, 404, 405, 406, 407, 409, 411,
	412, 413, 415, 417, 418, 419, 420, 421, 422, 425,
	426, 428, 429, 430, 431, 432, 437, 438, 441, 442,
	443, 446, 447, 448, 449, 450, 451, 453, 456, 457,
	461, 463, 466, 467, 473, 474, 476, 477, 479, 480,
	481, 482, 485, 487, 488, 490, 491, 495, 496, 497,
	504, 505, 509, 510, 511, 512, 515, 516, 517, 518,
	519, 520, 522, 523, 524, 525, 529, 530, 532, 533,
	534, 535, 538, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 553, 554, 527, 0, 364,
	526, 468, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 222,
	0, 0, 370, 0, 263, 0, 0, 0, 0, 162,
	1931, 164, 0, 486, 0, 0, 275, 234, 0, 0,
	0, 209, 0, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 270, 0, 0, 0, 381,
	247, 297, 254, 246, 494, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	175, 251, 434, 0, 0, 170, 0, 0, 0, 232,
	0, 454, 0, 302, 531, 0, 0, 293, 0, 0,
	0, 0, 0, 0, 303, 169, 196, 0, 0, 369,
	0, 440, 469, 0, 266, 0, 259, 0, 0, 508,
	207, 0, 0, 0, 0, 410, 264, 349, 400, 0,
	0, 0, 416, 506, 0, 0, 0, 358, 0, 0,
	0, 0, 197, 238, 386, 475, 0, 460, 350, 498,
	0, 315, 459, 274, 172, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 478, 503, 211, 445, 452,
	433, 537, 189, 0, 472, 0, 312, 313, 188, 0,
	424, 250, 0, 0, 378, 501, 502, 0, 552, 200,
	528, 0, 201, 0, 361, 499, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 260, 0,
	0, 0, 280, 0, 0, 0, 0, 414, 0, 455,
	493, 0, 0, 0, 0, 359, 283, 464, 316, 337,
	423, 539, 0, 435, 212, 514, 462, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 458, 0, 0, 0, 436, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 507,
	318, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 190,
	332, 0, 0, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 286, 287, 326, 0, 0,
	0, 0, 0, 0, 380, 391, 0, 0, 427, 0,
	492, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 276, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 362, 0, 375, 377, 0,
	383, 0, 388, 0, 389, 399, 403, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	444, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	500, 513, 0, 0, 0, 278, 0, 0, 340, 0,
	0, 0, 258, 310, 521, 239, 0, 0, 0, 0,
	0, 192, 217, 0, 0, 0, 0, 0, 265, 0,
	402, 0, 0, 0, 465, 342, 0, 330, 0, 194,
	483, 398, 282, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 166, 167, 168, 173, 174, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 191, 193, 195, 198, 199,
	202, 203, 204, 205, 206, 210, 214, 215, 216, 218,
	219, 220, 221, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 224, 225, 226, 227, 228, 229, 233,
	235, 236, 237, 240, 241, 242, 243, 244, 245, 248,
	249, 252, 255, 256, 262, 267, 268, 269, 271, 272,
	273, 279, 281, 284, 285, 288, 290, 292, 294, 295,
	296, 298, 299, 300, 301, 304, 305, 306, 307, 308,
	309, 311, 319, 320, 322, 323, 324, 325, 328, 331,
	333, 335, 336, 338, 339, 341, 344, 345, 347, 348,
	351, 352, 354, 357, 360, 363, 365, 366, 367, 368,
	371, 372, 373, 374, 376, 379, 382, 384, 385, 387,
	390, 392, 393, 394, 395, 396, 397, 401, 404, 405,
	406, 407, 409, 411, 412, 413, 415, 417, 418, 419,
	420, 421, 422, 425, 426, 428, 429, 430, 431, 432,
	437, 438, 441, 442, 443, 446, 447, 448, 449, 450,
	451, 453, 456, 457, 461, 463, 466, 467, 473, 474,
	476, 477, 479, 480, 481, 482, 485, 487, 488, 490,
	491, 495, 496, 497, 504, 505, 509, 510, 511, 512,
	515, 516, 517, 518, 519, 520, 522, 523, 524, 525,
	529, 530, 532, 533, 534, 535, 538, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 553,
	554, 527, 0, 364, 526, 468, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 222, 0, 0, 370, 0, 263, 0,
	0, 0, 0, 162, 163, 164, 0, 1639, 0, 0,
	275, 234, 0, 0, 0, 209, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 270,
	0, 0, 0, 381, 247, 297, 254, 246, 494, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 175, 251, 434, 0, 0, 170,
	0, 0, 0, 232, 0, 454, 0, 302, 531, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 303, 169,
	196, 0, 0, 369, 0, 440, 469, 0, 266, 0,
	259, 0, 0, 508, 207, 0, 0, 0, 0, 410,
	264, 349, 400, 0, 0, 0, 416, 506, 0, 0,
	0, 358, 0, 0, 0, 0, 197, 238, 386, 475,
	0, 460, 350, 498, 0, 315, 459, 274, 172, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 478,
	503, 211, 445, 452, 433, 537, 189, 0, 472, 0,
	312, 313, 188, 0, 424, 250, 0, 0, 378, 501,
	502, 0, 552, 200, 528, 0, 201, 0, 361, 499,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 260, 0, 0, 0, 280, 0, 0, 0,
	0, 414, 0, 455, 493, 0, 0, 0, 0, 359,
	283, 464, 316, 337, 423, 539, 0, 435, 212, 514,
	462, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 353, 0, 0, 356, 0, 458, 0, 0,
	0, 436, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 507, 318, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 190, 332, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 286,
	287, 326, 0, 0, 0, 0, 0, 0, 380, 391,
	0, 0, 427, 0, 492, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 276, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 362,
	0, 375, 377, 0, 383, 0, 388, 0, 389, 399,
	403, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 444, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 500, 513, 0, 0, 0, 278,
	0, 0, 340, 0, 0, 0, 258, 310, 521, 239,
	0, 0, 0, 0, 0, 192, 217, 0, 0, 0,
	0, 0, 265, 0, 402, 0, 0, 0, 465, 342,
	0, 330, 0, 194, 483, 398, 282, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 168, 173, 174,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 191,
	193, 195, 198, 199, 202, 203, 204, 205, 206, 210,
	214, 215, 216, 218, 219, 220, 221, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 224, 225, 226,
	227, 228, 229, 233, 235, 236, 237, 240, 241, 242,
	243, 244, 245, 248, 249, 252, 255, 256, 262, 267,
	268, 269, 271, 272, 273, 279, 281, 284, 285, 288,
	290, 292, 294, 295, 296, 298, 299, 300, 301, 304,
	305, 306, 307, 308, 309, 311, 319, 320, 322, 323,
	324, 325, 328, 331, 333, 335, 336, 338, 339, 341,
	344, 345, 347, 348, 351, 352, 354, 357, 360, 363,
	365, 366, 367, 368, 371, 372, 373, 374, 376, 379,
	382, 384, 385, 387, 390, 392, 393, 394, 395, 396,
	397, 401, 404, 405, 406, 407, 409, 411, 412, 413,
	415, 417, 418, 419, 420, 421, 422, 425, 426, 428,
	429, 430, 431, 432, 437, 438, 441, 442, 443, 446,
	447, 448, 449, 450, 451, 453, 456, 457, 461, 463,
	466, 467, 473, 474, 476, 477, 479, 480, 481, 482,
	485, 487, 488, 490, 491, 495, 496, 497, 504, 505,
	509, 510, 511, 512, 515, 516, 517, 518, 519, 520,
	522, 523, 524, 525, 529, 530, 532, 533, 534, 535,
	538, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 553, 554, 527, 0, 364, 526, 468,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 222, 0, 0,
	370, 0, 263, 0, 0, 0, 0, 162, 163, 164,
	0, 1261, 0, 0, 275, 234, 0, 0, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 270, 0, 0, 0, 381, 247, 297,
	254, 246, 494, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 175, 251,
	434, 0, 0, 170, 0, 0, 0, 232, 0, 454,
	0, 302, 531, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 303, 169, 196, 0, 0, 369, 0, 440,
	469, 0, 266, 0, 259, 0, 0, 508, 207, 0,
	0, 0, 0, 410, 264, 349, 400, 0, 0, 0,
	416, 506, 0, 0, 0, 358, 0, 0, 0, 0,
	197, 238, 386, 475, 0, 460, 350, 498, 0, 315,
	459, 274, 172, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 478, 503, 211, 445, 452, 433, 537,
	189, 0, 472, 0, 312, 313, 188, 0, 424, 250,
	0, 0, 378, 501, 502, 0, 552, 200, 528, 0,
	201, 0, 361, 499, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 260, 0, 0, 0,
	280, 0, 0, 0, 0, 414, 0, 455, 493, 0,
	0, 0, 0, 359, 283, 464, 316, 337, 423, 539,
	0, 435, 212, 514, 462, 0, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 353, 0, 0, 356,
	0, 458, 0, 0, 0, 436, 0, 0, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 507, 318, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 190, 332, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 286, 287, 326, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 0, 427, 0, 492, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 276, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 362, 0, 375, 377, 0, 383, 0,
	388, 0, 389, 399, 403, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 444, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 500, 513,
	0, 0, 0, 278, 0, 0, 340, 0, 0, 0,
	258, 310, 521, 239, 0, 0, 0, 0, 0, 192,
	217, 0, 0, 0, 0, 0, 265, 0, 402, 0,
	0, 0, 465, 342, 0, 330, 0, 194, 483, 398,
	282, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 168, 173, 174, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 191, 193, 195, 198, 199, 202, 203,
	204, 205, 206, 210, 214, 215, 216, 218, 219, 220,
	221, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 224, 225, 226, 227, 228, 229, 233, 235, 236,
	237, 240, 241, 242, 243, 244, 245, 248, 249, 252,
	255, 256, 262, 267, 268, 269, 271, 272, 273, 279,
	281, 284, 285, 288, 290, 292, 294, 295, 296, 298,
	299, 300, 301, 304, 305, 306, 307, 308, 309, 311,
	319, 320, 322, 323, 324, 325, 328, 331, 333, 335,
	336, 338, 339, 341, 344, 345, 347, 348, 351, 352,
	354, 357, 360, 363, 365, 366, 367, 368, 371, 372,
	373, 374, 376, 379, 382, 384, 385, 387, 390, 392,
	393, 394, 395, 396, 397, 401, 404, 405, 406, 407,
	409, 411, 412, 413, 415, 417, 418, 419, 420, 421,
	422, 425, 426, 428, 429, 430, 431, 432, 437, 438,
	441, 442, 443, 446, 447, 448, 449, 450, 451, 453,
	456, 457, 461, 463, 466, 467, 473, 474, 476, 477,
	479, 480, 481, 482, 485, 487, 488, 490, 491, 495,
	496, 497, 504, 505, 509, 510, 511, 512, 515, 516,
	517, 518, 519, 520, 522, 523, 524, 525, 529, 530,
	532, 533, 534, 535, 538, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 527,
	0, 364, 526, 468, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 222, 0, 0, 370, 0, 263, 0, 0, 0,
	0, 162, 163, 164, 0, 1073, 0, 0, 275, 234,
	0, 0, 0, 209, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 270, 0, 0,
	0, 381, 247, 297, 254, 246, 494, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 175, 251, 434, 0, 0, 170, 0, 0,
	0, 232, 0, 454, 0, 302, 531, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 303, 169, 196, 0,
	0, 369, 0, 440, 469, 0, 266, 0, 259, 0,
	0, 508, 207, 0, 0, 0, 0, 410, 264, 349,
	400, 0, 0, 0, 416, 506, 0, 0, 0, 358,
	0, 0, 0, 0, 197, 238, 386, 475, 0, 460,
	350, 498, 0, 315, 459, 274, 172, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 478, 503, 211,
	445, 452, 433, 537, 189, 0, 472, 0, 312, 313,
	188, 0, 424, 250, 0, 0, 378, 501, 502, 0,
	552, 200, 528, 0, 201, 0, 361, 499, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	260, 0, 0, 0, 280, 0, 0, 0, 0, 414,
	0, 455, 493, 0, 0, 0, 0, 359, 283, 464,
	316, 337, 423, 539, 0, 435, 212, 514, 462, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	353, 0, 0, 356, 0, 458, 0, 0, 0, 436,
	0, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 507, 318, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 190, 332, 0, 0, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 286, 287, 326,
	0, 0, 0, 0, 0, 0, 380, 391, 0, 0,
	427, 0, 492, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 276, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 362, 0, 375,
	377, 0, 383, 0, 388, 0, 389, 399, 403, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 444, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 500, 513, 0, 0, 0, 278, 0, 0,
	340, 0, 0, 0, 258, 310, 521, 239, 0, 0,
	0, 0, 0, 192, 217, 0, 0, 0, 0, 0,
	265, 0, 402, 0, 0, 0, 465, 342, 0, 330,
	0, 194, 483, 398, 282, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 173, 174, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 191, 193, 195,
	198, 199, 202, 203, 204, 205, 206, 210, 214, 215,
	216, 218, 219, 220, 221, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 224, 225, 226, 227, 228,
	229, 233, 235, 236, 237, 240, 241, 242, 243, 244,
	245, 248, 249, 252, 255, 256, 262, 267, 268, 269,
	271, 272, 273, 279, 281, 284, 285, 288, 290, 292,
	294, 295, 296, 298, 299, 300, 301, 304, 305, 306,
	307, 308, 309, 311, 319, 320, 322, 323, 324, 325,
	328, 331, 333, 335, 336, 338, 339, 341, 344, 345,
	347, 348, 351, 352, 354, 357, 360, 363, 365, 366,
	367, 368, 371, 372, 373, 374, 376, 379, 382, 384,
	385, 387, 390, 392, 393, 394, 395, 396, 397, 401,
	404, 405, 406, 407, 409, 411, 412, 413, 415, 417,
	418, 419, 420, 421, 422, 425, 426, 428, 429, 430,
	431, 432, 437, 438, 441, 442, 443, 446, 447, 448,
	449, 450, 451, 453, 456, 457, 461, 463, 466, 467,
	473, 474, 476, 477, 479, 480, 481, 482, 485, 487,
	488, 490, 491, 495, 496, 497, 504, 505, 509, 510,
	511, 512, 515, 516, 517, 518, 519, 520, 522, 523,
	524, 525, 529, 530, 532, 533, 534, 535, 538, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 553, 554, 527, 0, 364, 526, 468, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 222, 0, 0, 370, 0,
	263, 0, 0, 0, 0, 162, 163, 164, 0, 486,
	0, 0, 275, 234, 0, 0, 0, 209, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 270, 0, 0, 0, 381, 247, 297, 254, 246,
	494, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 175, 251, 434, 0,
	0, 170, 0, 0, 0, 232, 0, 454, 0, 302,
	531, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	303, 169, 196, 0, 0, 369, 0, 440, 469, 0,
	266, 0, 259, 0, 0, 508, 207, 0, 0, 0,
	0, 410, 264, 349, 400, 0, 0, 0, 416, 506,
	0, 0, 0, 358, 0, 0, 0, 0, 197, 238,
	386, 475, 0, 460, 350, 498, 0, 315, 459, 274,
	172, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 478, 503, 211, 445, 452, 433, 537, 189, 0,
	472, 0, 312, 313, 188, 0, 424, 250, 0, 0,
	378, 501, 502, 0, 552, 200, 528, 0, 201, 0,
	361, 499, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 260, 0, 0, 0, 280, 0,
	0, 0, 0, 414, 0, 455, 493, 0, 0, 0,
	0, 359, 283, 464, 316, 337, 423, 539, 0, 435,
	212, 514, 462, 0, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 353, 0, 0, 356, 0, 458,
	0, 0, 0, 436, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 507, 318, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 190, 332, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 286, 287, 326, 0, 0, 0, 0, 0, 0,
	380, 391, 0, 0, 778, 0, 492, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 276,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 362, 0, 375, 377, 0, 383, 0, 388, 0,
	389, 399, 403, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 444, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 500, 513, 0, 0,
	0, 278, 0, 0, 340, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483,
}

var psqPact = [...]int{
	4346, -1000, -683, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1600, 1612, -1000, -1000, -1000,
	-1000, 1721, -1000, 282, 931, -1000, 1429, 178, -1000, 41250,
	44, -1000, 39662, 42, -170, 41250, -1000, -155, -1000, -171,
	41250, -159, 28546, -1000, -1000, -611, 11620, 1291, -268, -274,
	41250, -1000, -1000, -1000, 1660, 1178, -1000, 245, -1000, -1000,
	-1000, -1000, -1000, -1000, 46014, -1000, -1000, -1000, -1000, -1000,
	1688, 164, 41250, -1000, 1558, 1178, -1000, 11620, 1605, 1546,
	10032, -1000, 10032, 3, -1000, -1000, 18990, -1000, -1000, 26164,
	41250, 34104, -63, -1000, 1429, -1000, -1000, -1000, -214, -1000,
	-1000, 826, 824, -1000, -1000, 292, 244, 1, -3, -3,
	28, 1410, 1403, 311, 302, 186, -1000, 640, 185, 185,
	-462, -466, -1000, 20, 185, 185, 185, -94, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 29, 1429, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 41250, -156, 41250, -1000, 78,
	41250, 593, 593, -251, 593, 593, 593, -142, 402, -275,
	-1000, -151, -100, -163, -103, 541, -149, -1000, -162, -1000,
	17346, -154, 17346, -1000, 1421, -1000, -1000, -1000, -1000, 457,
	-1000, 22, -1000, -1000, -1000, -1000, 41250, 45220, 268, 222,
	-1000, -1000, -1000, -1000, -239, -1000, -1000, 607, 813, 11620,
	511, -1000, 433, 132, -1000, -1000, -1000, -1000, -1000, 66,
	12414, 12414, 12414, 12414, -1000, -1000, 855, 855, 855, 855,
	12414, 855, 20606, 855, 855, 855, 855, 11620, 855, 855,
	855, -1000, 855, 855, 855, 855, 855, 855, 855, 855,
	855, 855, 855, 855, 855, 855, 855, 855, 855, 855,
	855, 855, 855, 855, 855, 855, 855, 855, 855, 855,
	855, 855, 855, 855, 855, 855, 855, 855, 855, 855,
	855, 855, 77, 855, 855, 855, 855, 855, -1000, -1000,
	-1000, -1000, 855, 855, 855, 855, 855, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 25370, -1000, 8444, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41250,
	-1000, 855, 41250, 41250, -80, 1558, 1178, -1000, 1660, 1708,
	245, -1000, 1762, 1295, 895, 471, 1178, 779, 41250, -1000,
	861, -1000, 1073, -1000, -1000, -1000, -1000, -1000, 1072, 11620,
	-1000, -1000, 1658, -1000, 24576, 76, 380, 1657, 38868, -1000,
	3, 3, 821, 18168, -287, -1000, -1000, -1000, 218, 38074,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1421, 795, 41250, -1000, -1000,
	1017, 521, -1000, 930, -1000, 750, -1000, 880, 11620, 920,
	38, 521, 35, 34, 21, -1000, -377, -1000, -1000, -1000,
	-1000, -1000, -1000, 185, 185, 185, 3522, 178, -1000, -1000,
	-1000, -1000, 37280, 521, -1000, 896, -1000, 288, 99, 131,
	131, 521, -1000, -1000, 41250, 521, 521, 41250, 41250, 27,
	-1000, -1000, -1000, -1000, 41250, 521, 287, 284, 521, 521,
	41250, 521, -1000, -1000, 1339, -1000, 1231, -1000, -1000, 185,
	185, 440, 439, 434, 185, 431, -95, 1437, 430, 133,
	1436, 1435, 41250, 893, 41250, -1000, -111, 211, 195, 1429,
	807, 17, 37, 521, 0, 0, 41250, -1000, 19812, -1000,
	-1000, 426, 11620, -1000, 599, 541, 541, -1000, -1000, -1000,
	-1000, -1000, 593, 41250, 599, -1000, -1000, -1000, 541, 593,
	41250, 593, 593, 593, 593, 541, 541, 541, 593, 41250,
	41250, 41250, 41250, 41250, 41250, 41250, 41250, 41250, 17346, -1000,
	1300, -1000, -1000, -1000, 17346, 17346, -1000, -1000, -1000, -160,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -392,
	790, 36486, -1000, -615, -617, -619, -1000, -1000, -1000, -620,
	-627, -1000, -1000, -1000, 11620, 11620, 11620, -487, -1000, 275,
	12414, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 393, 290,
	12414, 12414, 12414, 1376, 12414, 12414, 12414, 12414, 12414, 12414,
	12414, 12414, 12414, 12414, 12414, 12414, 31722, 5236, 5236, 132,
	132, 132, 132, -1000, 10032, 11620, 11620, 132, -1000, 521,
	35692, 10032, 10032, 11620, 1411, 233, 813, 41250, -1000, 471,
	-1000, -1000, -1000, 400, -1000, 41250, 41250, 206, 11620, 11620,
	11620, 11620, 11620, 11620, 7650, 11620, 11620, 11620, 11620, 11620,
	11620, 11620, 11620, 11620, 11620, 11620, 11620, 11620, 11620, 11620,
	11620, 11620, 11620, 11620, 11620, 11620, 11620, 11620, 11620, 11620,
	11620, 6856, 19812, 10032, 10032, 10032, 10032, 10032, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	75, 793, 892, 568, -1000, 783, -1000, -452, 29340, 11620,
	1651, 984, 41250, -1000, -1000, -1000, 1558, -1000, 1558, 793,
	1523, 1080, 10032, -1000, -1000, 1523, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 471, -1000, 41250, 779, 1517, 41250,
	1083, 11620, 11620, 745, -1000, 653, 41250, -1000, -1000, 44426,
	-1000, -1000, 16524, -1000, 41250, 318, 41250, -1000, 27752, 34898,
	15702, -287, -1000, 15702, 655, -1000, -285, -331, 10826, 125,
	-1000, -1000, -1000, 292, 22194, 582, 125, -230, -1000, -1000,
	-1000, 880, -1000, 880, 880, 880, 880, 2, 2, 2,
	2, -1000, -1000, -1000, -1000, -1000, 890, 888, -1000, 880,
	880, 880, 880, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -12, -1000, 11620, -101, 34104,
	1491, 387, 769, -111, 6, 981, 521, 521, 521, 6,
	-1000, 578, 561, 492, 1604, -1000, -1000, 740, -1000, 41250,
	-138, -1000, -13, -1000, 34104, 521, 278, 131, 521, -1000,
	521, -1000, -1000, 472, -157, -545, 41250, -138, 31722, -1000,
	-1000, -1000, 521, -1000, -1000, -1000, 11, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 31722, 31722, -1000, -1000, -1000,
	422, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -676, 41250, -1000,
	-122, 191, -90, -49, -65, 41250, -115, 41250, 41250, 0,
	1025, 41250, 1465, 41250, -1000, -1000, -1000, -1000, -1000, 813,
	41250, -1000, -1000, 593, 593, -1000, -1000, 41250, 593, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 593, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41250,
	-1000, -1000, -1000, -1000, 41250, -1000, -1000, -1000, -1000, -216,
	-290, 230, -1000, -1000, -1000, -1000, 1532, -1000, 813, 242,
	-1000, 855, -1000, -1000, 332, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 393, 12414, 12414, 12414, 1289, 19, 1122, 393,
	296, 874, 377, 377, 141, 141, 143, 143, 143, 143,
	143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	416, -1000, 693, -1000, 1184, 768, 471, -1000, 693, 693,
	983, 10032, -1000, -1000, 229, -1000, 11620, 471, -1000, -1000,
	471, 716, 714, 1650, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 813, 769, 769, 769, 769,
	769, 11620, 748, -1000, -1000, -1000, 1412, 1409, 471, 607,
	471, 711, -1000, 1395, 769, 1388, 1380, 1352, 822, 1351,
	1347, 1341, 769, 769, 769, 802, 1333, 1325, 1305, 1297,
	1262, 1236, 1188, 1180, 1133, 769, 471, 10032, 10032, 689,
	855, 74, -1000, 693, 471, 471, 693, 693, 19812, -1000,
	41250, -1000, -606, -1000, -337, 173, -1000, 43632, -1000, -1000,
	471, 5174, -1000, 42838, -1000, -1000, -1000, -1000, -1000, 33310,
	935, 1523, -1000, -1000, 855, 743, -1000, -1000, 813, 813,
	11620, -1000, -1000, -1000, -1000, -1000, -1000, 73, 1640, 1024,
	41250, 855, -1000, 23782, -1000, 988, 1434, -1000, -1000, -1000,
	1516, 22988, -1000, 855, 855, 41250, 999, 997, -1000, 72,
	-1000, 655, -287, -322, -1000, -1000, -1000, -1000, 813, -1000,
	461, -1000, 424, -1000, -50, -1000, -1000, -1000, -1000, -1000,
	-1000, 1390, -241, -1000, -1000, -1000, -105, 2, -1000, -1000,
	-1000, 32516, 123, 123, -209, -1000, -1000, -1000, 415, 415,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	883, 1240, -101, -1000, -1000, 411, -1000, -1000, 1394, 41250,
	-1000, -1000, 517, 1491, -122, 41250, 234, 1023, -1000, 981,
	981, 981, 41250, -1000, -1000, -1000, -1000, -1000, -1000, 41250,
	2705, 718, -1000, -141, -1000, -1000, 706, 887, 521, 521,
	-1000, -1000, 1427, 170, -1000, -1000, -514, -1000, -1000, -138,
	-141, 125, -1000, 521, -1000, -1000, -1000, -1000, -679, 698,
	32, -136, -34, 41250, 41250, 41250, 41250, 41250, 56, -1000,
	-1000, -1000, 10, -1000, 41250, 41250, 151, -1000, -1000, -1000,
	541, -1000, -1000, 541, -1000, -1000, -1000, -1000, -1000, 1418,
	41250, -321, -653, -1000, -643, 11620, -1000, -1000, -1000, -1000,
	827, 15, 1122, 12414, 12414, -1000, -1000, 10032, -426, 146,
	146, 31722, -1000, -1000, -1000, 11620, 11620, 865, 187, -1000,
	11620, 624, -1000, -1000, 11620, 11620, 11620, 471, -1000, -1000,
	-1000, -1000, -1000, 1649, -1000, 11620, 11620, 11620, -1000, -1000,
	11620, 11620, -1000, 11620, 11620, 21400, 471, 21400, 11620, 11620,
	21400, -1000, -1000, -1000, -1000, 21400, 11620, 11620, 11620, 11620,
	11620, 11620, 11620, 11620, 11620, -1000, -1000, 693, 693, 10032,
	19812, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 173, -1000, 131, 131, 131, -1000, -1000, -1000, -1000,
	-1000, -1000, 649, 1623, -1000, 1101, 1640, -1000, 27752, 1523,
	-1000, -1000, 41250, -1000, 14880, 1558, 11620, -1000, 1453, 766,
	-1000, 189, 626, -1000, -1000, 9238, 645, 1092, 70, 41250,
	27752, 27752, 27752, 27752, 27752, -1000, 1067, 1066, -1000, 1065,
	1051, 1112, 41250, -1000, 613, 471, 1708, 22988, 245, 11620,
	29340, 566, 27752, -1000, -1000, 27752, 41250, 14058, -1000, -1000,
	-326, -296, -1000, -1000, -1000, 292, -1000, -1000, 139, 1495,
	1386, -1000, -1000, -1000, -1000, -1000, 123, 123, -1000, -1000,
	-1000, -1000, -1000, -1000, 597, -1000, 590, -157, -1000, 897,
	1414, 185, 185, -1000, -1000, 521, -1000, -1000, -1000, 30,
	-1000, 1461, 41250, 1021, 1018, 1013, -1000, 635, 1602, 41250,
	-1000, -1000, 41250, -101, 41250, -1000, -1000, -1000, 3731, -1000,
	-1000, -1000, -141, -1000, -1000, -1000, -1000, -1000, -1000, 41250,
	-125, -1000, 886, 446, -1000, -1000, 953, -1000, -1000, -1000,
	-1000, -129, -93, 41250, 116, 1240, 41250, -1000, -1000, -1000,
	593, 593, -1000, -1000, 1413, -1000, 521, 769, 12414, 12414,
	-1000, 132, -1000, 855, 471, 880, 880, -1000, 880, -1000,
	-1000, 880, -182, 880, -191, 880, -1000, -1000, 471, 471,
	738, 755, -397, -1000, 813, 11620, 1130, 1077, 769, -1000,
	11620, 769, 769, 769, -1000, 813, 822, 927, 546, -1000,
	-1000, -1000, -1000, 641, 769, 919, -594, 471, 586, 586,
	586, 586, 586, 568, 568, 568, 568, -1000, -1000, 471,
	-1000, -1000, 1530, 1530, 1530, 42044, 41250, -1000, -1000, -1000,
	1635, 639, -1000, -1000, -1000, -1000, 813, 276, -1000, 41250,
	11620, 855, -1000, 258, 41250, 855, 41250, 957, 1434, 970,
	1012, 1225, -1000, -1000, -1000, -1000, 1042, -1000, 998, -1000,
	-1000, 861, -1000, -1000, 892, 471, 825, 1640, 27752, 915,
	915, -1000, 69, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	360, 4914, 1675, -1000, 410, -1000, 423, 127, 383, -1000,
	-1000, -1000, 253, 250, -1000, 41250, 873, -1000, -1000, -1000,
	2, 408, 2, -1000, -1000, -1000, -1000, 1224, 1326, -1000,
	41250, -1000, -1000, 41250, 41250, 41250, 41250, -1000, -1000, -1000,
	550, -1000, 11620, -1000, -1000, -1000, 399, 399, -1000, -1000,
	-1000, 861, -1000, -1000, -1000, 491, -1000, -1000, -433, 41250,
	41250, 41250, 41250, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 132, 12414, -1000, -1000, 2, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11620, -1000, 11620,
	-1000, 1558, 405, 813, 11620, 11620, -1000, 769, -1000, -1000,
	-1000, 471, 21400, -1000, 21400, -1000, 11620, 140, 146, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	855, 1328, 855, 855, -1000, -1000, 1632, 1598, 1672, -1000,
	813, -1000, 855, -1000, 63, 626, -1000, 1621, -1000, -1000,
	11620, 868, -1000, 11620, -1000, -1000, -1000, -1000, -1000, -1000,
	5236, 1621, 915, -1000, -1000, 149, -1000, 11620, -1000, -1000,
	-1000, 4294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 867, 11620, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 861, -1000, -1000, -1000, 635,
	-58, 769, -1000, -1000, 1490, -1000, -1000, 19812, -1000, -1000,
	857, 973, -1000, -71, -1000, 769, 769, 471, -1000, 769,
	769, -1000, -1000, 546, -1000, 708, -1000, 140, 471, 1009,
	-1000, -1000, 5236, -1000, 26958, -1000, 1584, 1574, 30928, 30928,
	-1000, 11620, 11620, 41250, 626, 41250, 1558, 813, 41250, 813,
	-245, 1558, -1000, 769, -1000, 855, 855, 855, 855, 855,
	41250, 712, 1474, -1000, -1000, 245, 623, -1000, 182, 41250,
	41250, 471, -42, -449, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11620, -1000, 471, 1004, -1000, -546, -1000, 520, -1000,
	-1000, -1000, -1000, -1000, 520, 520, 813, 607, 462, -1000,
	-1000, 515, 471, 855, -1000, -1000, 489, -1000, 245, -432,
	19812, 13236, 478, -1000, -1000, 1082, -430, -456, 822, -1000,
	-630, -1000, -1000, 30134, -1000, -1000, -1000, -1000, 29340, 40456,
	-424, -81, -432, -1000, -334, -1000, -1000, -1000, -1000, -1000,
	953, -1000, 1076, -1000, 471, -1000, -1000, -1000, 468, -1000,
	3091, -554, 1002, -1000, -410, -1000, -1000, -1000, 349, 397,
	-1000, -1000, -1000, -1000, -1000, -1000, -56, -1000, -1000, -433,
	-442, -1000, -1000, 40456, -541, 125, 5236, -1000, 992, 990,
	1645, -1000, -1000, -1000, -1000, -1000, -1000, -124, -1000, -453,
	-1000, -1000, 1459, -245, -1000, 1661, -1000, 1666, 398, 398,
	-1000, -459, -555, -1000, -1000, -1000, -1000, -1000, -37, 651,
	-1000, -1000, 5236, -1000, -1000, -1000, 142, 142, -1000, -1000,
}

var psqPgo = [...]int{
	0, 2061, 38, 137, 238, 28, 222, 109, 2059, 2057,
	2056, 2055, 2054, 2052, 2048, 386, 374, 364, 2044, 2043,
	2042, 2041, 2039, 2037, 2036, 2034, 2031, 2030, 384, 143,
	207, 2029, 2028, 2025, 97, 157, 67, 73, 148, 2023,
	2022, 65, 2021, 2020, 2019, 169, 166, 149, 1456, 2018,
	165, 91, 2015, 2014, 2013, 2012, 2011, 2006, 2003, 2002,
	2001, 2000, 1999, 1998, 1990, 1989, 1985, 216, 1984, 1982,
	15, 1980, 68, 1979, 1977, 1976, 1974, 1970, 1966, 1959,
	1958, 124, 1957, 1956, 1954, 208, 1953, 1951, 267, 95,
	94, 1949, 1948, 87, 153, 1947, 100, 1946, 1941, 1940,
	138, 1938, 3987, 1937, 46, 42, 1934, 47, 62, 41,
	36, 10, 14, 1932, 1928, 43, 60, 1927, 1926, 52,
	1925, 89, 84, 1920, 1919, 16, 6, 1918, 2, 5,
	3, 54, 1916, 1914, 102, 1912, 1910, 1908, 79, 1905,
	1903, 4494, 1902, 78, 122, 88, 49, 1900, 1899, 30,
	1884, 1883, 1880, 1879, 1878, 29, 1877, 1876, 1875, 125,
	19, 147, 37, 35, 48, 117, 1874, 64, 66, 1873,
	121, 120, 1872, 1871, 1870, 51, 1869, 33, 106, 99,
	22, 81, 1867, 1866, 1436, 217, 1865, 44, 1864, 27,
	25, 1863, 82, 32, 1862, 141, 1861, 57, 140, 104,
	142, 1856, 1854, 1851, 1850, 192, 1849, 1848, 1847, 58,
	129, 130, 76, 1846, 390, 1845, 1843, 75, 1332, 2062,
	24, 144, 1841, 1840, 3059, 126, 119, 23, 1839, 151,
	1838, 1837, 1827, 242, 145, 92, 1405, 31, 1826, 1825,
	12, 1824, 1823, 1822, 1821, 1820, 1817, 182, 367, 34,
	9, 72, 172, 59, 1813, 1810, 103, 77, 1803, 139,
	136, 113, 83, 1802, 146, 128, 115, 1799, 80, 1798,
	1795, 1791, 1784, 74, 1782, 1781, 1778, 1776, 133, 132,
	101, 69, 1774, 70, 98, 135, 127, 20, 1771, 11,
	40, 45, 21, 90, 96, 1769, 0, 1765, 13, 150,
	381, 1706, 1764, 1762, 4, 8, 7, 1761, 1759, 1747,
	1740, 123, 1737, 1736, 1723, 1716, 18, 26, 17, 1,
	1714, 1710, 3764, 1325, 105, 1708, 298,
}

//line psql.y:6206
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 320, 321, 321, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 296, 296, 296,
	299, 299, 26, 63, 28, 28, 27, 27, 30, 30,
	29, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
	5, 7, 7, 7, 13, 14, 6, 15, 15, 75,
	75, 16, 17, 17, 17, 17, 324, 324, 136, 136,
	134, 134, 135, 135, 18, 19, 19, 200, 200, 199,
	199, 199, 201, 201, 201, 201, 236, 236, 20, 20,
	20, 20, 20, 86, 86, 298, 298, 297, 289, 289,
	288, 288, 287, 295, 295, 294, 294, 293, 32, 33,
	42, 42, 42, 42, 43, 44, 300, 300, 269, 49,
	49, 48, 48, 48, 48, 48, 48, 50, 50, 46,
	46, 45, 45, 47, 47, 271, 271, 258, 258, 270,
	270, 270, 270, 270, 270, 270, 257, 257, 97, 97,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 315, 315, 315, 314, 314,
	183, 183, 183, 183, 183, 183, 183, 183, 106, 106,
	115, 115, 115, 115, 115, 104, 104, 105, 103, 103,
	103, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 114, 114, 110, 110, 110,
	111, 111, 111, 112, 112, 316, 316, 316, 316, 240,
	240, 240, 240, 243, 243, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 242, 242, 242, 242, 242, 244,
	244, 244, 244, 244, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	246, 246, 246, 246, 246, 246, 246, 246, 256, 256,
	247, 247, 252, 253, 254, 254, 254, 255, 255, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 251, 251,
	250, 250, 250, 259, 283, 283, 282, 282, 280, 280,
	280, 280, 280, 268, 268, 277, 277, 277, 277, 277,
	267, 267, 263, 263, 263, 264, 264, 265, 265, 262,
	262, 266, 266, 279, 279, 278, 278, 260, 260, 261,
	261, 285, 317, 317, 317, 317, 317, 318, 318, 286,
	307, 309, 309, 309, 308, 308, 305, 306, 304, 304,
	304, 304, 304, 72, 72, 72, 212, 212, 213, 213,
	275, 275, 274, 274, 274, 276, 276, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 208, 208, 208, 303, 303, 303, 303, 303,
	303, 302, 302, 302, 272, 272, 272, 301, 301, 51,
	51, 168, 168, 39, 39, 39, 39, 39, 39, 38,
	38, 38, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 40, 40, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 124, 126, 127, 127, 125,
	125, 125, 125, 125, 125, 53, 53, 52, 52, 129,
	128, 130, 130, 130, 22, 31, 31, 23, 23, 23,
	23, 24, 24, 54, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 207, 207, 215, 215, 206, 206,
	229, 229, 229, 209, 209, 209, 313, 313, 313, 203,
	203, 56, 56, 56, 58, 58, 59, 60, 60, 231,
	231, 232, 232, 61, 62, 73, 73, 73, 73, 73,
	73, 76, 76, 76, 9, 9, 9, 9, 69, 69,
	69, 8, 8, 57, 57, 64, 310, 310, 311, 312,
	312, 312, 312, 65, 25, 25, 25, 25, 25, 25,
	92, 92, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 87, 87, 87, 82, 82, 325, 67,
	68, 68, 85, 85, 85, 79, 79, 79, 84, 84,
	84, 10, 10, 11, 191, 191, 12, 12, 89, 89,
	91, 91, 91, 91, 91, 93, 93, 93, 93, 93,
	93, 93, 88, 88, 90, 90, 90, 90, 222, 222,
	222, 221, 221, 118, 118, 120, 119, 119, 121, 121,
	122, 122, 122, 122, 166, 166, 144, 189, 189, 187,
	187, 188, 188, 190, 190, 190, 190, 123, 123, 123,
	123, 131, 131, 132, 132, 133, 133, 230, 230, 227,
	227, 227, 226, 226, 137, 137, 137, 139, 138, 138,
	138, 138, 140, 140, 142, 142, 141, 141, 143, 148,
	148, 147, 147, 145, 145, 145, 145, 146, 146, 146,
	146, 149, 149, 102, 102, 102, 102, 102, 102, 113,
	113, 113, 113, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 74, 74, 74, 204, 204, 150, 150, 158, 158,
	158, 158, 151, 151, 151, 151, 151, 151, 151, 159,
	159, 159, 165, 160, 160, 156, 156, 156, 156, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 238, 238, 292,
	292, 291, 291, 290, 290, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 326, 326, 248, 248,
	248, 157, 157, 157, 157, 157, 83, 83, 83, 83,
	83, 235, 235, 235, 239, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	171, 171, 80, 80, 169, 169, 170, 172, 172, 167,
	167, 167, 153, 153, 173, 173, 174, 174, 175, 175,
	177, 176, 176, 178, 179, 179, 179, 180, 180, 181,
	181, 181, 41, 41, 41, 41, 41, 36, 36, 36,
	36, 37, 37, 37, 37, 94, 94, 94, 94, 96,
	96, 95, 95, 70, 70, 71, 71, 71, 100, 100,
	101, 101, 101, 98, 98, 99, 99, 184, 184, 185,
	152, 152, 152, 152, 152, 186, 186, 186, 186, 192,
	192, 162, 162, 164, 164, 163, 117, 193, 193, 197,
	194, 194, 198, 198, 198, 198, 198, 195, 195, 196,
	196, 223, 223, 223, 202, 202, 214, 214, 210, 210,
	211, 211, 205, 205, 216, 216, 216, 66, 161, 161,
	284, 284, 281, 219, 219, 220, 220, 224, 224, 228,
	228, 225, 225, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 322, 323, 233, 234, 234, 234,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	0, 1, 2, 3, 2, 3, 0, 1, 3, 1,
	4, 3, 3, 4, 3, 2, 3, 4, 3, 4,
	2, 7, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 3, 2, 2, 5, 7, 8, 6, 7, 1,
	1, 10, 10, 9, 8, 8, 1, 1, 1, 3,
	1, 3, 1, 3, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	6, 12, 2, 0, 2, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 1, 1, 3, 3, 6, 4,
	7, 8, 8, 8, 6, 3, 1, 1, 4, 0,
	1, 1, 1, 1, 2, 2, 2, 0, 1, 4,
	4, 4, 4, 4, 4, 2, 4, 1, 3, 1,
	1, 3, 4, 3, 3, 3, 5, 10, 0, 2,
	0, 2, 3, 5, 3, 4, 2, 3, 2, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 5, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 0, 0, 1, 1, 0, 1, 0,
	3, 3, 2, 2, 2, 1, 2, 2, 0, 1,
	0, 2, 2, 5, 0, 1, 1, 2, 1, 2,
	1, 1, 3, 0, 1, 4, 3, 3, 4, 2,
	0, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 1, 3, 3, 4, 3, 1, 3,
	1, 7, 6, 7, 7, 8, 8, 0, 1, 5,
	2, 1, 1, 1, 0, 1, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 1, 1, 2, 0, 1,
	0, 1, 1, 3, 2, 1, 2, 4, 4, 3,
	3, 3, 4, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 0, 2, 0, 1, 5, 1, 3, 7, 1,
	3, 3, 1, 2, 2, 2, 5, 5, 5, 6,
	8, 5, 5, 4, 4, 4, 6, 5, 5, 2,
	2, 2, 2, 3, 3, 3, 4, 3, 3, 1,
	3, 5, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 11, 3, 8, 6, 6,
	6, 13, 8, 6, 10, 8, 4, 1, 3, 3,
	6, 7, 7, 8, 4, 0, 1, 0, 1, 3,
	3, 1, 1, 2, 3, 3, 5, 7, 7, 6,
	5, 3, 2, 3, 3, 3, 7, 3, 3, 3,
	4, 7, 5, 2, 4, 4, 4, 4, 4, 5,
	5, 4, 4, 4, 4, 4, 4, 4, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 4, 4, 4,
	4, 4, 5, 3, 0, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 1,
	1, 2, 1, 3, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 3, 3, 6, 4, 7, 6,
	1, 3, 2, 2, 2, 1, 1, 1, 3, 2,
	1, 1, 1, 0, 1, 1, 0, 3, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 5, 5, 4, 0, 2, 4, 4, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 3, 1, 3, 4, 3, 0, 3, 1,
	3, 1, 3, 1, 1, 3, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 3, 0,
	1, 1, 2, 6, 5, 6, 6, 0, 2, 3,
	3, 0, 2, 3, 3, 2, 3, 1, 6, 3,
	4, 3, 1, 3, 4, 5, 6, 3, 4, 5,
	6, 3, 4, 1, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 3, 1, 1, 2, 2, 2, 2, 1,
	1, 2, 9, 6, 6, 6, 2, 2, 3, 3,
	3, 1, 1, 1, 0, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 5, 5, 6, 4,
	4, 8, 6, 8, 6, 8, 5, 4, 2, 2,
	1, 2, 2, 2, 8, 8, 6, 5, 4, 4,
	4, 4, 4, 7, 4, 6, 6, 6, 4, 4,
	4, 7, 8, 6, 5, 6, 8, 11, 7, 8,
	8, 9, 4, 4, 4, 4, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 4, 0, 2, 0,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 2,
	3, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 1, 0, 2, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 2, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 2, 0, 3, 0, 2, 0, 1,
	3, 1, 3, 2, 0, 1, 1, 0, 1, 2,
	4, 4, 0, 2, 2, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 3, 3, 3, 0,
	3, 1, 1, 0, 4, 0, 1, 1, 0, 3,
	1, 3, 2, 1, 1, 0, 1, 2, 4, 2,
	2, 1, 5, 4, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	0, 3, 0, 1, 0, 1, 1, 5, 0, 1,
	0, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -320, -1, -5, -13, -14, -15, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -54, -55, -56, -58,
	-59, -60, -61, -62, -8, -57, -25, -26, -63, -64,
	-65, -66, -10, -11, -12, -3, -2, -7, 9, 10,
	-75, -27, 32, -32, -42, 461, -43, -33, 462, -44,
	464, 463, 501, 465, 494, 316, 546, 547, 549, 550,
	551, 552, -76, 499, 500, 468, 36, 172, 33, 34,
	37, 507, 508, 471, -4, -28, 8, -322, 11, 669,
	496, 495, 28, -6, 703, 328, -321, 835, -184, -185,
	22, 33, 29, -181, -177, -85, -185, 20, 18, 7,
	-67, -325, -67, -67, 12, 13, -67, -269, -271, 328,
	397, 328, -67, -49, -48, -46, -45, -47, -50, 31,
	-39, -38, -40, -34, -35, -276, 467, 462, 469, 470,
	670, 365, 364, 362, 363, 463, 317, 464, 323, 33,
	703, 706, -273, -50, 344, 346, 814, 475, 817, 818,
	821, 822, 828, 829, 830, 366, 7, -67, -228, -224,
	-296, -218, 331, 332, 333, 68, 69, 70, 71, 487,
	467, 735, 536, 72, 73, 462, 41, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 546, 383, 560, 554,
	701, 83, 19, 84, 37, 85, 488, 524, 86, 87,
	571, 574, 88, 89, 90, 91, 92, 502, 607, 343,
	93, 549, 636, 346, 94, 95, 96, 814, 97, 98,
	99, 100, 321, 101, 111, 112, 113, 114, 115, 116,
	640, 650, 471, 117, 339, 118, 119, 120, 525, 13,
	121, 122, 123, 124, 125, 126, 365, 362, 127, 128,
	563, 463, 129, 714, 364, 130, 131, 588, 804, 498,
	610, 744, 132, 326, 508, 26, 496, 133, 134, 135,
	357, 136, 137, 138, 535, 338, 745, 317, 797, 139,
	614, 140, 40, 628, 141, 142, 717, 718, 143, 110,
	144, 655, 145, 479, 146, 147, 148, 363, 149, 150,
	151, 152, 475, 486, 153, 154, 155, 156, 157, 158,
	11, 159, 558, 559, 457, 533, 630, 585, 682, 160,
	161, 683, 162, 163, 164, 165, 719, 356, 166, 376,
	35, 167, 702, 168, 537, 169, 170, 631, 171, 172,
	800, 173, 33, 752, 174, 175, 699, 176, 177, 509,
	530, 178, 179, 660, 180, 304, 663, 181, 519, 627,
	182, 576, 757, 183, 301, 184, 185, 186, 187, 491,
	324, 188, 189, 190, 191, 759, 192, 760, 566, 193,
	726, 361, 194, 762, 195, 196, 526, 197, 764, 766,
	198, 727, 199, 200, 201, 202, 203, 204, 39, 767,
	510, 205, 822, 768, 206, 207, 208, 209, 771, 210,
	507, 211, 212, 213, 619, 214, 514, 215, 216, 217,
	218, 219, 220, 632, 562, 221, 222, 730, 223, 224,
	225, 226, 227, 552, 464, 635, 669, 228, 229, 779,
	493, 230, 231, 232, 782, 550, 233, 234, 235, 236,
	237, 238, 551, 239, 473, 621, 240, 241, 665, 534,
	529, 242, 638, 243, 629, 32, 244, 245, 303, 494,
	788, 789, 556, 246, 247, 527, 248, 249, 547, 250,
	251, 252, 253, 832, 368, 254, 335, 255, 256, 673,
	257, 258, 732, 622, 366, 259, 260, 261, 531, 577,
	792, 567, 568, 548, 262, 263, 515, 681, 501, 264,
	265, 266, 267, 793, 637, 268, 269, 270, 271, 272,
	273, 12, 274, 275, 276, 277, 302, 299, 572, 278,
	279, 476, 280, 281, 282, 283, 706, 553, 284, 633,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 296, 570, 297, 298, 474, -67, 474, -141, -224,
	474, -195, 606, -215, 608, 621, 616, 614, -207, 617,
	619, 514, -313, 628, 474, 623, 461, 618, 626, 523,
	-296, 414, 832, 374, 574, 613, 611, 629, 800, -224,
	548, -231, 553, -219, -296, -218, 551, -141, -73, 797,
	466, 465, -233, -233, -87, 800, 802, -160, -102, 381,
	-113, -116, -107, -108, -154, -155, -156, -157, -114, -167,
	403, 404, 411, 382, -165, -117, 26, 699, 671, 670,
	414, 31, 457, 310, 311, 673, 674, 384, 299, 646,
	647, -115, 641, 648, 643, 676, 677, 357, 678, 347,
	349, 348, 679, 680, 681, 586, 587, 682, 683, 684,
	350, 351, 352, 353, 354, 355, 356, 685, 688, 686,
	687, 689, 690, 691, 696, 697, 692, 693, 694, 695,
	698, -219, -224, 479, 640, 473, 409, 669, -109, -105,
	-2, -163, 639, 644, 645, 649, 642, -296, -218, -111,
	-110, -150, 334, 340, 345, 341, -319, 358, -322, 339,
	338, 335, 336, 337, 359, 360, 415, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 116, 622,
	622, -141, -67, -67, -67, -175, -85, -177, -4, -2,
	-322, 8, -67, -2, -3, -7, -28, -30, 730, -29,
	-224, 12, 399, -141, -180, -181, -6, -2, -102, 19,
	23, 24, -90, 405, -102, -224, -68, -90, -205, 478,
	-67, -67, -194, -236, 548, -198, 629, 628, -220, -196,
	-219, -217, -195, 627, 23, 466, 465, 380, 42, 709,
	25, 27, 43, 44, 414, 369, 384, 671, 485, 413,
	606, 481, 45, 489, 461, 314, 46, 641, 47, 48,
	643, 639, 646, 31, 49, 28, 24, 36, 387, 388,
	715, 360, 50, 22, 490, 51, 14, 613, 52, 16,
	17, 53, 399, 54, 312, 55, 29, 396, 56, 308,
	722, 370, 310, 397, 20, 644, 645, 315, 381, 57,
	358, 21, 318, 634, 378, 18, 313, 58, 59, 480,
	492, 796, 311, 8, 60, 61, 62, 63, 64, 474,
	65, 386, 477, 371, 359, 7, 375, 624, 319, 66,
	67, 385, 15, 733, 703, 574, -270, 397, -257, -261,
	-219, 489, -286, 485, -141, -279, -278, -219, -322, -86,
	-214, 475, 483, 482, 375, -300, 378, 531, 640, 473,
	-45, -46, -47, -195, 413, 817, 329, 329, -273, -261,
	-260, -259, -301, 489, -285, -277, 481, 490, -267, 482,
	483, -262, 475, 376, -301, 485, 475, -301, -301, 477,
	35, 35, 366, 366, -301, -262, 480, 490, 485, 489,
	-216, -262, 477, 25, -268, 389, -268, 707, 707, -195,
	413, -268, -268, -268, 518, -268, -268, -268, -268, -268,
	-268, -268, -268, -268, 474, -300, -94, 626, 323, -48,
	-31, -141, -214, 475, 476, -300, 507, -141, 458, -141,
	-209, 397, 15, -209, -206, 622, 620, 607, 612, -209,
	-209, -209, 521, 605, -263, 475, 35, 486, 622, 521,
	605, 521, 522, 521, 522, 615, 625, 521, -229, 14,
	399, 640, 610, 614, 514, 474, 515, 476, 624, 622,
	517, -234, -322, -220, -296, 803, -234, 32, 332, 477,
	-219, -69, -219, 335, -9, -5, -16, -15, -17, 389,
	-92, 622, -81, 414, 804, 805, 806, 803, 619, 811,
	809, 807, 521, 808, 329, 378, 380, 4, -102, 396,
	-151, 389, 390, 391, 392, 393, 394, 395, 399, 381,
	383, 397, 398, 389, 379, 400, 401, 402, 403, 404,
	405, 406, 408, 407, 409, 410, 413, 459, 460, -108,
	-108, -108, -108, -165, -322, -322, -322, -108, -204, -322,
	-108, -322, -322, -322, -322, -171, -102, -322, -326, -322,
	-326, -326, -248, -322, -248, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, 458, -322, -322, -322, -322, -322, -248, -248,
	-248, -248, -248, 345, 340, 334, -167, 341, 335, -219,
	-224, -2, -3, -160, -233, -310, -311, -144, -141, -322,
	-219, -219, 507, -180, -6, -2, -175, -181, -177, -2,
	-67, -79, -91, 305, 306, -93, 24, 38, 309, 307,
	23, -323, 330, -323, -184, -323, 329, -30, -189, 328,
	303, 329, 21, -176, -178, -102, 14, -222, -221, 25,
	-219, 335, 458, 343, 14, -142, 29, -141, -205, -205,
	329, 548, -198, -236, -200, -199, 630, 632, 389, -223,
	-219, 335, 31, 330, 329, -141, -240, -243, -245, -244,
	-246, -241, -242, 571, 572, 414, 575, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 588, 32, 497, 567,
	568, 569, 570, 589, 590, 591, 592, 593, 594, 595,
	596, 554, 573, 701, 555, 556, 557, 558, 559, 560,
	562, 563, 564, 565, 566, -299, -296, 328, 330, 329,
	-247, 328, -102, -94, 474, -296, 475, 475, 475, -67,
	669, -268, -268, -268, 18, -34, -35, -38, -35, 328,
	-257, -266, -299, -296, 328, 376, 480, 375, -265, -262,
	-265, -266, -296, -167, -296, -296, -167, -257, -195, -167,
	-296, 376, 376, -296, -296, -141, -296, 31, 320, 321,
	322, 31, 324, 325, 326, -268, -268, 335, 335, 335,
	-268, 335, -302, 491, 535, 537, 31, 335, -303, 31,
	824, 823, 825, 826, 827, 31, 31, -219, 328, -141,
	-100, 525, 461, 463, 467, 318, 389, 329, 477, 474,
	-296, -210, 479, -210, -219, -225, -224, -217, 335, -102,
	-264, 14, 399, -229, -229, -209, -141, -264, -229, -209,
	-141, -209, -209, -209, -209, -229, -229, -229, -209, -224,
	-224, -141, -141, -141, -141, -141, -141, -141, -234, -203,
	14, 318, -234, -234, -232, 551, 585, 798, 799, 329,
	703, -134, -141, 803, 803, 803, 803, 803, -102, -102,
	-102, 726, -158, 358, 381, 359, 360, -116, -159, -163,
	-165, 342, 399, 383, 397, 398, -107, -108, -107, 42,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -235, -219, 335, 414, -112, -111, 341, 335,
	-319, -112, -88, -90, -102, -102, -296, -219, -88, -88,
	-102, -84, 24, 38, -169, -170, 385, -167, -323, -323,
	341, -219, -219, -78, -77, 651, 652, 653, 654, 656,
	657, 658, 661, 662, 666, 667, 650, 668, 655, 660,
	663, 664, 665, 659, 570, -102, -102, -102, -102, -102,
	-102, -74, -102, 369, 370, 371, -102, -102, -161, -160,
	-295, -294, -293, -102, -102, -102, -102, -102, -102, -102,
	-102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
	-102, -102, -102, -102, -102, -102, -89, 24, 38, -88,
	-220, -225, -217, -88, -89, -89, -88, -88, 458, -323,
	329, -312, 632, 633, 801, -227, -226, 25, -224, 335,
	-161, 14, -191, 319, -219, -180, -180, 305, 306, 301,
	-88, -93, -323, -29, 25, -187, -219, 304, -102, -102,
	329, -179, 27, 28, -141, -221, 405, -225, -141, -152,
	32, 299, -5, -322, -141, -119, -121, -122, -123, -144,
	-166, -322, -124, 722, 719, 14, -134, -135, -143, -224,
	-198, -200, 329, 631, 633, 634, 318, 361, -102, -250,
	413, -275, -274, -273, -257, -259, -260, -261, 475, 376,
	330, -250, -254, 603, 602, -247, -247, -247, -247, -247,
	-249, -195, 597, 598, 414, -249, -249, -249, 328, 328,
	-247, -247, -247, -247, -252, -252, -252, -253, -253, -286,
	-102, -283, -282, -280, -281, 344, 795, 751, 703, 319,
	-278, -179, 337, -323, -100, -211, 479, -284, -281, -296,
	-296, -296, -211, -296, 335, -296, 335, -296, 335, 19,
	329, -258, -257, -51, 535, -285, -279, -266, 376, -265,
	-266, -266, 463, 32, -212, 742, 381, 795, 751, -257,
	-51, -235, -296, 477, -235, -235, 335, -208, 832, -134,
	-96, 527, 389, 516, 516, 474, 474, 529, -141, 528,
	530, 532, -141, -141, -210, 318, -136, -141, 26, -224,
	-141, -209, -209, -141, -209, -209, -141, -219, -81, 632,
	329, 703, 22, -82, 22, -322, 358, 359, 360, -159,
	-107, -108, -107, 380, 498, -159, 335, 329, -323, 25,
	329, 319, -323, -323, -323, 329, 14, -88, -172, -170,
	387, -102, -323, -323, 329, 329, 14, -239, -323, -323,
	-323, -323, -323, -171, -323, 14, 329, 329, -323, -323,
	329, 329, -323, 329, 329, 329, -292, 329, 329, 329,
	329, -323, -323, -323, -323, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, -323, -323, -88, -88, -322,
	458, -323, -323, -323, -323, -323, -220, -311, 800, 633,
	-148, -147, -145, 316, 478, 317, -226, -323, -112, 332,
	-188, 332, -187, -153, -219, 341, -118, -120, 14, -93,
	-165, 330, 329, -178, 458, -149, 15, -192, 318, -193,
	-197, -167, -162, -164, -163, -322, -186, -323, -219, 32,
	329, -137, -139, -138, -140, 308, 312, 314, 309, 310,
	311, 315, -230, 25, -119, -3, -2, -322, -322, -322,
	-141, -134, -324, 14, 319, -324, 329, 458, -199, -201,
	635, 632, 638, -296, 335, 329, -273, -261, -182, -97,
	40, -255, 604, -249, 710, -249, -219, 335, 414, -251,
	414, -251, 597, 598, -256, 335, -256, 330, -41, -36,
	-37, 33, 323, -280, 335, 39, -219, 330, -179, -96,
	-141, 381, 318, -284, -284, -284, -224, -187, 18, 329,
	330, -168, 536, 330, 328, -266, -266, 31, 31, 795,
	751, 742, -51, -168, -250, -296, 834, 833, 330, 476,
	534, -101, 646, -98, 335, 331, -141, -141, -141, -141,
	-141, 467, 463, 477, -134, -141, 329, -72, 493, 488,
	-229, -229, 33, -141, 632, 812, 810, -102, 380, 498,
	-116, -108, -90, 700, -237, 414, 571, 497, 569, 565,
	585, 576, 602, 567, 603, 564, 563, 562, -237, -235,
	-102, -102, -175, 388, -102, 386, -102, -102, -102, -323,
	14, -102, -102, -102, -293, -102, -102, -102, -291, -290,
	-112, -167, -323, -291, -102, -102, -290, -290, -294, -294,
	-294, -294, -294, -160, -160, -160, -160, -323, -323, -89,
	-220, -145, -262, -262, -262, 329, -202, 22, 14, 299,
	-149, -119, -93, -219, 405, -180, -102, 30, -192, 329,
	389, 329, -323, -323, 329, 299, 458, -193, -121, -122,
	-122, -121, -122, 308, 308, 308, 313, 308, 313, 308,
	-138, -224, -323, -323, -3, -3, -102, -227, 319, -119,
	-119, -143, -224, 405, 632, 636, 637, -273, -318, 358,
	381, 31, 318, 600, 344, -316, 413, 739, 790, 795,
	751, -317, 480, 375, 376, 492, 25, 41, -251, -251,
	330, 329, 330, -213, -212, -37, -36, -268, -268, -296,
	476, 26, -141, 318, 318, 318, 19, -257, -167, -283,
	-187, -104, -322, -103, -105, -109, 403, 404, 338, 339,
	-168, -141, -95, 525, 533, 328, -99, 332, -298, 319,
	516, 600, 516, -141, -72, -41, -141, -209, -209, 33,
	-296, -323, -116, -108, -322, -323, -247, -247, -247, -253,
	-247, 559, -247, 559, -247, -323, -323, 329, -323, 22,
	-323, -80, 675, -102, 329, 329, -323, -102, -323, -323,
	-323, -292, 329, -323, 329, -323, 329, -238, 796, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-146, 22, -146, -146, 332, -141, -173, 16, 376, -197,
	-102, -164, 299, -5, -219, -162, -219, -149, -132, -131,
	318, 319, -133, 318, -131, 308, 308, -189, -323, -323,
	329, -149, -119, -149, -149, 458, 358, -322, -106, -115,
	-104, 12, 335, 335, -296, -315, 823, 824, 31, 337,
	376, 376, -141, 328, -249, 335, -249, 31, 324, 325,
	326, 31, 320, 321, 322, -141, -141, -141, -141, -187,
	330, -102, -110, -110, -189, 330, -289, 703, -297, -219,
	-219, -219, -219, -107, -249, -102, -102, -180, 335, -102,
	-102, -323, -323, -291, -290, -102, -323, -129, -128, -130,
	804, 358, 31, -237, -322, 308, 18, 16, -322, -322,
	-174, 17, 19, 12, -162, 458, -175, -102, 328, -102,
	-112, -175, -149, -102, -155, 357, 681, 682, 683, 356,
	328, -102, -189, -317, -323, 25, -288, -287, -220, 328,
	319, -83, 399, 703, -323, -323, -323, -323, -323, -323,
	-323, 329, -323, -128, -130, -323, 318, -112, -190, -323,
	-219, 480, 19, 19, -190, -190, -102, -160, -193, -219,
	-180, -187, -126, 607, -180, -323, -187, 330, 25, -5,
	329, 389, -187, -141, -323, 701, 315, 704, -102, -323,
	318, 714, 804, 329, -323, -323, -323, 330, -323, -322,
	330, -183, -5, -70, 703, -287, -272, -220, 335, 337,
	330, 304, 702, 705, -292, -219, 480, -227, -127, -125,
	-219, 757, -308, -307, 699, -318, -314, 358, 381, 344,
	-316, 795, 751, 367, 368, -70, -71, 524, 800, -298,
	304, -323, -323, 329, 22, -240, -53, 768, -305, -306,
	318, -309, 613, 767, 788, 358, 335, 485, -289, 703,
	-125, 764, -250, -112, -306, 318, -305, 318, 13, 12,
	526, 704, -52, 26, -126, -304, 493, 488, 491, 32,
	-304, 705, 768, 487, 31, 358, -112, -129, -128, -128,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 67, 69, 70, 678, 678,
	678, 0, 678, 0, 0, 678, -2, -2, 678, 1129,
	0, 678, 0, 0, -2, 612, 614, 0, 616, -2,
	0, 0, 625, 1626, 1626, 673, 0, 0, 0, 0,
	0, 678, 678, 678, 1018, 47, 678, 0, 79, 80,
	631, 632, 633, 62, 0, 1624, 1, 3, 68, 72,
	0, 0, 0, 55, 1027, 0, 73, 0, 0, 682,
	0, 680, 0, 1112, 678, 678, 0, 108, 109, 0,
	0, 0, -2, 112, -2, 141, 142, 143, 0, 148,
	514, 464, 466, 469, 502, -2, -2, 457, 457, 457,
	0, 0, 0, 0, 0, 457, 499, 1114, 363, 363,
	0, 0, 425, 0, 363, 363, 363, 0, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 1045, 147, 1130,
	1127, 1128, 37, 38, 39, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 0, 1106, 0, 552, 776,
	0, 603, 603, 0, 603, 603, 603, 0, 0, 0,
	563, 0, 0, 0, 0, 600, 0, 579, 0, 585,
	1627, 0, 1627, 1097, 0, 597, 595, 607, 608, 611,
	615, 0, 620, 623, 1123, 1124, 0, 638, 46, 1347,
	629, 630, 643, 644, 0, 674, 675, 42, 873, 0,
	797, 802, 813, 827, 828, 829, 830, 831, 833, 834,
	0, 0, 0, 0, 839, 840, 1334, 1415, 0, 0,
	0, 854, 1383, 0, 0, 1558, 0, 1000, 1596, 966,
	966, 890, 966, 968, 968, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 1576, 0, 0, 1387, 1390, 0,
	0, 0, 0, 0, 0, 0, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 1362, 1299, 1523, 0, 1505, 265, 266,
	872, 1086, 968, 968, 968, 968, 968, -2, -2, 211,
	212, 213, 214, 215, 216, 217, 0, 207, 0, -2,
	-2, -2, 271, 267, 856, 857, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 1626, 0,
	653, 0, 0, 0, 0, 1027, 0, 1019, 1018, 60,
	0, 678, -2, 0, 0, 0, 0, 44, 1496, 49,
	737, 1067, 0, 1069, 56, 1028, 64, 66, 1029, 0,
	683, 684, 0, 714, 718, 0, 679, 0, 0, 1113,
	1112, 1112, 94, 0, 1572, 1090, -2, -2, 0, 0,
	1125, 1126, 1099, -2, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1270, 0, 0, 159, 160,
	0, 40, 390, 0, 155, 0, 383, 330, 0, 1045,
	0, 0, 0, 0, 0, 678, 0, 1107, 136, 137,
	144, 145, 146, 363, 363, 363, 147, 147, 426, 473,
	474, 475, 0, -2, 388, 0, 458, 0, 0, 377,
	377, 381, 379, 380, 0, 0, 0, 0, 0, 0,
	489, 490, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 1116, 0, 364, 0, 512, 513, 363,
	363, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 1058, 0, 0, -2,
	544, 0, 0, 0, 1108, 1108, 0, 551, 0, 553,
	554, 0, 0, 555, 0, 600, 600, 598, 599, 557,
	558, 559, 603, 0, 0, 372, 373, 374, 600, 603,
	0, 603, 603, 603, 603, 600, 600, 600, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1627, 582,
	583, 586, 1628, 1629, 1627, 1627, 593, 1098, 613, 621,
	624, 641, 639, 640, 642, 634, 635, 636, 637, 0,
	654, 655, 660, 0, 0, 0, 665, 666, 667, 0,
	0, 670, 671, 672, 0, 0, 0, 0, 795, 0,
	0, 862, 863, 864, 865, 866, 867, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	836, 837, 838, 841, 0, 0, 0, 846, 847, 0,
	0, 0, 0, 0, 688, 0, 1001, 0, 888, 0,
	889, 891, 892, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 0, 0, 698, 698, 0, 0, 200, 201,
	202, 203, 204, 218, 219, 220, 221, 222, -2, 1009,
	0, 872, 0, 0, 43, 645, 646, 0, 759, 1118,
	0, 694, 0, 54, 63, 65, 1027, 58, 1027, 0,
	700, 0, 0, -2, -2, 701, 707, 708, 709, 710,
	711, 51, 1625, 52, 0, 71, 0, 45, 0, 0,
	0, 0, 0, 1020, 1021, 1024, 0, 715, 719, 0,
	721, 722, 0, 681, 0, 0, 0, 775, 0, 0,
	0, 1572, 1096, 0, 96, 97, 0, 0, 0, 350,
	1101, 1102, 1103, -2, 370, 0, 350, 334, 280, 281,
	282, 330, 284, 330, 330, 330, 330, 339, 339, 339,
	339, 313, 314, 315, 316, 317, 0, 0, 299, 330,
	330, 330, 330, 320, 321, 322, 323, 324, 325, 326,
	327, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	332, 332, 332, 333, 333, 0, 41, 0, 354, 0,
	1024, 0, 0, 1058, 1110, 1120, 0, 0, 0, 1110,
	114, 0, 0, 0, 0, 470, 471, 467, 503, 0,
	459, 371, 0, -2, 0, 381, 0, 377, 381, 378,
	381, 369, 382, 0, 0, 0, 0, 459, 0, 493,
	494, 495, 0, 497, 498, 500, 0, 504, 505, 506,
	507, 508, 509, 510, 511, 0, 0, 429, 430, 431,
	0, 433, 434, 451, 452, 453, 435, 436, 437, 445,
	446, 447, 448, 449, 450, 438, 439, 442, 0, 129,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 697, 777, 1131, 1132, 604, 605,
	0, 375, 376, 603, 603, 560, 590, 0, 603, 564,
	591, 565, 567, 566, 568, 580, 581, 603, 571, 601,
	602, 572, 573, 574, 575, 576, 577, 578, 587, 0,
	609, 610, 588, 589, 0, 622, 626, 627, 628, 0,
	0, 657, 90, 662, 663, 664, 676, 669, 874, 793,
	794, 0, 796, 799, 0, 858, 860, 801, 803, 869,
	870, 871, 0, 0, 0, 0, 0, 807, 811, 0,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 832, 981, 982, 983, 849, 273, 274, 270,
	0, 850, 0, 712, 0, 0, 0, 848, 0, 0,
	0, 0, 689, 690, 1007, 1004, 0, 0, 967, 969,
	0, 0, 0, 0, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 984, 0, 0, 0, 0,
	0, 1000, 0, 851, 852, 853, 0, 0, 0, 1119,
	0, 124, 125, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	1010, 0, -2, 0, 0, 0, 0, 0, 0, 1085,
	0, 648, 649, 651, 0, 779, 760, 0, 762, 763,
	0, 0, 693, 0, 696, 57, 59, 705, 706, 0,
	723, 702, 53, 48, 0, 0, 739, 1068, 1030, 1031,
	0, 1023, 1025, 1026, 74, 720, 716, 0, 791, 1079,
	0, 0, 1071, 0, 774, 0, 726, 728, 729, 730,
	757, 0, 733, 0, 1395, 0, 0, 0, 92, 776,
	1091, 95, 0, 0, 100, 101, 1092, -2, 1094, 1095,
	0, 138, -2, 422, 161, 163, 164, 165, -2, -2,
	156, -2, 337, 335, 336, 283, 339, 339, 307, 308,
	309, 0, 348, 348, 345, 310, 311, 312, 0, 0,
	300, 301, 302, 303, 294, 295, 296, 297, 298, 389,
	0, 1032, 355, 356, 358, 0, 360, 361, 0, 0,
	384, 385, 0, 1024, 1049, 0, 0, 0, 1121, 1120,
	1120, 1120, 0, 149, 150, 151, 152, 153, 154, 0,
	147, 0, 157, 461, 460, 387, 0, 0, 381, 381,
	366, 367, 0, 0, 483, 416, 0, 484, 485, 459,
	461, 350, 496, 0, 427, 428, 432, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	1047, 1048, 0, 545, 0, 0, 413, 88, 1109, 550,
	600, 570, 592, 600, 562, 569, 584, 618, 661, 0,
	0, 0, 0, 668, 0, 0, 800, 859, 861, 804,
	0, 808, 812, 0, 0, 814, 272, 0, 0, 0,
	0, 0, 855, 879, 880, 0, 0, 1018, 0, 1005,
	0, 0, 887, 970, 0, 0, 0, 0, 898, 899,
	900, 901, 902, 0, 904, 0, 0, 0, 908, 909,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 923, 924, 925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 875, 0, 0, 698,
	0, 971, 972, 973, 974, 975, 1010, 647, 650, 652,
	736, 780, 781, 0, 0, 0, 761, 1117, 691, 692,
	695, -2, 0, 0, 1012, 0, 791, 724, 0, 703,
	50, 738, 0, 1022, 0, 1027, 0, 77, 0, 1079,
	1087, 0, 1070, 1081, 1083, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 767, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 86, 87, 0, 0, 0, 98, 99,
	0, 0, 105, 351, 352, 147, 424, 162, 397, 0,
	0, 279, 338, 304, 305, 306, 348, 348, 342, 343,
	349, 344, 346, 347, 0, 328, 0, 418, 110, 1036,
	1035, 363, 363, 357, 359, 0, 1122, 331, 386, 0,
	128, 0, 0, 0, 0, 0, 134, 465, 0, 0,
	476, 477, 0, 354, 0, 365, 368, 478, 0, 481,
	482, 417, 461, 487, 488, 501, 443, 444, 441, 0,
	0, 1059, 1060, 1065, 1063, 1064, 115, 518, 520, 519,
	523, 0, 0, 0, 413, 1032, 0, 549, 414, 415,
	603, 603, 656, 91, 0, 659, 0, 0, 0, 0,
	805, 809, 713, 0, 0, 330, 330, 987, 330, 333,
	990, 330, 992, 330, 995, 330, 998, 999, 0, 0,
	0, 0, 1002, 886, 1008, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 126, 127, 939, 0, 0, 941,
	943, 944, 914, 940, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 877, 0,
	1011, 782, 787, 787, 787, 0, 0, 1104, 1105, 1013,
	1014, 725, 704, 740, 717, 75, 792, 0, 78, 0,
	0, 0, 1084, 0, 0, 0, 0, 791, 727, 753,
	755, 0, 750, 765, 766, 768, 0, 770, 0, 772,
	773, 737, 732, 734, 0, 0, 0, 791, 0, 791,
	791, 93, 0, 778, 102, 103, 104, 423, 166, 171,
	0, 0, 0, 176, 0, 178, 0, 0, 0, 183,
	184, 398, 0, 276, 278, 0, 0, 169, 340, 341,
	339, 0, 339, 399, 419, 1033, 1034, 0, 0, 362,
	0, 1111, 130, 0, 0, 0, 0, 158, 462, 353,
	0, 479, 0, 205, 206, 208, 0, 0, 268, 269,
	486, 737, 1050, 1051, 1052, 0, 1062, 1066, 118, 0,
	0, 0, 0, 546, 547, 548, 89, 556, 561, 658,
	677, 798, 806, 810, 0, 843, 985, 339, 988, 989,
	991, 993, 994, 996, 997, 844, 845, 0, 882, 0,
	884, 1027, 0, 1006, 0, 0, 896, 0, 905, 906,
	907, 0, 0, 913, 0, 915, 0, 0, 0, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 878,
	0, 0, 0, 0, -2, 61, 1016, 0, 0, 1088,
	1089, 1082, 0, 1074, 1077, 1073, 1076, 1018, 747, 754,
	0, 0, 748, 0, 749, 769, 771, 731, -2, 735,
	0, 1018, 791, 84, 85, 0, 172, 0, 174, 198,
	199, 0, 177, 179, 180, 181, 185, 186, 187, 182,
	275, 277, 0, 0, 318, 329, 319, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 737, 131, 132, 133, 468,
	0, 0, 209, 210, 0, 1061, 517, 0, 116, 117,
	0, 0, 522, 976, 986, 0, 0, 0, 1003, 0,
	0, 903, 911, 0, 942, 0, 918, 0, 0, 0,
	541, 542, 0, 938, 0, 788, 0, 0, 0, 0,
	76, 0, 0, 0, 1072, 0, 1027, 751, 0, 756,
	0, 1027, 83, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 480, 0, 119, 120, 0, 0,
	0, 0, 0, 0, 881, 883, 885, 894, 895, 912,
	916, 0, 919, 0, 0, 920, 0, 543, 0, 784,
	743, 744, 789, 790, 0, 0, 1017, 1015, 1080, 1078,
	81, 0, 0, 0, 82, 173, 0, 190, 0, 1053,
	0, 0, 0, 524, 842, 0, 0, 0, 939, 921,
	0, 539, 540, 0, 783, 785, 786, 752, 759, 0,
	404, 397, 1053, 515, 1055, 121, 122, 454, 455, 456,
	115, 977, 0, 980, 0, 745, 746, 525, 0, 527,
	0, -2, 392, 405, 0, 167, 191, 192, 0, 0,
	195, 196, 197, 188, 189, 111, 0, 1056, 1057, 118,
	978, 917, 526, 0, 0, 350, 0, 536, 393, 394,
	0, 400, 401, 402, 403, 193, 194, 0, 521, 0,
	528, 529, 537, 0, 395, 0, 396, 0, 0, 0,
	1054, 0, 0, 538, 534, 406, 408, 409, 0, 0,
	407, 979, 0, 410, 411, 412, 530, 531, 532, 533,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 382, 3, 3, 3, 408, 400, 3,
	328, 330, 405, 403, 329, 404, 458, 406, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 835,
	390, 389, 391, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 410, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 379, 3, 411,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 331, 57671, 332, 57672, 333, 57673, 334, 57674, 335,
	57675, 336, 57676, 337, 57677, 338, 57678, 339, 57679, 340,
	57680, 341, 57681, 342, 57682, 343, 57683, 344, 57684, 345,
	57685, 346, 57686, 347, 57687, 348, 57688, 349, 57689, 350,
	57690, 351, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 380, 57719, 381,
	57720, 383, 57721, 384, 57722, 385, 57723, 386, 57724, 387,
	57725, 388, 57726, 392, 57727, 393, 57728, 394, 57729, 395,
	57730, 396, 57731, 397, 57732, 398, 57733, 399, 57734, 401,
	57735, 402, 57736, 407, 57737, 409, 57738, 412, 57739, 413,
	57740, 414, 57741, 415, 57742, 416, 57743, 417, 57744, 418,
	57745, 419, 57746, 420, 57747, 421, 57748, 422, 57749, 423,
	57750, 424, 57751, 425, 57752, 426, 57753, 427, 57754, 428,
	57755, 429, 57756, 430, 57757, 431, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	psqDebug        = 0
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", psqTokname(token), uint(char))
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:545
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:550
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:551
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:555
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 36:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:590
		{
			setParseTree(psqlex, nil)
		}
	case 37:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:596
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:600
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:604
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:609
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 41:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:613
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 42:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:619
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 43:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:625
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:631
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:635
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:640
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:644
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:650
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 49:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:654
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 50:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:660
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:666
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:670
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:674
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:697
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:703
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:708
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:714
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:721
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:727
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:734
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 61:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:738
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 62:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:744
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:748
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:752
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:756
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:760
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:766
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:770
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:775
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:779
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:785
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:789
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:794
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:801
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:807
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:815
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:823
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:834
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:846
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:850
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:856
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:862
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:866
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:870
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:874
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:879
		{
		}
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:880
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:884
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 89:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:888
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 90:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:894
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 91:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:898
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 92:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:904
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 93:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:908
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:914
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 95:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:920
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:924
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:930
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:934
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:940
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 100:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:944
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:948
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:954
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:958
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:962
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:966
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:972
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:976
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:982
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:988
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:995
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().AlterOptions = append(psqDollar[1].alterTableUnion().AlterOptions, psqDollar[6].alterOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1004
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[8].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Algorithm: psqDollar[4].str, Definer: psqDollar[5].definerUnion(), Security: psqDollar[6].str, Columns: psqDollar[9].columnsUnion(), Select: psqDollar[11].selStmtUnion(), CheckOption: psqDollar[12].str}
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1008
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1015
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1019
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1024
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 116:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1028
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 117:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1034
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 118:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1039
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 119:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1044
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1050
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1055
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1061
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 123:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1066
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1070
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1076
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1080
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1086
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 128:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1092
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 129:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1099
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[4].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1106
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1111
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1116
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1121
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1128
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1135
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 138:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1146
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1152
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1156
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1162
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1166
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1170
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1174
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 145:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1178
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1182
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 147:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1188
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 148:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1192
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1198
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 150:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1202
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 151:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1208
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 152:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1212
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1218
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1222
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1228
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 156:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1232
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 157:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1238
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 158:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1242
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 159:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1248
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1253
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1258
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 162:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1262
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1267
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 164:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1271
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1275
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1286
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 167:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1295
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1304
		{
			psqVAL.str = ""
		}
	case 169:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1308
		{
			psqVAL.str = ""
		}
	case 170:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1317
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 171:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1321
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1327
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1333
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 174:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1338
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1343
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1348
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1353
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1358
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1363
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 180:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1367
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1372
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 182:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1376
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 183:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1381
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 184:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1387
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1395
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1399
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1403
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1409
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1413
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1418
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1422
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1427
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1433
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1439
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1444
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1449
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1455
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1463
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 200:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1470
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1474
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1478
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 203:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1482
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1486
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 207:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1497
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 209:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1504
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1508
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1514
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1518
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1522
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1526
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1530
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1534
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1538
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1543
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1547
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1551
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1555
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1559
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1566
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1570
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1574
		{
			psqVAL.str = ast.Big5Str
		}
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1578
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 227:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1582
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1586
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1590
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1594
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1598
		{
			psqVAL.str = ast.Cp850Str
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1602
		{
			psqVAL.str = ast.Cp852Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1606
		{
			psqVAL.str = ast.Cp866Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1610
		{
			psqVAL.str = ast.Cp932Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1614
		{
			psqVAL.str = ast.Dec8Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1618
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1622
		{
			psqVAL.str = ast.EuckrStr
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1626
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1630
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1634
		{
			psqVAL.str = ast.GbkStr
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1638
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1642
		{
			psqVAL.str = ast.GreekStr
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1646
		{
			psqVAL.str = ast.HebrewStr
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1650
		{
			psqVAL.str = ast.Hp8Str
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1654
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1658
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1662
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1666
		{
			psqVAL.str = ast.Latin1Str
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1670
		{
			psqVAL.str = ast.Latin2Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1674
		{
			psqVAL.str = ast.Latin5Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1678
		{
			psqVAL.str = ast.Latin7Str
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1682
		{
			psqVAL.str = ast.MacceStr
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1686
		{
			psqVAL.str = ast.MacromanStr
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1690
		{
			psqVAL.str = ast.SjisStr
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1694
		{
			psqVAL.str = ast.Swe7Str
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1698
		{
			psqVAL.str = ast.Tis620Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1702
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1706
		{
			psqVAL.str = ast.UjisStr
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1710
		{
			psqVAL.str = ast.Utf16Str
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1714
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1718
		{
			psqVAL.str = ast.Utf32Str
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1722
		{
			psqVAL.str = ast.Utf8Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1726
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1730
		{
			psqVAL.str = ast.Utf8Str
		}
	case 267:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1740
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1744
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1748
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1754
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1758
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 272:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1762
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1768
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1772
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1779
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1783
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1787
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1791
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1797
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 283:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1808
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 284:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1813
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1819
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1823
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1827
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1831
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1835
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1839
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1843
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1847
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1851
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1857
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 295:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1863
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 296:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1869
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 297:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1875
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 298:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1881
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 299:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1889
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 300:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1893
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1897
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1901
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1905
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 304:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1911
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 305:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1915
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 306:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1921
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 307:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1925
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1929
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1933
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1937
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 311:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1941
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1945
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 313:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1949
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1953
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 315:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1957
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1961
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 317:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1965
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 318:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1969
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 319:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1974
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 320:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1980
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1984
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1988
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1992
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1996
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2000
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2004
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2008
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2014
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 329:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2019
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 330:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2024
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 331:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2028
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 332:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2033
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 333:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2038
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2043
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 335:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2047
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2051
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2056
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 338:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2060
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 339:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2065
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 340:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2069
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2073
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2077
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 343:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2081
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 344:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2086
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2091
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 346:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2096
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2101
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 348:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2107
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 349:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2111
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 350:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2116
		{
			psqVAL.str = ""
		}
	case 351:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2120
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2124
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 353:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2131
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 354:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2136
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2140
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2146
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 357:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2150
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 358:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2156
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 359:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2160
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2164
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2168
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2172
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2178
		{
			psqVAL.str = ""
		}
	case 364:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2182
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 365:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2188
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 366:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2192
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2196
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2200
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2204
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2209
		{
			psqVAL.str = ""
		}
	case 371:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2213
		{
			psqVAL.str = psqDollar[2].str
		}
	case 372:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2219
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 373:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2223
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 374:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2227
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2234
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2238
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 377:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2243
		{
			psqVAL.str = "key"
		}
	case 378:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2247
		{
			psqVAL.str = psqDollar[1].str
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2253
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2257
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2262
		{
			psqVAL.str = ""
		}
	case 382:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2266
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2272
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 384:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2276
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 385:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2282
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 386:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2286
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2292
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2296
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2302
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2306
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2312
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2318
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2322
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2326
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2330
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2334
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2339
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2343
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2349
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2355
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2361
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2365
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2369
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2374
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2378
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2384
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2390
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2396
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2400
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2404
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2408
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2412
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2417
		{
			psqVAL.str = ""
		}
	case 414:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2421
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2425
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2431
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 417:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2435
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2440
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2444
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2449
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2453
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2459
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2463
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 424:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2467
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2473
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 426:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2477
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 427:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2483
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 428:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2487
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2491
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2495
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2499
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2503
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2507
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2511
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2515
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2519
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2523
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2527
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2531
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2535
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2539
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2544
		{
			psqVAL.str = ""
		}
	case 443:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2548
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2552
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 454:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2571
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2575
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2579
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 457:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2584
		{
			psqVAL.str = ""
		}
	case 459:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2590
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 460:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2594
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2599
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2603
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2608
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2612
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2616
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 466:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2620
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 467:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2624
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 468:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2628
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2634
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2638
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 471:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2642
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 472:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2648
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 473:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2652
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2656
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2660
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2664
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 477:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2668
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2672
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2676
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2680
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2684
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2689
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2694
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2698
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2702
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2706
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2710
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2714
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2718
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2722
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2726
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2730
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2734
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2738
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2742
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2746
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2750
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2754
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2758
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2762
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2766
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2772
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2776
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 504:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2782
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2786
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2790
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2794
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2798
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2802
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2806
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2810
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2814
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2818
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2824
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2830
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Algorithm: psqDollar[3].str, Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2840
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2847
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2859
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2869
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2873
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2877
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2890
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2900
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2904
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:2917
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2923
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2929
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2933
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 529:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2939
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2943
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2949
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2955
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2961
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2967
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2973
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2977
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2981
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2985
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:2991
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:2997
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3003
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3007
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3011
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3017
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3023
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3027
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 547:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3033
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3037
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, psqDollar[7].alterOptionsUnion()...)}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}}, psqDollar[7].alterOptionsUnion()...)}
			}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3046
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3050
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3056
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3060
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3065
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3071
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3075
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3079
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3083
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3087
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3091
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3095
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3099
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3103
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3107
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3111
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3115
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3119
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3123
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3127
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3131
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3135
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3139
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3143
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3147
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3151
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3155
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3159
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3163
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3167
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3171
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3175
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3179
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3183
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3187
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3191
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3195
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3202
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3206
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3210
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3214
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3218
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3222
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3226
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3230
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3236
		{
			psqVAL.str = ""
		}
	case 595:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3240
		{
			psqVAL.str = "extended "
		}
	case 596:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3246
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3250
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3256
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 599:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3260
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 600:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3266
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 601:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3270
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 602:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3274
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 603:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3280
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 604:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3284
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3288
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3294
		{
			psqVAL.empty = struct{}{}
		}
	case 607:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3298
		{
			psqVAL.empty = struct{}{}
		}
	case 608:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3302
		{
			psqVAL.empty = struct{}{}
		}
	case 609:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3308
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 610:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3312
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 611:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3318
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 612:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3322
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3326
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3332
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3336
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3342
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3348
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3352
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3357
		{
			psqVAL.empty = struct{}{}
		}
	case 620:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3359
		{
			psqVAL.empty = struct{}{}
		}
	case 621:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3362
		{
			psqVAL.empty = struct{}{}
		}
	case 622:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3364
		{
			psqVAL.empty = struct{}{}
		}
	case 623:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3369
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 624:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3375
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3380
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3384
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 627:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3388
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3392
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3396
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3400
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 631:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3406
		{
			psqVAL.str = psqDollar[1].str
		}
	case 632:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3410
		{
			psqVAL.str = psqDollar[1].str
		}
	case 633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3414
		{
			psqVAL.str = psqDollar[1].str
		}
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3420
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 635:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3424
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3428
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3432
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 638:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3437
		{
			psqVAL.str = ""
		}
	case 639:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3441
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3445
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 641:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3451
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 642:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3455
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3461
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3465
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3471
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3477
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3481
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 648:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3487
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 649:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3493
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3497
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3501
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 652:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3505
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3511
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3517
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3521
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3525
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3529
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3533
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3537
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3543
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 661:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3547
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 662:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3553
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 663:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3557
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 664:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3561
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 665:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3565
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3569
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 667:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3573
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 668:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3577
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 669:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3581
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 670:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3585
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3589
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3593
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 673:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3598
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 674:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3602
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3606
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3611
		{
			psqVAL.str = ""
		}
	case 677:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3615
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 678:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3620
		{
			setAllowComments(psqlex, true)
		}
	case 679:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3624
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 680:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3630
		{
			psqVAL.strs = nil
		}
	case 681:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3634
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 682:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3640
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 683:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3644
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3648
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 685:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3653
		{
			psqVAL.str = ""
		}
	case 686:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3657
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 687:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3661
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 688:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3666
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3670
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3674
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3680
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3684
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3696
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 694:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3701
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 695:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3705
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 696:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3711
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3715
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3720
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3724
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 700:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3729
		{
			psqVAL.strs = nil
		}
	case 701:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3733
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 702:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3737
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 703:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3741
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 704:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3745
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 705:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3751
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 706:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3755
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 707:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3759
		{
			psqVAL.str = ast.DistinctStr
		}
	case 708:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3763
		{
			psqVAL.str = ast.DistinctStr
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3767
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 710:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3771
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 711:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3775
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 712:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3781
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 713:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3785
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3791
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 715:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3795
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 716:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3799
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 717:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3803
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 718:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3808
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 719:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3812
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 720:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3816
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 722:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3823
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 723:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3828
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 724:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3832
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3838
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3844
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3848
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 730:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3858
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 731:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3862
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3866
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 733:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3870
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3876
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3880
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:3886
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 737:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3891
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 738:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3895
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3901
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3905
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 741:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3911
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 742:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3915
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 743:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3921
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3925
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 745:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3929
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 746:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3933
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 747:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3946
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 748:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3950
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 749:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3954
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 750:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3958
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 751:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3964
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 752:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3966
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 753:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3970
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 754:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3972
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 755:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3976
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 756:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3978
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 757:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3981
		{
			psqVAL.empty = struct{}{}
		}
	case 758:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3983
		{
			psqVAL.empty = struct{}{}
		}
	case 759:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3986
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 760:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3990
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 761:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3994
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 763:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4001
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 764:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4007
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 765:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4011
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 766:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4015
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 767:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4021
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 768:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4027
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4031
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4035
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4039
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4045
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 773:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4049
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4059
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 775:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4063
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 776:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4069
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 777:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4073
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 778:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4079
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 779:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4084
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 780:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4088
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 781:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4094
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4098
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 783:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4104
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 784:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4108
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 785:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4112
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4116
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 787:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4121
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 788:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4125
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4129
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 790:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4133
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 791:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4139
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 792:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4143
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4150
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4154
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4158
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 796:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4162
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4166
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4170
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4177
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4181
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 801:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4185
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 802:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4189
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4195
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4199
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4203
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4207
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4211
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4215
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4219
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4223
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4227
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4231
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4235
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4239
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4245
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4249
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4253
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4257
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4261
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4265
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4269
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4273
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4277
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4281
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4285
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4289
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4293
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4299
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4303
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4307
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4311
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4315
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4319
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4323
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4327
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4331
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4335
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4339
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4343
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4347
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4351
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4355
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4359
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4363
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4367
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4371
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4379
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4383
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4391
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4395
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4401
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4405
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4409
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4415
		{
			psqVAL.str = ""
		}
	case 855:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4419
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 856:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4425
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4429
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4436
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4440
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4444
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4448
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4454
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4458
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4462
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4466
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4470
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4474
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4478
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4484
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4488
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4492
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4499
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4505
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4509
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 875:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4519
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4523
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4527
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4531
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4541
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4545
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4549
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4553
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4557
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4561
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4565
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4569
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4573
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4577
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4588
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4592
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4598
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4602
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4607
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4611
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4615
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4619
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4623
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4627
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4631
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4635
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4639
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4643
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4647
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4651
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4655
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4659
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4663
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4667
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4671
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4675
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4679
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4683
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4687
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4691
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4695
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4699
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4703
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4707
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4711
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4715
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4719
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4723
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4727
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4731
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4735
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4739
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4743
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4747
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4751
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4755
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4759
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4763
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4767
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4771
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4775
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4779
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4784
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4788
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4793
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4797
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4803
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4807
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 943:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4813
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 944:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4817
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 945:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4823
		{
		}
	case 946:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4825
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4829
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 948:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4833
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4837
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4841
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4845
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4849
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4853
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4857
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4861
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4865
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4871
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4875
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4879
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4883
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4887
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4891
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4895
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4899
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4903
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4913
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4917
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4921
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4932
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4936
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4940
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4944
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4948
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4954
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4958
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4962
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4966
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4970
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4976
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 982:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4980
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 983:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4984
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 984:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4990
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4996
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 986:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5000
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5004
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5008
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5012
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5018
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5022
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5026
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5030
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5034
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5038
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5042
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5046
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5050
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5054
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5060
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5064
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5069
		{
			psqVAL.str = string("")
		}
	case 1003:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5073
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1004:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5079
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5083
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1006:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5089
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5094
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1008:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5098
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5104
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5108
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5112
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5118
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5127
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1014:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5133
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5137
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5142
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5146
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5151
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5155
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5161
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5167
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5171
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1023:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5177
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5182
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5186
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5190
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5195
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5199
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5205
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5209
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5213
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5218
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5222
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5226
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5230
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5234
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5241
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5245
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5249
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5253
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5259
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5263
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5267
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5271
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5276
		{
			psqVAL.str = ""
		}
	case 1046:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5280
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1047:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5284
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1048:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5288
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1049:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5293
		{
			psqVAL.str = ""
		}
	case 1050:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5297
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1051:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5303
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1052:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5307
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1053:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5312
		{
			psqVAL.str = ""
		}
	case 1054:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5316
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1055:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5321
		{
			psqVAL.str = "cascaded"
		}
	case 1056:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5325
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1057:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5329
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1058:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5334
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1059:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5338
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5344
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1061:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5350
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1062:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5356
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5365
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1064:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5369
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1065:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5374
		{
			psqVAL.str = ""
		}
	case 1066:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5378
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1067:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5384
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5388
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1069:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5394
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5407
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5411
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1072:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5415
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5419
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5423
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5429
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5433
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1077:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5437
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1078:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5441
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1079:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5446
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1080:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5450
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5456
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1082:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5460
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1083:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5466
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1084:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5470
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1085:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5476
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1086:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5481
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1087:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5491
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1088:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5495
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1089:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5501
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5507
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5511
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1092:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5517
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1093:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5521
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1094:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5525
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5529
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1096:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5533
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5541
		{
			psqVAL.str = "charset"
		}
	case 1101:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5551
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5555
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5559
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5568
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5570
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1108:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5573
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5575
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1110:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5578
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1111:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5580
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1112:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5583
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5585
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5588
		{
			psqVAL.empty = struct{}{}
		}
	case 1115:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5590
		{
			psqVAL.empty = struct{}{}
		}
	case 1116:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5592
		{
			psqVAL.empty = struct{}{}
		}
	case 1117:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5596
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1118:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5601
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1119:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5605
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1120:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5610
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5612
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1122:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5616
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1123:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5622
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5626
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5633
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1127:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5639
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1128:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5643
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1129:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5649
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1130:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5653
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1132:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5660
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1624:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6176
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1625:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6185
		{
			decNesting(psqlex)
		}
	case 1626:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6190
		{
			skipToEnd(psqlex)
		}
	case 1627:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6195
		{
			skipToEnd(psqlex)
		}
	case 1628:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6199
		{
			skipToEnd(psqlex)
		}
	case 1629:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6203
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
