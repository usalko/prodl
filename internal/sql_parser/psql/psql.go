// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:18
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:18

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const ARRAY_MAX_CARDINALITY = 57642
const CHARACTER_SET_CATALOG = 57643
const COMMAND_FUNCTION_CODE = 57644
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57645
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57646
const DATETIME_INTERVAL_CODE = 57647
const DATETIME_INTERVAL_PRECISION = 57648
const DYNAMIC_FUNCTION_CODE = 57649
const END_EXEC = 57650
const PARAMETER_ORDINAL_POSITION = 57651
const PARAMETER_SPECIFIC_CATALOG = 57652
const PARAMETER_SPECIFIC_NAME = 57653
const PARAMETER_SPECIFIC_SCHEMA = 57654
const RETURNED_OCTET_LENGTH = 57655
const TRANSACTIONS_COMMITTED = 57656
const TRANSACTIONS_ROLLED_BACK = 57657
const USER_DEFINED_TYPE_CATALOG = 57658
const USER_DEFINED_TYPE_CODE = 57659
const USER_DEFINED_TYPE_NAME = 57660
const USER_DEFINED_TYPE_SCHEMA = 57661
const VALUES = 57662
const LAST_INSERT_ID = 57663
const NEXT = 57664
const VALUE = 57665
const SHARE = 57666
const MODE = 57667
const SQL_NO_CACHE = 57668
const SQL_CACHE = 57669
const SQL_CALC_FOUND_ROWS = 57670
const JOIN = 57671
const STRAIGHT_JOIN = 57672
const LEFT = 57673
const RIGHT = 57674
const INNER = 57675
const OUTER = 57676
const CROSS = 57677
const NATURAL = 57678
const USE = 57679
const FORCE = 57680
const ON = 57681
const USING = 57682
const INPLACE = 57683
const COPY = 57684
const INSTANT = 57685
const ALGORITHM = 57686
const NONE = 57687
const SHARED = 57688
const EXCLUSIVE = 57689
const SUBQUERY_AS_EXPR = 57690
const ID = 57691
const AT_ID = 57692
const AT_AT_ID = 57693
const HEX = 57694
const STRING = 57695
const NCHAR_STRING = 57696
const INTEGRAL = 57697
const FLOAT = 57698
const DECIMAL = 57699
const HEXNUM = 57700
const VALUE_ARG = 57701
const LIST_ARG = 57702
const COMMENT_KEYWORD = 57703
const BIT_LITERAL = 57704
const COMPRESSION = 57705
const JSON_PRETTY = 57706
const JSON_STORAGE_SIZE = 57707
const JSON_STORAGE_FREE = 57708
const JSON_CONTAINS = 57709
const JSON_CONTAINS_PATH = 57710
const JSON_EXTRACT = 57711
const JSON_KEYS = 57712
const JSON_OVERLAPS = 57713
const JSON_SEARCH = 57714
const JSON_VALUE = 57715
const EXTRACT = 57716
const NULL = 57717
const TRUE = 57718
const FALSE = 57719
const OFF = 57720
const DISCARD = 57721
const IMPORT = 57722
const ENABLE = 57723
const DISABLE = 57724
const TABLESPACE = 57725
const VIRTUAL = 57726
const STORED = 57727
const BOTH = 57728
const LEADING = 57729
const TRAILING = 57730
const EMPTY_FROM_CLAUSE = 57731
const LOWER_THAN_CHARSET = 57732
const CHARSET = 57733
const UNIQUE = 57734
const KEY = 57735
const EXPRESSION_PREC_SETTER = 57736
const OR = 57737
const AND = 57738
const NOT = 57739
const BETWEEN = 57740
const CASE = 57741
const WHEN = 57742
const THEN = 57743
const ELSE = 57744
const END = 57745
const LE = 57746
const GE = 57747
const NE = 57748
const NULL_SAFE_EQUAL = 57749
const IS = 57750
const LIKE = 57751
const REGEXP = 57752
const IN = 57753
const SHIFT_LEFT = 57754
const SHIFT_RIGHT = 57755
const DIV = 57756
const MOD = 57757
const UNARY = 57758
const COLLATE = 57759
const BINARY = 57760
const UNDERSCORE_ARMSCII8 = 57761
const UNDERSCORE_ASCII = 57762
const UNDERSCORE_BIG5 = 57763
const UNDERSCORE_BINARY = 57764
const UNDERSCORE_CP1250 = 57765
const UNDERSCORE_CP1251 = 57766
const UNDERSCORE_CP1256 = 57767
const UNDERSCORE_CP1257 = 57768
const UNDERSCORE_CP850 = 57769
const UNDERSCORE_CP852 = 57770
const UNDERSCORE_CP866 = 57771
const UNDERSCORE_CP932 = 57772
const UNDERSCORE_DEC8 = 57773
const UNDERSCORE_EUCJPMS = 57774
const UNDERSCORE_EUCKR = 57775
const UNDERSCORE_GB18030 = 57776
const UNDERSCORE_GB2312 = 57777
const UNDERSCORE_GBK = 57778
const UNDERSCORE_GEOSTD8 = 57779
const UNDERSCORE_GREEK = 57780
const UNDERSCORE_HEBREW = 57781
const UNDERSCORE_HP8 = 57782
const UNDERSCORE_KEYBCS2 = 57783
const UNDERSCORE_KOI8R = 57784
const UNDERSCORE_KOI8U = 57785
const UNDERSCORE_LATIN1 = 57786
const UNDERSCORE_LATIN2 = 57787
const UNDERSCORE_LATIN5 = 57788
const UNDERSCORE_LATIN7 = 57789
const UNDERSCORE_MACCE = 57790
const UNDERSCORE_MACROMAN = 57791
const UNDERSCORE_SJIS = 57792
const UNDERSCORE_SWE7 = 57793
const UNDERSCORE_TIS620 = 57794
const UNDERSCORE_UCS2 = 57795
const UNDERSCORE_UJIS = 57796
const UNDERSCORE_UTF16 = 57797
const UNDERSCORE_UTF16LE = 57798
const UNDERSCORE_UTF32 = 57799
const UNDERSCORE_UTF8 = 57800
const UNDERSCORE_UTF8MB4 = 57801
const UNDERSCORE_UTF8MB3 = 57802
const INTERVAL = 57803
const JSON_EXTRACT_OP = 57804
const JSON_UNQUOTE_EXTRACT_OP = 57805
const CREATE = 57806
const ALTER = 57807
const DROP = 57808
const RENAME = 57809
const ANALYZE = 57810
const ANALYSE = 57811
const ADD = 57812
const FLUSH = 57813
const CHANGE = 57814
const MODIFY = 57815
const DEALLOCATE = 57816
const REVERT = 57817
const SCHEMA = 57818
const TABLE = 57819
const INDEX = 57820
const VIEW = 57821
const TO = 57822
const IGNORE = 57823
const IF = 57824
const PRIMARY = 57825
const COLUMN = 57826
const SPATIAL = 57827
const FULLTEXT = 57828
const KEY_BLOCK_SIZE = 57829
const CHECK = 57830
const INDEXES = 57831
const ACTION = 57832
const CASCADE = 57833
const CONSTRAINT = 57834
const FOREIGN = 57835
const NO = 57836
const REFERENCES = 57837
const RESTRICT = 57838
const SHOW = 57839
const DESCRIBE = 57840
const EXPLAIN = 57841
const DATE = 57842
const ESCAPE = 57843
const REPAIR = 57844
const OPTIMIZE = 57845
const TRUNCATE = 57846
const COALESCE = 57847
const EXCHANGE = 57848
const REBUILD = 57849
const PARTITIONING = 57850
const REMOVE = 57851
const PREPARE = 57852
const EXECUTE = 57853
const MAXVALUE = 57854
const PARTITION = 57855
const REORGANIZE = 57856
const LESS = 57857
const THAN = 57858
const PROCEDURE = 57859
const TRIGGER = 57860
const VINDEX = 57861
const VINDEXES = 57862
const DIRECTORY = 57863
const NAME = 57864
const UPGRADE = 57865
const STATUS = 57866
const VARIABLES = 57867
const WARNINGS = 57868
const CASCADED = 57869
const DEFINER = 57870
const OPTION = 57871
const SQL = 57872
const UNDEFINED = 57873
const SEQUENCE = 57874
const MERGE = 57875
const TEMPORARY = 57876
const TEMPTABLE = 57877
const INVOKER = 57878
const SECURITY = 57879
const FIRST = 57880
const AFTER = 57881
const LAST = 57882
const CANCEL = 57883
const RETRY = 57884
const COMPLETE = 57885
const CLEANUP = 57886
const THROTTLE = 57887
const UNTHROTTLE = 57888
const EXPIRE = 57889
const RATIO = 57890
const BEGIN = 57891
const START = 57892
const TRANSACTION = 57893
const COMMIT = 57894
const ROLLBACK = 57895
const SAVEPOINT = 57896
const RELEASE = 57897
const WORK = 57898
const BIT = 57899
const TINYINT = 57900
const SMALLINT = 57901
const MEDIUMINT = 57902
const INT = 57903
const INTEGER = 57904
const BIGINT = 57905
const INTNUM = 57906
const REAL = 57907
const DOUBLE = 57908
const FLOAT_TYPE = 57909
const DECIMAL_TYPE = 57910
const NUMERIC = 57911
const TIME = 57912
const TIMESTAMP = 57913
const DATETIME = 57914
const YEAR = 57915
const CHAR = 57916
const VARCHAR = 57917
const BOOL = 57918
const CHARACTER = 57919
const VARBINARY = 57920
const NCHAR = 57921
const TEXT = 57922
const TINYTEXT = 57923
const MEDIUMTEXT = 57924
const LONGTEXT = 57925
const BLOB = 57926
const TINYBLOB = 57927
const MEDIUMBLOB = 57928
const LONGBLOB = 57929
const JSON = 57930
const JSON_SCHEMA_VALID = 57931
const JSON_SCHEMA_VALIDATION_REPORT = 57932
const ENUM = 57933
const GEOMETRY = 57934
const POINT = 57935
const LINESTRING = 57936
const POLYGON = 57937
const GEOMETRYCOLLECTION = 57938
const MULTIPOINT = 57939
const MULTILINESTRING = 57940
const MULTIPOLYGON = 57941
const ASCII = 57942
const UNICODE = 57943
const NULLX = 57944
const AUTO_INCREMENT = 57945
const APPROXNUM = 57946
const SIGNED = 57947
const UNSIGNED = 57948
const ZEROFILL = 57949
const CODE = 57950
const COLLATION = 57951
const COLUMNS = 57952
const DATABASES = 57953
const ENGINES = 57954
const EVENT = 57955
const EXTENDED = 57956
const FIELDS = 57957
const FULL = 57958
const FUNCTION = 57959
const GTID_EXECUTED = 57960
const KEYSPACES = 57961
const OPEN = 57962
const PLUGINS = 57963
const PRIVILEGES = 57964
const PROCESSLIST = 57965
const SCHEMAS = 57966
const TABLES = 57967
const TRIGGERS = 57968
const USER = 57969
const VGTID_EXECUTED = 57970
const VSCHEMA = 57971
const NAMES = 57972
const GLOBAL = 57973
const SESSION = 57974
const ISOLATION = 57975
const LEVEL = 57976
const READ = 57977
const WRITE = 57978
const ONLY = 57979
const REPEATABLE = 57980
const COMMITTED = 57981
const UNCOMMITTED = 57982
const SERIALIZABLE = 57983
const CURRENT_TIMESTAMP = 57984
const DATABASE = 57985
const CURRENT_DATE = 57986
const NOW = 57987
const CURRENT_TIME = 57988
const LOCALTIME = 57989
const LOCALTIMESTAMP = 57990
const CURRENT_USER = 57991
const UTC_DATE = 57992
const UTC_TIME = 57993
const UTC_TIMESTAMP = 57994
const DAY = 57995
const DAY_HOUR = 57996
const DAY_MICROSECOND = 57997
const DAY_MINUTE = 57998
const DAY_SECOND = 57999
const HOUR = 58000
const HOUR_MICROSECOND = 58001
const HOUR_MINUTE = 58002
const HOUR_SECOND = 58003
const MICROSECOND = 58004
const MINUTE = 58005
const MINUTE_MICROSECOND = 58006
const MINUTE_SECOND = 58007
const MONTH = 58008
const QUARTER = 58009
const SECOND = 58010
const SECOND_MICROSECOND = 58011
const YEAR_MONTH = 58012
const WEEK = 58013
const REPLACE = 58014
const CONVERT = 58015
const CAST = 58016
const SUBSTR = 58017
const SUBSTRING = 58018
const GROUP_CONCAT = 58019
const SEPARATOR = 58020
const TIMESTAMPADD = 58021
const TIMESTAMPDIFF = 58022
const WEIGHT_STRING = 58023
const LTRIM = 58024
const RTRIM = 58025
const TRIM = 58026
const JSON_ARRAY = 58027
const JSON_OBJECT = 58028
const JSON_QUOTE = 58029
const JSON_DEPTH = 58030
const JSON_TYPE = 58031
const JSON_LENGTH = 58032
const JSON_VALID = 58033
const JSON_ARRAY_APPEND = 58034
const JSON_ARRAY_INSERT = 58035
const JSON_INSERT = 58036
const JSON_MERGE = 58037
const JSON_MERGE_PATCH = 58038
const JSON_MERGE_PRESERVE = 58039
const JSON_REMOVE = 58040
const JSON_REPLACE = 58041
const JSON_SET = 58042
const JSON_UNQUOTE = 58043
const MATCH = 58044
const AGAINST = 58045
const BOOLEAN = 58046
const LANGUAGE = 58047
const WITH = 58048
const QUERY = 58049
const EXPANSION = 58050
const WITHOUT = 58051
const VALIDATION = 58052
const UNUSED = 58053
const ARRAY = 58054
const BYTE = 58055
const CUME_DIST = 58056
const DESCRIPTION = 58057
const DENSE_RANK = 58058
const EMPTY = 58059
const EXCEPT = 58060
const FIRST_VALUE = 58061
const GROUPING = 58062
const GROUPS = 58063
const JSON_TABLE = 58064
const LAG = 58065
const LAST_VALUE = 58066
const LATERAL = 58067
const LEAD = 58068
const NTH_VALUE = 58069
const NTILE = 58070
const OF = 58071
const OVER = 58072
const PERCENT_RANK = 58073
const RANK = 58074
const RECURSIVE = 58075
const ROW_NUMBER = 58076
const SYSTEM = 58077
const WINDOW = 58078
const ACTIVE = 58079
const ADMIN = 58080
const AUTOEXTEND_SIZE = 58081
const BUCKETS = 58082
const CLONE = 58083
const COLUMN_FORMAT = 58084
const COMPONENT = 58085
const DEFINITION = 58086
const ENFORCED = 58087
const ENGINE_ATTRIBUTE = 58088
const EXCLUDE = 58089
const FOLLOWING = 58090
const GEOMCOLLECTION = 58091
const GET_MASTER_PUBLIC_KEY = 58092
const HISTOGRAM = 58093
const HISTORY = 58094
const INACTIVE = 58095
const INVISIBLE = 58096
const LOCKED = 58097
const MASTER_COMPRESSION_ALGORITHMS = 58098
const MASTER_PUBLIC_KEY_PATH = 58099
const MASTER_TLS_CIPHERSUITES = 58100
const MASTER_ZSTD_COMPRESSION_LEVEL = 58101
const NESTED = 58102
const NETWORK_NAMESPACE = 58103
const NOWAIT = 58104
const NULLS = 58105
const OJ = 58106
const OLD = 58107
const OPTIONAL = 58108
const ORDINALITY = 58109
const ORGANIZATION = 58110
const OTHERS = 58111
const PARTIAL = 58112
const PATH = 58113
const PERSIST = 58114
const PERSIST_ONLY = 58115
const PRECEDING = 58116
const PRIVILEGE_CHECKS_USER = 58117
const PROCESS = 58118
const RANDOM = 58119
const REFERENCE = 58120
const REQUIRE_ROW_FORMAT = 58121
const RESOURCE = 58122
const RESPECT = 58123
const RESTART = 58124
const RETAIN = 58125
const REUSE = 58126
const ROLE = 58127
const SECONDARY = 58128
const SECONDARY_ENGINE = 58129
const SECONDARY_ENGINE_ATTRIBUTE = 58130
const SECONDARY_LOAD = 58131
const SECONDARY_UNLOAD = 58132
const SIMPLE = 58133
const SKIP = 58134
const SRID = 58135
const THREAD_PRIORITY = 58136
const TIES = 58137
const UNBOUNDED = 58138
const VCPU = 58139
const VISIBLE = 58140
const RETURNING = 58141
const FORMAT = 58142
const TREE = 58143
const TRADITIONAL = 58144
const LOCAL = 58145
const LOW_PRIORITY = 58146
const NO_WRITE_TO_BINLOG = 58147
const LOGS = 58148
const ERROR = 58149
const GENERAL = 58150
const HOSTS = 58151
const OPTIMIZER_COSTS = 58152
const USER_RESOURCES = 58153
const SLOW = 58154
const CHANNEL = 58155
const RELAY = 58156
const EXPORT = 58157
const AVG_ROW_LENGTH = 58158
const CONNECTION = 58159
const CHECKSUM = 58160
const DELAY_KEY_WRITE = 58161
const ENCRYPTION = 58162
const INSERT_METHOD = 58163
const MAX_ROWS = 58164
const MIN_ROWS = 58165
const PACK_KEYS = 58166
const PASSWORD = 58167
const FIXED = 58168
const DYNAMIC = 58169
const COMPRESSED = 58170
const REDUNDANT = 58171
const COMPACT = 58172
const ROW_FORMAT = 58173
const STATS_AUTO_RECALC = 58174
const STATS_PERSISTENT = 58175
const STATS_SAMPLE_PAGES = 58176
const STORAGE = 58177
const MEMORY = 58178
const DISK = 58179

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	38, 679,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	1, 140,
	855, 140,
	-2, 148,
	-1, 48,
	1, 464,
	855, 464,
	-2, 148,
	-1, 55,
	35, 595,
	495, 595,
	506, 595,
	541, 607,
	542, 607,
	-2, 597,
	-1, 60,
	497, 620,
	-2, 618,
	-1, 114,
	494, 1111,
	-2, 114,
	-1, 116,
	1, 141,
	855, 141,
	-2, 148,
	-1, 127,
	394, 148,
	433, 148,
	594, 148,
	-2, 473,
	-1, 128,
	395, 371,
	500, 371,
	-2, 458,
	-1, 720,
	478, 1134,
	-2, 1128,
	-1, 721,
	478, 1135,
	-2, 1129,
	-1, 722,
	478, 1136,
	-2, 1130,
	-1, 733,
	349, 1311,
	478, 1311,
	479, 1311,
	480, 1311,
	-2, 270,
	-1, 734,
	349, 1352,
	478, 1352,
	479, 1352,
	480, 1352,
	-2, 269,
	-1, 735,
	349, 1563,
	478, 1563,
	479, 1563,
	480, 1563,
	-2, 271,
	-1, 798,
	322, 689,
	-2, 704,
	-1, 832,
	409, 1541,
	-2, 107,
	-1, 833,
	409, 1360,
	-2, 108,
	-1, 839,
	409, 1436,
	-2, 1105,
	-1, 980,
	505, 41,
	510, 41,
	-2, 382,
	-1, 1036,
	1, 517,
	855, 517,
	-2, 148,
	-1, 1235,
	478, 1563,
	-2, 273,
	-1, 1261,
	322, 690,
	-2, 709,
	-1, 1262,
	322, 691,
	-2, 710,
	-1, 1311,
	1, 421,
	855, 421,
	-2, 148,
	-1, 1391,
	505, 42,
	510, 42,
	-2, 383,
	-1, 1650,
	478, 1140,
	-2, 1132,
	-1, 1726,
	1, 1098,
	350, 1098,
	855, 1098,
	-2, 1458,
	-1, 1731,
	1, 422,
	855, 422,
	-2, 148,
	-1, 1737,
	349, 380,
	352, 380,
	353, 380,
	354, 380,
	-2, 1379,
	-1, 1738,
	349, 381,
	352, 381,
	353, 381,
	354, 381,
	-2, 1406,
	-1, 1740,
	25, 169,
	-2, 171,
	-1, 1962,
	350, 39,
	-2, 745,
	-1, 2011,
	340, 91,
	350, 91,
	-2, 764,
	-1, 2369,
	350, 39,
	-2, 746,
	-1, 2393,
	7, 53,
	18, 53,
	20, 53,
	351, 53,
	-2, 738,
	-1, 2586,
	22, 1439,
	32, 1439,
	434, 1439,
	517, 1439,
	574, 1439,
	575, 1439,
	576, 1439,
	577, 1439,
	578, 1439,
	579, 1439,
	580, 1439,
	582, 1439,
	583, 1439,
	584, 1439,
	585, 1439,
	586, 1439,
	587, 1439,
	588, 1439,
	589, 1439,
	590, 1439,
	591, 1439,
	592, 1439,
	593, 1439,
	595, 1439,
	597, 1439,
	598, 1439,
	599, 1439,
	600, 1439,
	601, 1439,
	602, 1439,
	603, 1439,
	604, 1439,
	605, 1439,
	608, 1439,
	609, 1439,
	610, 1439,
	611, 1439,
	612, 1439,
	613, 1439,
	614, 1439,
	615, 1439,
	616, 1439,
	721, 1439,
	-2, 536,
}

const psqPrivate = 57344

const psqLast = 48533

var psqAct = [...]int{
	720, 2463, 2640, 730, 2464, 2537, 2613, 2462, 1728, 2614,
	723, 2584, 1314, 2441, 2161, 2302, 2568, 1664, 2242, 2249,
	1915, 1240, 2502, 713, 37, 1090, 3, 1276, 2523, 1980,
	2255, 638, 1976, 1983, 791, 2125, 714, 2160, 724, 1684,
	711, 712, 2159, 642, 664, 96, 810, 635, 2285, 2384,
	1984, 162, 2005, 1981, 162, 2108, 602, 162, 1766, 2049,
	2365, 1770, 616, 2072, 162, 2051, 144, 636, 1717, 1787,
	945, 2050, 2040, 162, 1749, 1813, 634, 1994, 36, 1706,
	1011, 1978, 811, 1802, 1263, 1397, 1705, 162, 837, 630,
	1953, 125, 1644, 1620, 1550, 162, 1561, 1786, 1619, 1690,
	1829, 795, 1509, 799, 1772, 1389, 2045, 2013, 1303, 616,
	38, 1282, 616, 162, 616, 946, 647, 1665, 1708, 1463,
	95, 813, 793, 1244, 1573, 1172, 1526, 1109, 1459, 1396,
	952, 981, 1784, 1448, 834, 977, 949, 978, 1300, 1750,
	953, 1286, 1302, 805, 1616, 1468, 1088, 1363, 1384, 1075,
	123, 119, 89, 1033, 2088, 2087, 158, 1827, 800, 1047,
	1437, 165, 166, 167, 145, 2413, 102, 605, 1110, 2116,
	2117, 117, 118, 1763, 824, 2556, 2557, 1110, 2467, 1515,
	121, 1661, 1662, 1514, 2245, 158, 2467, 1513, 1512, 1511,
	801, 1368, 2602, 1504, 975, 583, 628, 126, 629, 818,
	1949, 823, 1778, 605, 2079, 2352, 971, 104, 105, 121,
	108, 1817, 120, 114, 988, 2617, 159, 803, 76, 578,
	85, 2647, 1013, 1002, 91, 1008, 1774, 1018, 1019, 1020,
	97, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	788, 789, 790, 603, 976, 798, 1647, 831, 838, 165,
	166, 167, 2612, 2626, 625, 1816, 1815, 2082, 822, 1519,
	970, 1015, 98, 1014, 605, 2557, 2646, 78, 969, 2578,
	78, 2636, 2552, 826, 827, 1119, 2624, 2594, 2442, 2569,
	2577, 120, 2551, 2124, 1119, 1016, 2589, 2336, 968, 967,
	598, 2592, 1378, 2096, 1699, 78, 794, 2095, 1950, 2022,
	2598, 2599, 2021, 596, 1753, 2023, 2238, 792, 2257, 2258,
	1861, 1035, 2239, 2240, 2593, 1723, 1724, 2115, 812, 78,
	626, 158, 80, 961, 1858, 120, 963, 1304, 1087, 1305,
	1722, 1065, 2069, 1141, 1082, 786, 1084, 966, 785, 1040,
	1041, 2538, 1066, 593, 1059, 121, 2033, 141, 1743, 1742,
	1663, 605, 601, 2507, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1150, 1149, 1151, 1152, 1175, 2327, 606, 962, 2618,
	8, 1043, 2325, 1115, 1081, 1083, 1108, 1070, 1071, 1054,
	614, 2304, 1115, 7, 1055, 2043, 2044, 1179, 957, 1503,
	2619, 619, 1053, 605, 1052, 964, 802, 77, 612, 605,
	1830, 6, 2073, 606, 1803, 1431, 1505, 1506, 2297, 1449,
	2091, 1835, 2635, 2256, 1074, 1838, 2298, 1839, 1021, 1840,
	1834, 966, 2306, 958, 1832, 2259, 1067, 1250, 1060, 1153,
	960, 959, 1017, 1086, 1153, 584, 2259, 586, 2644, 1753,
	608, 2622, 607, 589, 2648, 588, 591, 599, 592, 1432,
	587, 1433, 597, 1068, 1069, 600, 1859, 595, 609, 950,
	966, 1031, 1833, 948, 606, 2305, 1836, 950, 2603, 1063,
	1079, 1072, 984, 950, 1080, 983, 993, 1460, 1010, 964,
	825, 1073, 983, 2107, 1085, 1395, 992, 1751, 1752, 1954,
	1956, 1785, 2246, 990, 2104, 1822, 1457, 1456, 1270, 2026,
	1078, 1096, 1376, 996, 965, 2274, 2090, 1375, 1374, 1372,
	582, 577, 1947, 146, 2120, 147, 2480, 2248, 2103, 1873,
	1453, 2400, 2102, 1154, 1155, 2466, 990, 2210, 1032, 2018,
	1975, 2243, 1939, 2466, 1656, 157, 1290, 1219, 1045, 2041,
	1729, 1153, 146, 1152, 147, 2237, 1076, 1469, 2257, 2258,
	808, 606, 1049, 2182, 2244, 2546, 111, 1114, 1111, 1112,
	1113, 1118, 1120, 1117, 157, 1116, 1114, 1111, 1112, 1113,
	1118, 1120, 1117, 1012, 1116, 2204, 990, 1831, 162, 2377,
	162, 1454, 1700, 162, 1306, 1777, 2250, 2144, 965, 1574,
	1394, 1106, 989, 606, 2062, 1574, 1812, 1889, 1123, 606,
	2035, 2416, 2415, 616, 1091, 616, 2373, 2093, 87, 1807,
	972, 87, 1410, 1034, 2110, 1409, 1393, 1814, 1000, 2109,
	616, 616, 1751, 1752, 112, 989, 999, 965, 2620, 610,
	1003, 983, 2401, 1776, 2414, 1005, 87, 2649, 1859, 1006,
	1004, 2110, 87, 1270, 149, 37, 2109, 1781, 1102, 2301,
	1955, 2621, 138, 2256, 1578, 1531, 1529, 2508, 140, 2453,
	87, 604, 1450, 1124, 1451, 2259, 1124, 2550, 1452, 1532,
	1533, 1530, 2420, 149, 2407, 989, 2055, 1775, 146, 2046,
	147, 983, 986, 987, 2597, 950, 1691, 1692, 1270, 980,
	984, 1875, 1825, 1124, 1124, 1466, 135, 136, 134, 133,
	157, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1149, 1151,
	1152, 1156, 1157, 1158, 1159, 1878, 1435, 1124, 1429, 1427,
	1092, 1164, 1426, 1167, 1124, 1124, 1425, 92, 2596, 1145,
	1146, 1147, 1148, 1150, 1149, 1151, 1152, 1095, 93, 2126,
	2608, 1270, 2333, 2440, 1050, 2232, 1056, 1057, 1058, 1973,
	2575, 1093, 1521, 1523, 1524, 1859, 1238, 1147, 1148, 1150,
	1149, 1151, 1152, 1865, 1866, 1867, 1160, 737, 2292, 2293,
	165, 166, 167, 2247, 1233, 1522, 1602, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1126, 1124, 162, 1973, 2565, 616,
	616, 165, 166, 167, 100, 2408, 129, 137, 139, 1973,
	2562, 128, 2058, 130, 131, 162, 165, 166, 167, 149,
	2025, 1239, 1990, 165, 166, 167, 1253, 1797, 2558, 1270,
	1257, 616, 2128, 2348, 1270, 162, 795, 1973, 2435, 1254,
	616, 1124, 2203, 165, 166, 167, 616, 1795, 1251, 1977,
	793, 1256, 165, 166, 167, 1977, 1793, 1121, 1270, 990,
	1909, 1270, 2265, 2266, 1739, 834, 1594, 1583, 1584, 1585,
	1586, 1596, 1587, 1588, 1589, 1601, 1597, 1590, 1591, 1598,
	1599, 1600, 1592, 1593, 1595, 1239, 2265, 2264, 1255, 1991,
	1270, 1969, 95, 87, 92, 2208, 1270, 2138, 2137, 2136,
	2130, 94, 2134, 1124, 2129, 93, 2127, 1121, 1124, 1876,
	1270, 2132, 101, 1904, 1245, 1859, 2089, 1979, 1885, 101,
	2131, 2545, 2251, 100, 2642, 99, 2205, 2643, 2203, 2641,
	100, 1973, 99, 1991, 2254, 1367, 2074, 2133, 2135, 1062,
	2348, 94, 2070, 2071, 1124, 1124, 1973, 1972, 2189, 1124,
	1064, 2014, 1367, 1366, 2081, 162, 1721, 1042, 989, 1364,
	1009, 1077, 1470, 1876, 1048, 1312, 1311, 1909, 1894, 1373,
	1893, 1799, 1689, 2252, 1258, 1274, 1659, 1039, 2253, 838,
	1507, 2465, 1439, 1438, 1440, 1441, 1442, 2411, 2412, 2465,
	616, 1391, 86, 148, 2650, 86, 150, 151, 2080, 1400,
	152, 153, 1105, 1402, 1403, 1124, 616, 154, 155, 156,
	81, 1296, 1297, 1408, 132, 1103, 1411, 1412, 162, 1414,
	86, 1860, 148, 1252, 1455, 150, 151, 1298, 77, 152,
	153, 794, 1275, 1104, 98, 792, 154, 155, 156, 1177,
	616, 1178, 162, 974, 86, 1401, 973, 142, 1404, 1242,
	143, 1458, 1241, 797, 616, 1407, 162, 1811, 2504, 1124,
	1388, 1379, 1380, 1381, 2052, 1181, 1270, 1122, 1277, 1123,
	1122, 162, 1123, 2516, 1270, 1383, 1405, 1124, 162, 2303,
	1124, 1270, 2542, 2495, 2483, 2418, 1369, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 616, 1122, 1122, 1123,
	1123, 2299, 616, 616, 1399, 2146, 2014, 1423, 1424, 2075,
	1124, 1758, 1428, 1225, 1226, 1227, 1228, 1229, 1757, 162,
	1371, 1122, 1446, 1123, 1392, 1365, 1141, 1398, 1122, 1122,
	1123, 1123, 113, 1386, 2505, 1385, 1876, 2053, 1390, 1377,
	1991, 2331, 1270, 1035, 1465, 1778, 1406, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1150, 1149, 1151, 1152, 148, 2385,
	2386, 150, 151, 1672, 616, 152, 153, 2632, 1558, 1558,
	2630, 2615, 154, 155, 156, 1555, 1555, 1564, 616, 1554,
	1559, 1461, 1527, 1291, 1991, 1124, 2555, 1924, 1270, 1122,
	2203, 1123, 2521, 616, 616, 1534, 2388, 1536, 969, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 120, 1471, 1472, 1525, 1124, 1535, 1475, 968, 967,
	2279, 2278, 1498, 1270, 2277, 1476, 1617, 1876, 1575, 1473,
	2063, 1979, 1483, 1484, 1485, 1122, 1477, 1123, 1479, 1480,
	1481, 1482, 1496, 1141, 2119, 1486, 1844, 2391, 1500, 1501,
	1270, 2390, 2426, 2221, 1884, 1648, 1270, 162, 2222, 2218,
	2217, 616, 1528, 1270, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1150, 1149, 1151, 1152, 1124, 1415, 2015, 2422, 1617,
	1880, 2605, 1124, 2576, 2219, 162, 1124, 2017, 616, 2220,
	1879, 1916, 1280, 1686, 1124, 162, 1270, 1122, 616, 1123,
	1419, 1278, 1122, 162, 1123, 162, 1124, 162, 162, 616,
	1124, 1674, 616, 1675, 1124, 1124, 1678, 2209, 1650, 2223,
	1124, 2000, 2001, 616, 1652, 1653, 1648, 37, 2193, 784,
	1701, 95, 1301, 1740, 834, 1124, 1537, 834, 1122, 1122,
	1123, 1123, 1141, 1122, 1136, 1123, 1137, 1124, 2031, 1649,
	95, 2395, 1140, 2056, 2261, 1124, 1291, 783, 1680, 1704,
	1138, 1139, 1135, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1150, 1149, 1151, 1152, 1124, 2053, 998, 1124, 616, 1272,
	1124, 2472, 997, 2471, 1124, 1788, 1789, 1790, 1732, 1650,
	1792, 1794, 1796, 1733, 87, 2313, 1124, 116, 616, 1122,
	2052, 1123, 1669, 616, 1400, 2350, 1094, 1400, 988, 1400,
	1715, 1754, 1755, 1756, 1570, 616, 90, 616, 1560, 1124,
	1696, 1821, 2113, 2346, 2078, 1566, 1567, 2048, 1682, 1571,
	121, 1767, 2015, 92, 616, 616, 1444, 1443, 1736, 1694,
	94, 829, 1859, 722, 93, 1434, 1773, 1719, 838, 2201,
	2638, 838, 1720, 1122, 2275, 1123, 2339, 162, 1735, 1847,
	1734, 1691, 1692, 2543, 162, 2500, 162, 162, 1801, 2260,
	162, 1122, 162, 1123, 1122, 2004, 1123, 1651, 1780, 162,
	1654, 1655, 1683, 2366, 1658, 1818, 162, 816, 817, 1996,
	1999, 2000, 2001, 1997, 164, 1998, 2002, 164, 1863, 1819,
	164, 99, 2528, 2527, 1122, 618, 1123, 164, 162, 1806,
	1768, 1820, 1809, 616, 1810, 1783, 164, 1679, 1779, 2192,
	1791, 1744, 2477, 1745, 1746, 1747, 1748, 2191, 1823, 1824,
	164, 2338, 1804, 1805, 2280, 1808, 1798, 1768, 164, 1759,
	1760, 1761, 1762, 1764, 1765, 1141, 1872, 1499, 815, 101,
	100, 2476, 618, 2372, 1977, 618, 164, 618, 1036, 1828,
	100, 1933, 2427, 2428, 2429, 2151, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1150, 1149, 1151, 1152, 1527, 1895, 1122,
	1670, 1123, 2634, 2633, 1527, 1292, 1416, 1417, 1418, 1869,
	1284, 1871, 2423, 2424, 2425, 2633, 1843, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1150, 1149, 1151, 1152, 2634, 1122,
	1870, 1123, 106, 107, 1420, 1421, 1422, 2478, 2406, 807,
	103, 1279, 68, 1996, 1999, 2000, 2001, 1997, 1932, 1998,
	2002, 88, 1931, 2385, 2386, 1, 101, 101, 2410, 2591,
	1930, 1850, 1851, 594, 1660, 1857, 1853, 100, 100, 99,
	99, 1243, 1929, 2616, 2587, 1854, 1928, 1528, 94, 2588,
	1927, 1926, 1436, 1430, 1528, 2443, 1925, 1868, 1618, 1122,
	162, 1123, 2501, 1771, 1874, 982, 1122, 162, 1123, 127,
	1122, 1919, 1123, 616, 1558, 1730, 1731, 2571, 1122, 616,
	1123, 1555, 1945, 1918, 2470, 1959, 110, 943, 109, 985,
	1122, 1917, 1123, 1061, 1122, 1800, 1123, 1888, 1122, 1122,
	1123, 1123, 2032, 616, 1122, 1741, 1123, 1318, 1316, 1317,
	1914, 162, 1963, 1913, 1315, 162, 1912, 1320, 1319, 1122,
	1910, 1123, 1896, 979, 2351, 1502, 799, 613, 2003, 160,
	2024, 1122, 1906, 1123, 2007, 1902, 1307, 1985, 2183, 1122,
	1285, 1123, 1007, 1982, 585, 1650, 2267, 1826, 590, 1051,
	1165, 616, 1497, 2190, 2020, 1905, 1268, 1264, 1122, 782,
	1123, 1122, 835, 1123, 1122, 1970, 1123, 828, 1122, 1671,
	1123, 1961, 1265, 1987, 2566, 2029, 1649, 1281, 1245, 616,
	1122, 800, 1123, 1948, 1957, 162, 2475, 2371, 1887, 2006,
	1572, 1709, 162, 1520, 1268, 1264, 640, 639, 2027, 616,
	1971, 1974, 637, 1122, 1964, 1123, 1698, 1127, 1400, 1400,
	1265, 725, 1951, 801, 1952, 1293, 1886, 2012, 1995, 1993,
	2034, 2036, 1992, 2086, 2016, 2042, 1845, 1716, 2387, 2085,
	2019, 2383, 2583, 162, 162, 162, 162, 162, 2068, 1711,
	1707, 1773, 1968, 1967, 162, 162, 648, 641, 633, 2028,
	2403, 2287, 2092, 991, 994, 995, 2300, 2094, 2030, 2296,
	162, 1001, 1107, 1260, 627, 2047, 956, 1569, 2506, 1862,
	2335, 1259, 1581, 1582, 63, 41, 2054, 1609, 621, 2601,
	1098, 616, 2059, 2084, 2060, 32, 2064, 2065, 2066, 31,
	30, 1383, 1936, 1937, 29, 23, 22, 21, 20, 19,
	25, 18, 2083, 17, 16, 2611, 2637, 115, 50, 47,
	45, 124, 122, 2076, 2077, 2139, 48, 44, 1558, 1037,
	1558, 2143, 1946, 1558, 42, 1555, 28, 1555, 1558, 27,
	1555, 26, 793, 15, 14, 1555, 13, 12, 11, 10,
	616, 2122, 9, 5, 4, 35, 2105, 34, 2184, 2121,
	33, 1101, 2174, 2175, 2176, 2177, 24, 2167, 2162, 2164,
	2162, 2, 2168, 2162, 0, 2181, 0, 0, 2162, 0,
	162, 0, 0, 2123, 616, 2140, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 162, 162, 162, 162, 0, 0, 2111,
	2194, 2181, 2112, 2155, 162, 0, 0, 0, 0, 162,
	0, 164, 162, 164, 162, 0, 164, 162, 162, 162,
	2211, 0, 2195, 2199, 2169, 2170, 2171, 2172, 2173, 2231,
	0, 2180, 1257, 2007, 1982, 0, 618, 0, 618, 0,
	2186, 2187, 2188, 2185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 618, 2196, 0, 2273, 0, 1676,
	1677, 1267, 2202, 1266, 162, 0, 2233, 0, 0, 2234,
	0, 616, 2213, 2214, 0, 2216, 616, 0, 2212, 0,
	2224, 2215, 0, 0, 0, 0, 2235, 2228, 2229, 721,
	95, 162, 0, 2241, 0, 0, 0, 1261, 1262, 1267,
	0, 1266, 0, 0, 0, 162, 0, 1465, 162, 0,
	2262, 2263, 0, 0, 0, 2284, 2269, 2282, 2314, 0,
	2289, 2288, 0, 2270, 2268, 0, 0, 0, 0, 0,
	0, 0, 0, 2271, 2272, 0, 2283, 0, 0, 0,
	163, 2281, 0, 163, 1773, 0, 163, 2294, 0, 0,
	0, 617, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 2308, 163, 0, 0, 0, 2309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 2345, 0,
	0, 0, 0, 0, 163, 0, 1558, 0, 2317, 2323,
	616, 162, 0, 1555, 0, 0, 2316, 2364, 617, 0,
	0, 617, 163, 617, 0, 0, 0, 0, 0, 616,
	0, 616, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 618, 618, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 162, 2378, 0, 0, 0, 164, 0,
	0, 0, 1985, 2380, 2382, 0, 1985, 1982, 2367, 2368,
	0, 2409, 0, 2392, 618, 0, 2376, 2374, 164, 0,
	162, 0, 0, 618, 2396, 2389, 2398, 2399, 0, 618,
	0, 2311, 2312, 0, 0, 162, 0, 0, 162, 162,
	162, 616, 0, 0, 0, 2397, 2289, 2288, 0, 0,
	2404, 0, 0, 0, 2405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 616, 616, 616, 0, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 2320, 2321,
	2434, 2322, 1382, 2439, 2324, 0, 2326, 0, 2328, 2437,
	2438, 0, 0, 0, 0, 121, 0, 141, 0, 2419,
	0, 2421, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 1558, 0, 0, 0, 0, 1555, 0, 1555,
	0, 0, 0, 0, 0, 0, 2448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 0, 2452, 0, 0, 0, 2459, 0, 2468, 2458,
	2162, 0, 2162, 0, 0, 0, 2449, 0, 0, 1558,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	2485, 2479, 0, 618, 1985, 0, 0, 2481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 793, 618,
	2487, 2486, 0, 0, 0, 0, 0, 0, 2489, 0,
	0, 164, 793, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2497, 0,
	0, 0, 0, 618, 2518, 164, 2498, 2519, 2503, 0,
	616, 1558, 0, 0, 616, 616, 0, 618, 1555, 164,
	0, 616, 2522, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 616, 0, 0, 2532,
	0, 164, 2529, 2530, 0, 616, 162, 0, 2533, 0,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 618,
	0, 0, 1982, 2536, 37, 618, 618, 2544, 2535, 0,
	0, 0, 0, 2539, 0, 2541, 0, 0, 0, 0,
	0, 0, 164, 0, 2547, 0, 616, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 162, 616, 0, 37, 2570, 0,
	2567, 2503, 2572, 0, 2579, 0, 0, 0, 0, 0,
	0, 2582, 0, 0, 2600, 2590, 2595, 618, 0, 0,
	0, 2604, 0, 0, 0, 0, 0, 0, 2610, 0,
	0, 618, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 0, 1558, 618, 618, 2623, 2627,
	2625, 2631, 1555, 2629, 0, 0, 2628, 0, 0, 0,
	0, 0, 0, 0, 2639, 0, 0, 2645, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 140, 0,
	0, 1558, 0, 2653, 2654, 0, 0, 2519, 1555, 2652,
	0, 0, 2651, 0, 0, 0, 0, 163, 146, 163,
	147, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 0, 0, 618, 0, 135, 136, 134, 133,
	157, 0, 617, 0, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 617,
	617, 618, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 618, 0, 0, 0, 0, 164, 0, 164, 0,
	164, 164, 618, 0, 0, 618, 0, 0, 0, 158,
	0, 0, 1246, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 137, 139, 0,
	0, 128, 0, 130, 131, 0, 580, 0, 0, 149,
	0, 618, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 787, 0, 0, 0, 0,
	0, 618, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 618, 0,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 618, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 0,
	0, 0, 0, 0, 0, 163, 0, 0, 617, 617,
	164, 0, 0, 0, 0, 0, 0, 164, 0, 164,
	164, 0, 0, 164, 163, 164, 0, 0, 0, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 164,
	617, 0, 0, 0, 163, 0, 0, 0, 0, 617,
	0, 0, 0, 0, 0, 617, 0, 0, 0, 0,
	615, 164, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	947, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	143, 0, 0, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 617,
	138, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 617, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 146, 163, 147, 0,
	164, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 618, 0, 135, 136, 134, 133, 157, 617,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 0, 163, 618, 0, 148, 0,
	0, 150, 151, 0, 164, 152, 153, 0, 164, 0,
	163, 0, 154, 155, 156, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 617, 0, 0, 0, 0,
	0, 617, 617, 0, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 129, 137, 139, 0, 164, 128,
	0, 130, 131, 0, 0, 164, 0, 149, 0, 0,
	0, 0, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 164, 164, 164,
	164, 0, 617, 617, 0, 0, 0, 164, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 0,
	1038, 0, 1044, 0, 0, 1046, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 617, 0, 0,
	0, 0, 0, 618, 163, 0, 0, 617, 0, 0,
	0, 0, 163, 0, 163, 0, 163, 163, 617, 0,
	0, 617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 617, 164, 0, 0, 0, 618, 0, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 164, 164, 164, 164, 164,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	0, 0, 164, 0, 0, 164, 0, 164, 0, 0,
	164, 164, 164, 0, 0, 142, 0, 617, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 836, 0, 0, 0, 617, 0, 0,
	0, 0, 617, 0, 0, 0, 0, 0, 1097, 1099,
	0, 0, 0, 0, 617, 0, 617, 164, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 618,
	0, 0, 0, 617, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 164, 0,
	0, 164, 0, 163, 0, 163, 163, 0, 0, 163,
	0, 163, 0, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 0, 0, 0, 163, 148, 1295, 0, 150,
	151, 0, 0, 152, 153, 0, 0, 0, 0, 0,
	154, 155, 156, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 617, 0, 0, 0, 0, 0, 0, 1236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1248, 1249, 0,
	0, 0, 0, 0, 1269, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 1288,
	0, 0, 0, 164, 705, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 1308, 0, 0, 0, 164, 0,
	0, 164, 164, 164, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 618, 618,
	618, 0, 0, 0, 0, 161, 0, 0, 581, 163,
	1413, 611, 0, 0, 0, 0, 163, 0, 581, 0,
	1335, 0, 617, 0, 0, 0, 0, 581, 617, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 617, 0, 0, 0, 0, 821, 0, 821,
	163, 0, 0, 1474, 163, 0, 0, 581, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	617, 0, 0, 0, 0, 0, 0, 0, 947, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	1236, 0, 0, 1236, 947, 0, 0, 0, 617, 0,
	1236, 0, 0, 0, 163, 0, 618, 0, 0, 0,
	0, 163, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 618, 0, 0, 0, 618, 618, 0,
	0, 0, 1462, 0, 618, 0, 0, 618, 0, 0,
	0, 0, 163, 163, 163, 163, 163, 0, 0, 618,
	0, 0, 0, 163, 163, 0, 0, 0, 618, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	836, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	617, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 0, 0, 0, 164, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1551, 0, 0, 0, 0, 1693, 0, 617,
	0, 0, 0, 0, 0, 1697, 1565, 1703, 0, 0,
	1510, 0, 618, 1236, 0, 0, 0, 0, 0, 0,
	0, 1579, 1580, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 617, 0, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 163, 163, 163, 163, 0, 0, 836, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 163, 0,
	0, 163, 0, 163, 0, 0, 163, 163, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1685, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 1288, 0, 0, 836,
	617, 0, 1323, 0, 0, 617, 0, 836, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 947, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 163, 0, 1837, 163, 1841, 1842,
	0, 0, 1846, 0, 0, 0, 0, 0, 0, 0,
	0, 1849, 0, 0, 0, 0, 0, 0, 1852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	1855, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 947, 581, 1551, 0, 581, 0, 617,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1551, 1551, 0, 0, 0, 0, 617, 0,
	617, 0, 1349, 1352, 1353, 1354, 1355, 1356, 1357, 0,
	1358, 1359, 1360, 1361, 1362, 1337, 1338, 1339, 1340, 1321,
	1322, 1350, 163, 1324, 0, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 0, 0, 1334, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 0, 0, 0, 0, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 163, 163, 163,
	617, 1856, 0, 0, 672, 674, 673, 683, 684, 685,
	686, 687, 688, 2494, 2490, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 617, 617, 617, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 2011, 0, 0,
	0, 0, 0, 0, 0, 1271, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 0, 0, 0, 0, 78, 39, 40,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 43, 70, 71, 0, 67, 72, 0, 0, 581,
	0, 0, 0, 0, 0, 836, 0, 2061, 2609, 0,
	0, 0, 617, 0, 0, 0, 0, 0, 1335, 0,
	0, 1685, 0, 0, 0, 0, 0, 1965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 617,
	0, 0, 0, 617, 617, 0, 0, 0, 1236, 0,
	617, 1989, 0, 617, 0, 2097, 2098, 2099, 2100, 2101,
	0, 0, 0, 0, 0, 617, 1510, 2106, 0, 0,
	0, 0, 0, 0, 617, 163, 0, 0, 0, 0,
	0, 0, 2114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 679, 0, 0, 0, 0, 2037,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 617, 617, 0, 0, 581,
	0, 0, 0, 0, 0, 0, 0, 2057, 617, 0,
	0, 0, 69, 163, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 715, 1685, 665, 719,
	667, 716, 717, 0, 663, 666, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1237, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 1237, 0, 617, 0,
	0, 0, 581, 668, 669, 671, 675, 676, 2491, 2492,
	2493, 682, 690, 692, 693, 691, 694, 695, 696, 699,
	700, 701, 702, 697, 698, 703, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	0, 0, 0, 0, 0, 581, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 1488, 581, 581, 581, 581, 581, 581, 581,
	0, 0, 0, 1236, 0, 1236, 0, 0, 1236, 0,
	0, 0, 0, 1236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 2276, 0, 836, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 2295, 0, 0, 0, 0, 0, 0,
	0, 1576, 2197, 0, 836, 1577, 0, 2307, 0, 0,
	2310, 0, 0, 0, 0, 0, 821, 0, 0, 1236,
	0, 0, 0, 821, 821, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 1657, 0, 0, 0, 0,
	0, 0, 0, 821, 1464, 821, 821, 821, 821, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2370, 0, 0, 0, 1681, 0, 947,
	1323, 1667, 1236, 0, 1685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	46, 49, 52, 51, 54, 0, 0, 66, 0, 806,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 0, 1464, 0, 581, 0, 581,
	0, 581, 1718, 55, 83, 82, 0, 0, 64, 65,
	53, 0, 2417, 0, 0, 0, 73, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2430, 0, 0,
	2431, 2432, 2433, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1782, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 58, 0, 59, 60,
	61, 62, 0, 0, 0, 0, 0, 0, 2197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 0, 0, 2379, 0, 2381,
	1349, 1352, 1353, 1354, 1355, 1356, 1357, 0, 1358, 1359,
	1360, 1361, 1362, 1337, 1338, 1339, 1340, 1321, 1322, 1350,
	0, 1324, 0, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 0, 0, 1334, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 0, 0, 0, 0, 581, 1685,
	581, 581, 0, 0, 581, 0, 1848, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 81, 0,
	581, 0, 2444, 2445, 2446, 2447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1236, 0, 1236, 0, 0,
	0, 0, 0, 0, 0, 1877, 0, 1351, 0, 1881,
	0, 1882, 1883, 0, 0, 0, 0, 0, 0, 0,
	1891, 0, 0, 1892, 0, 0, 0, 0, 2548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 1897,
	1898, 1899, 1900, 1901, 0, 1903, 0, 0, 0, 0,
	0, 1907, 0, 1908, 0, 0, 0, 1911, 0, 0,
	0, 0, 0, 0, 0, 1920, 1921, 1922, 1923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1934, 1935,
	0, 836, 0, 0, 0, 0, 1940, 1941, 1942, 1943,
	1944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1958, 0, 0, 0, 2525, 0,
	821, 821, 2525, 2525, 0, 0, 0, 1236, 0, 2534,
	0, 1464, 1685, 0, 581, 0, 0, 0, 0, 0,
	0, 1667, 0, 0, 1685, 0, 0, 1988, 0, 0,
	0, 0, 0, 1685, 0, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 79, 0,
	0, 0, 0, 0, 1237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 0, 581,
	0, 0, 0, 0, 836, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2580, 0, 0,
	0, 0, 0, 2585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 796, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 2585, 0, 581,
	0, 0, 0, 0, 0, 796, 2067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 581, 581,
	581, 581, 0, 0, 0, 0, 0, 0, 581, 581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 2150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 0, 0, 0, 0,
	2163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2178, 2179, 0, 0, 0, 0, 0, 0, 1237,
	0, 1237, 0, 0, 1237, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 821, 0, 0, 726, 1557, 736, 737,
	2292, 2293, 727, 729, 0, 0, 728, 0, 0, 0,
	0, 2206, 2207, 0, 0, 0, 0, 0, 0, 731,
	738, 739, 0, 0, 581, 0, 0, 0, 0, 0,
	2226, 2227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1237, 581, 581, 581, 581,
	581, 0, 0, 0, 0, 0, 0, 0, 2225, 0,
	0, 0, 0, 581, 2290, 2291, 1667, 0, 581, 0,
	0, 581, 2236, 1464, 0, 0, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2315, 0, 581, 0, 0, 0, 0,
	2319, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 581, 0, 2329, 2330, 2332, 2334, 0, 0,
	0, 0, 0, 0, 2340, 0, 0, 2342, 2343, 2344,
	0, 0, 0, 0, 2347, 0, 0, 0, 0, 0,
	2349, 0, 0, 2353, 2354, 2355, 2356, 2357, 2358, 2359,
	2360, 2361, 2362, 0, 0, 2363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 0, 0,
	0, 0, 0, 2393, 2394, 0, 0, 0, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 719, 0, 716, 717, 0, 0, 0,
	718, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 581, 581, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2456, 0, 1125, 79,
	2457, 0, 0, 0, 0, 0, 2461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1173, 796, 1161, 1162,
	1163, 1237, 1166, 1237, 1168, 1169, 1170, 1171, 0, 1174,
	1176, 1176, 0, 1176, 1180, 1180, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 0, 1220, 1221, 1222, 1223, 1224, 0,
	0, 2499, 0, 1180, 1180, 1180, 1180, 1180, 631, 0,
	0, 0, 0, 0, 0, 2509, 2510, 2511, 0, 2512,
	2513, 0, 0, 2514, 0, 2515, 0, 2517, 2520, 0,
	0, 0, 0, 0, 2524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2549, 0, 1237, 0, 1247, 0, 0, 0, 0,
	796, 0, 0, 2554, 796, 0, 0, 0, 2559, 0,
	796, 1283, 0, 0, 2560, 2561, 0, 87, 0, 0,
	581, 0, 2563, 726, 1557, 736, 737, 2292, 2293, 727,
	729, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 738, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2606, 0, 0, 0, 2607, 0,
	1960, 0, 0, 1557, 736, 0, 0, 0, 1667, 1556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2290, 2291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 0, 0, 0, 0, 0,
	0, 1370, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 1089,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1562, 1563,
	0, 0, 0, 0, 0, 0, 1568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1603, 1604, 1605, 1606, 1607, 1608, 1610, 1614, 1615,
	631, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1557, 736, 0, 0,
	0, 0, 1556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1687, 1688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1702, 1727, 0, 1710, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1769, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 0, 0, 0, 0,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1986, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 2008, 0,
	2009, 2010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2141, 2142, 0, 0, 0, 2145, 0, 0, 0, 2147,
	2148, 2149, 0, 0, 0, 0, 0, 0, 0, 0,
	2152, 2153, 2154, 0, 0, 1621, 2156, 0, 2157, 2158,
	0, 0, 0, 2165, 2166, 0, 0, 0, 0, 0,
	0, 1621, 1621, 1621, 1621, 1621, 631, 631, 631, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2200, 0, 0, 0, 1710, 0, 0,
	0, 0, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1710,
	1710, 1710, 1710, 1710, 0, 0, 2230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 796, 0, 0,
	0, 1710, 0, 0, 1710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2337, 0, 0, 0, 0, 2341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1986, 0, 79, 0, 1986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2450, 0, 2451,
	0, 0, 0, 0, 2454, 2455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2469, 0, 2473, 2474, 0, 0, 0,
	0, 2482, 0, 0, 2484, 1986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2531, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1184, 1191,
	1194, 1195, 1203, 312, 523, 241, 0, 0, 79, 0,
	0, 195, 2553, 0, 0, 0, 1645, 0, 649, 0,
	0, 0, 0, 654, 467, 344, 0, 332, 0, 197,
	0, 1646, 400, 284, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2564, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 661, 0, 366, 528, 470, 357, 0, 0,
	0, 0, 0, 656, 657, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 224, 0, 0, 372, 0, 265,
	0, 87, 0, 0, 165, 166, 167, 726, 735, 736,
	737, 734, 733, 727, 729, 0, 0, 728, 215, 672,
	674, 673, 683, 684, 685, 686, 687, 688, 689, 670,
	731, 738, 739, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 632, 646, 190, 660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 644, 819, 0, 0,
	0, 709, 0, 645, 0, 0, 653, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 655,
	0, 0, 0, 0, 178, 253, 436, 0, 0, 173,
	0, 0, 0, 234, 0, 708, 0, 304, 533, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 305, 172,
	199, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 678, 679,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 262, 0, 0, 0, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 0, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 0, 437, 214, 516,
	464, 715, 707, 665, 719, 667, 716, 717, 662, 663,
	666, 718, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 710, 652, 651, 0, 658, 659, 0, 668, 669,
	671, 675, 676, 677, 680, 681, 682, 690, 692, 693,
	691, 694, 695, 696, 699, 700, 701, 702, 697, 698,
	703, 650, 0, 193, 334, 0, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 288,
	289, 328, 0, 0, 0, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 0, 0, 0, 280,
	0, 0, 342, 0, 0, 0, 260, 312, 523, 241,
	0, 0, 0, 0, 0, 195, 219, 0, 0, 0,
	0, 0, 649, 0, 404, 0, 0, 654, 467, 344,
	0, 332, 0, 197, 485, 0, 400, 284, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 661, 0, 366, 528,
	470, 357, 0, 0, 0, 0, 0, 656, 657, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 224, 0,
	0, 372, 0, 265, 0, 87, 0, 0, 165, 166,
	167, 726, 735, 736, 737, 734, 733, 727, 729, 0,
	0, 728, 215, 672, 674, 673, 683, 684, 685, 686,
	687, 688, 689, 670, 731, 738, 739, 383, 249, 299,
	256, 248, 496, 0, 486, 1611, 1612, 1613, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 632, 646, 190,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	644, 0, 0, 0, 0, 709, 0, 645, 0, 0,
	653, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 655, 0, 0, 0, 0, 178, 253,
	436, 0, 0, 173, 0, 0, 0, 234, 0, 708,
	0, 304, 533, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 305, 172, 199, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 505, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	204, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 678, 679, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 262, 0, 0, 0,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	0, 0, 0, 361, 285, 466, 318, 339, 425, 541,
	0, 437, 214, 516, 464, 715, 707, 665, 719, 667,
	716, 717, 662, 663, 666, 718, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 710, 652, 651, 0, 658,
	659, 0, 668, 669, 671, 675, 676, 677, 680, 681,
	682, 690, 692, 693, 691, 694, 695, 696, 699, 700,
	701, 702, 697, 698, 703, 650, 0, 193, 334, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 288, 289, 328, 0, 0, 0, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	0, 0, 0, 280, 0, 0, 342, 0, 78, 0,
	260, 312, 523, 241, 0, 0, 0, 0, 0, 195,
	219, 0, 0, 0, 0, 0, 649, 0, 404, 0,
	0, 654, 467, 344, 0, 332, 0, 197, 485, 0,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	661, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 656, 657, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 87,
	0, 0, 165, 166, 167, 726, 735, 736, 737, 734,
	733, 727, 729, 0, 0, 728, 215, 672, 674, 673,
	683, 684, 685, 686, 687, 688, 689, 670, 731, 738,
	739, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 632, 646, 190, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 644, 0, 0, 0, 0, 709,
	0, 645, 0, 0, 653, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 655, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 708, 0, 304, 533, 0, 0, 706,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 678, 679, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 715,
	707, 665, 719, 667, 716, 717, 662, 663, 666, 718,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 710,
	652, 651, 0, 658, 659, 0, 668, 669, 671, 675,
	676, 677, 680, 681, 682, 690, 692, 693, 691, 694,
	695, 696, 699, 700, 701, 702, 697, 698, 703, 650,
	0, 193, 334, 86, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 0, 0, 0, 280, 0, 0,
	342, 0, 0, 0, 260, 312, 523, 241, 0, 0,
	0, 0, 0, 195, 219, 0, 0, 0, 0, 0,
	649, 0, 404, 0, 0, 654, 467, 344, 0, 332,
	0, 197, 485, 0, 400, 284, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 176, 177, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 194, 196,
	198, 201, 202, 205, 206, 207, 208, 209, 212, 216,
	217, 218, 220, 221, 222, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 226, 227, 228, 229,
	230, 231, 235, 237, 238, 239, 242, 243, 244, 245,
	246, 247, 250, 251, 254, 257, 258, 264, 269, 270,
	271, 273, 274, 275, 281, 283, 286, 287, 290, 292,
	294, 296, 297, 298, 300, 301, 302, 303, 306, 307,
	308, 309, 310, 311, 313, 321, 322, 324, 325, 326,
	327, 330, 333, 335, 337, 338, 340, 341, 343, 346,
	347, 349, 350, 353, 354, 356, 359, 362, 365, 367,
	368, 369, 370, 373, 374, 375, 376, 378, 381, 384,
	386, 387, 389, 392, 394, 395, 396, 397, 398, 399,
	403, 406, 407, 408, 409, 411, 413, 414, 415, 417,
	419, 420, 421, 422, 423, 424, 427, 428, 430, 431,
	432, 433, 434, 439, 440, 443, 444, 445, 448, 449,
	450, 451, 452, 453, 455, 458, 459, 463, 465, 468,
	469, 475, 476, 478, 479, 481, 482, 483, 484, 487,
	489, 490, 492, 493, 497, 498, 499, 506, 507, 511,
	512, 513, 514, 517, 518, 519, 520, 521, 522, 524,
	525, 526, 527, 531, 532, 534, 535, 536, 537, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 661, 0, 366, 528, 470, 357,
	0, 0, 0, 0, 0, 656, 657, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 224, 0, 0, 372,
	0, 265, 0, 87, 0, 1270, 165, 166, 167, 726,
	735, 736, 737, 734, 733, 727, 729, 0, 0, 728,
	215, 672, 674, 673, 683, 684, 685, 686, 687, 688,
	689, 670, 731, 738, 739, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 632, 646, 190, 660, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 643, 644, 0,
	0, 0, 0, 709, 0, 645, 0, 0, 653, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 655, 0, 0, 0, 0, 178, 253, 436, 0,
	0, 173, 0, 0, 0, 234, 0, 708, 0, 304,
	533, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	305, 172, 199, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 210, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 200, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	175, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 480, 505, 213, 447, 454, 435, 539, 192, 0,
	474, 0, 314, 315, 191, 0, 426, 252, 0, 0,
	380, 503, 504, 0, 554, 203, 530, 0, 204, 0,
	363, 501, 0, 0, 0, 0, 0, 0, 0, 319,
	678, 679, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 262, 0, 0, 0, 282, 0,
	0, 0, 0, 416, 0, 457, 495, 0, 0, 0,
	0, 361, 285, 466, 318, 339, 425, 541, 0, 437,
	214, 516, 464, 715, 707, 665, 719, 667, 716, 717,
	662, 663, 666, 718, 233, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 355, 0, 0, 358, 0, 460,
	0, 0, 0, 710, 652, 651, 0, 658, 659, 0,
	668, 669, 671, 675, 676, 677, 680, 681, 682, 690,
	692, 693, 691, 694, 695, 696, 699, 700, 701, 702,
	697, 698, 703, 650, 0, 193, 334, 0, 0, 0,
	538, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 288, 289, 328, 0, 0, 0, 0, 0, 0,
	382, 393, 0, 0, 429, 0, 494, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 278,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 364, 0, 377, 379, 0, 385, 0, 390, 0,
	391, 401, 405, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 446, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 502, 515, 0, 0,
	0, 280, 0, 0, 342, 0, 0, 0, 260, 312,
	523, 241, 0, 0, 0, 0, 0, 195, 219, 0,
	0, 0, 0, 0, 649, 0, 404, 0, 0, 654,
	467, 344, 0, 332, 0, 197, 485, 0, 400, 284,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 176, 177, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 194, 196, 198, 201, 202, 205, 206, 207,
	208, 209, 212, 216, 217, 218, 220, 221, 222, 223,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	226, 227, 228, 229, 230, 231, 235, 237, 238, 239,
	242, 243, 244, 245, 246, 247, 250, 251, 254, 257,
	258, 264, 269, 270, 271, 273, 274, 275, 281, 283,
	286, 287, 290, 292, 294, 296, 297, 298, 300, 301,
	302, 303, 306, 307, 308, 309, 310, 311, 313, 321,
	322, 324, 325, 326, 327, 330, 333, 335, 337, 338,
	340, 341, 343, 346, 347, 349, 350, 353, 354, 356,
	359, 362, 365, 367, 368, 369, 370, 373, 374, 375,
	376, 378, 381, 384, 386, 387, 389, 392, 394, 395,
	396, 397, 398, 399, 403, 406, 407, 408, 409, 411,
	413, 414, 415, 417, 419, 420, 421, 422, 423, 424,
	427, 428, 430, 431, 432, 433, 434, 439, 440, 443,
	444, 445, 448, 449, 450, 451, 452, 453, 455, 458,
	459, 463, 465, 468, 469, 475, 476, 478, 479, 481,
	482, 483, 484, 487, 489, 490, 492, 493, 497, 498,
	499, 506, 507, 511, 512, 513, 514, 517, 518, 519,
	520, 521, 522, 524, 525, 526, 527, 531, 532, 534,
	535, 536, 537, 540, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 661, 0,
	366, 528, 470, 357, 0, 0, 0, 0, 0, 656,
	657, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	224, 0, 0, 372, 0, 265, 0, 87, 0, 0,
	165, 166, 167, 726, 735, 736, 737, 734, 733, 727,
	729, 0, 0, 728, 215, 672, 674, 673, 683, 684,
	685, 686, 687, 688, 689, 670, 731, 738, 739, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 632,
	646, 190, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 644, 819, 0, 0, 0, 709, 0, 645,
	0, 0, 653, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 655, 0, 0, 0, 0,
	178, 253, 436, 0, 0, 173, 0, 0, 0, 234,
	0, 708, 0, 304, 533, 0, 0, 706, 0, 0,
	0, 0, 0, 0, 305, 172, 199, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	210, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 200, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 175, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 480, 505, 213, 447, 454,
	435, 539, 192, 0, 474, 0, 314, 315, 191, 0,
	426, 252, 0, 0, 380, 503, 504, 0, 554, 203,
	530, 0, 204, 0, 363, 501, 0, 0, 0, 0,
	0, 0, 0, 319, 678, 679, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 262, 0,
	0, 0, 282, 0, 0, 0, 0, 416, 0, 457,
	495, 0, 0, 0, 0, 361, 285, 466, 318, 339,
	425, 541, 0, 437, 214, 516, 464, 715, 707, 665,
	719, 667, 716, 717, 662, 663, 666, 718, 233, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 355, 0,
	0, 358, 0, 460, 0, 0, 0, 710, 652, 651,
	0, 658, 659, 0, 668, 669, 671, 675, 676, 677,
	680, 681, 682, 690, 692, 693, 691, 694, 695, 696,
	699, 700, 701, 702, 697, 698, 703, 650, 0, 193,
	334, 0, 0, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 288, 289, 328, 0, 0,
	0, 0, 0, 0, 382, 393, 0, 0, 429, 0,
	494, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 278, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 364, 0, 377, 379, 0,
	385, 0, 390, 0, 391, 401, 405, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	446, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	502, 515, 0, 0, 0, 280, 0, 0, 342, 0,
	0, 0, 260, 312, 523, 241, 0, 0, 0, 0,
	0, 195, 219, 0, 0, 0, 0, 0, 649, 0,
	404, 0, 0, 654, 467, 344, 0, 332, 0, 197,
	485, 0, 400, 284, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 661, 0, 366, 528, 470, 357, 0, 0,
	0, 0, 0, 656, 657, 0, 0, 0, 0, 0,
	279, 1725, 0, 0, 224, 0, 0, 372, 0, 265,
	0, 87, 0, 0, 165, 166, 167, 726, 735, 736,
	737, 734, 733, 727, 729, 0, 0, 728, 215, 672,
	674, 673, 683, 684, 685, 686, 687, 688, 689, 670,
	731, 738, 739, 1726, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 632, 646, 190, 660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 644, 0, 0, 0,
	0, 709, 0, 645, 0, 0, 653, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 655,
	0, 0, 0, 0, 178, 253, 436, 0, 0, 173,
	0, 0, 0, 234, 0, 708, 0, 304, 533, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 305, 172,
	199, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 678, 679,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 262, 0, 0, 0, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 0, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 0, 437, 214, 516,
	464, 715, 707, 665, 719, 667, 716, 717, 662, 663,
	666, 718, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 710, 652, 651, 0, 658, 659, 0, 668, 669,
	671, 675, 676, 677, 680, 681, 682, 690, 692, 693,
	691, 694, 695, 696, 699, 700, 701, 702, 697, 698,
	703, 650, 0, 193, 334, 0, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 288,
	289, 328, 0, 0, 0, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 0, 0, 0, 280,
	0, 0, 342, 0, 0, 0, 260, 312, 523, 241,
	0, 0, 0, 0, 0, 195, 219, 0, 0, 0,
	0, 0, 649, 0, 404, 0, 0, 654, 467, 344,
	0, 332, 0, 197, 485, 0, 400, 284, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 661, 0, 366, 528,
	470, 357, 0, 0, 0, 0, 0, 656, 657, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 224, 0,
	0, 372, 0, 265, 0, 87, 0, 0, 165, 166,
	167, 726, 735, 736, 737, 734, 733, 727, 729, 0,
	0, 728, 215, 672, 674, 673, 683, 684, 685, 686,
	687, 688, 689, 670, 731, 738, 739, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 632, 646, 190,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	644, 0, 0, 0, 0, 709, 0, 645, 0, 0,
	653, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 655, 0, 0, 0, 0, 178, 253,
	436, 0, 0, 173, 0, 0, 0, 234, 0, 708,
	0, 304, 533, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 305, 172, 199, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 505, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	204, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 678, 679, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 262, 0, 0, 0,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	0, 0, 0, 361, 285, 466, 318, 339, 425, 541,
	0, 437, 214, 516, 464, 715, 707, 665, 719, 667,
	716, 717, 662, 663, 666, 718, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 710, 652, 651, 0, 658,
	659, 0, 668, 669, 671, 675, 676, 677, 680, 681,
	682, 690, 692, 693, 691, 694, 695, 696, 699, 700,
	701, 702, 697, 698, 703, 650, 0, 193, 334, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 288, 289, 328, 0, 0, 0, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	0, 0, 0, 280, 0, 0, 342, 0, 0, 0,
	260, 312, 523, 241, 0, 0, 0, 0, 0, 195,
	219, 0, 0, 0, 0, 0, 649, 0, 404, 0,
	0, 654, 467, 344, 0, 332, 0, 197, 485, 0,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	661, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 656, 657, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 87,
	0, 0, 165, 166, 167, 726, 735, 736, 737, 734,
	733, 727, 729, 0, 0, 728, 215, 672, 674, 673,
	683, 684, 685, 686, 687, 688, 689, 670, 731, 738,
	739, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 646, 190, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 644, 0, 0, 0, 0, 709,
	0, 645, 0, 0, 653, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 655, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 708, 0, 304, 533, 0, 0, 706,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 678, 679, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 715,
	707, 665, 719, 667, 716, 717, 662, 663, 666, 718,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 710,
	652, 651, 0, 658, 659, 0, 668, 669, 671, 675,
	676, 677, 680, 681, 682, 690, 692, 693, 691, 694,
	695, 696, 699, 700, 701, 702, 697, 698, 703, 650,
	0, 193, 334, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 0, 0, 0, 280, 0, 0,
	342, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 0, 0, 0, 0, 932,
	920, 0, 485, 312, 523, 241, 883, 939, 886, 887,
	912, 195, 901, 908, 880, 840, 873, 846, 267, 847,
	872, 893, 0, 870, 467, 344, 0, 332, 874, 197,
	858, 0, 400, 284, 179, 844, 848, 849, 859, 863,
	865, 866, 871, 879, 882, 885, 888, 890, 892, 895,
	906, 914, 915, 921, 922, 923, 924, 925, 927, 936,
	937, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 529, 0, 366, 528, 470, 357, 0, 0,
	0, 896, 0, 899, 919, 891, 913, 862, 904, 0,
	279, 909, 935, 0, 224, 0, 0, 372, 0, 265,
	0, 0, 0, 0, 165, 166, 167, 0, 2573, 0,
	2574, 277, 236, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	907, 931, 878, 383, 249, 299, 256, 248, 496, 0,
	486, 851, 898, 930, 0, 0, 0, 933, 331, 0,
	911, 0, 843, 905, 0, 190, 852, 938, 928, 875,
	876, 0, 0, 0, 0, 0, 0, 0, 894, 900,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 861, 178, 253, 436, 842, 841, 173,
	0, 0, 0, 234, 0, 456, 926, 304, 533, 929,
	0, 295, 916, 857, 0, 0, 0, 854, 305, 172,
	199, 860, 881, 371, 917, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 211,
	0, 0, 262, 0, 0, 884, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 934, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 910, 437, 214, 516,
	464, 868, 232, 864, 0, 867, 902, 903, 869, 0,
	0, 0, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 438, 0, 853, 0, 491, 0, 0, 0, 0,
	0, 0, 0, 509, 320, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 193, 334, 941, 0, 0, 538, 0,
	0, 845, 0, 0, 0, 0, 255, 877, 0, 288,
	289, 328, 0, 0, 897, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 940, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 0, 0, 918, 280,
	0, 0, 342, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 0, 0, 0,
	0, 932, 920, 0, 485, 312, 523, 241, 883, 939,
	886, 887, 912, 195, 901, 908, 880, 840, 873, 846,
	267, 847, 872, 893, 0, 870, 467, 344, 0, 332,
	874, 197, 858, 0, 400, 284, 179, 844, 848, 849,
	859, 863, 865, 866, 871, 879, 882, 885, 888, 890,
	892, 895, 906, 914, 915, 921, 922, 923, 924, 925,
	927, 936, 937, 168, 169, 170, 171, 176, 177, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 194, 196,
	198, 201, 202, 205, 206, 207, 208, 209, 212, 216,
	217, 218, 220, 221, 222, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 226, 227, 228, 229,
	230, 231, 235, 237, 238, 239, 242, 243, 244, 245,
	246, 247, 250, 251, 254, 257, 258, 264, 269, 270,
	271, 273, 274, 275, 281, 283, 286, 287, 290, 292,
	294, 296, 297, 298, 300, 301, 302, 303, 306, 307,
	308, 309, 310, 311, 313, 321, 322, 324, 325, 326,
	327, 330, 333, 335, 337, 338, 340, 341, 343, 346,
	347, 349, 350, 353, 354, 356, 359, 362, 365, 367,
	368, 369, 370, 373, 374, 375, 376, 378, 381, 384,
	386, 387, 389, 392, 394, 395, 396, 397, 398, 399,
	403, 406, 407, 408, 409, 411, 413, 414, 415, 417,
	419, 420, 421, 422, 423, 424, 427, 428, 430, 431,
	432, 433, 434, 439, 440, 443, 444, 445, 448, 449,
	450, 451, 452, 453, 455, 458, 459, 463, 465, 468,
	469, 475, 476, 478, 479, 481, 482, 483, 484, 487,
	489, 490, 492, 493, 497, 498, 499, 506, 507, 511,
	512, 513, 514, 517, 518, 519, 520, 521, 522, 524,
	525, 526, 527, 531, 532, 534, 535, 536, 537, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 529, 0, 366, 528, 470, 357,
	0, 0, 0, 896, 0, 899, 919, 891, 913, 862,
	904, 0, 279, 909, 935, 0, 224, 0, 0, 372,
	0, 265, 0, 0, 0, 0, 165, 166, 167, 0,
	488, 0, 0, 277, 236, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 907, 931, 878, 383, 249, 299, 256, 248,
	496, 0, 486, 851, 898, 930, 0, 0, 0, 933,
	331, 0, 911, 0, 843, 905, 0, 190, 852, 938,
	928, 875, 876, 0, 0, 0, 0, 0, 0, 0,
	894, 900, 0, 889, 0, 0, 0, 0, 0, 2237,
	0, 0, 0, 0, 0, 0, 0, 855, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 861, 178, 253, 436, 842,
	841, 173, 0, 0, 0, 234, 0, 456, 926, 304,
	533, 929, 0, 295, 916, 857, 0, 0, 0, 854,
	305, 172, 199, 860, 881, 371, 917, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 210, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 200, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	175, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 480, 505, 213, 447, 454, 435, 539, 192, 0,
	474, 0, 314, 315, 191, 0, 426, 252, 0, 0,
	380, 503, 504, 0, 554, 203, 530, 0, 204, 0,
	363, 501, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 211, 0, 0, 262, 0, 0, 884, 282, 0,
	0, 0, 0, 416, 0, 457, 495, 0, 934, 0,
	0, 361, 285, 466, 318, 339, 425, 541, 910, 437,
	214, 516, 464, 868, 232, 864, 0, 867, 902, 903,
	869, 0, 0, 0, 233, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 355, 0, 0, 358, 0, 460,
	0, 0, 0, 438, 0, 853, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 509, 320, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 193, 334, 941, 0, 0,
	538, 0, 0, 845, 0, 0, 0, 0, 255, 877,
	0, 288, 289, 328, 0, 0, 897, 0, 0, 0,
	382, 393, 0, 0, 429, 0, 494, 940, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 278,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 364, 0, 377, 379, 0, 385, 0, 390, 0,
	391, 401, 405, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 446, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 502, 515, 0, 0,
	918, 280, 0, 0, 342, 0, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 932, 920, 0, 485, 312, 523, 241,
	883, 939, 886, 887, 912, 195, 901, 908, 880, 840,
	873, 846, 267, 847, 872, 893, 0, 870, 467, 344,
	0, 332, 874, 197, 858, 0, 400, 284, 179, 844,
	848, 849, 859, 863, 865, 866, 871, 879, 882, 885,
	888, 890, 892, 895, 906, 914, 915, 921, 922, 923,
	924, 925, 927, 936, 937, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 529, 0, 366, 528,
	470, 357, 0, 0, 0, 896, 0, 899, 919, 891,
	913, 862, 904, 0, 279, 909, 935, 0, 224, 0,
	0, 372, 0, 265, 0, 0, 0, 0, 165, 166,
	167, 0, 488, 0, 0, 277, 236, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 907, 931, 878, 383, 249, 299,
	256, 248, 496, 0, 486, 851, 898, 930, 0, 0,
	0, 933, 331, 0, 911, 0, 843, 905, 0, 190,
	852, 938, 928, 875, 876, 0, 0, 0, 0, 0,
	0, 0, 894, 900, 0, 889, 0, 0, 0, 0,
	0, 2198, 0, 0, 0, 0, 0, 0, 0, 855,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 861, 178, 253,
	436, 842, 841, 173, 0, 0, 0, 234, 0, 456,
	926, 304, 533, 929, 0, 295, 916, 857, 0, 0,
	0, 854, 305, 172, 199, 860, 881, 371, 917, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 505, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	204, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 211, 0, 0, 262, 0, 0, 884,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	934, 0, 0, 361, 285, 466, 318, 339, 425, 541,
	910, 437, 214, 516, 464, 868, 232, 864, 0, 867,
	902, 903, 869, 0, 0, 0, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 438, 0, 853, 0, 491,
	0, 0, 0, 0, 0, 0, 0, 509, 320, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 0, 193, 334, 941,
	0, 0, 538, 0, 0, 845, 0, 0, 0, 0,
	255, 877, 0, 288, 289, 328, 0, 0, 897, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 940,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	0, 0, 918, 280, 0, 0, 342, 0, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 0, 0, 0, 0, 932, 920, 0, 485, 312,
	523, 241, 883, 939, 886, 887, 912, 195, 901, 908,
	880, 840, 873, 846, 267, 847, 872, 893, 0, 870,
	467, 344, 0, 332, 874, 197, 858, 0, 400, 284,
	179, 844, 848, 849, 859, 863, 865, 866, 871, 879,
	882, 885, 888, 890, 892, 895, 906, 914, 915, 921,
	922, 923, 924, 925, 927, 936, 937, 168, 169, 170,
	171, 176, 177, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 194, 196, 198, 201, 202, 205, 206, 207,
	208, 209, 212, 216, 217, 218, 220, 221, 222, 223,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	226, 227, 228, 229, 230, 231, 235, 237, 238, 239,
	242, 243, 244, 245, 246, 247, 250, 251, 254, 257,
	258, 264, 269, 270, 271, 273, 274, 275, 281, 283,
	286, 287, 290, 292, 294, 296, 297, 298, 300, 301,
	302, 303, 306, 307, 308, 309, 310, 311, 313, 321,
	322, 324, 325, 326, 327, 330, 333, 335, 337, 338,
	340, 341, 343, 346, 347, 349, 350, 353, 354, 356,
	359, 362, 365, 367, 368, 369, 370, 373, 374, 375,
	376, 378, 381, 384, 386, 387, 389, 392, 394, 395,
	396, 397, 398, 399, 403, 406, 407, 408, 409, 411,
	413, 414, 415, 417, 419, 420, 421, 422, 423, 424,
	427, 428, 430, 431, 432, 433, 434, 439, 440, 443,
	444, 445, 448, 449, 450, 451, 452, 453, 455, 458,
	459, 463, 465, 468, 469, 475, 476, 478, 479, 481,
	482, 483, 484, 487, 489, 490, 492, 493, 497, 498,
	499, 506, 507, 511, 512, 513, 514, 517, 518, 519,
	520, 521, 522, 524, 525, 526, 527, 531, 532, 534,
	535, 536, 537, 540, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 529, 0,
	366, 528, 470, 357, 0, 0, 0, 896, 0, 899,
	919, 891, 913, 862, 904, 0, 279, 909, 935, 0,
	224, 0, 0, 372, 0, 265, 0, 0, 0, 0,
	165, 166, 167, 0, 488, 0, 0, 277, 236, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 907, 931, 878, 383,
	249, 299, 256, 248, 496, 0, 486, 851, 898, 930,
	0, 0, 605, 933, 331, 0, 911, 0, 843, 905,
	0, 190, 852, 938, 928, 875, 876, 0, 0, 0,
	0, 0, 0, 0, 894, 900, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 861,
	178, 253, 436, 842, 841, 173, 0, 0, 0, 234,
	0, 456, 926, 304, 533, 929, 0, 295, 916, 857,
	0, 0, 0, 854, 305, 172, 199, 860, 881, 371,
	917, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	210, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 200, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 175, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 480, 505, 213, 447, 454,
	435, 539, 192, 0, 474, 0, 314, 315, 191, 0,
	426, 252, 0, 0, 380, 503, 504, 0, 554, 203,
	530, 0, 942, 0, 363, 501, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 211, 0, 0, 262, 0,
	0, 884, 282, 0, 0, 0, 0, 416, 0, 457,
	495, 0, 934, 0, 0, 839, 833, 832, 318, 339,
	425, 541, 910, 437, 214, 516, 464, 868, 232, 864,
	0, 867, 902, 903, 869, 0, 0, 0, 233, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 355, 0,
	0, 358, 0, 460, 0, 0, 0, 438, 0, 853,
	0, 491, 0, 0, 0, 0, 0, 0, 0, 509,
	320, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 193,
	334, 941, 0, 0, 538, 0, 0, 845, 0, 0,
	0, 0, 255, 877, 0, 288, 289, 328, 0, 0,
	897, 0, 0, 0, 382, 393, 0, 0, 429, 0,
	494, 940, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 278, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 364, 0, 377, 379, 0,
	385, 0, 390, 0, 391, 401, 405, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	446, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	502, 515, 0, 0, 918, 280, 0, 0, 342, 0,
	0, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 0, 0, 0, 0, 0, 932, 920, 0,
	485, 312, 523, 241, 883, 939, 886, 887, 912, 195,
	901, 908, 880, 840, 873, 846, 267, 847, 872, 893,
	0, 870, 467, 344, 0, 332, 874, 197, 858, 0,
	400, 284, 179, 844, 848, 849, 859, 863, 865, 866,
	871, 879, 882, 885, 888, 890, 892, 895, 906, 914,
	915, 921, 922, 923, 924, 925, 927, 936, 937, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	529, 0, 366, 528, 470, 357, 0, 0, 0, 896,
	0, 899, 919, 891, 913, 862, 904, 0, 279, 909,
	935, 0, 224, 0, 0, 372, 0, 265, 0, 0,
	0, 0, 165, 166, 167, 0, 488, 0, 0, 277,
	236, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 907, 931,
	878, 383, 249, 299, 256, 248, 496, 0, 486, 851,
	898, 930, 0, 0, 0, 933, 331, 0, 911, 0,
	843, 905, 0, 190, 852, 938, 928, 875, 876, 0,
	0, 0, 0, 0, 0, 0, 894, 900, 0, 889,
	0, 0, 0, 0, 0, 1695, 0, 0, 0, 0,
	0, 0, 0, 855, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 861, 178, 253, 436, 842, 841, 173, 0, 0,
	0, 234, 0, 456, 926, 304, 533, 929, 0, 295,
	916, 857, 0, 0, 0, 854, 305, 172, 199, 860,
	881, 371, 917, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 211, 0, 0,
	262, 0, 0, 884, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 934, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 910, 437, 214, 516, 464, 868,
	232, 864, 0, 867, 902, 903, 869, 0, 0, 0,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 438,
	0, 853, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 509, 320, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 193, 334, 941, 0, 0, 538, 0, 0, 845,
	0, 0, 0, 0, 255, 877, 0, 288, 289, 328,
	0, 0, 897, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 940, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 0, 0, 918, 280, 0, 0,
	342, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 0, 0, 0, 0, 932,
	920, 0, 485, 312, 523, 241, 883, 939, 886, 887,
	912, 195, 901, 908, 880, 840, 873, 846, 267, 847,
	872, 893, 0, 870, 467, 344, 0, 332, 874, 197,
	858, 0, 400, 284, 179, 844, 848, 849, 859, 863,
	865, 866, 871, 879, 882, 885, 888, 890, 892, 895,
	906, 914, 915, 921, 922, 923, 924, 925, 927, 936,
	937, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 529, 0, 366, 528, 470, 357, 0, 0,
	0, 896, 0, 899, 919, 891, 913, 862, 904, 0,
	279, 909, 935, 0, 224, 0, 0, 372, 0, 265,
	0, 87, 0, 0, 165, 166, 167, 0, 488, 0,
	0, 277, 236, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	907, 931, 878, 383, 249, 299, 256, 248, 496, 0,
	486, 851, 898, 930, 0, 0, 0, 933, 331, 0,
	911, 0, 843, 905, 0, 190, 852, 938, 928, 875,
	876, 0, 0, 0, 0, 0, 0, 0, 894, 900,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 861, 178, 253, 436, 842, 841, 173,
	0, 0, 0, 234, 0, 456, 926, 304, 533, 929,
	0, 295, 916, 857, 0, 0, 0, 854, 305, 172,
	199, 860, 881, 371, 917, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 211,
	0, 0, 262, 0, 0, 884, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 934, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 910, 437, 214, 516,
	464, 868, 232, 864, 0, 867, 902, 903, 869, 0,
	0, 0, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 438, 0, 853, 0, 491, 0, 0, 0, 0,
	0, 0, 0, 509, 320, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 193, 334, 941, 0, 0, 538, 0,
	0, 845, 0, 0, 0, 0, 255, 877, 0, 288,
	289, 328, 0, 0, 897, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 940, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 0, 0, 918, 280,
	0, 0, 342, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 0, 0, 0,
	0, 932, 920, 0, 485, 312, 523, 241, 883, 939,
	886, 887, 912, 195, 901, 908, 880, 840, 873, 846,
	267, 847, 872, 893, 0, 870, 467, 344, 0, 332,
	874, 197, 858, 0, 400, 284, 179, 844, 848, 849,
	859, 863, 865, 866, 871, 879, 882, 885, 888, 890,
	892, 895, 906, 914, 915, 921, 922, 923, 924, 925,
	927, 936, 937, 168, 169, 170, 171, 176, 177, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 194, 196,
	198, 201, 202, 205, 206, 207, 208, 209, 212, 216,
	217, 218, 220, 221, 222, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 226, 227, 228, 229,
	230, 231, 235, 237, 238, 239, 242, 243, 244, 245,
	246, 247, 250, 251, 254, 257, 258, 264, 269, 270,
	271, 273, 274, 275, 281, 283, 286, 287, 290, 292,
	294, 296, 297, 298, 300, 301, 302, 303, 306, 307,
	308, 309, 310, 311, 313, 321, 322, 324, 325, 326,
	327, 330, 333, 335, 337, 338, 340, 341, 343, 346,
	347, 349, 350, 353, 354, 356, 359, 362, 365, 367,
	368, 369, 370, 373, 374, 375, 376, 378, 381, 384,
	386, 387, 389, 392, 394, 395, 396, 397, 398, 399,
	403, 406, 407, 408, 409, 411, 413, 414, 415, 417,
	419, 420, 421, 422, 423, 424, 427, 428, 430, 431,
	432, 433, 434, 439, 440, 443, 444, 445, 448, 449,
	450, 451, 452, 453, 455, 458, 459, 463, 465, 468,
	469, 475, 476, 478, 479, 481, 482, 483, 484, 487,
	489, 490, 492, 493, 497, 498, 499, 506, 507, 511,
	512, 513, 514, 517, 518, 519, 520, 521, 522, 524,
	525, 526, 527, 531, 532, 534, 535, 536, 537, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 529, 0, 366, 528, 470, 357,
	0, 0, 0, 896, 0, 899, 919, 891, 913, 862,
	904, 0, 279, 909, 935, 0, 224, 0, 0, 372,
	0, 265, 0, 0, 0, 0, 165, 166, 167, 0,
	488, 0, 0, 277, 236, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 907, 931, 878, 383, 249, 299, 256, 248,
	496, 0, 486, 851, 898, 930, 0, 0, 605, 933,
	331, 0, 911, 0, 843, 905, 0, 190, 852, 938,
	928, 875, 876, 0, 0, 0, 0, 0, 0, 0,
	894, 900, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 861, 178, 253, 436, 842,
	841, 173, 0, 0, 0, 234, 0, 456, 926, 304,
	533, 929, 0, 295, 916, 857, 0, 0, 0, 854,
	305, 172, 199, 860, 881, 371, 917, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 210, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 200, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	175, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 480, 1299, 213, 447, 454, 435, 539, 192, 0,
	474, 0, 314, 315, 191, 0, 426, 252, 0, 0,
	380, 503, 504, 0, 554, 203, 530, 0, 942, 0,
	363, 501, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 211, 0, 0, 262, 0, 0, 884, 282, 0,
	0, 0, 0, 416, 0, 457, 495, 0, 934, 0,
	0, 839, 833, 832, 318, 339, 425, 541, 910, 437,
	214, 516, 464, 868, 232, 864, 0, 867, 902, 903,
	869, 0, 0, 0, 233, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 355, 0, 0, 358, 0, 460,
	0, 0, 0, 438, 0, 853, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 509, 320, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 193, 334, 941, 0, 0,
	538, 0, 0, 845, 0, 0, 0, 0, 255, 877,
	0, 288, 289, 328, 0, 0, 897, 0, 0, 0,
	382, 393, 0, 0, 429, 0, 494, 940, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 278,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 364, 0, 377, 379, 0, 385, 0, 390, 0,
	391, 401, 405, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 446, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 502, 515, 0, 0,
	918, 280, 0, 0, 342, 0, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 932, 920, 0, 485, 312, 523, 241,
	883, 939, 886, 887, 912, 195, 901, 908, 880, 840,
	873, 846, 267, 847, 872, 893, 0, 870, 467, 344,
	0, 332, 874, 197, 858, 0, 400, 284, 179, 844,
	848, 849, 859, 863, 865, 866, 871, 879, 882, 885,
	888, 890, 892, 895, 906, 914, 915, 921, 922, 923,
	924, 925, 927, 936, 937, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 529, 0, 366, 528,
	470, 357, 0, 0, 0, 896, 0, 899, 919, 891,
	913, 862, 904, 0, 279, 909, 935, 0, 224, 0,
	0, 372, 0, 265, 0, 0, 0, 0, 165, 166,
	167, 0, 488, 0, 0, 277, 236, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 907, 931, 878, 383, 249, 299,
	256, 248, 496, 0, 486, 851, 898, 930, 0, 0,
	605, 933, 331, 0, 911, 0, 843, 905, 0, 190,
	852, 938, 928, 875, 876, 0, 0, 0, 0, 0,
	0, 0, 894, 900, 0, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 855,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 861, 178, 253,
	436, 842, 841, 173, 0, 0, 0, 234, 0, 456,
	926, 304, 533, 929, 0, 295, 916, 857, 0, 0,
	0, 854, 305, 172, 199, 860, 881, 371, 917, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 830, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	942, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 211, 0, 0, 262, 0, 0, 884,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	934, 0, 0, 839, 833, 832, 318, 339, 425, 541,
	910, 437, 214, 516, 464, 868, 232, 864, 0, 867,
	902, 903, 869, 0, 0, 0, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 438, 0, 853, 0, 491,
	0, 0, 0, 0, 0, 0, 0, 509, 320, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 0, 193, 334, 941,
	0, 0, 538, 0, 0, 845, 0, 0, 0, 0,
	255, 877, 0, 288, 289, 328, 0, 0, 897, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 940,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	0, 0, 918, 280, 0, 0, 342, 0, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 0, 0, 0, 0, 932, 920, 0, 485, 312,
	523, 241, 883, 939, 886, 887, 912, 195, 901, 908,
	880, 840, 873, 846, 267, 847, 872, 893, 0, 870,
	467, 344, 0, 332, 874, 197, 858, 0, 400, 284,
	179, 844, 848, 849, 859, 863, 865, 866, 871, 879,
	882, 885, 888, 890, 892, 895, 906, 914, 915, 921,
	922, 923, 924, 925, 927, 936, 937, 168, 169, 170,
	171, 176, 177, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 194, 196, 198, 201, 202, 205, 206, 207,
	208, 209, 212, 216, 217, 218, 220, 221, 222, 223,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	226, 227, 228, 229, 230, 231, 235, 237, 238, 239,
	242, 243, 244, 245, 246, 247, 250, 251, 254, 257,
	258, 264, 269, 270, 271, 273, 274, 275, 281, 283,
	286, 287, 290, 292, 294, 296, 297, 298, 300, 301,
	302, 303, 306, 307, 308, 309, 310, 311, 313, 321,
	322, 324, 325, 326, 327, 330, 333, 335, 337, 338,
	340, 341, 343, 346, 347, 349, 350, 353, 354, 356,
	359, 362, 365, 367, 368, 369, 370, 373, 374, 375,
	376, 378, 381, 384, 386, 387, 389, 392, 394, 395,
	396, 397, 398, 399, 403, 406, 407, 408, 409, 411,
	413, 414, 415, 417, 419, 420, 421, 422, 423, 424,
	427, 428, 430, 431, 432, 433, 434, 439, 440, 443,
	444, 445, 448, 449, 450, 451, 452, 453, 455, 458,
	459, 463, 465, 468, 469, 475, 476, 478, 479, 481,
	482, 483, 484, 487, 489, 490, 492, 493, 497, 498,
	499, 506, 507, 511, 512, 513, 514, 517, 518, 519,
	520, 521, 522, 524, 525, 526, 527, 531, 532, 534,
	535, 536, 537, 540, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 529, 0,
	366, 528, 470, 357, 0, 0, 0, 896, 0, 899,
	919, 891, 913, 862, 904, 0, 279, 909, 935, 0,
	224, 0, 0, 372, 0, 265, 0, 0, 0, 0,
	165, 166, 167, 0, 488, 0, 0, 277, 236, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 907, 931, 878, 383,
	249, 299, 256, 248, 496, 0, 486, 851, 898, 930,
	0, 0, 0, 933, 331, 0, 911, 0, 843, 905,
	0, 190, 852, 938, 928, 875, 876, 0, 0, 0,
	0, 0, 0, 0, 894, 900, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 861,
	178, 253, 436, 842, 841, 173, 0, 0, 0, 234,
	0, 456, 926, 304, 533, 929, 0, 295, 916, 857,
	0, 0, 0, 854, 305, 172, 199, 860, 881, 371,
	917, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	210, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 200, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 175, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 480, 505, 213, 447, 454,
	435, 539, 192, 0, 474, 0, 314, 315, 191, 0,
	426, 252, 0, 0, 380, 503, 504, 0, 554, 203,
	530, 0, 204, 0, 363, 501, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 211, 0, 0, 262, 0,
	0, 884, 282, 0, 0, 0, 0, 416, 0, 457,
	495, 0, 934, 0, 0, 361, 285, 466, 318, 339,
	425, 541, 910, 437, 214, 516, 464, 868, 232, 864,
	0, 867, 902, 903, 869, 0, 0, 0, 233, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 355, 0,
	0, 358, 0, 460, 0, 0, 0, 438, 0, 853,
	0, 491, 0, 0, 0, 0, 0, 0, 0, 509,
	320, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 193,
	334, 941, 0, 0, 538, 0, 0, 845, 0, 0,
	0, 0, 255, 877, 0, 288, 289, 328, 0, 0,
	897, 0, 0, 0, 382, 393, 0, 0, 429, 0,
	494, 940, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 278, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 364, 0, 377, 379, 0,
	385, 0, 390, 0, 391, 401, 405, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	446, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	502, 515, 0, 0, 918, 280, 0, 0, 342, 0,
	0, 0, 260, 312, 523, 241, 0, 0, 0, 0,
	0, 195, 219, 0, 0, 0, 0, 0, 649, 0,
	404, 0, 0, 654, 467, 344, 0, 332, 0, 197,
	485, 0, 400, 284, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 661, 0, 366, 528, 470, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167, 726, 735, 736,
	737, 734, 733, 727, 729, 0, 0, 728, 215, 672,
	674, 673, 683, 684, 685, 686, 687, 688, 689, 670,
	731, 738, 739, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 646, 0, 660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 645, 0, 0, 653, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 655,
	0, 0, 0, 0, 178, 253, 436, 0, 0, 173,
	0, 0, 0, 234, 0, 708, 0, 304, 533, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 305, 172,
	199, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 678, 679,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 262, 0, 0, 0, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 0, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 0, 437, 214, 516,
	464, 715, 707, 665, 719, 667, 716, 717, 662, 663,
	666, 718, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 710, 652, 651, 0, 658, 659, 0, 668, 669,
	671, 675, 676, 677, 680, 681, 682, 690, 692, 693,
	691, 694, 695, 696, 699, 700, 701, 702, 697, 698,
	703, 650, 0, 193, 334, 0, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 288,
	289, 328, 0, 0, 0, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 312, 523, 241, 280,
	0, 0, 342, 0, 195, 0, 260, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 219, 467, 344, 0,
	332, 0, 197, 0, 404, 400, 284, 179, 0, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 169, 170, 171, 176, 177,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 194,
	196, 198, 201, 202, 205, 206, 207, 208, 209, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 165, 166, 167,
	0, 735, 736, 0, 277, 236, 0, 1556, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 272, 0, 0, 0, 383, 249, 299, 256,
	248, 496, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 316, 0, 0, 0, 0, 178, 253, 436,
	0, 0, 173, 0, 0, 0, 234, 0, 456, 0,
	304, 533, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 305, 172, 199, 0, 0, 371, 0, 442, 471,
	0, 268, 0, 261, 0, 0, 510, 210, 0, 0,
	0, 0, 412, 266, 351, 402, 0, 0, 0, 418,
	508, 0, 0, 0, 360, 0, 0, 0, 0, 200,
	240, 388, 477, 0, 462, 352, 500, 0, 317, 461,
	276, 175, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 480, 505, 213, 447, 454, 435, 539, 192,
	0, 474, 0, 314, 315, 191, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 203, 530, 0, 204,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 193, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 312,
	523, 241, 280, 0, 0, 342, 0, 195, 0, 260,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 219,
	467, 344, 0, 332, 0, 197, 0, 404, 400, 284,
	179, 0, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 176, 177, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 194, 196, 198, 201, 202, 205, 206, 207,
	208, 209, 212, 216, 217, 218, 220, 221, 222, 223,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	226, 227, 228, 229, 230, 231, 235, 237, 238, 239,
	242, 243, 244, 245, 246, 247, 250, 251, 254, 257,
	258, 264, 269, 270, 271, 273, 274, 275, 281, 283,
	286, 287, 290, 292, 294, 296, 297, 298, 300, 301,
	302, 303, 306, 307, 308, 309, 310, 311, 313, 321,
	322, 324, 325, 326, 327, 330, 333, 335, 337, 338,
	340, 341, 343, 346, 347, 349, 350, 353, 354, 356,
	359, 362, 365, 367, 368, 369, 370, 373, 374, 375,
	376, 378, 381, 384, 386, 387, 389, 392, 394, 395,
	396, 397, 398, 399, 403, 406, 407, 408, 409, 411,
	413, 414, 415, 417, 419, 420, 421, 422, 423, 424,
	427, 428, 430, 431, 432, 433, 434, 439, 440, 443,
	444, 445, 448, 449, 450, 451, 452, 453, 455, 458,
	459, 463, 465, 468, 469, 475, 476, 478, 479, 481,
	482, 483, 484, 487, 489, 490, 492, 493, 497, 498,
	499, 506, 507, 511, 512, 513, 514, 517, 518, 519,
	520, 521, 522, 524, 525, 526, 527, 531, 532, 534,
	535, 536, 537, 540, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 529, 0,
	366, 528, 470, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	224, 0, 0, 372, 0, 265, 0, 0, 0, 0,
	165, 166, 167, 0, 488, 0, 0, 277, 236, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 1738, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	178, 253, 436, 0, 0, 173, 0, 0, 0, 234,
	0, 456, 0, 1737, 533, 0, 0, 295, 0, 0,
	986, 987, 0, 950, 305, 172, 199, 980, 984, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	210, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 200, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 175, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 480, 505, 213, 447, 454,
	435, 539, 192, 0, 474, 0, 314, 315, 191, 0,
	426, 252, 0, 0, 380, 503, 504, 0, 554, 203,
	530, 0, 204, 0, 363, 501, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 262, 0,
	0, 0, 282, 0, 0, 0, 0, 416, 0, 457,
	495, 0, 0, 0, 0, 361, 285, 466, 318, 339,
	425, 541, 0, 437, 214, 516, 464, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 355, 0,
	0, 358, 0, 460, 0, 0, 0, 438, 0, 0,
	0, 491, 0, 0, 0, 0, 0, 0, 0, 509,
	320, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 193,
	334, 0, 0, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 288, 289, 328, 0, 0,
	0, 0, 0, 0, 382, 393, 0, 0, 429, 0,
	494, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 278, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 364, 0, 377, 379, 0,
	385, 0, 390, 0, 391, 401, 405, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	446, 0, 0, 0, 0, 0, 472, 473, 0, 78,
	502, 515, 312, 523, 241, 280, 0, 0, 342, 0,
	195, 0, 260, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 219, 467, 344, 0, 332, 0, 197, 0,
	404, 400, 284, 179, 0, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 169, 170, 171, 176, 177, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 194, 196, 198, 201, 202,
	205, 206, 207, 208, 209, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	87, 0, 0, 165, 166, 167, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 272, 0,
	0, 0, 383, 249, 299, 256, 248, 496, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 178, 253, 436, 0, 0, 173, 0,
	0, 0, 234, 0, 456, 0, 304, 533, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 305, 172, 199,
	0, 0, 371, 0, 442, 471, 0, 268, 0, 261,
	0, 0, 510, 210, 0, 0, 0, 0, 412, 266,
	351, 402, 0, 0, 0, 418, 508, 0, 0, 0,
	360, 0, 0, 0, 0, 200, 240, 388, 477, 0,
	462, 352, 500, 0, 317, 461, 276, 175, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 480, 505,
	213, 447, 454, 435, 539, 192, 0, 474, 0, 314,
	315, 191, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 203, 530, 0, 204, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 193, 334, 86, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	1713, 0, 0, 1712, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 78, 502, 515, 312, 523, 241, 280, 0,
	0, 342, 0, 195, 0, 260, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 219, 467, 344, 0, 332,
	0, 197, 0, 404, 400, 284, 179, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 176, 177, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 194, 196,
	198, 201, 202, 205, 206, 207, 208, 209, 212, 216,
	217, 218, 220, 221, 222, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 226, 227, 228, 229,
	230, 231, 235, 237, 238, 239, 242, 243, 244, 245,
	246, 247, 250, 251, 254, 257, 258, 264, 269, 270,
	271, 273, 274, 275, 281, 283, 286, 287, 290, 292,
	294, 296, 297, 298, 300, 301, 302, 303, 306, 307,
	308, 309, 310, 311, 313, 321, 322, 324, 325, 326,
	327, 330, 333, 335, 337, 338, 340, 341, 343, 346,
	347, 349, 350, 353, 354, 356, 359, 362, 365, 367,
	368, 369, 370, 373, 374, 375, 376, 378, 381, 384,
	386, 387, 389, 392, 394, 395, 396, 397, 398, 399,
	403, 406, 407, 408, 409, 411, 413, 414, 415, 417,
	419, 420, 421, 422, 423, 424, 427, 428, 430, 431,
	432, 433, 434, 439, 440, 443, 444, 445, 448, 449,
	450, 451, 452, 453, 455, 458, 459, 463, 465, 468,
	469, 475, 476, 478, 479, 481, 482, 483, 484, 487,
	489, 490, 492, 493, 497, 498, 499, 506, 507, 511,
	512, 513, 514, 517, 518, 519, 520, 521, 522, 524,
	525, 526, 527, 531, 532, 534, 535, 536, 537, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 529, 0, 366, 528, 470, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 224, 0, 0, 372,
	0, 265, 0, 87, 0, 1270, 165, 166, 167, 0,
	488, 0, 0, 277, 236, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 178, 253, 436, 0,
	0, 173, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 172, 199, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 210, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 200, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	175, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 480, 505, 213, 447, 454, 435, 539, 192, 0,
	474, 0, 314, 315, 191, 0, 426, 252, 0, 0,
	380, 503, 504, 0, 554, 203, 530, 0, 204, 0,
	363, 501, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 262, 0, 0, 0, 282, 0,
	0, 0, 0, 416, 0, 457, 495, 0, 0, 0,
	0, 361, 285, 466, 318, 339, 425, 541, 0, 437,
	214, 516, 464, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 355, 0, 0, 358, 0, 460,
	0, 0, 0, 438, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 509, 320, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 193, 334, 86, 0, 0,
	538, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 288, 289, 328, 0, 0, 0, 0, 0, 0,
	382, 393, 0, 0, 429, 0, 494, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 278,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 364, 0, 377, 379, 0, 385, 0, 390, 0,
	391, 401, 405, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 446, 0, 0, 0,
	0, 1124, 472, 473, 0, 0, 502, 515, 312, 523,
	241, 280, 0, 0, 342, 0, 195, 0, 260, 0,
	0, 0, 1287, 267, 0, 0, 0, 0, 219, 467,
	344, 0, 332, 0, 197, 0, 404, 400, 284, 179,
	0, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 169, 170, 171,
	176, 177, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 194, 196, 198, 201, 202, 205, 206, 207, 208,
	209, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 165,
	166, 167, 0, 1289, 0, 0, 277, 236, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 272, 0, 0, 0, 383, 249,
	299, 256, 248, 496, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 1122, 0, 1123, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 178,
	253, 436, 0, 0, 173, 0, 0, 0, 234, 0,
	456, 0, 304, 533, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 305, 172, 199, 0, 0, 371, 0,
	442, 471, 0, 268, 0, 261, 0, 0, 510, 210,
	0, 0, 0, 0, 412, 266, 351, 402, 0, 0,
	0, 418, 508, 0, 0, 0, 360, 0, 0, 0,
	0, 200, 240, 388, 477, 0, 462, 352, 500, 0,
	317, 461, 276, 175, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 480, 505, 213, 447, 454, 435,
	539, 192, 0, 474, 0, 314, 315, 191, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 203, 530,
	0, 204, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 193, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 312, 523, 241, 280, 0, 0, 342, 0, 195,
	0, 260, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 219, 467, 344, 0, 332, 0, 197, 0, 404,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	529, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 0,
	0, 0, 165, 166, 167, 1232, 1235, 0, 0, 277,
	236, 1231, 1234, 0, 0, 1230, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 438,
	0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 509, 320, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 193, 334, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 312, 523, 241, 280, 0, 0,
	342, 0, 195, 0, 260, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 219, 467, 344, 0, 332, 0,
	197, 0, 404, 400, 284, 179, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 176, 177, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 194, 196, 198,
	201, 202, 205, 206, 207, 208, 209, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 165, 166, 167, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	272, 0, 0, 0, 383, 249, 299, 256, 248, 496,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 178, 253, 436, 0, 0,
	173, 0, 0, 0, 234, 0, 456, 0, 304, 533,
	0, 0, 295, 0, 0, 0, 0, 0, 950, 305,
	172, 199, 948, 0, 371, 0, 442, 471, 0, 268,
	0, 261, 0, 0, 510, 210, 0, 0, 0, 0,
	412, 266, 351, 402, 0, 0, 0, 418, 508, 0,
	0, 0, 360, 0, 0, 0, 0, 200, 240, 388,
	477, 0, 462, 352, 500, 0, 317, 461, 276, 175,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	480, 505, 213, 447, 454, 435, 539, 192, 0, 474,
	0, 314, 315, 191, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 203, 530, 0, 204, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 193, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 312, 523, 241,
	280, 0, 0, 342, 0, 195, 0, 260, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 219, 467, 344,
	0, 332, 0, 197, 0, 404, 400, 284, 179, 0,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 529, 0, 366, 528,
	470, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 224, 0,
	0, 372, 0, 265, 0, 0, 0, 1270, 165, 166,
	167, 0, 488, 0, 0, 277, 236, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 178, 253,
	436, 0, 0, 173, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 2526, 0, 0, 0,
	0, 0, 305, 172, 199, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 505, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	204, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 262, 0, 0, 0,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	0, 0, 0, 361, 285, 466, 318, 339, 425, 541,
	0, 437, 214, 516, 464, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 438, 0, 0, 0, 491,
	0, 0, 0, 0, 0, 0, 0, 509, 320, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 0, 193, 334, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 288, 289, 328, 0, 0, 0, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	312, 523, 241, 280, 0, 0, 342, 0, 195, 0,
	260, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	219, 467, 344, 0, 332, 0, 197, 0, 404, 400,
	284, 179, 0, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 169,
	170, 171, 176, 177, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 194, 196, 198, 201, 202, 205, 206,
	207, 208, 209, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 87, 0,
	0, 165, 166, 167, 0, 488, 0, 0, 277, 236,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 272, 0, 0, 0,
	383, 249, 299, 256, 248, 496, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 178, 253, 436, 0, 0, 173, 0, 0, 0,
	234, 0, 456, 0, 304, 533, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 305, 172, 199, 0, 0,
	371, 0, 442, 471, 0, 268, 0, 261, 0, 0,
	510, 210, 0, 0, 0, 0, 412, 266, 351, 402,
	0, 0, 0, 418, 508, 0, 0, 0, 360, 0,
	0, 0, 0, 200, 240, 388, 477, 0, 462, 352,
	500, 0, 317, 461, 276, 175, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 480, 505, 213, 447,
	454, 435, 539, 192, 0, 474, 0, 314, 315, 191,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	203, 530, 0, 204, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	193, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 1713, 0,
	0, 1712, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 364, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 312, 523, 241, 280, 0, 0, 342,
	0, 195, 0, 260, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 219, 467, 344, 0, 332, 0, 197,
	0, 404, 400, 284, 179, 0, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 529, 0, 366, 528, 470, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 224, 0, 0, 372, 0, 265,
	0, 0, 0, 0, 165, 166, 167, 0, 488, 0,
	0, 277, 236, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 178, 253, 436, 624, 623, 173,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 305, 172,
	199, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 262, 0, 0, 0, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 0, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 0, 437, 214, 516,
	464, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 438, 0, 0, 0, 491, 0, 0, 0, 0,
	0, 0, 0, 509, 320, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 193, 334, 0, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 288,
	289, 328, 0, 0, 0, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 312, 523, 241, 622,
	0, 0, 342, 0, 195, 0, 260, 0, 0, 0,
	1666, 267, 0, 0, 0, 0, 219, 467, 344, 0,
	332, 0, 197, 0, 404, 400, 284, 179, 0, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 169, 170, 171, 176, 177,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 194,
	196, 198, 201, 202, 205, 206, 207, 208, 209, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 165, 166, 167,
	0, 1668, 0, 0, 277, 236, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 272, 0, 0, 0, 383, 249, 299, 256,
	248, 496, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 178, 253, 436,
	0, 0, 173, 0, 0, 0, 234, 0, 456, 0,
	304, 533, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 305, 172, 199, 0, 0, 371, 0, 442, 471,
	0, 268, 0, 261, 0, 0, 510, 210, 0, 0,
	0, 0, 412, 266, 351, 402, 0, 0, 0, 418,
	508, 0, 0, 0, 360, 0, 0, 0, 0, 200,
	240, 388, 477, 0, 462, 352, 500, 0, 317, 461,
	276, 175, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 480, 505, 213, 447, 454, 435, 539, 192,
	0, 474, 0, 314, 315, 191, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 203, 530, 0, 204,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 193, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 312,
	523, 241, 280, 0, 0, 342, 0, 195, 0, 260,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 219,
	467, 344, 0, 332, 0, 197, 0, 404, 400, 284,
	179, 0, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 176, 177, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 194, 196, 198, 201, 202, 205, 206, 207,
	208, 209, 212, 216, 217, 218, 220, 221, 222, 223,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	226, 227, 228, 229, 230, 231, 235, 237, 238, 239,
	242, 243, 244, 245, 246, 247, 250, 251, 254, 257,
	258, 264, 269, 270, 271, 273, 274, 275, 281, 283,
	286, 287, 290, 292, 294, 296, 297, 298, 300, 301,
	302, 303, 306, 307, 308, 309, 310, 311, 313, 321,
	322, 324, 325, 326, 327, 330, 333, 335, 337, 338,
	340, 341, 343, 346, 347, 349, 350, 353, 354, 356,
	359, 362, 365, 367, 368, 369, 370, 373, 374, 375,
	376, 378, 381, 384, 386, 387, 389, 392, 394, 395,
	396, 397, 398, 399, 403, 406, 407, 408, 409, 411,
	413, 414, 415, 417, 419, 420, 421, 422, 423, 424,
	427, 428, 430, 431, 432, 433, 434, 439, 440, 443,
	444, 445, 448, 449, 450, 451, 452, 453, 455, 458,
	459, 463, 465, 468, 469, 475, 476, 478, 479, 481,
	482, 483, 484, 487, 489, 490, 492, 493, 497, 498,
	499, 506, 507, 511, 512, 513, 514, 517, 518, 519,
	520, 521, 522, 524, 525, 526, 527, 531, 532, 534,
	535, 536, 537, 540, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 529, 0,
	366, 528, 470, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	224, 0, 0, 372, 0, 265, 0, 0, 0, 0,
	165, 166, 167, 0, 488, 0, 0, 277, 236, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	178, 253, 436, 0, 0, 173, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 2581, 0,
	0, 0, 0, 0, 305, 172, 199, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	210, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 200, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 175, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 480, 505, 213, 447, 454,
	435, 539, 192, 0, 474, 0, 314, 315, 191, 0,
	426, 252, 0, 0, 380, 503, 504, 0, 554, 203,
	530, 0, 204, 0, 363, 501, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 262, 0,
	0, 0, 282, 0, 0, 0, 0, 416, 0, 457,
	495, 0, 0, 0, 0, 361, 285, 466, 318, 339,
	425, 541, 0, 437, 214, 516, 464, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 355, 0,
	0, 358, 0, 460, 0, 0, 0, 438, 0, 0,
	0, 491, 0, 0, 0, 0, 0, 0, 0, 509,
	320, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 193,
	334, 0, 0, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 288, 289, 328, 0, 0,
	0, 0, 0, 0, 382, 393, 0, 0, 429, 0,
	494, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 278, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 364, 0, 377, 379, 0,
	385, 0, 390, 0, 391, 401, 405, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	446, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	502, 515, 312, 523, 241, 280, 0, 0, 342, 0,
	195, 0, 260, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 219, 467, 344, 0, 332, 0, 197, 0,
	404, 400, 284, 179, 0, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 169, 170, 171, 176, 177, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 194, 196, 198, 201, 202,
	205, 206, 207, 208, 209, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 165, 166, 167, 0, 488, 0, 0,
	277, 236, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 272, 0,
	0, 0, 383, 249, 299, 256, 248, 496, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 178, 253, 436, 0, 0, 173, 0,
	0, 0, 234, 0, 456, 0, 304, 533, 0, 0,
	295, 2526, 0, 0, 0, 0, 0, 305, 172, 199,
	0, 0, 371, 0, 442, 471, 0, 268, 0, 261,
	0, 0, 510, 210, 0, 0, 0, 0, 412, 266,
	351, 402, 0, 0, 0, 418, 508, 0, 0, 0,
	360, 0, 0, 0, 0, 200, 240, 388, 477, 0,
	462, 352, 500, 0, 317, 461, 276, 175, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 480, 505,
	213, 447, 454, 435, 539, 192, 0, 474, 0, 314,
	315, 191, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 203, 530, 0, 204, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 193, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 312, 523, 241, 280, 0,
	0, 342, 0, 195, 0, 260, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 219, 467, 344, 0, 332,
	0, 197, 0, 404, 400, 284, 179, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 176, 177, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 194, 196,
	198, 201, 202, 205, 206, 207, 208, 209, 212, 216,
	217, 218, 220, 221, 222, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 226, 227, 228, 229,
	230, 231, 235, 237, 238, 239, 242, 243, 244, 245,
	246, 247, 250, 251, 254, 257, 258, 264, 269, 270,
	271, 273, 274, 275, 281, 283, 286, 287, 290, 292,
	294, 296, 297, 298, 300, 301, 302, 303, 306, 307,
	308, 309, 310, 311, 313, 321, 322, 324, 325, 326,
	327, 330, 333, 335, 337, 338, 340, 341, 343, 346,
	347, 349, 350, 353, 354, 356, 359, 362, 365, 367,
	368, 369, 370, 373, 374, 375, 376, 378, 381, 384,
	386, 387, 389, 392, 394, 395, 396, 397, 398, 399,
	403, 406, 407, 408, 409, 411, 413, 414, 415, 417,
	419, 420, 421, 422, 423, 424, 427, 428, 430, 431,
	432, 433, 434, 439, 440, 443, 444, 445, 448, 449,
	450, 451, 452, 453, 455, 458, 459, 463, 465, 468,
	469, 475, 476, 478, 479, 481, 482, 483, 484, 487,
	489, 490, 492, 493, 497, 498, 499, 506, 507, 511,
	512, 513, 514, 517, 518, 519, 520, 521, 522, 524,
	525, 526, 527, 531, 532, 534, 535, 536, 537, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 529, 0, 366, 528, 470, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 224, 0, 0, 372,
	0, 265, 0, 0, 0, 0, 165, 166, 167, 0,
	1552, 0, 0, 277, 236, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 178, 253, 436, 0,
	0, 173, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 172, 199, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 210, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 200, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	175, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 480, 505, 213, 447, 454, 435, 539, 192, 0,
	474, 0, 314, 315, 191, 0, 426, 252, 0, 0,
	380, 503, 504, 0, 554, 203, 530, 0, 204, 0,
	363, 501, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 262, 0, 0, 0, 282, 0,
	0, 0, 0, 416, 0, 457, 495, 0, 0, 0,
	0, 361, 285, 466, 318, 339, 425, 541, 0, 437,
	214, 516, 464, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 355, 0, 0, 358, 0, 460,
	0, 0, 0, 438, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 509, 320, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 193, 334, 0, 0, 0,
	538, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 288, 289, 328, 0, 0, 0, 0, 0, 0,
	382, 393, 0, 0, 429, 0, 494, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 278,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 364, 0, 377, 379, 0, 385, 0, 390, 0,
	391, 401, 405, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 446, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 502, 515, 312, 523,
	241, 280, 0, 0, 342, 0, 195, 0, 260, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 219, 467,
	344, 0, 332, 0, 197, 0, 404, 400, 284, 179,
	0, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 169, 170, 171,
	176, 177, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 194, 196, 198, 201, 202, 205, 206, 207, 208,
	209, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 165,
	166, 167, 0, 2038, 0, 0, 277, 236, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 272, 0, 0, 0, 383, 249,
	299, 256, 248, 496, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 178,
	253, 436, 0, 0, 173, 0, 0, 0, 234, 0,
	456, 0, 304, 533, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 305, 172, 199, 0, 0, 371, 0,
	442, 471, 0, 268, 0, 261, 0, 0, 510, 210,
	0, 0, 0, 0, 412, 266, 351, 402, 0, 0,
	0, 418, 508, 0, 0, 0, 360, 0, 0, 0,
	0, 200, 240, 388, 477, 0, 462, 352, 500, 0,
	317, 461, 276, 175, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 480, 505, 213, 447, 454, 435,
	539, 192, 0, 474, 0, 314, 315, 191, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 203, 530,
	0, 204, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 193, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 312, 523, 241, 280, 0, 0, 342, 0, 195,
	0, 260, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 219, 467, 344, 0, 332, 0, 197, 0, 404,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	529, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 0,
	0, 0, 165, 166, 167, 0, 488, 0, 0, 277,
	236, 0, 1966, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 438,
	0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 509, 320, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 193, 334, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 312, 523, 241, 280, 0, 0,
	342, 0, 195, 0, 260, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 219, 467, 344, 0, 332, 0,
	197, 0, 404, 400, 284, 179, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 176, 177, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 194, 196, 198,
	201, 202, 205, 206, 207, 208, 209, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 87, 0, 0, 165, 166, 167, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	272, 0, 0, 0, 383, 249, 299, 256, 248, 496,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 178, 253, 436, 0, 0,
	173, 0, 0, 0, 234, 0, 456, 0, 304, 533,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 305,
	172, 199, 0, 0, 371, 0, 442, 471, 0, 268,
	0, 261, 0, 0, 510, 210, 0, 0, 0, 0,
	412, 266, 351, 402, 0, 0, 0, 418, 508, 0,
	0, 0, 360, 0, 0, 0, 0, 200, 240, 388,
	477, 0, 462, 352, 500, 0, 317, 461, 276, 175,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	480, 505, 213, 447, 454, 435, 539, 192, 0, 474,
	0, 314, 315, 191, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 203, 530, 0, 204, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 193, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 0, 0, 0,
	280, 0, 0, 342, 0, 0, 0, 260, 312, 523,
	241, 1714, 0, 0, 0, 0, 195, 219, 0, 0,
	0, 0, 0, 267, 0, 404, 0, 0, 0, 467,
	344, 0, 332, 0, 197, 485, 0, 400, 284, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 169, 170, 171,
	176, 177, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 194, 196, 198, 201, 202, 205, 206, 207, 208,
	209, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 165,
	166, 167, 0, 488, 0, 0, 277, 236, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 272, 0, 0, 0, 383, 249,
	299, 256, 248, 496, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 178,
	253, 436, 0, 0, 173, 0, 0, 0, 234, 0,
	456, 0, 304, 533, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 305, 172, 199, 0, 0, 371, 0,
	442, 471, 0, 268, 0, 261, 0, 0, 510, 210,
	0, 0, 0, 0, 412, 266, 351, 402, 0, 0,
	0, 418, 508, 0, 0, 0, 360, 0, 0, 0,
	0, 200, 240, 388, 477, 0, 462, 352, 500, 0,
	317, 461, 276, 175, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 480, 505, 213, 447, 454, 435,
	539, 192, 0, 474, 0, 314, 315, 191, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 203, 530,
	0, 204, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 193, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 312, 523, 241, 280, 0, 0, 342, 0, 195,
	0, 260, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 219, 467, 344, 0, 332, 0, 197, 0, 404,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	529, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 0,
	0, 0, 165, 166, 167, 0, 488, 0, 0, 277,
	236, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 438,
	0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 509, 320, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 193, 334, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 312, 523, 241, 280, 0, 0,
	342, 0, 195, 0, 260, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 219, 467, 344, 0, 332, 0,
	197, 0, 404, 400, 284, 179, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 176, 177, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 194, 196, 198,
	201, 202, 205, 206, 207, 208, 209, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 165, 166, 167, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	272, 0, 0, 0, 383, 249, 299, 256, 248, 496,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 178, 253, 436, 0, 0,
	173, 0, 0, 0, 234, 0, 456, 0, 304, 533,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 305,
	172, 199, 0, 0, 371, 0, 442, 471, 0, 268,
	0, 261, 0, 0, 510, 210, 0, 0, 0, 0,
	412, 266, 351, 402, 0, 0, 0, 418, 508, 0,
	0, 0, 360, 0, 0, 0, 0, 200, 240, 388,
	477, 0, 462, 352, 500, 0, 317, 461, 276, 175,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	480, 505, 213, 447, 454, 435, 539, 192, 0, 474,
	0, 314, 315, 191, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 203, 530, 0, 204, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 193, 334, 1508, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 312, 523, 241,
	280, 0, 0, 342, 0, 195, 0, 260, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 219, 467, 344,
	0, 332, 0, 197, 0, 404, 400, 284, 179, 0,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 529, 0, 366, 528,
	470, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 224, 0,
	0, 372, 0, 265, 0, 1387, 0, 0, 165, 166,
	167, 0, 488, 0, 0, 277, 236, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 178, 253,
	436, 0, 0, 173, 0, 0, 0, 234, 0, 456,
	0, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 305, 172, 199, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 505, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	204, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 262, 0, 0, 0,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	0, 0, 0, 361, 285, 466, 318, 339, 425, 541,
	0, 437, 214, 516, 464, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 438, 0, 0, 0, 491,
	0, 0, 0, 0, 0, 0, 0, 509, 320, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 0, 193, 334, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 288, 289, 328, 0, 0, 0, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	0, 0, 0, 280, 0, 0, 342, 0, 0, 0,
	260, 312, 523, 241, 0, 0, 0, 0, 0, 195,
	219, 0, 0, 0, 0, 0, 267, 0, 404, 0,
	0, 1310, 467, 344, 0, 332, 0, 197, 485, 0,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	529, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 0,
	0, 0, 165, 166, 167, 0, 1309, 0, 0, 277,
	236, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 438,
	0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 509, 320, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 193, 334, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	429, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 312, 523, 241, 280, 0, 0,
	342, 0, 195, 0, 260, 0, 0, 0, 0, 267,
	0, 0, 1294, 0, 219, 467, 344, 0, 332, 0,
	197, 0, 404, 400, 284, 179, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 176, 177, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 194, 196, 198,
	201, 202, 205, 206, 207, 208, 209, 212, 216, 217,
	218, 220, 221, 222, 223, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 226, 227, 228, 229, 230,
	231, 235, 237, 238, 239, 242, 243, 244, 245, 246,
	247, 250, 251, 254, 257, 258, 264, 269, 270, 271,
	273, 274, 275, 281, 283, 286, 287, 290, 292, 294,
	296, 297, 298, 300, 301, 302, 303, 306, 307, 308,
	309, 310, 311, 313, 321, 322, 324, 325, 326, 327,
	330, 333, 335, 337, 338, 340, 341, 343, 346, 347,
	349, 350, 353, 354, 356, 359, 362, 365, 367, 368,
	369, 370, 373, 374, 375, 376, 378, 381, 384, 386,
	387, 389, 392, 394, 395, 396, 397, 398, 399, 403,
	406, 407, 408, 409, 411, 413, 414, 415, 417, 419,
	420, 421, 422, 423, 424, 427, 428, 430, 431, 432,
	433, 434, 439, 440, 443, 444, 445, 448, 449, 450,
	451, 452, 453, 455, 458, 459, 463, 465, 468, 469,
	475, 476, 478, 479, 481, 482, 483, 484, 487, 489,
	490, 492, 493, 497, 498, 499, 506, 507, 511, 512,
	513, 514, 517, 518, 519, 520, 521, 522, 524, 525,
	526, 527, 531, 532, 534, 535, 536, 537, 540, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 529, 0, 366, 528, 470, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 224, 0, 0, 372, 0,
	265, 0, 0, 0, 0, 165, 166, 167, 0, 488,
	0, 0, 277, 236, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	272, 0, 0, 0, 383, 249, 299, 256, 248, 496,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 178, 253, 436, 0, 0,
	173, 0, 0, 0, 234, 0, 456, 0, 304, 533,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 305,
	172, 199, 0, 0, 371, 0, 442, 471, 0, 268,
	0, 261, 0, 0, 510, 210, 0, 0, 0, 0,
	412, 266, 351, 402, 0, 0, 0, 418, 508, 0,
	0, 0, 360, 0, 0, 0, 0, 200, 240, 388,
	477, 0, 462, 352, 500, 0, 317, 461, 276, 175,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	480, 505, 213, 447, 454, 435, 539, 192, 0, 474,
	0, 314, 315, 191, 0, 426, 252, 0, 0, 380,
	503, 504, 0, 554, 203, 530, 0, 204, 0, 363,
	501, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 262, 0, 0, 0, 282, 0, 0,
	0, 0, 416, 0, 457, 495, 0, 0, 0, 0,
	361, 285, 466, 318, 339, 425, 541, 0, 437, 214,
	516, 464, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 355, 0, 0, 358, 0, 460, 0,
	0, 0, 438, 0, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 0, 509, 320, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 193, 334, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	288, 289, 328, 0, 0, 0, 0, 0, 0, 382,
	393, 0, 0, 429, 0, 494, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 278, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	364, 0, 377, 379, 0, 385, 0, 390, 0, 391,
	401, 405, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 446, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 502, 515, 312, 523, 241,
	280, 0, 0, 342, 0, 195, 0, 260, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 219, 467, 344,
	0, 332, 0, 197, 0, 404, 400, 284, 179, 0,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 176,
	177, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	194, 196, 198, 201, 202, 205, 206, 207, 208, 209,
	212, 216, 217, 218, 220, 221, 222, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 226, 227,
	228, 229, 230, 231, 235, 237, 238, 239, 242, 243,
	244, 245, 246, 247, 250, 251, 254, 257, 258, 264,
	269, 270, 271, 273, 274, 275, 281, 283, 286, 287,
	290, 292, 294, 296, 297, 298, 300, 301, 302, 303,
	306, 307, 308, 309, 310, 311, 313, 321, 322, 324,
	325, 326, 327, 330, 333, 335, 337, 338, 340, 341,
	343, 346, 347, 349, 350, 353, 354, 356, 359, 362,
	365, 367, 368, 369, 370, 373, 374, 375, 376, 378,
	381, 384, 386, 387, 389, 392, 394, 395, 396, 397,
	398, 399, 403, 406, 407, 408, 409, 411, 413, 414,
	415, 417, 419, 420, 421, 422, 423, 424, 427, 428,
	430, 431, 432, 433, 434, 439, 440, 443, 444, 445,
	448, 449, 450, 451, 452, 453, 455, 458, 459, 463,
	465, 468, 469, 475, 476, 478, 479, 481, 482, 483,
	484, 487, 489, 490, 492, 493, 497, 498, 499, 506,
	507, 511, 512, 513, 514, 517, 518, 519, 520, 521,
	522, 524, 525, 526, 527, 531, 532, 534, 535, 536,
	537, 540, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 529, 0, 366, 528,
	470, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 224, 0,
	0, 372, 0, 265, 0, 0, 0, 0, 165, 166,
	167, 0, 488, 0, 0, 277, 236, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 272, 0, 0, 0, 383, 249, 299,
	256, 248, 496, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 178, 253,
	436, 0, 0, 173, 0, 0, 0, 234, 0, 456,
	579, 304, 533, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 305, 172, 199, 0, 0, 371, 0, 442,
	471, 0, 268, 0, 261, 0, 0, 510, 210, 0,
	0, 0, 0, 412, 266, 351, 402, 0, 0, 0,
	418, 508, 0, 0, 0, 360, 0, 0, 0, 0,
	200, 240, 388, 477, 0, 462, 352, 500, 0, 317,
	461, 276, 175, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 480, 505, 213, 447, 454, 435, 539,
	192, 0, 474, 0, 314, 315, 191, 0, 426, 252,
	0, 0, 380, 503, 504, 0, 554, 203, 530, 0,
	204, 0, 363, 501, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 262, 0, 0, 0,
	282, 0, 0, 0, 0, 416, 0, 457, 495, 0,
	0, 0, 0, 361, 285, 466, 318, 339, 425, 541,
	0, 437, 214, 516, 464, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 355, 0, 0, 358,
	0, 460, 0, 0, 0, 438, 0, 0, 0, 491,
	0, 0, 0, 0, 0, 0, 0, 509, 320, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 0, 193, 334, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 288, 289, 328, 0, 0, 0, 0,
	0, 0, 382, 393, 0, 0, 429, 0, 494, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 278, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 364, 0, 377, 379, 0, 385, 0,
	390, 0, 391, 401, 405, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 446, 0,
	0, 0, 0, 0, 472, 473, 0, 0, 502, 515,
	312, 523, 241, 280, 0, 0, 342, 0, 195, 0,
	260, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	219, 467, 344, 0, 332, 0, 197, 0, 404, 400,
	284, 179, 0, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 169,
	170, 171, 176, 177, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 194, 196, 198, 201, 202, 205, 206,
	207, 208, 209, 212, 216, 217, 218, 220, 221, 222,
	223, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 226, 227, 228, 229, 230, 231, 235, 237, 238,
	239, 242, 243, 244, 245, 246, 247, 250, 251, 254,
	257, 258, 264, 269, 270, 271, 273, 274, 275, 281,
	283, 286, 287, 290, 292, 294, 296, 297, 298, 300,
	301, 302, 303, 306, 307, 308, 309, 310, 311, 313,
	321, 322, 324, 325, 326, 327, 330, 333, 335, 337,
	338, 340, 341, 343, 346, 347, 349, 350, 353, 354,
	356, 359, 362, 365, 367, 368, 369, 370, 373, 374,
	375, 376, 378, 381, 384, 386, 387, 389, 392, 394,
	395, 396, 397, 398, 399, 403, 406, 407, 408, 409,
	411, 413, 414, 415, 417, 419, 420, 421, 422, 423,
	424, 427, 428, 430, 431, 432, 433, 434, 439, 440,
	443, 444, 445, 448, 449, 450, 451, 452, 453, 455,
	458, 459, 463, 465, 468, 469, 475, 476, 478, 479,
	481, 482, 483, 484, 487, 489, 490, 492, 493, 497,
	498, 499, 506, 507, 511, 512, 513, 514, 517, 518,
	519, 520, 521, 522, 524, 525, 526, 527, 531, 532,
	534, 535, 536, 537, 540, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 529,
	0, 366, 528, 470, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 224, 0, 0, 372, 0, 265, 0, 0, 0,
	0, 165, 166, 167, 0, 488, 0, 0, 277, 236,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 272, 0, 0, 0,
	383, 249, 299, 256, 248, 496, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 178, 253, 436, 0, 0, 173, 0, 0, 0,
	234, 0, 456, 0, 304, 533, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 305, 172, 199, 0, 0,
	371, 0, 442, 471, 0, 268, 0, 261, 0, 0,
	510, 210, 0, 0, 0, 0, 412, 266, 351, 402,
	0, 0, 0, 418, 508, 0, 0, 0, 360, 0,
	0, 0, 0, 200, 240, 388, 477, 0, 462, 352,
	500, 0, 317, 461, 276, 175, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 480, 505, 213, 447,
	454, 435, 539, 192, 0, 474, 0, 314, 315, 191,
	0, 426, 252, 0, 0, 380, 503, 504, 0, 554,
	203, 530, 0, 204, 0, 363, 501, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 262,
	0, 0, 0, 282, 0, 0, 0, 0, 416, 0,
	457, 495, 0, 0, 0, 0, 361, 285, 466, 318,
	339, 425, 541, 0, 437, 214, 516, 464, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 355,
	0, 0, 358, 0, 460, 0, 0, 0, 438, 0,
	0, 0, 491, 0, 0, 0, 0, 0, 0, 0,
	509, 320, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	193, 334, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 288, 289, 328, 0,
	0, 0, 0, 0, 0, 382, 393, 0, 0, 429,
	0, 494, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 278, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 2586, 0, 377, 379,
	0, 385, 0, 390, 0, 391, 401, 405, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 446, 0, 0, 0, 0, 0, 472, 473, 0,
	0, 502, 515, 312, 523, 241, 280, 0, 0, 342,
	0, 195, 0, 260, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 219, 467, 344, 0, 332, 0, 197,
	0, 404, 400, 284, 179, 0, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 176, 177, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 194, 196, 198, 201,
	202, 205, 206, 207, 208, 209, 212, 216, 217, 218,
	220, 221, 222, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 226, 227, 228, 229, 230, 231,
	235, 237, 238, 239, 242, 243, 244, 245, 246, 247,
	250, 251, 254, 257, 258, 264, 269, 270, 271, 273,
	274, 275, 281, 283, 286, 287, 290, 292, 294, 296,
	297, 298, 300, 301, 302, 303, 306, 307, 308, 309,
	310, 311, 313, 321, 322, 324, 325, 326, 327, 330,
	333, 335, 337, 338, 340, 341, 343, 346, 347, 349,
	350, 353, 354, 356, 359, 362, 365, 367, 368, 369,
	370, 373, 374, 375, 376, 378, 381, 384, 386, 387,
	389, 392, 394, 395, 396, 397, 398, 399, 403, 406,
	407, 408, 409, 411, 413, 414, 415, 417, 419, 420,
	421, 422, 423, 424, 427, 428, 430, 431, 432, 433,
	434, 439, 440, 443, 444, 445, 448, 449, 450, 451,
	452, 453, 455, 458, 459, 463, 465, 468, 469, 475,
	476, 478, 479, 481, 482, 483, 484, 487, 489, 490,
	492, 493, 497, 498, 499, 506, 507, 511, 512, 513,
	514, 517, 518, 519, 520, 521, 522, 524, 525, 526,
	527, 531, 532, 534, 535, 536, 537, 540, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 529, 0, 366, 528, 470, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 224, 0, 0, 372, 0, 265,
	0, 0, 0, 0, 165, 166, 167, 0, 488, 0,
	0, 277, 236, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 272,
	0, 0, 0, 383, 249, 299, 256, 248, 496, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 178, 253, 436, 0, 0, 173,
	0, 0, 0, 234, 0, 456, 0, 304, 533, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 305, 172,
	199, 0, 0, 371, 0, 442, 471, 0, 268, 0,
	261, 0, 0, 510, 210, 0, 0, 0, 0, 412,
	266, 351, 402, 0, 0, 0, 418, 508, 0, 0,
	0, 360, 0, 0, 0, 0, 200, 240, 388, 477,
	0, 462, 352, 500, 0, 317, 461, 276, 175, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 480,
	505, 213, 447, 454, 435, 539, 192, 0, 474, 0,
	314, 315, 191, 0, 426, 252, 0, 0, 380, 503,
	504, 0, 554, 203, 530, 0, 204, 0, 363, 501,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 262, 0, 0, 0, 282, 0, 0, 0,
	0, 416, 0, 457, 495, 0, 0, 0, 0, 361,
	285, 466, 318, 339, 425, 541, 0, 437, 214, 516,
	464, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 293, 0, 0,
	0, 0, 355, 0, 0, 358, 0, 460, 0, 0,
	0, 438, 0, 0, 0, 491, 0, 0, 0, 0,
	0, 0, 0, 509, 320, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 193, 334, 0, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 288,
	289, 328, 0, 0, 0, 0, 0, 0, 382, 393,
	0, 0, 429, 0, 494, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 278, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 364,
	0, 377, 379, 0, 385, 0, 390, 0, 391, 401,
	405, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 446, 0, 0, 0, 0, 0,
	472, 473, 0, 0, 502, 515, 312, 523, 241, 280,
	0, 0, 342, 0, 195, 0, 260, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 219, 467, 344, 0,
	332, 0, 197, 0, 404, 400, 284, 179, 0, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 169, 170, 171, 176, 177,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 194,
	196, 198, 201, 202, 205, 206, 207, 208, 209, 212,
	216, 217, 218, 220, 221, 222, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 226, 227, 228,
	229, 230, 231, 235, 237, 238, 239, 242, 243, 244,
	245, 246, 247, 250, 251, 254, 257, 258, 264, 269,
	270, 271, 273, 274, 275, 281, 283, 286, 287, 290,
	292, 294, 296, 297, 298, 300, 301, 302, 303, 306,
	307, 308, 309, 310, 311, 313, 321, 322, 324, 325,
	326, 327, 330, 333, 335, 337, 338, 340, 341, 343,
	346, 347, 349, 350, 353, 354, 356, 359, 362, 365,
	367, 368, 369, 370, 373, 374, 375, 376, 378, 381,
	384, 386, 387, 389, 392, 394, 395, 396, 397, 398,
	399, 403, 406, 407, 408, 409, 411, 413, 414, 415,
	417, 419, 420, 421, 422, 423, 424, 427, 428, 430,
	431, 432, 433, 434, 439, 440, 443, 444, 445, 448,
	449, 450, 451, 452, 453, 455, 458, 459, 463, 465,
	468, 469, 475, 476, 478, 479, 481, 482, 483, 484,
	487, 489, 490, 492, 493, 497, 498, 499, 506, 507,
	511, 512, 513, 514, 517, 518, 519, 520, 521, 522,
	524, 525, 526, 527, 531, 532, 534, 535, 536, 537,
	540, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 529, 0, 366, 528, 470,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 224, 0, 0,
	372, 0, 265, 0, 0, 0, 0, 165, 2369, 167,
	0, 488, 0, 0, 277, 236, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 272, 0, 0, 0, 383, 249, 299, 256,
	248, 496, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 178, 253, 436,
	0, 0, 173, 0, 0, 0, 234, 0, 456, 0,
	304, 533, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 305, 172, 199, 0, 0, 371, 0, 442, 471,
	0, 268, 0, 261, 0, 0, 510, 210, 0, 0,
	0, 0, 412, 266, 351, 402, 0, 0, 0, 418,
	508, 0, 0, 0, 360, 0, 0, 0, 0, 200,
	240, 388, 477, 0, 462, 352, 500, 0, 317, 461,
	276, 175, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 480, 505, 213, 447, 454, 435, 539, 192,
	0, 474, 0, 314, 315, 191, 0, 426, 252, 0,
	0, 380, 503, 504, 0, 554, 203, 530, 0, 204,
	0, 363, 501, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 262, 0, 0, 0, 282,
	0, 0, 0, 0, 416, 0, 457, 495, 0, 0,
	0, 0, 361, 285, 466, 318, 339, 425, 541, 0,
	437, 214, 516, 464, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	293, 0, 0, 0, 0, 355, 0, 0, 358, 0,
	460, 0, 0, 0, 438, 0, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 509, 320, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 193, 334, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 288, 289, 328, 0, 0, 0, 0, 0,
	0, 382, 393, 0, 0, 429, 0, 494, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	278, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 364, 0, 377, 379, 0, 385, 0, 390,
	0, 391, 401, 405, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 446, 0, 0,
	0, 0, 0, 472, 473, 0, 0, 502, 515, 312,
	523, 241, 280, 0, 0, 342, 0, 195, 0, 260,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 219,
	467, 344, 0, 332, 0, 197, 0, 404, 400, 284,
	179, 0, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 176, 177, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 194, 196, 198, 201, 202, 205, 206, 207,
	208, 209, 212, 216, 217, 218, 220, 221, 222, 223,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	226, 227, 228, 229, 230, 231, 235, 237, 238, 239,
	242, 243, 244, 245, 246, 247, 250, 251, 254, 257,
	258, 264, 269, 270, 271, 273, 274, 275, 281, 283,
	286, 287, 290, 292, 294, 296, 297, 298, 300, 301,
	302, 303, 306, 307, 308, 309, 310, 311, 313, 321,
	322, 324, 325, 326, 327, 330, 333, 335, 337, 338,
	340, 341, 343, 346, 347, 349, 350, 353, 354, 356,
	359, 362, 365, 367, 368, 369, 370, 373, 374, 375,
	376, 378, 381, 384, 386, 387, 389, 392, 394, 395,
	396, 397, 398, 399, 403, 406, 407, 408, 409, 411,
	413, 414, 415, 417, 419, 420, 421, 422, 423, 424,
	427, 428, 430, 431, 432, 433, 434, 439, 440, 443,
	444, 445, 448, 449, 450, 451, 452, 453, 455, 458,
	459, 463, 465, 468, 469, 475, 476, 478, 479, 481,
	482, 483, 484, 487, 489, 490, 492, 493, 497, 498,
	499, 506, 507, 511, 512, 513, 514, 517, 518, 519,
	520, 521, 522, 524, 525, 526, 527, 531, 532, 534,
	535, 536, 537, 540, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 529, 0,
	366, 528, 470, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	224, 0, 0, 372, 0, 265, 0, 0, 0, 0,
	165, 1962, 167, 0, 488, 0, 0, 277, 236, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 272, 0, 0, 0, 383,
	249, 299, 256, 248, 496, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	178, 253, 436, 0, 0, 173, 0, 0, 0, 234,
	0, 456, 0, 304, 533, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 305, 172, 199, 0, 0, 371,
	0, 442, 471, 0, 268, 0, 261, 0, 0, 510,
	210, 0, 0, 0, 0, 412, 266, 351, 402, 0,
	0, 0, 418, 508, 0, 0, 0, 360, 0, 0,
	0, 0, 200, 240, 388, 477, 0, 462, 352, 500,
	0, 317, 461, 276, 175, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 480, 505, 213, 447, 454,
	435, 539, 192, 0, 474, 0, 314, 315, 191, 0,
	426, 252, 0, 0, 380, 503, 504, 0, 554, 203,
	530, 0, 204, 0, 363, 501, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 262, 0,
	0, 0, 282, 0, 0, 0, 0, 416, 0, 457,
	495, 0, 0, 0, 0, 361, 285, 466, 318, 339,
	425, 541, 0, 437, 214, 516, 464, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 293, 0, 0, 0, 0, 355, 0,
	0, 358, 0, 460, 0, 0, 0, 438, 0, 0,
	0, 491, 0, 0, 0, 0, 0, 0, 0, 509,
	320, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 193,
	334, 0, 0, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 288, 289, 328, 0, 0,
	0, 0, 0, 0, 382, 393, 0, 0, 429, 0,
	494, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 278, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 364, 0, 377, 379, 0,
	385, 0, 390, 0, 391, 401, 405, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	446, 0, 0, 0, 0, 0, 472, 473, 0, 0,
	502, 515, 312, 523, 241, 280, 0, 0, 342, 0,
	195, 0, 260, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 219, 467, 344, 0, 332, 0, 197, 0,
	404, 400, 284, 179, 0, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 169, 170, 171, 176, 177, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 194, 196, 198, 201, 202,
	205, 206, 207, 208, 209, 212, 216, 217, 218, 220,
	221, 222, 223, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 226, 227, 228, 229, 230, 231, 235,
	237, 238, 239, 242, 243, 244, 245, 246, 247, 250,
	251, 254, 257, 258, 264, 269, 270, 271, 273, 274,
	275, 281, 283, 286, 287, 290, 292, 294, 296, 297,
	298, 300, 301, 302, 303, 306, 307, 308, 309, 310,
	311, 313, 321, 322, 324, 325, 326, 327, 330, 333,
	335, 337, 338, 340, 341, 343, 346, 347, 349, 350,
	353, 354, 356, 359, 362, 365, 367, 368, 369, 370,
	373, 374, 375, 376, 378, 381, 384, 386, 387, 389,
	392, 394, 395, 396, 397, 398, 399, 403, 406, 407,
	408, 409, 411, 413, 414, 415, 417, 419, 420, 421,
	422, 423, 424, 427, 428, 430, 431, 432, 433, 434,
	439, 440, 443, 444, 445, 448, 449, 450, 451, 452,
	453, 455, 458, 459, 463, 465, 468, 469, 475, 476,
	478, 479, 481, 482, 483, 484, 487, 489, 490, 492,
	493, 497, 498, 499, 506, 507, 511, 512, 513, 514,
	517, 518, 519, 520, 521, 522, 524, 525, 526, 527,
	531, 532, 534, 535, 536, 537, 540, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 529, 0, 366, 528, 470, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 224, 0, 0, 372, 0, 265, 0,
	0, 0, 0, 165, 166, 167, 0, 1668, 0, 0,
	277, 236, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 272, 0,
	0, 0, 383, 249, 299, 256, 248, 496, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 178, 253, 436, 0, 0, 173, 0,
	0, 0, 234, 0, 456, 0, 304, 533, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 305, 172, 199,
	0, 0, 371, 0, 442, 471, 0, 268, 0, 261,
	0, 0, 510, 210, 0, 0, 0, 0, 412, 266,
	351, 402, 0, 0, 0, 418, 508, 0, 0, 0,
	360, 0, 0, 0, 0, 200, 240, 388, 477, 0,
	462, 352, 500, 0, 317, 461, 276, 175, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 480, 505,
	213, 447, 454, 435, 539, 192, 0, 474, 0, 314,
	315, 191, 0, 426, 252, 0, 0, 380, 503, 504,
	0, 554, 203, 530, 0, 204, 0, 363, 501, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 262, 0, 0, 0, 282, 0, 0, 0, 0,
	416, 0, 457, 495, 0, 0, 0, 0, 361, 285,
	466, 318, 339, 425, 541, 0, 437, 214, 516, 464,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 355, 0, 0, 358, 0, 460, 0, 0, 0,
	438, 0, 0, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 509, 320, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 193, 334, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 288, 289,
	328, 0, 0, 0, 0, 0, 0, 382, 393, 0,
	0, 429, 0, 494, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 278, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 364, 0,
	377, 379, 0, 385, 0, 390, 0, 391, 401, 405,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 446, 0, 0, 0, 0, 0, 472,
	473, 0, 0, 502, 515, 312, 523, 241, 280, 0,
	0, 342, 0, 195, 0, 260, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 219, 467, 344, 0, 332,
	0, 197, 0, 404, 400, 284, 179, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 176, 177, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 194, 196,
	198, 201, 202, 205, 206, 207, 208, 209, 212, 216,
	217, 218, 220, 221, 222, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 226, 227, 228, 229,
	230, 231, 235, 237, 238, 239, 242, 243, 244, 245,
	246, 247, 250, 251, 254, 257, 258, 264, 269, 270,
	271, 273, 274, 275, 281, 283, 286, 287, 290, 292,
	294, 296, 297, 298, 300, 301, 302, 303, 306, 307,
	308, 309, 310, 311, 313, 321, 322, 324, 325, 326,
	327, 330, 333, 335, 337, 338, 340, 341, 343, 346,
	347, 349, 350, 353, 354, 356, 359, 362, 365, 367,
	368, 369, 370, 373, 374, 375, 376, 378, 381, 384,
	386, 387, 389, 392, 394, 395, 396, 397, 398, 399,
	403, 406, 407, 408, 409, 411, 413, 414, 415, 417,
	419, 420, 421, 422, 423, 424, 427, 428, 430, 431,
	432, 433, 434, 439, 440, 443, 444, 445, 448, 449,
	450, 451, 452, 453, 455, 458, 459, 463, 465, 468,
	469, 475, 476, 478, 479, 481, 482, 483, 484, 487,
	489, 490, 492, 493, 497, 498, 499, 506, 507, 511,
	512, 513, 514, 517, 518, 519, 520, 521, 522, 524,
	525, 526, 527, 531, 532, 534, 535, 536, 537, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 529, 0, 366, 528, 470, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 224, 0, 0, 372,
	0, 265, 0, 0, 0, 0, 165, 166, 167, 0,
	1289, 0, 0, 277, 236, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 272, 0, 0, 0, 383, 249, 299, 256, 248,
	496, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 178, 253, 436, 0,
	0, 173, 0, 0, 0, 234, 0, 456, 0, 304,
	533, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	305, 172, 199, 0, 0, 371, 0, 442, 471, 0,
	268, 0, 261, 0, 0, 510, 210, 0, 0, 0,
	0, 412, 266, 351, 402, 0, 0, 0, 418, 508,
	0, 0, 0, 360, 0, 0, 0, 0, 200, 240,
	388, 477, 0, 462, 352, 500, 0, 317, 461, 276,
	175, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 480, 505, 213, 447, 454, 435, 539, 192, 0,
	474, 0, 314, 315, 191, 0, 426, 252, 0, 0,
	380, 503, 504, 0, 554, 203, 530, 0, 204, 0,
	363, 501, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 262, 0, 0, 0, 282, 0,
	0, 0, 0, 416, 0, 457, 495, 0, 0, 0,
	0, 361, 285, 466, 318, 339, 425, 541, 0, 437,
	214, 516, 464, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 355, 0, 0, 358, 0, 460,
	0, 0, 0, 438, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 509, 320, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 193, 334, 0, 0, 0,
	538, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 288, 289, 328, 0, 0, 0, 0, 0, 0,
	382, 393, 0, 0, 429, 0, 494, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 278,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 364, 0, 377, 379, 0, 385, 0, 390, 0,
	391, 401, 405, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 446, 0, 0, 0,
	0, 0, 472, 473, 0, 0, 502, 515, 312, 523,
	241, 280, 0, 0, 342, 0, 195, 0, 260, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 219, 467,
	344, 0, 332, 0, 197, 0, 404, 400, 284, 179,
	0, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 169, 170, 171,
	176, 177, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 194, 196, 198, 201, 202, 205, 206, 207, 208,
	209, 212, 216, 217, 218, 220, 221, 222, 223, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 226,
	227, 228, 229, 230, 231, 235, 237, 238, 239, 242,
	243, 244, 245, 246, 247, 250, 251, 254, 257, 258,
	264, 269, 270, 271, 273, 274, 275, 281, 283, 286,
	287, 290, 292, 294, 296, 297, 298, 300, 301, 302,
	303, 306, 307, 308, 309, 310, 311, 313, 321, 322,
	324, 325, 326, 327, 330, 333, 335, 337, 338, 340,
	341, 343, 346, 347, 349, 350, 353, 354, 356, 359,
	362, 365, 367, 368, 369, 370, 373, 374, 375, 376,
	378, 381, 384, 386, 387, 389, 392, 394, 395, 396,
	397, 398, 399, 403, 406, 407, 408, 409, 411, 413,
	414, 415, 417, 419, 420, 421, 422, 423, 424, 427,
	428, 430, 431, 432, 433, 434, 439, 440, 443, 444,
	445, 448, 449, 450, 451, 452, 453, 455, 458, 459,
	463, 465, 468, 469, 475, 476, 478, 479, 481, 482,
	483, 484, 487, 489, 490, 492, 493, 497, 498, 499,
	506, 507, 511, 512, 513, 514, 517, 518, 519, 520,
	521, 522, 524, 525, 526, 527, 531, 532, 534, 535,
	536, 537, 540, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 529, 0, 366,
	528, 470, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 224,
	0, 0, 372, 0, 265, 0, 0, 0, 0, 165,
	166, 167, 0, 1100, 0, 0, 277, 236, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 272, 0, 0, 0, 383, 249,
	299, 256, 248, 496, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 178,
	253, 436, 0, 0, 173, 0, 0, 0, 234, 0,
	456, 0, 304, 533, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 305, 172, 199, 0, 0, 371, 0,
	442, 471, 0, 268, 0, 261, 0, 0, 510, 210,
	0, 0, 0, 0, 412, 266, 351, 402, 0, 0,
	0, 418, 508, 0, 0, 0, 360, 0, 0, 0,
	0, 200, 240, 388, 477, 0, 462, 352, 500, 0,
	317, 461, 276, 175, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 480, 505, 213, 447, 454, 435,
	539, 192, 0, 474, 0, 314, 315, 191, 0, 426,
	252, 0, 0, 380, 503, 504, 0, 554, 203, 530,
	0, 204, 0, 363, 501, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 262, 0, 0,
	0, 282, 0, 0, 0, 0, 416, 0, 457, 495,
	0, 0, 0, 0, 361, 285, 466, 318, 339, 425,
	541, 0, 437, 214, 516, 464, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 355, 0, 0,
	358, 0, 460, 0, 0, 0, 438, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 509, 320,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 193, 334,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 288, 289, 328, 0, 0, 0,
	0, 0, 0, 382, 393, 0, 0, 429, 0, 494,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 278, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 364, 0, 377, 379, 0, 385,
	0, 390, 0, 391, 401, 405, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 446,
	0, 0, 0, 0, 0, 472, 473, 0, 0, 502,
	515, 312, 523, 241, 280, 0, 0, 342, 0, 195,
	0, 260, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 219, 467, 344, 0, 332, 0, 197, 0, 404,
	400, 284, 179, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 176, 177, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 194, 196, 198, 201, 202, 205,
	206, 207, 208, 209, 212, 216, 217, 218, 220, 221,
	222, 223, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 226, 227, 228, 229, 230, 231, 235, 237,
	238, 239, 242, 243, 244, 245, 246, 247, 250, 251,
	254, 257, 258, 264, 269, 270, 271, 273, 274, 275,
	281, 283, 286, 287, 290, 292, 294, 296, 297, 298,
	300, 301, 302, 303, 306, 307, 308, 309, 310, 311,
	313, 321, 322, 324, 325, 326, 327, 330, 333, 335,
	337, 338, 340, 341, 343, 346, 347, 349, 350, 353,
	354, 356, 359, 362, 365, 367, 368, 369, 370, 373,
	374, 375, 376, 378, 381, 384, 386, 387, 389, 392,
	394, 395, 396, 397, 398, 399, 403, 406, 407, 408,
	409, 411, 413, 414, 415, 417, 419, 420, 421, 422,
	423, 424, 427, 428, 430, 431, 432, 433, 434, 439,
	440, 443, 444, 445, 448, 449, 450, 451, 452, 453,
	455, 458, 459, 463, 465, 468, 469, 475, 476, 478,
	479, 481, 482, 483, 484, 487, 489, 490, 492, 493,
	497, 498, 499, 506, 507, 511, 512, 513, 514, 517,
	518, 519, 520, 521, 522, 524, 525, 526, 527, 531,
	532, 534, 535, 536, 537, 540, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	529, 0, 366, 528, 470, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 224, 0, 0, 372, 0, 265, 0, 0,
	0, 0, 165, 166, 167, 0, 488, 0, 0, 277,
	236, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 272, 0, 0,
	0, 383, 249, 299, 256, 248, 496, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 178, 253, 436, 0, 0, 173, 0, 0,
	0, 234, 0, 456, 0, 304, 533, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 305, 172, 199, 0,
	0, 371, 0, 442, 471, 0, 268, 0, 261, 0,
	0, 510, 210, 0, 0, 0, 0, 412, 266, 351,
	402, 0, 0, 0, 418, 508, 0, 0, 0, 360,
	0, 0, 0, 0, 200, 240, 388, 477, 0, 462,
	352, 500, 0, 317, 461, 276, 175, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 480, 505, 213,
	447, 454, 435, 539, 192, 0, 474, 0, 314, 315,
	191, 0, 426, 252, 0, 0, 380, 503, 504, 0,
	554, 203, 530, 0, 204, 0, 363, 501, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	262, 0, 0, 0, 282, 0, 0, 0, 0, 416,
	0, 457, 495, 0, 0, 0, 0, 361, 285, 466,
	318, 339, 425, 541, 0, 437, 214, 516, 464, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	355, 0, 0, 358, 0, 460, 0, 0, 0, 438,
	0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 509, 320, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 193, 334, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 288, 289, 328,
	0, 0, 0, 0, 0, 0, 382, 393, 0, 0,
	804, 0, 494, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 278, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 364, 0, 377,
	379, 0, 385, 0, 390, 0, 391, 401, 405, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 446, 0, 0, 0, 0, 0, 472, 473,
	0, 0, 502, 515, 0, 0, 0, 280, 0, 0,
	342, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 485,
}

var psqPact = [...]int{
	4479, -1000, -703, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1401, 1619, -1000, -1000,
	-1000, -1000, 1590, -1000, 207, 773, -1000, 1389, 2732, -1000,
	42862, 17, -1000, 41256, 16, -191, 42862, -1000, -170, -1000,
	-193, 42862, -180, 29992, -1000, -1000, -624, 12756, 1309, 1202,
	-304, -307, 42862, -1000, -1000, -1000, 1532, 1035, -1000, 287,
	-1000, -1000, -1000, -1000, -1000, -1000, 47680, -1000, -1000, -1000,
	-1000, -1000, 1597, 131, 42862, -1000, 1471, 1035, -1000, 12756,
	1519, 1454, 11128, -1000, 11128, -18, -1000, -1000, 20306, -1000,
	-1000, 27583, 42862, 35613, -72, -1000, 1389, -1000, -1000, -1000,
	-227, -1000, -1000, 686, 683, -1000, -1000, 178, 180, -19,
	-26, -26, 6, 1337, 1331, 240, 232, 130, -1000, 453,
	164, 164, -464, -466, -1000, -1, 164, 164, 164, -120,
	164, 164, 164, 164, 164, 164, 164, 164, 164, -33,
	1389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42862, -156, 42862,
	-1000, 60, 42862, 537, 537, -248, 537, 537, 537, -197,
	434, -311, -1000, -199, -88, -164, -127, 532, -160, -1000,
	-209, -1000, 18622, -103, 18622, -1000, 1364, -1000, -1000, -1000,
	-1000, 384, -1000, 4, -1000, -1000, -1000, -1000, -1000, 42862,
	46877, 311, 182, -1000, -1000, -1000, -1000, -266, -1000, -1000,
	547, 662, 12756, 368, -1000, 933, 108, -1000, -1000, -1000,
	-1000, -1000, 44, 13570, 13570, 13570, 13570, -1000, -1000, 534,
	534, 534, 534, 13570, 534, 21962, 534, 534, 534, 534,
	12756, 534, 534, 534, -1000, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 59, 534, 534, 534, 534,
	534, -1000, -1000, -1000, -1000, 534, 534, 534, 534, 534,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26780, -1000, 9500, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42862, -1000, 534, 42862, 42862,
	-100, 1471, 1035, -1000, 1532, 1620, 287, -1000, 1771, 902,
	862, 337, 1035, 615, 42862, -1000, 709, -1000, 967, -1000,
	-1000, -1000, -1000, -1000, 1261, 12756, -1000, -1000, 1566, -1000,
	25977, 58, 1308, 1561, 40453, -1000, -18, -18, 667, 19464,
	-323, -1000, -1000, -1000, 175, 39650, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1364, 605, 42862, -1000, -1000, 3728, 418, -1000,
	766, -1000, 592, -1000, 727, 12756, 789, 15, 418, 13,
	12, 7, -1000, -397, -1000, -1000, -1000, -1000, -1000, -1000,
	164, 164, 164, 2304, 2732, -1000, -1000, -1000, -1000, 38836,
	418, -1000, 765, -1000, 220, 90, 97, 97, 418, -1000,
	-1000, 42862, 418, 418, 42862, 42862, -43, -1000, -1000, -1000,
	-1000, 42862, 418, 219, 216, 418, 418, 42862, 418, -1000,
	-1000, 1235, -1000, 1259, -1000, -1000, 164, 164, 370, 366,
	363, 164, 362, -106, 1404, 360, 129, 1396, 1395, 42862,
	763, 42862, -1000, -136, 181, 172, 1389, 664, 0, 2,
	418, -22, -22, 42862, -1000, 21148, -1000, -1000, 339, 12756,
	-1000, 533, 532, 532, -1000, -1000, -1000, -1000, -1000, 537,
	42862, 533, -1000, -1000, -1000, 532, 537, 42862, 537, 537,
	537, 537, 532, 532, 532, 537, 42862, 42862, 42862, 42862,
	42862, 42862, 42862, 42862, 42862, 18622, -1000, 1198, -1000, -1000,
	-1000, 18622, 18622, -1000, -1000, -1000, -182, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -412, 620, 38033, -1000,
	-634, -635, -636, -1000, -1000, -1000, -640, -644, -1000, -1000,
	-1000, 12756, 12756, 12756, -487, -1000, 374, 13570, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 293, 252, 13570, 13570, 13570,
	1283, 13570, 13570, 13570, 13570, 13570, 13570, 13570, 13570, 13570,
	13570, 13570, 13570, 33204, 6250, 6250, 108, 108, 108, 108,
	-1000, 11128, 12756, 12756, 108, -1000, 418, 37230, 11128, 11128,
	12756, 1380, 184, 662, 42862, -1000, 337, -1000, -1000, -1000,
	292, -1000, 42862, 42862, 186, 12756, 12756, 12756, 12756, 12756,
	12756, 8686, 12756, 12756, 12756, 12756, 12756, 12756, 12756, 12756,
	12756, 12756, 12756, 12756, 12756, 12756, 12756, 12756, 12756, 12756,
	12756, 12756, 12756, 12756, 12756, 12756, 12756, 12756, 7872, 21148,
	11128, 11128, 11128, 11128, 11128, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56, 895, 705,
	497, 1135, -1000, 616, -1000, -471, 30795, 12756, 1556, 813,
	42862, -1000, -1000, -1000, 1471, -1000, 1471, 895, 1733, 984,
	11128, -1000, -1000, 1733, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 337, -1000, 42862, 615, 1447, 42862, 958, 12756,
	12756, 612, -1000, 659, 42862, -1000, -1000, 46074, -1000, -1000,
	17780, -1000, 42862, 262, 42862, -1000, 29189, 36427, 16938, -323,
	-1000, 16938, 596, -1000, -321, -338, 11942, 107, -1000, -1000,
	-1000, 178, 23568, 503, 107, -274, -1000, -1000, -1000, 727,
	-1000, 727, 727, 727, 727, 5, 5, 5, 5, -1000,
	-1000, -1000, -1000, -1000, 759, 752, -1000, 727, 727, 727,
	727, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -32, -1000, 12756, -138, 35613, 1424, 289,
	935, -136, -8, 795, 418, 418, 418, -8, -1000, 490,
	481, 461, 1507, -1000, -1000, 611, -1000, 42862, -151, -1000,
	-38, -1000, 35613, 418, 213, 97, 418, -1000, 418, -1000,
	-1000, 564, -145, -560, 42862, -151, 33204, -1000, -1000, -1000,
	418, -1000, -1000, -1000, -2, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 33204, 33204, -1000, -1000, -1000, 336, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -695, 42862, -1000, -147, 168,
	-112, -74, -83, 42862, -133, 42862, 42862, -22, 897, 42862,
	1423, 42862, -1000, -1000, -1000, -1000, -1000, 662, 42862, -1000,
	-1000, 537, 537, -1000, -1000, 42862, 537, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 537, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42862, -1000, -1000,
	-1000, -1000, 42862, -1000, -1000, -1000, -1000, -257, -328, 288,
	-1000, -1000, -1000, -1000, 1466, -1000, 662, 198, -1000, 534,
	-1000, -1000, 385, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	293, 13570, 13570, 13570, 1136, 1, 717, 293, 1167, 280,
	306, 306, 332, 332, 113, 113, 113, 113, 113, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 335, -1000,
	549, -1000, 690, 930, 337, -1000, 549, 549, 894, 11128,
	-1000, -1000, 190, -1000, 12756, 337, -1000, -1000, 337, 610,
	608, 1554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 662, 935, 935, 935, 935, 935, 12756,
	889, -1000, -1000, -1000, 1405, 1382, 337, 547, 337, 607,
	-1000, 1370, 935, 1366, 1363, 1360, 931, 1341, 1333, 1321,
	935, 935, 935, 827, 1306, 1301, 1300, 1296, 1292, 1280,
	1272, 1268, 1201, 935, 337, 11128, 11128, 603, 534, 54,
	-1000, 549, 337, 337, 549, 549, 21148, -1000, 19, 42862,
	-1000, -620, -1000, -355, 152, -1000, 45271, -1000, -1000, 337,
	5897, -1000, 44468, -1000, -1000, -1000, -1000, -1000, 34810, 867,
	1733, -1000, -1000, 534, 586, -1000, -1000, 662, 662, 12756,
	-1000, -1000, -1000, -1000, -1000, -1000, 52, 1529, 882, 42862,
	534, -1000, 25174, -1000, 780, 1150, -1000, -1000, -1000, 1440,
	24371, -1000, 534, 534, 42862, 1082, 927, -1000, 51, -1000,
	596, -323, -353, -1000, -1000, -1000, -1000, 662, -1000, 454,
	-1000, 149, -1000, -46, -1000, -1000, -1000, -1000, -1000, -1000,
	1297, -278, -1000, -1000, -1000, -130, 5, -1000, -1000, -1000,
	34007, 105, 105, -232, -1000, -1000, -1000, 323, 323, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1066,
	1021, -138, -1000, -1000, 320, -1000, -1000, 1303, 42862, -1000,
	-1000, 451, 1424, -147, 42862, 193, 881, -1000, 795, 795,
	795, 42862, -1000, -1000, -1000, -1000, -1000, -1000, 42862, 314,
	582, -1000, -154, -1000, -1000, 575, 750, 418, 418, -1000,
	-1000, 1383, 173, -1000, -1000, -505, -1000, -1000, -151, -154,
	107, -1000, 418, -1000, -1000, -1000, -1000, -699, 555, 10,
	-144, -59, 42862, 42862, 42862, 42862, 42862, 35, -1000, -1000,
	-1000, -3, -1000, 42862, 42862, 133, -1000, -1000, -1000, 532,
	-1000, -1000, 532, -1000, -1000, -1000, -1000, -1000, 1379, 42862,
	-335, -663, -1000, -660, 12756, -1000, -1000, -1000, -1000, 834,
	-4, 717, 13570, 13570, -1000, -1000, 11128, -437, 305, 305,
	33204, -1000, -1000, -1000, 12756, 12756, 776, 179, -1000, 12756,
	689, -1000, -1000, 12756, 12756, 12756, 337, -1000, -1000, -1000,
	-1000, -1000, 1541, -1000, 12756, 12756, 12756, -1000, -1000, 12756,
	12756, -1000, 12756, 12756, 22765, 337, 22765, 12756, 12756, 22765,
	-1000, -1000, -1000, -1000, 22765, 12756, 12756, 12756, 12756, 12756,
	12756, 12756, 12756, 12756, -1000, -1000, 549, 549, 11128, 21148,
	-1000, -1000, -1000, -1000, -1000, -1000, 137, 418, -1000, -1000,
	-1000, -1000, 152, -1000, 97, 97, 97, -1000, -1000, -1000,
	-1000, -1000, -1000, 588, 1495, -1000, 998, 1529, -1000, 29189,
	1733, -1000, -1000, 42862, -1000, 16096, 1471, 12756, -1000, 1409,
	568, -1000, 166, 566, -1000, -1000, 10314, 535, 987, 49,
	42862, 29189, 29189, 29189, 29189, 29189, -1000, 921, 920, -1000,
	945, 914, 980, 42862, -1000, 529, 337, 1620, 24371, 287,
	12756, 30795, 405, 29189, -1000, -1000, 29189, 42862, 15254, -1000,
	-1000, -346, -344, -1000, -1000, -1000, 178, -1000, -1000, 153,
	1434, 1302, -1000, -1000, -1000, -1000, -1000, 105, 105, -1000,
	-1000, -1000, -1000, -1000, -1000, 526, -1000, 502, -145, -1000,
	783, 1357, 164, 164, -1000, -1000, 418, -1000, -1000, -1000,
	9, -1000, 1418, 42862, 875, 872, 871, -1000, 571, 1505,
	42862, -1000, -1000, 42862, -138, 42862, -1000, -1000, -1000, 5848,
	-1000, -1000, -1000, -154, -1000, -1000, -1000, -1000, -1000, -1000,
	42862, -137, -1000, 742, 296, -1000, -1000, 729, -1000, -1000,
	-1000, -1000, -155, -114, 42862, 106, 1021, 42862, -1000, -1000,
	-1000, 537, 537, -1000, -1000, 1352, -1000, 418, 935, 13570,
	13570, -1000, 108, -1000, 534, 337, 727, 727, -1000, 727,
	-1000, -1000, 727, -207, 727, -213, 727, -1000, -1000, 337,
	337, 781, 720, -408, -1000, 662, 12756, 1171, 1096, 935,
	-1000, 12756, 935, 935, 935, -1000, 662, 931, 1063, 473,
	-1000, -1000, -1000, -1000, 580, 935, 1045, -611, 337, 500,
	500, 500, 500, 500, 497, 497, 497, 497, -1000, -1000,
	337, -1000, 6250, -1000, -1000, -1000, 1451, 1451, 1451, 43665,
	42862, -1000, -1000, -1000, 1527, 573, -1000, -1000, -1000, -1000,
	662, 210, -1000, 42862, 12756, 534, -1000, 259, 42862, 534,
	42862, 830, 1150, 810, 847, 1284, -1000, -1000, -1000, -1000,
	912, -1000, 908, -1000, -1000, 709, -1000, -1000, 705, 337,
	991, 1529, 29189, 824, 824, -1000, 43, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 254, 5281, 1596, -1000, 318, -1000,
	439, 134, 276, -1000, -1000, -1000, 206, 205, -1000, 42862,
	726, -1000, -1000, -1000, 5, 316, 5, -1000, -1000, -1000,
	-1000, 1237, 1211, -1000, 42862, -1000, -1000, 42862, 42862, 42862,
	42862, -1000, -1000, -1000, 477, -1000, 12756, -1000, -1000, -1000,
	409, 409, -1000, -1000, -1000, 709, -1000, -1000, -1000, 392,
	-1000, -1000, -445, 42862, 42862, 42862, 42862, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 108, 13570, -1000,
	-1000, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12756, -1000, 12756, -1000, 1471, 303, 662, 12756, 12756,
	-1000, 935, -1000, -1000, -1000, 337, 22765, -1000, 22765, -1000,
	12756, 147, 305, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 534, 1355, 534, 534, -1000,
	-1000, 1524, 1493, 1595, -1000, 662, -1000, 534, -1000, 38,
	566, -1000, 1522, -1000, -1000, 12756, 725, -1000, 12756, -1000,
	-1000, -1000, -1000, -1000, -1000, 6250, 1522, 824, -1000, -1000,
	120, -1000, 12756, -1000, -1000, -1000, 4007, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 724, 12756, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	709, -1000, -1000, -1000, 571, -76, 935, -1000, -1000, 1430,
	-1000, -1000, 21148, -1000, -1000, 699, 784, -1000, -66, -1000,
	935, 935, 337, -1000, 935, 935, -1000, -1000, 473, -1000,
	713, -1000, 147, 337, 843, -1000, -1000, 6250, -1000, 28386,
	-1000, 1474, 1473, 32401, 32401, -1000, 12756, 12756, 42862, 566,
	42862, 1471, 662, 42862, 662, -286, 1471, -1000, 935, -1000,
	534, 534, 534, 534, 534, 42862, 721, 1428, -1000, -1000,
	287, 561, -1000, 146, 42862, 42862, 337, -54, -452, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12756, -1000, 337, 837,
	-1000, -559, -1000, 468, -1000, -1000, -1000, -1000, -1000, 468,
	468, 662, 547, 482, -1000, -1000, 449, 337, 534, -1000,
	-1000, 437, -1000, 287, -444, 21148, 14412, 399, -1000, -1000,
	948, -442, -456, 931, -1000, -648, -1000, -1000, 31598, -1000,
	-1000, -1000, -1000, 30795, 42059, -433, -87, -444, -1000, -352,
	-1000, -1000, -1000, -1000, -1000, 729, -1000, 946, -1000, 337,
	-1000, -1000, -1000, 390, -1000, 4506, -536, 822, -1000, -418,
	-1000, -1000, -1000, 250, 295, -1000, -1000, -1000, -1000, -1000,
	-1000, -64, -1000, -1000, -445, -447, -1000, -1000, 42059, -531,
	107, 6250, -1000, 821, 818, 1560, -1000, -1000, -1000, -1000,
	-1000, -1000, -134, -1000, -453, -1000, -1000, 1414, -286, -1000,
	1586, -1000, 1572, 406, 406, -1000, -459, -567, -1000, -1000,
	-1000, -1000, -1000, -63, 606, -1000, -1000, 6250, -1000, -1000,
	-1000, 155, 155, -1000, -1000,
}

var psqPgo = [...]int{
	0, 1961, 23, 78, 218, 26, 220, 110, 1956, 1951,
	1950, 1947, 1945, 1944, 1943, 401, 383, 370, 1942, 1939,
	1938, 1937, 1936, 1934, 1933, 1931, 1929, 1926, 1924, 396,
	143, 217, 1922, 1919, 1917, 1916, 91, 148, 71, 65,
	150, 1912, 1911, 59, 1910, 1909, 1908, 172, 171, 151,
	1387, 1907, 164, 83, 1906, 1905, 1904, 1903, 1901, 1900,
	1899, 1898, 1897, 1896, 1895, 1894, 1890, 1889, 1885, 166,
	258, 1880, 16, 1879, 55, 1878, 1877, 1875, 1874, 1873,
	1872, 1871, 1870, 127, 1869, 1868, 1867, 230, 1866, 1864,
	246, 92, 96, 1863, 1862, 84, 153, 1859, 100, 1858,
	1857, 1856, 133, 1852, 5375, 1851, 48, 41, 1850, 47,
	67, 40, 38, 10, 14, 1848, 1847, 44, 76, 1846,
	1843, 52, 1842, 86, 79, 1840, 1839, 11, 5, 1832,
	1, 7, 4, 49, 1831, 1828, 102, 1827, 1826, 1822,
	77, 1819, 1818, 2742, 1815, 68, 118, 90, 60, 1814,
	1812, 32, 1811, 1807, 1806, 1804, 1802, 31, 1797, 1796,
	1793, 126, 21, 144, 33, 36, 50, 116, 1791, 43,
	63, 1790, 124, 125, 1788, 1787, 1786, 34, 1777, 45,
	111, 99, 46, 82, 1775, 1774, 1369, 224, 1773, 39,
	1771, 27, 28, 1769, 81, 29, 1767, 139, 1762, 53,
	138, 1759, 108, 142, 1754, 1753, 1752, 1750, 174, 1749,
	1748, 1747, 159, 128, 132, 75, 1746, 388, 1744, 1742,
	88, 2089, 1433, 2868, 25, 141, 1740, 1738, 1736, 3694,
	119, 117, 17, 1729, 149, 1728, 1727, 1725, 254, 146,
	94, 1322, 35, 1724, 1722, 12, 1718, 1717, 1714, 1709,
	1708, 1707, 191, 387, 74, 8, 72, 173, 58, 1705,
	1702, 106, 70, 1695, 137, 135, 115, 85, 1693, 145,
	129, 105, 1689, 80, 1688, 1687, 1686, 1677, 66, 1676,
	1675, 1669, 1665, 140, 130, 104, 69, 1663, 61, 97,
	131, 136, 22, 1662, 13, 37, 42, 20, 93, 98,
	1658, 0, 1655, 15, 147, 368, 1723, 1653, 1652, 2,
	6, 9, 1649, 1644, 1643, 1641, 123, 1634, 1633, 1629,
	1628, 19, 30, 18, 3, 1625, 1621, 5387, 3664, 107,
	1612, 1610, 365,
}

//line psql.y:6285
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 325, 326, 326, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 301, 301,
	301, 304, 304, 26, 65, 29, 29, 28, 28, 31,
	31, 30, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 7, 7, 7, 13, 14, 6, 15, 15,
	77, 77, 16, 17, 17, 17, 17, 329, 329, 138,
	138, 136, 136, 137, 137, 18, 19, 19, 203, 203,
	202, 202, 202, 204, 204, 204, 204, 241, 241, 20,
	20, 20, 20, 20, 88, 88, 303, 303, 302, 294,
	294, 293, 293, 292, 300, 300, 299, 299, 298, 34,
	35, 44, 44, 44, 44, 45, 46, 305, 305, 274,
	51, 51, 50, 50, 50, 50, 50, 50, 52, 52,
	48, 48, 47, 47, 49, 49, 276, 276, 263, 263,
	275, 275, 275, 275, 275, 275, 275, 262, 262, 99,
	99, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 320, 320, 320, 319,
	319, 185, 185, 185, 185, 185, 185, 185, 185, 108,
	108, 117, 117, 117, 117, 117, 106, 106, 107, 105,
	105, 105, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 116, 116, 112, 112,
	112, 113, 113, 113, 114, 114, 321, 321, 321, 321,
	245, 245, 245, 245, 248, 248, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 247, 247, 247, 247, 247,
	249, 249, 249, 249, 249, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 251, 251, 251, 251, 251, 251, 251, 251, 261,
	261, 252, 252, 257, 258, 259, 259, 259, 260, 260,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 256,
	256, 255, 255, 255, 264, 288, 288, 287, 287, 285,
	285, 285, 285, 285, 273, 273, 282, 282, 282, 282,
	282, 272, 272, 268, 268, 268, 269, 269, 270, 270,
	267, 267, 271, 271, 284, 284, 283, 283, 265, 265,
	266, 266, 290, 322, 322, 322, 322, 322, 323, 323,
	291, 312, 314, 314, 314, 313, 313, 310, 311, 309,
	309, 309, 309, 309, 74, 74, 74, 215, 215, 216,
	216, 280, 280, 279, 279, 279, 281, 281, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 211, 211, 211, 308, 308, 308, 308,
	308, 308, 307, 307, 307, 277, 277, 277, 306, 306,
	53, 53, 170, 170, 41, 41, 41, 41, 41, 41,
	40, 40, 40, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 42, 42, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 126, 128, 129, 129,
	127, 127, 127, 127, 127, 127, 55, 55, 54, 54,
	131, 130, 132, 132, 132, 22, 33, 33, 23, 23,
	23, 23, 24, 24, 56, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 210, 210, 218, 218, 209,
	209, 234, 234, 234, 212, 212, 212, 318, 318, 318,
	206, 206, 58, 58, 58, 60, 60, 61, 62, 62,
	236, 236, 237, 237, 63, 64, 75, 75, 75, 75,
	75, 75, 78, 78, 78, 9, 9, 9, 9, 71,
	71, 71, 8, 8, 59, 59, 66, 315, 315, 316,
	317, 317, 317, 317, 67, 25, 25, 25, 25, 25,
	25, 94, 94, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 89, 89, 89, 84, 84, 330,
	27, 201, 331, 69, 70, 70, 87, 87, 87, 81,
	81, 81, 86, 86, 86, 10, 10, 11, 193, 193,
	12, 12, 91, 91, 93, 93, 93, 93, 93, 95,
	95, 95, 95, 95, 95, 95, 90, 90, 92, 92,
	92, 92, 226, 226, 226, 225, 225, 120, 120, 122,
	121, 121, 123, 123, 124, 124, 124, 124, 168, 168,
	146, 191, 191, 189, 189, 190, 190, 192, 192, 192,
	192, 125, 125, 125, 125, 133, 133, 134, 134, 135,
	135, 32, 235, 235, 232, 232, 232, 231, 231, 139,
	139, 139, 141, 140, 140, 140, 140, 142, 142, 144,
	144, 143, 143, 145, 150, 150, 149, 149, 147, 147,
	147, 147, 148, 148, 148, 148, 151, 151, 104, 104,
	104, 104, 104, 104, 115, 115, 115, 115, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 76, 76, 76, 207,
	207, 152, 152, 160, 160, 160, 160, 153, 153, 153,
	153, 153, 153, 153, 161, 161, 161, 167, 162, 162,
	158, 158, 158, 158, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 243, 243, 297, 297, 296, 296, 295, 295,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 332, 332, 253, 253, 253, 159, 159, 159, 159,
	159, 85, 85, 85, 85, 85, 240, 240, 240, 244,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 173, 173, 82, 82, 171,
	171, 172, 174, 174, 169, 169, 169, 155, 155, 175,
	175, 176, 176, 177, 177, 179, 178, 178, 180, 181,
	181, 181, 182, 182, 183, 183, 183, 43, 43, 43,
	43, 43, 38, 38, 38, 38, 39, 39, 39, 39,
	96, 96, 96, 96, 98, 98, 97, 97, 72, 72,
	73, 73, 73, 102, 102, 103, 103, 103, 100, 100,
	101, 101, 186, 186, 187, 154, 154, 154, 154, 154,
	188, 188, 188, 188, 194, 194, 164, 164, 166, 166,
	165, 119, 195, 195, 199, 196, 196, 200, 200, 200,
	200, 200, 197, 197, 198, 198, 228, 228, 228, 205,
	205, 217, 217, 213, 213, 214, 214, 208, 208, 219,
	219, 219, 68, 163, 163, 289, 289, 286, 223, 223,
	223, 224, 224, 227, 229, 229, 229, 233, 233, 230,
	230, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 327, 328, 238, 239, 239, 239,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 2, 5, 7, 8, 6, 7,
	1, 1, 10, 10, 9, 8, 8, 1, 1, 1,
	3, 1, 3, 1, 3, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 6, 12, 2, 0, 2, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 1, 1, 3, 3, 6,
	4, 7, 8, 8, 8, 6, 3, 1, 1, 4,
	0, 1, 1, 1, 1, 2, 2, 2, 0, 1,
	4, 4, 4, 4, 4, 4, 2, 4, 1, 3,
	1, 1, 3, 4, 3, 3, 3, 5, 10, 0,
	2, 0, 2, 3, 5, 3, 4, 2, 3, 2,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 5,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 0, 0, 1, 1, 0, 1,
	0, 3, 3, 2, 2, 2, 1, 2, 2, 0,
	1, 0, 2, 2, 5, 0, 1, 1, 2, 1,
	2, 1, 1, 3, 0, 1, 4, 3, 3, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 1, 3, 3, 4, 3, 1,
	3, 1, 7, 6, 7, 7, 8, 8, 0, 1,
	5, 2, 1, 1, 1, 0, 1, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 1, 1, 2, 0,
	1, 0, 1, 1, 3, 2, 1, 2, 4, 4,
	3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 2, 0, 1, 5, 1, 3, 7,
	1, 3, 3, 1, 2, 2, 2, 5, 5, 5,
	6, 8, 5, 5, 4, 4, 4, 6, 5, 5,
	2, 2, 2, 2, 3, 3, 3, 4, 3, 3,
	1, 3, 5, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 11, 3, 8, 6,
	6, 6, 13, 8, 6, 10, 8, 4, 1, 3,
	3, 6, 7, 7, 8, 4, 0, 1, 0, 1,
	3, 3, 1, 1, 2, 3, 3, 5, 7, 7,
	6, 5, 3, 2, 3, 3, 3, 7, 3, 3,
	3, 4, 7, 5, 2, 4, 4, 4, 4, 4,
	5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 4, 4,
	4, 4, 4, 5, 3, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	1, 1, 2, 1, 3, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 3, 3, 6, 4, 7,
	6, 1, 3, 2, 2, 2, 1, 1, 1, 3,
	2, 1, 1, 1, 0, 1, 1, 0, 3, 0,
	2, 6, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 5, 5, 4, 0, 2,
	4, 4, 0, 1, 0, 1, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 3, 1, 1, 1, 4, 3, 1, 3, 4,
	3, 0, 3, 1, 3, 1, 3, 1, 1, 3,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 1, 1, 2, 6, 5,
	6, 6, 0, 2, 3, 3, 0, 2, 3, 3,
	2, 3, 1, 6, 3, 4, 3, 1, 3, 4,
	5, 6, 3, 4, 5, 6, 3, 4, 1, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 3, 1, 1,
	2, 2, 2, 2, 1, 1, 2, 9, 6, 6,
	6, 2, 2, 3, 3, 3, 1, 1, 1, 0,
	3, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 5, 5, 6, 4, 4, 8, 6, 8, 6,
	8, 5, 4, 2, 2, 1, 2, 2, 2, 8,
	8, 6, 5, 4, 4, 4, 4, 4, 7, 4,
	6, 6, 6, 4, 4, 4, 7, 8, 6, 5,
	6, 8, 11, 7, 8, 8, 9, 4, 4, 4,
	4, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 4, 0, 2, 0, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 2, 3, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 1, 0,
	2, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 2, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 2, 0,
	3, 0, 2, 0, 1, 3, 1, 3, 2, 0,
	1, 1, 0, 1, 2, 4, 4, 0, 2, 2,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 3, 3, 3, 0, 3, 1, 1, 0, 4,
	0, 1, 1, 0, 3, 1, 3, 2, 1, 1,
	0, 1, 2, 4, 2, 2, 1, 5, 4, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 0, 3, 0, 1, 0,
	1, 1, 5, 0, 1, 0, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -325, -1, -5, -13, -14, -15, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -56, -57, -58, -60,
	-61, -62, -63, -64, -8, -59, -25, -26, -27, -65,
	-66, -67, -68, -10, -11, -12, -3, -2, -7, 9,
	10, -77, -28, 32, -34, -44, 481, -45, -35, 482,
	-46, 484, 483, 521, 485, 514, 337, 566, 567, 569,
	570, 571, 572, -78, 519, 520, 488, 36, -330, 173,
	33, 34, 37, 527, 528, 491, -4, -29, 8, -327,
	11, 689, 516, 515, 28, -6, 723, 349, -326, 855,
	-186, -187, 22, 33, 29, -183, -179, -87, -187, 20,
	18, 7, -69, -331, -69, -69, 12, 13, -69, -274,
	-276, 349, 417, 349, -69, -51, -50, -48, -47, -49,
	-52, 31, -41, -40, -42, -36, -37, -281, 487, 482,
	489, 490, 690, 385, 384, 382, 383, 483, 338, 484,
	344, 33, 723, 726, -278, -52, 364, 366, 834, 495,
	837, 838, 841, 842, 848, 849, 850, 386, 7, -69,
	-233, -229, -301, -221, -222, 352, 353, 354, 69, 70,
	71, 72, 507, 487, 755, 556, 73, 74, 482, 42,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 566,
	403, 580, 574, 721, 84, 19, 85, 37, 86, 508,
	544, 87, 88, 591, 594, 89, 90, 91, 92, 93,
	522, 627, 94, 569, 656, 366, 95, 96, 97, 834,
	98, 99, 100, 101, 342, 102, 112, 113, 114, 115,
	116, 117, 660, 670, 491, 118, 360, 119, 120, 121,
	545, 13, 122, 123, 124, 125, 126, 127, 385, 382,
	128, 129, 583, 483, 130, 734, 384, 131, 132, 608,
	824, 518, 630, 764, 133, 347, 528, 26, 516, 134,
	135, 136, 377, 137, 138, 139, 555, 359, 765, 338,
	817, 140, 634, 141, 41, 648, 142, 143, 737, 738,
	144, 111, 145, 675, 146, 499, 147, 148, 149, 383,
	150, 151, 152, 153, 495, 506, 154, 155, 156, 157,
	158, 159, 11, 160, 578, 579, 477, 553, 650, 605,
	702, 161, 162, 703, 163, 164, 165, 166, 739, 376,
	167, 396, 35, 168, 722, 169, 557, 170, 171, 651,
	172, 173, 820, 174, 33, 772, 175, 176, 719, 177,
	178, 529, 550, 179, 180, 680, 181, 325, 683, 182,
	539, 647, 183, 596, 777, 184, 322, 185, 186, 187,
	188, 511, 345, 189, 190, 191, 192, 779, 193, 780,
	586, 194, 746, 381, 195, 782, 196, 197, 546, 198,
	784, 786, 199, 747, 200, 201, 202, 203, 204, 205,
	40, 787, 530, 206, 842, 788, 207, 208, 209, 210,
	791, 211, 527, 212, 213, 214, 639, 215, 534, 216,
	217, 218, 219, 220, 221, 652, 582, 222, 223, 750,
	224, 225, 226, 227, 228, 572, 484, 655, 689, 229,
	230, 799, 513, 231, 232, 233, 802, 570, 234, 235,
	236, 237, 238, 239, 571, 240, 493, 641, 241, 242,
	685, 554, 549, 243, 658, 244, 649, 32, 245, 246,
	324, 514, 808, 809, 576, 247, 248, 547, 249, 250,
	567, 251, 252, 253, 254, 852, 388, 255, 356, 256,
	257, 693, 258, 259, 752, 642, 386, 260, 261, 262,
	551, 597, 812, 587, 588, 568, 263, 264, 535, 701,
	521, 265, 266, 267, 268, 813, 657, 269, 270, 271,
	272, 273, 274, 12, 275, 276, 277, 278, 323, 320,
	592, 279, 280, 496, 281, 282, 283, 284, 726, 573,
	285, 653, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 296, 297, 590, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 494, -69, 494,
	-143, -229, 494, -197, 626, -218, 628, 641, 636, 634,
	-210, 637, 639, 534, -318, 648, 494, 643, 481, 638,
	646, 543, -301, 434, 852, 394, 594, 633, 631, 649,
	820, -229, 568, -236, 573, -223, -301, -221, -222, 571,
	-143, -75, 817, 486, 485, -238, -238, -89, 820, 822,
	-162, -104, 401, -115, -118, -109, -110, -156, -157, -158,
	-159, -116, -169, 423, 424, 431, 402, -167, -119, 26,
	719, 691, 690, 434, 31, 477, 331, 332, 693, 694,
	404, 320, 666, 667, -117, 661, 668, 663, 696, 697,
	377, 698, 367, 369, 368, 699, 700, 701, 606, 607,
	702, 703, 704, 370, 371, 372, 373, 374, 375, 376,
	705, 708, 706, 707, 709, 710, 711, 716, 717, 712,
	713, 714, 715, 718, -223, -229, 499, 660, 493, 429,
	689, -111, -107, -2, -165, 659, 664, 665, 669, 662,
	-301, -221, -222, -113, -112, -152, 355, 361, 365, 362,
	-324, 378, -327, 360, 359, 356, 357, 358, 379, 380,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, -201, 38, 117, 642, 642, -143, -69, -69,
	-69, -177, -87, -179, -4, -2, -327, 8, -69, -2,
	-3, -7, -29, -31, 750, -30, -229, 12, 419, -143,
	-182, -183, -6, -2, -104, 19, 23, 24, -92, 425,
	-104, -229, -70, -92, -208, 498, -69, -69, -196, -241,
	568, -200, 649, 648, -224, -198, -223, -220, -197, 647,
	23, 486, 485, 400, 43, 729, 25, 27, 44, 45,
	434, 389, 404, 691, 505, 433, 626, 501, 38, 46,
	509, 481, 335, 47, 661, 48, 49, 663, 659, 666,
	31, 50, 28, 24, 36, 407, 408, 735, 380, 51,
	22, 510, 52, 14, 633, 53, 16, 17, 54, 419,
	55, 333, 56, 29, 416, 57, 329, 742, 390, 331,
	417, 20, 664, 665, 336, 401, 58, 378, 21, 339,
	654, 398, 18, 334, 59, 60, 500, 512, 816, 332,
	8, 61, 62, 63, 64, 65, 494, 66, 406, 497,
	391, 379, 7, 395, 644, 340, 67, 68, 405, 15,
	753, 723, 594, -275, 417, -262, -266, -223, 509, -291,
	505, -143, -284, -283, -223, -327, -88, -217, 495, 503,
	502, 395, -305, 398, 551, 660, 493, -47, -48, -49,
	-197, 433, 837, 350, 350, -278, -266, -265, -264, -306,
	509, -290, -282, 501, 510, -272, 502, 503, -267, 495,
	396, -306, 505, 495, -306, -306, 497, 35, 35, 386,
	386, -306, -267, 500, 510, 505, 509, -219, -267, 497,
	25, -273, 409, -273, 727, 727, -197, 433, -273, -273,
	-273, 538, -273, -273, -273, -273, -273, -273, -273, -273,
	-273, 494, -305, -96, 646, 344, -50, -33, -143, -217,
	495, 496, -305, 527, -143, 478, -143, -212, 417, 15,
	-212, -209, 642, 640, 627, 632, -212, -212, -212, 541,
	625, -268, 495, 35, 506, 642, 541, 625, 541, 542,
	541, 542, 635, 645, 541, -234, 14, 419, 660, 630,
	634, 534, 494, 535, 496, 644, 642, 537, -239, -327,
	-224, -301, 823, -239, 32, 353, 497, -223, -71, -223,
	356, -9, -5, -16, -15, -17, 409, -94, 642, -83,
	434, 824, 825, 826, 823, 639, 831, 829, 827, 541,
	828, 350, 398, 400, 4, -104, 416, -153, 409, 410,
	411, 412, 413, 414, 415, 419, 401, 403, 417, 418,
	409, 399, 420, 421, 422, 423, 424, 425, 426, 428,
	427, 429, 430, 433, 479, 480, -110, -110, -110, -110,
	-167, -327, -327, -327, -110, -207, -327, -110, -327, -327,
	-327, -327, -173, -104, -327, -332, -327, -332, -332, -253,
	-327, -253, -327, -327, -327, -327, -327, -327, -327, -327,
	-327, -327, -327, -327, -327, -327, -327, -327, -327, -327,
	-327, -327, -327, -327, -327, -327, -327, -327, -327, -327,
	-327, -327, -327, -327, -327, -327, -327, -327, -327, 478,
	-327, -327, -327, -327, -327, -253, -253, -253, -253, -253,
	365, 361, 355, -169, 362, 356, -223, -229, -2, -3,
	-162, -70, -238, -315, -316, -146, -143, -327, -223, -223,
	527, -182, -6, -2, -177, -183, -179, -2, -69, -81,
	-93, 326, 327, -95, 24, 39, 330, 328, 23, -328,
	351, -328, -186, -328, 350, -31, -191, 349, 324, 350,
	21, -178, -180, -104, 14, -226, -225, 25, -223, 356,
	478, 38, 14, -144, 29, -143, -208, -208, 350, 568,
	-200, -241, -203, -202, 650, 652, 409, -228, -223, 356,
	31, 351, 350, -143, -245, -248, -250, -249, -251, -246,
	-247, 591, 592, 434, 595, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 608, 32, 517, 587, 588, 589,
	590, 609, 610, 611, 612, 613, 614, 615, 616, 574,
	593, 721, 575, 576, 577, 578, 579, 580, 582, 583,
	584, 585, 586, -304, -301, 349, 351, 350, -252, 349,
	-104, -96, 494, -301, 495, 495, 495, -69, 689, -273,
	-273, -273, 18, -36, -37, -40, -37, 349, -262, -271,
	-304, -301, 349, 396, 500, 395, -270, -267, -270, -271,
	-301, -169, -301, -301, -169, -262, -197, -169, -301, 396,
	396, -301, -301, -143, -301, 31, 341, 342, 343, 31,
	345, 346, 347, -273, -273, 356, 356, 356, -273, 356,
	-307, 511, 555, 557, 31, 356, -308, 31, 844, 843,
	845, 846, 847, 31, 31, -223, 349, -143, -102, 545,
	481, 483, 487, 339, 409, 350, 497, 494, -301, -213,
	499, -213, -223, -230, -229, -220, 356, -104, -269, 14,
	419, -234, -234, -212, -143, -269, -234, -212, -143, -212,
	-212, -212, -212, -234, -234, -234, -212, -229, -229, -143,
	-143, -143, -143, -143, -143, -143, -239, -206, 14, 339,
	-239, -239, -237, 571, 605, 818, 819, 350, 723, -136,
	-143, 823, 823, 823, 823, 823, -104, -104, -104, 746,
	-160, 378, 401, 379, 380, -118, -161, -165, -167, 363,
	419, 403, 417, 418, -109, -110, -109, 43, -109, -109,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-240, -223, 356, 434, -114, -113, 362, 356, -324, -114,
	-90, -92, -104, -104, -301, -223, -90, -90, -104, -86,
	24, 39, -171, -172, 405, -169, -328, -328, 362, -223,
	-223, -80, -79, 671, 672, 673, 674, 676, 677, 678,
	681, 682, 686, 687, 670, 688, 675, 680, 683, 684,
	685, 679, 590, -104, -104, -104, -104, -104, -104, -76,
	-104, 389, 390, 391, -104, -104, -163, -162, -300, -299,
	-298, -104, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -91, 24, 39, -90, -224, -230,
	-220, -90, -91, -91, -90, -90, 478, -328, 339, 350,
	-317, 652, 653, 821, -232, -231, 25, -229, 356, -163,
	14, -193, 340, -223, -182, -182, 326, 327, 322, -90,
	-95, -328, -30, 25, -189, -223, 325, -104, -104, 350,
	-181, 27, 28, -143, -225, 425, -230, -143, -154, 32,
	320, -5, -327, -143, -121, -123, -124, -125, -146, -168,
	-327, -126, 742, 739, 14, -136, -137, -145, -229, -200,
	-203, 350, 651, 653, 654, 339, 381, -104, -255, 433,
	-280, -279, -278, -262, -264, -265, -266, 495, 396, 351,
	-255, -259, 623, 622, -252, -252, -252, -252, -252, -254,
	-197, 617, 618, 434, -254, -254, -254, 349, 349, -252,
	-252, -252, -252, -257, -257, -257, -258, -258, -291, -104,
	-288, -287, -285, -286, 364, 815, 771, 723, 340, -283,
	-181, 358, -328, -102, -214, 499, -289, -286, -301, -301,
	-301, -214, -301, 356, -301, 356, -301, 356, 19, 350,
	-263, -262, -53, 555, -290, -284, -271, 396, -270, -271,
	-271, 483, 32, -215, 762, 401, 815, 771, -262, -53,
	-240, -301, 497, -240, -240, 356, -211, 852, -136, -98,
	547, 409, 536, 536, 494, 494, 549, -143, 548, 550,
	552, -143, -143, -213, 339, -138, -143, 26, -229, -143,
	-212, -212, -143, -212, -212, -143, -223, -83, 652, 350,
	723, 22, -84, 22, -327, 378, 379, 380, -161, -109,
	-110, -109, 400, 518, -161, 356, 350, -328, 25, 350,
	340, -328, -328, -328, 350, 14, -90, -174, -172, 407,
	-104, -328, -328, 350, 350, 14, -244, -328, -328, -328,
	-328, -328, -173, -328, 14, 350, 350, -328, -328, 350,
	350, -328, 350, 350, 350, -297, 350, 350, 350, 350,
	-328, -328, -328, -328, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, -328, -328, -90, -90, -327, 478,
	-328, -328, -328, -328, -328, -224, -32, 493, -316, 820,
	653, -150, -149, -147, 337, 498, 338, -231, -328, -114,
	353, -190, 353, -189, -155, -223, 362, -120, -122, 14,
	-95, -167, 351, 350, -180, 478, -151, 15, -194, 339,
	-195, -199, -169, -164, -166, -165, -327, -188, -328, -223,
	32, 350, -139, -141, -140, -142, 329, 333, 335, 330,
	331, 332, 336, -235, 25, -121, -3, -2, -327, -327,
	-327, -143, -136, -329, 14, 340, -329, 350, 478, -202,
	-204, 655, 652, 658, -301, 356, 350, -278, -266, -184,
	-99, 41, -260, 624, -254, 730, -254, -223, 356, 434,
	-256, 434, -256, 617, 618, -261, 356, -261, 351, -43,
	-38, -39, 33, 344, -285, 356, 40, -223, 351, -181,
	-98, -143, 401, 339, -289, -289, -289, -229, -189, 18,
	350, 351, -170, 556, 351, 349, -271, -271, 31, 31,
	815, 771, 762, -53, -170, -255, -301, 854, 853, 351,
	496, 554, -103, 666, -100, 356, 352, -143, -143, -143,
	-143, -143, 487, 483, 497, -136, -143, 350, -74, 513,
	508, -234, -234, 33, -143, 652, 832, 830, -104, 400,
	518, -118, -110, -92, 720, -242, 434, 591, 517, 589,
	585, 605, 596, 622, 587, 623, 584, 583, 582, -242,
	-240, -104, -104, -177, 408, -104, 406, -104, -104, -104,
	-328, 14, -104, -104, -104, -298, -104, -104, -104, -296,
	-295, -114, -169, -328, -296, -104, -104, -295, -295, -299,
	-299, -299, -299, -299, -162, -162, -162, -162, -328, -328,
	-91, -224, 416, -227, -301, -147, -267, -267, -267, 350,
	-205, 22, 14, 320, -151, -121, -95, -223, 425, -182,
	-104, 30, -194, 350, 409, 350, -328, -328, 350, 320,
	478, -195, -123, -124, -124, -123, -124, 329, 329, 329,
	334, 329, 334, 329, -140, -229, -328, -328, -3, -3,
	-104, -232, 340, -121, -121, -145, -229, 425, 652, 656,
	657, -278, -323, 378, 401, 31, 339, 620, 364, -321,
	433, 759, 810, 815, 771, -322, 500, 395, 396, 512,
	25, 42, -256, -256, 351, 350, 351, -216, -215, -39,
	-38, -273, -273, -301, 496, 26, -143, 339, 339, 339,
	19, -262, -169, -288, -189, -106, -327, -105, -107, -111,
	423, 424, 359, 360, -170, -143, -97, 545, 553, 349,
	-101, 353, -303, 340, 536, 620, 536, -143, -74, -43,
	-143, -212, -212, 33, -301, -328, -118, -110, -327, -328,
	-252, -252, -252, -258, -252, 579, -252, 579, -252, -328,
	-328, 350, -328, 22, -328, -82, 695, -104, 350, 350,
	-328, -104, -328, -328, -328, -297, 350, -328, 350, -328,
	350, -243, 816, -328, -328, -328, -328, -328, -328, -328,
	-328, -328, -328, -328, -114, -148, 22, -148, -148, 353,
	-143, -175, 16, 396, -199, -104, -166, 320, -5, -223,
	-164, -223, -151, -134, -133, 339, 340, -135, 339, -133,
	329, 329, -191, -328, -328, 350, -151, -121, -151, -151,
	478, 378, -327, -108, -117, -106, 12, 356, 356, -301,
	-320, 843, 844, 31, 358, 396, 396, -143, 349, -254,
	356, -254, 31, 345, 346, 347, 31, 341, 342, 343,
	-143, -143, -143, -143, -189, 351, -104, -112, -112, -191,
	351, -294, 723, -302, -223, -223, -223, -223, -109, -254,
	-104, -104, -182, 356, -104, -104, -328, -328, -296, -295,
	-104, -328, -131, -130, -132, 824, 378, 31, -242, -327,
	329, 18, 16, -327, -327, -176, 17, 19, 12, -164,
	478, -177, -104, 349, -104, -114, -177, -151, -104, -157,
	377, 701, 702, 703, 376, 349, -104, -191, -322, -328,
	25, -293, -292, -224, 349, 340, -85, 419, 723, -328,
	-328, -328, -328, -328, -328, -328, 350, -328, -130, -132,
	-328, 339, -114, -192, -328, -223, 500, 19, 19, -192,
	-192, -104, -162, -195, -223, -182, -189, -128, 627, -182,
	-328, -189, 351, 25, -5, 350, 409, -189, -143, -328,
	721, 336, 724, -104, -328, 339, 734, 824, 350, -328,
	-328, -328, 351, -328, -327, 351, -185, -5, -72, 723,
	-292, -277, -224, 356, 358, 351, 325, 722, 725, -297,
	-223, 500, -232, -129, -127, -223, 777, -313, -312, 719,
	-323, -319, 378, 401, 364, -321, 815, 771, 387, 388,
	-72, -73, 544, 820, -303, 325, -328, -328, 350, 22,
	-245, -55, 788, -310, -311, 339, -314, 633, 787, 808,
	378, 356, 505, -294, 723, -127, 784, -255, -114, -311,
	339, -310, 339, 13, 12, 546, 724, -54, 26, -128,
	-309, 513, 508, 511, 32, -309, 725, 788, 507, 31,
	378, -114, -131, -130, -130,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 682,
	682, 682, 0, 682, 0, 0, 682, -2, -2, 682,
	1137, 0, 682, 0, 0, -2, 613, 615, 0, 617,
	-2, 0, 0, 626, 1654, 1654, 674, 0, 0, 0,
	0, 0, 0, 682, 682, 682, 1023, 48, 682, 0,
	80, 81, 632, 633, 634, 63, 0, 1652, 1, 3,
	69, 73, 0, 0, 0, 56, 1032, 0, 74, 0,
	0, 686, 0, 684, 0, 1117, 682, 682, 0, 109,
	110, 0, 0, 0, -2, 113, -2, 142, 143, 144,
	0, 149, 515, 465, 467, 470, 503, -2, -2, 458,
	458, 458, 0, 0, 0, 0, 0, 458, 500, 1119,
	364, 364, 0, 0, 426, 0, 364, 364, 364, 0,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 1050,
	148, 1138, 1134, 1135, 1136, 38, 39, 40, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 0, 1111, 0,
	553, 781, 0, 604, 604, 0, 604, 604, 604, 0,
	0, 0, 564, 0, 0, 0, 0, 601, 0, 580,
	0, 586, 1655, 0, 1655, 1102, 0, 598, 596, 608,
	609, 612, 616, 0, 621, 624, 1128, 1129, 1130, 0,
	639, 47, 1355, 630, 631, 644, 645, 0, 675, 676,
	43, 878, 0, 802, 807, 818, 832, 833, 834, 835,
	836, 838, 839, 0, 0, 0, 0, 844, 845, 1342,
	1423, 0, 0, 0, 859, 1391, 0, 0, 1566, 0,
	1005, 1604, 971, 971, 895, 971, 973, 973, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 1584, 0, 0,
	1395, 1398, 0, 0, 0, 0, 0, 0, 0, 1404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 1370, 1307, 1531, 0,
	1513, 266, 267, 877, 1091, 973, 973, 973, 973, 973,
	-2, -2, -2, 212, 213, 214, 215, 216, 217, 218,
	0, 208, 0, -2, -2, -2, 272, 268, 861, 862,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 680, 684, 1654, 0, 654, 0, 0, 0,
	0, 1032, 0, 1024, 1023, 61, 0, 682, -2, 0,
	0, 0, 0, 45, 1504, 50, 741, 1072, 0, 1074,
	57, 1033, 65, 67, 1034, 0, 687, 688, 0, 718,
	722, 0, 683, 0, 0, 1118, 1117, 1117, 95, 0,
	1580, 1095, -2, -2, 0, 0, 1131, 1132, 1104, -2,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1279, 0, 0, 160, 161, 0, 41, 391,
	0, 156, 0, 384, 331, 0, 1050, 0, 0, 0,
	0, 0, 682, 0, 1112, 137, 138, 145, 146, 147,
	364, 364, 364, 148, 148, 427, 474, 475, 476, 0,
	-2, 389, 0, 459, 0, 0, 378, 378, 382, 380,
	381, 0, 0, 0, 0, 0, 0, 490, 491, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 1120,
	1121, 0, 365, 0, 513, 514, 364, 364, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 1063, 0, 0, -2, 545, 0, 0,
	0, 1113, 1113, 0, 552, 0, 554, 555, 0, 0,
	556, 0, 601, 601, 599, 600, 558, 559, 560, 604,
	0, 0, 373, 374, 375, 601, 604, 0, 604, 604,
	604, 604, 601, 601, 601, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1655, 583, 584, 587, 1656,
	1657, 1655, 1655, 594, 1103, 614, 622, 625, 642, 640,
	641, 643, 635, 636, 637, 638, 0, 655, 656, 661,
	0, 0, 0, 666, 667, 668, 0, 0, 671, 672,
	673, 0, 0, 0, 0, 800, 0, 0, 867, 868,
	869, 870, 871, 872, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 840, 841, 842, 843,
	846, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 692, 0, 1006, 0, 893, 0, 894, 896, 897,
	0, 898, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 702, 702, 0, 0, 201, 202, 203, 204, 205,
	219, 220, 221, 222, 223, -2, 1014, 0, 877, 0,
	0, 0, 44, 646, 647, 0, 764, 1123, 0, 698,
	0, 55, 64, 66, 1032, 59, 1032, 0, 704, 0,
	0, -2, -2, 705, 711, 712, 713, 714, 715, 52,
	1653, 53, 0, 72, 0, 46, 0, 0, 0, 0,
	0, 1025, 1026, 1029, 0, 719, 723, 0, 725, 726,
	0, 685, 0, 0, 0, 780, 0, 0, 0, 1580,
	1101, 0, 97, 98, 0, 0, 0, 351, 1106, 1107,
	1108, -2, 371, 0, 351, 335, 281, 282, 283, 331,
	285, 331, 331, 331, 331, 340, 340, 340, 340, 314,
	315, 316, 317, 318, 0, 0, 300, 331, 331, 331,
	331, 321, 322, 323, 324, 325, 326, 327, 328, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 333, 333,
	333, 334, 334, 0, 42, 0, 355, 0, 1029, 0,
	0, 1063, 1115, 1125, 0, 0, 0, 1115, 115, 0,
	0, 0, 0, 471, 472, 468, 504, 0, 460, 372,
	0, -2, 0, 382, 0, 378, 382, 379, 382, 370,
	383, 0, 0, 0, 0, 460, 0, 494, 495, 496,
	0, 498, 499, 501, 0, 505, 506, 507, 508, 509,
	510, 511, 512, 0, 0, 430, 431, 432, 0, 434,
	435, 452, 453, 454, 436, 437, 438, 446, 447, 448,
	449, 450, 451, 439, 440, 443, 0, 130, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 701, 782, 1139, 1140, 605, 606, 0, 376,
	377, 604, 604, 561, 591, 0, 604, 565, 592, 566,
	568, 567, 569, 581, 582, 604, 572, 602, 603, 573,
	574, 575, 576, 577, 578, 579, 588, 0, 610, 611,
	589, 590, 0, 623, 627, 628, 629, 0, 0, 658,
	91, 663, 664, 665, 677, 670, 879, 798, 799, 0,
	801, 804, 0, 863, 865, 806, 808, 874, 875, 876,
	0, 0, 0, 0, 0, 812, 816, 0, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	837, 986, 987, 988, 854, 274, 275, 271, 0, 855,
	0, 716, 0, 0, 0, 853, 0, 0, 0, 0,
	693, 694, 1012, 1009, 0, 0, 972, 974, 0, 0,
	0, 0, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 989, 0, 0, 0, 0, 0, 1005,
	0, 856, 857, 858, 0, 0, 0, 1124, 0, 125,
	126, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 1015, 0,
	-2, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	649, 650, 652, 0, 784, 765, 0, 767, 768, 0,
	0, 697, 0, 700, 58, 60, 709, 710, 0, 727,
	706, 54, 49, 0, 0, 743, 1073, 1035, 1036, 0,
	1028, 1030, 1031, 75, 724, 720, 0, 796, 1084, 0,
	0, 1076, 0, 779, 0, 730, 732, 733, 734, 762,
	0, 737, 0, 1403, 0, 0, 0, 93, 781, 1096,
	96, 0, 0, 101, 102, 1097, -2, 1099, 1100, 0,
	139, -2, 423, 162, 164, 165, 166, -2, -2, 157,
	-2, 338, 336, 337, 284, 340, 340, 308, 309, 310,
	0, 349, 349, 346, 311, 312, 313, 0, 0, 301,
	302, 303, 304, 295, 296, 297, 298, 299, 390, 0,
	1037, 356, 357, 359, 0, 361, 362, 0, 0, 385,
	386, 0, 1029, 1054, 0, 0, 0, 1126, 1125, 1125,
	1125, 0, 150, 151, 152, 153, 154, 155, 0, 148,
	0, 158, 462, 461, 388, 0, 0, 382, 382, 367,
	368, 0, 0, 484, 417, 0, 485, 486, 460, 462,
	351, 497, 0, 428, 429, 433, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1051, 1052,
	1053, 0, 546, 0, 0, 414, 89, 1114, 551, 601,
	571, 593, 601, 563, 570, 585, 619, 662, 0, 0,
	0, 0, 669, 0, 0, 805, 864, 866, 809, 0,
	813, 817, 0, 0, 819, 273, 0, 0, 0, 0,
	0, 860, 884, 885, 0, 0, 1023, 0, 1010, 0,
	0, 892, 975, 0, 0, 0, 0, 903, 904, 905,
	906, 907, 0, 909, 0, 0, 0, 913, 914, 0,
	0, 915, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 928, 929, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 880, 0, 0, 702, 0,
	976, 977, 978, 979, 980, 1015, 0, 0, 648, 651,
	653, 740, 785, 786, 0, 0, 0, 766, 1122, 695,
	696, 699, -2, 0, 0, 1017, 0, 796, 728, 0,
	707, 51, 742, 0, 1027, 0, 1032, 0, 78, 0,
	1084, 1092, 0, 1075, 1086, 1088, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 769, 0, 0, 772,
	0, 0, 0, 0, 763, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 87, 88, 0, 0, 0, 99,
	100, 0, 0, 106, 352, 353, 148, 425, 163, 398,
	0, 0, 280, 339, 305, 306, 307, 349, 349, 343,
	344, 350, 345, 347, 348, 0, 329, 0, 419, 111,
	1041, 1040, 364, 364, 358, 360, 0, 1127, 332, 387,
	0, 129, 0, 0, 0, 0, 0, 135, 466, 0,
	0, 477, 478, 0, 355, 0, 366, 369, 479, 0,
	482, 483, 418, 462, 488, 489, 502, 444, 445, 442,
	0, 0, 1064, 1065, 1070, 1068, 1069, 116, 519, 521,
	520, 524, 0, 0, 0, 414, 1037, 0, 550, 415,
	416, 604, 604, 657, 92, 0, 660, 0, 0, 0,
	0, 810, 814, 717, 0, 0, 331, 331, 992, 331,
	334, 995, 331, 997, 331, 1000, 331, 1003, 1004, 0,
	0, 0, 0, 1007, 891, 1013, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 127, 128, 944, 0, 0,
	946, 948, 949, 919, 945, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 882,
	0, 1016, 0, 761, 1133, 787, 792, 792, 792, 0,
	0, 1109, 1110, 1018, 1019, 729, 708, 744, 721, 76,
	797, 0, 79, 0, 0, 0, 1089, 0, 0, 0,
	0, 796, 731, 757, 759, 0, 754, 770, 771, 773,
	0, 775, 0, 777, 778, 741, 736, 738, 0, 0,
	0, 796, 0, 796, 796, 94, 0, 783, 103, 104,
	105, 424, 167, 172, 0, 0, 0, 177, 0, 179,
	0, 0, 0, 184, 185, 399, 0, 277, 279, 0,
	0, 170, 341, 342, 340, 0, 340, 400, 420, 1038,
	1039, 0, 0, 363, 0, 1116, 131, 0, 0, 0,
	0, 159, 463, 354, 0, 480, 0, 206, 207, 209,
	0, 0, 269, 270, 487, 741, 1055, 1056, 1057, 0,
	1067, 1071, 119, 0, 0, 0, 0, 547, 548, 549,
	90, 557, 562, 659, 678, 803, 811, 815, 0, 848,
	990, 340, 993, 994, 996, 998, 999, 1001, 1002, 849,
	850, 0, 887, 0, 889, 1032, 0, 1011, 0, 0,
	901, 0, 910, 911, 912, 0, 0, 918, 0, 920,
	0, 0, 0, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 883, 681, 0, 0, 0, 0, -2,
	62, 1021, 0, 0, 1093, 1094, 1087, 0, 1079, 1082,
	1078, 1081, 1023, 751, 758, 0, 0, 752, 0, 753,
	774, 776, 735, -2, 739, 0, 1023, 796, 85, 86,
	0, 173, 0, 175, 199, 200, 0, 178, 180, 181,
	182, 186, 187, 188, 183, 276, 278, 0, 0, 319,
	330, 320, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	741, 132, 133, 134, 469, 0, 0, 210, 211, 0,
	1066, 518, 0, 117, 118, 0, 0, 523, 981, 991,
	0, 0, 0, 1008, 0, 0, 908, 916, 0, 947,
	0, 923, 0, 0, 0, 542, 543, 0, 943, 0,
	793, 0, 0, 0, 0, 77, 0, 0, 0, 1077,
	0, 1032, 755, 0, 760, 0, 1032, 84, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 481,
	0, 120, 121, 0, 0, 0, 0, 0, 0, 886,
	888, 890, 899, 900, 917, 921, 0, 924, 0, 0,
	925, 0, 544, 0, 789, 747, 748, 794, 795, 0,
	0, 1022, 1020, 1085, 1083, 82, 0, 0, 0, 83,
	174, 0, 191, 0, 1058, 0, 0, 0, 525, 847,
	0, 0, 0, 944, 926, 0, 540, 541, 0, 788,
	790, 791, 756, 764, 0, 405, 398, 1058, 516, 1060,
	122, 123, 455, 456, 457, 116, 982, 0, 985, 0,
	749, 750, 526, 0, 528, 0, -2, 393, 406, 0,
	168, 192, 193, 0, 0, 196, 197, 198, 189, 190,
	112, 0, 1061, 1062, 119, 983, 922, 527, 0, 0,
	351, 0, 537, 394, 395, 0, 401, 402, 403, 404,
	194, 195, 0, 522, 0, 529, 530, 538, 0, 396,
	0, 397, 0, 0, 0, 1059, 0, 0, 539, 535,
	407, 409, 410, 0, 0, 408, 984, 0, 411, 412,
	413, 531, 532, 533, 534,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 402, 3, 3, 3, 428, 420, 3,
	349, 351, 425, 423, 350, 424, 478, 426, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 855,
	410, 409, 411, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 399, 3, 431,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 398, 57738, 400, 57739, 401,
	57740, 403, 57741, 404, 57742, 405, 57743, 406, 57744, 407,
	57745, 408, 57746, 412, 57747, 413, 57748, 414, 57749, 415,
	57750, 416, 57751, 417, 57752, 418, 57753, 419, 57754, 421,
	57755, 422, 57756, 427, 57757, 429, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 477, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 58178, 853, 58179, 854,
	0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	psqDebug        = 3
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if psqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", psqTokname(token), uint(char), token)
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:558
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:563
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:564
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:568
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 37:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:604
		{
			setParseTree(psqlex, nil)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:610
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:614
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:618
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:623
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 42:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:627
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 43:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:633
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:639
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:645
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:649
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:654
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:658
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:664
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 50:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:668
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:674
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:680
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:684
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:688
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:711
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:717
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:722
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:728
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:735
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:741
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:748
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 62:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:752
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:758
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:762
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:766
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:770
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:774
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:780
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:784
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:789
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:793
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:799
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:803
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:808
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:815
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:821
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:829
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:837
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:848
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:860
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:864
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:870
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:876
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:880
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:884
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:888
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:893
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:894
		{
		}
	case 89:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:898
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:902
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:908
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:912
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 93:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:918
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:922
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 95:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:928
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:934
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:938
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:944
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:948
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 100:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:954
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:958
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:962
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:968
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:972
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:976
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:980
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:986
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:990
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:996
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1002
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1009
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().AlterOptions = append(psqDollar[1].alterTableUnion().AlterOptions, psqDollar[6].alterOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1018
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[8].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Algorithm: psqDollar[4].str, Definer: psqDollar[5].definerUnion(), Security: psqDollar[6].str, Columns: psqDollar[9].columnsUnion(), Select: psqDollar[11].selStmtUnion(), CheckOption: psqDollar[12].str}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1022
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1029
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1033
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1038
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 117:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1042
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1048
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 119:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1053
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1058
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1064
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1069
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1075
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 124:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1080
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1084
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1090
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1094
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1100
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 129:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1106
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1113
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[4].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1120
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1125
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1130
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1135
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1142
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1149
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1160
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1166
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1170
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1176
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1180
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1184
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1188
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1192
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 147:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1196
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 148:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1202
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1206
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 150:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1212
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 151:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1216
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 152:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1222
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1226
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1232
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1236
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 156:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1242
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 157:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1246
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 158:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1252
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 159:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1256
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1262
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1267
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1272
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1276
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 164:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1281
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1285
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1289
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 167:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1300
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1309
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 169:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1318
		{
			psqVAL.str = ""
		}
	case 170:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1322
		{
			psqVAL.str = ""
		}
	case 171:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1331
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1335
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1341
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 174:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1347
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1352
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1357
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1362
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1367
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1372
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1377
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1381
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 182:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1386
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 183:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1390
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 184:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1395
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1401
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1409
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1413
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1417
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1423
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1427
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1432
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1436
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1441
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1447
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1453
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1458
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1463
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1469
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 199:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1477
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1484
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1488
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 203:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1492
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1496
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1500
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1511
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1518
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1522
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1528
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1532
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1536
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1540
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1544
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1548
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1552
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1557
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1561
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1565
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1569
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1573
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1580
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1584
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1588
		{
			psqVAL.str = ast.Big5Str
		}
	case 227:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1592
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1596
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1600
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1604
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1608
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1612
		{
			psqVAL.str = ast.Cp850Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1616
		{
			psqVAL.str = ast.Cp852Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1620
		{
			psqVAL.str = ast.Cp866Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1624
		{
			psqVAL.str = ast.Cp932Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1628
		{
			psqVAL.str = ast.Dec8Str
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1632
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1636
		{
			psqVAL.str = ast.EuckrStr
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1640
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1644
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1648
		{
			psqVAL.str = ast.GbkStr
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1652
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1656
		{
			psqVAL.str = ast.GreekStr
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1660
		{
			psqVAL.str = ast.HebrewStr
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1664
		{
			psqVAL.str = ast.Hp8Str
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1668
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1672
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1676
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1680
		{
			psqVAL.str = ast.Latin1Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1684
		{
			psqVAL.str = ast.Latin2Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1688
		{
			psqVAL.str = ast.Latin5Str
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1692
		{
			psqVAL.str = ast.Latin7Str
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1696
		{
			psqVAL.str = ast.MacceStr
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1700
		{
			psqVAL.str = ast.MacromanStr
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1704
		{
			psqVAL.str = ast.SjisStr
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1708
		{
			psqVAL.str = ast.Swe7Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1712
		{
			psqVAL.str = ast.Tis620Str
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1716
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1720
		{
			psqVAL.str = ast.UjisStr
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1724
		{
			psqVAL.str = ast.Utf16Str
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1728
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1732
		{
			psqVAL.str = ast.Utf32Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1736
		{
			psqVAL.str = ast.Utf8Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1740
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1744
		{
			psqVAL.str = ast.Utf8Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1754
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1758
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1762
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1768
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1772
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1776
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1782
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1786
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1793
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1797
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1801
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1805
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 280:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1811
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 284:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1822
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1827
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1833
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1837
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1841
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1845
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1849
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1853
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1857
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1861
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1865
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 295:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1871
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 296:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1877
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 297:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1883
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 298:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1889
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 299:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1895
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 300:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1903
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1907
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1911
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1915
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 304:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1919
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 305:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1925
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 306:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1929
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 307:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1935
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1939
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1943
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1947
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 311:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1951
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1955
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1959
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1963
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 315:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1967
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1971
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 317:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1975
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 318:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1979
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 319:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1983
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 320:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1988
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1994
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1998
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2002
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2006
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2010
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2014
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2018
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2022
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2028
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 330:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2033
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 331:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2038
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 332:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2042
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 333:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2047
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2052
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 335:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2057
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2061
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2065
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 338:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2070
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 339:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2074
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 340:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2079
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2083
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2087
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 343:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2091
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 344:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2095
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2100
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 346:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2105
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2110
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 348:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2115
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 349:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2121
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 350:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2125
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 351:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2130
		{
			psqVAL.str = ""
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2134
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 353:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2138
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 354:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2145
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2150
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2154
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 357:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2160
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 358:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2164
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 359:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2170
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2174
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2178
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2182
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2186
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 364:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2192
		{
			psqVAL.str = ""
		}
	case 365:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2196
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 366:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2202
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2206
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2210
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2214
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2218
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 371:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2223
		{
			psqVAL.str = ""
		}
	case 372:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2227
		{
			psqVAL.str = psqDollar[2].str
		}
	case 373:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2233
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 374:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2237
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2241
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2248
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 377:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2252
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 378:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2257
		{
			psqVAL.str = "key"
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2261
		{
			psqVAL.str = psqDollar[1].str
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2267
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2271
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 382:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2276
		{
			psqVAL.str = ""
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2280
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 384:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2286
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 385:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2290
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 386:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2296
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2300
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2306
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2310
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2316
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2320
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2326
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2332
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2336
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2340
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2344
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2348
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2353
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2357
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2363
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2369
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2375
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2379
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2383
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2388
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2392
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2398
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2404
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2410
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2414
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2418
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2422
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2426
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 414:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2431
		{
			psqVAL.str = ""
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2435
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2439
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 417:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2445
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2449
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2454
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2458
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2463
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2467
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2473
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2477
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2481
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 426:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2487
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2491
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 428:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2497
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2501
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2505
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2509
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2513
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2517
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2521
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2525
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2529
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2533
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2537
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2541
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2545
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2549
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2553
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2558
		{
			psqVAL.str = ""
		}
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2562
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 445:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2566
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2585
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2589
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 457:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2593
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 458:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2598
		{
			psqVAL.str = ""
		}
	case 460:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2604
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2608
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2613
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2617
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2622
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2626
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 466:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2630
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 467:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2634
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 468:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2638
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 469:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2642
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2648
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 471:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2652
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 472:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2656
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 473:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2662
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2666
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2670
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2674
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 477:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2678
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2682
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2686
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2690
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2694
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2698
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2703
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2708
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2712
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2716
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2720
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2724
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2728
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2732
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2736
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2740
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2744
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2748
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2752
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2756
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2760
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2764
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2768
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2772
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2776
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2780
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2786
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2790
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2796
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2800
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2804
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2808
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2812
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2816
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2820
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2824
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2828
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2832
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2838
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2844
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Algorithm: psqDollar[3].str, Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2854
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2861
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2873
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2883
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2887
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2891
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2904
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2914
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2918
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:2931
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2937
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2943
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2947
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 530:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2953
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2957
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2963
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2969
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2975
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2981
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2987
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2991
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2995
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2999
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3005
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3011
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3017
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3021
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3025
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3031
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3037
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3041
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 548:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3047
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3051
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, psqDollar[7].alterOptionsUnion()...)}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}}, psqDollar[7].alterOptionsUnion()...)}
			}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3060
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3064
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3070
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3074
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3079
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3085
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3089
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3093
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3097
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3101
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3105
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3109
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3113
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3117
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3121
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3125
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3129
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3133
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3137
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3141
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3145
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3149
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3153
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3157
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3161
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3165
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3169
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3173
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3177
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3181
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3185
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3189
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3193
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3197
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3201
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3205
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3209
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3216
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3220
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3224
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3228
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3232
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3236
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3240
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3244
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 595:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3250
		{
			psqVAL.str = ""
		}
	case 596:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3254
		{
			psqVAL.str = "extended "
		}
	case 597:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3260
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3264
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 599:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3270
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 600:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3274
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 601:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3280
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 602:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3284
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 603:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3288
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 604:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3294
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3298
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3302
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 607:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3308
		{
			psqVAL.empty = struct{}{}
		}
	case 608:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3312
		{
			psqVAL.empty = struct{}{}
		}
	case 609:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3316
		{
			psqVAL.empty = struct{}{}
		}
	case 610:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3322
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 611:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3326
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 612:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3332
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3336
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3340
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3346
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3350
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3356
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3362
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3366
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 620:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3371
		{
			psqVAL.empty = struct{}{}
		}
	case 621:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3373
		{
			psqVAL.empty = struct{}{}
		}
	case 622:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3376
		{
			psqVAL.empty = struct{}{}
		}
	case 623:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3378
		{
			psqVAL.empty = struct{}{}
		}
	case 624:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3383
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3389
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3394
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 627:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3398
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3402
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3406
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3410
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 631:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3414
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 632:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3420
		{
			psqVAL.str = psqDollar[1].str
		}
	case 633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3424
		{
			psqVAL.str = psqDollar[1].str
		}
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3428
		{
			psqVAL.str = psqDollar[1].str
		}
	case 635:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3434
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3438
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3442
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 638:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3446
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 639:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3451
		{
			psqVAL.str = ""
		}
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3455
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 641:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3459
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 642:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3465
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3469
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3475
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3479
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3485
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3491
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 648:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3495
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 649:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3501
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3507
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3511
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 652:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3515
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3519
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3525
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3531
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3535
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3539
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3543
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3547
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3551
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 661:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3557
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 662:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3561
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 663:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3567
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 664:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3571
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 665:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3575
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3579
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 667:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3583
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 668:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3587
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 669:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3591
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 670:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3595
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3599
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3603
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 673:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3607
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 674:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3612
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3616
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3620
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 677:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3625
		{
			psqVAL.str = ""
		}
	case 678:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3629
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 679:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3634
		{
			setAllowComments(psqlex, true)
		}
	case 680:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3638
		{
			setAllowComments(psqlex, false)
		}
	case 681:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CommentOnSchema
//line psql.y:3644
		{
			psqLOCAL = &ast.CommentOnSchema{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Schema: psqDollar[4].schemaName.Name, Value: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 682:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3650
		{
			setAllowComments(psqlex, true)
		}
	case 683:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3654
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 684:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3660
		{
			psqVAL.strs = nil
		}
	case 685:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3664
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 686:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3670
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 687:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3674
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 688:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3678
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3683
		{
			psqVAL.str = ""
		}
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3687
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 691:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3691
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 692:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3696
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3700
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 694:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3704
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 695:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3710
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 696:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3714
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3726
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3731
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3735
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 700:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3741
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 701:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3745
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 702:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3750
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 703:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3754
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 704:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3759
		{
			psqVAL.strs = nil
		}
	case 705:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3763
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 706:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3767
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 707:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3771
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 708:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3775
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3781
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 710:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3785
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 711:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3789
		{
			psqVAL.str = ast.DistinctStr
		}
	case 712:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3793
		{
			psqVAL.str = ast.DistinctStr
		}
	case 713:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3797
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3801
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 715:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3805
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 716:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3811
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 717:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3815
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 718:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3821
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 719:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3825
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 720:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3829
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 721:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3833
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 722:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3838
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 723:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3842
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 724:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3846
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 726:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3853
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 727:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3858
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 728:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3862
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 729:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3868
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 730:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3874
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 731:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3878
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 734:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3888
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3892
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3896
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 737:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3900
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 738:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3906
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3910
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:3916
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 741:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3921
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 742:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3925
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 743:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3931
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 744:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3935
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 745:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3941
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 746:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3945
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 747:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3951
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 748:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3955
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 749:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3959
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 750:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3963
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 751:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3976
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 752:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3980
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 753:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3984
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 754:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3988
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 755:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3994
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 756:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3996
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 757:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4000
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 758:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4002
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 759:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4006
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 760:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4008
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 761:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4012
		{
			psqVAL.schemaName = ast.SchemaName{Name: psqDollar[2].schemaIdent}
		}
	case 762:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4017
		{
			psqVAL.empty = struct{}{}
		}
	case 763:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4019
		{
			psqVAL.empty = struct{}{}
		}
	case 764:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4022
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 765:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4026
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 766:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4030
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 768:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4037
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 769:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4043
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4047
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4051
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4057
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 773:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4063
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4067
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 775:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4071
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4075
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 777:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4081
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 778:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4085
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 779:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4095
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 780:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4099
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 781:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4105
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 782:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4109
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 783:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4115
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 784:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4120
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 785:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4124
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4130
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 787:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4134
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 788:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4140
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4144
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 790:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4148
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 791:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4152
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 792:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4157
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4161
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4165
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4169
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 796:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4175
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4179
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4186
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4190
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4194
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 801:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4198
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 802:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4202
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4206
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4213
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4217
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4221
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4225
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4231
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4235
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4239
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4243
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4247
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4251
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4255
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4259
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4263
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4267
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4271
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4275
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4281
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4285
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4289
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4293
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4297
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4301
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4305
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4309
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4313
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4317
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4321
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4325
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4329
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4335
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4339
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4343
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4347
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4351
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4355
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4359
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4363
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4367
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4371
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4375
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4379
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4383
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4387
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4391
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4395
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4399
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4403
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4407
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4415
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4419
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4427
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4431
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4437
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4441
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4445
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4451
		{
			psqVAL.str = ""
		}
	case 860:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4455
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 861:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4461
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4465
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4472
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4476
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4480
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4484
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4490
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4494
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4498
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4502
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4506
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4510
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4514
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4520
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4524
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4528
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4535
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4541
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4545
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 880:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4555
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4559
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4563
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4567
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4577
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4581
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4585
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4589
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4593
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4597
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4601
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4605
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4609
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4613
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4624
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4628
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4634
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4638
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4643
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4647
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4651
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4655
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4659
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4663
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4667
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4671
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4675
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4679
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4683
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4687
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4691
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4695
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4699
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4703
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4707
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4711
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4715
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4719
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4723
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4727
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4731
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4735
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4739
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4743
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4747
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4751
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4755
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4759
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4763
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4767
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4771
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4775
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4779
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4783
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4787
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4791
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4795
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4799
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4803
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4807
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4811
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4815
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4820
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4824
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4829
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 945:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4833
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 946:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4839
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4843
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 948:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4849
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 949:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4853
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 950:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4859
		{
		}
	case 951:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4861
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4865
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4869
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4873
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4877
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4881
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4885
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4889
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4893
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4897
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4901
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4907
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4911
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4915
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4919
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4923
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4927
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4931
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4935
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4939
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4949
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4953
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4957
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4968
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4972
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4976
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4980
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4984
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4990
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4994
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 983:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4998
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 984:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5002
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5006
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 986:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5012
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 987:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5016
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 988:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5020
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 989:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5026
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5032
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5036
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5040
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5044
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5048
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5054
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5058
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5062
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5066
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5070
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5074
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5078
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5082
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5086
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5090
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5096
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1006:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5100
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5105
		{
			psqVAL.str = string("")
		}
	case 1008:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5109
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1009:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5115
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5119
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1011:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5125
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5130
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5134
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1014:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5140
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5144
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5148
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5154
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5163
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5169
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5173
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5178
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5182
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1023:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5187
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5191
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5197
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5203
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5207
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1028:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5213
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5218
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5222
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5226
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5231
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5235
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5241
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5245
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5249
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5254
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5258
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5262
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5266
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5270
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5277
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5281
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5285
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5289
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 1046:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5295
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1047:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5299
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1048:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5303
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1049:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5307
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1050:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5312
		{
			psqVAL.str = ""
		}
	case 1051:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5316
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1052:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5320
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1053:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5324
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1054:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5329
		{
			psqVAL.str = ""
		}
	case 1055:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5333
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1056:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5339
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1057:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5343
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1058:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5348
		{
			psqVAL.str = ""
		}
	case 1059:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5352
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1060:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5357
		{
			psqVAL.str = "cascaded"
		}
	case 1061:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5361
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1062:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5365
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1063:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5370
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1064:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5374
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5380
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5386
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5392
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5401
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1069:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5405
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1070:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5410
		{
			psqVAL.str = ""
		}
	case 1071:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5414
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1072:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5420
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5424
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5430
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5443
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5447
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1077:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5451
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1078:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5455
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1079:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5459
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1080:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5465
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5469
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1082:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5473
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1083:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5477
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1084:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5482
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1085:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5486
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1086:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5492
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1087:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5496
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1088:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5502
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1089:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5506
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5512
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5517
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5527
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1093:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5531
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1094:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5537
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5543
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1096:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5547
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1097:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5553
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5557
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1099:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5561
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1100:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5565
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5569
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5577
		{
			psqVAL.str = "charset"
		}
	case 1106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5587
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5591
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5595
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1111:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5604
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1112:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5606
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5609
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1114:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5611
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1115:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5614
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1116:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5616
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1117:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5619
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5621
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1119:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5624
		{
			psqVAL.empty = struct{}{}
		}
	case 1120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5626
		{
			psqVAL.empty = struct{}{}
		}
	case 1121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5628
		{
			psqVAL.empty = struct{}{}
		}
	case 1122:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5632
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1123:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5637
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5641
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1125:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5646
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5648
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1127:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5652
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1128:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5658
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1129:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5662
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1130:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5666
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1132:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5673
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1133:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5679
		{
			psqVAL.schemaIdent = ast.NewSchemaIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1134:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5685
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1135:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5689
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1136:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5693
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1137:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5699
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1138:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5703
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1140:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5710
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1652:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6255
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1653:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6264
		{
			decNesting(psqlex)
		}
	case 1654:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6269
		{
			skipToEnd(psqlex)
		}
	case 1655:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6274
		{
			skipToEnd(psqlex)
		}
	case 1656:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6278
		{
			skipToEnd(psqlex)
		}
	case 1657:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6282
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
