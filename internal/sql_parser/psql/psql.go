// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:19
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:19

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const ARRAY_MAX_CARDINALITY = 57642
const CHARACTER_SET_CATALOG = 57643
const COMMAND_FUNCTION_CODE = 57644
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57645
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57646
const DATETIME_INTERVAL_CODE = 57647
const DATETIME_INTERVAL_PRECISION = 57648
const DYNAMIC_FUNCTION_CODE = 57649
const END_EXEC = 57650
const PARAMETER_ORDINAL_POSITION = 57651
const PARAMETER_SPECIFIC_CATALOG = 57652
const PARAMETER_SPECIFIC_NAME = 57653
const PARAMETER_SPECIFIC_SCHEMA = 57654
const RETURNED_OCTET_LENGTH = 57655
const TRANSACTIONS_COMMITTED = 57656
const TRANSACTIONS_ROLLED_BACK = 57657
const USER_DEFINED_TYPE_CATALOG = 57658
const USER_DEFINED_TYPE_CODE = 57659
const USER_DEFINED_TYPE_NAME = 57660
const USER_DEFINED_TYPE_SCHEMA = 57661
const VALUES = 57662
const LAST_INSERT_ID = 57663
const NEXT = 57664
const VALUE = 57665
const SHARE = 57666
const MODE = 57667
const SQL_NO_CACHE = 57668
const SQL_CACHE = 57669
const SQL_CALC_FOUND_ROWS = 57670
const JOIN = 57671
const STRAIGHT_JOIN = 57672
const LEFT = 57673
const RIGHT = 57674
const INNER = 57675
const OUTER = 57676
const CROSS = 57677
const NATURAL = 57678
const USE = 57679
const FORCE = 57680
const ON = 57681
const USING = 57682
const INPLACE = 57683
const COPY = 57684
const INSTANT = 57685
const NONE = 57686
const SHARED = 57687
const EXCLUSIVE = 57688
const SUBQUERY_AS_EXPR = 57689
const ID = 57690
const AT_ID = 57691
const AT_AT_ID = 57692
const HEX = 57693
const STRING = 57694
const NCHAR_STRING = 57695
const INTEGRAL = 57696
const FLOAT = 57697
const DECIMAL = 57698
const HEXNUM = 57699
const VALUE_ARG = 57700
const LIST_ARG = 57701
const COMMENT_KEYWORD = 57702
const BIT_LITERAL = 57703
const COMPRESSION = 57704
const JSON_PRETTY = 57705
const JSON_STORAGE_SIZE = 57706
const JSON_STORAGE_FREE = 57707
const JSON_CONTAINS = 57708
const JSON_CONTAINS_PATH = 57709
const JSON_EXTRACT = 57710
const JSON_KEYS = 57711
const JSON_OVERLAPS = 57712
const JSON_SEARCH = 57713
const JSON_VALUE = 57714
const EXTRACT = 57715
const NULL = 57716
const TRUE = 57717
const FALSE = 57718
const OFF = 57719
const DISCARD = 57720
const IMPORT = 57721
const ENABLE = 57722
const DISABLE = 57723
const TABLESPACE = 57724
const VIRTUAL = 57725
const STORED = 57726
const BOTH = 57727
const LEADING = 57728
const TRAILING = 57729
const EMPTY_FROM_CLAUSE = 57730
const LOWER_THAN_CHARSET = 57731
const CHARSET = 57732
const UNIQUE = 57733
const KEY = 57734
const EXPRESSION_PREC_SETTER = 57735
const OR = 57736
const AND = 57737
const NOT = 57738
const BETWEEN = 57739
const CASE = 57740
const WHEN = 57741
const THEN = 57742
const ELSE = 57743
const END = 57744
const LE = 57745
const GE = 57746
const NE = 57747
const NULL_SAFE_EQUAL = 57748
const IS = 57749
const LIKE = 57750
const REGEXP = 57751
const IN = 57752
const SHIFT_LEFT = 57753
const SHIFT_RIGHT = 57754
const DIV = 57755
const MOD = 57756
const UNARY = 57757
const COLLATE = 57758
const BINARY = 57759
const UNDERSCORE_ARMSCII8 = 57760
const UNDERSCORE_ASCII = 57761
const UNDERSCORE_BIG5 = 57762
const UNDERSCORE_BINARY = 57763
const UNDERSCORE_CP1250 = 57764
const UNDERSCORE_CP1251 = 57765
const UNDERSCORE_CP1256 = 57766
const UNDERSCORE_CP1257 = 57767
const UNDERSCORE_CP850 = 57768
const UNDERSCORE_CP852 = 57769
const UNDERSCORE_CP866 = 57770
const UNDERSCORE_CP932 = 57771
const UNDERSCORE_DEC8 = 57772
const UNDERSCORE_EUCJPMS = 57773
const UNDERSCORE_EUCKR = 57774
const UNDERSCORE_GB18030 = 57775
const UNDERSCORE_GB2312 = 57776
const UNDERSCORE_GBK = 57777
const UNDERSCORE_GEOSTD8 = 57778
const UNDERSCORE_GREEK = 57779
const UNDERSCORE_HEBREW = 57780
const UNDERSCORE_HP8 = 57781
const UNDERSCORE_KEYBCS2 = 57782
const UNDERSCORE_KOI8R = 57783
const UNDERSCORE_KOI8U = 57784
const UNDERSCORE_LATIN1 = 57785
const UNDERSCORE_LATIN2 = 57786
const UNDERSCORE_LATIN5 = 57787
const UNDERSCORE_LATIN7 = 57788
const UNDERSCORE_MACCE = 57789
const UNDERSCORE_MACROMAN = 57790
const UNDERSCORE_SJIS = 57791
const UNDERSCORE_SWE7 = 57792
const UNDERSCORE_TIS620 = 57793
const UNDERSCORE_UCS2 = 57794
const UNDERSCORE_UJIS = 57795
const UNDERSCORE_UTF16 = 57796
const UNDERSCORE_UTF16LE = 57797
const UNDERSCORE_UTF32 = 57798
const UNDERSCORE_UTF8 = 57799
const UNDERSCORE_UTF8MB4 = 57800
const UNDERSCORE_UTF8MB3 = 57801
const INTERVAL = 57802
const JSON_EXTRACT_OP = 57803
const JSON_UNQUOTE_EXTRACT_OP = 57804
const CREATE = 57805
const ALTER = 57806
const DROP = 57807
const RENAME = 57808
const ANALYZE = 57809
const ANALYSE = 57810
const ADD = 57811
const FLUSH = 57812
const CHANGE = 57813
const MODIFY = 57814
const DEALLOCATE = 57815
const REVERT = 57816
const SCHEMA = 57817
const TABLE = 57818
const INDEX = 57819
const VIEW = 57820
const TO = 57821
const IGNORE = 57822
const IF = 57823
const PRIMARY = 57824
const COLUMN = 57825
const SPATIAL = 57826
const FULLTEXT = 57827
const KEY_BLOCK_SIZE = 57828
const CHECK = 57829
const INDEXES = 57830
const ACTION = 57831
const CASCADE = 57832
const CONSTRAINT = 57833
const FOREIGN = 57834
const NO = 57835
const REFERENCES = 57836
const RESTRICT = 57837
const SHOW = 57838
const DESCRIBE = 57839
const EXPLAIN = 57840
const DATE = 57841
const ESCAPE = 57842
const REPAIR = 57843
const OPTIMIZE = 57844
const TRUNCATE = 57845
const COALESCE = 57846
const EXCHANGE = 57847
const REBUILD = 57848
const PARTITIONING = 57849
const REMOVE = 57850
const PREPARE = 57851
const EXECUTE = 57852
const MAXVALUE = 57853
const PARTITION = 57854
const REORGANIZE = 57855
const LESS = 57856
const THAN = 57857
const PROCEDURE = 57858
const TRIGGER = 57859
const VINDEX = 57860
const VINDEXES = 57861
const DIRECTORY = 57862
const NAME = 57863
const UPGRADE = 57864
const STATUS = 57865
const VARIABLES = 57866
const WARNINGS = 57867
const CASCADED = 57868
const DEFINER = 57869
const OPTION = 57870
const SQL = 57871
const UNDEFINED = 57872
const SEQUENCE = 57873
const MERGE = 57874
const TEMPORARY = 57875
const TEMPTABLE = 57876
const INVOKER = 57877
const SECURITY = 57878
const FIRST = 57879
const AFTER = 57880
const LAST = 57881
const CANCEL = 57882
const RETRY = 57883
const COMPLETE = 57884
const CLEANUP = 57885
const THROTTLE = 57886
const UNTHROTTLE = 57887
const EXPIRE = 57888
const RATIO = 57889
const BEGIN = 57890
const START = 57891
const TRANSACTION = 57892
const COMMIT = 57893
const ROLLBACK = 57894
const SAVEPOINT = 57895
const RELEASE = 57896
const WORK = 57897
const BIT = 57898
const TINYINT = 57899
const SMALLINT = 57900
const MEDIUMINT = 57901
const INT = 57902
const INTEGER = 57903
const BIGINT = 57904
const INTNUM = 57905
const REAL = 57906
const DOUBLE = 57907
const FLOAT_TYPE = 57908
const DECIMAL_TYPE = 57909
const NUMERIC = 57910
const TIME = 57911
const TIMESTAMP = 57912
const DATETIME = 57913
const YEAR = 57914
const CHAR = 57915
const VARCHAR = 57916
const BOOL = 57917
const CHARACTER = 57918
const VARBINARY = 57919
const NCHAR = 57920
const TEXT = 57921
const TINYTEXT = 57922
const MEDIUMTEXT = 57923
const LONGTEXT = 57924
const BLOB = 57925
const TINYBLOB = 57926
const MEDIUMBLOB = 57927
const LONGBLOB = 57928
const JSON = 57929
const JSON_SCHEMA_VALID = 57930
const JSON_SCHEMA_VALIDATION_REPORT = 57931
const ENUM = 57932
const GEOMETRY = 57933
const POINT = 57934
const LINESTRING = 57935
const POLYGON = 57936
const GEOMETRYCOLLECTION = 57937
const MULTIPOINT = 57938
const MULTILINESTRING = 57939
const MULTIPOLYGON = 57940
const ASCII = 57941
const UNICODE = 57942
const NULLX = 57943
const AUTO_INCREMENT = 57944
const APPROXNUM = 57945
const SIGNED = 57946
const UNSIGNED = 57947
const ZEROFILL = 57948
const CODE = 57949
const COLLATION = 57950
const COLUMNS = 57951
const DATABASES = 57952
const ENGINES = 57953
const EVENT = 57954
const EXTENDED = 57955
const FIELDS = 57956
const FULL = 57957
const FUNCTION = 57958
const GTID_EXECUTED = 57959
const KEYSPACES = 57960
const OPEN = 57961
const PLUGINS = 57962
const PRIVILEGES = 57963
const PROCESSLIST = 57964
const SCHEMAS = 57965
const TABLES = 57966
const TRIGGERS = 57967
const USER = 57968
const VGTID_EXECUTED = 57969
const VSCHEMA = 57970
const NAMES = 57971
const GLOBAL = 57972
const SESSION = 57973
const ISOLATION = 57974
const LEVEL = 57975
const READ = 57976
const WRITE = 57977
const ONLY = 57978
const REPEATABLE = 57979
const COMMITTED = 57980
const UNCOMMITTED = 57981
const SERIALIZABLE = 57982
const CURRENT_TIMESTAMP = 57983
const DATABASE = 57984
const CURRENT_DATE = 57985
const NOW = 57986
const CURRENT_TIME = 57987
const LOCALTIME = 57988
const LOCALTIMESTAMP = 57989
const CURRENT_USER = 57990
const UTC_DATE = 57991
const UTC_TIME = 57992
const UTC_TIMESTAMP = 57993
const DAY = 57994
const DAY_HOUR = 57995
const DAY_MICROSECOND = 57996
const DAY_MINUTE = 57997
const DAY_SECOND = 57998
const HOUR = 57999
const HOUR_MICROSECOND = 58000
const HOUR_MINUTE = 58001
const HOUR_SECOND = 58002
const MICROSECOND = 58003
const MINUTE = 58004
const MINUTE_MICROSECOND = 58005
const MINUTE_SECOND = 58006
const MONTH = 58007
const QUARTER = 58008
const SECOND = 58009
const SECOND_MICROSECOND = 58010
const YEAR_MONTH = 58011
const WEEK = 58012
const REPLACE = 58013
const CONVERT = 58014
const CAST = 58015
const SUBSTR = 58016
const SUBSTRING = 58017
const GROUP_CONCAT = 58018
const SEPARATOR = 58019
const TIMESTAMPADD = 58020
const TIMESTAMPDIFF = 58021
const WEIGHT_STRING = 58022
const LTRIM = 58023
const RTRIM = 58024
const TRIM = 58025
const JSON_ARRAY = 58026
const JSON_OBJECT = 58027
const JSON_QUOTE = 58028
const JSON_DEPTH = 58029
const JSON_TYPE = 58030
const JSON_LENGTH = 58031
const JSON_VALID = 58032
const JSON_ARRAY_APPEND = 58033
const JSON_ARRAY_INSERT = 58034
const JSON_INSERT = 58035
const JSON_MERGE = 58036
const JSON_MERGE_PATCH = 58037
const JSON_MERGE_PRESERVE = 58038
const JSON_REMOVE = 58039
const JSON_REPLACE = 58040
const JSON_SET = 58041
const JSON_UNQUOTE = 58042
const MATCH = 58043
const AGAINST = 58044
const BOOLEAN = 58045
const LANGUAGE = 58046
const WITH = 58047
const QUERY = 58048
const EXPANSION = 58049
const WITHOUT = 58050
const VALIDATION = 58051
const UNUSED = 58052
const ARRAY = 58053
const BYTE = 58054
const CUME_DIST = 58055
const DESCRIPTION = 58056
const DENSE_RANK = 58057
const EMPTY = 58058
const EXCEPT = 58059
const FIRST_VALUE = 58060
const GROUPING = 58061
const GROUPS = 58062
const JSON_TABLE = 58063
const LAG = 58064
const LAST_VALUE = 58065
const LATERAL = 58066
const LEAD = 58067
const NTH_VALUE = 58068
const NTILE = 58069
const OF = 58070
const OVER = 58071
const PERCENT_RANK = 58072
const RANK = 58073
const RECURSIVE = 58074
const ROW_NUMBER = 58075
const SYSTEM = 58076
const WINDOW = 58077
const ACTIVE = 58078
const ADMIN = 58079
const AUTOEXTEND_SIZE = 58080
const BUCKETS = 58081
const CLONE = 58082
const COLUMN_FORMAT = 58083
const COMPONENT = 58084
const DEFINITION = 58085
const ENFORCED = 58086
const ENGINE_ATTRIBUTE = 58087
const EXCLUDE = 58088
const FOLLOWING = 58089
const GEOMCOLLECTION = 58090
const GET_MASTER_PUBLIC_KEY = 58091
const HISTOGRAM = 58092
const HISTORY = 58093
const INACTIVE = 58094
const INVISIBLE = 58095
const LOCKED = 58096
const MASTER_COMPRESSION_ALGORITHMS = 58097
const MASTER_PUBLIC_KEY_PATH = 58098
const MASTER_TLS_CIPHERSUITES = 58099
const MASTER_ZSTD_COMPRESSION_LEVEL = 58100
const NESTED = 58101
const NETWORK_NAMESPACE = 58102
const NOWAIT = 58103
const NULLS = 58104
const OJ = 58105
const OLD = 58106
const OPTIONAL = 58107
const ORDINALITY = 58108
const ORGANIZATION = 58109
const OTHERS = 58110
const PARTIAL = 58111
const PATH = 58112
const PERSIST = 58113
const PERSIST_ONLY = 58114
const PRECEDING = 58115
const PRIVILEGE_CHECKS_USER = 58116
const PROCESS = 58117
const RANDOM = 58118
const REFERENCE = 58119
const REQUIRE_ROW_FORMAT = 58120
const RESOURCE = 58121
const RESPECT = 58122
const RESTART = 58123
const RETAIN = 58124
const REUSE = 58125
const ROLE = 58126
const SECONDARY = 58127
const SECONDARY_ENGINE = 58128
const SECONDARY_ENGINE_ATTRIBUTE = 58129
const SECONDARY_LOAD = 58130
const SECONDARY_UNLOAD = 58131
const SIMPLE = 58132
const SKIP = 58133
const SRID = 58134
const THREAD_PRIORITY = 58135
const TIES = 58136
const UNBOUNDED = 58137
const VCPU = 58138
const VISIBLE = 58139
const RETURNING = 58140
const FORMAT = 58141
const TREE = 58142
const TRADITIONAL = 58143
const LOCAL = 58144
const LOW_PRIORITY = 58145
const NO_WRITE_TO_BINLOG = 58146
const LOGS = 58147
const ERROR = 58148
const GENERAL = 58149
const HOSTS = 58150
const OPTIMIZER_COSTS = 58151
const USER_RESOURCES = 58152
const SLOW = 58153
const CHANNEL = 58154
const RELAY = 58155
const EXPORT = 58156
const AVG_ROW_LENGTH = 58157
const CONNECTION = 58158
const CHECKSUM = 58159
const DELAY_KEY_WRITE = 58160
const ENCRYPTION = 58161
const INSERT_METHOD = 58162
const MAX_ROWS = 58163
const MIN_ROWS = 58164
const PACK_KEYS = 58165
const PASSWORD = 58166
const FIXED = 58167
const DYNAMIC = 58168
const COMPRESSED = 58169
const REDUNDANT = 58170
const COMPACT = 58171
const ROW_FORMAT = 58172
const STATS_AUTO_RECALC = 58173
const STATS_PERSISTENT = 58174
const STATS_SAMPLE_PAGES = 58175
const STORAGE = 58176
const MEMORY = 58177
const DISK = 58178

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	38, 682,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	1, 143,
	854, 143,
	-2, 151,
	-1, 50,
	1, 469,
	854, 469,
	-2, 151,
	-1, 59,
	35, 598,
	494, 598,
	505, 598,
	540, 610,
	541, 610,
	-2, 600,
	-1, 64,
	496, 623,
	-2, 621,
	-1, 118,
	493, 1100,
	-2, 115,
	-1, 120,
	1, 144,
	854, 144,
	-2, 151,
	-1, 133,
	393, 151,
	432, 151,
	593, 151,
	-2, 478,
	-1, 134,
	394, 375,
	499, 375,
	-2, 462,
	-1, 728,
	477, 1124,
	-2, 1117,
	-1, 729,
	477, 1125,
	-2, 1118,
	-1, 730,
	477, 1126,
	-2, 1119,
	-1, 741,
	348, 1303,
	477, 1303,
	478, 1303,
	479, 1303,
	-2, 274,
	-1, 742,
	348, 1344,
	477, 1344,
	478, 1344,
	479, 1344,
	-2, 273,
	-1, 743,
	348, 1555,
	477, 1555,
	478, 1555,
	479, 1555,
	-2, 275,
	-1, 804,
	322, 693,
	-2, 708,
	-1, 839,
	408, 1533,
	-2, 107,
	-1, 840,
	408, 1352,
	-2, 108,
	-1, 846,
	408, 1428,
	-2, 1094,
	-1, 989,
	504, 41,
	509, 41,
	-2, 386,
	-1, 1048,
	1, 520,
	854, 520,
	-2, 151,
	-1, 1247,
	477, 1555,
	-2, 277,
	-1, 1272,
	322, 694,
	-2, 713,
	-1, 1273,
	322, 695,
	-2, 714,
	-1, 1323,
	1, 425,
	854, 425,
	-2, 151,
	-1, 1406,
	504, 42,
	509, 42,
	-2, 387,
	-1, 1665,
	477, 1130,
	-2, 1121,
	-1, 1741,
	1, 1087,
	349, 1087,
	854, 1087,
	-2, 1450,
	-1, 1746,
	1, 426,
	854, 426,
	-2, 151,
	-1, 1752,
	348, 384,
	351, 384,
	352, 384,
	353, 384,
	-2, 1371,
	-1, 1753,
	348, 385,
	351, 385,
	352, 385,
	353, 385,
	-2, 1398,
	-1, 1755,
	25, 172,
	-2, 174,
	-1, 1979,
	349, 39,
	-2, 749,
	-1, 2029,
	340, 91,
	349, 91,
	-2, 768,
	-1, 2374,
	349, 39,
	-2, 750,
	-1, 2398,
	7, 53,
	18, 53,
	20, 53,
	350, 53,
	-2, 742,
	-1, 2588,
	22, 1431,
	32, 1431,
	433, 1431,
	516, 1431,
	573, 1431,
	574, 1431,
	575, 1431,
	576, 1431,
	577, 1431,
	578, 1431,
	579, 1431,
	581, 1431,
	582, 1431,
	583, 1431,
	584, 1431,
	585, 1431,
	586, 1431,
	587, 1431,
	588, 1431,
	589, 1431,
	590, 1431,
	591, 1431,
	592, 1431,
	594, 1431,
	596, 1431,
	597, 1431,
	598, 1431,
	599, 1431,
	600, 1431,
	601, 1431,
	602, 1431,
	603, 1431,
	604, 1431,
	607, 1431,
	608, 1431,
	609, 1431,
	610, 1431,
	611, 1431,
	612, 1431,
	613, 1431,
	614, 1431,
	615, 1431,
	720, 1431,
	-2, 539,
}

const psqPrivate = 57344

const psqLast = 49228

var psqAct = [...]int{
	728, 2460, 2640, 2461, 738, 2459, 2535, 2614, 2613, 1743,
	731, 2308, 2438, 2257, 2178, 2586, 2500, 2264, 1678, 1934,
	1998, 2543, 1326, 1252, 1102, 1698, 816, 3, 99, 2521,
	646, 1994, 2270, 650, 2001, 797, 722, 2142, 1287, 721,
	37, 732, 2177, 1764, 2023, 2389, 2176, 643, 719, 2002,
	1999, 2370, 1059, 720, 672, 170, 2297, 2125, 170, 1781,
	610, 170, 644, 1785, 2089, 952, 624, 1830, 170, 1802,
	2058, 1732, 844, 817, 642, 149, 170, 36, 1721, 2012,
	1274, 1720, 1996, 1970, 1565, 1412, 1659, 1524, 1635, 1576,
	170, 1819, 131, 1380, 1391, 638, 1787, 1704, 170, 1801,
	2063, 2031, 1315, 38, 655, 1293, 953, 1679, 799, 1723,
	1255, 98, 1184, 624, 1478, 1634, 624, 170, 624, 1588,
	801, 1121, 805, 1541, 959, 1411, 1799, 956, 1474, 990,
	1461, 960, 1778, 811, 986, 1314, 987, 841, 1312, 1765,
	819, 1299, 1040, 1100, 1483, 1404, 106, 1375, 1631, 123,
	1044, 1087, 92, 163, 1399, 129, 2105, 2104, 1844, 2418,
	806, 2133, 613, 2134, 2556, 831, 150, 2464, 1122, 1662,
	121, 2464, 122, 2557, 173, 174, 175, 125, 1122, 1675,
	1676, 1530, 2260, 173, 174, 175, 807, 1529, 108, 109,
	1528, 112, 1527, 1526, 118, 636, 825, 637, 830, 591,
	167, 979, 2570, 586, 1519, 132, 1966, 1793, 2096, 984,
	1448, 2358, 2617, 2596, 88, 124, 613, 1834, 809, 79,
	997, 94, 2647, 794, 795, 796, 2612, 2594, 804, 1011,
	1789, 1017, 100, 2627, 1832, 633, 2600, 2601, 2099, 1534,
	1023, 985, 1022, 1020, 2272, 2273, 2646, 2580, 2636, 613,
	2595, 838, 845, 81, 2557, 1880, 611, 833, 834, 101,
	2552, 1833, 2625, 81, 978, 2439, 83, 81, 2544, 981,
	977, 2579, 2551, 2141, 2591, 1131, 2342, 1390, 81, 1187,
	1859, 1052, 1053, 1460, 1858, 1131, 1316, 124, 1317, 1768,
	1024, 976, 2040, 975, 1967, 2039, 1738, 1739, 2041, 2253,
	800, 2132, 1714, 606, 1877, 634, 2254, 2255, 1737, 1066,
	1099, 1077, 798, 1055, 1067, 818, 604, 1082, 1083, 792,
	791, 2536, 1065, 2051, 1064, 1078, 1071, 163, 9, 1046,
	1041, 808, 80, 613, 8, 124, 2310, 972, 2086, 1094,
	613, 1096, 7, 964, 968, 1758, 1757, 971, 1677, 2271,
	970, 125, 622, 146, 613, 620, 601, 2061, 2062, 1191,
	2333, 2274, 614, 1518, 627, 609, 2618, 2331, 127, 2090,
	1820, 1848, 1025, 1127, 2109, 1462, 1120, 1047, 1442, 1093,
	1095, 1047, 2110, 1127, 2623, 973, 1852, 2619, 1080, 1081,
	1029, 1086, 2312, 1849, 1768, 1026, 1027, 1028, 1851, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1153, 1079,
	1072, 1084, 2568, 1261, 1165, 1098, 614, 1520, 1521, 1165,
	2311, 1085, 1443, 2274, 1444, 2644, 2542, 2431, 2505, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1162, 1161, 1163, 1164,
	1850, 1853, 957, 1878, 965, 1075, 974, 993, 592, 614,
	594, 967, 966, 616, 2648, 615, 597, 2603, 596, 599,
	607, 600, 957, 595, 2124, 605, 955, 957, 608, 1410,
	603, 617, 1766, 1767, 1002, 1091, 992, 1019, 2571, 1092,
	992, 1475, 1045, 1800, 1001, 832, 1281, 2121, 1839, 1097,
	2261, 1971, 1973, 1471, 1108, 2044, 974, 1039, 973, 2137,
	972, 1005, 2073, 999, 1892, 1090, 1847, 1388, 1387, 151,
	1386, 152, 1472, 2463, 2263, 1384, 590, 2463, 1043, 585,
	1046, 2477, 2117, 1829, 2405, 999, 2116, 2225, 2258, 1166,
	1167, 162, 163, 614, 2036, 1466, 1993, 1958, 1807, 1671,
	614, 1744, 1303, 1231, 1057, 2272, 2273, 2059, 1165, 1164,
	2252, 2259, 814, 1088, 614, 115, 125, 1126, 1123, 1124,
	1125, 1130, 1132, 1129, 1484, 1128, 999, 1126, 1123, 1124,
	1125, 1130, 1132, 1129, 1409, 1128, 1992, 1766, 1767, 2382,
	2546, 2219, 1878, 2265, 1546, 2053, 170, 1061, 170, 1792,
	1715, 170, 1469, 90, 1856, 1831, 1021, 1318, 1547, 1548,
	1545, 2127, 998, 90, 2161, 980, 2126, 90, 1118, 974,
	1589, 624, 1103, 624, 2075, 1589, 2143, 1908, 90, 1135,
	2599, 2421, 2127, 116, 998, 2420, 2378, 2126, 624, 624,
	992, 995, 996, 1824, 957, 1425, 1424, 1791, 989, 993,
	154, 1408, 618, 1009, 2622, 1062, 1136, 1068, 1069, 1070,
	2271, 1972, 1008, 1617, 1104, 1136, 2550, 1114, 144, 1884,
	1885, 1886, 2274, 2620, 2598, 998, 1153, 2136, 2649, 37,
	1012, 992, 2406, 2339, 612, 1014, 1463, 2621, 1464, 1015,
	1013, 1790, 1465, 151, 90, 152, 1136, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1162, 1161, 1163, 1164, 1544, 2145,
	2419, 141, 142, 140, 139, 162, 1157, 1158, 1159, 1160,
	1162, 1161, 1163, 1164, 1168, 1169, 1170, 1171, 1159, 1160,
	1162, 1161, 1163, 1164, 1176, 1136, 1179, 2291, 1796, 1536,
	1538, 1539, 2506, 1609, 1598, 1599, 1600, 1601, 1611, 1602,
	1603, 1604, 1616, 1612, 1605, 1606, 1613, 1614, 1615, 1607,
	1608, 1610, 1537, 1136, 1136, 1396, 1105, 1136, 745, 2304,
	2305, 2450, 1172, 1281, 2155, 2154, 2153, 2147, 2120, 2151,
	2262, 2146, 1245, 2144, 1593, 2425, 1705, 1706, 2149, 2412,
	1250, 1136, 173, 174, 175, 1107, 2413, 2148, 173, 174,
	175, 1923, 170, 2068, 1136, 624, 624, 1136, 1136, 2064,
	1894, 135, 143, 145, 2150, 2152, 134, 1904, 136, 137,
	1842, 170, 1481, 1446, 154, 1897, 1440, 1438, 1251, 173,
	174, 175, 1437, 2043, 1262, 1436, 2608, 1281, 624, 799,
	1267, 1458, 170, 1990, 2577, 1281, 1265, 624, 1264, 2313,
	1136, 1153, 1268, 624, 1990, 2565, 2071, 999, 801, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1162, 1161, 1163, 1164,
	1995, 841, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162,
	1161, 1163, 1164, 1990, 2562, 1266, 2558, 1281, 1754, 98,
	1251, 1136, 1136, 2354, 1281, 1136, 1990, 2433, 151, 2218,
	152, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1138, 1291,
	2642, 1256, 1133, 2643, 1074, 2641, 104, 1136, 2032, 2266,
	162, 1995, 173, 174, 175, 1076, 1813, 103, 2545, 102,
	1136, 2269, 173, 174, 175, 2008, 1811, 173, 174, 175,
	1051, 1809, 103, 95, 1136, 1133, 1281, 1054, 2220, 1136,
	97, 1928, 1281, 84, 96, 1990, 998, 2098, 1018, 2009,
	1269, 1189, 170, 1190, 1136, 1879, 1376, 1089, 1117, 2462,
	2267, 80, 2354, 2462, 1115, 2268, 1385, 89, 1485, 95,
	2416, 2417, 1116, 1828, 1392, 2203, 845, 89, 1736, 153,
	96, 89, 155, 156, 2280, 2281, 157, 158, 1060, 624,
	1406, 2097, 89, 159, 160, 161, 2280, 2279, 1415, 1308,
	1309, 1281, 1417, 1418, 1895, 624, 2009, 1281, 1928, 138,
	2223, 1281, 1423, 1263, 2650, 1426, 1427, 170, 1429, 154,
	1997, 1450, 1449, 1451, 1452, 1453, 1253, 101, 800, 1286,
	2218, 2514, 1281, 798, 1416, 1193, 1986, 1419, 624, 1134,
	2247, 1135, 147, 2032, 1422, 148, 1913, 1468, 1134, 1878,
	1135, 1895, 1281, 1473, 1403, 1912, 624, 1816, 170, 1155,
	1156, 1157, 1158, 1159, 1160, 1162, 1161, 1163, 1164, 1703,
	1420, 1136, 1285, 170, 1673, 1398, 1878, 2106, 1522, 1134,
	170, 1135, 1470, 1237, 1238, 1239, 1240, 1241, 1136, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 624, 2337,
	1281, 1310, 1943, 1281, 624, 624, 1379, 2091, 2087, 2088,
	1990, 1989, 1379, 1378, 1383, 1324, 1323, 1389, 1134, 983,
	1135, 170, 1413, 803, 1488, 982, 2163, 1281, 90, 2502,
	1480, 1492, 2492, 1494, 1495, 1496, 1497, 1405, 1401, 1400,
	1501, 1430, 1903, 1414, 2540, 1421, 1134, 1134, 1135, 1135,
	1134, 104, 1135, 153, 1136, 2480, 155, 156, 1288, 2423,
	157, 158, 103, 1136, 102, 1381, 624, 159, 160, 161,
	2118, 1573, 1573, 97, 1134, 2092, 1135, 1570, 1570, 1579,
	624, 1569, 1574, 1476, 1542, 1935, 1773, 1134, 1772, 1135,
	1134, 1134, 1135, 1135, 2009, 624, 624, 1549, 977, 1551,
	1457, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1550, 1540, 124, 1486, 1487, 1490, 976,
	1590, 975, 1393, 1394, 1395, 1136, 2400, 1290, 1407, 1491,
	1632, 1281, 1377, 1134, 2033, 1135, 1498, 1499, 1500, 117,
	2309, 1511, 2009, 2035, 2503, 2218, 1793, 1515, 1516, 1281,
	1136, 2633, 1543, 2066, 1136, 1686, 1663, 2631, 170, 1136,
	1136, 1281, 624, 1895, 2615, 2356, 1513, 1136, 1434, 1435,
	1899, 1136, 1136, 1439, 1134, 1134, 1135, 1135, 1134, 1898,
	1135, 2555, 1632, 1296, 2352, 2519, 170, 2390, 2391, 624,
	2393, 2290, 1688, 2289, 1689, 2288, 2076, 1281, 170, 2345,
	1134, 624, 1135, 1997, 1665, 170, 1863, 170, 2396, 170,
	170, 624, 2236, 1134, 624, 1135, 1136, 2237, 2234, 2395,
	1667, 1668, 2233, 2235, 98, 624, 1136, 1134, 1663, 1135,
	1136, 2232, 1134, 1716, 1135, 841, 1755, 2605, 841, 1136,
	1136, 2578, 98, 1575, 1700, 37, 1664, 1134, 1289, 1135,
	1581, 1582, 1692, 1719, 2224, 1694, 1136, 2469, 153, 2468,
	1136, 155, 156, 2207, 165, 157, 158, 2495, 120, 2033,
	969, 1895, 159, 160, 161, 1814, 1665, 790, 1878, 2602,
	624, 1552, 1769, 1770, 1771, 1313, 126, 1803, 1804, 1805,
	1748, 2276, 2049, 2069, 1808, 1810, 1812, 1730, 2238, 1747,
	2018, 2019, 1666, 624, 1296, 1669, 1670, 1683, 624, 1415,
	997, 105, 1415, 1007, 1415, 1283, 2344, 1585, 1711, 1696,
	624, 1006, 624, 2319, 2130, 1759, 1838, 1760, 1761, 1762,
	1763, 1751, 1586, 1952, 1782, 624, 624, 988, 1707, 166,
	824, 1693, 1709, 1774, 1775, 1776, 1777, 1735, 1788, 1734,
	845, 1106, 93, 845, 1431, 1432, 1433, 2095, 170, 1750,
	170, 1749, 95, 90, 1134, 125, 1135, 170, 1818, 97,
	1455, 170, 170, 96, 1454, 170, 1445, 170, 1795, 2216,
	2638, 1134, 2286, 1135, 170, 1835, 2014, 2017, 2018, 2019,
	2015, 170, 2016, 2020, 1281, 1866, 2390, 2391, 836, 1951,
	1153, 1891, 2494, 1783, 1779, 1780, 1837, 2437, 1950, 2275,
	730, 1794, 1836, 170, 1798, 2022, 1806, 1697, 624, 1840,
	1841, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1161,
	1163, 1164, 1822, 1783, 2371, 1821, 1825, 1048, 1042, 1869,
	1870, 1705, 1706, 1882, 1872, 1845, 102, 1134, 829, 1135,
	822, 823, 2526, 1873, 1823, 2525, 1134, 1826, 1135, 1827,
	2014, 2017, 2018, 2019, 2015, 172, 2016, 2020, 172, 2206,
	1949, 172, 104, 1000, 1003, 1004, 626, 2205, 172, 2474,
	2292, 1010, 1542, 103, 1295, 102, 172, 1279, 1275, 1542,
	2084, 1514, 1815, 821, 1888, 1948, 1890, 103, 104, 1947,
	172, 1862, 2473, 1276, 1946, 1945, 2377, 1995, 172, 103,
	1889, 1153, 1944, 1148, 2168, 1149, 1938, 1937, 1134, 1914,
	1135, 1152, 1684, 626, 1257, 1304, 626, 172, 626, 1150,
	1151, 1147, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162,
	1161, 1163, 1164, 1134, 1876, 1135, 1297, 1134, 2634, 1135,
	1543, 2635, 1134, 1134, 1135, 1135, 2475, 1543, 2635, 2634,
	1134, 1936, 1135, 2411, 1134, 1134, 1135, 1135, 813, 1887,
	2467, 1933, 110, 111, 170, 1932, 1893, 107, 39, 91,
	1, 170, 588, 2415, 1931, 1929, 2593, 624, 602, 1573,
	1674, 1254, 628, 624, 2616, 1570, 1964, 1279, 1275, 1976,
	793, 1925, 2589, 2590, 1447, 1924, 1441, 1907, 2440, 1134,
	1633, 1135, 1980, 1276, 2499, 1786, 104, 991, 624, 1134,
	133, 1135, 815, 1134, 1745, 1135, 170, 103, 1746, 102,
	170, 2573, 1134, 1134, 1135, 1135, 114, 1921, 97, 950,
	113, 958, 994, 1073, 1665, 2042, 1817, 2050, 2000, 1134,
	1756, 1135, 2003, 1134, 1905, 1135, 1330, 805, 1328, 1329,
	1327, 1332, 1331, 1915, 2357, 2025, 624, 2081, 1517, 621,
	2021, 168, 1319, 1467, 1298, 1987, 1016, 593, 2282, 1843,
	598, 1063, 1177, 1256, 1965, 1512, 1664, 2204, 1974, 2038,
	842, 835, 1685, 1978, 624, 806, 2005, 2566, 2047, 1292,
	170, 2472, 1988, 2024, 2052, 2054, 2376, 170, 1392, 1991,
	1906, 1587, 1724, 1535, 648, 647, 624, 2030, 645, 1981,
	1713, 807, 2045, 1139, 733, 1415, 1415, 1968, 1969, 1305,
	1955, 1956, 2013, 2034, 2011, 2010, 1864, 1731, 2060, 2037,
	2103, 2085, 2392, 2388, 2585, 1726, 1722, 2102, 170, 1985,
	170, 170, 170, 170, 170, 2046, 1788, 1984, 656, 649,
	641, 2408, 2299, 170, 170, 1855, 2119, 1857, 2048, 2108,
	1119, 1271, 1459, 635, 2065, 963, 1584, 2504, 1881, 170,
	2083, 2341, 1270, 2067, 1596, 1597, 67, 42, 1624, 629,
	1690, 1691, 1278, 2569, 1277, 2072, 1110, 32, 31, 30,
	624, 2101, 2082, 2077, 2078, 2079, 29, 24, 23, 1398,
	22, 21, 20, 26, 19, 18, 17, 2611, 2637, 119,
	54, 48, 46, 130, 128, 50, 45, 2100, 164, 1049,
	52, 49, 51, 43, 799, 4, 2156, 28, 1573, 27,
	1573, 2160, 16, 1573, 1570, 15, 1570, 14, 1573, 1570,
	2122, 13, 12, 11, 1570, 2139, 10, 6, 5, 624,
	35, 34, 33, 1113, 25, 2, 2138, 2179, 0, 2179,
	2093, 2094, 2179, 2191, 2192, 2193, 2194, 2179, 0, 0,
	0, 2184, 2181, 2198, 2157, 2140, 2185, 170, 0, 0,
	0, 624, 0, 0, 624, 0, 0, 1573, 0, 0,
	1272, 1273, 1278, 1570, 1277, 0, 0, 2212, 0, 0,
	170, 170, 170, 170, 170, 0, 2208, 2172, 2198, 0,
	2128, 2214, 170, 2129, 0, 0, 0, 170, 0, 2226,
	170, 2209, 170, 0, 0, 170, 170, 170, 0, 0,
	0, 0, 2000, 0, 2197, 0, 0, 0, 2246, 0,
	0, 0, 0, 2199, 0, 0, 0, 2200, 2201, 2202,
	2186, 2187, 2188, 2189, 2190, 0, 1268, 2025, 2210, 0,
	2284, 0, 0, 0, 170, 0, 2248, 170, 0, 2249,
	0, 2217, 0, 0, 0, 0, 0, 0, 624, 2228,
	2229, 2227, 2231, 624, 2230, 0, 172, 0, 172, 98,
	2239, 172, 0, 0, 2243, 2244, 0, 2250, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 2296, 0,
	2256, 626, 170, 626, 2294, 170, 2277, 2278, 0, 0,
	0, 0, 0, 0, 2283, 2320, 0, 0, 626, 626,
	0, 0, 0, 0, 0, 2301, 2307, 0, 0, 0,
	2300, 0, 0, 2293, 0, 2295, 0, 0, 0, 0,
	0, 1788, 0, 0, 0, 2306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2315, 2317, 2318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2351, 0, 0, 0, 0, 0,
	2323, 0, 0, 0, 624, 170, 0, 2329, 0, 0,
	1050, 2322, 1056, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 624, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2326, 2327, 0,
	2328, 0, 0, 2330, 0, 2332, 0, 2334, 170, 0,
	2383, 0, 2000, 2372, 2373, 0, 0, 2003, 2387, 2385,
	0, 2003, 37, 0, 0, 0, 2414, 0, 0, 2379,
	2381, 0, 0, 0, 0, 170, 2394, 0, 2401, 2397,
	2403, 2404, 0, 0, 0, 0, 0, 0, 0, 170,
	170, 170, 2402, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 626, 626, 0, 0, 2301,
	624, 624, 624, 624, 2300, 2409, 0, 2410, 2432, 0,
	0, 172, 0, 2424, 2427, 2426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 172, 0, 2435, 2436, 0, 626, 0, 0,
	0, 0, 0, 626, 0, 0, 0, 1573, 0, 1573,
	0, 0, 0, 1570, 0, 1570, 0, 0, 2449, 0,
	0, 2446, 2445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 2179, 0, 2179, 0,
	0, 0, 0, 0, 1397, 0, 2465, 2456, 0, 2455,
	0, 0, 0, 0, 0, 1573, 0, 125, 0, 146,
	0, 1570, 0, 0, 0, 2482, 799, 2476, 0, 2003,
	0, 0, 0, 2478, 0, 0, 0, 0, 0, 0,
	799, 0, 0, 0, 2484, 0, 0, 2483, 0, 0,
	624, 0, 2486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1307, 0, 0, 0,
	0, 2516, 172, 2517, 2501, 2498, 2496, 624, 0, 1573,
	0, 624, 624, 0, 0, 1570, 0, 37, 624, 2520,
	0, 624, 2609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 624, 0, 0, 2531, 0, 2530, 626,
	2527, 2528, 0, 624, 170, 2533, 2534, 0, 0, 2000,
	2537, 0, 0, 0, 0, 626, 0, 0, 2539, 0,
	0, 0, 2541, 0, 0, 0, 0, 172, 2547, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 624, 624, 626, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 2572, 2567, 170, 624, 626, 0, 172, 0,
	2501, 2574, 0, 2581, 0, 0, 1325, 0, 0, 0,
	2592, 0, 2584, 172, 2597, 0, 0, 0, 0, 2604,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 626, 624,
	2610, 0, 0, 0, 626, 626, 1573, 2624, 0, 0,
	2628, 2630, 1570, 2632, 2626, 0, 2629, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 2639, 0, 2645, 0,
	0, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 2653, 2654, 0, 2517, 2652, 1570, 0,
	0, 0, 2651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 1493, 626, 626, 0, 0, 0,
	0, 0, 0, 0, 144, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 152, 0, 0, 0, 1525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 140,
	139, 162, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 626, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 626, 163, 0, 0, 172, 0, 172, 0, 172,
	172, 626, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 626, 125, 171, 146, 0,
	171, 0, 0, 0, 0, 625, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 135, 143, 145,
	0, 0, 134, 0, 136, 137, 0, 0, 0, 171,
	154, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 625, 1335, 0, 625, 171, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 0, 0, 626, 0,
	0, 0, 1708, 0, 0, 0, 0, 0, 0, 1712,
	626, 1718, 626, 0, 1525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	172, 0, 0, 0, 0, 0, 1348, 172, 0, 0,
	0, 172, 172, 0, 0, 172, 0, 172, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 1361, 1364, 1365, 1366, 1367, 1368, 1369,
	0, 1370, 1371, 1372, 1373, 1374, 1349, 1350, 1351, 1352,
	1333, 1334, 1362, 0, 1336, 0, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 138, 0, 1346, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 0, 0, 0, 0,
	0, 0, 1525, 0, 1846, 0, 0, 0, 0, 0,
	0, 1854, 0, 0, 0, 1860, 1861, 0, 147, 1865,
	0, 148, 0, 0, 0, 0, 0, 0, 1868, 0,
	0, 0, 0, 0, 0, 1871, 0, 680, 682, 681,
	691, 692, 693, 694, 695, 696, 2491, 2487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1874, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1363, 0, 0, 0, 172, 0, 141, 142, 140, 139,
	162, 172, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 712, 626, 0, 0, 0, 0, 0, 153,
	0, 0, 155, 156, 0, 0, 157, 158, 0, 0,
	0, 0, 0, 159, 160, 161, 0, 0, 626, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 143, 145, 0,
	0, 134, 0, 136, 137, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 843, 0, 172, 954, 0,
	961, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2029, 0, 686, 687, 172, 0,
	172, 172, 172, 172, 172, 171, 0, 171, 0, 0,
	171, 0, 0, 172, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	625, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 625, 625, 723,
	626, 673, 727, 675, 724, 725, 0, 671, 674, 726,
	0, 0, 0, 0, 2074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 677, 679, 683,
	684, 2488, 2489, 2490, 690, 698, 700, 701, 699, 702,
	703, 704, 707, 708, 709, 710, 705, 706, 711, 626,
	0, 0, 2107, 0, 2111, 2112, 2113, 2114, 2115, 0,
	0, 0, 0, 0, 0, 0, 0, 1525, 2123, 0,
	0, 0, 0, 0, 138, 0, 0, 172, 0, 0,
	0, 626, 0, 2131, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 172, 172, 172, 172, 0, 0, 147, 0, 0,
	148, 0, 172, 0, 0, 0, 0, 172, 0, 0,
	172, 0, 172, 0, 0, 172, 172, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 625, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 172, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 626, 0, 0, 0, 625, 0, 0,
	0, 171, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 172, 0, 0, 153, 0,
	0, 155, 156, 0, 0, 157, 158, 0, 0, 0,
	0, 0, 159, 160, 161, 0, 0, 0, 0, 0,
	81, 40, 41, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 44, 73, 74, 0, 71, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 2285, 0,
	0, 2287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 626, 0, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2314, 0, 0, 2316,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 625, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 172,
	172, 172, 0, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 843, 0, 843, 0, 625, 0, 0,
	626, 626, 626, 626, 0, 72, 0, 0, 0, 2375,
	1109, 1111, 0, 0, 0, 625, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 625, 0, 0,
	0, 0, 0, 625, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2422,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2428, 2429, 2430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1248, 0, 0, 0, 625, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 625, 625, 0, 626, 0, 0,
	0, 626, 626, 0, 0, 0, 0, 0, 626, 60,
	0, 626, 0, 0, 0, 0, 0, 1259, 1260, 0,
	90, 0, 0, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 0, 0, 0, 0, 171, 0, 843,
	0, 625, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 626, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 625, 626,
	0, 0, 0, 0, 172, 626, 0, 171, 0, 0,
	625, 0, 0, 0, 171, 0, 171, 0, 171, 171,
	625, 0, 0, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 2548, 0,
	0, 1347, 47, 53, 56, 55, 58, 0, 0, 70,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 59, 86, 85, 0, 0,
	68, 69, 57, 0, 0, 0, 0, 0, 76, 77,
	0, 0, 625, 0, 0, 0, 0, 625, 0, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 625, 0, 1248, 0, 0, 1248, 954, 0, 0,
	0, 0, 0, 1248, 625, 625, 0, 61, 62, 0,
	63, 64, 65, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 171,
	1456, 0, 0, 0, 1280, 0, 171, 0, 0, 0,
	171, 171, 0, 0, 171, 0, 171, 0, 1477, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 713, 0, 0,
	0, 0, 171, 0, 0, 0, 0, 625, 0, 0,
	843, 0, 0, 0, 0, 0, 843, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 169, 0, 0, 589, 0, 0, 619, 0,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 0, 1566, 0,
	0, 0, 0, 0, 89, 0, 0, 812, 0, 0,
	0, 0, 1580, 0, 0, 589, 0, 0, 0, 1248,
	0, 0, 0, 0, 828, 0, 828, 1594, 1595, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 1687, 0, 625, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1699, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 0, 1301, 0, 171, 843, 0, 0, 171,
	0, 0, 0, 843, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 0, 171,
	0, 0, 961, 0, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 954, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 954, 0, 1566, 0, 0, 171, 0, 171,
	171, 171, 171, 171, 0, 0, 0, 1566, 1566, 0,
	0, 0, 171, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1361, 1364, 1365, 1366, 1367, 1368, 1369, 625,
	1370, 1371, 1372, 1373, 1374, 1349, 1350, 1351, 1352, 1333,
	1334, 1362, 0, 1336, 0, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 0, 0, 1346, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 0, 0, 0, 0, 0,
	1875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	625, 0, 0, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	171, 171, 171, 171, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 171, 0, 0, 171,
	0, 171, 0, 0, 171, 171, 171, 0, 0, 1363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 734, 1572, 744, 745, 2304, 2305, 735, 737, 0,
	0, 736, 0, 171, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 739, 746, 747, 625, 0, 0,
	0, 0, 625, 589, 843, 589, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1699,
	0, 0, 0, 0, 0, 1982, 0, 0, 0, 0,
	0, 171, 0, 0, 171, 0, 0, 0, 0, 2302,
	2303, 0, 0, 0, 0, 0, 0, 1248, 0, 0,
	2007, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 0, 0, 0, 0, 0, 2055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 625, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2070, 0, 0, 0,
	0, 0, 0, 625, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1699, 0,
	0, 0, 0, 0, 0, 0, 1249, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1282, 1284, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 171,
	171, 0, 625, 0, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 625,
	625, 625, 625, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 1566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1248, 0, 1248, 0,
	0, 1248, 0, 0, 0, 723, 1248, 0, 727, 0,
	724, 725, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2211, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	625, 625, 0, 0, 0, 0, 0, 625, 0, 0,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 625, 171, 0, 0, 0, 0, 1249, 0,
	954, 1249, 0, 1248, 0, 1699, 0, 0, 1249, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 171, 625, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 1503, 589, 589,
	589, 589, 589, 589, 589, 0, 0, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2211, 827, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1248, 0, 0, 0, 0, 2384, 0, 2386, 0,
	0, 0, 0, 1591, 0, 0, 0, 1592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 0, 0, 828, 828,
	0, 0, 0, 0, 1249, 0, 0, 0, 0, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1699, 1282, 1672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 2441, 2442, 2443, 2444, 0, 0, 828, 1479,
	828, 828, 828, 828, 828, 0, 0, 0, 1695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1681, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1248, 0, 1248, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	0, 1479, 589, 0, 589, 0, 589, 1733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1797, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2523,
	0, 0, 0, 2523, 2523, 0, 0, 0, 1248, 0,
	2532, 0, 0, 1699, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 589, 843, 843,
	0, 0, 0, 0, 589, 0, 0, 0, 589, 589,
	0, 2582, 589, 0, 1867, 0, 0, 2587, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2587, 0, 0, 0, 0, 0, 0, 0, 0,
	1896, 0, 0, 0, 1900, 0, 1901, 1902, 0, 0,
	0, 0, 0, 0, 0, 1910, 0, 0, 1911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1916, 1917, 1918, 1919, 1920, 0,
	1922, 0, 828, 0, 0, 0, 1926, 0, 1927, 0,
	0, 0, 1930, 0, 0, 0, 0, 0, 0, 0,
	1939, 1940, 1941, 1942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1953, 1954, 0, 0, 0, 0, 0,
	0, 1959, 1960, 1961, 1962, 1963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 589, 2006, 0, 0, 0, 0, 0, 1681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 2080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 589, 589, 589,
	589, 589, 0, 0, 0, 0, 0, 0, 639, 0,
	589, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	2167, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2180,
	0, 0, 0, 828, 0, 0, 0, 0, 0, 740,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2195, 2196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 0, 1249, 0, 0, 1249, 0, 0, 1294,
	0, 1249, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 2221,
	2222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2241, 2242,
	802, 0, 82, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	802, 0, 0, 0, 0, 0, 1249, 589, 589, 589,
	589, 589, 0, 0, 0, 0, 0, 962, 0, 2240,
	0, 0, 0, 0, 589, 0, 0, 1681, 0, 589,
	0, 0, 589, 2251, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 0, 0, 589, 0, 0, 0, 0, 0,
	1382, 0, 0, 0, 0, 0, 0, 0, 1249, 0,
	2321, 0, 0, 0, 0, 0, 0, 2325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2335, 2336, 2338, 2340, 0, 0, 0, 0, 589,
	0, 2346, 589, 0, 2348, 2349, 2350, 0, 0, 0,
	0, 2353, 0, 0, 0, 0, 0, 2355, 0, 0,
	2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368,
	0, 0, 2369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2398, 2399,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1249, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	0, 1531, 1532, 1533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 589, 589, 0,
	0, 0, 1577, 1578, 0, 0, 0, 0, 0, 0,
	1583, 0, 2453, 0, 0, 0, 2454, 0, 0, 0,
	0, 0, 2458, 0, 0, 1618, 1619, 1620, 1621, 1622,
	1623, 1625, 1629, 1630, 639, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 0, 0,
	1249, 0, 1249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2507, 2508, 2509, 0, 2510, 2511, 1701, 1702,
	2512, 0, 2513, 0, 2515, 2518, 0, 0, 0, 0,
	0, 2522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1742, 0, 0, 0,
	2538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2554, 0, 1249, 0, 0, 2559, 0, 0, 0,
	0, 0, 2560, 2561, 0, 0, 0, 0, 0, 0,
	2563, 0, 0, 0, 0, 1784, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 2606, 0, 0, 0,
	2607, 0, 0, 0, 0, 0, 1977, 0, 0, 1572,
	744, 0, 0, 0, 0, 1571, 0, 802, 1173, 1174,
	1175, 1681, 1178, 0, 1180, 1181, 1182, 1183, 0, 1186,
	1188, 1188, 0, 1188, 1192, 1192, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 0, 1232, 1233, 1234, 1235, 1236, 0,
	0, 0, 0, 1192, 1192, 1192, 1192, 1192, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 802, 0,
	0, 0, 802, 0, 0, 0, 0, 1909, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 927, 0,
	0, 0, 0, 0, 890, 946, 893, 894, 919, 0,
	908, 915, 887, 847, 880, 853, 0, 854, 879, 900,
	0, 877, 0, 0, 0, 0, 881, 0, 865, 0,
	0, 0, 0, 851, 855, 856, 866, 870, 872, 873,
	878, 886, 889, 892, 895, 897, 899, 902, 913, 921,
	922, 928, 929, 930, 931, 932, 934, 943, 944, 90,
	0, 1294, 0, 0, 0, 734, 1572, 744, 745, 2304,
	2305, 735, 737, 0, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1572, 744,
	0, 0, 0, 0, 1571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2302, 2303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 2135, 0, 1101, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2158, 2159, 0, 0, 0, 2162, 0, 0, 0,
	2164, 2165, 2166, 0, 0, 0, 0, 0, 0, 0,
	0, 2169, 2170, 2171, 0, 0, 1636, 2173, 0, 2174,
	2175, 0, 0, 0, 2182, 2183, 0, 0, 0, 0,
	0, 0, 1636, 1636, 1636, 1636, 1636, 639, 639, 639,
	639, 0, 0, 0, 0, 0, 0, 0, 0, 903,
	0, 906, 926, 898, 920, 869, 911, 0, 0, 916,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 174, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2215, 0, 0, 0, 0, 0, 0,
	0, 0, 639, 0, 0, 0, 0, 914, 938, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 858, 905,
	937, 0, 0, 0, 940, 0, 2245, 918, 0, 850,
	912, 0, 0, 859, 945, 935, 882, 883, 0, 0,
	0, 0, 0, 0, 0, 901, 907, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1717, 0, 0, 1725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 849, 848, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 936, 0, 0, 923,
	864, 0, 0, 0, 861, 0, 0, 0, 867, 888,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 2343, 0, 0, 0, 0, 2347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2380, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 875, 0,
	871, 0, 874, 909, 910, 876, 2434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1883, 0, 0, 0, 0, 0,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2447, 0, 2448, 0, 0,
	0, 0, 2451, 2452, 0, 0, 0, 0, 0, 0,
	0, 0, 948, 0, 2457, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 0, 2479, 0,
	0, 2481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2529, 639, 0, 0, 0, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2004, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 2026, 0, 2027, 2028, 0,
	0, 0, 2553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1725,
	1725, 1725, 1725, 1725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2026, 802, 0, 0,
	0, 1725, 0, 0, 1725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2004, 0, 82, 0, 2004, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2466, 0, 2470, 2471, 0, 0, 0, 0, 0, 0,
	0, 0, 2004, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 320, 531,
	249, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 1660, 0, 657, 0, 0, 0, 0, 662, 475,
	352, 0, 340, 0, 205, 0, 1661, 408, 292, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1196, 1203, 1206,
	1207, 1215, 0, 0, 82, 0, 176, 177, 178, 179,
	184, 185, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 202, 204, 206, 209, 210, 213, 214, 215, 216,
	217, 220, 224, 225, 226, 228, 229, 230, 231, 233,
	0, 0, 0, 0, 0, 0, 2564, 0, 299, 234,
	235, 236, 237, 238, 239, 243, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 258, 259, 262, 265, 266,
	272, 277, 278, 279, 281, 282, 283, 289, 291, 294,
	295, 298, 300, 302, 304, 305, 306, 308, 309, 310,
	311, 314, 315, 316, 317, 318, 319, 321, 329, 330,
	332, 333, 334, 335, 338, 341, 343, 345, 346, 348,
	349, 351, 354, 355, 357, 358, 361, 362, 364, 367,
	370, 373, 375, 376, 377, 378, 381, 382, 383, 384,
	386, 389, 392, 394, 395, 397, 400, 402, 403, 404,
	405, 406, 407, 411, 414, 415, 416, 417, 419, 421,
	422, 423, 425, 427, 428, 429, 430, 431, 432, 435,
	436, 438, 439, 440, 441, 442, 447, 448, 451, 452,
	453, 456, 457, 458, 459, 460, 461, 463, 466, 467,
	471, 473, 476, 477, 483, 484, 486, 487, 489, 490,
	491, 492, 495, 497, 498, 500, 501, 505, 506, 507,
	514, 515, 519, 520, 521, 522, 525, 526, 527, 528,
	529, 530, 532, 533, 534, 535, 539, 540, 542, 543,
	544, 545, 548, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 669, 0, 374,
	536, 478, 365, 0, 0, 0, 0, 0, 664, 665,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 232,
	0, 380, 0, 273, 0, 90, 0, 0, 173, 174,
	175, 734, 743, 744, 745, 742, 741, 735, 737, 0,
	0, 736, 223, 680, 682, 681, 691, 692, 693, 694,
	695, 696, 697, 678, 739, 746, 747, 391, 257, 307,
	264, 256, 504, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 640, 654, 198,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 651,
	652, 826, 0, 0, 0, 717, 0, 653, 0, 0,
	661, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 663, 0, 0, 0, 0, 186, 261,
	444, 0, 0, 181, 0, 0, 0, 242, 0, 716,
	0, 312, 541, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 313, 180, 207, 0, 0, 379, 0, 450,
	479, 0, 276, 0, 269, 0, 0, 518, 218, 0,
	0, 0, 0, 420, 274, 359, 410, 0, 0, 0,
	426, 516, 0, 0, 0, 368, 0, 0, 0, 0,
	208, 248, 396, 485, 0, 470, 360, 508, 0, 325,
	469, 284, 183, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 488, 513, 221, 455, 462, 443, 547,
	200, 0, 482, 0, 322, 323, 199, 0, 434, 260,
	0, 0, 388, 511, 512, 0, 562, 211, 538, 0,
	212, 0, 371, 509, 0, 0, 0, 0, 0, 0,
	0, 327, 686, 687, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 270, 0, 0, 0,
	290, 0, 0, 0, 0, 424, 0, 465, 503, 0,
	0, 0, 0, 369, 293, 474, 326, 347, 433, 549,
	0, 445, 222, 524, 472, 723, 715, 673, 727, 675,
	724, 725, 670, 671, 674, 726, 241, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 363, 0, 0, 366,
	0, 468, 0, 0, 0, 718, 660, 659, 0, 666,
	667, 0, 676, 677, 679, 683, 684, 685, 688, 689,
	690, 698, 700, 701, 699, 702, 703, 704, 707, 708,
	709, 710, 705, 706, 711, 658, 0, 201, 342, 0,
	0, 0, 546, 0, 0, 0, 0, 0, 0, 0,
	263, 0, 0, 296, 297, 336, 0, 0, 0, 0,
	0, 0, 390, 401, 0, 0, 437, 0, 502, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 286, 0, 0, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 372, 0, 385, 387, 0, 393, 0,
	398, 0, 399, 409, 413, 0, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 454, 0,
	0, 0, 0, 0, 480, 481, 0, 0, 510, 523,
	0, 0, 0, 288, 0, 0, 350, 0, 0, 0,
	268, 320, 531, 249, 0, 0, 0, 0, 0, 203,
	227, 0, 0, 0, 0, 0, 657, 0, 412, 0,
	0, 662, 475, 352, 0, 340, 0, 205, 493, 0,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	669, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 664, 665, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 232, 0, 380, 0, 273, 0, 90, 0,
	0, 173, 174, 175, 734, 743, 744, 745, 742, 741,
	735, 737, 0, 0, 736, 223, 680, 682, 681, 691,
	692, 693, 694, 695, 696, 697, 678, 739, 746, 747,
	391, 257, 307, 264, 256, 504, 0, 494, 1626, 1627,
	1628, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	640, 654, 198, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 652, 0, 0, 0, 0, 717, 0,
	653, 0, 0, 661, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 663, 0, 0, 0,
	0, 186, 261, 444, 0, 0, 181, 0, 0, 0,
	242, 0, 716, 0, 312, 541, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 686, 687, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 723, 715,
	673, 727, 675, 724, 725, 670, 671, 674, 726, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 718, 660,
	659, 0, 666, 667, 0, 676, 677, 679, 683, 684,
	685, 688, 689, 690, 698, 700, 701, 699, 702, 703,
	704, 707, 708, 709, 710, 705, 706, 711, 658, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 0, 0, 0, 288, 0, 0, 350,
	0, 81, 0, 268, 320, 531, 249, 0, 0, 0,
	0, 0, 203, 227, 0, 0, 0, 0, 0, 657,
	0, 412, 0, 0, 662, 475, 352, 0, 340, 0,
	205, 493, 0, 408, 292, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 178, 179, 184, 185, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 202, 204, 206,
	209, 210, 213, 214, 215, 216, 217, 220, 224, 225,
	226, 228, 229, 230, 231, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 234, 235, 236, 237, 238,
	239, 243, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 258, 259, 262, 265, 266, 272, 277, 278, 279,
	281, 282, 283, 289, 291, 294, 295, 298, 300, 302,
	304, 305, 306, 308, 309, 310, 311, 314, 315, 316,
	317, 318, 319, 321, 329, 330, 332, 333, 334, 335,
	338, 341, 343, 345, 346, 348, 349, 351, 354, 355,
	357, 358, 361, 362, 364, 367, 370, 373, 375, 376,
	377, 378, 381, 382, 383, 384, 386, 389, 392, 394,
	395, 397, 400, 402, 403, 404, 405, 406, 407, 411,
	414, 415, 416, 417, 419, 421, 422, 423, 425, 427,
	428, 429, 430, 431, 432, 435, 436, 438, 439, 440,
	441, 442, 447, 448, 451, 452, 453, 456, 457, 458,
	459, 460, 461, 463, 466, 467, 471, 473, 476, 477,
	483, 484, 486, 487, 489, 490, 491, 492, 495, 497,
	498, 500, 501, 505, 506, 507, 514, 515, 519, 520,
	521, 522, 525, 526, 527, 528, 529, 530, 532, 533,
	534, 535, 539, 540, 542, 543, 544, 545, 548, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 669, 0, 374, 536, 478, 365, 0,
	0, 0, 0, 0, 664, 665, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 232, 0, 380, 0, 273,
	0, 90, 0, 0, 173, 174, 175, 734, 743, 744,
	745, 742, 741, 735, 737, 0, 0, 736, 223, 680,
	682, 681, 691, 692, 693, 694, 695, 696, 697, 678,
	739, 746, 747, 391, 257, 307, 264, 256, 504, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 640, 654, 198, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 652, 0, 0, 0,
	0, 717, 0, 653, 0, 0, 661, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 663,
	0, 0, 0, 0, 186, 261, 444, 0, 0, 181,
	0, 0, 0, 242, 0, 716, 0, 312, 541, 0,
	0, 714, 0, 0, 0, 0, 0, 0, 313, 180,
	207, 0, 0, 379, 0, 450, 479, 0, 276, 0,
	269, 0, 0, 518, 218, 0, 0, 0, 0, 420,
	274, 359, 410, 0, 0, 0, 426, 516, 0, 0,
	0, 368, 0, 0, 0, 0, 208, 248, 396, 485,
	0, 470, 360, 508, 0, 325, 469, 284, 183, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 488,
	513, 221, 455, 462, 443, 547, 200, 0, 482, 0,
	322, 323, 199, 0, 434, 260, 0, 0, 388, 511,
	512, 0, 562, 211, 538, 0, 212, 0, 371, 509,
	0, 0, 0, 0, 0, 0, 0, 327, 686, 687,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 270, 0, 0, 0, 290, 0, 0, 0,
	0, 424, 0, 465, 503, 0, 0, 0, 0, 369,
	293, 474, 326, 347, 433, 549, 0, 445, 222, 524,
	472, 723, 715, 673, 727, 675, 724, 725, 670, 671,
	674, 726, 241, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 363, 0, 0, 366, 0, 468, 0, 0,
	0, 718, 660, 659, 0, 666, 667, 0, 676, 677,
	679, 683, 684, 685, 688, 689, 690, 698, 700, 701,
	699, 702, 703, 704, 707, 708, 709, 710, 705, 706,
	711, 658, 0, 201, 342, 89, 0, 0, 546, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 296,
	297, 336, 0, 0, 0, 0, 0, 0, 390, 401,
	0, 0, 437, 0, 502, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 286, 0, 0,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 372,
	0, 385, 387, 0, 393, 0, 398, 0, 399, 409,
	413, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 454, 0, 0, 0, 0, 0,
	480, 481, 0, 0, 510, 523, 0, 0, 0, 288,
	0, 0, 350, 0, 0, 0, 268, 320, 531, 249,
	0, 0, 0, 0, 0, 203, 227, 0, 0, 0,
	0, 0, 657, 0, 412, 0, 0, 662, 475, 352,
	0, 340, 0, 205, 493, 0, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 669, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 664, 665, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 90, 0, 1281, 173, 174, 175,
	734, 743, 744, 745, 742, 741, 735, 737, 0, 0,
	736, 223, 680, 682, 681, 691, 692, 693, 694, 695,
	696, 697, 678, 739, 746, 747, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 640, 654, 198, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 651, 652,
	0, 0, 0, 0, 717, 0, 653, 0, 0, 661,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 663, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 716, 0,
	312, 541, 0, 0, 714, 0, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 686, 687, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 723, 715, 673, 727, 675, 724,
	725, 670, 671, 674, 726, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 718, 660, 659, 0, 666, 667,
	0, 676, 677, 679, 683, 684, 685, 688, 689, 690,
	698, 700, 701, 699, 702, 703, 704, 707, 708, 709,
	710, 705, 706, 711, 658, 0, 201, 342, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 336, 0, 0, 0, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 0,
	0, 0, 288, 0, 0, 350, 0, 0, 0, 268,
	320, 531, 249, 0, 0, 0, 0, 0, 203, 227,
	0, 0, 0, 0, 0, 657, 0, 412, 0, 0,
	662, 475, 352, 0, 340, 0, 205, 493, 0, 408,
	292, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	178, 179, 184, 185, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 202, 204, 206, 209, 210, 213, 214,
	215, 216, 217, 220, 224, 225, 226, 228, 229, 230,
	231, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 234, 235, 236, 237, 238, 239, 243, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 258, 259, 262,
	265, 266, 272, 277, 278, 279, 281, 282, 283, 289,
	291, 294, 295, 298, 300, 302, 304, 305, 306, 308,
	309, 310, 311, 314, 315, 316, 317, 318, 319, 321,
	329, 330, 332, 333, 334, 335, 338, 341, 343, 345,
	346, 348, 349, 351, 354, 355, 357, 358, 361, 362,
	364, 367, 370, 373, 375, 376, 377, 378, 381, 382,
	383, 384, 386, 389, 392, 394, 395, 397, 400, 402,
	403, 404, 405, 406, 407, 411, 414, 415, 416, 417,
	419, 421, 422, 423, 425, 427, 428, 429, 430, 431,
	432, 435, 436, 438, 439, 440, 441, 442, 447, 448,
	451, 452, 453, 456, 457, 458, 459, 460, 461, 463,
	466, 467, 471, 473, 476, 477, 483, 484, 486, 487,
	489, 490, 491, 492, 495, 497, 498, 500, 501, 505,
	506, 507, 514, 515, 519, 520, 521, 522, 525, 526,
	527, 528, 529, 530, 532, 533, 534, 535, 539, 540,
	542, 543, 544, 545, 548, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 669,
	0, 374, 536, 478, 365, 0, 0, 0, 0, 0,
	664, 665, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 232, 0, 380, 0, 273, 0, 90, 0, 0,
	173, 174, 175, 734, 743, 744, 745, 742, 741, 735,
	737, 0, 0, 736, 223, 680, 682, 681, 691, 692,
	693, 694, 695, 696, 697, 678, 739, 746, 747, 391,
	257, 307, 264, 256, 504, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 640,
	654, 198, 668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 652, 826, 0, 0, 0, 717, 0, 653,
	0, 0, 661, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 663, 0, 0, 0, 0,
	186, 261, 444, 0, 0, 181, 0, 0, 0, 242,
	0, 716, 0, 312, 541, 0, 0, 714, 0, 0,
	0, 0, 0, 0, 313, 180, 207, 0, 0, 379,
	0, 450, 479, 0, 276, 0, 269, 0, 0, 518,
	218, 0, 0, 0, 0, 420, 274, 359, 410, 0,
	0, 0, 426, 516, 0, 0, 0, 368, 0, 0,
	0, 0, 208, 248, 396, 485, 0, 470, 360, 508,
	0, 325, 469, 284, 183, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 488, 513, 221, 455, 462,
	443, 547, 200, 0, 482, 0, 322, 323, 199, 0,
	434, 260, 0, 0, 388, 511, 512, 0, 562, 211,
	538, 0, 212, 0, 371, 509, 0, 0, 0, 0,
	0, 0, 0, 327, 686, 687, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 270, 0,
	0, 0, 290, 0, 0, 0, 0, 424, 0, 465,
	503, 0, 0, 0, 0, 369, 293, 474, 326, 347,
	433, 549, 0, 445, 222, 524, 472, 723, 715, 673,
	727, 675, 724, 725, 670, 671, 674, 726, 241, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 363, 0,
	0, 366, 0, 468, 0, 0, 0, 718, 660, 659,
	0, 666, 667, 0, 676, 677, 679, 683, 684, 685,
	688, 689, 690, 698, 700, 701, 699, 702, 703, 704,
	707, 708, 709, 710, 705, 706, 711, 658, 0, 201,
	342, 0, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 296, 297, 336, 0, 0,
	0, 0, 0, 0, 390, 401, 0, 0, 437, 0,
	502, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 286, 0, 0, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 372, 0, 385, 387, 0,
	393, 0, 398, 0, 399, 409, 413, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	454, 0, 0, 0, 0, 0, 480, 481, 0, 0,
	510, 523, 0, 0, 0, 288, 0, 0, 350, 0,
	0, 0, 268, 320, 531, 249, 0, 0, 0, 0,
	0, 203, 227, 0, 0, 0, 0, 0, 657, 0,
	412, 0, 0, 662, 475, 352, 0, 340, 0, 205,
	493, 0, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 669, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 664, 665, 0, 0, 0, 0, 0,
	287, 1740, 0, 0, 232, 0, 380, 0, 273, 0,
	90, 0, 0, 173, 174, 175, 734, 743, 744, 745,
	742, 741, 735, 737, 0, 0, 736, 223, 680, 682,
	681, 691, 692, 693, 694, 695, 696, 697, 678, 739,
	746, 747, 1741, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 640, 654, 198, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 652, 0, 0, 0, 0,
	717, 0, 653, 0, 0, 661, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 663, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 716, 0, 312, 541, 0, 0,
	714, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 686, 687, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	723, 715, 673, 727, 675, 724, 725, 670, 671, 674,
	726, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	718, 660, 659, 0, 666, 667, 0, 676, 677, 679,
	683, 684, 685, 688, 689, 690, 698, 700, 701, 699,
	702, 703, 704, 707, 708, 709, 710, 705, 706, 711,
	658, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 0, 0, 0, 288, 0,
	0, 350, 0, 0, 0, 268, 320, 531, 249, 0,
	0, 0, 0, 0, 203, 227, 0, 0, 0, 0,
	0, 657, 0, 412, 0, 0, 662, 475, 352, 0,
	340, 0, 205, 493, 0, 408, 292, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 178, 179, 184, 185,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 202,
	204, 206, 209, 210, 213, 214, 215, 216, 217, 220,
	224, 225, 226, 228, 229, 230, 231, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 234, 235, 236,
	237, 238, 239, 243, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 258, 259, 262, 265, 266, 272, 277,
	278, 279, 281, 282, 283, 289, 291, 294, 295, 298,
	300, 302, 304, 305, 306, 308, 309, 310, 311, 314,
	315, 316, 317, 318, 319, 321, 329, 330, 332, 333,
	334, 335, 338, 341, 343, 345, 346, 348, 349, 351,
	354, 355, 357, 358, 361, 362, 364, 367, 370, 373,
	375, 376, 377, 378, 381, 382, 383, 384, 386, 389,
	392, 394, 395, 397, 400, 402, 403, 404, 405, 406,
	407, 411, 414, 415, 416, 417, 419, 421, 422, 423,
	425, 427, 428, 429, 430, 431, 432, 435, 436, 438,
	439, 440, 441, 442, 447, 448, 451, 452, 453, 456,
	457, 458, 459, 460, 461, 463, 466, 467, 471, 473,
	476, 477, 483, 484, 486, 487, 489, 490, 491, 492,
	495, 497, 498, 500, 501, 505, 506, 507, 514, 515,
	519, 520, 521, 522, 525, 526, 527, 528, 529, 530,
	532, 533, 534, 535, 539, 540, 542, 543, 544, 545,
	548, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 669, 0, 374, 536, 478,
	365, 0, 0, 0, 0, 0, 664, 665, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 232, 0, 380,
	0, 273, 0, 90, 0, 0, 173, 174, 175, 734,
	743, 744, 745, 742, 741, 735, 737, 0, 0, 736,
	223, 680, 682, 681, 691, 692, 693, 694, 695, 696,
	697, 678, 739, 746, 747, 391, 257, 307, 264, 256,
	504, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 0, 0, 640, 654, 198, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 652, 0,
	0, 0, 0, 717, 0, 653, 0, 0, 661, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 663, 0, 0, 0, 0, 186, 261, 444, 0,
	0, 181, 0, 0, 0, 242, 0, 716, 0, 312,
	541, 0, 0, 714, 0, 0, 0, 0, 0, 0,
	313, 180, 207, 0, 0, 379, 0, 450, 479, 0,
	276, 0, 269, 0, 0, 518, 218, 0, 0, 0,
	0, 420, 274, 359, 410, 0, 0, 0, 426, 516,
	0, 0, 0, 368, 0, 0, 0, 0, 208, 248,
	396, 485, 0, 470, 360, 508, 0, 325, 469, 284,
	183, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 488, 513, 221, 455, 462, 443, 547, 200, 0,
	482, 0, 322, 323, 199, 0, 434, 260, 0, 0,
	388, 511, 512, 0, 562, 211, 538, 0, 212, 0,
	371, 509, 0, 0, 0, 0, 0, 0, 0, 327,
	686, 687, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 270, 0, 0, 0, 290, 0,
	0, 0, 0, 424, 0, 465, 503, 0, 0, 0,
	0, 369, 293, 474, 326, 347, 433, 549, 0, 445,
	222, 524, 472, 723, 715, 673, 727, 675, 724, 725,
	670, 671, 674, 726, 241, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 363, 0, 0, 366, 0, 468,
	0, 0, 0, 718, 660, 659, 0, 666, 667, 0,
	676, 677, 679, 683, 684, 685, 688, 689, 690, 698,
	700, 701, 699, 702, 703, 704, 707, 708, 709, 710,
	705, 706, 711, 658, 0, 201, 342, 0, 0, 0,
	546, 0, 0, 0, 0, 0, 0, 0, 263, 0,
	0, 296, 297, 336, 0, 0, 0, 0, 0, 0,
	390, 401, 0, 0, 437, 0, 502, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 286,
	0, 0, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 372, 0, 385, 387, 0, 393, 0, 398, 0,
	399, 409, 413, 0, 0, 418, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 454, 0, 0, 0,
	0, 0, 480, 481, 0, 0, 510, 523, 0, 0,
	0, 288, 0, 0, 350, 0, 0, 0, 268, 320,
	531, 249, 0, 0, 0, 0, 0, 203, 227, 0,
	0, 0, 0, 0, 657, 0, 412, 0, 0, 662,
	475, 352, 0, 340, 0, 205, 493, 0, 408, 292,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 178,
	179, 184, 185, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 202, 204, 206, 209, 210, 213, 214, 215,
	216, 217, 220, 224, 225, 226, 228, 229, 230, 231,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	234, 235, 236, 237, 238, 239, 243, 245, 246, 247,
	250, 251, 252, 253, 254, 255, 258, 259, 262, 265,
	266, 272, 277, 278, 279, 281, 282, 283, 289, 291,
	294, 295, 298, 300, 302, 304, 305, 306, 308, 309,
	310, 311, 314, 315, 316, 317, 318, 319, 321, 329,
	330, 332, 333, 334, 335, 338, 341, 343, 345, 346,
	348, 349, 351, 354, 355, 357, 358, 361, 362, 364,
	367, 370, 373, 375, 376, 377, 378, 381, 382, 383,
	384, 386, 389, 392, 394, 395, 397, 400, 402, 403,
	404, 405, 406, 407, 411, 414, 415, 416, 417, 419,
	421, 422, 423, 425, 427, 428, 429, 430, 431, 432,
	435, 436, 438, 439, 440, 441, 442, 447, 448, 451,
	452, 453, 456, 457, 458, 459, 460, 461, 463, 466,
	467, 471, 473, 476, 477, 483, 484, 486, 487, 489,
	490, 491, 492, 495, 497, 498, 500, 501, 505, 506,
	507, 514, 515, 519, 520, 521, 522, 525, 526, 527,
	528, 529, 530, 532, 533, 534, 535, 539, 540, 542,
	543, 544, 545, 548, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 669, 0,
	374, 536, 478, 365, 0, 0, 0, 0, 0, 664,
	665, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	232, 0, 380, 0, 273, 0, 90, 0, 0, 173,
	174, 175, 734, 743, 744, 745, 742, 741, 735, 737,
	0, 0, 736, 223, 680, 682, 681, 691, 692, 693,
	694, 695, 696, 697, 678, 739, 746, 747, 391, 257,
	307, 264, 256, 504, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 654,
	198, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	651, 652, 0, 0, 0, 0, 717, 0, 653, 0,
	0, 661, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 663, 0, 0, 0, 0, 186,
	261, 444, 0, 0, 181, 0, 0, 0, 242, 0,
	716, 0, 312, 541, 0, 0, 714, 0, 0, 0,
	0, 0, 0, 313, 180, 207, 0, 0, 379, 0,
	450, 479, 0, 276, 0, 269, 0, 0, 518, 218,
	0, 0, 0, 0, 420, 274, 359, 410, 0, 0,
	0, 426, 516, 0, 0, 0, 368, 0, 0, 0,
	0, 208, 248, 396, 485, 0, 470, 360, 508, 0,
	325, 469, 284, 183, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 488, 513, 221, 455, 462, 443,
	547, 200, 0, 482, 0, 322, 323, 199, 0, 434,
	260, 0, 0, 388, 511, 512, 0, 562, 211, 538,
	0, 212, 0, 371, 509, 0, 0, 0, 0, 0,
	0, 0, 327, 686, 687, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 270, 0, 0,
	0, 290, 0, 0, 0, 0, 424, 0, 465, 503,
	0, 0, 0, 0, 369, 293, 474, 326, 347, 433,
	549, 0, 445, 222, 524, 472, 723, 715, 673, 727,
	675, 724, 725, 670, 671, 674, 726, 241, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 363, 0, 0,
	366, 0, 468, 0, 0, 0, 718, 660, 659, 0,
	666, 667, 0, 676, 677, 679, 683, 684, 685, 688,
	689, 690, 698, 700, 701, 699, 702, 703, 704, 707,
	708, 709, 710, 705, 706, 711, 658, 0, 201, 342,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 296, 297, 336, 0, 0, 0,
	0, 0, 0, 390, 401, 0, 0, 437, 0, 502,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 286, 0, 0, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 372, 0, 385, 387, 0, 393,
	0, 398, 0, 399, 409, 413, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 0, 454,
	0, 0, 0, 0, 0, 480, 481, 0, 0, 510,
	523, 0, 0, 0, 288, 0, 0, 350, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 939, 927, 0, 493,
	320, 531, 249, 890, 946, 893, 894, 919, 203, 908,
	915, 887, 847, 880, 853, 275, 854, 879, 900, 0,
	877, 475, 352, 0, 340, 881, 205, 865, 0, 408,
	292, 187, 851, 855, 856, 866, 870, 872, 873, 878,
	886, 889, 892, 895, 897, 899, 902, 913, 921, 922,
	928, 929, 930, 931, 932, 934, 943, 944, 176, 177,
	178, 179, 184, 185, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 202, 204, 206, 209, 210, 213, 214,
	215, 216, 217, 220, 224, 225, 226, 228, 229, 230,
	231, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 234, 235, 236, 237, 238, 239, 243, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 258, 259, 262,
	265, 266, 272, 277, 278, 279, 281, 282, 283, 289,
	291, 294, 295, 298, 300, 302, 304, 305, 306, 308,
	309, 310, 311, 314, 315, 316, 317, 318, 319, 321,
	329, 330, 332, 333, 334, 335, 338, 341, 343, 345,
	346, 348, 349, 351, 354, 355, 357, 358, 361, 362,
	364, 367, 370, 373, 375, 376, 377, 378, 381, 382,
	383, 384, 386, 389, 392, 394, 395, 397, 400, 402,
	403, 404, 405, 406, 407, 411, 414, 415, 416, 417,
	419, 421, 422, 423, 425, 427, 428, 429, 430, 431,
	432, 435, 436, 438, 439, 440, 441, 442, 447, 448,
	451, 452, 453, 456, 457, 458, 459, 460, 461, 463,
	466, 467, 471, 473, 476, 477, 483, 484, 486, 487,
	489, 490, 491, 492, 495, 497, 498, 500, 501, 505,
	506, 507, 514, 515, 519, 520, 521, 522, 525, 526,
	527, 528, 529, 530, 532, 533, 534, 535, 539, 540,
	542, 543, 544, 545, 548, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 537,
	0, 374, 536, 478, 365, 0, 0, 0, 903, 0,
	906, 926, 898, 920, 869, 911, 0, 287, 916, 942,
	0, 232, 0, 380, 0, 273, 0, 0, 0, 0,
	173, 174, 175, 0, 2575, 0, 2576, 285, 244, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 280, 914, 938, 885, 391,
	257, 307, 264, 256, 504, 0, 494, 858, 905, 937,
	0, 0, 0, 940, 339, 0, 918, 0, 850, 912,
	0, 198, 859, 945, 935, 882, 883, 0, 0, 0,
	0, 0, 0, 0, 901, 907, 0, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 324, 0, 0, 0, 868,
	186, 261, 444, 849, 848, 181, 0, 0, 0, 242,
	0, 464, 933, 312, 541, 936, 0, 303, 923, 864,
	0, 0, 0, 861, 313, 180, 207, 867, 888, 379,
	924, 450, 479, 0, 276, 0, 269, 0, 0, 518,
	218, 0, 0, 0, 0, 420, 274, 359, 410, 0,
	0, 0, 426, 516, 0, 0, 0, 368, 0, 0,
	0, 0, 208, 248, 396, 485, 0, 470, 360, 508,
	0, 325, 469, 284, 183, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 488, 513, 221, 455, 462,
	443, 547, 200, 0, 482, 0, 322, 323, 199, 0,
	434, 260, 0, 0, 388, 511, 512, 0, 562, 211,
	538, 0, 212, 0, 371, 509, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 863, 219, 0, 0, 270, 0,
	0, 891, 290, 0, 0, 0, 0, 424, 0, 465,
	503, 0, 941, 0, 0, 369, 293, 474, 326, 347,
	433, 549, 917, 445, 222, 524, 472, 875, 240, 871,
	0, 874, 909, 910, 876, 0, 0, 0, 241, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 363, 0,
	0, 366, 0, 468, 0, 0, 0, 446, 0, 860,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 517,
	328, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 356, 0, 201,
	342, 948, 0, 0, 546, 0, 0, 852, 0, 0,
	0, 0, 263, 884, 0, 296, 297, 336, 0, 0,
	904, 0, 0, 0, 390, 401, 0, 0, 437, 0,
	502, 947, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 286, 0, 0, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 372, 0, 385, 387, 0,
	393, 0, 398, 0, 399, 409, 413, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	454, 0, 0, 0, 0, 0, 480, 481, 0, 0,
	510, 523, 0, 0, 925, 288, 0, 0, 350, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 939, 927, 0,
	493, 320, 531, 249, 890, 946, 893, 894, 919, 203,
	908, 915, 887, 847, 880, 853, 275, 854, 879, 900,
	0, 877, 475, 352, 0, 340, 881, 205, 865, 0,
	408, 292, 187, 851, 855, 856, 866, 870, 872, 873,
	878, 886, 889, 892, 895, 897, 899, 902, 913, 921,
	922, 928, 929, 930, 931, 932, 934, 943, 944, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	537, 0, 374, 536, 478, 365, 0, 0, 0, 903,
	0, 906, 926, 898, 920, 869, 911, 0, 287, 916,
	942, 0, 232, 0, 380, 0, 273, 0, 0, 0,
	0, 173, 174, 175, 0, 496, 0, 0, 285, 244,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 280, 914, 938, 885,
	391, 257, 307, 264, 256, 504, 0, 494, 858, 905,
	937, 0, 0, 0, 940, 339, 0, 918, 0, 850,
	912, 0, 198, 859, 945, 935, 882, 883, 0, 0,
	0, 0, 0, 0, 0, 901, 907, 0, 896, 0,
	0, 0, 0, 0, 2252, 0, 0, 0, 0, 0,
	0, 0, 862, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	868, 186, 261, 444, 849, 848, 181, 0, 0, 0,
	242, 0, 464, 933, 312, 541, 936, 0, 303, 923,
	864, 0, 0, 0, 861, 313, 180, 207, 867, 888,
	379, 924, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 219, 0, 0, 270,
	0, 0, 891, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 941, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 917, 445, 222, 524, 472, 875, 240,
	871, 0, 874, 909, 910, 876, 0, 0, 0, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 446, 0,
	860, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	517, 328, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	201, 342, 948, 0, 0, 546, 0, 0, 852, 0,
	0, 0, 0, 263, 884, 0, 296, 297, 336, 0,
	0, 904, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 947, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 0, 0, 925, 288, 0, 0, 350,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 939, 927,
	0, 493, 320, 531, 249, 890, 946, 893, 894, 919,
	203, 908, 915, 887, 847, 880, 853, 275, 854, 879,
	900, 0, 877, 475, 352, 0, 340, 881, 205, 865,
	0, 408, 292, 187, 851, 855, 856, 866, 870, 872,
	873, 878, 886, 889, 892, 895, 897, 899, 902, 913,
	921, 922, 928, 929, 930, 931, 932, 934, 943, 944,
	176, 177, 178, 179, 184, 185, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 202, 204, 206, 209, 210,
	213, 214, 215, 216, 217, 220, 224, 225, 226, 228,
	229, 230, 231, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 234, 235, 236, 237, 238, 239, 243,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 258,
	259, 262, 265, 266, 272, 277, 278, 279, 281, 282,
	283, 289, 291, 294, 295, 298, 300, 302, 304, 305,
	306, 308, 309, 310, 311, 314, 315, 316, 317, 318,
	319, 321, 329, 330, 332, 333, 334, 335, 338, 341,
	343, 345, 346, 348, 349, 351, 354, 355, 357, 358,
	361, 362, 364, 367, 370, 373, 375, 376, 377, 378,
	381, 382, 383, 384, 386, 389, 392, 394, 395, 397,
	400, 402, 403, 404, 405, 406, 407, 411, 414, 415,
	416, 417, 419, 421, 422, 423, 425, 427, 428, 429,
	430, 431, 432, 435, 436, 438, 439, 440, 441, 442,
	447, 448, 451, 452, 453, 456, 457, 458, 459, 460,
	461, 463, 466, 467, 471, 473, 476, 477, 483, 484,
	486, 487, 489, 490, 491, 492, 495, 497, 498, 500,
	501, 505, 506, 507, 514, 515, 519, 520, 521, 522,
	525, 526, 527, 528, 529, 530, 532, 533, 534, 535,
	539, 540, 542, 543, 544, 545, 548, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 537, 0, 374, 536, 478, 365, 0, 0, 0,
	903, 0, 906, 926, 898, 920, 869, 911, 0, 287,
	916, 942, 0, 232, 0, 380, 0, 273, 0, 0,
	0, 0, 173, 174, 175, 0, 496, 0, 0, 285,
	244, 0, 0, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 280, 914, 938,
	885, 391, 257, 307, 264, 256, 504, 0, 494, 858,
	905, 937, 0, 0, 0, 940, 339, 0, 918, 0,
	850, 912, 0, 198, 859, 945, 935, 882, 883, 0,
	0, 0, 0, 0, 0, 0, 901, 907, 0, 896,
	0, 0, 0, 0, 0, 2213, 0, 0, 0, 0,
	0, 0, 0, 862, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 868, 186, 261, 444, 849, 848, 181, 0, 0,
	0, 242, 0, 464, 933, 312, 541, 936, 0, 303,
	923, 864, 0, 0, 0, 861, 313, 180, 207, 867,
	888, 379, 924, 450, 479, 0, 276, 0, 269, 0,
	0, 518, 218, 0, 0, 0, 0, 420, 274, 359,
	410, 0, 0, 0, 426, 516, 0, 0, 0, 368,
	0, 0, 0, 0, 208, 248, 396, 485, 0, 470,
	360, 508, 0, 325, 469, 284, 183, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 488, 513, 221,
	455, 462, 443, 547, 200, 0, 482, 0, 322, 323,
	199, 0, 434, 260, 0, 0, 388, 511, 512, 0,
	562, 211, 538, 0, 212, 0, 371, 509, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 863, 219, 0, 0,
	270, 0, 0, 891, 290, 0, 0, 0, 0, 424,
	0, 465, 503, 0, 941, 0, 0, 369, 293, 474,
	326, 347, 433, 549, 917, 445, 222, 524, 472, 875,
	240, 871, 0, 874, 909, 910, 876, 0, 0, 0,
	241, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	363, 0, 0, 366, 0, 468, 0, 0, 0, 446,
	0, 860, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 517, 328, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	0, 201, 342, 948, 0, 0, 546, 0, 0, 852,
	0, 0, 0, 0, 263, 884, 0, 296, 297, 336,
	0, 0, 904, 0, 0, 0, 390, 401, 0, 0,
	437, 0, 502, 947, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 286, 0, 0, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 372, 0, 385,
	387, 0, 393, 0, 398, 0, 399, 409, 413, 0,
	0, 418, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 454, 0, 0, 0, 0, 0, 480, 481,
	0, 0, 510, 523, 0, 0, 925, 288, 0, 0,
	350, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 939,
	927, 0, 493, 320, 531, 249, 890, 946, 893, 894,
	919, 203, 908, 915, 887, 847, 880, 853, 275, 854,
	879, 900, 0, 877, 475, 352, 0, 340, 881, 205,
	865, 0, 408, 292, 187, 851, 855, 856, 866, 870,
	872, 873, 878, 886, 889, 892, 895, 897, 899, 902,
	913, 921, 922, 928, 929, 930, 931, 932, 934, 943,
	944, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 903, 0, 906, 926, 898, 920, 869, 911, 0,
	287, 916, 942, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 0, 496, 0, 0,
	285, 244, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 914,
	938, 885, 391, 257, 307, 264, 256, 504, 0, 494,
	858, 905, 937, 0, 0, 613, 940, 339, 0, 918,
	0, 850, 912, 0, 198, 859, 945, 935, 882, 883,
	0, 0, 0, 0, 0, 0, 0, 901, 907, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 868, 186, 261, 444, 849, 848, 181, 0,
	0, 0, 242, 0, 464, 933, 312, 541, 936, 0,
	303, 923, 864, 0, 0, 0, 861, 313, 180, 207,
	867, 888, 379, 924, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 949, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 863, 219, 0,
	0, 270, 0, 0, 891, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 941, 0, 0, 846, 840,
	839, 326, 347, 433, 549, 917, 445, 222, 524, 472,
	875, 240, 871, 0, 874, 909, 910, 876, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 860, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 948, 0, 0, 546, 0, 0,
	852, 0, 0, 0, 0, 263, 884, 0, 296, 297,
	336, 0, 0, 904, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 947, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 0, 0, 925, 288, 0,
	0, 350, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	939, 927, 0, 493, 320, 531, 249, 890, 946, 893,
	894, 919, 203, 908, 915, 887, 847, 880, 853, 275,
	854, 879, 900, 0, 877, 475, 352, 0, 340, 881,
	205, 865, 0, 408, 292, 187, 851, 855, 856, 866,
	870, 872, 873, 878, 886, 889, 892, 895, 897, 899,
	902, 913, 921, 922, 928, 929, 930, 931, 932, 934,
	943, 944, 176, 177, 178, 179, 184, 185, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 202, 204, 206,
	209, 210, 213, 214, 215, 216, 217, 220, 224, 225,
	226, 228, 229, 230, 231, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 234, 235, 236, 237, 238,
	239, 243, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 258, 259, 262, 265, 266, 272, 277, 278, 279,
	281, 282, 283, 289, 291, 294, 295, 298, 300, 302,
	304, 305, 306, 308, 309, 310, 311, 314, 315, 316,
	317, 318, 319, 321, 329, 330, 332, 333, 334, 335,
	338, 341, 343, 345, 346, 348, 349, 351, 354, 355,
	357, 358, 361, 362, 364, 367, 370, 373, 375, 376,
	377, 378, 381, 382, 383, 384, 386, 389, 392, 394,
	395, 397, 400, 402, 403, 404, 405, 406, 407, 411,
	414, 415, 416, 417, 419, 421, 422, 423, 425, 427,
	428, 429, 430, 431, 432, 435, 436, 438, 439, 440,
	441, 442, 447, 448, 451, 452, 453, 456, 457, 458,
	459, 460, 461, 463, 466, 467, 471, 473, 476, 477,
	483, 484, 486, 487, 489, 490, 491, 492, 495, 497,
	498, 500, 501, 505, 506, 507, 514, 515, 519, 520,
	521, 522, 525, 526, 527, 528, 529, 530, 532, 533,
	534, 535, 539, 540, 542, 543, 544, 545, 548, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 537, 0, 374, 536, 478, 365, 0,
	0, 0, 903, 0, 906, 926, 898, 920, 869, 911,
	0, 287, 916, 942, 0, 232, 0, 380, 0, 273,
	0, 0, 0, 0, 173, 174, 175, 0, 496, 0,
	0, 285, 244, 0, 0, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 280,
	914, 938, 885, 391, 257, 307, 264, 256, 504, 0,
	494, 858, 905, 937, 0, 0, 0, 940, 339, 0,
	918, 0, 850, 912, 0, 198, 859, 945, 935, 882,
	883, 0, 0, 0, 0, 0, 0, 0, 901, 907,
	0, 896, 0, 0, 0, 0, 0, 1710, 0, 0,
	0, 0, 0, 0, 0, 862, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 0, 868, 186, 261, 444, 849, 848, 181,
	0, 0, 0, 242, 0, 464, 933, 312, 541, 936,
	0, 303, 923, 864, 0, 0, 0, 861, 313, 180,
	207, 867, 888, 379, 924, 450, 479, 0, 276, 0,
	269, 0, 0, 518, 218, 0, 0, 0, 0, 420,
	274, 359, 410, 0, 0, 0, 426, 516, 0, 0,
	0, 368, 0, 0, 0, 0, 208, 248, 396, 485,
	0, 470, 360, 508, 0, 325, 469, 284, 183, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 488,
	513, 221, 455, 462, 443, 547, 200, 0, 482, 0,
	322, 323, 199, 0, 434, 260, 0, 0, 388, 511,
	512, 0, 562, 211, 538, 0, 212, 0, 371, 509,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 863, 219,
	0, 0, 270, 0, 0, 891, 290, 0, 0, 0,
	0, 424, 0, 465, 503, 0, 941, 0, 0, 369,
	293, 474, 326, 347, 433, 549, 917, 445, 222, 524,
	472, 875, 240, 871, 0, 874, 909, 910, 876, 0,
	0, 0, 241, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 363, 0, 0, 366, 0, 468, 0, 0,
	0, 446, 0, 860, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 517, 328, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 356, 0, 201, 342, 948, 0, 0, 546, 0,
	0, 852, 0, 0, 0, 0, 263, 884, 0, 296,
	297, 336, 0, 0, 904, 0, 0, 0, 390, 401,
	0, 0, 437, 0, 502, 947, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 286, 0, 0,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 372,
	0, 385, 387, 0, 393, 0, 398, 0, 399, 409,
	413, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 454, 0, 0, 0, 0, 0,
	480, 481, 0, 0, 510, 523, 0, 0, 925, 288,
	0, 0, 350, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 939, 927, 0, 493, 320, 531, 249, 890, 946,
	893, 894, 919, 203, 908, 915, 887, 847, 880, 853,
	275, 854, 879, 900, 0, 877, 475, 352, 0, 340,
	881, 205, 865, 0, 408, 292, 187, 851, 855, 856,
	866, 870, 872, 873, 878, 886, 889, 892, 895, 897,
	899, 902, 913, 921, 922, 928, 929, 930, 931, 932,
	934, 943, 944, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 903, 0, 906, 926, 898, 920, 869,
	911, 0, 287, 916, 942, 0, 232, 0, 380, 0,
	273, 0, 90, 0, 0, 173, 174, 175, 0, 496,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 914, 938, 885, 391, 257, 307, 264, 256, 504,
	0, 494, 858, 905, 937, 0, 0, 0, 940, 339,
	0, 918, 0, 850, 912, 0, 198, 859, 945, 935,
	882, 883, 0, 0, 0, 0, 0, 0, 0, 901,
	907, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 868, 186, 261, 444, 849, 848,
	181, 0, 0, 0, 242, 0, 464, 933, 312, 541,
	936, 0, 303, 923, 864, 0, 0, 0, 861, 313,
	180, 207, 867, 888, 379, 924, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 863,
	219, 0, 0, 270, 0, 0, 891, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 941, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 917, 445, 222,
	524, 472, 875, 240, 871, 0, 874, 909, 910, 876,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 860, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 948, 0, 0, 546,
	0, 0, 852, 0, 0, 0, 0, 263, 884, 0,
	296, 297, 336, 0, 0, 904, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 947, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 0, 510, 523, 0, 0, 925,
	288, 0, 0, 350, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 939, 927, 0, 493, 320, 531, 249, 890,
	946, 893, 894, 919, 203, 908, 915, 887, 847, 880,
	853, 275, 854, 879, 900, 0, 877, 475, 352, 0,
	340, 881, 205, 865, 0, 408, 292, 187, 851, 855,
	856, 866, 870, 872, 873, 878, 886, 889, 892, 895,
	897, 899, 902, 913, 921, 922, 928, 929, 930, 931,
	932, 934, 943, 944, 176, 177, 178, 179, 184, 185,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 202,
	204, 206, 209, 210, 213, 214, 215, 216, 217, 220,
	224, 225, 226, 228, 229, 230, 231, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 234, 235, 236,
	237, 238, 239, 243, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 258, 259, 262, 265, 266, 272, 277,
	278, 279, 281, 282, 283, 289, 291, 294, 295, 298,
	300, 302, 304, 305, 306, 308, 309, 310, 311, 314,
	315, 316, 317, 318, 319, 321, 329, 330, 332, 333,
	334, 335, 338, 341, 343, 345, 346, 348, 349, 351,
	354, 355, 357, 358, 361, 362, 364, 367, 370, 373,
	375, 376, 377, 378, 381, 382, 383, 384, 386, 389,
	392, 394, 395, 397, 400, 402, 403, 404, 405, 406,
	407, 411, 414, 415, 416, 417, 419, 421, 422, 423,
	425, 427, 428, 429, 430, 431, 432, 435, 436, 438,
	439, 440, 441, 442, 447, 448, 451, 452, 453, 456,
	457, 458, 459, 460, 461, 463, 466, 467, 471, 473,
	476, 477, 483, 484, 486, 487, 489, 490, 491, 492,
	495, 497, 498, 500, 501, 505, 506, 507, 514, 515,
	519, 520, 521, 522, 525, 526, 527, 528, 529, 530,
	532, 533, 534, 535, 539, 540, 542, 543, 544, 545,
	548, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 537, 0, 374, 536, 478,
	365, 0, 0, 0, 903, 0, 906, 926, 898, 920,
	869, 911, 0, 287, 916, 942, 0, 232, 0, 380,
	0, 273, 0, 0, 0, 0, 173, 174, 175, 0,
	496, 0, 0, 285, 244, 0, 0, 0, 0, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 280, 914, 938, 885, 391, 257, 307, 264, 256,
	504, 0, 494, 858, 905, 937, 0, 0, 613, 940,
	339, 0, 918, 0, 850, 912, 0, 198, 859, 945,
	935, 882, 883, 0, 0, 0, 0, 0, 0, 0,
	901, 907, 0, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 868, 186, 261, 444, 849,
	848, 181, 0, 0, 0, 242, 0, 464, 933, 312,
	541, 936, 0, 303, 923, 864, 0, 0, 0, 861,
	313, 180, 207, 867, 888, 379, 924, 450, 479, 0,
	276, 0, 269, 0, 0, 518, 218, 0, 0, 0,
	0, 420, 274, 359, 410, 0, 0, 0, 426, 516,
	0, 0, 0, 368, 0, 0, 0, 0, 208, 248,
	396, 485, 0, 470, 360, 508, 0, 325, 469, 284,
	183, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 488, 1311, 221, 455, 462, 443, 547, 200, 0,
	482, 0, 322, 323, 199, 0, 434, 260, 0, 0,
	388, 511, 512, 0, 562, 211, 538, 0, 949, 0,
	371, 509, 0, 0, 0, 0, 0, 0, 0, 327,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	863, 219, 0, 0, 270, 0, 0, 891, 290, 0,
	0, 0, 0, 424, 0, 465, 503, 0, 941, 0,
	0, 846, 840, 839, 326, 347, 433, 549, 917, 445,
	222, 524, 472, 875, 240, 871, 0, 874, 909, 910,
	876, 0, 0, 0, 241, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 363, 0, 0, 366, 0, 468,
	0, 0, 0, 446, 0, 860, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 517, 328, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 356, 0, 201, 342, 948, 0, 0,
	546, 0, 0, 852, 0, 0, 0, 0, 263, 884,
	0, 296, 297, 336, 0, 0, 904, 0, 0, 0,
	390, 401, 0, 0, 437, 0, 502, 947, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 286,
	0, 0, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 372, 0, 385, 387, 0, 393, 0, 398, 0,
	399, 409, 413, 0, 0, 418, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 454, 0, 0, 0,
	0, 0, 480, 481, 0, 0, 510, 523, 0, 0,
	925, 288, 0, 0, 350, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 939, 927, 0, 493, 320, 531, 249,
	890, 946, 893, 894, 919, 203, 908, 915, 887, 847,
	880, 853, 275, 854, 879, 900, 0, 877, 475, 352,
	0, 340, 881, 205, 865, 0, 408, 292, 187, 851,
	855, 856, 866, 870, 872, 873, 878, 886, 889, 892,
	895, 897, 899, 902, 913, 921, 922, 928, 929, 930,
	931, 932, 934, 943, 944, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 903, 0, 906, 926, 898,
	920, 869, 911, 0, 287, 916, 942, 0, 232, 0,
	380, 0, 273, 0, 0, 0, 0, 173, 174, 175,
	0, 496, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 914, 938, 885, 391, 257, 307, 264,
	256, 504, 0, 494, 858, 905, 937, 0, 0, 613,
	940, 339, 0, 918, 0, 850, 912, 0, 198, 859,
	945, 935, 882, 883, 0, 0, 0, 0, 0, 0,
	0, 901, 907, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 862, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 868, 186, 261, 444,
	849, 848, 181, 0, 0, 0, 242, 0, 464, 933,
	312, 541, 936, 0, 303, 923, 864, 0, 0, 0,
	861, 313, 180, 207, 867, 888, 379, 924, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 837, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 949,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 863, 219, 0, 0, 270, 0, 0, 891, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 941,
	0, 0, 846, 840, 839, 326, 347, 433, 549, 917,
	445, 222, 524, 472, 875, 240, 871, 0, 874, 909,
	910, 876, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 860, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 948, 0,
	0, 546, 0, 0, 852, 0, 0, 0, 0, 263,
	884, 0, 296, 297, 336, 0, 0, 904, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 947, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 0,
	0, 925, 288, 0, 0, 350, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 939, 927, 0, 493, 320, 531,
	249, 890, 946, 893, 894, 919, 203, 908, 915, 887,
	847, 880, 853, 275, 854, 879, 900, 0, 877, 475,
	352, 0, 340, 881, 205, 865, 0, 408, 292, 187,
	851, 855, 856, 866, 870, 872, 873, 878, 886, 889,
	892, 895, 897, 899, 902, 913, 921, 922, 928, 929,
	930, 931, 932, 934, 943, 944, 176, 177, 178, 179,
	184, 185, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 202, 204, 206, 209, 210, 213, 214, 215, 216,
	217, 220, 224, 225, 226, 228, 229, 230, 231, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 234,
	235, 236, 237, 238, 239, 243, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 258, 259, 262, 265, 266,
	272, 277, 278, 279, 281, 282, 283, 289, 291, 294,
	295, 298, 300, 302, 304, 305, 306, 308, 309, 310,
	311, 314, 315, 316, 317, 318, 319, 321, 329, 330,
	332, 333, 334, 335, 338, 341, 343, 345, 346, 348,
	349, 351, 354, 355, 357, 358, 361, 362, 364, 367,
	370, 373, 375, 376, 377, 378, 381, 382, 383, 384,
	386, 389, 392, 394, 395, 397, 400, 402, 403, 404,
	405, 406, 407, 411, 414, 415, 416, 417, 419, 421,
	422, 423, 425, 427, 428, 429, 430, 431, 432, 435,
	436, 438, 439, 440, 441, 442, 447, 448, 451, 452,
	453, 456, 457, 458, 459, 460, 461, 463, 466, 467,
	471, 473, 476, 477, 483, 484, 486, 487, 489, 490,
	491, 492, 495, 497, 498, 500, 501, 505, 506, 507,
	514, 515, 519, 520, 521, 522, 525, 526, 527, 528,
	529, 530, 532, 533, 534, 535, 539, 540, 542, 543,
	544, 545, 548, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 537, 0, 374,
	536, 478, 365, 0, 0, 0, 903, 0, 906, 926,
	898, 920, 869, 911, 0, 287, 916, 942, 0, 232,
	0, 380, 0, 273, 0, 0, 0, 0, 173, 174,
	175, 0, 496, 0, 0, 285, 244, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 280, 914, 938, 885, 391, 257, 307,
	264, 256, 504, 0, 494, 858, 905, 937, 0, 0,
	0, 940, 339, 0, 918, 0, 850, 912, 0, 198,
	859, 945, 935, 882, 883, 0, 0, 0, 0, 0,
	0, 0, 901, 907, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 0, 0, 0, 868, 186, 261,
	444, 849, 848, 181, 0, 0, 0, 242, 0, 464,
	933, 312, 541, 936, 0, 303, 923, 864, 0, 0,
	0, 861, 313, 180, 207, 867, 888, 379, 924, 450,
	479, 0, 276, 0, 269, 0, 0, 518, 218, 0,
	0, 0, 0, 420, 274, 359, 410, 0, 0, 0,
	426, 516, 0, 0, 0, 368, 0, 0, 0, 0,
	208, 248, 396, 485, 0, 470, 360, 508, 0, 325,
	469, 284, 183, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 488, 513, 221, 455, 462, 443, 547,
	200, 0, 482, 0, 322, 323, 199, 0, 434, 260,
	0, 0, 388, 511, 512, 0, 562, 211, 538, 0,
	212, 0, 371, 509, 0, 0, 0, 0, 0, 0,
	0, 327, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 863, 219, 0, 0, 270, 0, 0, 891,
	290, 0, 0, 0, 0, 424, 0, 465, 503, 0,
	941, 0, 0, 369, 293, 474, 326, 347, 433, 549,
	917, 445, 222, 524, 472, 875, 240, 871, 0, 874,
	909, 910, 876, 0, 0, 0, 241, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 363, 0, 0, 366,
	0, 468, 0, 0, 0, 446, 0, 860, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 517, 328, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 201, 342, 948,
	0, 0, 546, 0, 0, 852, 0, 0, 0, 0,
	263, 884, 0, 296, 297, 336, 0, 0, 904, 0,
	0, 0, 390, 401, 0, 0, 437, 0, 502, 947,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 286, 0, 0, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 372, 0, 385, 387, 0, 393, 0,
	398, 0, 399, 409, 413, 0, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 454, 0,
	0, 0, 0, 0, 480, 481, 0, 0, 510, 523,
	0, 0, 925, 288, 0, 0, 350, 0, 0, 0,
	268, 320, 531, 249, 0, 0, 0, 0, 0, 203,
	227, 0, 0, 0, 0, 0, 657, 0, 412, 0,
	0, 662, 475, 352, 0, 340, 0, 205, 493, 0,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	669, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 174, 175, 734, 743, 744, 745, 742, 741,
	735, 737, 0, 0, 736, 223, 680, 682, 681, 691,
	692, 693, 694, 695, 696, 697, 678, 739, 746, 747,
	391, 257, 307, 264, 256, 504, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 0, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	653, 0, 0, 661, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 663, 0, 0, 0,
	0, 186, 261, 444, 0, 0, 181, 0, 0, 0,
	242, 0, 716, 0, 312, 541, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 686, 687, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 723, 715,
	673, 727, 675, 724, 725, 670, 671, 674, 726, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 718, 660,
	659, 0, 666, 667, 0, 676, 677, 679, 683, 684,
	685, 688, 689, 690, 698, 700, 701, 699, 702, 703,
	704, 707, 708, 709, 710, 705, 706, 711, 658, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 320, 531, 249, 288, 0, 0, 350,
	0, 203, 0, 268, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 227, 475, 352, 0, 340, 0, 205,
	0, 412, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 0, 743, 744, 0,
	285, 244, 0, 1571, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 0,
	0, 0, 391, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 324, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 464, 0, 312, 541, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 320, 531, 249, 288, 0,
	0, 350, 0, 203, 0, 268, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 227, 475, 352, 0, 340,
	0, 205, 0, 412, 408, 292, 187, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 232, 0, 380, 0,
	273, 0, 0, 0, 0, 173, 174, 175, 0, 496,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 0, 0, 0, 391, 257, 307, 264, 256, 504,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 1753,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 186, 261, 444, 0, 0,
	181, 0, 0, 0, 242, 0, 464, 0, 1752, 541,
	0, 0, 303, 0, 0, 995, 996, 0, 957, 313,
	180, 207, 989, 993, 379, 0, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 270, 0, 0, 0, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 0, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 0, 445, 222,
	524, 472, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	296, 297, 336, 0, 0, 0, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 81, 510, 523, 320, 531, 249,
	288, 0, 0, 350, 0, 203, 0, 268, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 227, 475, 352,
	0, 340, 0, 205, 0, 412, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 90, 0, 0, 173, 174, 175,
	0, 496, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 0, 0, 0, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 464, 0,
	312, 541, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 89, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 1728, 0, 0, 1727, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 81, 510, 523, 320,
	531, 249, 288, 0, 0, 350, 0, 203, 0, 268,
	0, 0, 0, 0, 275, 0, 0, 0, 0, 227,
	475, 352, 0, 340, 0, 205, 0, 412, 408, 292,
	187, 0, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 178,
	179, 184, 185, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 202, 204, 206, 209, 210, 213, 214, 215,
	216, 217, 220, 224, 225, 226, 228, 229, 230, 231,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	234, 235, 236, 237, 238, 239, 243, 245, 246, 247,
	250, 251, 252, 253, 254, 255, 258, 259, 262, 265,
	266, 272, 277, 278, 279, 281, 282, 283, 289, 291,
	294, 295, 298, 300, 302, 304, 305, 306, 308, 309,
	310, 311, 314, 315, 316, 317, 318, 319, 321, 329,
	330, 332, 333, 334, 335, 338, 341, 343, 345, 346,
	348, 349, 351, 354, 355, 357, 358, 361, 362, 364,
	367, 370, 373, 375, 376, 377, 378, 381, 382, 383,
	384, 386, 389, 392, 394, 395, 397, 400, 402, 403,
	404, 405, 406, 407, 411, 414, 415, 416, 417, 419,
	421, 422, 423, 425, 427, 428, 429, 430, 431, 432,
	435, 436, 438, 439, 440, 441, 442, 447, 448, 451,
	452, 453, 456, 457, 458, 459, 460, 461, 463, 466,
	467, 471, 473, 476, 477, 483, 484, 486, 487, 489,
	490, 491, 492, 495, 497, 498, 500, 501, 505, 506,
	507, 514, 515, 519, 520, 521, 522, 525, 526, 527,
	528, 529, 530, 532, 533, 534, 535, 539, 540, 542,
	543, 544, 545, 548, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 537, 0,
	374, 536, 478, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	232, 0, 380, 0, 273, 0, 90, 0, 1281, 173,
	174, 175, 0, 496, 0, 0, 285, 244, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 280, 0, 0, 0, 391, 257,
	307, 264, 256, 504, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 186,
	261, 444, 0, 0, 181, 0, 0, 0, 242, 0,
	464, 0, 312, 541, 0, 0, 303, 0, 0, 0,
	0, 0, 0, 313, 180, 207, 0, 0, 379, 0,
	450, 479, 0, 276, 0, 269, 0, 0, 518, 218,
	0, 0, 0, 0, 420, 274, 359, 410, 0, 0,
	0, 426, 516, 0, 0, 0, 368, 0, 0, 0,
	0, 208, 248, 396, 485, 0, 470, 360, 508, 0,
	325, 469, 284, 183, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 488, 513, 221, 455, 462, 443,
	547, 200, 0, 482, 0, 322, 323, 199, 0, 434,
	260, 0, 0, 388, 511, 512, 0, 562, 211, 538,
	0, 212, 0, 371, 509, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 270, 0, 0,
	0, 290, 0, 0, 0, 0, 424, 0, 465, 503,
	0, 0, 0, 0, 369, 293, 474, 326, 347, 433,
	549, 0, 445, 222, 524, 472, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 363, 0, 0,
	366, 0, 468, 0, 0, 0, 446, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 517, 328,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 201, 342,
	89, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 296, 297, 336, 0, 0, 0,
	0, 0, 0, 390, 401, 0, 0, 437, 0, 502,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 286, 0, 0, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 372, 0, 385, 387, 0, 393,
	0, 398, 0, 399, 409, 413, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 0, 454,
	0, 0, 0, 0, 1136, 480, 481, 0, 0, 510,
	523, 320, 531, 249, 288, 0, 0, 350, 0, 203,
	0, 268, 0, 0, 0, 1300, 275, 0, 0, 0,
	0, 227, 475, 352, 0, 340, 0, 205, 0, 412,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	537, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 232, 0, 380, 0, 273, 0, 0, 0,
	0, 173, 174, 175, 0, 1302, 0, 0, 285, 244,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 280, 0, 0, 0,
	391, 257, 307, 264, 256, 504, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 1134, 0, 1135,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 186, 261, 444, 0, 0, 181, 0, 0, 0,
	242, 0, 464, 0, 312, 541, 0, 0, 303, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 446, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	517, 328, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 320, 531, 249, 288, 0, 0, 350,
	0, 203, 0, 268, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 227, 475, 352, 0, 340, 0, 205,
	0, 412, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 1244, 1247, 0, 0,
	285, 244, 1243, 1246, 0, 0, 1242, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 0,
	0, 0, 391, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 464, 0, 312, 541, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 320, 531, 249, 288, 0,
	0, 350, 0, 203, 0, 268, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 227, 475, 352, 0, 340,
	0, 205, 0, 412, 408, 292, 187, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 232, 0, 380, 0,
	273, 0, 0, 0, 0, 173, 174, 175, 0, 496,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 0, 0, 0, 391, 257, 307, 264, 256, 504,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 186, 261, 444, 0, 0,
	181, 0, 0, 0, 242, 0, 464, 0, 312, 541,
	0, 0, 303, 0, 0, 0, 0, 0, 957, 313,
	180, 207, 955, 0, 379, 0, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 270, 0, 0, 0, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 0, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 0, 445, 222,
	524, 472, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	296, 297, 336, 0, 0, 0, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 0, 510, 523, 320, 531, 249,
	288, 0, 0, 350, 0, 203, 0, 268, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 227, 475, 352,
	0, 340, 0, 205, 0, 412, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 0, 0, 1281, 173, 174, 175,
	0, 496, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 0, 0, 0, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 464, 0,
	312, 541, 0, 0, 303, 2524, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 336, 0, 0, 0, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 320,
	531, 249, 288, 0, 0, 350, 0, 203, 0, 268,
	0, 0, 0, 0, 275, 0, 0, 0, 0, 227,
	475, 352, 0, 340, 0, 205, 0, 412, 408, 292,
	187, 0, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 178,
	179, 184, 185, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 202, 204, 206, 209, 210, 213, 214, 215,
	216, 217, 220, 224, 225, 226, 228, 229, 230, 231,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	234, 235, 236, 237, 238, 239, 243, 245, 246, 247,
	250, 251, 252, 253, 254, 255, 258, 259, 262, 265,
	266, 272, 277, 278, 279, 281, 282, 283, 289, 291,
	294, 295, 298, 300, 302, 304, 305, 306, 308, 309,
	310, 311, 314, 315, 316, 317, 318, 319, 321, 329,
	330, 332, 333, 334, 335, 338, 341, 343, 345, 346,
	348, 349, 351, 354, 355, 357, 358, 361, 362, 364,
	367, 370, 373, 375, 376, 377, 378, 381, 382, 383,
	384, 386, 389, 392, 394, 395, 397, 400, 402, 403,
	404, 405, 406, 407, 411, 414, 415, 416, 417, 419,
	421, 422, 423, 425, 427, 428, 429, 430, 431, 432,
	435, 436, 438, 439, 440, 441, 442, 447, 448, 451,
	452, 453, 456, 457, 458, 459, 460, 461, 463, 466,
	467, 471, 473, 476, 477, 483, 484, 486, 487, 489,
	490, 491, 492, 495, 497, 498, 500, 501, 505, 506,
	507, 514, 515, 519, 520, 521, 522, 525, 526, 527,
	528, 529, 530, 532, 533, 534, 535, 539, 540, 542,
	543, 544, 545, 548, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 537, 0,
	374, 536, 478, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	232, 0, 380, 0, 273, 0, 90, 0, 0, 173,
	174, 175, 0, 496, 0, 0, 285, 244, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 280, 0, 0, 0, 391, 257,
	307, 264, 256, 504, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 186,
	261, 444, 0, 0, 181, 0, 0, 0, 242, 0,
	464, 0, 312, 541, 0, 0, 303, 0, 0, 0,
	0, 0, 0, 313, 180, 207, 0, 0, 379, 0,
	450, 479, 0, 276, 0, 269, 0, 0, 518, 218,
	0, 0, 0, 0, 420, 274, 359, 410, 0, 0,
	0, 426, 516, 0, 0, 0, 368, 0, 0, 0,
	0, 208, 248, 396, 485, 0, 470, 360, 508, 0,
	325, 469, 284, 183, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 488, 513, 221, 455, 462, 443,
	547, 200, 0, 482, 0, 322, 323, 199, 0, 434,
	260, 0, 0, 388, 511, 512, 0, 562, 211, 538,
	0, 212, 0, 371, 509, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 270, 0, 0,
	0, 290, 0, 0, 0, 0, 424, 0, 465, 503,
	0, 0, 0, 0, 369, 293, 474, 326, 347, 433,
	549, 0, 445, 222, 524, 472, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 363, 0, 0,
	366, 0, 468, 0, 0, 0, 446, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 517, 328,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 201, 342,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 296, 297, 1728, 0, 0, 1727,
	0, 0, 0, 390, 401, 0, 0, 437, 0, 502,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 286, 0, 0, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 372, 0, 385, 387, 0, 393,
	0, 398, 0, 399, 409, 413, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 0, 454,
	0, 0, 0, 0, 0, 480, 481, 0, 0, 510,
	523, 320, 531, 249, 288, 0, 0, 350, 0, 203,
	0, 268, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 227, 475, 352, 0, 340, 0, 205, 0, 412,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	537, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 232, 0, 380, 0, 273, 0, 0, 0,
	0, 173, 174, 175, 0, 496, 0, 0, 285, 244,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 280, 0, 0, 0,
	391, 257, 307, 264, 256, 504, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 186, 261, 444, 632, 631, 181, 0, 0, 0,
	242, 0, 464, 0, 312, 541, 0, 0, 303, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 446, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	517, 328, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 320, 531, 249, 630, 0, 0, 350,
	0, 203, 0, 268, 0, 0, 0, 1680, 275, 0,
	0, 0, 0, 227, 475, 352, 0, 340, 0, 205,
	0, 412, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 0, 1682, 0, 0,
	285, 244, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 0,
	0, 0, 391, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 464, 0, 312, 541, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 320, 531, 249, 288, 0,
	0, 350, 0, 203, 0, 268, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 227, 475, 352, 0, 340,
	0, 205, 0, 412, 408, 292, 187, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 232, 0, 380, 0,
	273, 0, 0, 0, 0, 173, 174, 175, 0, 496,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 0, 0, 0, 391, 257, 307, 264, 256, 504,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 186, 261, 444, 0, 0,
	181, 0, 0, 0, 242, 0, 464, 0, 312, 541,
	0, 0, 303, 2583, 0, 0, 0, 0, 0, 313,
	180, 207, 0, 0, 379, 0, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 270, 0, 0, 0, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 0, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 0, 445, 222,
	524, 472, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	296, 297, 336, 0, 0, 0, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 0, 510, 523, 320, 531, 249,
	288, 0, 0, 350, 0, 203, 0, 268, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 227, 475, 352,
	0, 340, 0, 205, 0, 412, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 0, 0, 0, 173, 174, 175,
	0, 496, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 0, 0, 0, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 464, 0,
	312, 541, 0, 0, 303, 2524, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 336, 0, 0, 0, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 320,
	531, 249, 288, 0, 0, 350, 0, 203, 0, 268,
	0, 0, 0, 0, 275, 0, 0, 0, 0, 227,
	475, 352, 0, 340, 0, 205, 0, 412, 408, 292,
	187, 0, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 178,
	179, 184, 185, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 202, 204, 206, 209, 210, 213, 214, 215,
	216, 217, 220, 224, 225, 226, 228, 229, 230, 231,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	234, 235, 236, 237, 238, 239, 243, 245, 246, 247,
	250, 251, 252, 253, 254, 255, 258, 259, 262, 265,
	266, 272, 277, 278, 279, 281, 282, 283, 289, 291,
	294, 295, 298, 300, 302, 304, 305, 306, 308, 309,
	310, 311, 314, 315, 316, 317, 318, 319, 321, 329,
	330, 332, 333, 334, 335, 338, 341, 343, 345, 346,
	348, 349, 351, 354, 355, 357, 358, 361, 362, 364,
	367, 370, 373, 375, 376, 377, 378, 381, 382, 383,
	384, 386, 389, 392, 394, 395, 397, 400, 402, 403,
	404, 405, 406, 407, 411, 414, 415, 416, 417, 419,
	421, 422, 423, 425, 427, 428, 429, 430, 431, 432,
	435, 436, 438, 439, 440, 441, 442, 447, 448, 451,
	452, 453, 456, 457, 458, 459, 460, 461, 463, 466,
	467, 471, 473, 476, 477, 483, 484, 486, 487, 489,
	490, 491, 492, 495, 497, 498, 500, 501, 505, 506,
	507, 514, 515, 519, 520, 521, 522, 525, 526, 527,
	528, 529, 530, 532, 533, 534, 535, 539, 540, 542,
	543, 544, 545, 548, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 537, 0,
	374, 536, 478, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	232, 0, 380, 0, 273, 0, 0, 0, 0, 173,
	174, 175, 0, 1567, 0, 0, 285, 244, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 280, 0, 0, 0, 391, 257,
	307, 264, 256, 504, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 186,
	261, 444, 0, 0, 181, 0, 0, 0, 242, 0,
	464, 0, 312, 541, 0, 0, 303, 0, 0, 0,
	0, 0, 0, 313, 180, 207, 0, 0, 379, 0,
	450, 479, 0, 276, 0, 269, 0, 0, 518, 218,
	0, 0, 0, 0, 420, 274, 359, 410, 0, 0,
	0, 426, 516, 0, 0, 0, 368, 0, 0, 0,
	0, 208, 248, 396, 485, 0, 470, 360, 508, 0,
	325, 469, 284, 183, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 488, 513, 221, 455, 462, 443,
	547, 200, 0, 482, 0, 322, 323, 199, 0, 434,
	260, 0, 0, 388, 511, 512, 0, 562, 211, 538,
	0, 212, 0, 371, 509, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 270, 0, 0,
	0, 290, 0, 0, 0, 0, 424, 0, 465, 503,
	0, 0, 0, 0, 369, 293, 474, 326, 347, 433,
	549, 0, 445, 222, 524, 472, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 363, 0, 0,
	366, 0, 468, 0, 0, 0, 446, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 517, 328,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 201, 342,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 296, 297, 336, 0, 0, 0,
	0, 0, 0, 390, 401, 0, 0, 437, 0, 502,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 286, 0, 0, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 372, 0, 385, 387, 0, 393,
	0, 398, 0, 399, 409, 413, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 0, 454,
	0, 0, 0, 0, 0, 480, 481, 0, 0, 510,
	523, 320, 531, 249, 288, 0, 0, 350, 0, 203,
	0, 268, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 227, 475, 352, 0, 340, 0, 205, 0, 412,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	537, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 232, 0, 380, 0, 273, 0, 0, 0,
	0, 173, 174, 175, 0, 2056, 0, 0, 285, 244,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 280, 0, 0, 0,
	391, 257, 307, 264, 256, 504, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 186, 261, 444, 0, 0, 181, 0, 0, 0,
	242, 0, 464, 0, 312, 541, 0, 0, 303, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 446, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	517, 328, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 320, 531, 249, 288, 0, 0, 350,
	0, 203, 0, 268, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 227, 475, 352, 0, 340, 0, 205,
	0, 412, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 0, 496, 0, 0,
	285, 244, 0, 1983, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 0,
	0, 0, 391, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 464, 0, 312, 541, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 320, 531, 249, 288, 0,
	0, 350, 0, 203, 0, 268, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 227, 475, 352, 0, 340,
	0, 205, 0, 412, 408, 292, 187, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 232, 0, 380, 0,
	273, 0, 90, 0, 0, 173, 174, 175, 0, 496,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 0, 0, 0, 391, 257, 307, 264, 256, 504,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 186, 261, 444, 0, 0,
	181, 0, 0, 0, 242, 0, 464, 0, 312, 541,
	0, 0, 303, 0, 0, 0, 0, 0, 0, 313,
	180, 207, 0, 0, 379, 0, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 270, 0, 0, 0, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 0, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 0, 445, 222,
	524, 472, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	296, 297, 336, 0, 0, 0, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 0, 510, 523, 0, 0, 0,
	288, 0, 0, 350, 0, 0, 0, 268, 320, 531,
	249, 1729, 0, 0, 0, 0, 203, 227, 0, 0,
	0, 0, 0, 275, 0, 412, 0, 0, 0, 475,
	352, 0, 340, 0, 205, 493, 0, 408, 292, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 178, 179,
	184, 185, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 202, 204, 206, 209, 210, 213, 214, 215, 216,
	217, 220, 224, 225, 226, 228, 229, 230, 231, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 234,
	235, 236, 237, 238, 239, 243, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 258, 259, 262, 265, 266,
	272, 277, 278, 279, 281, 282, 283, 289, 291, 294,
	295, 298, 300, 302, 304, 305, 306, 308, 309, 310,
	311, 314, 315, 316, 317, 318, 319, 321, 329, 330,
	332, 333, 334, 335, 338, 341, 343, 345, 346, 348,
	349, 351, 354, 355, 357, 358, 361, 362, 364, 367,
	370, 373, 375, 376, 377, 378, 381, 382, 383, 384,
	386, 389, 392, 394, 395, 397, 400, 402, 403, 404,
	405, 406, 407, 411, 414, 415, 416, 417, 419, 421,
	422, 423, 425, 427, 428, 429, 430, 431, 432, 435,
	436, 438, 439, 440, 441, 442, 447, 448, 451, 452,
	453, 456, 457, 458, 459, 460, 461, 463, 466, 467,
	471, 473, 476, 477, 483, 484, 486, 487, 489, 490,
	491, 492, 495, 497, 498, 500, 501, 505, 506, 507,
	514, 515, 519, 520, 521, 522, 525, 526, 527, 528,
	529, 530, 532, 533, 534, 535, 539, 540, 542, 543,
	544, 545, 548, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 537, 0, 374,
	536, 478, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 232,
	0, 380, 0, 273, 0, 0, 0, 0, 173, 174,
	175, 0, 496, 0, 0, 285, 244, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 280, 0, 0, 0, 391, 257, 307,
	264, 256, 504, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 186, 261,
	444, 0, 0, 181, 0, 0, 0, 242, 0, 464,
	0, 312, 541, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 313, 180, 207, 0, 0, 379, 0, 450,
	479, 0, 276, 0, 269, 0, 0, 518, 218, 0,
	0, 0, 0, 420, 274, 359, 410, 0, 0, 0,
	426, 516, 0, 0, 0, 368, 0, 0, 0, 0,
	208, 248, 396, 485, 0, 470, 360, 508, 0, 325,
	469, 284, 183, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 488, 513, 221, 455, 462, 443, 547,
	200, 0, 482, 0, 322, 323, 199, 0, 434, 260,
	0, 0, 388, 511, 512, 0, 562, 211, 538, 0,
	212, 0, 371, 509, 0, 0, 0, 0, 0, 0,
	0, 327, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 270, 0, 0, 0,
	290, 0, 0, 0, 0, 424, 0, 465, 503, 0,
	0, 0, 0, 369, 293, 474, 326, 347, 433, 549,
	0, 445, 222, 524, 472, 0, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 363, 0, 0, 366,
	0, 468, 0, 0, 0, 446, 0, 0, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 517, 328, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 201, 342, 0,
	0, 0, 546, 0, 0, 0, 0, 0, 0, 0,
	263, 0, 0, 296, 297, 336, 0, 0, 0, 0,
	0, 0, 390, 401, 0, 0, 437, 0, 502, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 286, 0, 0, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 372, 0, 385, 387, 0, 393, 0,
	398, 0, 399, 409, 413, 0, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 454, 0,
	0, 0, 0, 0, 480, 481, 0, 0, 510, 523,
	320, 531, 249, 288, 0, 0, 350, 0, 203, 0,
	268, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	227, 475, 352, 0, 340, 0, 205, 0, 412, 408,
	292, 187, 0, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	178, 179, 184, 185, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 202, 204, 206, 209, 210, 213, 214,
	215, 216, 217, 220, 224, 225, 226, 228, 229, 230,
	231, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 234, 235, 236, 237, 238, 239, 243, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 258, 259, 262,
	265, 266, 272, 277, 278, 279, 281, 282, 283, 289,
	291, 294, 295, 298, 300, 302, 304, 305, 306, 308,
	309, 310, 311, 314, 315, 316, 317, 318, 319, 321,
	329, 330, 332, 333, 334, 335, 338, 341, 343, 345,
	346, 348, 349, 351, 354, 355, 357, 358, 361, 362,
	364, 367, 370, 373, 375, 376, 377, 378, 381, 382,
	383, 384, 386, 389, 392, 394, 395, 397, 400, 402,
	403, 404, 405, 406, 407, 411, 414, 415, 416, 417,
	419, 421, 422, 423, 425, 427, 428, 429, 430, 431,
	432, 435, 436, 438, 439, 440, 441, 442, 447, 448,
	451, 452, 453, 456, 457, 458, 459, 460, 461, 463,
	466, 467, 471, 473, 476, 477, 483, 484, 486, 487,
	489, 490, 491, 492, 495, 497, 498, 500, 501, 505,
	506, 507, 514, 515, 519, 520, 521, 522, 525, 526,
	527, 528, 529, 530, 532, 533, 534, 535, 539, 540,
	542, 543, 544, 545, 548, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 537,
	0, 374, 536, 478, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 232, 0, 380, 0, 273, 0, 0, 0, 0,
	173, 174, 175, 0, 496, 0, 0, 285, 244, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 280, 0, 0, 0, 391,
	257, 307, 264, 256, 504, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 324, 0, 0, 0, 0,
	186, 261, 444, 0, 0, 181, 0, 0, 0, 242,
	0, 464, 0, 312, 541, 0, 0, 303, 0, 0,
	0, 0, 0, 0, 313, 180, 207, 0, 0, 379,
	0, 450, 479, 0, 276, 0, 269, 0, 0, 518,
	218, 0, 0, 0, 0, 420, 274, 359, 410, 0,
	0, 0, 426, 516, 0, 0, 0, 368, 0, 0,
	0, 0, 208, 248, 396, 485, 0, 470, 360, 508,
	0, 325, 469, 284, 183, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 488, 513, 221, 455, 462,
	443, 547, 200, 0, 482, 0, 322, 323, 199, 0,
	434, 260, 0, 0, 388, 511, 512, 0, 562, 211,
	538, 0, 212, 0, 371, 509, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 270, 0,
	0, 0, 290, 0, 0, 0, 0, 424, 0, 465,
	503, 0, 0, 0, 0, 369, 293, 474, 326, 347,
	433, 549, 0, 445, 222, 524, 472, 0, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 363, 0,
	0, 366, 0, 468, 0, 0, 0, 446, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 517,
	328, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 356, 0, 201,
	342, 0, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 296, 297, 336, 0, 0,
	0, 0, 0, 0, 390, 401, 0, 0, 437, 0,
	502, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 286, 0, 0, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 372, 0, 385, 387, 0,
	393, 0, 398, 0, 399, 409, 413, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	454, 0, 0, 0, 0, 0, 480, 481, 0, 0,
	510, 523, 320, 531, 249, 288, 0, 0, 350, 0,
	203, 0, 268, 0, 0, 0, 0, 275, 0, 0,
	0, 0, 227, 475, 352, 0, 340, 0, 205, 0,
	412, 408, 292, 187, 0, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 178, 179, 184, 185, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 202, 204, 206, 209, 210,
	213, 214, 215, 216, 217, 220, 224, 225, 226, 228,
	229, 230, 231, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 234, 235, 236, 237, 238, 239, 243,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 258,
	259, 262, 265, 266, 272, 277, 278, 279, 281, 282,
	283, 289, 291, 294, 295, 298, 300, 302, 304, 305,
	306, 308, 309, 310, 311, 314, 315, 316, 317, 318,
	319, 321, 329, 330, 332, 333, 334, 335, 338, 341,
	343, 345, 346, 348, 349, 351, 354, 355, 357, 358,
	361, 362, 364, 367, 370, 373, 375, 376, 377, 378,
	381, 382, 383, 384, 386, 389, 392, 394, 395, 397,
	400, 402, 403, 404, 405, 406, 407, 411, 414, 415,
	416, 417, 419, 421, 422, 423, 425, 427, 428, 429,
	430, 431, 432, 435, 436, 438, 439, 440, 441, 442,
	447, 448, 451, 452, 453, 456, 457, 458, 459, 460,
	461, 463, 466, 467, 471, 473, 476, 477, 483, 484,
	486, 487, 489, 490, 491, 492, 495, 497, 498, 500,
	501, 505, 506, 507, 514, 515, 519, 520, 521, 522,
	525, 526, 527, 528, 529, 530, 532, 533, 534, 535,
	539, 540, 542, 543, 544, 545, 548, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 537, 0, 374, 536, 478, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 232, 0, 380, 0, 273, 0, 0,
	0, 0, 173, 174, 175, 0, 496, 0, 0, 285,
	244, 0, 0, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 280, 0, 0,
	0, 391, 257, 307, 264, 256, 504, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 186, 261, 444, 0, 0, 181, 0, 0,
	0, 242, 0, 464, 0, 312, 541, 0, 0, 303,
	0, 0, 0, 0, 0, 0, 313, 180, 207, 0,
	0, 379, 0, 450, 479, 0, 276, 0, 269, 0,
	0, 518, 218, 0, 0, 0, 0, 420, 274, 359,
	410, 0, 0, 0, 426, 516, 0, 0, 0, 368,
	0, 0, 0, 0, 208, 248, 396, 485, 0, 470,
	360, 508, 0, 325, 469, 284, 183, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 488, 513, 221,
	455, 462, 443, 547, 200, 0, 482, 0, 322, 323,
	199, 0, 434, 260, 0, 0, 388, 511, 512, 0,
	562, 211, 538, 0, 212, 0, 371, 509, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	270, 0, 0, 0, 290, 0, 0, 0, 0, 424,
	0, 465, 503, 0, 0, 0, 0, 369, 293, 474,
	326, 347, 433, 549, 0, 445, 222, 524, 472, 0,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	363, 0, 0, 366, 0, 468, 0, 0, 0, 446,
	0, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 517, 328, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	0, 201, 342, 1523, 0, 0, 546, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 296, 297, 336,
	0, 0, 0, 0, 0, 0, 390, 401, 0, 0,
	437, 0, 502, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 286, 0, 0, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 372, 0, 385,
	387, 0, 393, 0, 398, 0, 399, 409, 413, 0,
	0, 418, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 454, 0, 0, 0, 0, 0, 480, 481,
	0, 0, 510, 523, 320, 531, 249, 288, 0, 0,
	350, 0, 203, 0, 268, 0, 0, 0, 0, 275,
	0, 0, 0, 0, 227, 475, 352, 0, 340, 0,
	205, 0, 412, 408, 292, 187, 0, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 178, 179, 184, 185, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 202, 204, 206,
	209, 210, 213, 214, 215, 216, 217, 220, 224, 225,
	226, 228, 229, 230, 231, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 234, 235, 236, 237, 238,
	239, 243, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 258, 259, 262, 265, 266, 272, 277, 278, 279,
	281, 282, 283, 289, 291, 294, 295, 298, 300, 302,
	304, 305, 306, 308, 309, 310, 311, 314, 315, 316,
	317, 318, 319, 321, 329, 330, 332, 333, 334, 335,
	338, 341, 343, 345, 346, 348, 349, 351, 354, 355,
	357, 358, 361, 362, 364, 367, 370, 373, 375, 376,
	377, 378, 381, 382, 383, 384, 386, 389, 392, 394,
	395, 397, 400, 402, 403, 404, 405, 406, 407, 411,
	414, 415, 416, 417, 419, 421, 422, 423, 425, 427,
	428, 429, 430, 431, 432, 435, 436, 438, 439, 440,
	441, 442, 447, 448, 451, 452, 453, 456, 457, 458,
	459, 460, 461, 463, 466, 467, 471, 473, 476, 477,
	483, 484, 486, 487, 489, 490, 491, 492, 495, 497,
	498, 500, 501, 505, 506, 507, 514, 515, 519, 520,
	521, 522, 525, 526, 527, 528, 529, 530, 532, 533,
	534, 535, 539, 540, 542, 543, 544, 545, 548, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 537, 0, 374, 536, 478, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 232, 0, 380, 0, 273,
	0, 1402, 0, 0, 173, 174, 175, 0, 496, 0,
	0, 285, 244, 0, 0, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 280,
	0, 0, 0, 391, 257, 307, 264, 256, 504, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 0, 0, 186, 261, 444, 0, 0, 181,
	0, 0, 0, 242, 0, 464, 0, 312, 541, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 313, 180,
	207, 0, 0, 379, 0, 450, 479, 0, 276, 0,
	269, 0, 0, 518, 218, 0, 0, 0, 0, 420,
	274, 359, 410, 0, 0, 0, 426, 516, 0, 0,
	0, 368, 0, 0, 0, 0, 208, 248, 396, 485,
	0, 470, 360, 508, 0, 325, 469, 284, 183, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 488,
	513, 221, 455, 462, 443, 547, 200, 0, 482, 0,
	322, 323, 199, 0, 434, 260, 0, 0, 388, 511,
	512, 0, 562, 211, 538, 0, 212, 0, 371, 509,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 270, 0, 0, 0, 290, 0, 0, 0,
	0, 424, 0, 465, 503, 0, 0, 0, 0, 369,
	293, 474, 326, 347, 433, 549, 0, 445, 222, 524,
	472, 0, 240, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 363, 0, 0, 366, 0, 468, 0, 0,
	0, 446, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 517, 328, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 356, 0, 201, 342, 0, 0, 0, 546, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 296,
	297, 336, 0, 0, 0, 0, 0, 0, 390, 401,
	0, 0, 437, 0, 502, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 286, 0, 0,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 372,
	0, 385, 387, 0, 393, 0, 398, 0, 399, 409,
	413, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 454, 0, 0, 0, 0, 0,
	480, 481, 0, 0, 510, 523, 0, 0, 0, 288,
	0, 0, 350, 0, 0, 0, 268, 320, 531, 249,
	0, 0, 0, 0, 0, 203, 227, 0, 0, 0,
	0, 0, 275, 0, 412, 0, 0, 1322, 475, 352,
	0, 340, 0, 205, 493, 0, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 0, 0, 0, 173, 174, 175,
	0, 1321, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 0, 0, 0, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 464, 0,
	312, 541, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 336, 0, 0, 0, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 320,
	531, 249, 288, 0, 0, 350, 0, 203, 0, 268,
	0, 0, 0, 0, 275, 0, 0, 1306, 0, 227,
	475, 352, 0, 340, 0, 205, 0, 412, 408, 292,
	187, 0, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 178,
	179, 184, 185, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 202, 204, 206, 209, 210, 213, 214, 215,
	216, 217, 220, 224, 225, 226, 228, 229, 230, 231,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	234, 235, 236, 237, 238, 239, 243, 245, 246, 247,
	250, 251, 252, 253, 254, 255, 258, 259, 262, 265,
	266, 272, 277, 278, 279, 281, 282, 283, 289, 291,
	294, 295, 298, 300, 302, 304, 305, 306, 308, 309,
	310, 311, 314, 315, 316, 317, 318, 319, 321, 329,
	330, 332, 333, 334, 335, 338, 341, 343, 345, 346,
	348, 349, 351, 354, 355, 357, 358, 361, 362, 364,
	367, 370, 373, 375, 376, 377, 378, 381, 382, 383,
	384, 386, 389, 392, 394, 395, 397, 400, 402, 403,
	404, 405, 406, 407, 411, 414, 415, 416, 417, 419,
	421, 422, 423, 425, 427, 428, 429, 430, 431, 432,
	435, 436, 438, 439, 440, 441, 442, 447, 448, 451,
	452, 453, 456, 457, 458, 459, 460, 461, 463, 466,
	467, 471, 473, 476, 477, 483, 484, 486, 487, 489,
	490, 491, 492, 495, 497, 498, 500, 501, 505, 506,
	507, 514, 515, 519, 520, 521, 522, 525, 526, 527,
	528, 529, 530, 532, 533, 534, 535, 539, 540, 542,
	543, 544, 545, 548, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 537, 0,
	374, 536, 478, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	232, 0, 380, 0, 273, 0, 0, 0, 0, 173,
	174, 175, 0, 496, 0, 0, 285, 244, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 280, 0, 0, 0, 391, 257,
	307, 264, 256, 504, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 186,
	261, 444, 0, 0, 181, 0, 0, 0, 242, 0,
	464, 0, 312, 541, 0, 0, 303, 0, 0, 0,
	0, 0, 0, 313, 180, 207, 0, 0, 379, 0,
	450, 479, 0, 276, 0, 269, 0, 0, 518, 218,
	0, 0, 0, 0, 420, 274, 359, 410, 0, 0,
	0, 426, 516, 0, 0, 0, 368, 0, 0, 0,
	0, 208, 248, 396, 485, 0, 470, 360, 508, 0,
	325, 469, 284, 183, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 488, 513, 221, 455, 462, 443,
	547, 200, 0, 482, 0, 322, 323, 199, 0, 434,
	260, 0, 0, 388, 511, 512, 0, 562, 211, 538,
	0, 212, 0, 371, 509, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 270, 0, 0,
	0, 290, 0, 0, 0, 0, 424, 0, 465, 503,
	0, 0, 0, 0, 369, 293, 474, 326, 347, 433,
	549, 0, 445, 222, 524, 472, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 363, 0, 0,
	366, 0, 468, 0, 0, 0, 446, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 517, 328,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 201, 342,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 296, 297, 336, 0, 0, 0,
	0, 0, 0, 390, 401, 0, 0, 437, 0, 502,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 286, 0, 0, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 372, 0, 385, 387, 0, 393,
	0, 398, 0, 399, 409, 413, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 0, 454,
	0, 0, 0, 0, 0, 480, 481, 0, 0, 510,
	523, 320, 531, 249, 288, 0, 0, 350, 0, 203,
	0, 268, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 227, 475, 352, 0, 340, 0, 205, 0, 412,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	537, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 232, 0, 380, 0, 273, 0, 0, 0,
	0, 173, 174, 175, 0, 496, 0, 0, 285, 244,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 280, 0, 0, 0,
	391, 257, 307, 264, 256, 504, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 186, 261, 444, 0, 0, 181, 0, 0, 0,
	242, 0, 464, 587, 312, 541, 0, 0, 303, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 446, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	517, 328, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 320, 531, 249, 288, 0, 0, 350,
	0, 203, 0, 268, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 227, 475, 352, 0, 340, 0, 205,
	0, 412, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 0, 496, 0, 0,
	285, 244, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 0,
	0, 0, 391, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 464, 0, 312, 541, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 2588, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 320, 531, 249, 288, 0,
	0, 350, 0, 203, 0, 268, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 227, 475, 352, 0, 340,
	0, 205, 0, 412, 408, 292, 187, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 232, 0, 380, 0,
	273, 0, 0, 0, 0, 173, 174, 175, 0, 496,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 0, 0, 0, 391, 257, 307, 264, 256, 504,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 186, 261, 444, 0, 0,
	181, 0, 0, 0, 242, 0, 464, 0, 312, 541,
	0, 0, 303, 0, 0, 0, 0, 0, 0, 313,
	180, 207, 0, 0, 379, 0, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 270, 0, 0, 0, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 0, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 0, 445, 222,
	524, 472, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	296, 297, 336, 0, 0, 0, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 0, 510, 523, 320, 531, 249,
	288, 0, 0, 350, 0, 203, 0, 268, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 227, 475, 352,
	0, 340, 0, 205, 0, 412, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 0, 0, 0, 173, 2374, 175,
	0, 496, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 0, 0, 0, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 464, 0,
	312, 541, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 336, 0, 0, 0, 0, 0,
	0, 390, 401, 0, 0, 437, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 320,
	531, 249, 288, 0, 0, 350, 0, 203, 0, 268,
	0, 0, 0, 0, 275, 0, 0, 0, 0, 227,
	475, 352, 0, 340, 0, 205, 0, 412, 408, 292,
	187, 0, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 178,
	179, 184, 185, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 202, 204, 206, 209, 210, 213, 214, 215,
	216, 217, 220, 224, 225, 226, 228, 229, 230, 231,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	234, 235, 236, 237, 238, 239, 243, 245, 246, 247,
	250, 251, 252, 253, 254, 255, 258, 259, 262, 265,
	266, 272, 277, 278, 279, 281, 282, 283, 289, 291,
	294, 295, 298, 300, 302, 304, 305, 306, 308, 309,
	310, 311, 314, 315, 316, 317, 318, 319, 321, 329,
	330, 332, 333, 334, 335, 338, 341, 343, 345, 346,
	348, 349, 351, 354, 355, 357, 358, 361, 362, 364,
	367, 370, 373, 375, 376, 377, 378, 381, 382, 383,
	384, 386, 389, 392, 394, 395, 397, 400, 402, 403,
	404, 405, 406, 407, 411, 414, 415, 416, 417, 419,
	421, 422, 423, 425, 427, 428, 429, 430, 431, 432,
	435, 436, 438, 439, 440, 441, 442, 447, 448, 451,
	452, 453, 456, 457, 458, 459, 460, 461, 463, 466,
	467, 471, 473, 476, 477, 483, 484, 486, 487, 489,
	490, 491, 492, 495, 497, 498, 500, 501, 505, 506,
	507, 514, 515, 519, 520, 521, 522, 525, 526, 527,
	528, 529, 530, 532, 533, 534, 535, 539, 540, 542,
	543, 544, 545, 548, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 537, 0,
	374, 536, 478, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	232, 0, 380, 0, 273, 0, 0, 0, 0, 173,
	1979, 175, 0, 496, 0, 0, 285, 244, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 280, 0, 0, 0, 391, 257,
	307, 264, 256, 504, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 186,
	261, 444, 0, 0, 181, 0, 0, 0, 242, 0,
	464, 0, 312, 541, 0, 0, 303, 0, 0, 0,
	0, 0, 0, 313, 180, 207, 0, 0, 379, 0,
	450, 479, 0, 276, 0, 269, 0, 0, 518, 218,
	0, 0, 0, 0, 420, 274, 359, 410, 0, 0,
	0, 426, 516, 0, 0, 0, 368, 0, 0, 0,
	0, 208, 248, 396, 485, 0, 470, 360, 508, 0,
	325, 469, 284, 183, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 488, 513, 221, 455, 462, 443,
	547, 200, 0, 482, 0, 322, 323, 199, 0, 434,
	260, 0, 0, 388, 511, 512, 0, 562, 211, 538,
	0, 212, 0, 371, 509, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 270, 0, 0,
	0, 290, 0, 0, 0, 0, 424, 0, 465, 503,
	0, 0, 0, 0, 369, 293, 474, 326, 347, 433,
	549, 0, 445, 222, 524, 472, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 363, 0, 0,
	366, 0, 468, 0, 0, 0, 446, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 517, 328,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 201, 342,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 296, 297, 336, 0, 0, 0,
	0, 0, 0, 390, 401, 0, 0, 437, 0, 502,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 286, 0, 0, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 372, 0, 385, 387, 0, 393,
	0, 398, 0, 399, 409, 413, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 0, 454,
	0, 0, 0, 0, 0, 480, 481, 0, 0, 510,
	523, 320, 531, 249, 288, 0, 0, 350, 0, 203,
	0, 268, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 227, 475, 352, 0, 340, 0, 205, 0, 412,
	408, 292, 187, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 178, 179, 184, 185, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 202, 204, 206, 209, 210, 213,
	214, 215, 216, 217, 220, 224, 225, 226, 228, 229,
	230, 231, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 234, 235, 236, 237, 238, 239, 243, 245,
	246, 247, 250, 251, 252, 253, 254, 255, 258, 259,
	262, 265, 266, 272, 277, 278, 279, 281, 282, 283,
	289, 291, 294, 295, 298, 300, 302, 304, 305, 306,
	308, 309, 310, 311, 314, 315, 316, 317, 318, 319,
	321, 329, 330, 332, 333, 334, 335, 338, 341, 343,
	345, 346, 348, 349, 351, 354, 355, 357, 358, 361,
	362, 364, 367, 370, 373, 375, 376, 377, 378, 381,
	382, 383, 384, 386, 389, 392, 394, 395, 397, 400,
	402, 403, 404, 405, 406, 407, 411, 414, 415, 416,
	417, 419, 421, 422, 423, 425, 427, 428, 429, 430,
	431, 432, 435, 436, 438, 439, 440, 441, 442, 447,
	448, 451, 452, 453, 456, 457, 458, 459, 460, 461,
	463, 466, 467, 471, 473, 476, 477, 483, 484, 486,
	487, 489, 490, 491, 492, 495, 497, 498, 500, 501,
	505, 506, 507, 514, 515, 519, 520, 521, 522, 525,
	526, 527, 528, 529, 530, 532, 533, 534, 535, 539,
	540, 542, 543, 544, 545, 548, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	537, 0, 374, 536, 478, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 232, 0, 380, 0, 273, 0, 0, 0,
	0, 173, 174, 175, 0, 1682, 0, 0, 285, 244,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 280, 0, 0, 0,
	391, 257, 307, 264, 256, 504, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 186, 261, 444, 0, 0, 181, 0, 0, 0,
	242, 0, 464, 0, 312, 541, 0, 0, 303, 0,
	0, 0, 0, 0, 0, 313, 180, 207, 0, 0,
	379, 0, 450, 479, 0, 276, 0, 269, 0, 0,
	518, 218, 0, 0, 0, 0, 420, 274, 359, 410,
	0, 0, 0, 426, 516, 0, 0, 0, 368, 0,
	0, 0, 0, 208, 248, 396, 485, 0, 470, 360,
	508, 0, 325, 469, 284, 183, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 488, 513, 221, 455,
	462, 443, 547, 200, 0, 482, 0, 322, 323, 199,
	0, 434, 260, 0, 0, 388, 511, 512, 0, 562,
	211, 538, 0, 212, 0, 371, 509, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 270,
	0, 0, 0, 290, 0, 0, 0, 0, 424, 0,
	465, 503, 0, 0, 0, 0, 369, 293, 474, 326,
	347, 433, 549, 0, 445, 222, 524, 472, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 363,
	0, 0, 366, 0, 468, 0, 0, 0, 446, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	517, 328, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	201, 342, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 296, 297, 336, 0,
	0, 0, 0, 0, 0, 390, 401, 0, 0, 437,
	0, 502, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 286, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 372, 0, 385, 387,
	0, 393, 0, 398, 0, 399, 409, 413, 0, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 454, 0, 0, 0, 0, 0, 480, 481, 0,
	0, 510, 523, 320, 531, 249, 288, 0, 0, 350,
	0, 203, 0, 268, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 227, 475, 352, 0, 340, 0, 205,
	0, 412, 408, 292, 187, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 178, 179, 184, 185, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 202, 204, 206, 209,
	210, 213, 214, 215, 216, 217, 220, 224, 225, 226,
	228, 229, 230, 231, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 234, 235, 236, 237, 238, 239,
	243, 245, 246, 247, 250, 251, 252, 253, 254, 255,
	258, 259, 262, 265, 266, 272, 277, 278, 279, 281,
	282, 283, 289, 291, 294, 295, 298, 300, 302, 304,
	305, 306, 308, 309, 310, 311, 314, 315, 316, 317,
	318, 319, 321, 329, 330, 332, 333, 334, 335, 338,
	341, 343, 345, 346, 348, 349, 351, 354, 355, 357,
	358, 361, 362, 364, 367, 370, 373, 375, 376, 377,
	378, 381, 382, 383, 384, 386, 389, 392, 394, 395,
	397, 400, 402, 403, 404, 405, 406, 407, 411, 414,
	415, 416, 417, 419, 421, 422, 423, 425, 427, 428,
	429, 430, 431, 432, 435, 436, 438, 439, 440, 441,
	442, 447, 448, 451, 452, 453, 456, 457, 458, 459,
	460, 461, 463, 466, 467, 471, 473, 476, 477, 483,
	484, 486, 487, 489, 490, 491, 492, 495, 497, 498,
	500, 501, 505, 506, 507, 514, 515, 519, 520, 521,
	522, 525, 526, 527, 528, 529, 530, 532, 533, 534,
	535, 539, 540, 542, 543, 544, 545, 548, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 537, 0, 374, 536, 478, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 232, 0, 380, 0, 273, 0,
	0, 0, 0, 173, 174, 175, 0, 1302, 0, 0,
	285, 244, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 280, 0,
	0, 0, 391, 257, 307, 264, 256, 504, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 186, 261, 444, 0, 0, 181, 0,
	0, 0, 242, 0, 464, 0, 312, 541, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 313, 180, 207,
	0, 0, 379, 0, 450, 479, 0, 276, 0, 269,
	0, 0, 518, 218, 0, 0, 0, 0, 420, 274,
	359, 410, 0, 0, 0, 426, 516, 0, 0, 0,
	368, 0, 0, 0, 0, 208, 248, 396, 485, 0,
	470, 360, 508, 0, 325, 469, 284, 183, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 488, 513,
	221, 455, 462, 443, 547, 200, 0, 482, 0, 322,
	323, 199, 0, 434, 260, 0, 0, 388, 511, 512,
	0, 562, 211, 538, 0, 212, 0, 371, 509, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 270, 0, 0, 0, 290, 0, 0, 0, 0,
	424, 0, 465, 503, 0, 0, 0, 0, 369, 293,
	474, 326, 347, 433, 549, 0, 445, 222, 524, 472,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 363, 0, 0, 366, 0, 468, 0, 0, 0,
	446, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 517, 328, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 201, 342, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 296, 297,
	336, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	0, 437, 0, 502, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 286, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 372, 0,
	385, 387, 0, 393, 0, 398, 0, 399, 409, 413,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 454, 0, 0, 0, 0, 0, 480,
	481, 0, 0, 510, 523, 320, 531, 249, 288, 0,
	0, 350, 0, 203, 0, 268, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 227, 475, 352, 0, 340,
	0, 205, 0, 412, 408, 292, 187, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 178, 179, 184, 185, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 202, 204,
	206, 209, 210, 213, 214, 215, 216, 217, 220, 224,
	225, 226, 228, 229, 230, 231, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 234, 235, 236, 237,
	238, 239, 243, 245, 246, 247, 250, 251, 252, 253,
	254, 255, 258, 259, 262, 265, 266, 272, 277, 278,
	279, 281, 282, 283, 289, 291, 294, 295, 298, 300,
	302, 304, 305, 306, 308, 309, 310, 311, 314, 315,
	316, 317, 318, 319, 321, 329, 330, 332, 333, 334,
	335, 338, 341, 343, 345, 346, 348, 349, 351, 354,
	355, 357, 358, 361, 362, 364, 367, 370, 373, 375,
	376, 377, 378, 381, 382, 383, 384, 386, 389, 392,
	394, 395, 397, 400, 402, 403, 404, 405, 406, 407,
	411, 414, 415, 416, 417, 419, 421, 422, 423, 425,
	427, 428, 429, 430, 431, 432, 435, 436, 438, 439,
	440, 441, 442, 447, 448, 451, 452, 453, 456, 457,
	458, 459, 460, 461, 463, 466, 467, 471, 473, 476,
	477, 483, 484, 486, 487, 489, 490, 491, 492, 495,
	497, 498, 500, 501, 505, 506, 507, 514, 515, 519,
	520, 521, 522, 525, 526, 527, 528, 529, 530, 532,
	533, 534, 535, 539, 540, 542, 543, 544, 545, 548,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 537, 0, 374, 536, 478, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 232, 0, 380, 0,
	273, 0, 0, 0, 0, 173, 174, 175, 0, 1112,
	0, 0, 285, 244, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	280, 0, 0, 0, 391, 257, 307, 264, 256, 504,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 186, 261, 444, 0, 0,
	181, 0, 0, 0, 242, 0, 464, 0, 312, 541,
	0, 0, 303, 0, 0, 0, 0, 0, 0, 313,
	180, 207, 0, 0, 379, 0, 450, 479, 0, 276,
	0, 269, 0, 0, 518, 218, 0, 0, 0, 0,
	420, 274, 359, 410, 0, 0, 0, 426, 516, 0,
	0, 0, 368, 0, 0, 0, 0, 208, 248, 396,
	485, 0, 470, 360, 508, 0, 325, 469, 284, 183,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	488, 513, 221, 455, 462, 443, 547, 200, 0, 482,
	0, 322, 323, 199, 0, 434, 260, 0, 0, 388,
	511, 512, 0, 562, 211, 538, 0, 212, 0, 371,
	509, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 270, 0, 0, 0, 290, 0, 0,
	0, 0, 424, 0, 465, 503, 0, 0, 0, 0,
	369, 293, 474, 326, 347, 433, 549, 0, 445, 222,
	524, 472, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 363, 0, 0, 366, 0, 468, 0,
	0, 0, 446, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 517, 328, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 201, 342, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	296, 297, 336, 0, 0, 0, 0, 0, 0, 390,
	401, 0, 0, 437, 0, 502, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 286, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	372, 0, 385, 387, 0, 393, 0, 398, 0, 399,
	409, 413, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 454, 0, 0, 0, 0,
	0, 480, 481, 0, 0, 510, 523, 320, 531, 249,
	288, 0, 0, 350, 0, 203, 0, 268, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 227, 475, 352,
	0, 340, 0, 205, 0, 412, 408, 292, 187, 0,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 179, 184,
	185, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	202, 204, 206, 209, 210, 213, 214, 215, 216, 217,
	220, 224, 225, 226, 228, 229, 230, 231, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 234, 235,
	236, 237, 238, 239, 243, 245, 246, 247, 250, 251,
	252, 253, 254, 255, 258, 259, 262, 265, 266, 272,
	277, 278, 279, 281, 282, 283, 289, 291, 294, 295,
	298, 300, 302, 304, 305, 306, 308, 309, 310, 311,
	314, 315, 316, 317, 318, 319, 321, 329, 330, 332,
	333, 334, 335, 338, 341, 343, 345, 346, 348, 349,
	351, 354, 355, 357, 358, 361, 362, 364, 367, 370,
	373, 375, 376, 377, 378, 381, 382, 383, 384, 386,
	389, 392, 394, 395, 397, 400, 402, 403, 404, 405,
	406, 407, 411, 414, 415, 416, 417, 419, 421, 422,
	423, 425, 427, 428, 429, 430, 431, 432, 435, 436,
	438, 439, 440, 441, 442, 447, 448, 451, 452, 453,
	456, 457, 458, 459, 460, 461, 463, 466, 467, 471,
	473, 476, 477, 483, 484, 486, 487, 489, 490, 491,
	492, 495, 497, 498, 500, 501, 505, 506, 507, 514,
	515, 519, 520, 521, 522, 525, 526, 527, 528, 529,
	530, 532, 533, 534, 535, 539, 540, 542, 543, 544,
	545, 548, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 537, 0, 374, 536,
	478, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 232, 0,
	380, 0, 273, 0, 0, 0, 0, 173, 174, 175,
	0, 496, 0, 0, 285, 244, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 280, 0, 0, 0, 391, 257, 307, 264,
	256, 504, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 186, 261, 444,
	0, 0, 181, 0, 0, 0, 242, 0, 464, 0,
	312, 541, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 313, 180, 207, 0, 0, 379, 0, 450, 479,
	0, 276, 0, 269, 0, 0, 518, 218, 0, 0,
	0, 0, 420, 274, 359, 410, 0, 0, 0, 426,
	516, 0, 0, 0, 368, 0, 0, 0, 0, 208,
	248, 396, 485, 0, 470, 360, 508, 0, 325, 469,
	284, 183, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 488, 513, 221, 455, 462, 443, 547, 200,
	0, 482, 0, 322, 323, 199, 0, 434, 260, 0,
	0, 388, 511, 512, 0, 562, 211, 538, 0, 212,
	0, 371, 509, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 270, 0, 0, 0, 290,
	0, 0, 0, 0, 424, 0, 465, 503, 0, 0,
	0, 0, 369, 293, 474, 326, 347, 433, 549, 0,
	445, 222, 524, 472, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 363, 0, 0, 366, 0,
	468, 0, 0, 0, 446, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 517, 328, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 201, 342, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 296, 297, 336, 0, 0, 0, 0, 0,
	0, 390, 401, 0, 0, 810, 0, 502, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	286, 0, 0, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 372, 0, 385, 387, 0, 393, 0, 398,
	0, 399, 409, 413, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 454, 0, 0,
	0, 0, 0, 480, 481, 0, 0, 510, 523, 0,
	0, 0, 288, 0, 0, 350, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 493,
}

var psqPact = [...]int{
	3652, -1000, -702, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1440, 1709, -1000, 1373,
	-1000, -1000, -1000, 1660, -1000, 207, 891, -1000, 1434, -198,
	2805, 1161, -198, -1000, 43564, 26, -1000, 41960, 23, -177,
	43564, -1000, -212, -1000, -220, 43564, -206, 30710, -1000, -1000,
	-624, 13495, 1260, -321, -322, 43564, -1000, -1000, -1000, 1591,
	1115, -1000, 245, -1000, -1000, -1000, -1000, -1000, -1000, 48376,
	-1000, -1000, -1000, -1000, -1000, 1656, 134, 43564, -1000, 1526,
	1115, -1000, 13495, 1574, 1527, -1000, 11869, -1000, 11869, -12,
	-1000, -1000, 21036, -1000, -1000, 28304, 43564, 36324, -50, -1000,
	1434, -1000, -1000, -1000, -231, -1000, -1000, -453, -1000, 776,
	770, -1000, -1000, 525, 130, -20, -24, -24, 5, 1386,
	1378, 267, 258, 171, -1000, 452, 188, -484, -486, -1000,
	-60, 188, 188, 188, -147, 188, 188, 188, 188, 188,
	188, 188, 188, 188, -1000, 1, -1000, -163, 1434, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43564, -213, 43564, -1000, 67,
	43564, 572, 572, -317, 572, 572, 572, -214, 410, -330,
	-1000, -215, -152, -223, -149, 539, -154, -1000, -226, -1000,
	19354, -168, 19354, -1000, 1419, -1000, -1000, -1000, -1000, 433,
	-1000, -2, -1000, -1000, -1000, -1000, -1000, 43564, 47574, 255,
	200, -1000, -1000, -1000, -1000, -265, -1000, -1000, 553, 642,
	13495, 483, -1000, 1213, 116, -1000, -1000, -1000, -1000, -1000,
	51, 14308, 14308, 14308, 14308, -1000, -1000, 780, 780, 780,
	780, 14308, 780, 22690, 780, 780, 780, 780, 13495, 780,
	780, 780, -1000, 780, 780, 780, 780, 780, 780, 780,
	780, 780, 780, 780, 780, 780, 780, 780, 780, 780,
	780, 780, 780, 780, 780, 780, 780, 780, 780, 780,
	780, 780, 780, 780, 780, 780, 780, 780, 780, 780,
	780, 780, 780, 66, 780, 780, 780, 780, 780, -1000,
	-1000, -1000, -1000, 780, 780, 780, 780, 780, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27502, -1000,
	10243, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 43564, -1000, 780, 43564, 43564, -113, 1526, 1115, -1000,
	1591, 1565, 245, -1000, 1674, 1144, 911, 485, 1115, 723,
	43564, -1000, 810, -1000, 1024, -1000, -1000, -1000, -1000, -1000,
	878, 13495, -1000, -1000, 1245, 1632, -1000, 26700, 65, 1366,
	1611, 41158, -1000, -12, -12, 752, 20195, -363, -1000, -1000,
	-1000, 189, 40356, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1419,
	766, 43564, -1000, -1000, 4099, 437, -1000, 884, -1000, 763,
	-1000, 817, 13495, -167, 22, 437, 16, 14, 13, -1000,
	-1000, -411, -1000, 437, -1000, -1000, -1000, -1000, 188, 188,
	188, 398, 2376, 2805, -1000, -1000, -1000, -1000, 39543, 437,
	-1000, 880, -1000, 246, 75, 108, 108, 437, -1000, -1000,
	43564, 437, 437, 43564, 43564, -53, -1000, -1000, -1000, -1000,
	43564, 437, 241, 240, 437, 437, 43564, 437, -1000, -1000,
	1110, -1000, -1000, -1000, 188, 188, 470, 467, 462, 188,
	461, -132, 1445, 458, 179, 1443, 1439, 43564, 852, 480,
	-1000, -370, -1000, -1000, -171, 196, 437, 184, 1434, 733,
	-3, 19, 437, -17, -17, 43564, -1000, 21877, -1000, -1000,
	457, 13495, -1000, 550, 539, 539, -1000, -1000, -1000, -1000,
	-1000, 572, 43564, 550, -1000, -1000, -1000, 539, 572, 43564,
	572, 572, 572, 572, 539, 539, 539, 572, 43564, 43564,
	43564, 43564, 43564, 43564, 43564, 43564, 43564, 19354, -1000, 1252,
	-1000, -1000, -1000, 19354, 19354, -1000, -1000, -1000, -207, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -400, 729,
	38741, -1000, -629, -630, -632, -1000, -1000, -1000, -635, -641,
	-1000, -1000, -1000, 13495, 13495, 13495, -506, -1000, 352, 14308,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 336, 182, 14308,
	14308, 14308, 1338, 14308, 14308, 14308, 14308, 14308, 14308, 14308,
	14308, 14308, 14308, 14308, 14308, 33918, 6803, 6803, 116, 116,
	116, 116, -1000, 11869, 13495, 13495, 116, -1000, 437, 37939,
	11869, 11869, 13495, 1393, 206, 642, 43564, -1000, 485, -1000,
	-1000, -1000, 413, -1000, 43564, 43564, 64, 13495, 13495, 13495,
	13495, 13495, 13495, 9430, 13495, 13495, 13495, 13495, 13495, 13495,
	13495, 13495, 13495, 13495, 13495, 13495, 13495, 13495, 13495, 13495,
	13495, 13495, 13495, 13495, 13495, 13495, 13495, 13495, 13495, 13495,
	8617, 21877, 11869, 11869, 11869, 11869, 11869, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	899, 947, 586, -1000, 725, -1000, -472, 31512, 13495, 1608,
	915, 43564, -1000, -1000, -1000, 1526, -1000, 1526, 899, 1564,
	1030, 11869, -1000, -1000, 1564, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 485, -1000, 43564, 723, 1492, 43564, 1019,
	13495, 13495, 720, -1000, 749, 28, -1000, 43564, -1000, -1000,
	46772, -1000, -1000, 18513, 43564, 270, 43564, -1000, 29908, 37137,
	17672, -363, -1000, 17672, 629, -1000, -342, -356, 12682, 109,
	-1000, -1000, -1000, 525, 24294, 528, 109, -276, -1000, -1000,
	-1000, 817, -1000, 817, 817, 817, 817, -39, -39, -39,
	-39, -1000, -1000, -1000, -1000, -1000, 840, 838, -1000, 817,
	817, 817, 817, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -37, -1000, 13495, -133, 36324,
	1514, 371, 881, -171, -15, 906, 437, 437, 437, -15,
	-1000, 61, -1000, 576, 571, 561, 1223, 1573, -1000, -1000,
	708, -1000, 43564, -184, -1000, -62, -1000, 36324, 437, 238,
	108, 437, -1000, 437, -1000, -1000, 491, -166, -553, 43564,
	-184, 33918, -1000, -1000, -1000, 437, -1000, -1000, -1000, -8,
	-1000, -1000, -1000, -1000, 33918, 33918, -1000, -1000, -1000, 455,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -693, 43564, -1000, 43564,
	-1000, 11, -182, -142, -95, -107, 43564, -1000, -1000, -71,
	43564, 43564, -17, 967, 43564, 1469, 43564, -1000, -1000, -1000,
	-1000, -1000, 642, 43564, -1000, -1000, 572, 572, -1000, -1000,
	43564, 572, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	572, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43564, -1000, -1000, -1000, -1000, 43564, -1000, -1000,
	-1000, -1000, -255, -347, 233, -1000, -1000, -1000, -1000, 1521,
	-1000, 642, 220, -1000, 780, -1000, -1000, 282, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 336, 14308, 14308, 14308, 1102,
	-13, 443, 336, 430, 639, 284, 284, 294, 294, 120,
	120, 120, 120, 120, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 445, -1000, 702, -1000, 790, 930, 485,
	-1000, 702, 702, 793, 11869, -1000, -1000, 211, -1000, 13495,
	485, -1000, -1000, 485, 706, 697, 1605, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 642, 881,
	881, 881, 881, 881, 13495, 777, -1000, -1000, -1000, 1356,
	1352, 485, 553, 485, 659, -1000, 1336, 881, 1335, 1326,
	1322, 836, 1312, 1268, 1267, 881, 881, 881, 753, 1263,
	1256, 1255, 1250, 1246, 1221, 1159, 1150, 1084, 881, 485,
	11869, 11869, 655, 780, 60, -1000, 702, 485, 485, 702,
	702, 21877, -1000, 43564, -1000, -613, -1000, -358, 154, -1000,
	45970, -1000, -1000, 485, 6484, -1000, 45168, -1000, -1000, -1000,
	-1000, -1000, 35522, 1022, 1564, -1000, -1000, 780, 761, -1000,
	-1000, 642, 642, 13495, -1000, -1000, -1000, 161, -1000, -1000,
	-1000, 59, 1592, 964, 43564, 780, -1000, 25898, -1000, 893,
	1231, -1000, -1000, -1000, 1490, 25096, -1000, 780, 780, 43564,
	1029, 894, -1000, 57, -1000, 629, -363, -359, -1000, -1000,
	-1000, -1000, 642, -1000, 468, -1000, 146, -1000, -42, -1000,
	-1000, -1000, -1000, -1000, -1000, 1351, -300, -1000, -1000, -1000,
	-144, -39, -1000, -1000, -1000, 34720, 114, 114, -259, -1000,
	-1000, -1000, 444, 444, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 903, -1000, -133, -1000, -1000, 438,
	-1000, -1000, 1353, 43564, -1000, -1000, 496, 1514, 7, 43564,
	214, 957, -1000, 906, 906, 906, 43564, 7040, -1000, -1000,
	-1000, -1000, -1000, -1000, 1571, 43564, 320, 759, -1000, -186,
	-1000, -1000, 757, 827, 437, 437, -1000, -1000, 1426, 177,
	-1000, -1000, -523, -1000, -1000, -184, -186, 109, -1000, 437,
	-1000, -1000, -1000, -1000, -696, 727, -1000, 43564, -170, 43564,
	43564, 43564, 43564, 43564, 40, -1000, 822, 416, -1000, -1000,
	-9, -1000, 43564, 43564, 115, -1000, -1000, -1000, 539, -1000,
	-1000, 539, -1000, -1000, -1000, -1000, -1000, 1391, 43564, -350,
	-670, -1000, -666, 13495, -1000, -1000, -1000, -1000, 268, -18,
	443, 14308, 14308, -1000, -1000, 11869, -446, 183, 183, 33918,
	-1000, -1000, -1000, 13495, 13495, 914, 197, -1000, 13495, 721,
	-1000, -1000, 13495, 13495, 13495, 485, -1000, -1000, -1000, -1000,
	-1000, 1600, -1000, 13495, 13495, 13495, -1000, -1000, 13495, 13495,
	-1000, 13495, 13495, 23492, 485, 23492, 13495, 13495, 23492, -1000,
	-1000, -1000, -1000, 23492, 13495, 13495, 13495, 13495, 13495, 13495,
	13495, 13495, 13495, -1000, -1000, 702, 702, 11869, 21877, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 154,
	-1000, 108, 108, 108, -1000, -1000, -1000, -1000, -1000, -1000,
	626, 1555, -1000, 1043, 1592, -1000, 29908, 1564, -1000, -1000,
	43564, -1000, 6803, 16831, 1526, 13495, -1000, 1449, 681, -1000,
	173, 589, -1000, -1000, 11056, 661, 1034, 50, 43564, 29908,
	29908, 29908, 29908, 29908, -1000, 1002, 993, -1000, 989, 983,
	1069, 43564, -1000, 657, 485, 1565, 25096, 245, 13495, 31512,
	700, 29908, -1000, -1000, 29908, 43564, 15990, -1000, -1000, -352,
	-349, -1000, -1000, -1000, 525, -1000, -1000, 151, 1484, 1349,
	-1000, -1000, -1000, -1000, -1000, 114, 114, -1000, -1000, -1000,
	-1000, -1000, -1000, 647, -1000, 635, -166, -1000, -1000, 437,
	-1000, -1000, -1000, 43564, -1000, 1456, 43564, 956, 954, 952,
	-1000, -1000, -1000, -1000, 370, 596, 1561, 43564, -1000, -1000,
	43564, -133, 43564, -1000, -1000, -1000, 6761, -1000, -1000, -1000,
	-186, -1000, -1000, -1000, -1000, -1000, -1000, 810, -1000, -1000,
	-1000, 900, -1000, -1000, -1000, -1000, -199, -143, 489, -1000,
	-1000, 43564, 94, -1000, 43564, -1000, -1000, -1000, 572, 572,
	-1000, -1000, 1390, -1000, 437, 881, 14308, 14308, -1000, 116,
	-1000, 780, 485, 817, 817, -1000, 817, -1000, -1000, 817,
	-211, 817, -218, 817, -1000, -1000, 485, 485, 750, 651,
	-418, -1000, 642, 13495, 1067, 950, 881, -1000, 13495, 881,
	881, 881, -1000, 642, 836, 935, 534, -1000, -1000, -1000,
	-1000, 613, 881, 916, -604, 485, 592, 592, 592, 592,
	592, 586, 586, 586, 586, -1000, -1000, 485, -1000, -1000,
	1512, 1512, 1512, 44366, 43564, -1000, -1000, -1000, 1590, 600,
	-1000, -1000, -1000, -1000, -1000, 642, 231, -1000, 43564, 13495,
	780, -1000, 259, 43564, 780, 43564, 896, 1231, 948, 951,
	1157, -1000, -1000, -1000, -1000, 990, -1000, 979, -1000, -1000,
	810, -1000, -1000, 947, 485, 877, 1592, 29908, 845, 845,
	-1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 295,
	4487, 1651, -1000, 424, -1000, 431, 128, 343, -1000, -1000,
	-1000, 230, 226, -1000, 43564, 811, -1000, -1000, -1000, -39,
	420, -39, -1000, -1000, -1000, 810, -1000, -1000, 43564, 43564,
	43564, -83, 43564, -1000, -1000, -1000, 537, -1000, 13495, -1000,
	-1000, -1000, 401, 401, -1000, -1000, -1000, 1482, -457, 43564,
	43564, 43564, 43564, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 116, 14308, -1000, -1000, -39, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13495, -1000, 13495,
	-1000, 1526, 406, 642, 13495, 13495, -1000, 881, -1000, -1000,
	-1000, 485, 23492, -1000, 23492, -1000, 13495, 136, 183, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	780, 1341, 780, 780, -1000, -1000, 1585, 1560, 1644, -1000,
	642, -1000, 780, -1000, 44, 589, -1000, 1579, -1000, -1000,
	13495, 807, -1000, 13495, -1000, -1000, -1000, -1000, -1000, -1000,
	6803, 1579, 845, -1000, -1000, 126, -1000, 13495, -1000, -1000,
	-1000, 2751, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 784, 13495, -1000, -1000, -1000, 1477, -1000, -1000,
	-1000, 1186, 596, -88, 881, -1000, -1000, 245, -1000, 21877,
	-1000, -1000, 781, 904, -1000, 10, -1000, 881, 881, 485,
	-1000, 881, 881, -1000, -1000, 534, -1000, 682, -1000, 136,
	485, 946, -1000, -1000, 6803, -1000, 29106, -1000, 1536, 1533,
	33116, 33116, -1000, 13495, 13495, 43564, 589, 43564, 1526, 642,
	43564, 642, -305, 1526, -1000, 881, -1000, 780, 780, 780,
	780, 780, 43564, 794, 245, -84, -1000, -1000, -454, 569,
	-1000, 172, 43564, 43564, 485, -64, -463, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13495, -1000, 485, 942, -1000, -569,
	-1000, 527, -1000, -1000, -1000, -1000, -1000, 527, 527, 642,
	553, 540, -1000, -1000, 524, 485, 780, -1000, -1000, 495,
	-1000, -454, -116, -1000, -341, 21877, 15149, 484, -1000, -1000,
	1016, -450, -477, 836, -1000, -650, -1000, -1000, 32314, -1000,
	-1000, -1000, -1000, 31512, 42762, -444, -150, -1000, 1294, -47,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 900, -1000, 1012,
	-1000, 485, -1000, -1000, -1000, 477, -1000, 2460, -561, 925,
	-1000, -420, -1000, -1000, -1000, 286, 322, -1000, -1000, -1000,
	-1000, -1000, 287, -161, -457, -460, -1000, -1000, 42762, -550,
	109, 6803, -1000, 918, 912, 1646, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -475, -1000, -1000, 1454, -305,
	-1000, 1639, -1000, 1635, 393, 393, -478, -565, -1000, -1000,
	-1000, -1000, -1000, -52, 637, -1000, -1000, 6803, -1000, -1000,
	-1000, 140, 140, -1000, -1000,
}

var psqPgo = [...]int{
	0, 1965, 39, 77, 219, 27, 214, 103, 1964, 1963,
	1962, 1961, 1960, 1958, 1957, 342, 334, 328, 1956, 1953,
	1952, 1951, 1947, 1945, 1942, 1939, 1937, 1935, 1933, 331,
	133, 218, 142, 1932, 1931, 1930, 1929, 1928, 1370, 1926,
	1925, 92, 154, 155, 1924, 1923, 1922, 1921, 1920, 172,
	170, 149, 1368, 1919, 166, 91, 1918, 1917, 1916, 1915,
	1914, 1913, 1912, 1911, 1910, 1908, 1907, 1906, 1899, 1898,
	1897, 146, 1440, 1896, 21, 1893, 57, 1889, 1888, 1887,
	1886, 1885, 1884, 1882, 1881, 121, 1878, 1877, 1876, 232,
	1875, 1873, 1872, 169, 86, 89, 1871, 1870, 80, 1869,
	130, 1868, 1867, 1866, 150, 1865, 5407, 1862, 56, 53,
	1861, 47, 62, 48, 41, 10, 14, 1860, 1859, 54,
	74, 1858, 1857, 44, 1849, 81, 78, 1846, 1845, 15,
	6, 1844, 1, 5, 3, 45, 1843, 1842, 87, 1837,
	1836, 1835, 79, 1834, 1832, 1624, 1829, 71, 109, 83,
	51, 1828, 1827, 31, 1824, 1823, 1820, 1819, 1818, 30,
	1815, 1814, 1813, 123, 23, 148, 34, 36, 49, 104,
	1812, 33, 64, 1811, 119, 112, 1810, 1806, 1801, 35,
	1799, 28, 105, 97, 26, 73, 1798, 1797, 1415, 221,
	1796, 25, 1793, 38, 29, 1792, 82, 20, 1791, 139,
	1790, 50, 138, 102, 135, 1789, 1787, 1785, 1782, 165,
	1781, 1780, 1779, 52, 128, 126, 67, 1778, 343, 1777,
	1776, 72, 2779, 1510, 3202, 24, 141, 1774, 1773, 94,
	1772, 4287, 114, 107, 18, 1771, 151, 1770, 1769, 1768,
	235, 143, 84, 1767, 1385, 37, 1764, 1763, 22, 1762,
	1761, 1760, 1759, 1758, 1756, 93, 359, 43, 9, 70,
	132, 59, 1750, 1747, 100, 65, 1746, 136, 134, 106,
	85, 1743, 144, 125, 145, 1742, 243, 1740, 1739, 1736,
	1731, 75, 1728, 1724, 1720, 1717, 131, 124, 96, 69,
	1715, 63, 99, 129, 127, 16, 1386, 1714, 12, 42,
	46, 19, 88, 115, 1710, 0, 1708, 11, 147, 350,
	1437, 1706, 1704, 2, 8, 7, 1703, 1702, 1694, 1691,
	110, 1690, 1688, 1686, 1683, 17, 32, 13, 4, 1680,
	1679, 6189, 4244, 101, 1678, 1677, 279,
}

//line psql.y:6288
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	sequenceIdent     ast.SequenceIdent
	sequenceName      ast.SequenceName
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterSchemaUnion() *ast.AlterSchema {
	v, _ := st.union.(*ast.AlterSchema)
	return v
}

func (st *psqSymType) alterSequenceUnion() *ast.AlterSequence {
	v, _ := st.union.(*ast.AlterSequence)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createSequenceUnion() *ast.CreateSequence {
	v, _ := st.union.(*ast.CreateSequence)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) sequenceSpecUnion() *ast.SequenceSpec {
	v, _ := st.union.(*ast.SequenceSpec)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 329, 330, 330, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 305, 305,
	305, 308, 308, 26, 67, 29, 29, 28, 28, 31,
	31, 30, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 7, 7, 7, 13, 14, 6, 15, 15,
	79, 79, 16, 17, 17, 17, 17, 333, 333, 140,
	140, 138, 138, 139, 139, 18, 19, 19, 204, 204,
	203, 203, 203, 205, 205, 205, 205, 244, 244, 20,
	20, 20, 20, 20, 20, 90, 90, 307, 307, 306,
	298, 298, 297, 297, 295, 304, 304, 303, 303, 302,
	33, 39, 40, 46, 46, 46, 46, 34, 35, 47,
	48, 309, 277, 53, 53, 52, 52, 52, 52, 52,
	52, 54, 54, 50, 50, 49, 49, 51, 51, 279,
	279, 266, 266, 278, 278, 278, 278, 278, 278, 278,
	265, 265, 101, 101, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 324,
	324, 324, 323, 323, 187, 187, 187, 187, 187, 187,
	187, 187, 110, 110, 119, 119, 119, 119, 119, 296,
	108, 108, 109, 107, 107, 107, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	118, 118, 114, 114, 114, 115, 115, 115, 116, 116,
	325, 325, 325, 325, 248, 248, 248, 248, 251, 251,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 250,
	250, 250, 250, 250, 252, 252, 252, 252, 252, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 254, 254, 254, 254, 254,
	254, 254, 254, 264, 264, 255, 255, 260, 261, 262,
	262, 262, 263, 263, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 259, 259, 258, 258, 258, 267, 291,
	291, 290, 290, 288, 288, 288, 288, 288, 276, 276,
	285, 285, 285, 285, 285, 275, 275, 271, 271, 271,
	272, 272, 273, 273, 270, 270, 274, 274, 287, 287,
	286, 286, 268, 268, 269, 269, 293, 326, 326, 326,
	326, 326, 327, 327, 294, 316, 318, 318, 318, 317,
	317, 314, 315, 313, 313, 313, 313, 313, 76, 76,
	76, 216, 216, 217, 217, 283, 283, 282, 282, 282,
	284, 284, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 212, 212, 212,
	312, 312, 312, 312, 312, 312, 311, 311, 311, 280,
	280, 280, 310, 310, 55, 55, 172, 172, 37, 44,
	44, 44, 44, 44, 44, 43, 43, 43, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 45, 45,
	42, 42, 42, 42, 42, 42, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 128,
	130, 131, 131, 129, 129, 129, 129, 129, 129, 57,
	57, 56, 56, 133, 132, 134, 134, 134, 22, 36,
	36, 23, 23, 23, 23, 24, 24, 58, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 211, 211,
	219, 219, 210, 210, 236, 236, 236, 213, 213, 213,
	322, 322, 322, 207, 207, 60, 60, 60, 62, 62,
	63, 64, 64, 238, 238, 239, 239, 65, 66, 77,
	77, 77, 77, 77, 77, 80, 80, 80, 9, 9,
	9, 9, 73, 73, 73, 8, 8, 61, 61, 68,
	319, 319, 320, 321, 321, 321, 321, 69, 25, 25,
	25, 25, 25, 25, 97, 97, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 91, 91, 91,
	86, 86, 334, 27, 335, 71, 72, 72, 92, 92,
	89, 89, 89, 83, 83, 83, 88, 88, 88, 10,
	10, 11, 195, 195, 12, 12, 94, 94, 96, 96,
	96, 96, 96, 98, 98, 98, 98, 98, 98, 98,
	93, 93, 95, 95, 95, 95, 227, 227, 227, 226,
	226, 122, 122, 124, 123, 123, 125, 125, 126, 126,
	126, 126, 170, 170, 148, 193, 193, 191, 191, 192,
	192, 194, 194, 194, 194, 127, 127, 127, 127, 135,
	135, 136, 136, 137, 137, 32, 237, 237, 234, 234,
	234, 233, 233, 141, 141, 141, 143, 142, 142, 142,
	142, 144, 144, 146, 146, 145, 145, 147, 152, 152,
	151, 151, 149, 149, 149, 149, 150, 150, 150, 150,
	38, 38, 153, 153, 106, 106, 106, 106, 106, 106,
	117, 117, 117, 117, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 78, 78, 78, 208, 208, 154, 154, 162,
	162, 162, 162, 155, 155, 155, 155, 155, 155, 155,
	163, 163, 163, 169, 164, 164, 160, 160, 160, 160,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 246, 246,
	301, 301, 300, 300, 299, 299, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 336, 336, 256,
	256, 256, 161, 161, 161, 161, 161, 87, 87, 87,
	87, 87, 242, 242, 242, 247, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 175, 175, 84, 84, 173, 173, 174, 176, 176,
	171, 171, 171, 157, 157, 177, 177, 178, 178, 179,
	179, 181, 180, 180, 182, 183, 183, 183, 184, 184,
	185, 185, 185, 100, 100, 99, 99, 74, 74, 75,
	75, 75, 104, 104, 105, 105, 105, 102, 102, 103,
	103, 188, 188, 189, 156, 156, 156, 156, 156, 190,
	190, 190, 190, 196, 196, 166, 166, 168, 168, 167,
	121, 197, 197, 201, 198, 198, 202, 202, 202, 202,
	202, 199, 199, 200, 200, 230, 230, 230, 206, 206,
	218, 218, 214, 214, 215, 215, 209, 209, 220, 220,
	220, 70, 165, 165, 292, 292, 289, 224, 224, 224,
	225, 225, 228, 229, 231, 231, 231, 235, 235, 232,
	232, 243, 243, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 331, 332, 240, 241, 241, 241,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 2, 5, 7, 8, 6, 7,
	1, 1, 10, 10, 9, 8, 8, 1, 1, 1,
	3, 1, 3, 1, 3, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 5, 11, 2, 2, 0, 2, 0, 2, 1,
	0, 2, 1, 3, 3, 0, 1, 1, 3, 3,
	3, 6, 5, 7, 8, 8, 8, 3, 3, 6,
	3, 1, 4, 0, 1, 1, 1, 1, 2, 2,
	2, 0, 1, 4, 4, 4, 4, 4, 4, 2,
	4, 1, 3, 1, 1, 3, 4, 3, 3, 3,
	5, 10, 0, 2, 0, 2, 3, 5, 3, 4,
	2, 3, 2, 3, 3, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 1, 2, 2, 2, 2, 2, 12,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 5, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 0, 0,
	1, 1, 0, 1, 0, 3, 3, 2, 2, 2,
	1, 2, 2, 0, 1, 0, 2, 2, 5, 0,
	1, 1, 2, 1, 2, 1, 1, 3, 0, 1,
	4, 3, 3, 4, 2, 0, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 1, 3,
	3, 4, 3, 1, 3, 1, 7, 6, 7, 7,
	8, 8, 0, 1, 5, 2, 1, 1, 1, 0,
	1, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	1, 1, 2, 0, 1, 0, 1, 1, 3, 2,
	1, 2, 4, 4, 3, 3, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 4, 5, 0, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 0, 2, 3, 0,
	1, 5, 1, 3, 7, 1, 3, 3, 1, 2,
	2, 2, 5, 5, 5, 6, 8, 5, 5, 4,
	4, 4, 6, 5, 5, 2, 2, 2, 2, 3,
	3, 3, 4, 3, 3, 1, 3, 5, 1, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 10,
	3, 8, 6, 6, 6, 13, 8, 6, 10, 8,
	4, 1, 3, 3, 6, 7, 7, 8, 4, 0,
	1, 0, 1, 3, 3, 1, 1, 2, 3, 3,
	5, 7, 6, 6, 5, 3, 2, 3, 3, 3,
	7, 3, 3, 3, 4, 7, 5, 2, 4, 4,
	4, 4, 4, 5, 5, 4, 4, 4, 4, 4,
	4, 4, 4, 2, 4, 4, 3, 3, 5, 2,
	3, 4, 4, 4, 4, 4, 5, 3, 0, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 1, 1, 2, 1, 3, 1, 2,
	1, 1, 5, 0, 1, 0, 1, 2, 3, 0,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 3, 3,
	6, 4, 7, 6, 1, 3, 2, 2, 2, 1,
	1, 1, 3, 2, 1, 1, 1, 0, 1, 1,
	0, 3, 0, 7, 0, 2, 0, 2, 0, 1,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 5,
	5, 4, 0, 2, 4, 4, 0, 1, 0, 1,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 1, 2, 1, 3, 1, 1, 1, 4,
	3, 1, 3, 4, 3, 0, 3, 1, 3, 1,
	3, 1, 1, 3, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 1,
	1, 2, 6, 5, 6, 6, 0, 2, 3, 3,
	2, 4, 0, 2, 3, 3, 2, 3, 1, 6,
	3, 4, 3, 1, 3, 4, 5, 6, 3, 4,
	5, 6, 3, 4, 1, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 3, 1, 1, 2, 2, 2, 2,
	1, 1, 2, 9, 6, 6, 6, 2, 2, 3,
	3, 3, 1, 1, 1, 0, 3, 1, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 5, 5, 6,
	4, 4, 8, 6, 8, 6, 8, 5, 4, 2,
	2, 1, 2, 2, 2, 8, 8, 6, 5, 4,
	4, 4, 4, 4, 7, 4, 6, 6, 6, 4,
	4, 4, 7, 8, 6, 5, 6, 8, 11, 7,
	8, 8, 9, 4, 4, 4, 4, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 4, 0, 2,
	0, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	2, 3, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 1, 0, 2, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 2, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 2, 0, 3, 0, 2, 0,
	1, 3, 1, 3, 2, 0, 1, 1, 0, 1,
	2, 4, 4, 0, 3, 1, 1, 0, 4, 0,
	1, 1, 0, 3, 1, 3, 2, 1, 1, 0,
	1, 2, 4, 2, 2, 1, 5, 4, 4, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 0, 3, 0, 1, 0, 1,
	1, 5, 0, 1, 0, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -329, -1, -5, -27, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -58, -59, -60,
	-62, -63, -64, -65, -66, -8, -61, -25, -26, -67,
	-68, -69, -70, -10, -11, -12, -3, -2, -7, -334,
	9, 10, -79, -28, 32, -39, -46, 480, -47, -34,
	-40, -33, -35, 481, -48, 483, 482, 520, 484, 513,
	337, 565, 566, 568, 569, 570, 571, -80, 518, 519,
	487, 36, 173, 33, 34, 37, 526, 527, 490, -4,
	-29, 8, -331, 11, 688, 515, 514, 28, -6, 722,
	348, -330, 854, -188, -189, 22, 33, 29, -185, -181,
	-89, -189, 20, 18, 7, 38, -71, -335, -71, -71,
	12, 13, -71, -277, -279, 348, 416, 348, -71, -53,
	-52, -50, -49, -51, -54, 31, -296, 566, -44, -43,
	-45, -41, -42, -284, 486, 481, 488, 489, 689, 384,
	383, 381, 382, 482, 338, 483, 33, 722, 725, -281,
	-54, 363, 365, 833, 494, 836, 837, 840, 841, 847,
	848, 849, 385, 7, -37, 203, -296, -71, -235, -231,
	-305, -222, -223, 351, 352, 353, 69, 70, 71, 72,
	506, 486, 754, 555, 73, 74, 481, 42, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 565, 402, 579,
	573, 720, 84, 19, 85, 37, 86, 507, 543, 87,
	88, 590, 593, 89, 90, 91, 92, 93, 521, 626,
	94, 568, 655, 365, 95, 96, 97, 833, 98, 99,
	100, 101, 342, 102, 112, 113, 114, 115, 116, 117,
	659, 669, 490, 118, 359, 119, 120, 121, 544, 13,
	122, 123, 124, 125, 126, 127, 384, 381, 128, 129,
	582, 482, 130, 733, 383, 131, 132, 607, 823, 517,
	629, 763, 133, 346, 527, 26, 515, 134, 135, 136,
	376, 137, 138, 139, 554, 358, 764, 338, 816, 140,
	633, 141, 41, 647, 142, 143, 736, 737, 144, 111,
	145, 674, 146, 498, 147, 148, 149, 382, 150, 151,
	152, 153, 494, 505, 154, 155, 156, 157, 158, 159,
	11, 160, 577, 578, 476, 552, 649, 604, 701, 161,
	162, 702, 163, 164, 165, 166, 738, 375, 167, 395,
	35, 168, 721, 169, 556, 170, 171, 650, 172, 173,
	819, 174, 33, 771, 175, 176, 718, 177, 178, 528,
	549, 179, 180, 679, 181, 325, 682, 182, 538, 646,
	183, 595, 776, 184, 322, 185, 186, 187, 188, 510,
	344, 189, 190, 191, 192, 778, 193, 779, 585, 194,
	745, 380, 195, 781, 196, 197, 545, 198, 783, 785,
	199, 746, 200, 201, 202, 203, 204, 205, 40, 786,
	529, 206, 841, 787, 207, 208, 209, 210, 790, 211,
	526, 212, 213, 214, 638, 215, 533, 216, 217, 218,
	219, 220, 221, 651, 581, 222, 223, 749, 224, 225,
	226, 227, 228, 571, 483, 654, 688, 229, 230, 798,
	512, 231, 232, 233, 801, 569, 234, 235, 236, 237,
	238, 239, 570, 240, 492, 640, 241, 242, 684, 553,
	548, 243, 657, 244, 648, 32, 245, 246, 324, 513,
	807, 808, 575, 247, 248, 546, 249, 250, 566, 251,
	252, 253, 254, 851, 387, 255, 355, 256, 257, 692,
	258, 259, 751, 641, 385, 260, 261, 262, 550, 596,
	811, 586, 587, 567, 263, 264, 534, 700, 520, 265,
	266, 267, 268, 812, 656, 269, 270, 271, 272, 273,
	274, 12, 275, 276, 277, 278, 323, 320, 591, 279,
	280, 495, 281, 282, 283, 284, 725, 572, 285, 652,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 589, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 493, -71, 493, -145, -231,
	493, -199, 625, -219, 627, 640, 635, 633, -211, 636,
	638, 533, -322, 647, 493, 642, 480, 637, 645, 542,
	-305, 433, 851, 393, 593, 632, 630, 648, 819, -231,
	567, -238, 572, -224, -305, -222, -223, 570, -145, -77,
	816, 485, 484, -240, -240, -91, 819, 821, -164, -106,
	400, -117, -120, -111, -112, -158, -159, -160, -161, -118,
	-171, 422, 423, 430, 401, -169, -121, 26, 718, 690,
	689, 433, 31, 476, 331, 332, 692, 693, 403, 320,
	665, 666, -119, 660, 667, 662, 695, 696, 376, 697,
	366, 368, 367, 698, 699, 700, 605, 606, 701, 702,
	703, 369, 370, 371, 372, 373, 374, 375, 704, 707,
	705, 706, 708, 709, 710, 715, 716, 711, 712, 713,
	714, 717, -224, -231, 498, 659, 492, 428, 688, -113,
	-109, -2, -167, 658, 663, 664, 668, 661, -305, -222,
	-223, -115, -114, -154, 354, 360, 364, 361, -328, 377,
	-331, 359, 358, 355, 356, 357, 378, 379, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
	117, 641, 641, -145, -71, -71, -71, -179, -89, -181,
	-4, -2, -331, 8, -71, -2, -3, -7, -29, -31,
	749, -30, -231, 12, 418, -145, -184, -185, -6, -2,
	-106, 19, 23, 24, -72, -95, 424, -106, -231, -72,
	-95, -209, 497, -71, -71, -198, -244, 567, -202, 648,
	647, -225, -200, -224, -221, -199, 646, 23, 485, 484,
	399, 43, 728, 25, 27, 44, 45, 433, 388, 403,
	690, 504, 432, 625, 500, 38, 46, 508, 480, 335,
	47, 660, 48, 49, 662, 658, 665, 31, 50, 28,
	24, 36, 406, 407, 734, 379, 51, 22, 509, 52,
	14, 632, 53, 16, 17, 54, 418, 55, 333, 56,
	29, 415, 57, 329, 741, 389, 331, 416, 20, 663,
	664, 336, 400, 58, 377, 21, 339, 653, 397, 18,
	334, 59, 60, 499, 511, 815, 332, 8, 61, 62,
	63, 64, 65, 493, 66, 405, 496, 390, 378, 7,
	394, 643, 340, 67, 68, 404, 15, 752, 722, 593,
	-278, 416, -265, -269, -224, 508, -294, 504, -145, -287,
	-286, -224, -331, -90, -218, 494, 502, 501, 394, -38,
	-309, 397, 550, 548, 659, -49, -50, -51, -199, 432,
	836, 722, 349, 349, -281, -269, -268, -267, -310, 508,
	-293, -285, 500, 509, -275, 501, 502, -270, 494, 395,
	-310, 504, 494, -310, -310, 496, 35, 35, 385, 385,
	-310, -270, 499, 509, 504, 508, -220, -270, 496, 25,
	-276, 408, 726, 726, -199, 432, -276, -276, -276, 537,
	-276, -276, -276, -276, -276, -276, -276, -276, -276, 496,
	-32, 493, -38, -309, -104, 645, 492, 544, -52, -36,
	-145, -218, 494, 495, -309, 526, -145, 477, -145, -213,
	416, 15, -213, -210, 641, 639, 626, 631, -213, -213,
	-213, 540, 624, -271, 494, 35, 505, 641, 540, 624,
	540, 541, 540, 541, 634, 644, 540, -236, 14, 418,
	659, 629, 633, 533, 493, 534, 495, 643, 641, 536,
	-241, -331, -225, -305, 822, -241, 32, 352, 496, -224,
	-73, -224, 355, -9, -5, -16, -15, -17, 408, -97,
	641, -85, 433, 823, 824, 825, 822, 638, 830, 828,
	826, 540, 827, 349, 397, 399, 4, -106, 415, -155,
	408, 409, 410, 411, 412, 413, 414, 418, 400, 402,
	416, 417, 408, 398, 419, 420, 421, 422, 423, 424,
	425, 427, 426, 428, 429, 432, 478, 479, -112, -112,
	-112, -112, -169, -331, -331, -331, -112, -208, -331, -112,
	-331, -331, -331, -331, -175, -106, -331, -336, -331, -336,
	-336, -256, -331, -256, -331, -331, -331, -331, -331, -331,
	-331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
	-331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
	-331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
	-331, 477, -331, -331, -331, -331, -331, -256, -256, -256,
	-256, -256, 364, 360, 354, -171, 361, 355, -224, -231,
	-2, -3, -164, -240, -319, -320, -148, -145, -331, -224,
	-224, 526, -184, -6, -2, -179, -185, -181, -2, -71,
	-83, -96, 326, 327, -98, 24, 39, 330, 328, 23,
	-332, 350, -332, -188, -332, 349, -31, -193, 348, 324,
	349, 21, -180, -182, -106, 339, 38, 14, -227, -226,
	25, -224, 355, 477, 14, -146, 29, -145, -209, -209,
	349, 567, -202, -244, -204, -203, 649, 651, 408, -230,
	-224, 355, 31, 350, 349, -145, -248, -251, -253, -252,
	-254, -249, -250, 590, 591, 433, 594, 596, 597, 598,
	599, 600, 601, 602, 603, 604, 607, 32, 516, 586,
	587, 588, 589, 608, 609, 610, 611, 612, 613, 614,
	615, 573, 592, 720, 574, 575, 576, 577, 578, 579,
	581, 582, 583, 584, 585, -308, -305, 348, 350, 349,
	-255, 348, -106, -104, 493, -305, 494, 494, 494, -71,
	688, -229, -305, -276, -276, -276, 357, 18, -41, -42,
	-43, -42, 348, -265, -274, -308, -305, 348, 395, 499,
	394, -273, -270, -273, -274, -305, -171, -305, -305, -171,
	-265, -199, -171, -305, 395, 395, -305, -305, -145, -305,
	31, 344, 345, 346, -276, -276, 355, 355, 355, -276,
	355, -311, 510, 554, 556, 31, 355, -312, 31, 843,
	842, 844, 845, 846, 31, 31, -224, 348, 351, -92,
	653, -100, 546, 480, 482, 486, 339, -228, -305, 408,
	349, 496, 493, -305, -214, 498, -214, -224, -232, -231,
	-221, 355, -106, -272, 14, 418, -236, -236, -213, -145,
	-272, -236, -213, -145, -213, -213, -213, -213, -236, -236,
	-236, -213, -231, -231, -145, -145, -145, -145, -145, -145,
	-145, -241, -207, 14, 339, -241, -241, -239, 570, 604,
	817, 818, 349, 722, -138, -145, 822, 822, 822, 822,
	822, -106, -106, -106, 745, -162, 377, 400, 378, 379,
	-120, -163, -167, -169, 362, 418, 402, 416, 417, -111,
	-112, -111, 43, -111, -111, -111, -111, -111, -111, -111,
	-111, -111, -111, -111, -111, -242, -224, 355, 433, -116,
	-115, 361, 355, -328, -116, -93, -95, -106, -106, -305,
	-224, -93, -93, -106, -88, 24, 39, -173, -174, 404,
	-171, -332, -332, 361, -224, -224, -82, -81, 670, 671,
	672, 673, 675, 676, 677, 680, 681, 685, 686, 669,
	687, 674, 679, 682, 683, 684, 678, 589, -106, -106,
	-106, -106, -106, -106, -78, -106, 388, 389, 390, -106,
	-106, -165, -164, -304, -303, -302, -106, -106, -106, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, -106, -94,
	24, 39, -93, -225, -232, -221, -93, -94, -94, -93,
	-93, 477, -332, 349, -321, 651, 652, 820, -234, -233,
	25, -231, 355, -165, 14, -195, 340, -224, -184, -184,
	326, 327, 322, -93, -98, -332, -30, 25, -191, -224,
	325, -106, -106, 349, -183, 27, 28, -32, -145, -226,
	424, -232, -145, -156, 32, 320, -5, -331, -145, -123,
	-125, -126, -127, -148, -170, -331, -128, 741, 738, 14,
	-138, -139, -147, -231, -202, -204, 349, 650, 652, 653,
	339, 380, -106, -258, 432, -283, -282, -281, -265, -267,
	-268, -269, 494, 395, 350, -258, -262, 622, 621, -255,
	-255, -255, -255, -255, -257, -199, 616, 617, 433, -257,
	-257, -257, 348, 348, -255, -255, -255, -255, -260, -260,
	-260, -261, -261, -294, -106, -291, -290, -288, -289, 363,
	814, 770, 722, 340, -286, -183, 357, -332, -100, -215,
	498, -292, -289, -305, -305, -305, -215, 477, -305, 355,
	-305, 355, -305, 355, 152, 19, 349, -266, -265, -55,
	554, -293, -287, -274, 395, -273, -274, -274, 482, 32,
	-216, 761, 400, 814, 770, -265, -55, -242, -305, 496,
	-242, -242, 355, -212, 851, -138, -145, 495, 553, 535,
	535, 493, 493, 548, -145, -105, 665, -102, 355, 351,
	-145, -145, -214, 339, -140, -145, 26, -231, -145, -213,
	-213, -145, -213, -213, -145, -224, -85, 651, 349, 722,
	22, -86, 22, -331, 377, 378, 379, -163, -111, -112,
	-111, 399, 517, -163, 355, 349, -332, 25, 349, 340,
	-332, -332, -332, 349, 14, -93, -176, -174, 406, -106,
	-332, -332, 349, 349, 14, -247, -332, -332, -332, -332,
	-332, -175, -332, 14, 349, 349, -332, -332, 349, 349,
	-332, 349, 349, 349, -301, 349, 349, 349, 349, -332,
	-332, -332, -332, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, -332, -332, -93, -93, -331, 477, -332,
	-332, -332, -332, -332, -225, -320, 819, 652, -152, -151,
	-149, 337, 497, 338, -233, -332, -116, 352, -192, 352,
	-191, -157, -224, 361, -122, -124, 14, -98, -169, 350,
	349, -182, 415, 477, -153, 15, -196, 339, -197, -201,
	-171, -166, -168, -167, -331, -190, -332, -224, 32, 349,
	-141, -143, -142, -144, 329, 333, 335, 330, 331, 332,
	336, -237, 25, -123, -3, -2, -331, -331, -331, -145,
	-138, -333, 14, 340, -333, 349, 477, -203, -205, 654,
	651, 657, -305, 355, 349, -281, -269, -186, -101, 41,
	-263, 623, -257, 729, -257, -224, 355, 433, -259, 433,
	-259, 616, 617, -264, 355, -264, 350, -288, 355, 40,
	-224, 350, -183, 495, -145, 400, 339, -292, -292, -292,
	-231, -243, -229, -221, 19, -191, 18, 349, 350, -172,
	555, 350, 348, -274, -274, 31, 31, 814, 770, 761,
	-55, -172, -258, -305, 853, 852, 350, -145, -99, 544,
	552, -145, -145, -145, -145, -145, 486, 482, 348, -103,
	352, 496, -138, -145, 349, -76, 512, 507, -236, -236,
	33, -145, 651, 831, 829, -106, 399, 517, -120, -112,
	-95, 719, -245, 433, 590, 516, 588, 584, 604, 595,
	621, 586, 622, 583, 582, 581, -245, -242, -106, -106,
	-179, 407, -106, 405, -106, -106, -106, -332, 14, -106,
	-106, -106, -302, -106, -106, -106, -300, -299, -116, -171,
	-332, -300, -106, -106, -299, -299, -303, -303, -303, -303,
	-303, -164, -164, -164, -164, -332, -332, -94, -225, -149,
	-270, -270, -270, 349, -206, 22, 14, 320, -153, -123,
	-98, -224, -116, 424, -184, -106, 30, -196, 349, 408,
	349, -332, -332, 349, 320, 477, -197, -125, -126, -126,
	-125, -126, 329, 329, 329, 334, 329, 334, 329, -142,
	-231, -332, -332, -3, -3, -106, -234, 340, -123, -123,
	-147, -231, 424, 651, 655, 656, -281, -327, 377, 400,
	31, 339, 619, 363, -325, 432, 758, 809, 814, 770,
	-326, 499, 394, 395, 511, 25, 42, -259, -259, 350,
	349, 350, -217, -216, -305, -145, 26, -145, 339, 339,
	339, 357, 19, -265, -171, -291, -191, -108, -331, -107,
	-109, -113, 422, 423, 358, 359, -172, -193, -307, 340,
	535, 619, 535, 350, -145, -76, -145, -213, -213, 33,
	-305, -332, -120, -112, -331, -332, -255, -255, -255, -261,
	-255, 578, -255, 578, -255, -332, -332, 349, -332, 22,
	-332, -84, 694, -106, 349, 349, -332, -106, -332, -332,
	-332, -301, 349, -332, 349, -332, 349, -246, 815, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-150, 22, -150, -150, 352, -145, -177, 16, 395, -201,
	-106, -168, 320, -5, -224, -166, -224, -153, -136, -135,
	339, 340, -137, 339, -135, 329, 329, -193, -332, -332,
	349, -153, -123, -153, -153, 477, 377, -331, -110, -119,
	-108, 12, 355, 355, -305, -324, 842, 843, 31, 357,
	395, 395, -145, 348, -257, 355, -257, -193, -145, -145,
	-145, 510, -191, 350, -106, -114, -114, 25, -298, 722,
	-306, -224, -224, -224, -224, -111, -257, -106, -106, -184,
	355, -106, -106, -332, -332, -300, -299, -106, -332, -133,
	-132, -134, 823, 377, 31, -245, -331, 329, 18, 16,
	-331, -331, -178, 17, 19, 12, -166, 477, -179, -106,
	348, -106, -116, -179, -153, -106, -159, 376, 700, 701,
	702, 375, 348, -106, 25, 181, -326, -332, -5, -297,
	-295, -225, 348, 340, -87, 418, 722, -332, -332, -332,
	-332, -332, -332, -332, 349, -332, -132, -134, -332, 339,
	-116, -194, -332, -224, 499, 19, 19, -194, -194, -106,
	-164, -197, -224, -184, -191, -130, 626, -184, -332, -191,
	350, -5, 510, -74, 722, 349, 408, -191, -145, -332,
	720, 336, 723, -106, -332, 339, 733, 823, 349, -332,
	-332, -332, 350, -332, -331, 350, -187, -74, 528, -75,
	543, 819, -295, -280, -225, 355, 357, 350, 325, 721,
	724, -301, -224, 499, -234, -131, -129, -224, 776, -317,
	-316, 718, -327, -323, 377, 400, 363, -325, 814, 770,
	386, 387, 85, 504, -307, 325, -332, -332, 349, 22,
	-248, -57, 787, -314, -315, 339, -318, 632, 786, 807,
	377, 355, 357, 545, -298, 722, -129, 783, -258, -116,
	-315, 339, -314, 339, 13, 12, 723, -56, 26, -130,
	-313, 512, 507, 510, 32, -313, 724, 787, 506, 31,
	377, -116, -133, -132, -132,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 0,
	684, 684, 684, 0, 684, 0, 0, 684, -2, 0,
	-2, 0, 0, 684, 1127, 0, 684, 0, 0, -2,
	616, 618, 0, 620, -2, 0, 0, 629, 1646, 1646,
	677, 0, 0, 0, 0, 0, 684, 684, 684, 1029,
	48, 684, 0, 80, 81, 635, 636, 637, 63, 0,
	1644, 1, 3, 69, 73, 0, 0, 0, 56, 1038,
	0, 74, 0, 0, 690, 686, 0, 686, 0, 1106,
	684, 684, 0, 109, 110, 0, 0, 0, -2, 113,
	-2, 145, 146, 147, 0, 152, 114, 0, 516, 470,
	472, 475, 508, -2, -2, 462, 462, 462, 0, 0,
	0, 0, 0, 462, 505, 1108, 368, 0, 0, 430,
	0, 368, 368, 368, 0, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 517, 0, 518, 1052, 151, 1128,
	1124, 1125, 1126, 38, 39, 40, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 0, 1100, 0, 556, 785,
	0, 607, 607, 0, 607, 607, 607, 0, 0, 0,
	567, 0, 0, 0, 0, 604, 0, 583, 0, 589,
	1647, 0, 1647, 1091, 0, 601, 599, 611, 612, 615,
	619, 0, 624, 627, 1117, 1118, 1119, 0, 642, 47,
	1347, 633, 634, 647, 648, 0, 678, 679, 43, 884,
	0, 808, 813, 824, 838, 839, 840, 841, 842, 844,
	845, 0, 0, 0, 0, 850, 851, 1334, 1415, 0,
	0, 0, 865, 1383, 0, 0, 1558, 0, 1011, 1596,
	977, 977, 901, 977, 979, 979, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 1576, 0, 0, 1387, 1390,
	0, 0, 0, 0, 0, 0, 0, 1396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1020, 0, 1362, 1299, 1523, 0, 1505, 270,
	271, 883, 1080, 979, 979, 979, 979, 979, -2, -2,
	-2, 216, 217, 218, 219, 220, 221, 222, 0, 212,
	0, -2, -2, -2, 276, 272, 867, 868, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	1646, 0, 657, 0, 0, 0, 0, 1038, 0, 1030,
	1029, 61, 0, 684, -2, 0, 0, 0, 0, 45,
	1496, 50, 745, 1061, 0, 1063, 57, 1039, 65, 67,
	1040, 0, 691, 692, 0, 0, 722, 726, 0, 685,
	0, 0, 1107, 1106, 1106, 95, 0, 1572, 1084, -2,
	-2, 0, 0, 1120, 1121, 1093, -2, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1271,
	0, 0, 163, 164, 0, 41, 395, 0, 159, 0,
	388, 335, 0, 1052, 0, 0, 0, 0, 0, 137,
	684, 0, 1101, 0, 141, 148, 149, 150, 368, 368,
	368, 0, 151, 151, 431, 479, 480, 481, 0, -2,
	393, 0, 463, 0, 0, 382, 382, 386, 384, 385,
	0, 0, 0, 0, 0, 0, 495, 496, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 1110,
	0, 369, 514, 515, 368, 368, 0, 0, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 688, 138, 140, 1043, 0, 0, 0, -2, 548,
	0, 0, 0, 1102, 1102, 0, 555, 0, 557, 558,
	0, 0, 559, 0, 604, 604, 602, 603, 561, 562,
	563, 607, 0, 0, 377, 378, 379, 604, 607, 0,
	607, 607, 607, 607, 604, 604, 604, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1647, 586, 587,
	590, 1648, 1649, 1647, 1647, 597, 1092, 617, 625, 628,
	645, 643, 644, 646, 638, 639, 640, 641, 0, 658,
	659, 664, 0, 0, 0, 669, 670, 671, 0, 0,
	674, 675, 676, 0, 0, 0, 0, 806, 0, 0,
	873, 874, 875, 876, 877, 878, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 846, 847,
	848, 849, 852, 0, 0, 0, 857, 858, 0, 0,
	0, 0, 0, 696, 0, 1012, 0, 899, 0, 900,
	902, 903, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 0, 0, 706, 706, 0, 0, 204, 205, 206,
	207, 208, 223, 224, 225, 226, 227, -2, 1020, 0,
	883, 0, 0, 44, 649, 650, 0, 768, 1112, 0,
	702, 0, 55, 64, 66, 1038, 59, 1038, 0, 708,
	0, 0, -2, -2, 709, 715, 716, 717, 718, 719,
	52, 1645, 53, 0, 72, 0, 46, 0, 0, 0,
	0, 0, 1031, 1032, 1035, 0, 687, 0, 723, 727,
	0, 729, 730, 0, 0, 0, 0, 784, 0, 0,
	0, 1572, 1090, 0, 97, 98, 0, 0, 0, 355,
	1095, 1096, 1097, -2, 375, 0, 355, 339, 285, 286,
	287, 335, 289, 335, 335, 335, 335, 344, 344, 344,
	344, 318, 319, 320, 321, 322, 0, 0, 304, 335,
	335, 335, 335, 325, 326, 327, 328, 329, 330, 331,
	332, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	337, 337, 337, 338, 338, 0, 42, 0, 359, 0,
	1035, 0, 0, 1043, 1104, 1114, 0, 0, 0, 1104,
	116, 800, 1123, 0, 0, 0, 0, 0, 476, 477,
	473, 509, 0, 464, 376, 0, -2, 0, 386, 0,
	382, 386, 383, 386, 374, 387, 0, 0, 0, 0,
	464, 0, 499, 500, 501, 0, 503, 504, 506, 0,
	510, 511, 512, 513, 0, 0, 434, 435, 436, 0,
	438, 439, 456, 457, 458, 440, 441, 442, 450, 451,
	452, 453, 454, 455, 443, 444, 447, 0, 468, 0,
	689, 0, 0, 0, 0, 0, 0, 765, 1122, 0,
	0, 0, 1102, 0, 0, 0, 0, 705, 786, 1129,
	1130, 608, 609, 0, 380, 381, 607, 607, 564, 594,
	0, 607, 568, 595, 569, 571, 570, 572, 584, 585,
	607, 575, 605, 606, 576, 577, 578, 579, 580, 581,
	582, 591, 0, 613, 614, 592, 593, 0, 626, 630,
	631, 632, 0, 0, 661, 91, 666, 667, 668, 680,
	673, 885, 804, 805, 0, 807, 810, 0, 869, 871,
	812, 814, 880, 881, 882, 0, 0, 0, 0, 0,
	818, 822, 0, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 843, 992, 993, 994, 860,
	278, 279, 275, 0, 861, 0, 720, 0, 0, 0,
	859, 0, 0, 0, 0, 697, 698, 1018, 1015, 0,
	0, 978, 980, 0, 0, 0, 0, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 995, 0,
	0, 0, 0, 0, 1011, 0, 862, 863, 864, 0,
	0, 0, 1113, 0, 126, 127, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 1021, 0, -2, 0, 0, 0, 0,
	0, 0, 1079, 0, 652, 653, 655, 0, 788, 769,
	0, 771, 772, 0, 0, 701, 0, 704, 58, 60,
	713, 714, 0, 731, 710, 54, 49, 0, 0, 747,
	1062, 1041, 1042, 0, 1034, 1036, 1037, 0, 75, 728,
	724, 0, 802, 1073, 0, 0, 1065, 0, 783, 0,
	734, 736, 737, 738, 766, 0, 741, 0, 1395, 0,
	0, 0, 93, 785, 1085, 96, 0, 0, 101, 102,
	1086, -2, 1088, 1089, 0, 142, -2, 427, 165, 167,
	168, 169, -2, -2, 160, -2, 342, 340, 341, 288,
	344, 344, 312, 313, 314, 0, 353, 353, 350, 315,
	316, 317, 0, 0, 305, 306, 307, 308, 299, 300,
	301, 302, 303, 394, 0, 111, 360, 361, 363, 0,
	365, 366, 0, 0, 389, 390, 0, 1035, 0, 0,
	0, 0, 1115, 1114, 1114, 1114, 0, 0, 153, 154,
	155, 156, 157, 158, 0, 0, 151, 0, 161, 466,
	465, 392, 0, 0, 386, 386, 371, 372, 0, 0,
	489, 421, 0, 490, 491, 464, 466, 355, 502, 0,
	432, 433, 437, 445, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 1054, 1059, 1057, 1058,
	0, 549, 0, 0, 418, 89, 1103, 554, 604, 574,
	596, 604, 566, 573, 588, 622, 665, 0, 0, 0,
	0, 672, 0, 0, 811, 870, 872, 815, 0, 819,
	823, 0, 0, 825, 277, 0, 0, 0, 0, 0,
	866, 890, 891, 0, 0, 1029, 0, 1016, 0, 0,
	898, 981, 0, 0, 0, 0, 909, 910, 911, 912,
	913, 0, 915, 0, 0, 0, 919, 920, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	934, 935, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 886, 0, 0, 706, 0, 982,
	983, 984, 985, 986, 1021, 651, 654, 656, 744, 789,
	790, 0, 0, 0, 770, 1111, 699, 700, 703, -2,
	0, 0, 1023, 0, 802, 732, 0, 711, 51, 746,
	0, 1033, 0, 0, 1038, 0, 78, 0, 1073, 1081,
	0, 1064, 1075, 1077, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 773, 0, 0, 776, 0, 0,
	0, 0, 767, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 87, 88, 0, 0, 0, 99, 100, 0,
	0, 106, 356, 357, 151, 429, 166, 402, 0, 0,
	284, 343, 309, 310, 311, 353, 353, 347, 348, 354,
	349, 351, 352, 0, 333, 0, 423, 362, 364, 0,
	1116, 336, 391, 0, 131, 0, 0, 0, 0, 0,
	139, 801, 1131, 1132, 0, 471, 0, 0, 482, 483,
	0, 359, 0, 370, 373, 484, 0, 487, 488, 422,
	466, 493, 494, 507, 448, 449, 446, 745, 1044, 1045,
	1046, 117, 522, 524, 523, 527, 0, 0, 0, 1056,
	1060, 0, 418, 552, 0, 553, 419, 420, 607, 607,
	660, 92, 0, 663, 0, 0, 0, 0, 816, 820,
	721, 0, 0, 335, 335, 998, 335, 338, 1001, 335,
	1003, 335, 1006, 335, 1009, 1010, 0, 0, 0, 0,
	1013, 897, 1019, 0, 0, 0, 0, 908, 0, 0,
	0, 0, 128, 129, 950, 0, 0, 952, 954, 955,
	925, 951, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 888, 0, 1022, 791,
	796, 796, 796, 0, 0, 1098, 1099, 1024, 1025, 733,
	712, 748, 683, 725, 76, 803, 0, 79, 0, 0,
	0, 1078, 0, 0, 0, 0, 802, 735, 761, 763,
	0, 758, 774, 775, 777, 0, 779, 0, 781, 782,
	745, 740, 742, 0, 0, 0, 802, 0, 802, 802,
	94, 0, 787, 103, 104, 105, 428, 170, 175, 0,
	0, 0, 180, 0, 182, 0, 0, 0, 187, 188,
	403, 0, 281, 283, 0, 0, 173, 345, 346, 344,
	0, 344, 404, 424, 367, 745, 1105, 133, 0, 0,
	0, 0, 0, 162, 467, 358, 0, 485, 0, 210,
	211, 213, 0, 0, 273, 274, 492, 0, 120, 0,
	0, 0, 0, 1055, 550, 551, 90, 560, 565, 662,
	681, 809, 817, 821, 0, 854, 996, 344, 999, 1000,
	1002, 1004, 1005, 1007, 1008, 855, 856, 0, 893, 0,
	895, 1038, 0, 1017, 0, 0, 907, 0, 916, 917,
	918, 0, 0, 924, 0, 926, 0, 0, 0, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 889,
	0, 0, 0, 0, -2, 62, 1027, 0, 0, 1082,
	1083, 1076, 0, 1068, 1071, 1067, 1070, 1029, 755, 762,
	0, 0, 756, 0, 757, 778, 780, 739, -2, 743,
	0, 1029, 802, 85, 86, 0, 176, 0, 178, 202,
	203, 0, 181, 183, 184, 185, 189, 190, 191, 186,
	280, 282, 0, 0, 323, 334, 324, 0, 134, 135,
	136, 0, 474, 0, 0, 214, 215, 0, 521, 0,
	118, 119, 0, 0, 526, 987, 997, 0, 0, 0,
	1014, 0, 0, 914, 922, 0, 953, 0, 929, 0,
	0, 0, 545, 546, 0, 949, 0, 797, 0, 0,
	0, 0, 77, 0, 0, 0, 1066, 0, 1038, 759,
	0, 764, 0, 1038, 84, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 486, 1047, 121,
	122, 0, 0, 0, 0, 0, 0, 892, 894, 896,
	905, 906, 923, 927, 0, 930, 0, 0, 931, 0,
	547, 0, 793, 751, 752, 798, 799, 0, 0, 1028,
	1026, 1074, 1072, 82, 0, 0, 0, 83, 177, 0,
	194, 1047, 0, 519, 1049, 0, 0, 0, 528, 853,
	0, 0, 0, 950, 932, 0, 543, 544, 0, 792,
	794, 795, 760, 768, 0, 409, 402, 112, 0, 0,
	1050, 1051, 123, 124, 459, 460, 461, 117, 988, 0,
	991, 0, 753, 754, 529, 0, 531, 0, -2, 397,
	410, 0, 171, 195, 196, 0, 0, 199, 200, 201,
	192, 193, 0, 0, 120, 989, 928, 530, 0, 0,
	355, 0, 540, 398, 399, 0, 405, 406, 407, 408,
	197, 198, 209, 1048, 525, 0, 532, 533, 541, 0,
	400, 0, 401, 0, 0, 0, 0, 0, 542, 538,
	411, 413, 414, 0, 0, 412, 990, 0, 415, 416,
	417, 534, 535, 536, 537,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 401, 3, 3, 3, 427, 419, 3,
	348, 350, 424, 422, 349, 423, 477, 425, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 854,
	409, 408, 410, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 429, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 398, 3, 430,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 351, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 399, 57738, 400, 57739, 402,
	57740, 403, 57741, 404, 57742, 405, 57743, 406, 57744, 407,
	57745, 411, 57746, 412, 57747, 413, 57748, 414, 57749, 415,
	57750, 416, 57751, 417, 57752, 418, 57753, 420, 57754, 421,
	57755, 426, 57756, 428, 57757, 431, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 58178, 853, 0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	psqDebug        = 0
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if psqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", psqTokname(token), uint(char), token)
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state-%d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:572
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:577
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:578
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:582
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 5:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:586
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 37:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:621
		{
			setParseTree(psqlex, nil)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:627
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:631
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:635
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:640
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 42:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:644
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 43:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:650
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:656
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:662
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:666
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:671
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:675
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:681
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 50:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:685
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:691
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:697
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:701
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:705
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:728
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:734
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:739
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:745
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:752
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:758
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:765
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 62:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:769
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:775
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:779
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:783
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:787
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:791
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:797
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:801
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:806
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:810
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:816
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:820
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:825
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:832
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:838
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:846
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:854
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:865
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:877
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:881
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:887
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:893
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:897
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:901
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:905
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:910
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:911
		{
		}
	case 89:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:915
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:919
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:925
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:929
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 93:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:935
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:939
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 95:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:945
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:951
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:955
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:961
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:965
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 100:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:971
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:975
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:979
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:985
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:989
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:993
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:997
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:1003
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:1007
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1013
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1019
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1026
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1034
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1038
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1044
		{
			psqDollar[1].createSequenceUnion().SequenceSpec = psqDollar[2].sequenceSpecUnion()
			psqDollar[1].createSequenceUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createSequenceUnion()
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1051
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1055
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 117:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1060
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 118:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1064
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 119:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1070
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 120:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1075
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1080
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 122:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1086
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1091
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 124:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1097
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 125:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1102
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1106
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1112
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1116
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 129:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1122
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 130:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSchema
//line psql.y:1128
		{
			psqLOCAL = &ast.AlterSchema{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Schema: psqDollar[3].schemaName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1135
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1142
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Only: psqDollar[4].booleanUnion(), Table: psqDollar[5].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1149
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1154
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1159
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1164
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 137:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.CreateSequence
//line psql.y:1171
		{
			psqLOCAL = &ast.CreateSequence{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Sequence: psqDollar[3].sequenceName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 138:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSequence
//line psql.y:1178
		{
			psqLOCAL = &ast.AlterSequence{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Sequence: psqDollar[3].sequenceName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1185
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1192
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1202
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1208
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1212
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1218
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 146:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1222
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 147:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1226
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 148:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1230
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 149:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1234
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 150:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1238
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 151:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1244
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 152:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1248
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1254
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1258
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1264
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 156:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1268
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 157:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1274
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 158:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1278
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 159:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1284
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 160:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1288
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1294
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1298
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1304
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 164:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1309
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1314
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1318
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 167:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1323
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 168:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1327
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 169:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1331
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 170:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1342
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 171:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1351
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1360
		{
			psqVAL.str = ""
		}
	case 173:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1364
		{
			psqVAL.str = ""
		}
	case 174:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1373
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1377
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1383
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1389
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1394
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1399
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1404
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1409
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 182:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1414
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 183:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1419
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 184:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1423
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1428
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 186:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1432
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1437
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1443
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1451
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1455
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1459
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1465
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1469
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1474
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1478
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1483
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1489
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1495
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 199:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1500
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 200:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1505
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1511
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1519
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1526
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1530
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 206:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1534
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 207:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1538
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1542
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 209:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL *ast.SequenceSpec
//line psql.y:1548
		{
			psqLOCAL = &ast.SequenceSpec{StartWith: ast.IntRef(psqDollar[3].str), IncrementBy: ast.IntRef(psqDollar[6].str)}
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1558
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1565
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1569
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1575
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1579
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1583
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1587
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1591
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1595
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1599
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1604
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1608
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 225:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1612
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 226:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1616
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 227:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1620
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1627
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1631
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1635
		{
			psqVAL.str = ast.Big5Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1639
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1643
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1647
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1651
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1655
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1659
		{
			psqVAL.str = ast.Cp850Str
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1663
		{
			psqVAL.str = ast.Cp852Str
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1667
		{
			psqVAL.str = ast.Cp866Str
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1671
		{
			psqVAL.str = ast.Cp932Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1675
		{
			psqVAL.str = ast.Dec8Str
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1679
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1683
		{
			psqVAL.str = ast.EuckrStr
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1687
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1691
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1695
		{
			psqVAL.str = ast.GbkStr
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1699
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1703
		{
			psqVAL.str = ast.GreekStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1707
		{
			psqVAL.str = ast.HebrewStr
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1711
		{
			psqVAL.str = ast.Hp8Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1715
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1719
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1723
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1727
		{
			psqVAL.str = ast.Latin1Str
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1731
		{
			psqVAL.str = ast.Latin2Str
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1735
		{
			psqVAL.str = ast.Latin5Str
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1739
		{
			psqVAL.str = ast.Latin7Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1743
		{
			psqVAL.str = ast.MacceStr
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1747
		{
			psqVAL.str = ast.MacromanStr
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1751
		{
			psqVAL.str = ast.SjisStr
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1755
		{
			psqVAL.str = ast.Swe7Str
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1759
		{
			psqVAL.str = ast.Tis620Str
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1763
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1767
		{
			psqVAL.str = ast.UjisStr
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1771
		{
			psqVAL.str = ast.Utf16Str
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1775
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 266:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1779
		{
			psqVAL.str = ast.Utf32Str
		}
	case 267:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1783
		{
			psqVAL.str = ast.Utf8Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1787
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1791
		{
			psqVAL.str = ast.Utf8Str
		}
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1801
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1805
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1809
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1815
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1819
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1823
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1829
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1833
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 280:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1840
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 281:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1844
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 282:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1848
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 283:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1852
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 284:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1858
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 288:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1869
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1874
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1880
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1884
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1888
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1892
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1896
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 295:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1900
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 296:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1904
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 297:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1908
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 298:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1912
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 299:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1918
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 300:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1924
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1930
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1936
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1942
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 304:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1950
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 305:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1954
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 306:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1958
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 307:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1962
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1966
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1972
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 310:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1976
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 311:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1982
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1986
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1990
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 314:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1994
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 315:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1998
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 316:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2002
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 317:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2006
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 318:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2010
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 319:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2014
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 320:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2018
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2022
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2026
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2030
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 324:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2035
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2041
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2045
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2049
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2053
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2057
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 330:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2061
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 331:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2065
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 332:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2069
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 333:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2075
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 334:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2080
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 335:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2085
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2089
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2094
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 338:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2099
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 339:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2104
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 340:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2108
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 341:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2112
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 342:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2117
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 343:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2121
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 344:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2126
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 345:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2130
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 346:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2134
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2138
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 348:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2142
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 349:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2147
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 350:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2152
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 351:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2157
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2162
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 353:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2168
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 354:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2172
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2177
		{
			psqVAL.str = ""
		}
	case 356:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2181
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 357:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2185
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 358:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2192
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 359:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2197
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2201
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2207
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2211
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 363:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2217
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 364:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2221
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 365:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2225
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 366:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2229
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2233
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2239
		{
			psqVAL.str = ""
		}
	case 369:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2243
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 370:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2249
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 371:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2253
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 372:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2257
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 373:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2261
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 374:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2265
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 375:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2270
		{
			psqVAL.str = ""
		}
	case 376:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2274
		{
			psqVAL.str = psqDollar[2].str
		}
	case 377:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2280
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 378:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2284
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2288
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2295
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2299
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 382:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2304
		{
			psqVAL.str = "key"
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2308
		{
			psqVAL.str = psqDollar[1].str
		}
	case 384:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2314
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 385:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2318
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 386:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2323
		{
			psqVAL.str = ""
		}
	case 387:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2327
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 388:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2333
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2337
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 390:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2343
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2347
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2353
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2357
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2363
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2367
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2373
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2379
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2383
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2387
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2391
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2395
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2400
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2404
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2410
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2416
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2422
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2426
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2430
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2435
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2439
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2445
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2451
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2457
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 414:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2461
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 415:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2465
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 416:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2469
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 417:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2473
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2478
		{
			psqVAL.str = ""
		}
	case 419:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2482
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 420:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2486
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 421:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2492
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2496
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2501
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2505
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 425:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2510
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 426:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2514
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2520
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 428:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2524
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 429:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2528
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 430:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2534
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2538
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 432:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2544
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2548
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2552
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2556
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2560
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2564
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2568
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2572
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2576
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2580
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2584
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2588
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 444:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2592
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 445:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2596
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 446:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2600
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 447:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2605
		{
			psqVAL.str = ""
		}
	case 448:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2609
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 449:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2613
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 459:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2632
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 460:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2636
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 461:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2640
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 462:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2645
		{
			psqVAL.str = ""
		}
	case 464:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2651
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2655
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 466:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2660
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 467:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2664
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 468:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2670
		{
			psqLOCAL = []ast.AlterOption{&ast.AlterOwner{Owner: &ast.RoleName{Name: ast.RoleIdent{V: psqDollar[3].str}}}}
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2675
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2679
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 471:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2683
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 472:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2687
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 473:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2691
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 474:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2695
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2701
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2705
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 477:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2709
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 478:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2715
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2719
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2723
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2727
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2731
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2735
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2739
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2743
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2747
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2751
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2756
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2761
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2765
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2769
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2773
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2777
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2781
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2785
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2789
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2793
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2797
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2801
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2805
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2809
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2813
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2817
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2821
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 505:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2825
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2829
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2833
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2839
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2843
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 510:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2849
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2853
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2857
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2861
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2865
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2869
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2875
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2881
		{
			psqDollar[1].alterSchemaUnion().FullyParsed = true
			psqDollar[1].alterSchemaUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterSchemaUnion()
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2887
		{
			psqDollar[1].alterSequenceUnion().SequenceSpec = psqDollar[2].sequenceSpecUnion()
			psqDollar[1].alterSequenceUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterSequenceUnion()
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2893
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[6].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Definer: psqDollar[3].definerUnion(), Security: psqDollar[4].str, Columns: psqDollar[7].columnsUnion(), Select: psqDollar[9].selStmtUnion(), CheckOption: psqDollar[10].str}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2903
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2910
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2922
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2932
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2936
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2940
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2953
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2963
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2967
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:2980
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2986
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2992
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2996
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 533:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3002
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3006
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3012
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3018
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3024
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3030
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3036
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3040
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3044
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3048
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3054
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3060
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3066
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3070
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3074
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3080
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3086
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3090
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 551:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3096
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3100
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}})}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}})}
			}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3109
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3113
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3119
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3123
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3128
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3134
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3138
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3142
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3146
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3150
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3154
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3158
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3162
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3166
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3170
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3174
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3178
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3182
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3186
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3190
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3194
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3198
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3202
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3206
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3210
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3214
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3218
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3222
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3226
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3230
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3234
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3238
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3242
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3246
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3250
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3254
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3258
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3265
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3269
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3273
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3277
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3281
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 595:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3285
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 596:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3289
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3293
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3299
		{
			psqVAL.str = ""
		}
	case 599:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3303
		{
			psqVAL.str = "extended "
		}
	case 600:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3309
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 601:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3313
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 602:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3319
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 603:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3323
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 604:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3329
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 605:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3333
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 606:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3337
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 607:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3343
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 608:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3347
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 609:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3351
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 610:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3357
		{
			psqVAL.empty = struct{}{}
		}
	case 611:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3361
		{
			psqVAL.empty = struct{}{}
		}
	case 612:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3365
		{
			psqVAL.empty = struct{}{}
		}
	case 613:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3371
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 614:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3375
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 615:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3381
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3385
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3389
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3395
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3399
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 620:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3405
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 621:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3411
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 622:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3415
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 623:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3420
		{
			psqVAL.empty = struct{}{}
		}
	case 624:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3422
		{
			psqVAL.empty = struct{}{}
		}
	case 625:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3425
		{
			psqVAL.empty = struct{}{}
		}
	case 626:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3427
		{
			psqVAL.empty = struct{}{}
		}
	case 627:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3432
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3438
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3443
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3447
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 631:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3451
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 632:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3455
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3459
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3463
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 635:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3469
		{
			psqVAL.str = psqDollar[1].str
		}
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3473
		{
			psqVAL.str = psqDollar[1].str
		}
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3477
		{
			psqVAL.str = psqDollar[1].str
		}
	case 638:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3483
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 639:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3487
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3491
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 641:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3495
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 642:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3500
		{
			psqVAL.str = ""
		}
	case 643:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3504
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 644:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3508
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 645:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3514
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3518
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3524
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 648:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3528
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 649:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3534
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3540
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3544
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 652:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3550
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3556
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3560
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3564
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3568
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3574
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3580
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3584
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3588
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 661:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3592
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 662:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3596
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 663:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3600
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 664:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3606
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 665:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3610
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 666:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3616
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 667:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3620
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 668:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3624
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 669:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3628
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 670:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3632
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3636
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3640
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 673:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3644
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 674:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3648
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 675:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3652
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 676:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3656
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 677:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3661
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 678:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3665
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 679:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3669
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 680:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3674
		{
			psqVAL.str = ""
		}
	case 681:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3678
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 682:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3683
		{
			setAllowComments(psqlex, true)
		}
	case 683:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3687
		{
			// Strange argumets shift
			psqLOCAL = &ast.CommentOnSchema{Comments: ast.Comments{psqDollar[2].str}.Parsed(), Schema: psqDollar[5].schemaName.Name, Value: psqDollar[7].exprUnion()}
			setAllowComments(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3695
		{
			setAllowComments(psqlex, true)
		}
	case 685:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3699
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 686:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3705
		{
			psqVAL.strs = nil
		}
	case 687:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3709
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 688:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3714
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3718
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3724
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3728
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3732
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3737
		{
			psqVAL.str = ""
		}
	case 694:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3741
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 695:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3745
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 696:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3750
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3754
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3758
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3764
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 700:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3768
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 701:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3780
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 702:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3785
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 703:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3789
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 704:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3795
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 705:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3799
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 706:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3804
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 707:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3808
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 708:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3813
		{
			psqVAL.strs = nil
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3817
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 710:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3821
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 711:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3825
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 712:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3829
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 713:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3835
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3839
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 715:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3843
		{
			psqVAL.str = ast.DistinctStr
		}
	case 716:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3847
		{
			psqVAL.str = ast.DistinctStr
		}
	case 717:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3851
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 718:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3855
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 719:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3859
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 720:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3865
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 721:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3869
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 722:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3875
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 723:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3879
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 724:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3883
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3887
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3892
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 727:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3896
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 728:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3900
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 730:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3907
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 731:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3912
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3916
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 733:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3922
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3928
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3932
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 738:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3942
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3946
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3950
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 741:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3954
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 742:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3960
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 743:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3964
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 744:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:3970
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 745:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3975
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 746:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3979
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 747:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3985
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 748:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3989
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 749:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3995
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 750:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3999
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 751:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4005
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 752:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4009
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 753:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4013
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 754:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4017
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 755:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4030
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 756:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4034
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 757:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4038
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 758:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4042
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 759:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4048
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 760:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4050
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 761:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4054
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 762:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4056
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 763:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4060
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 764:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4062
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 765:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4066
		{
			psqVAL.schemaName = ast.SchemaName{Name: psqDollar[2].schemaIdent}
		}
	case 766:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4071
		{
			psqVAL.empty = struct{}{}
		}
	case 767:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4073
		{
			psqVAL.empty = struct{}{}
		}
	case 768:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4076
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 769:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4080
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 770:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4084
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 772:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4091
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 773:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4097
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4101
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 775:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4105
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4111
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 777:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4117
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 778:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4121
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 779:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4125
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 780:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4129
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 781:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4135
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4139
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 783:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4149
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 784:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4153
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 785:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4159
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 786:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4163
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 787:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4169
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 788:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4174
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4178
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 790:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4184
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 791:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4188
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 792:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4194
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4198
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4202
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4206
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 796:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4211
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4215
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4219
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4223
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4229
		{
			psqVAL.sequenceName = ast.SequenceName{Name: psqDollar[2].sequenceIdent}
		}
	case 801:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4233
		{
			psqVAL.sequenceName = ast.SequenceName{Qualifier: psqDollar[2].sequenceIdent, Name: psqDollar[4].sequenceIdent}
		}
	case 802:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4239
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4243
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4250
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4254
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4258
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4262
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4266
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4270
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4277
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4281
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4285
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4289
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4295
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4299
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4303
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4307
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4311
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4315
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4319
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4323
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4327
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4331
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4335
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4339
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4345
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4349
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4353
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4357
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4361
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4365
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4369
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4373
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4377
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4381
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4385
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4389
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4393
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4399
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4403
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4407
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4411
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4415
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4419
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4423
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4427
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4431
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4435
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4439
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4443
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4447
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4451
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4455
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4459
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4463
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4467
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4471
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4479
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4483
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4491
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4495
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4501
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4505
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4509
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4515
		{
			psqVAL.str = ""
		}
	case 866:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4519
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4525
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4529
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4536
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4540
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4544
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4548
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4554
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4558
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4562
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4566
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4570
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4574
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4578
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4584
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4588
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4592
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4599
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4605
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4609
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 886:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4619
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4623
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4627
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4631
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4641
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4645
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4649
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4653
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4657
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4661
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4665
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4669
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4673
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4677
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4688
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4692
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4698
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4702
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4707
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4711
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4715
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4719
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4723
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4727
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4731
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4735
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4739
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4743
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4747
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4751
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4755
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4759
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4763
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4767
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4771
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4775
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4779
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4783
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4787
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4791
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4795
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4799
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4803
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4807
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4811
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4815
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4819
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4823
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4827
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4831
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4835
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4839
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4843
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4847
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4851
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4855
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4859
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4863
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4867
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 945:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4871
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 946:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4875
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4879
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 948:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4884
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4888
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4893
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4897
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4903
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4907
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 954:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4913
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 955:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4917
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 956:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4923
		{
		}
	case 957:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4925
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4929
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4933
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4937
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4941
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4945
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4949
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4953
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4957
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4961
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4965
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4971
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4975
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4979
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4983
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4987
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4991
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4995
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4999
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5003
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5013
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5017
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5021
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5032
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 983:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5036
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 984:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5040
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5044
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 986:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5048
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5054
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5058
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5062
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5066
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5070
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5076
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 993:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5080
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 994:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5084
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 995:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5090
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5096
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5100
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5104
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5108
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5112
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5118
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5122
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5126
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5130
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5134
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1006:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5138
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1007:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5142
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1008:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5146
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5150
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5154
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5160
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5164
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5169
		{
			psqVAL.str = string("")
		}
	case 1014:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5173
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1015:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5179
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5183
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1017:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5189
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5194
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5198
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5204
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5208
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5212
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1023:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5218
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5227
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5233
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5237
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5242
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5246
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5251
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5255
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5261
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5267
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5271
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1034:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5277
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5282
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5286
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5290
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5295
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5299
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5305
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5309
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5313
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5318
		{
			psqVAL.str = ""
		}
	case 1044:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5322
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1045:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5328
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1046:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5332
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1047:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5337
		{
			psqVAL.str = ""
		}
	case 1048:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5341
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1049:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5346
		{
			psqVAL.str = "cascaded"
		}
	case 1050:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5350
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1051:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5354
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1052:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5359
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1053:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5363
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1054:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5369
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1055:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5375
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1056:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5381
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1057:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5390
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1058:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5394
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1059:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5399
		{
			psqVAL.str = ""
		}
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5403
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1061:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5409
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1062:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5413
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5419
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1064:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5432
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5436
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5440
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5444
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5448
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1069:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5454
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5458
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5462
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1072:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5466
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1073:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5471
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5475
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5481
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5485
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1077:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5491
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1078:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5495
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1079:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5501
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1080:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5506
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5516
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1082:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5520
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1083:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5526
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1084:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5532
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1085:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5536
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1086:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5542
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1087:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5546
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1088:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5550
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1089:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5554
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5558
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5566
		{
			psqVAL.str = "charset"
		}
	case 1095:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5576
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1096:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5580
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1097:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5584
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1100:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5593
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1101:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5595
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5598
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5600
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1104:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5603
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1105:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5605
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5608
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5610
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1108:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5613
		{
			psqVAL.empty = struct{}{}
		}
	case 1109:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5615
		{
			psqVAL.empty = struct{}{}
		}
	case 1110:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5617
		{
			psqVAL.empty = struct{}{}
		}
	case 1111:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5621
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1112:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5626
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5630
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5635
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1115:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5637
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1116:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5641
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1117:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5647
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5651
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1119:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5655
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5662
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1122:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5668
		{
			psqVAL.schemaIdent = ast.NewSchemaIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1123:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5674
		{
			psqVAL.sequenceIdent = ast.NewSequenceIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5680
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5684
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5688
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1127:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5694
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1128:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5698
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1130:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5705
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1132:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5712
		{
			psqVAL.sequenceIdent = ast.NewSequenceIdent(string(psqDollar[1].str))
		}
	case 1644:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6258
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1645:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6267
		{
			decNesting(psqlex)
		}
	case 1646:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6272
		{
			skipToEnd(psqlex)
		}
	case 1647:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6277
		{
			skipToEnd(psqlex)
		}
	case 1648:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6281
		{
			skipToEnd(psqlex)
		}
	case 1649:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6285
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
