// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:19
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:19

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setIgnoreCommentKeyword(psqlex psqLexer, ignore bool) {
	psqlex.(tokenizer.Tokenizer).SetIgnoreCommentKeyword(ignore)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const STOP = 57642
const LOG_VERBOSITY = 57643
const ON_ERROR = 57644
const FORCE_NULL = 57645
const FORCE_NOT_NULL = 57646
const FORCE_QUOTE = 57647
const ARRAY_MAX_CARDINALITY = 57648
const CHARACTER_SET_CATALOG = 57649
const COMMAND_FUNCTION_CODE = 57650
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57651
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57652
const DATETIME_INTERVAL_CODE = 57653
const DATETIME_INTERVAL_PRECISION = 57654
const DYNAMIC_FUNCTION_CODE = 57655
const END_EXEC = 57656
const PARAMETER_ORDINAL_POSITION = 57657
const PARAMETER_SPECIFIC_CATALOG = 57658
const PARAMETER_SPECIFIC_NAME = 57659
const PARAMETER_SPECIFIC_SCHEMA = 57660
const RETURNED_OCTET_LENGTH = 57661
const TRANSACTIONS_COMMITTED = 57662
const TRANSACTIONS_ROLLED_BACK = 57663
const USER_DEFINED_TYPE_CATALOG = 57664
const USER_DEFINED_TYPE_CODE = 57665
const USER_DEFINED_TYPE_NAME = 57666
const USER_DEFINED_TYPE_SCHEMA = 57667
const VALUES = 57668
const LAST_INSERT_ID = 57669
const NEXT = 57670
const VALUE = 57671
const SHARE = 57672
const MODE = 57673
const SQL_NO_CACHE = 57674
const SQL_CACHE = 57675
const SQL_CALC_FOUND_ROWS = 57676
const JOIN = 57677
const STRAIGHT_JOIN = 57678
const LEFT = 57679
const RIGHT = 57680
const INNER = 57681
const OUTER = 57682
const CROSS = 57683
const NATURAL = 57684
const USE = 57685
const FORCE = 57686
const ON = 57687
const USING = 57688
const INPLACE = 57689
const COPY = 57690
const INSTANT = 57691
const NONE = 57692
const SHARED = 57693
const EXCLUSIVE = 57694
const SUBQUERY_AS_EXPR = 57695
const ID = 57696
const AT_ID = 57697
const AT_AT_ID = 57698
const HEX = 57699
const STRING = 57700
const NCHAR_STRING = 57701
const INTEGRAL = 57702
const FLOAT = 57703
const DECIMAL = 57704
const HEXNUM = 57705
const VALUE_ARG = 57706
const LIST_ARG = 57707
const COMMENT_KEYWORD = 57708
const BIT_LITERAL = 57709
const COMPRESSION = 57710
const JSON_PRETTY = 57711
const JSON_STORAGE_SIZE = 57712
const JSON_STORAGE_FREE = 57713
const JSON_CONTAINS = 57714
const JSON_CONTAINS_PATH = 57715
const JSON_EXTRACT = 57716
const JSON_KEYS = 57717
const JSON_OVERLAPS = 57718
const JSON_SEARCH = 57719
const JSON_VALUE = 57720
const EXTRACT = 57721
const NULL = 57722
const TRUE = 57723
const FALSE = 57724
const OFF = 57725
const DISCARD = 57726
const IMPORT = 57727
const ENABLE = 57728
const DISABLE = 57729
const TABLESPACE = 57730
const VIRTUAL = 57731
const STORED = 57732
const BOTH = 57733
const LEADING = 57734
const TRAILING = 57735
const EMPTY_FROM_CLAUSE = 57736
const LOWER_THAN_CHARSET = 57737
const CHARSET = 57738
const UNIQUE = 57739
const KEY = 57740
const EXPRESSION_PREC_SETTER = 57741
const OR = 57742
const AND = 57743
const NOT = 57744
const BETWEEN = 57745
const CASE = 57746
const WHEN = 57747
const THEN = 57748
const ELSE = 57749
const END = 57750
const LE = 57751
const GE = 57752
const NE = 57753
const NULL_SAFE_EQUAL = 57754
const IS = 57755
const LIKE = 57756
const REGEXP = 57757
const IN = 57758
const SHIFT_LEFT = 57759
const SHIFT_RIGHT = 57760
const DIV = 57761
const MOD = 57762
const UNARY = 57763
const COLLATE = 57764
const BINARY = 57765
const UNDERSCORE_ARMSCII8 = 57766
const UNDERSCORE_ASCII = 57767
const UNDERSCORE_BIG5 = 57768
const UNDERSCORE_BINARY = 57769
const UNDERSCORE_CP1250 = 57770
const UNDERSCORE_CP1251 = 57771
const UNDERSCORE_CP1256 = 57772
const UNDERSCORE_CP1257 = 57773
const UNDERSCORE_CP850 = 57774
const UNDERSCORE_CP852 = 57775
const UNDERSCORE_CP866 = 57776
const UNDERSCORE_CP932 = 57777
const UNDERSCORE_DEC8 = 57778
const UNDERSCORE_EUCJPMS = 57779
const UNDERSCORE_EUCKR = 57780
const UNDERSCORE_GB18030 = 57781
const UNDERSCORE_GB2312 = 57782
const UNDERSCORE_GBK = 57783
const UNDERSCORE_GEOSTD8 = 57784
const UNDERSCORE_GREEK = 57785
const UNDERSCORE_HEBREW = 57786
const UNDERSCORE_HP8 = 57787
const UNDERSCORE_KEYBCS2 = 57788
const UNDERSCORE_KOI8R = 57789
const UNDERSCORE_KOI8U = 57790
const UNDERSCORE_LATIN1 = 57791
const UNDERSCORE_LATIN2 = 57792
const UNDERSCORE_LATIN5 = 57793
const UNDERSCORE_LATIN7 = 57794
const UNDERSCORE_MACCE = 57795
const UNDERSCORE_MACROMAN = 57796
const UNDERSCORE_SJIS = 57797
const UNDERSCORE_SWE7 = 57798
const UNDERSCORE_TIS620 = 57799
const UNDERSCORE_UCS2 = 57800
const UNDERSCORE_UJIS = 57801
const UNDERSCORE_UTF16 = 57802
const UNDERSCORE_UTF16LE = 57803
const UNDERSCORE_UTF32 = 57804
const UNDERSCORE_UTF8 = 57805
const UNDERSCORE_UTF8MB4 = 57806
const UNDERSCORE_UTF8MB3 = 57807
const JSON_EXTRACT_OP = 57808
const JSON_UNQUOTE_EXTRACT_OP = 57809
const CREATE = 57810
const ALTER = 57811
const DROP = 57812
const RENAME = 57813
const ANALYZE = 57814
const ANALYSE = 57815
const ADD = 57816
const FLUSH = 57817
const CHANGE = 57818
const MODIFY = 57819
const DEALLOCATE = 57820
const REVERT = 57821
const SCHEMA = 57822
const TABLE = 57823
const INDEX = 57824
const VIEW = 57825
const TO = 57826
const IGNORE = 57827
const IF = 57828
const PRIMARY = 57829
const COLUMN = 57830
const SPATIAL = 57831
const FULLTEXT = 57832
const KEY_BLOCK_SIZE = 57833
const CHECK = 57834
const INDEXES = 57835
const ACTION = 57836
const CASCADE = 57837
const CONSTRAINT = 57838
const FOREIGN = 57839
const NO = 57840
const REFERENCES = 57841
const RESTRICT = 57842
const SHOW = 57843
const DESCRIBE = 57844
const EXPLAIN = 57845
const ESCAPE = 57846
const REPAIR = 57847
const OPTIMIZE = 57848
const TRUNCATE = 57849
const COALESCE = 57850
const EXCHANGE = 57851
const REBUILD = 57852
const PARTITIONING = 57853
const REMOVE = 57854
const PREPARE = 57855
const EXECUTE = 57856
const MAXVALUE = 57857
const PARTITION = 57858
const REORGANIZE = 57859
const LESS = 57860
const THAN = 57861
const PROCEDURE = 57862
const TRIGGER = 57863
const VINDEX = 57864
const VINDEXES = 57865
const DIRECTORY = 57866
const NAME = 57867
const UPGRADE = 57868
const STATUS = 57869
const VARIABLES = 57870
const WARNINGS = 57871
const CASCADED = 57872
const DEFINER = 57873
const OPTION = 57874
const SQL = 57875
const UNDEFINED = 57876
const SEQUENCE = 57877
const MERGE = 57878
const TEMPORARY = 57879
const TEMPTABLE = 57880
const INVOKER = 57881
const SECURITY = 57882
const FIRST = 57883
const AFTER = 57884
const LAST = 57885
const CANCEL = 57886
const RETRY = 57887
const COMPLETE = 57888
const CLEANUP = 57889
const THROTTLE = 57890
const UNTHROTTLE = 57891
const EXPIRE = 57892
const RATIO = 57893
const BEGIN = 57894
const START = 57895
const TRANSACTION = 57896
const COMMIT = 57897
const ROLLBACK = 57898
const SAVEPOINT = 57899
const RELEASE = 57900
const WORK = 57901
const BIT = 57902
const TINYINT = 57903
const SMALLINT = 57904
const MEDIUMINT = 57905
const INT = 57906
const INTEGER = 57907
const BIGINT = 57908
const INTNUM = 57909
const REAL = 57910
const DOUBLE = 57911
const FLOAT_TYPE = 57912
const DECIMAL_TYPE = 57913
const NUMERIC = 57914
const DATE = 57915
const TIME = 57916
const TIMESTAMP = 57917
const INTERVAL = 57918
const CHAR = 57919
const VARCHAR = 57920
const BOOL = 57921
const CHARACTER = 57922
const VARBINARY = 57923
const NCHAR = 57924
const TEXT = 57925
const JSON = 57926
const JSON_SCHEMA_VALID = 57927
const JSON_SCHEMA_VALIDATION_REPORT = 57928
const ENUM = 57929
const GEOMETRY = 57930
const POINT = 57931
const LINESTRING = 57932
const POLYGON = 57933
const GEOMETRYCOLLECTION = 57934
const MULTIPOINT = 57935
const MULTILINESTRING = 57936
const MULTIPOLYGON = 57937
const ASCII = 57938
const UNICODE = 57939
const NULLX = 57940
const AUTO_INCREMENT = 57941
const APPROXNUM = 57942
const SIGNED = 57943
const UNSIGNED = 57944
const ZEROFILL = 57945
const CODE = 57946
const COLLATION = 57947
const COLUMNS = 57948
const DATABASES = 57949
const ENGINES = 57950
const EVENT = 57951
const EXTENDED = 57952
const FIELDS = 57953
const FULL = 57954
const FUNCTION = 57955
const GTID_EXECUTED = 57956
const KEYSPACES = 57957
const OPEN = 57958
const PLUGINS = 57959
const PRIVILEGES = 57960
const PROCESSLIST = 57961
const SCHEMAS = 57962
const TABLES = 57963
const TRIGGERS = 57964
const USER = 57965
const VGTID_EXECUTED = 57966
const VSCHEMA = 57967
const NAMES = 57968
const GLOBAL = 57969
const SESSION = 57970
const ISOLATION = 57971
const LEVEL = 57972
const READ = 57973
const WRITE = 57974
const ONLY = 57975
const REPEATABLE = 57976
const COMMITTED = 57977
const UNCOMMITTED = 57978
const SERIALIZABLE = 57979
const CURRENT_TIMESTAMP = 57980
const DATABASE = 57981
const CURRENT_DATE = 57982
const NOW = 57983
const CURRENT_TIME = 57984
const LOCALTIME = 57985
const LOCALTIMESTAMP = 57986
const CURRENT_USER = 57987
const UTC_DATE = 57988
const UTC_TIME = 57989
const UTC_TIMESTAMP = 57990
const DAY = 57991
const DAY_HOUR = 57992
const DAY_MICROSECOND = 57993
const DAY_MINUTE = 57994
const DAY_SECOND = 57995
const HOUR = 57996
const HOUR_MICROSECOND = 57997
const HOUR_MINUTE = 57998
const HOUR_SECOND = 57999
const MICROSECOND = 58000
const MINUTE = 58001
const MINUTE_MICROSECOND = 58002
const MINUTE_SECOND = 58003
const MONTH = 58004
const QUARTER = 58005
const SECOND = 58006
const SECOND_MICROSECOND = 58007
const YEAR_MONTH = 58008
const WEEK = 58009
const YEAR = 58010
const REPLACE = 58011
const CONVERT = 58012
const CAST = 58013
const SUBSTR = 58014
const SUBSTRING = 58015
const GROUP_CONCAT = 58016
const SEPARATOR = 58017
const TIMESTAMPADD = 58018
const TIMESTAMPDIFF = 58019
const WEIGHT_STRING = 58020
const LTRIM = 58021
const RTRIM = 58022
const TRIM = 58023
const JSON_ARRAY = 58024
const JSON_OBJECT = 58025
const JSON_QUOTE = 58026
const JSON_DEPTH = 58027
const JSON_TYPE = 58028
const JSON_LENGTH = 58029
const JSON_VALID = 58030
const JSON_ARRAY_APPEND = 58031
const JSON_ARRAY_INSERT = 58032
const JSON_INSERT = 58033
const JSON_MERGE = 58034
const JSON_MERGE_PATCH = 58035
const JSON_MERGE_PRESERVE = 58036
const JSON_REMOVE = 58037
const JSON_REPLACE = 58038
const JSON_SET = 58039
const JSON_UNQUOTE = 58040
const MATCH = 58041
const AGAINST = 58042
const BOOLEAN = 58043
const LANGUAGE = 58044
const WITH = 58045
const QUERY = 58046
const EXPANSION = 58047
const WITHOUT = 58048
const VALIDATION = 58049
const UNUSED = 58050
const ARRAY = 58051
const BYTE = 58052
const CUME_DIST = 58053
const DESCRIPTION = 58054
const DENSE_RANK = 58055
const EMPTY = 58056
const EXCEPT = 58057
const FIRST_VALUE = 58058
const GROUPING = 58059
const GROUPS = 58060
const JSON_TABLE = 58061
const LAG = 58062
const LAST_VALUE = 58063
const LATERAL = 58064
const LEAD = 58065
const NTH_VALUE = 58066
const NTILE = 58067
const OF = 58068
const OVER = 58069
const PERCENT_RANK = 58070
const RANK = 58071
const RECURSIVE = 58072
const ROW_NUMBER = 58073
const SYSTEM = 58074
const WINDOW = 58075
const ACTIVE = 58076
const ADMIN = 58077
const AUTOEXTEND_SIZE = 58078
const BUCKETS = 58079
const CLONE = 58080
const COLUMN_FORMAT = 58081
const COMPONENT = 58082
const DEFINITION = 58083
const ENFORCED = 58084
const ENGINE_ATTRIBUTE = 58085
const EXCLUDE = 58086
const FOLLOWING = 58087
const GEOMCOLLECTION = 58088
const GET_MASTER_PUBLIC_KEY = 58089
const HISTOGRAM = 58090
const HISTORY = 58091
const INACTIVE = 58092
const INVISIBLE = 58093
const LOCKED = 58094
const MASTER_COMPRESSION_ALGORITHMS = 58095
const MASTER_PUBLIC_KEY_PATH = 58096
const MASTER_TLS_CIPHERSUITES = 58097
const MASTER_ZSTD_COMPRESSION_LEVEL = 58098
const NESTED = 58099
const NETWORK_NAMESPACE = 58100
const NOWAIT = 58101
const NULLS = 58102
const OJ = 58103
const OLD = 58104
const OPTIONAL = 58105
const ORDINALITY = 58106
const ORGANIZATION = 58107
const OTHERS = 58108
const PARTIAL = 58109
const PATH = 58110
const PERSIST = 58111
const PERSIST_ONLY = 58112
const PRECEDING = 58113
const PRIVILEGE_CHECKS_USER = 58114
const PROCESS = 58115
const RANDOM = 58116
const REFERENCE = 58117
const REQUIRE_ROW_FORMAT = 58118
const RESOURCE = 58119
const RESPECT = 58120
const RESTART = 58121
const RETAIN = 58122
const REUSE = 58123
const ROLE = 58124
const SECONDARY = 58125
const SECONDARY_ENGINE = 58126
const SECONDARY_ENGINE_ATTRIBUTE = 58127
const SECONDARY_LOAD = 58128
const SECONDARY_UNLOAD = 58129
const SIMPLE = 58130
const SKIP = 58131
const SRID = 58132
const THREAD_PRIORITY = 58133
const TIES = 58134
const UNBOUNDED = 58135
const VCPU = 58136
const VISIBLE = 58137
const RETURNING = 58138
const FORMAT = 58139
const TREE = 58140
const TRADITIONAL = 58141
const LOCAL = 58142
const LOW_PRIORITY = 58143
const NO_WRITE_TO_BINLOG = 58144
const LOGS = 58145
const ERROR = 58146
const GENERAL = 58147
const HOSTS = 58148
const OPTIMIZER_COSTS = 58149
const USER_RESOURCES = 58150
const SLOW = 58151
const CHANNEL = 58152
const RELAY = 58153
const EXPORT = 58154
const AVG_ROW_LENGTH = 58155
const CONNECTION = 58156
const CHECKSUM = 58157
const DELAY_KEY_WRITE = 58158
const ENCRYPTION = 58159
const INSERT_METHOD = 58160
const MAX_ROWS = 58161
const MIN_ROWS = 58162
const PACK_KEYS = 58163
const PASSWORD = 58164
const FIXED = 58165
const DYNAMIC = 58166
const COMPRESSED = 58167
const REDUNDANT = 58168
const COMPACT = 58169
const ROW_FORMAT = 58170
const STATS_AUTO_RECALC = 58171
const STATS_PERSISTENT = 58172
const STATS_SAMPLE_PAGES = 58173
const STORAGE = 58174
const MEMORY = 58175
const DISK = 58176

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"STOP",
	"LOG_VERBOSITY",
	"ON_ERROR",
	"FORCE_NULL",
	"FORCE_NOT_NULL",
	"FORCE_QUOTE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"DATE",
	"TIME",
	"TIMESTAMP",
	"INTERVAL",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"YEAR",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 48,
	13, 48,
	38, 710,
	-2, 38,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	1, 176,
	852, 176,
	-2, 184,
	-1, 51,
	1, 497,
	852, 497,
	-2, 184,
	-1, 60,
	35, 626,
	499, 626,
	510, 626,
	544, 638,
	545, 638,
	-2, 628,
	-1, 65,
	501, 651,
	-2, 649,
	-1, 120,
	498, 1128,
	-2, 148,
	-1, 122,
	1, 177,
	852, 177,
	-2, 184,
	-1, 135,
	399, 184,
	438, 184,
	597, 184,
	-2, 506,
	-1, 136,
	400, 403,
	504, 403,
	-2, 490,
	-1, 731,
	482, 1152,
	-2, 1145,
	-1, 732,
	482, 1153,
	-2, 1146,
	-1, 733,
	482, 1154,
	-2, 1147,
	-1, 744,
	354, 1336,
	482, 1336,
	483, 1336,
	484, 1336,
	-2, 307,
	-1, 745,
	354, 1377,
	482, 1377,
	483, 1377,
	484, 1377,
	-2, 306,
	-1, 746,
	354, 1588,
	482, 1588,
	483, 1588,
	484, 1588,
	-2, 308,
	-1, 808,
	328, 721,
	-2, 736,
	-1, 843,
	414, 1566,
	-2, 140,
	-1, 844,
	414, 1385,
	-2, 141,
	-1, 850,
	414, 1461,
	-2, 1122,
	-1, 998,
	509, 42,
	514, 42,
	-2, 414,
	-1, 1057,
	1, 548,
	852, 548,
	-2, 184,
	-1, 1256,
	482, 1588,
	-2, 310,
	-1, 1284,
	328, 722,
	-2, 741,
	-1, 1285,
	328, 723,
	-2, 742,
	-1, 1336,
	1, 453,
	852, 453,
	-2, 184,
	-1, 1412,
	509, 43,
	514, 43,
	-2, 415,
	-1, 1671,
	482, 1158,
	-2, 1149,
	-1, 1749,
	1, 1115,
	355, 1115,
	852, 1115,
	-2, 1483,
	-1, 1754,
	1, 454,
	852, 454,
	-2, 184,
	-1, 1760,
	354, 412,
	357, 412,
	358, 412,
	359, 412,
	-2, 1404,
	-1, 1761,
	354, 413,
	357, 413,
	358, 413,
	359, 413,
	-2, 1431,
	-1, 1763,
	25, 205,
	-2, 207,
	-1, 1985,
	355, 40,
	-2, 778,
	-1, 2040,
	346, 124,
	355, 124,
	-2, 797,
	-1, 2394,
	355, 40,
	-2, 779,
	-1, 2438,
	7, 54,
	18, 54,
	20, 54,
	356, 54,
	-2, 770,
	-1, 2651,
	22, 1464,
	32, 1464,
	439, 1464,
	577, 1464,
	578, 1464,
	579, 1464,
	580, 1464,
	581, 1464,
	582, 1464,
	583, 1464,
	585, 1464,
	586, 1464,
	587, 1464,
	588, 1464,
	589, 1464,
	590, 1464,
	591, 1464,
	592, 1464,
	593, 1464,
	594, 1464,
	595, 1464,
	596, 1464,
	597, 1464,
	598, 1464,
	600, 1464,
	601, 1464,
	604, 1464,
	605, 1464,
	606, 1464,
	607, 1464,
	608, 1464,
	609, 1464,
	610, 1464,
	611, 1464,
	612, 1464,
	718, 1464,
	-2, 567,
}

const psqPrivate = 57344

const psqLast = 49054

var psqAct = [...]int{
	731, 2500, 2703, 2598, 2676, 1751, 2677, 2478, 2499, 2501,
	1339, 2329, 2649, 2277, 2284, 1684, 2561, 3, 1940, 2010,
	2400, 2606, 741, 2290, 1111, 649, 1706, 2013, 725, 820,
	2189, 2006, 2399, 2582, 101, 1261, 736, 2154, 675, 735,
	653, 724, 38, 1774, 2187, 801, 722, 723, 2318, 2011,
	2035, 2429, 2014, 2390, 1299, 2220, 172, 647, 1787, 172,
	645, 613, 172, 2137, 1068, 734, 2188, 627, 1808, 172,
	2101, 1791, 1836, 961, 1740, 37, 1728, 172, 2024, 151,
	848, 2008, 1989, 1286, 2070, 1418, 1976, 1665, 1825, 1571,
	1530, 133, 172, 1729, 1641, 1582, 1397, 1807, 1386, 1793,
	172, 1712, 2075, 2042, 39, 1410, 962, 1328, 641, 646,
	1685, 1306, 1731, 1264, 1193, 627, 803, 1484, 627, 172,
	627, 1640, 1594, 1547, 805, 1130, 809, 1480, 968, 658,
	1417, 965, 999, 1805, 995, 969, 1467, 996, 1775, 845,
	1312, 1049, 1327, 1109, 823, 1325, 1489, 1381, 815, 1784,
	152, 1637, 125, 1053, 123, 124, 1405, 94, 131, 1850,
	810, 1454, 165, 2117, 2116, 835, 616, 2458, 2145, 2146,
	108, 1131, 2619, 2280, 2620, 1536, 2504, 2504, 821, 1535,
	1029, 175, 176, 177, 1131, 1534, 127, 1681, 1682, 811,
	175, 176, 177, 1533, 1532, 639, 1525, 640, 1972, 594,
	126, 2633, 813, 81, 829, 988, 834, 2378, 134, 2710,
	1096, 2108, 1799, 110, 111, 993, 114, 100, 2680, 120,
	1840, 636, 1006, 616, 2675, 169, 2405, 2690, 589, 96,
	90, 1020, 1838, 1026, 1668, 1795, 102, 2111, 1540, 1032,
	1031, 83, 2709, 994, 85, 2643, 165, 2402, 797, 798,
	799, 800, 83, 849, 808, 2699, 2615, 2098, 2222, 1886,
	842, 2688, 2620, 614, 1839, 987, 2479, 2607, 103, 990,
	127, 2642, 148, 126, 2153, 986, 1140, 985, 984, 83,
	2614, 749, 750, 837, 838, 2654, 804, 1396, 2659, 1140,
	616, 1033, 637, 83, 2362, 2274, 2275, 1865, 1061, 1062,
	1466, 1864, 2657, 1722, 2051, 1196, 2406, 2050, 1973, 609,
	2052, 2663, 2664, 1746, 1747, 2273, 2144, 2403, 802, 2292,
	2293, 126, 607, 1883, 1745, 2658, 2413, 1086, 1108, 1064,
	1778, 1091, 1092, 822, 1035, 1036, 1037, 795, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1329, 794, 1330,
	1055, 1050, 9, 981, 812, 82, 2599, 1683, 2062, 1087,
	1080, 604, 8, 1075, 617, 616, 1200, 1136, 1076, 625,
	612, 1766, 1765, 2681, 616, 7, 1074, 2353, 1073, 973,
	1136, 2073, 2074, 1129, 2351, 2331, 977, 1524, 630, 980,
	623, 1103, 616, 1105, 2682, 129, 1448, 2102, 1826, 1854,
	165, 1056, 1468, 2686, 1034, 982, 1858, 979, 2121, 1056,
	1526, 1527, 1089, 1090, 2407, 1095, 2122, 1038, 1093, 2333,
	2631, 617, 1855, 2291, 127, 1270, 1107, 2294, 1094, 1857,
	1102, 1104, 1778, 1174, 1174, 2294, 1088, 1081, 2707, 1449,
	2605, 1450, 1884, 2136, 2471, 966, 595, 1084, 597, 1001,
	1002, 619, 1162, 618, 600, 983, 599, 602, 610, 603,
	1859, 598, 2332, 608, 2711, 2666, 611, 966, 606, 620,
	1856, 2634, 2566, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1171, 1170, 1172, 1173, 1416, 974, 966, 2281, 617, 836,
	964, 1481, 976, 975, 1806, 1054, 2414, 2412, 2411, 2410,
	2409, 1293, 1011, 2133, 1776, 1777, 1977, 1979, 1001, 983,
	2055, 2283, 1010, 1845, 1695, 2529, 2149, 1898, 1477, 1100,
	1117, 1048, 1014, 1101, 153, 2278, 154, 2085, 2503, 2503,
	1853, 1394, 1987, 1106, 1393, 1008, 1392, 1478, 982, 1008,
	981, 1390, 2292, 2293, 1028, 593, 164, 588, 2279, 1099,
	165, 1055, 1135, 1132, 1133, 1134, 1139, 1141, 1138, 2538,
	1137, 1403, 2445, 617, 2245, 1135, 1132, 1133, 1134, 1139,
	1141, 1138, 617, 1137, 127, 2047, 148, 1052, 2404, 2005,
	2285, 1175, 1176, 146, 1964, 1837, 1798, 92, 1415, 172,
	617, 172, 1884, 2155, 172, 1813, 1835, 1723, 92, 2139,
	2139, 989, 1862, 1677, 2138, 2138, 1776, 1777, 153, 1316,
	154, 2422, 2071, 2522, 627, 1112, 627, 1240, 2064, 1066,
	1752, 1174, 1173, 1472, 2221, 92, 143, 144, 142, 141,
	164, 627, 627, 1007, 1797, 1300, 2129, 1007, 2272, 92,
	2128, 621, 983, 1001, 1004, 1005, 2291, 966, 1008, 1097,
	1123, 998, 1002, 1113, 156, 818, 2613, 1070, 2294, 1490,
	1071, 1552, 1077, 1078, 1079, 1978, 1168, 1169, 1171, 1170,
	1172, 1173, 2609, 615, 38, 1553, 1554, 1551, 1796, 1166,
	1167, 1168, 1169, 1171, 1170, 1172, 1173, 2662, 1615, 1604,
	1605, 1606, 1607, 1617, 1608, 1609, 1610, 1622, 1618, 1611,
	1612, 1619, 1620, 1621, 1613, 1614, 1616, 1623, 117, 2004,
	2239, 1301, 1177, 1178, 1179, 1180, 2408, 2530, 1145, 1475,
	1030, 1331, 1185, 1127, 1188, 137, 145, 147, 2172, 1595,
	136, 2661, 138, 139, 1595, 2087, 1914, 1144, 156, 2166,
	2165, 2164, 2158, 1145, 2157, 2162, 1007, 2461, 2156, 2460,
	2418, 1021, 1001, 2160, 1830, 2159, 1023, 1431, 2282, 1114,
	1024, 1022, 153, 1469, 154, 1470, 1713, 1714, 2567, 1471,
	1430, 1414, 2161, 2163, 1018, 1017, 118, 1145, 749, 750,
	1145, 1162, 1254, 1145, 164, 1259, 1890, 1891, 1892, 2712,
	1181, 2683, 2446, 1929, 2685, 172, 1145, 2532, 627, 627,
	2459, 172, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171,
	1170, 1172, 1173, 2312, 2359, 172, 1802, 1145, 1402, 1260,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1170, 1172,
	1173, 1274, 627, 2684, 1145, 92, 172, 2531, 1903, 803,
	1279, 627, 1273, 2524, 1276, 2523, 2520, 627, 1280, 1550,
	1277, 1542, 1544, 1545, 805, 1164, 1165, 1166, 1167, 1168,
	1169, 1171, 1170, 1172, 1173, 845, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1147, 1543, 2519, 1272, 2516, 1293, 748,
	2325, 2326, 1260, 1464, 2518, 2490, 2465, 146, 1145, 1599,
	2452, 1991, 156, 1145, 2396, 175, 176, 177, 2286, 2453,
	2223, 175, 176, 177, 2132, 2054, 2080, 1265, 2076, 1145,
	2289, 1083, 153, 1900, 154, 1162, 2148, 1848, 2705, 86,
	1008, 2706, 1085, 2704, 1487, 1116, 140, 1452, 1992, 1446,
	143, 144, 142, 141, 164, 1444, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1171, 1170, 1172, 1173, 1443, 2110, 2287,
	1442, 1145, 1293, 91, 2288, 2671, 1293, 1885, 2334, 149,
	1145, 172, 150, 1145, 91, 1382, 2502, 2502, 1145, 1060,
	1456, 1455, 1457, 1458, 1459, 1391, 2456, 2457, 1281, 849,
	1198, 2083, 1199, 1398, 1278, 1126, 155, 82, 100, 157,
	158, 91, 2109, 159, 160, 1124, 1998, 1063, 627, 1412,
	161, 162, 163, 1321, 1322, 91, 1145, 1421, 1125, 2401,
	105, 1423, 1424, 1762, 627, 1262, 804, 1298, 1007, 1988,
	1027, 1429, 2217, 1304, 1432, 1433, 172, 1435, 1145, 137,
	145, 147, 1145, 1275, 136, 1990, 138, 139, 1910, 103,
	2007, 802, 156, 2002, 2640, 1202, 2238, 627, 2002, 2628,
	1422, 1834, 2267, 1425, 1142, 106, 1474, 2608, 2218, 1098,
	1428, 1884, 1479, 2240, 1069, 627, 105, 172, 104, 1491,
	155, 1409, 2007, 157, 158, 2002, 2625, 159, 160, 175,
	176, 177, 172, 1404, 161, 162, 163, 1426, 2002, 172,
	2621, 1293, 1292, 1246, 1247, 1248, 1249, 1250, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 627, 2021, 1145,
	1145, 2374, 1420, 627, 627, 2515, 2590, 1143, 92, 1144,
	175, 176, 177, 2009, 1819, 2174, 1389, 2214, 2575, 1293,
	172, 2357, 1293, 2238, 733, 1293, 1419, 2374, 1293, 2515,
	2514, 2713, 1143, 1744, 1144, 1494, 1411, 1486, 1293, 1407,
	1395, 1406, 1498, 1427, 1500, 1501, 1502, 1503, 175, 176,
	177, 1507, 1817, 2002, 2473, 1145, 2216, 1901, 1399, 1400,
	1401, 2043, 97, 1142, 1293, 627, 1143, 2020, 1144, 1143,
	1934, 1144, 1143, 98, 1144, 1548, 2603, 1145, 1585, 627,
	174, 1482, 1919, 174, 1918, 1143, 174, 1144, 1579, 1579,
	2043, 629, 1822, 174, 627, 627, 1575, 1580, 126, 1546,
	986, 174, 985, 984, 1440, 1441, 1143, 1556, 1144, 1445,
	1711, 175, 176, 177, 155, 1815, 174, 157, 158, 1496,
	140, 159, 160, 1143, 174, 1144, 1596, 1297, 161, 162,
	163, 1576, 1576, 1679, 1949, 1293, 1934, 1293, 1528, 629,
	1517, 1638, 629, 174, 629, 1476, 1521, 1522, 1145, 1145,
	1941, 2301, 2302, 149, 1436, 1669, 150, 172, 1555, 1323,
	1557, 627, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1492, 1493, 1549, 1143, 992, 1144,
	2301, 2300, 1143, 1905, 1144, 2021, 1293, 1497, 172, 2243,
	1293, 627, 1904, 1638, 1504, 1505, 1506, 1696, 1143, 1697,
	1144, 172, 1293, 991, 627, 2078, 1145, 807, 172, 2440,
	172, 1671, 172, 172, 627, 2563, 1694, 627, 1145, 2553,
	1673, 1674, 1145, 1901, 1293, 97, 1724, 1901, 627, 2541,
	1145, 1669, 99, 1145, 2463, 1763, 98, 1901, 845, 2398,
	1143, 845, 1144, 1884, 2118, 1387, 1145, 1303, 1670, 1143,
	38, 1144, 1143, 1145, 1144, 1385, 2103, 1143, 2130, 1144,
	1702, 1145, 1727, 2104, 155, 2099, 2100, 157, 158, 1909,
	2021, 159, 160, 2376, 1145, 1780, 627, 1779, 161, 162,
	163, 2002, 2001, 1809, 1810, 1811, 1463, 1671, 1385, 1384,
	1814, 1816, 1818, 1145, 1293, 1143, 1413, 1144, 1383, 627,
	119, 1756, 2238, 1738, 627, 1421, 1755, 1581, 1421, 1689,
	1421, 1337, 1336, 1006, 1587, 1588, 627, 1143, 627, 1144,
	2330, 1143, 1844, 1144, 1719, 2430, 2431, 1145, 100, 1788,
	1145, 627, 627, 1767, 1759, 1768, 1704, 1771, 1772, 1773,
	1715, 1519, 100, 1794, 1717, 1781, 1782, 1783, 2564, 100,
	2372, 2365, 849, 1799, 172, 849, 172, 1743, 1692, 1742,
	1309, 2696, 1758, 172, 2694, 1757, 1672, 172, 172, 1675,
	1676, 172, 1824, 172, 2678, 2618, 2580, 2433, 1801, 1145,
	172, 2311, 2310, 2309, 1145, 2436, 2088, 172, 2009, 1841,
	2021, 1869, 2256, 2044, 2435, 2253, 1293, 2257, 1143, 1143,
	1144, 1144, 2046, 1789, 2252, 1842, 2364, 1843, 1701, 172,
	1829, 1800, 2668, 1832, 627, 1833, 1804, 1785, 1786, 1812,
	1846, 1847, 2044, 1578, 747, 2641, 1708, 106, 1958, 1577,
	1145, 1884, 1828, 1789, 1827, 1302, 2254, 1831, 105, 1700,
	104, 2255, 2244, 2258, 1851, 2030, 2031, 1875, 1876, 99,
	2227, 1770, 1878, 2509, 1143, 2508, 1144, 167, 2556, 122,
	1820, 1879, 1162, 978, 1157, 793, 1158, 1326, 2665, 828,
	1548, 1558, 1161, 1437, 1438, 1439, 1143, 1548, 1144, 2060,
	1159, 1160, 1156, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1171, 1170, 1172, 1173, 2296, 2081, 1868, 128, 1309, 1957,
	1956, 1895, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 1882, 107, 1016, 1143, 1143, 1144,
	1144, 168, 1894, 92, 1896, 1295, 1015, 1955, 2340, 1293,
	2026, 2029, 2030, 2031, 2027, 1893, 2028, 2032, 997, 1954,
	172, 1549, 1899, 1953, 1591, 2142, 1115, 172, 1549, 833,
	2107, 1952, 840, 627, 1951, 127, 1461, 1460, 1451, 1592,
	2236, 627, 1970, 95, 1713, 1714, 2701, 1950, 1291, 1287,
	2307, 2391, 1872, 1579, 1944, 1143, 1913, 1144, 2555, 1986,
	2477, 1982, 1943, 174, 1288, 174, 627, 1143, 174, 1144,
	2295, 1143, 2034, 1144, 172, 1942, 1705, 1888, 172, 1143,
	1057, 1144, 1143, 1051, 1144, 1927, 826, 827, 629, 104,
	629, 2226, 2015, 2053, 1939, 1143, 1576, 1144, 1671, 2225,
	2587, 2586, 1143, 2012, 1144, 629, 629, 809, 106, 2535,
	1143, 2313, 1144, 97, 2096, 1273, 627, 1308, 1821, 105,
	99, 104, 1520, 1143, 98, 1144, 1999, 106, 1938, 825,
	99, 1937, 1265, 1971, 106, 1670, 105, 1980, 105, 2534,
	627, 810, 1143, 2007, 1144, 105, 172, 104, 2417, 2036,
	2698, 2697, 2063, 172, 1398, 2066, 1009, 1012, 1013, 2179,
	1920, 1690, 627, 2003, 1019, 1911, 1317, 1310, 2041, 2697,
	811, 1421, 1421, 2698, 2056, 2000, 1143, 2536, 1144, 1143,
	1935, 1144, 2451, 2045, 817, 1931, 2115, 109, 2097, 2114,
	1162, 1897, 2048, 40, 172, 93, 172, 172, 172, 172,
	172, 1794, 2072, 2057, 112, 113, 1, 2528, 2065, 172,
	172, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1170,
	1172, 1173, 2507, 2077, 2215, 172, 1293, 2455, 1143, 2656,
	1144, 1930, 2079, 1143, 2095, 1144, 605, 1680, 1263, 2679,
	2652, 1961, 1962, 1294, 1296, 2084, 627, 2089, 2090, 2091,
	2094, 1291, 1287, 2113, 1404, 2026, 2029, 2030, 2031, 2027,
	2653, 2028, 2032, 1453, 1447, 2430, 2431, 1288, 2480, 174,
	2112, 1639, 629, 629, 2560, 174, 2105, 2106, 1792, 1143,
	1000, 1144, 2167, 135, 1753, 1754, 803, 2636, 116, 174,
	959, 115, 1003, 1082, 1823, 2061, 2151, 2171, 2150, 2134,
	1764, 1769, 1579, 1343, 1579, 627, 629, 1579, 1341, 1342,
	174, 1340, 1579, 1345, 1344, 629, 1921, 2377, 2093, 1523,
	2190, 629, 2190, 624, 2033, 2190, 2192, 170, 1332, 2209,
	2190, 2202, 2203, 2204, 2205, 2168, 1473, 2152, 1311, 172,
	1025, 596, 2303, 627, 1849, 1576, 627, 1576, 601, 1072,
	1576, 2195, 1186, 1518, 2224, 1576, 2196, 1698, 1699, 1290,
	2049, 1289, 172, 172, 172, 172, 172, 1579, 2228, 2183,
	2209, 846, 839, 1691, 172, 2232, 2234, 1984, 172, 2017,
	2246, 172, 2629, 172, 2058, 1305, 172, 172, 172, 2229,
	2533, 2208, 2416, 1912, 1593, 1732, 2266, 1541, 651, 650,
	648, 2012, 2210, 2211, 2212, 2213, 1993, 1721, 1148, 1974,
	1576, 2219, 2197, 2198, 2199, 2200, 2201, 1975, 1318, 1280,
	1273, 2025, 2305, 2230, 2023, 2140, 172, 2022, 2141, 172,
	1870, 1739, 2237, 2268, 2432, 174, 2269, 2428, 2247, 2648,
	627, 2250, 1734, 1730, 1997, 627, 1996, 659, 652, 2297,
	644, 2259, 2448, 2263, 2264, 2320, 2248, 2249, 1861, 2251,
	2131, 2270, 1863, 2059, 2120, 1128, 1283, 1465, 1486, 638,
	972, 2317, 629, 1590, 172, 2276, 2565, 172, 1887, 2361,
	1282, 1602, 1603, 2315, 68, 43, 1630, 2341, 629, 632,
	2632, 2304, 2298, 2299, 1119, 2322, 2321, 32, 31, 30,
	174, 29, 24, 23, 22, 21, 20, 26, 19, 18,
	17, 2674, 1794, 2314, 2328, 2316, 2700, 121, 55, 49,
	47, 629, 132, 2327, 130, 51, 46, 166, 1058, 53,
	50, 52, 44, 36, 4, 28, 27, 16, 2336, 629,
	15, 174, 14, 13, 2371, 2338, 2339, 2344, 12, 2343,
	11, 10, 6, 5, 35, 627, 174, 2349, 34, 33,
	1284, 1285, 1290, 174, 1289, 172, 1122, 25, 2, 0,
	0, 0, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 629, 0, 0, 627, 0, 627, 629, 629, 0,
	0, 0, 0, 0, 2347, 2348, 0, 0, 0, 2350,
	2423, 2352, 0, 2354, 174, 0, 2392, 2393, 172, 2015,
	0, 2395, 2425, 2015, 0, 2397, 0, 0, 2427, 2012,
	0, 0, 0, 0, 38, 0, 2454, 0, 2419, 0,
	1597, 0, 0, 2421, 1598, 172, 0, 0, 2441, 0,
	2443, 2444, 2434, 0, 0, 0, 732, 0, 0, 629,
	172, 172, 172, 0, 627, 2437, 0, 0, 2442, 2449,
	0, 0, 0, 629, 0, 0, 0, 2322, 2321, 2450,
	0, 627, 627, 627, 627, 0, 0, 0, 629, 629,
	2472, 0, 0, 0, 2464, 0, 2466, 0, 0, 0,
	0, 0, 0, 1294, 1678, 0, 0, 0, 0, 0,
	0, 2467, 173, 2475, 2476, 173, 0, 0, 173, 0,
	0, 0, 0, 628, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 0, 1703, 0,
	0, 2489, 2486, 0, 2672, 1579, 0, 1579, 173, 0,
	0, 174, 0, 0, 1354, 629, 173, 0, 0, 0,
	0, 0, 0, 2190, 0, 2190, 2505, 2495, 0, 0,
	0, 628, 0, 0, 628, 173, 628, 2512, 0, 0,
	0, 2513, 174, 0, 0, 629, 0, 0, 1576, 2517,
	1576, 2496, 0, 2521, 0, 174, 0, 0, 629, 0,
	2537, 2015, 174, 0, 174, 2485, 174, 174, 629, 0,
	0, 629, 803, 1579, 2525, 2526, 2527, 0, 0, 0,
	0, 2543, 629, 2539, 2545, 0, 803, 2547, 0, 0,
	627, 1803, 0, 0, 0, 0, 0, 2544, 0, 0,
	0, 0, 0, 0, 0, 2559, 0, 2557, 0, 0,
	0, 2577, 0, 0, 2562, 0, 1576, 627, 0, 2578,
	0, 627, 627, 0, 0, 0, 0, 0, 0, 38,
	629, 0, 0, 0, 0, 0, 0, 1579, 0, 0,
	0, 0, 0, 0, 0, 2581, 2591, 0, 0, 627,
	0, 0, 627, 629, 2588, 2589, 0, 0, 629, 0,
	0, 0, 0, 0, 627, 0, 2594, 0, 0, 0,
	629, 0, 629, 0, 627, 172, 0, 0, 2597, 2596,
	1576, 2593, 0, 2604, 2600, 629, 629, 2012, 0, 0,
	2602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2610, 0, 0, 0, 0, 0, 0, 38, 174, 0,
	174, 0, 0, 0, 0, 0, 0, 174, 0, 627,
	627, 174, 174, 0, 0, 174, 0, 174, 0, 0,
	0, 0, 627, 0, 174, 2635, 2630, 172, 627, 0,
	0, 174, 0, 2562, 2637, 2644, 0, 0, 0, 0,
	0, 0, 2647, 2655, 2660, 0, 0, 0, 0, 0,
	0, 0, 2667, 174, 0, 0, 0, 0, 629, 0,
	0, 2673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 1902, 2687, 0, 0, 1906, 2691,
	1907, 1908, 2695, 2693, 2689, 0, 0, 0, 0, 1916,
	0, 0, 1917, 0, 0, 0, 2702, 1579, 0, 0,
	0, 2708, 0, 0, 0, 2692, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 2716, 2717, 1922, 1923,
	1924, 1925, 1926, 2715, 1928, 2578, 0, 0, 0, 0,
	1932, 0, 1933, 1579, 0, 127, 1936, 148, 0, 0,
	1576, 2714, 0, 0, 1945, 1946, 1947, 1948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1959, 1960, 0,
	0, 0, 0, 0, 0, 1965, 1966, 1967, 1968, 1969,
	0, 0, 0, 0, 0, 0, 1576, 0, 0, 0,
	0, 0, 1981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 174, 0, 0, 0, 2018, 0,
	0, 174, 0, 0, 0, 0, 0, 629, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 173, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 628, 628, 0,
	174, 0, 0, 0, 0, 0, 0, 174, 0, 1367,
	1370, 1371, 1372, 1373, 1374, 1375, 629, 1376, 1377, 1378,
	1379, 1380, 1355, 1356, 1357, 1358, 1346, 1348, 1368, 1347,
	1350, 0, 1351, 1352, 0, 0, 1353, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 0, 0, 0, 174, 0,
	174, 174, 174, 174, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2178, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2191, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 2206, 2207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1369, 143, 144, 142, 141, 164, 0, 0, 0, 629,
	0, 173, 0, 0, 628, 628, 0, 173, 0, 2241,
	2242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 0, 2261, 2262,
	0, 0, 0, 174, 0, 0, 0, 629, 628, 0,
	629, 0, 173, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 0, 628, 0, 0, 174, 174, 174, 174,
	174, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 174, 0, 0, 174, 0, 174, 0, 0,
	174, 174, 174, 0, 0, 0, 0, 0, 0, 0,
	137, 145, 147, 0, 0, 136, 0, 138, 139, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 0, 0, 629,
	2342, 0, 0, 715, 0, 0, 0, 2346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2355, 2356, 2358, 2360, 0, 0, 0, 173, 174, 0,
	2366, 174, 0, 2368, 2369, 2370, 0, 0, 0, 0,
	2373, 0, 0, 0, 0, 0, 2375, 0, 0, 2379,
	2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 0,
	0, 2389, 0, 0, 628, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 0, 628, 0, 0, 2438, 2439, 847, 174,
	0, 963, 0, 970, 0, 0, 0, 0, 0, 1354,
	0, 628, 0, 173, 0, 0, 0, 0, 629, 0,
	629, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 140, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 174, 0, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 628, 0, 0, 0, 0, 0, 628,
	628, 0, 0, 0, 149, 0, 0, 150, 0, 174,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 174, 174, 174, 0, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2493, 0, 0, 0, 2494, 629, 629, 629, 629, 0,
	2498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 0, 83, 41, 42, 85, 0, 0, 0,
	628, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 45, 74, 75,
	0, 72, 76, 0, 0, 155, 0, 0, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2558, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 628, 0, 0,
	2568, 2569, 2570, 0, 2571, 2572, 0, 0, 2573, 0,
	2574, 0, 2576, 2579, 0, 0, 0, 0, 0, 2583,
	0, 0, 0, 0, 173, 0, 0, 628, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 173, 0, 0,
	628, 0, 0, 0, 173, 0, 173, 0, 173, 173,
	628, 0, 0, 628, 0, 0, 0, 0, 0, 2601,
	0, 629, 0, 0, 628, 629, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	2617, 0, 0, 629, 0, 2622, 629, 0, 0, 0,
	0, 2623, 2624, 0, 0, 0, 0, 0, 629, 0,
	0, 2626, 628, 0, 0, 0, 0, 0, 629, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 628, 0, 0, 2669, 0, 0,
	0, 2670, 0, 629, 629, 0, 0, 628, 628, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 174, 629, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 173, 0, 0, 0, 1349, 0, 0, 173,
	0, 0, 0, 173, 173, 0, 0, 173, 0, 173,
	0, 0, 0, 0, 716, 0, 173, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 629, 0, 683, 685,
	684, 694, 695, 696, 697, 698, 699, 2552, 2548, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 92,
	171, 0, 0, 592, 0, 0, 622, 847, 0, 847,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 1118, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 592, 1367, 1370, 1371, 1372, 1373, 1374,
	1375, 0, 1376, 1377, 1378, 1379, 1380, 1355, 1356, 1357,
	1358, 1346, 1348, 1368, 1347, 1350, 0, 1351, 1352, 0,
	0, 1353, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 54, 57, 56, 59, 1257, 173, 71, 0, 0,
	79, 0, 0, 173, 0, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 0, 60, 88, 87, 0, 69, 70, 58,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 689, 690,
	173, 1268, 1269, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1369, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 63, 0, 64, 65, 66,
	67, 0, 0, 0, 0, 1314, 0, 0, 0, 0,
	0, 0, 628, 0, 847, 0, 0, 0, 0, 0,
	1333, 726, 0, 676, 730, 678, 727, 728, 0, 674,
	677, 729, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 679,
	680, 682, 686, 687, 2549, 2550, 2551, 693, 701, 703,
	704, 702, 705, 706, 707, 710, 711, 712, 713, 708,
	709, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 173, 173, 173, 173, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 173, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 0, 0, 1257, 963, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 1483, 628,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 173,
	173, 173, 173, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 173, 0, 0, 173, 0, 173,
	847, 0, 173, 173, 173, 0, 847, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 592, 0, 0, 592, 0,
	0, 0, 173, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1586, 0, 0, 0, 0, 0, 0, 1257,
	173, 0, 0, 173, 0, 0, 0, 1600, 1601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1693, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 0, 0, 1707, 0, 0, 0, 0, 0,
	628, 0, 628, 0, 0, 0, 0, 1314, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 847, 0, 0,
	847, 0, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 92, 173, 173, 173, 0,
	628, 737, 1578, 747, 748, 2325, 2326, 738, 740, 970,
	592, 739, 0, 0, 0, 0, 0, 628, 628, 628,
	628, 0, 0, 0, 742, 749, 750, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 1572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1572, 1572, 0, 0, 0, 2323,
	2324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 1258, 0, 0,
	0, 0, 0, 628, 1258, 0, 0, 628, 628, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 173, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 1509, 592, 592, 592, 592, 592, 592,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 628, 0, 0, 0,
	0, 847, 0, 0, 592, 0, 0, 0, 628, 0,
	0, 0, 0, 173, 628, 0, 1707, 0, 0, 0,
	0, 0, 0, 0, 1994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1257, 0, 831, 2019,
	0, 0, 0, 0, 0, 0, 0, 832, 628, 0,
	0, 0, 0, 0, 832, 832, 0, 0, 0, 0,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 1485, 832, 832, 832, 832,
	832, 642, 0, 2082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1687, 0, 0, 0, 1707, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 1485, 592, 0, 592, 0, 592, 1741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 0, 1257, 0, 0, 1257, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2231, 0, 0, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	592, 0, 0, 0, 1257, 0, 0, 592, 0, 0,
	0, 592, 592, 743, 84, 592, 0, 1873, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 1257, 0, 1707, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 84, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 0, 0, 0, 0, 0, 806, 0, 796, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2231, 0,
	0, 832, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1485, 0, 592, 0, 0, 0, 0, 0,
	0, 1687, 1257, 0, 0, 0, 0, 2424, 0, 2426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2481, 2482, 2483, 2484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 2092, 0, 0,
	0, 0, 1146, 0, 0, 0, 1257, 0, 1257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1194, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	592, 592, 592, 592, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 642, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 1258, 0, 0, 1258,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	2584, 0, 0, 0, 2584, 2584, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1257, 0, 2595, 0, 0, 1707, 0, 0, 0, 0,
	0, 0, 0, 592, 1307, 0, 0, 1707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1707, 0, 0,
	0, 0, 0, 0, 0, 1258, 592, 592, 592, 592,
	592, 0, 0, 0, 0, 0, 0, 0, 2260, 0,
	0, 0, 592, 0, 0, 1687, 0, 592, 0, 0,
	592, 2271, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2645, 0, 0, 0, 0,
	0, 2650, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 592, 0, 0, 0, 1110, 0, 1110,
	1059, 0, 1065, 0, 0, 1067, 0, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 2650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 592, 0, 0, 806, 1182, 1183, 1184, 0, 1187,
	1388, 1189, 1190, 1191, 1192, 0, 1195, 1197, 1197, 0,
	1197, 1201, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	0, 1241, 1242, 1243, 1244, 1245, 0, 0, 0, 0,
	1201, 1201, 1201, 1201, 1201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	1267, 0, 0, 0, 806, 0, 806, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 806, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 0, 592, 592, 592, 0, 0, 0,
	0, 1537, 1538, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1583, 1584, 0, 0, 0, 0, 0, 0,
	1589, 0, 0, 0, 0, 0, 0, 1258, 0, 1258,
	0, 0, 0, 0, 0, 1624, 1625, 1626, 1627, 1628,
	1629, 1631, 1635, 1636, 642, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1709, 1710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1790, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 92, 0, 0, 0, 0, 0, 737, 1578,
	747, 748, 2325, 2326, 738, 740, 0, 0, 739, 0,
	1110, 0, 0, 1495, 0, 0, 1110, 1110, 0, 0,
	1499, 742, 749, 750, 0, 0, 0, 0, 0, 0,
	0, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1983, 0,
	0, 1578, 747, 0, 0, 0, 0, 1577, 0, 0,
	0, 1687, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 2323, 2324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1725, 0, 0, 1733, 0, 0, 0, 1194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1716, 0, 0, 0, 0, 0, 0, 1720,
	0, 1726, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 726, 0, 0, 730, 0, 727, 728,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 1852, 0, 0,
	0, 0, 0, 0, 1860, 0, 0, 0, 1866, 1867,
	0, 0, 1871, 0, 0, 0, 0, 0, 0, 0,
	0, 1874, 0, 0, 0, 0, 0, 0, 1877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1889, 0, 0, 0, 0, 0,
	1880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2169, 2170,
	0, 0, 0, 2173, 0, 0, 0, 2175, 2176, 2177,
	0, 0, 0, 0, 0, 0, 0, 0, 2180, 2181,
	2182, 0, 0, 1642, 2184, 0, 2185, 2186, 0, 0,
	0, 2193, 2194, 0, 0, 0, 0, 0, 0, 1642,
	1642, 1642, 1642, 1642, 642, 642, 642, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2235, 0, 0, 806,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2016, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 2037, 2265, 2038,
	2039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2363, 0, 0, 0, 0, 2367, 0,
	0, 0, 0, 0, 0, 2119, 0, 2123, 2124, 2125,
	2126, 2127, 0, 0, 0, 0, 0, 0, 0, 0,
	1531, 2135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2474, 0,
	0, 0, 0, 0, 0, 1733, 1733, 1733, 1733, 1733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2037, 806, 0, 0, 0, 1733, 0, 0, 1733,
	0, 0, 0, 0, 0, 0, 2487, 0, 2488, 0,
	0, 0, 0, 2491, 2492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2319, 0, 0, 0, 0, 2306, 0, 0,
	2308, 0, 0, 0, 0, 0, 0, 0, 0, 2540,
	0, 0, 2542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2345, 0, 0,
	0, 0, 2554, 0, 0, 2335, 0, 0, 2337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2592, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2016, 0, 84, 0, 2016, 0,
	0, 0, 0, 0, 0, 0, 2415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1733, 0, 0, 2616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2468, 2469, 2470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2506, 0, 2510, 2511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 534, 251, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 1666, 0, 660,
	0, 0, 0, 0, 665, 477, 354, 0, 342, 0,
	207, 0, 1667, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1205, 1212, 1215, 1216, 1224, 0, 0, 84,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 2611, 0, 0, 0,
	0, 0, 0, 2627, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 672,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	667, 668, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 92, 0, 0,
	175, 176, 177, 737, 746, 747, 748, 745, 744, 738,
	740, 0, 0, 739, 225, 683, 685, 684, 694, 695,
	696, 697, 698, 699, 700, 681, 742, 749, 750, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 643,
	657, 200, 671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 655, 830, 0, 0, 0, 720, 0, 656,
	0, 0, 664, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	719, 0, 314, 544, 0, 0, 717, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 666, 213, 541, 0,
	214, 0, 373, 511, 329, 689, 690, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 726, 718,
	676, 730, 678, 727, 728, 673, 674, 677, 729, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 721,
	663, 662, 0, 669, 670, 0, 679, 680, 682, 686,
	687, 688, 691, 692, 693, 701, 703, 704, 702, 705,
	706, 707, 710, 711, 712, 713, 708, 709, 714, 661,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 0, 0, 0, 290, 0, 0,
	352, 0, 0, 0, 270, 322, 534, 251, 0, 0,
	0, 0, 0, 205, 229, 0, 0, 0, 0, 0,
	660, 0, 414, 0, 0, 665, 477, 354, 0, 342,
	0, 207, 495, 0, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	672, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 667, 668, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 92, 0,
	0, 175, 176, 177, 737, 746, 747, 748, 745, 744,
	738, 740, 0, 0, 739, 225, 683, 685, 684, 694,
	695, 696, 697, 698, 699, 700, 681, 742, 749, 750,
	393, 259, 309, 266, 258, 506, 0, 496, 1632, 1633,
	1634, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	643, 657, 200, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 655, 0, 0, 0, 0, 720, 0,
	656, 0, 0, 664, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 719, 0, 314, 544, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 666, 213, 541,
	0, 214, 0, 373, 511, 329, 689, 690, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 726,
	718, 676, 730, 678, 727, 728, 673, 674, 677, 729,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	721, 663, 662, 0, 669, 670, 0, 679, 680, 682,
	686, 687, 688, 691, 692, 693, 701, 703, 704, 702,
	705, 706, 707, 710, 711, 712, 713, 708, 709, 714,
	661, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 0, 0, 0, 290, 0,
	0, 352, 0, 83, 0, 270, 322, 534, 251, 0,
	0, 0, 0, 0, 205, 229, 0, 0, 0, 0,
	0, 660, 0, 414, 0, 0, 665, 477, 354, 0,
	342, 0, 207, 495, 0, 410, 294, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 186, 187,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 204,
	206, 208, 211, 212, 215, 216, 217, 218, 219, 222,
	226, 227, 228, 230, 231, 232, 233, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 236, 237, 238,
	239, 240, 241, 245, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 260, 261, 264, 267, 268, 274, 279,
	280, 281, 283, 284, 285, 291, 293, 296, 297, 300,
	302, 304, 306, 307, 308, 310, 311, 312, 313, 316,
	317, 318, 319, 320, 321, 323, 331, 332, 334, 335,
	336, 337, 340, 343, 345, 347, 348, 350, 351, 353,
	356, 357, 359, 360, 363, 364, 366, 369, 372, 375,
	377, 378, 379, 380, 383, 384, 385, 386, 388, 391,
	394, 396, 397, 399, 402, 404, 405, 406, 407, 408,
	409, 413, 416, 417, 418, 419, 421, 423, 424, 425,
	427, 429, 430, 431, 432, 433, 434, 437, 438, 440,
	441, 442, 443, 444, 449, 450, 453, 454, 455, 458,
	459, 460, 461, 462, 463, 465, 468, 469, 473, 475,
	478, 479, 485, 486, 488, 489, 491, 492, 493, 494,
	497, 499, 500, 502, 503, 507, 508, 509, 517, 518,
	522, 523, 524, 525, 528, 529, 530, 531, 532, 533,
	535, 536, 537, 538, 542, 543, 545, 546, 547, 548,
	551, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 566, 567, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 672, 0, 376, 539, 480, 367, 0, 0, 0,
	0, 0, 667, 668, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 234, 0, 382, 0, 275, 0, 92,
	0, 0, 175, 176, 177, 737, 746, 747, 748, 745,
	744, 738, 740, 0, 0, 739, 225, 683, 685, 684,
	694, 695, 696, 697, 698, 699, 700, 681, 742, 749,
	750, 393, 259, 309, 266, 258, 506, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 643, 657, 200, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 655, 0, 0, 0, 0, 720,
	0, 656, 0, 0, 664, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 0, 0, 0,
	0, 188, 263, 446, 0, 0, 183, 0, 0, 0,
	244, 0, 719, 0, 314, 544, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 315, 182, 209, 0, 0,
	381, 0, 452, 481, 0, 278, 271, 0, 0, 521,
	220, 0, 0, 0, 0, 422, 276, 361, 412, 0,
	0, 0, 428, 519, 0, 0, 0, 370, 0, 0,
	0, 0, 210, 250, 398, 487, 0, 472, 362, 510,
	0, 327, 471, 286, 185, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 490, 516, 223, 457, 464,
	445, 550, 202, 0, 484, 0, 324, 325, 201, 0,
	436, 262, 0, 0, 390, 513, 514, 515, 666, 213,
	541, 0, 214, 0, 373, 511, 329, 689, 690, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 272, 0, 0, 0, 292, 0, 0, 0, 0,
	426, 0, 467, 505, 0, 0, 0, 0, 371, 295,
	476, 328, 349, 435, 552, 0, 447, 224, 527, 474,
	726, 718, 676, 730, 678, 727, 728, 673, 674, 677,
	729, 243, 0, 0, 0, 0, 303, 0, 0, 0,
	0, 365, 0, 0, 368, 0, 470, 0, 0, 0,
	565, 721, 663, 662, 0, 669, 670, 0, 679, 680,
	682, 686, 687, 688, 691, 692, 693, 701, 703, 704,
	702, 705, 706, 707, 710, 711, 712, 713, 708, 709,
	714, 661, 0, 203, 344, 91, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 0, 512, 526, 0, 0, 0, 290,
	0, 0, 352, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 948, 935, 0, 495, 322, 534, 251, 896, 955,
	899, 900, 927, 205, 914, 922, 0, 851, 884, 857,
	277, 858, 883, 906, 0, 881, 477, 354, 0, 342,
	885, 207, 869, 0, 410, 294, 189, 855, 859, 860,
	870, 874, 876, 877, 882, 890, 895, 898, 901, 903,
	905, 908, 920, 929, 930, 936, 937, 938, 940, 941,
	943, 952, 953, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 939, 917, 924, 893, 892, 891,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	540, 0, 376, 539, 480, 367, 0, 0, 0, 909,
	0, 912, 934, 904, 928, 873, 918, 0, 289, 923,
	951, 0, 234, 0, 382, 0, 275, 0, 0, 0,
	0, 175, 176, 177, 0, 2638, 0, 2639, 287, 246,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 282, 921, 947, 889,
	393, 259, 309, 266, 258, 506, 0, 496, 862, 911,
	946, 0, 0, 0, 949, 341, 0, 926, 0, 854,
	919, 0, 200, 863, 954, 944, 886, 887, 0, 0,
	0, 0, 0, 0, 0, 907, 913, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	188, 263, 446, 853, 852, 183, 0, 0, 0, 244,
	0, 466, 942, 314, 544, 945, 0, 305, 931, 868,
	0, 0, 0, 865, 315, 182, 209, 871, 894, 381,
	932, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 326, 213, 541,
	0, 214, 0, 373, 511, 329, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 221, 0, 0,
	272, 0, 0, 897, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 950, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 925, 447, 224, 527, 474, 879,
	242, 875, 0, 878, 915, 916, 880, 0, 0, 0,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	448, 0, 864, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 520, 330, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 203, 344, 957, 0, 0, 549, 0, 0,
	856, 0, 0, 0, 0, 265, 888, 0, 298, 299,
	338, 0, 0, 910, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 956, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 0, 0, 933, 290, 0,
	0, 352, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	948, 935, 0, 495, 322, 534, 251, 896, 955, 899,
	900, 927, 205, 914, 922, 0, 851, 884, 857, 277,
	858, 883, 906, 0, 881, 477, 354, 0, 342, 885,
	207, 869, 0, 410, 294, 189, 855, 859, 860, 870,
	874, 876, 877, 882, 890, 895, 898, 901, 903, 905,
	908, 920, 929, 930, 936, 937, 938, 940, 941, 943,
	952, 953, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 939, 917, 924, 893, 892, 891, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 909, 0,
	912, 934, 904, 928, 873, 918, 0, 289, 923, 951,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 921, 947, 889, 393,
	259, 309, 266, 258, 506, 0, 496, 862, 911, 946,
	0, 0, 0, 949, 341, 0, 926, 0, 854, 919,
	0, 200, 863, 954, 944, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 907, 913, 0, 902, 0, 0,
	0, 0, 0, 2272, 0, 0, 0, 0, 0, 0,
	0, 866, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 188,
	263, 446, 853, 852, 183, 0, 0, 0, 244, 0,
	466, 942, 314, 544, 945, 0, 305, 931, 868, 0,
	0, 0, 865, 315, 182, 209, 871, 894, 381, 932,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 221, 0, 0, 272,
	0, 0, 897, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 950, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 925, 447, 224, 527, 474, 879, 242,
	875, 0, 878, 915, 916, 880, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 864, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 957, 0, 0, 549, 0, 0, 856,
	0, 0, 0, 0, 265, 888, 0, 298, 299, 338,
	0, 0, 910, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 956, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 0, 0, 933, 290, 0, 0,
	352, 0, 0, 0, 270, 322, 534, 251, 0, 0,
	0, 0, 0, 205, 229, 0, 0, 0, 0, 0,
	660, 0, 414, 0, 0, 665, 477, 354, 0, 342,
	0, 207, 495, 0, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	672, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 667, 668, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 92, 0,
	1293, 175, 176, 177, 737, 746, 747, 748, 745, 744,
	738, 740, 0, 0, 739, 225, 683, 685, 684, 694,
	695, 696, 697, 698, 699, 700, 681, 742, 749, 750,
	393, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	643, 657, 200, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 655, 0, 0, 0, 0, 720, 0,
	656, 0, 0, 664, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 719, 0, 314, 544, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 666, 213, 541,
	0, 214, 0, 373, 511, 329, 689, 690, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 726,
	718, 676, 730, 678, 727, 728, 673, 674, 677, 729,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	721, 663, 662, 0, 669, 670, 0, 679, 680, 682,
	686, 687, 688, 691, 692, 693, 701, 703, 704, 702,
	705, 706, 707, 710, 711, 712, 713, 708, 709, 714,
	661, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 0, 0, 0, 290, 0,
	0, 352, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	948, 935, 0, 495, 322, 534, 251, 896, 955, 899,
	900, 927, 205, 914, 922, 0, 851, 884, 857, 277,
	858, 883, 906, 0, 881, 477, 354, 0, 342, 885,
	207, 869, 0, 410, 294, 189, 855, 859, 860, 870,
	874, 876, 877, 882, 890, 895, 898, 901, 903, 905,
	908, 920, 929, 930, 936, 937, 938, 940, 941, 943,
	952, 953, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 939, 917, 924, 893, 892, 891, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 909, 0,
	912, 934, 904, 928, 873, 918, 0, 289, 923, 951,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 921, 947, 889, 393,
	259, 309, 266, 258, 506, 0, 496, 862, 911, 946,
	0, 0, 0, 949, 341, 0, 926, 0, 854, 919,
	0, 200, 863, 954, 944, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 907, 913, 0, 902, 0, 0,
	0, 0, 0, 2233, 0, 0, 0, 0, 0, 0,
	0, 866, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 188,
	263, 446, 853, 852, 183, 0, 0, 0, 244, 0,
	466, 942, 314, 544, 945, 0, 305, 931, 868, 0,
	0, 0, 865, 315, 182, 209, 871, 894, 381, 932,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 221, 0, 0, 272,
	0, 0, 897, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 950, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 925, 447, 224, 527, 474, 879, 242,
	875, 0, 878, 915, 916, 880, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 864, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 957, 0, 0, 549, 0, 0, 856,
	0, 0, 0, 0, 265, 888, 0, 298, 299, 338,
	0, 0, 910, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 956, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 0, 0, 933, 290, 0, 0,
	352, 0, 0, 0, 270, 322, 534, 251, 0, 0,
	0, 0, 0, 205, 229, 0, 0, 0, 0, 0,
	660, 0, 414, 0, 0, 665, 477, 354, 0, 342,
	0, 207, 495, 0, 410, 294, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	672, 0, 376, 539, 480, 367, 0, 0, 0, 0,
	0, 667, 668, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 234, 0, 382, 0, 275, 0, 92, 0,
	0, 175, 176, 177, 737, 746, 747, 748, 745, 744,
	738, 740, 0, 0, 739, 225, 683, 685, 684, 694,
	695, 696, 697, 698, 699, 700, 681, 742, 749, 750,
	393, 259, 309, 266, 258, 506, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	643, 657, 200, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 655, 830, 0, 0, 0, 720, 0,
	656, 0, 0, 664, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 0, 0, 0, 0,
	188, 263, 446, 0, 0, 183, 0, 0, 0, 244,
	0, 719, 0, 314, 544, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 315, 182, 209, 0, 0, 381,
	0, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 666, 213, 541,
	0, 214, 0, 373, 511, 329, 689, 690, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 0,
	272, 0, 0, 0, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 0, 0, 0, 371, 295, 476,
	328, 349, 435, 552, 0, 447, 224, 527, 474, 726,
	718, 676, 730, 678, 727, 728, 673, 674, 677, 729,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	721, 663, 662, 0, 669, 670, 0, 679, 680, 682,
	686, 687, 688, 691, 692, 693, 701, 703, 704, 702,
	705, 706, 707, 710, 711, 712, 713, 708, 709, 714,
	661, 0, 203, 344, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 298, 299,
	338, 0, 0, 0, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 0, 0, 0, 290, 0,
	0, 352, 0, 0, 0, 270, 322, 534, 251, 0,
	0, 0, 0, 0, 205, 229, 0, 0, 0, 0,
	0, 660, 0, 414, 0, 0, 665, 477, 354, 0,
	342, 0, 207, 495, 0, 410, 294, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 186, 187,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 204,
	206, 208, 211, 212, 215, 216, 217, 218, 219, 222,
	226, 227, 228, 230, 231, 232, 233, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 236, 237, 238,
	239, 240, 241, 245, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 260, 261, 264, 267, 268, 274, 279,
	280, 281, 283, 284, 285, 291, 293, 296, 297, 300,
	302, 304, 306, 307, 308, 310, 311, 312, 313, 316,
	317, 318, 319, 320, 321, 323, 331, 332, 334, 335,
	336, 337, 340, 343, 345, 347, 348, 350, 351, 353,
	356, 357, 359, 360, 363, 364, 366, 369, 372, 375,
	377, 378, 379, 380, 383, 384, 385, 386, 388, 391,
	394, 396, 397, 399, 402, 404, 405, 406, 407, 408,
	409, 413, 416, 417, 418, 419, 421, 423, 424, 425,
	427, 429, 430, 431, 432, 433, 434, 437, 438, 440,
	441, 442, 443, 444, 449, 450, 453, 454, 455, 458,
	459, 460, 461, 462, 463, 465, 468, 469, 473, 475,
	478, 479, 485, 486, 488, 489, 491, 492, 493, 494,
	497, 499, 500, 502, 503, 507, 508, 509, 517, 518,
	522, 523, 524, 525, 528, 529, 530, 531, 532, 533,
	535, 536, 537, 538, 542, 543, 545, 546, 547, 548,
	551, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 566, 567, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 672, 0, 376, 539, 480, 367, 0, 0, 0,
	0, 0, 667, 668, 0, 0, 0, 0, 0, 289,
	1748, 0, 0, 234, 0, 382, 0, 275, 0, 92,
	0, 0, 175, 176, 177, 737, 746, 747, 748, 745,
	744, 738, 740, 0, 0, 739, 225, 683, 685, 684,
	694, 695, 696, 697, 698, 699, 700, 681, 742, 749,
	750, 1749, 259, 309, 266, 258, 506, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 643, 657, 200, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 655, 0, 0, 0, 0, 720,
	0, 656, 0, 0, 664, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 0, 0, 0,
	0, 188, 263, 446, 0, 0, 183, 0, 0, 0,
	244, 0, 719, 0, 314, 544, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 315, 182, 209, 0, 0,
	381, 0, 452, 481, 0, 278, 271, 0, 0, 521,
	220, 0, 0, 0, 0, 422, 276, 361, 412, 0,
	0, 0, 428, 519, 0, 0, 0, 370, 0, 0,
	0, 0, 210, 250, 398, 487, 0, 472, 362, 510,
	0, 327, 471, 286, 185, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 490, 516, 223, 457, 464,
	445, 550, 202, 0, 484, 0, 324, 325, 201, 0,
	436, 262, 0, 0, 390, 513, 514, 515, 666, 213,
	541, 0, 214, 0, 373, 511, 329, 689, 690, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 272, 0, 0, 0, 292, 0, 0, 0, 0,
	426, 0, 467, 505, 0, 0, 0, 0, 371, 295,
	476, 328, 349, 435, 552, 0, 447, 224, 527, 474,
	726, 718, 676, 730, 678, 727, 728, 673, 674, 677,
	729, 243, 0, 0, 0, 0, 303, 0, 0, 0,
	0, 365, 0, 0, 368, 0, 470, 0, 0, 0,
	565, 721, 663, 662, 0, 669, 670, 0, 679, 680,
	682, 686, 687, 688, 691, 692, 693, 701, 703, 704,
	702, 705, 706, 707, 710, 711, 712, 713, 708, 709,
	714, 661, 0, 203, 344, 0, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 298,
	299, 338, 0, 0, 0, 0, 0, 0, 392, 403,
	0, 0, 439, 0, 504, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 288, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 374,
	0, 387, 389, 0, 395, 0, 400, 0, 401, 411,
	415, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 0, 456, 0, 0, 0, 0, 0,
	482, 483, 0, 0, 512, 526, 0, 0, 0, 290,
	0, 0, 352, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 948, 935, 0, 495, 322, 534, 251, 896, 955,
	899, 900, 927, 205, 914, 922, 0, 851, 884, 857,
	277, 858, 883, 906, 0, 881, 477, 354, 0, 342,
	885, 207, 869, 0, 410, 294, 189, 855, 859, 860,
	870, 874, 876, 877, 882, 890, 895, 898, 901, 903,
	905, 908, 920, 929, 930, 936, 937, 938, 940, 941,
	943, 952, 953, 178, 179, 180, 181, 186, 187, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 204, 206,
	208, 211, 212, 215, 216, 217, 218, 219, 222, 226,
	227, 228, 230, 231, 232, 233, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 236, 237, 238, 239,
	240, 241, 245, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 260, 261, 264, 267, 268, 274, 279, 280,
	281, 283, 284, 285, 291, 293, 296, 297, 300, 302,
	304, 306, 307, 308, 310, 311, 312, 313, 316, 317,
	318, 319, 320, 321, 323, 331, 332, 334, 335, 336,
	337, 340, 343, 345, 347, 348, 350, 351, 353, 356,
	357, 359, 360, 363, 364, 366, 369, 372, 375, 377,
	378, 379, 380, 383, 384, 385, 386, 388, 391, 394,
	396, 397, 399, 402, 404, 405, 406, 407, 408, 409,
	413, 416, 417, 418, 419, 421, 423, 424, 425, 427,
	429, 430, 431, 432, 433, 434, 437, 438, 440, 441,
	442, 443, 444, 449, 450, 453, 454, 455, 458, 459,
	460, 461, 462, 463, 465, 468, 469, 473, 475, 478,
	479, 485, 486, 488, 489, 491, 492, 493, 494, 497,
	499, 500, 502, 503, 507, 508, 509, 517, 518, 522,
	523, 524, 525, 528, 529, 530, 531, 532, 533, 535,
	536, 537, 538, 542, 543, 545, 546, 547, 548, 551,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 566, 567, 939, 917, 924, 893, 892, 891,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	540, 0, 376, 539, 480, 367, 0, 0, 0, 909,
	0, 912, 934, 904, 928, 873, 918, 0, 289, 923,
	951, 0, 234, 0, 382, 0, 275, 0, 0, 0,
	0, 175, 176, 177, 0, 498, 0, 0, 287, 246,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 282, 921, 947, 889,
	393, 259, 309, 266, 258, 506, 0, 496, 862, 911,
	946, 0, 0, 616, 949, 341, 0, 926, 0, 854,
	919, 0, 200, 863, 954, 944, 886, 887, 0, 0,
	0, 0, 0, 0, 0, 907, 913, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	188, 263, 446, 853, 852, 183, 0, 0, 0, 244,
	0, 466, 942, 314, 544, 945, 0, 305, 931, 868,
	0, 0, 0, 865, 315, 182, 209, 871, 894, 381,
	932, 452, 481, 0, 278, 271, 0, 0, 521, 220,
	0, 0, 0, 0, 422, 276, 361, 412, 0, 0,
	0, 428, 519, 0, 0, 0, 370, 0, 0, 0,
	0, 210, 250, 398, 487, 0, 472, 362, 510, 0,
	327, 471, 286, 185, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 490, 516, 223, 457, 464, 445,
	550, 202, 0, 484, 0, 324, 325, 201, 0, 436,
	262, 0, 0, 390, 513, 514, 515, 326, 213, 541,
	0, 958, 0, 373, 511, 329, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 221, 0, 0,
	272, 0, 0, 897, 292, 0, 0, 0, 0, 426,
	0, 467, 505, 0, 950, 0, 0, 850, 844, 843,
	328, 349, 435, 552, 925, 447, 224, 527, 474, 879,
	242, 875, 0, 878, 915, 916, 880, 0, 0, 0,
	243, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	365, 0, 0, 368, 0, 470, 0, 0, 0, 565,
	448, 0, 864, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 520, 330, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 203, 344, 957, 0, 0, 549, 0, 0,
	856, 0, 0, 0, 0, 265, 888, 0, 298, 299,
	338, 0, 0, 910, 0, 0, 0, 392, 403, 0,
	0, 439, 0, 504, 956, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 288, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 374, 0,
	387, 389, 0, 395, 0, 400, 0, 401, 411, 415,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 456, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 512, 526, 0, 0, 933, 290, 0,
	0, 352, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	948, 935, 0, 495, 322, 534, 251, 896, 955, 899,
	900, 927, 205, 914, 922, 0, 851, 884, 857, 277,
	858, 883, 906, 0, 881, 477, 354, 0, 342, 885,
	207, 869, 0, 410, 294, 189, 855, 859, 860, 870,
	874, 876, 877, 882, 890, 895, 898, 901, 903, 905,
	908, 920, 929, 930, 936, 937, 938, 940, 941, 943,
	952, 953, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 939, 917, 924, 893, 892, 891, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 909, 0,
	912, 934, 904, 928, 873, 918, 0, 289, 923, 951,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 921, 947, 889, 393,
	259, 309, 266, 258, 506, 0, 496, 862, 911, 946,
	0, 0, 0, 949, 341, 0, 926, 0, 854, 919,
	0, 200, 863, 954, 944, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 907, 913, 0, 902, 0, 0,
	0, 0, 0, 1718, 0, 0, 0, 0, 0, 0,
	0, 866, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 188,
	263, 446, 853, 852, 183, 0, 0, 0, 244, 0,
	466, 942, 314, 544, 945, 0, 305, 931, 868, 0,
	0, 0, 865, 315, 182, 209, 871, 894, 381, 932,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 221, 0, 0, 272,
	0, 0, 897, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 950, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 925, 447, 224, 527, 474, 879, 242,
	875, 0, 878, 915, 916, 880, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 864, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 957, 0, 0, 549, 0, 0, 856,
	0, 0, 0, 0, 265, 888, 0, 298, 299, 338,
	0, 0, 910, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 956, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 0, 0, 933, 290, 0, 0,
	352, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 948,
	935, 0, 495, 322, 534, 251, 896, 955, 899, 900,
	927, 205, 914, 922, 0, 851, 884, 857, 277, 858,
	883, 906, 0, 881, 477, 354, 0, 342, 885, 207,
	869, 0, 410, 294, 189, 855, 859, 860, 870, 874,
	876, 877, 882, 890, 895, 898, 901, 903, 905, 908,
	920, 929, 930, 936, 937, 938, 940, 941, 943, 952,
	953, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 939, 917, 924, 893, 892, 891, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 909, 0, 912,
	934, 904, 928, 873, 918, 0, 289, 923, 951, 0,
	234, 0, 382, 0, 275, 0, 92, 0, 0, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 921, 947, 889, 393, 259,
	309, 266, 258, 506, 0, 496, 862, 911, 946, 0,
	0, 0, 949, 341, 0, 926, 0, 854, 919, 0,
	200, 863, 954, 944, 886, 887, 0, 0, 0, 0,
	0, 0, 0, 907, 913, 0, 902, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 188, 263,
	446, 853, 852, 183, 0, 0, 0, 244, 0, 466,
	942, 314, 544, 945, 0, 305, 931, 868, 0, 0,
	0, 865, 315, 182, 209, 871, 894, 381, 932, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 221, 0, 0, 272, 0,
	0, 897, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 950, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 925, 447, 224, 527, 474, 879, 242, 875,
	0, 878, 915, 916, 880, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	864, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 957, 0, 0, 549, 0, 0, 856, 0,
	0, 0, 0, 265, 888, 0, 298, 299, 338, 0,
	0, 910, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 956, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 0, 0, 933, 290, 0, 0, 352,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 0, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 948, 935,
	0, 495, 322, 534, 251, 896, 955, 899, 900, 927,
	205, 914, 922, 0, 851, 884, 857, 277, 858, 883,
	906, 0, 881, 477, 354, 0, 342, 885, 207, 869,
	0, 410, 294, 189, 855, 859, 860, 870, 874, 876,
	877, 882, 890, 895, 898, 901, 903, 905, 908, 920,
	929, 930, 936, 937, 938, 940, 941, 943, 952, 953,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 939, 917, 924, 893, 892, 891, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 909, 0, 912, 934,
	904, 928, 873, 918, 0, 289, 923, 951, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 921, 947, 889, 393, 259, 309,
	266, 258, 506, 0, 496, 862, 911, 946, 0, 0,
	616, 949, 341, 0, 926, 0, 854, 919, 0, 200,
	863, 954, 944, 886, 887, 0, 0, 0, 0, 0,
	0, 0, 907, 913, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 188, 263, 446,
	853, 852, 183, 0, 0, 0, 244, 0, 466, 942,
	314, 544, 945, 0, 305, 931, 868, 0, 0, 0,
	865, 315, 182, 209, 871, 894, 381, 932, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 1324, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 958, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 221, 0, 0, 272, 0, 0,
	897, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 950, 0, 0, 850, 844, 843, 328, 349, 435,
	552, 925, 447, 224, 527, 474, 879, 242, 875, 0,
	878, 915, 916, 880, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 864,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 957, 0, 0, 549, 0, 0, 856, 0, 0,
	0, 0, 265, 888, 0, 298, 299, 338, 0, 0,
	910, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 956, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 0, 0, 933, 290, 0, 0, 352, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 0, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 0, 948, 935, 0,
	495, 322, 534, 251, 896, 955, 899, 900, 927, 205,
	914, 922, 0, 851, 884, 857, 277, 858, 883, 906,
	0, 881, 477, 354, 0, 342, 885, 207, 869, 0,
	410, 294, 189, 855, 859, 860, 870, 874, 876, 877,
	882, 890, 895, 898, 901, 903, 905, 908, 920, 929,
	930, 936, 937, 938, 940, 941, 943, 952, 953, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	939, 917, 924, 893, 892, 891, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 540, 0, 376, 539,
	480, 367, 0, 0, 0, 909, 0, 912, 934, 904,
	928, 873, 918, 0, 289, 923, 951, 0, 234, 0,
	382, 0, 275, 0, 0, 0, 0, 175, 176, 177,
	0, 498, 0, 0, 287, 246, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 282, 921, 947, 889, 393, 259, 309, 266,
	258, 506, 0, 496, 862, 911, 946, 0, 0, 616,
	949, 341, 0, 926, 0, 854, 919, 0, 200, 863,
	954, 944, 886, 887, 0, 0, 0, 0, 0, 0,
	0, 907, 913, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 188, 263, 446, 853,
	852, 183, 0, 0, 0, 244, 0, 466, 942, 314,
	544, 945, 0, 305, 931, 868, 0, 0, 0, 865,
	315, 182, 209, 871, 894, 381, 932, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 841, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 326, 213, 541, 0, 958, 0, 373,
	511, 329, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 221, 0, 0, 272, 0, 0, 897,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	950, 0, 0, 850, 844, 843, 328, 349, 435, 552,
	925, 447, 224, 527, 474, 879, 242, 875, 0, 878,
	915, 916, 880, 0, 0, 0, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 448, 0, 864, 0,
	501, 0, 0, 0, 0, 0, 0, 0, 520, 330,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 203, 344,
	957, 0, 0, 549, 0, 0, 856, 0, 0, 0,
	0, 265, 888, 0, 298, 299, 338, 0, 0, 910,
	0, 0, 0, 392, 403, 0, 0, 439, 0, 504,
	956, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 288, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 374, 0, 387, 389, 0, 395,
	0, 400, 0, 401, 411, 415, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 456,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 512,
	526, 0, 0, 933, 290, 0, 0, 352, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 0, 0, 0, 0, 0, 0, 0, 414,
	0, 0, 0, 0, 0, 0, 948, 935, 0, 495,
	322, 534, 251, 896, 955, 899, 900, 927, 205, 914,
	922, 0, 851, 884, 857, 277, 858, 883, 906, 0,
	881, 477, 354, 0, 342, 885, 207, 869, 0, 410,
	294, 189, 855, 859, 860, 870, 874, 876, 877, 882,
	890, 895, 898, 901, 903, 905, 908, 920, 929, 930,
	936, 937, 938, 940, 941, 943, 952, 953, 178, 179,
	180, 181, 186, 187, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 204, 206, 208, 211, 212, 215, 216,
	217, 218, 219, 222, 226, 227, 228, 230, 231, 232,
	233, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 236, 237, 238, 239, 240, 241, 245, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 260, 261, 264,
	267, 268, 274, 279, 280, 281, 283, 284, 285, 291,
	293, 296, 297, 300, 302, 304, 306, 307, 308, 310,
	311, 312, 313, 316, 317, 318, 319, 320, 321, 323,
	331, 332, 334, 335, 336, 337, 340, 343, 345, 347,
	348, 350, 351, 353, 356, 357, 359, 360, 363, 364,
	366, 369, 372, 375, 377, 378, 379, 380, 383, 384,
	385, 386, 388, 391, 394, 396, 397, 399, 402, 404,
	405, 406, 407, 408, 409, 413, 416, 417, 418, 419,
	421, 423, 424, 425, 427, 429, 430, 431, 432, 433,
	434, 437, 438, 440, 441, 442, 443, 444, 449, 450,
	453, 454, 455, 458, 459, 460, 461, 462, 463, 465,
	468, 469, 473, 475, 478, 479, 485, 486, 488, 489,
	491, 492, 493, 494, 497, 499, 500, 502, 503, 507,
	508, 509, 517, 518, 522, 523, 524, 525, 528, 529,
	530, 531, 532, 533, 535, 536, 537, 538, 542, 543,
	545, 546, 547, 548, 551, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 566, 567, 939,
	917, 924, 893, 892, 891, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 540, 0, 376, 539, 480,
	367, 0, 0, 0, 909, 0, 912, 934, 904, 928,
	873, 918, 0, 289, 923, 951, 0, 234, 0, 382,
	0, 275, 0, 0, 0, 0, 175, 176, 177, 0,
	498, 0, 0, 287, 246, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 282, 921, 947, 889, 393, 259, 309, 266, 258,
	506, 0, 496, 862, 911, 946, 0, 0, 0, 949,
	341, 0, 926, 0, 854, 919, 0, 200, 863, 954,
	944, 886, 887, 0, 0, 0, 0, 0, 0, 0,
	907, 913, 0, 902, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 188, 263, 446, 853, 852,
	183, 0, 0, 0, 244, 0, 466, 942, 314, 544,
	945, 0, 305, 931, 868, 0, 0, 0, 865, 315,
	182, 209, 871, 894, 381, 932, 452, 481, 0, 278,
	271, 0, 0, 521, 220, 0, 0, 0, 0, 422,
	276, 361, 412, 0, 0, 0, 428, 519, 0, 0,
	0, 370, 0, 0, 0, 0, 210, 250, 398, 487,
	0, 472, 362, 510, 0, 327, 471, 286, 185, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 490,
	516, 223, 457, 464, 445, 550, 202, 0, 484, 0,
	324, 325, 201, 0, 436, 262, 0, 0, 390, 513,
	514, 515, 326, 213, 541, 0, 214, 0, 373, 511,
	329, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 221, 0, 0, 272, 0, 0, 897, 292,
	0, 0, 0, 0, 426, 0, 467, 505, 0, 950,
	0, 0, 371, 295, 476, 328, 349, 435, 552, 925,
	447, 224, 527, 474, 879, 242, 875, 0, 878, 915,
	916, 880, 0, 0, 0, 243, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 365, 0, 0, 368, 0,
	470, 0, 0, 0, 565, 448, 0, 864, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 520, 330, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 0, 203, 344, 957,
	0, 0, 549, 0, 0, 856, 0, 0, 0, 0,
	265, 888, 0, 298, 299, 338, 0, 0, 910, 0,
	0, 0, 392, 403, 0, 0, 439, 0, 504, 956,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 288, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 374, 0, 387, 389, 0, 395, 0,
	400, 0, 401, 411, 415, 0, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 451, 0, 0, 456, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 512, 526,
	0, 0, 933, 290, 0, 0, 352, 0, 0, 0,
	270, 322, 534, 251, 0, 0, 0, 0, 0, 205,
	229, 0, 0, 0, 0, 0, 660, 0, 414, 0,
	0, 665, 477, 354, 0, 342, 0, 207, 495, 0,
	410, 294, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 186, 187, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 204, 206, 208, 211, 212, 215,
	216, 217, 218, 219, 222, 226, 227, 228, 230, 231,
	232, 233, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 236, 237, 238, 239, 240, 241, 245, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 260, 261,
	264, 267, 268, 274, 279, 280, 281, 283, 284, 285,
	291, 293, 296, 297, 300, 302, 304, 306, 307, 308,
	310, 311, 312, 313, 316, 317, 318, 319, 320, 321,
	323, 331, 332, 334, 335, 336, 337, 340, 343, 345,
	347, 348, 350, 351, 353, 356, 357, 359, 360, 363,
	364, 366, 369, 372, 375, 377, 378, 379, 380, 383,
	384, 385, 386, 388, 391, 394, 396, 397, 399, 402,
	404, 405, 406, 407, 408, 409, 413, 416, 417, 418,
	419, 421, 423, 424, 425, 427, 429, 430, 431, 432,
	433, 434, 437, 438, 440, 441, 442, 443, 444, 449,
	450, 453, 454, 455, 458, 459, 460, 461, 462, 463,
	465, 468, 469, 473, 475, 478, 479, 485, 486, 488,
	489, 491, 492, 493, 494, 497, 499, 500, 502, 503,
	507, 508, 509, 517, 518, 522, 523, 524, 525, 528,
	529, 530, 531, 532, 533, 535, 536, 537, 538, 542,
	543, 545, 546, 547, 548, 551, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	0, 0, 0, 0, 0, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 672, 0, 376, 539,
	480, 367, 0, 0, 0, 0, 0, 667, 668, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 234, 0,
	382, 0, 275, 0, 92, 0, 0, 175, 176, 177,
	737, 746, 747, 748, 745, 744, 738, 740, 0, 0,
	739, 225, 683, 685, 684, 694, 695, 696, 697, 698,
	699, 700, 681, 742, 749, 750, 393, 259, 309, 266,
	258, 506, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 643, 657, 200, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 654, 655,
	0, 0, 0, 0, 720, 0, 656, 0, 0, 664,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 0, 0, 0, 0, 188, 263, 446, 0,
	0, 183, 0, 0, 0, 244, 0, 719, 0, 314,
	544, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	315, 182, 209, 0, 0, 381, 0, 452, 481, 0,
	278, 271, 0, 0, 521, 220, 0, 0, 0, 0,
	422, 276, 361, 412, 0, 0, 0, 428, 519, 0,
	0, 0, 370, 0, 0, 0, 0, 210, 250, 398,
	487, 0, 472, 362, 510, 0, 327, 471, 286, 185,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	490, 516, 223, 457, 464, 445, 550, 202, 0, 484,
	0, 324, 325, 201, 0, 436, 262, 0, 0, 390,
	513, 514, 515, 666, 213, 541, 0, 214, 0, 373,
	511, 329, 689, 690, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 272, 0, 0, 0,
	292, 0, 0, 0, 0, 426, 0, 467, 505, 0,
	0, 0, 0, 371, 295, 476, 328, 349, 435, 552,
	0, 447, 224, 527, 474, 726, 718, 676, 730, 678,
	727, 728, 673, 674, 677, 729, 243, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 365, 0, 0, 368,
	0, 470, 0, 0, 0, 565, 721, 663, 662, 0,
	669, 670, 0, 679, 680, 682, 686, 687, 688, 691,
	692, 693, 701, 703, 704, 702, 705, 706, 707, 710,
	711, 712, 713, 708, 709, 714, 661, 0, 203, 344,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 298, 299, 338, 0, 0, 0,
	0, 0, 0, 392, 403, 0, 0, 439, 0, 504,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 288, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 374, 0, 387, 389, 0, 395,
	0, 400, 0, 401, 411, 415, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 456,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 512,
	526, 0, 0, 0, 290, 0, 0, 352, 0, 0,
	0, 270, 322, 534, 251, 0, 0, 0, 0, 0,
	205, 229, 0, 0, 0, 0, 0, 660, 0, 414,
	0, 0, 665, 477, 354, 0, 342, 0, 207, 495,
	0, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 672, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 667, 668,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 0, 175, 176,
	177, 737, 746, 747, 748, 745, 744, 738, 740, 0,
	0, 739, 225, 683, 685, 684, 694, 695, 696, 697,
	698, 699, 700, 681, 742, 749, 750, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 657, 200,
	671, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 654,
	655, 0, 0, 0, 0, 720, 0, 656, 0, 0,
	664, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 719, 0,
	314, 544, 0, 0, 717, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 666, 213, 541, 0, 214, 0,
	373, 511, 329, 689, 690, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 726, 718, 676, 730,
	678, 727, 728, 673, 674, 677, 729, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 721, 663, 662,
	0, 669, 670, 0, 679, 680, 682, 686, 687, 688,
	691, 692, 693, 701, 703, 704, 702, 705, 706, 707,
	710, 711, 712, 713, 708, 709, 714, 661, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 746, 747, 0, 287, 246, 0, 1577, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 1761, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	1760, 544, 0, 0, 305, 0, 0, 1004, 1005, 0,
	966, 315, 182, 209, 998, 1002, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 83,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 91, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 1736, 0, 0,
	1735, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 83,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 1293, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 91, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 1145, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 1313, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 1315, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 1143, 0, 1144, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 1253, 1256, 0, 0, 287, 246, 1252, 1255, 0,
	0, 1251, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 83,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 91, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	966, 315, 182, 209, 964, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 1293, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 2585, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 1736, 0, 0,
	1735, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	635, 634, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 633, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 1686, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 1688, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 2646, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 2585, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 1573, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 2068, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 0, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 1995, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 322, 534, 251, 290, 0, 0, 352, 0,
	205, 0, 270, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 229, 477, 354, 0, 342, 0, 207, 0,
	414, 410, 294, 189, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 186, 187, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 204, 206, 208, 211, 212,
	215, 216, 217, 218, 219, 222, 226, 227, 228, 230,
	231, 232, 233, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 236, 237, 238, 239, 240, 241, 245,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 260,
	261, 264, 267, 268, 274, 279, 280, 281, 283, 284,
	285, 291, 293, 296, 297, 300, 302, 304, 306, 307,
	308, 310, 311, 312, 313, 316, 317, 318, 319, 320,
	321, 323, 331, 332, 334, 335, 336, 337, 340, 343,
	345, 347, 348, 350, 351, 353, 356, 357, 359, 360,
	363, 364, 366, 369, 372, 375, 377, 378, 379, 380,
	383, 384, 385, 386, 388, 391, 394, 396, 397, 399,
	402, 404, 405, 406, 407, 408, 409, 413, 416, 417,
	418, 419, 421, 423, 424, 425, 427, 429, 430, 431,
	432, 433, 434, 437, 438, 440, 441, 442, 443, 444,
	449, 450, 453, 454, 455, 458, 459, 460, 461, 462,
	463, 465, 468, 469, 473, 475, 478, 479, 485, 486,
	488, 489, 491, 492, 493, 494, 497, 499, 500, 502,
	503, 507, 508, 509, 517, 518, 522, 523, 524, 525,
	528, 529, 530, 531, 532, 533, 535, 536, 537, 538,
	542, 543, 545, 546, 547, 548, 551, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 0, 0, 0, 0, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 540, 0, 376,
	539, 480, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 234,
	0, 382, 0, 275, 0, 92, 0, 0, 175, 176,
	177, 0, 498, 0, 0, 287, 246, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 282, 0, 0, 0, 393, 259, 309,
	266, 258, 506, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 263, 446,
	0, 0, 183, 0, 0, 0, 244, 0, 466, 0,
	314, 544, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 315, 182, 209, 0, 0, 381, 0, 452, 481,
	0, 278, 271, 0, 0, 521, 220, 0, 0, 0,
	0, 422, 276, 361, 412, 0, 0, 0, 428, 519,
	0, 0, 0, 370, 0, 0, 0, 0, 210, 250,
	398, 487, 0, 472, 362, 510, 0, 327, 471, 286,
	185, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 490, 516, 223, 457, 464, 445, 550, 202, 0,
	484, 0, 324, 325, 201, 0, 436, 262, 0, 0,
	390, 513, 514, 515, 326, 213, 541, 0, 214, 0,
	373, 511, 329, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 272, 0, 0,
	0, 292, 0, 0, 0, 0, 426, 0, 467, 505,
	0, 0, 0, 0, 371, 295, 476, 328, 349, 435,
	552, 0, 447, 224, 527, 474, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 470, 0, 0, 0, 565, 448, 0, 0,
	0, 501, 0, 0, 0, 0, 0, 0, 0, 520,
	330, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 203,
	344, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 298, 299, 338, 0, 0,
	0, 0, 0, 0, 392, 403, 0, 0, 439, 0,
	504, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 288, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 374, 0, 387, 389, 0,
	395, 0, 400, 0, 401, 411, 415, 0, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	456, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	512, 526, 0, 0, 0, 290, 0, 0, 352, 0,
	0, 0, 270, 322, 534, 251, 1737, 0, 0, 0,
	0, 205, 229, 0, 0, 0, 0, 0, 277, 0,
	414, 0, 0, 0, 477, 354, 0, 342, 0, 207,
	495, 0, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 0, 0, 0, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 322, 534, 251, 290, 0, 0, 352,
	0, 205, 0, 270, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 229, 477, 354, 0, 342, 0, 207,
	0, 414, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 0, 0, 0, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 322, 534, 251, 290, 0, 0, 352,
	0, 205, 0, 270, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 229, 477, 354, 0, 342, 0, 207,
	0, 414, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 0, 0, 0, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 1529, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 322, 534, 251, 290, 0, 0, 352,
	0, 205, 0, 270, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 229, 477, 354, 0, 342, 0, 207,
	0, 414, 410, 294, 189, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 186, 187, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 204, 206, 208, 211,
	212, 215, 216, 217, 218, 219, 222, 226, 227, 228,
	230, 231, 232, 233, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 236, 237, 238, 239, 240, 241,
	245, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	260, 261, 264, 267, 268, 274, 279, 280, 281, 283,
	284, 285, 291, 293, 296, 297, 300, 302, 304, 306,
	307, 308, 310, 311, 312, 313, 316, 317, 318, 319,
	320, 321, 323, 331, 332, 334, 335, 336, 337, 340,
	343, 345, 347, 348, 350, 351, 353, 356, 357, 359,
	360, 363, 364, 366, 369, 372, 375, 377, 378, 379,
	380, 383, 384, 385, 386, 388, 391, 394, 396, 397,
	399, 402, 404, 405, 406, 407, 408, 409, 413, 416,
	417, 418, 419, 421, 423, 424, 425, 427, 429, 430,
	431, 432, 433, 434, 437, 438, 440, 441, 442, 443,
	444, 449, 450, 453, 454, 455, 458, 459, 460, 461,
	462, 463, 465, 468, 469, 473, 475, 478, 479, 485,
	486, 488, 489, 491, 492, 493, 494, 497, 499, 500,
	502, 503, 507, 508, 509, 517, 518, 522, 523, 524,
	525, 528, 529, 530, 531, 532, 533, 535, 536, 537,
	538, 542, 543, 545, 546, 547, 548, 551, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	566, 567, 0, 0, 0, 0, 0, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 540, 0,
	376, 539, 480, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	234, 0, 382, 0, 275, 0, 1408, 0, 0, 175,
	176, 177, 0, 498, 0, 0, 287, 246, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 282, 0, 0, 0, 393, 259,
	309, 266, 258, 506, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 263,
	446, 0, 0, 183, 0, 0, 0, 244, 0, 466,
	0, 314, 544, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 315, 182, 209, 0, 0, 381, 0, 452,
	481, 0, 278, 271, 0, 0, 521, 220, 0, 0,
	0, 0, 422, 276, 361, 412, 0, 0, 0, 428,
	519, 0, 0, 0, 370, 0, 0, 0, 0, 210,
	250, 398, 487, 0, 472, 362, 510, 0, 327, 471,
	286, 185, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 490, 516, 223, 457, 464, 445, 550, 202,
	0, 484, 0, 324, 325, 201, 0, 436, 262, 0,
	0, 390, 513, 514, 515, 326, 213, 541, 0, 214,
	0, 373, 511, 329, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 272, 0,
	0, 0, 292, 0, 0, 0, 0, 426, 0, 467,
	505, 0, 0, 0, 0, 371, 295, 476, 328, 349,
	435, 552, 0, 447, 224, 527, 474, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 365, 0,
	0, 368, 0, 470, 0, 0, 0, 565, 448, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	520, 330, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	203, 344, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 298, 299, 338, 0,
	0, 0, 0, 0, 0, 392, 403, 0, 0, 439,
	0, 504, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 288, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 374, 0, 387, 389,
	0, 395, 0, 400, 0, 401, 411, 415, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 456, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 512, 526, 0, 0, 0, 290, 0, 0, 352,
	0, 0, 0, 270, 322, 534, 251, 0, 0, 0,
	0, 0, 205, 229, 0, 0, 0, 0, 0, 277,
	0, 414, 0, 0, 1335, 477, 354, 0, 342, 0,
	207, 495, 0, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1334, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 1319, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 590, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 2651, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 2394, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 1985, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1688, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1315, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 1121, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	439, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 322, 534, 251, 290, 0, 0,
	352, 0, 205, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 229, 477, 354, 0, 342, 0,
	207, 0, 414, 410, 294, 189, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 186, 187, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 204, 206, 208,
	211, 212, 215, 216, 217, 218, 219, 222, 226, 227,
	228, 230, 231, 232, 233, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 236, 237, 238, 239, 240,
	241, 245, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 260, 261, 264, 267, 268, 274, 279, 280, 281,
	283, 284, 285, 291, 293, 296, 297, 300, 302, 304,
	306, 307, 308, 310, 311, 312, 313, 316, 317, 318,
	319, 320, 321, 323, 331, 332, 334, 335, 336, 337,
	340, 343, 345, 347, 348, 350, 351, 353, 356, 357,
	359, 360, 363, 364, 366, 369, 372, 375, 377, 378,
	379, 380, 383, 384, 385, 386, 388, 391, 394, 396,
	397, 399, 402, 404, 405, 406, 407, 408, 409, 413,
	416, 417, 418, 419, 421, 423, 424, 425, 427, 429,
	430, 431, 432, 433, 434, 437, 438, 440, 441, 442,
	443, 444, 449, 450, 453, 454, 455, 458, 459, 460,
	461, 462, 463, 465, 468, 469, 473, 475, 478, 479,
	485, 486, 488, 489, 491, 492, 493, 494, 497, 499,
	500, 502, 503, 507, 508, 509, 517, 518, 522, 523,
	524, 525, 528, 529, 530, 531, 532, 533, 535, 536,
	537, 538, 542, 543, 545, 546, 547, 548, 551, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 566, 567, 0, 0, 0, 0, 0, 0, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 540,
	0, 376, 539, 480, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 234, 0, 382, 0, 275, 0, 0, 0, 0,
	175, 176, 177, 0, 498, 0, 0, 287, 246, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 282, 0, 0, 0, 393,
	259, 309, 266, 258, 506, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	263, 446, 0, 0, 183, 0, 0, 0, 244, 0,
	466, 0, 314, 544, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 315, 182, 209, 0, 0, 381, 0,
	452, 481, 0, 278, 271, 0, 0, 521, 220, 0,
	0, 0, 0, 422, 276, 361, 412, 0, 0, 0,
	428, 519, 0, 0, 0, 370, 0, 0, 0, 0,
	210, 250, 398, 487, 0, 472, 362, 510, 0, 327,
	471, 286, 185, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 490, 516, 223, 457, 464, 445, 550,
	202, 0, 484, 0, 324, 325, 201, 0, 436, 262,
	0, 0, 390, 513, 514, 515, 326, 213, 541, 0,
	214, 0, 373, 511, 329, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 272,
	0, 0, 0, 292, 0, 0, 0, 0, 426, 0,
	467, 505, 0, 0, 0, 0, 371, 295, 476, 328,
	349, 435, 552, 0, 447, 224, 527, 474, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 365,
	0, 0, 368, 0, 470, 0, 0, 0, 565, 448,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 520, 330, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 203, 344, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 298, 299, 338,
	0, 0, 0, 0, 0, 0, 392, 403, 0, 0,
	814, 0, 504, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 288, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 374, 0, 387,
	389, 0, 395, 0, 400, 0, 401, 411, 415, 0,
	0, 420, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 456, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 512, 526, 0, 0, 0, 290, 0, 0,
	352, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 948, 935, 0,
	0, 0, 414, 0, 896, 955, 899, 900, 927, 0,
	914, 922, 495, 851, 884, 857, 0, 858, 883, 906,
	0, 881, 0, 0, 0, 0, 885, 0, 869, 0,
	0, 0, 0, 855, 859, 860, 870, 874, 876, 877,
	882, 890, 895, 898, 901, 903, 905, 908, 920, 929,
	930, 936, 937, 938, 940, 941, 943, 952, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 917, 924, 893, 892, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 912, 934, 904,
	928, 873, 918, 0, 0, 923, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 947, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 911, 946, 0, 0, 0,
	949, 0, 0, 926, 0, 854, 919, 0, 0, 863,
	954, 944, 886, 887, 0, 0, 0, 0, 0, 0,
	0, 907, 913, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 853,
	852, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 945, 0, 0, 931, 868, 0, 0, 0, 865,
	0, 0, 0, 871, 894, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 879, 0, 875, 0, 878,
	915, 916, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933,
}

var psqPact = [...]int{
	3495, -1000, -695, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1751, 1761, -1000,
	1617, -1000, -1000, -1000, 1852, -1000, 354, 1056, -1000, 1664,
	-175, 2704, 1364, -175, -1000, 42613, 49, -1000, 41013, 47,
	-176, 42613, -1000, -181, -1000, -207, 42613, -186, 29791, -1000,
	-1000, -622, 20180, 1458, -290, -301, 42613, -1000, -1000, -1000,
	-1000, 1780, 1309, -1000, 244, -1000, -1000, -1000, -1000, -1000,
	-1000, 47413, -1000, -1000, -1000, -1000, -1000, 1832, 231, 42613,
	-1000, 1729, 1309, -1000, 20180, 1770, 1723, -1000, 13524, -1000,
	13524, -13, -1000, -1000, 18530, -1000, -1000, 27391, 42613, 35391,
	-14, -1000, 1664, -1000, -1000, -1000, -233, -1000, -1000, -451,
	-1000, 958, 933, -1000, -1000, 393, 138, 3, -56, -56,
	21, 1631, 1621, 384, 383, 247, -1000, 519, 306, -484,
	-485, -1000, -34, 306, 306, 306, -124, 306, 306, 306,
	306, 306, 306, 306, 306, 306, -1000, 20, -1000, -147,
	1664, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42613, -201,
	42613, -1000, 137, 42613, 642, 642, -260, 642, 642, 642,
	-184, 412, -311, -1000, -185, -132, -213, -129, 635, -107,
	-1000, -212, -1000, 16852, -167, 16852, -1000, 1654, -1000, -1000,
	-1000, -1000, 567, -1000, 19, -1000, -1000, -1000, -1000, -1000,
	42613, 46613, 233, 309, -1000, -1000, -1000, -1000, -255, -1000,
	-1000, 699, 884, 20180, 452, -1000, 1168, 183, -1000, -1000,
	-1000, -1000, -1000, 98, 20991, 20991, 20991, 20991, -1000, -1000,
	764, 764, 764, 764, 20991, 764, 20991, 764, 764, 764,
	764, 20180, 764, 764, 764, -1000, 764, 764, 764, 764,
	764, 764, 764, 764, 764, 764, 764, 764, 764, 764,
	764, 764, 764, 764, 764, 764, 764, 764, 764, 764,
	764, 764, 764, 764, 764, 764, 764, 764, 764, 764,
	764, 764, 764, 764, 764, 764, 135, 764, 764, 764,
	764, 764, -1000, -1000, -1000, -1000, 764, 764, 764, 764,
	764, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25791, -1000, 9385, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42613, -1000, 764, 42613, 42613, -105,
	26591, 1729, 1309, -1000, 1780, 1787, 244, -1000, 1888, 1530,
	1313, 596, 1309, 882, 42613, -1000, 281, -1000, 1215, -1000,
	-1000, -1000, -1000, -1000, 1002, 20180, -1000, -1000, 1432, 1813,
	-1000, 24991, 127, 1570, 1812, 40213, -1000, -13, -13, 914,
	17691, -299, -1000, -1000, -1000, 307, 39413, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1654, 1066,
	42613, -1000, -1000, 3337, 722, -1000, 1054, -1000, 1043, -1000,
	1001, 20180, -139, 43, 722, 37, 35, 32, -1000, -1000,
	-399, -1000, 722, -1000, -1000, -1000, -1000, 306, 306, 306,
	455, 543, 2704, -1000, -1000, -1000, -1000, 38602, 722, -1000,
	1052, -1000, 370, 84, 134, 134, 722, -1000, -1000, 42613,
	722, 722, 42613, 42613, -25, -1000, -1000, -1000, -1000, 42613,
	722, 369, 356, 722, 722, 42613, 722, -1000, -1000, 1233,
	-1000, -1000, -1000, 306, 306, 589, 586, 574, 306, 568,
	-119, 1667, 566, 130, 1666, 1665, 42613, 1042, 526, -1000,
	-350, -1000, -1000, -148, 278, 722, 305, 1664, 900, 17,
	39, 722, -12, -12, 42613, -1000, 19369, -1000, -1000, 563,
	20180, -1000, 645, 635, 635, -1000, -1000, -1000, -1000, -1000,
	642, 42613, 645, -1000, -1000, -1000, 635, 642, 42613, 642,
	642, 642, 642, 635, 635, 635, 642, 42613, 42613, 42613,
	42613, 42613, 42613, 42613, 42613, 42613, 16852, -1000, 1437, -1000,
	-1000, -1000, 16852, 16852, -1000, -1000, -1000, -187, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -405, 893, 37802,
	-1000, -626, -627, -635, -1000, -1000, -1000, -641, -645, -1000,
	-1000, -1000, 20180, 20180, 20180, -505, -1000, 468, 20991, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 481, 253, 20991, 20991,
	20991, 1538, 20991, 20991, 20991, 20991, 20991, 20991, 20991, 20991,
	20991, 20991, 20991, 20991, 32991, 1172, 1172, 183, 183, 183,
	183, -1000, 13524, 20180, 20180, 183, -1000, 722, 37002, 13524,
	13524, 20180, 1660, 319, 884, 42613, -1000, 596, -1000, -1000,
	-1000, 522, -1000, 42613, 42613, 22, 20180, 20180, 20180, 20180,
	20180, 20180, 8574, 20180, 20180, 20180, 20180, 20180, 20180, 20180,
	20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180,
	20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180, 7763,
	19369, 13524, 13524, 13524, 13524, 13524, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 121, 1048,
	1150, 818, -1000, 888, -1000, -461, 30591, 20180, 1807, 1122,
	42613, 281, 13, 1787, -1000, -1000, -1000, 1729, -1000, 1729,
	1048, 1685, 1221, 13524, -1000, -1000, 1685, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 596, -1000, 42613, 882, 1711,
	42613, -1000, 1205, 20180, 20180, 865, -1000, 739, 54, -1000,
	42613, -1000, -1000, 45813, -1000, -1000, 16013, 42613, 271, 42613,
	-1000, 28991, 36202, 15174, -299, -1000, 15174, 788, -1000, -323,
	-336, 14335, 182, -1000, -1000, -1000, 393, 22591, 657, 182,
	-247, -1000, -1000, -1000, 1001, -1000, 1001, 1282, 1001, 1001,
	1001, -7, -1000, 1033, 1031, -1000, 1001, 1001, 1001, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -42, -1000, 20180, -134, 35391, 1677, 453, 956, -148,
	-9, 1117, 722, 722, 722, -9, -1000, 113, -1000, 864,
	801, 763, 1418, 1759, -1000, -1000, 847, -1000, 42613, -160,
	-1000, -64, -1000, 35391, 722, 353, 134, 722, -1000, 722,
	-1000, -1000, 564, -174, -548, 42613, -160, 32991, -1000, -1000,
	-1000, 722, -1000, -1000, -1000, 12, -1000, -1000, -1000, -1000,
	32991, 32991, -1000, -1000, -1000, 556, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -690, 42613, -1000, 42613, -1000, 30, -158, -117,
	-69, -92, 42613, -1000, -1000, -60, 42613, 42613, -12, 1156,
	42613, 1686, 42613, -1000, -1000, -1000, -1000, -1000, 884, 42613,
	-1000, -1000, 642, 642, -1000, -1000, 42613, 642, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 642, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42613, -1000,
	-1000, -1000, -1000, 42613, -1000, -1000, -1000, -1000, -268, -325,
	237, -1000, -1000, -1000, -1000, 1715, -1000, 884, 332, -1000,
	764, -1000, -1000, 403, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 481, 20991, 20991, 20991, 1446, -4, 377, 481, 395,
	429, 251, 251, 236, 236, 187, 187, 187, 187, 187,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 552,
	-1000, 978, -1000, 813, 947, 596, -1000, 978, 978, 1024,
	13524, -1000, -1000, 324, -1000, 20180, 596, -1000, -1000, 596,
	839, 837, 1806, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 884, 956, 956, 956, 956, 956,
	20180, 779, -1000, -1000, -1000, 1536, 1490, 596, 699, 596,
	825, -1000, 1485, 956, 1436, 1433, 1399, 905, 1380, 1367,
	1359, 956, 956, 956, 889, 1352, 1339, 1336, 1328, 1324,
	1312, 1255, 1254, 1183, 956, 596, 13524, 13524, 812, 764,
	102, -1000, 978, 596, 596, 978, 978, 19369, -1000, 42613,
	-1000, -619, -1000, -341, 163, -1000, 45013, -1000, -1000, 596,
	6050, -1000, 44213, -1000, 518, 674, -1000, -1000, -1000, -1000,
	34591, 982, 1685, -1000, -1000, 764, 1036, -1000, -1000, 884,
	884, 20180, -1000, -1000, -1000, 288, -1000, -1000, -1000, 97,
	1788, 1153, 42613, 764, -1000, 24191, -1000, 1145, 1335, -1000,
	-1000, -1000, 1707, 23391, -1000, 764, 764, 42613, 1186, 1157,
	-1000, 93, -1000, 788, -299, -344, -1000, -1000, -1000, -1000,
	884, -1000, 544, -1000, 155, -1000, -23, -1000, -1000, -1000,
	-1000, -1000, -1000, 1548, -262, -1000, -1000, -1000, -109, 1001,
	-1000, -7, -1000, -1000, -1000, 33791, 173, 173, -232, 547,
	547, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	959, -1000, -134, -1000, -1000, 545, -1000, -1000, 1565, 42613,
	-1000, -1000, 625, 1677, 27, 42613, 329, 1151, -1000, 1117,
	1117, 1117, 42613, 48240, -1000, -1000, -1000, -1000, -1000, -1000,
	1755, 42613, 239, 1020, -1000, -162, -1000, -1000, 1010, 1019,
	722, 722, -1000, -1000, 1659, 180, -1000, -1000, -522, -1000,
	-1000, -160, -162, 182, -1000, 722, -1000, -1000, -1000, -1000,
	-687, 998, -1000, 42613, -140, 42613, 42613, 42613, 42613, 42613,
	149, -1000, 1014, 546, -1000, -1000, 2, -1000, 42613, 42613,
	88, -1000, -1000, -1000, 635, -1000, -1000, 635, -1000, -1000,
	-1000, -1000, -1000, 1652, 42613, -332, -661, -1000, -658, 20180,
	-1000, -1000, -1000, -1000, 511, -5, 377, 20991, 20991, -1000,
	-1000, 13524, -443, 154, 154, 32991, -1000, -1000, -1000, 20180,
	20180, 992, 315, -1000, 20180, 714, -1000, -1000, 20180, 20180,
	20180, 596, -1000, -1000, -1000, -1000, -1000, 1805, -1000, 20180,
	20180, 20180, -1000, -1000, 20180, 20180, -1000, 20180, 20180, 21791,
	596, 21791, 20180, 20180, 21791, -1000, -1000, -1000, -1000, 21791,
	20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180, 20180, -1000,
	-1000, 978, 978, 13524, 19369, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 163, -1000, 134, 134, 134,
	-1000, -1000, -1000, -1000, -1000, -1000, 772, 805, 674, -96,
	-1000, 539, -1000, 1737, -1000, 1234, 1788, -1000, 28991, 1685,
	-1000, -1000, 42613, -1000, 1172, 12713, 1729, 20180, -1000, 1670,
	778, -1000, 296, 708, -1000, -1000, 11874, 944, 1226, 82,
	42613, 28991, 28991, 28991, 28991, 28991, -1000, 1179, 1170, -1000,
	1211, 1167, 1218, 42613, -1000, 940, 596, 23391, 244, 20180,
	30591, 706, 28991, -1000, -1000, 28991, 42613, 11063, -1000, -1000,
	-333, -357, -1000, -1000, -1000, 393, -1000, -1000, 142, 1705,
	1562, -1000, -1000, -1000, -1000, -7, -1000, 173, 173, -1000,
	-1000, -1000, -1000, -1000, -1000, 935, -1000, 906, -174, -1000,
	-1000, 722, -1000, -1000, -1000, 42613, -1000, 1684, 42613, 1148,
	1147, 1146, -1000, -1000, -1000, -1000, 450, 733, 1752, 42613,
	-1000, -1000, 42613, -134, 42613, -1000, -1000, -1000, 4261, -1000,
	-1000, -1000, -162, -1000, -1000, -1000, -1000, -1000, -1000, 281,
	-1000, -1000, -1000, 1084, -1000, -1000, -1000, -1000, -154, -120,
	602, -1000, -1000, 42613, 87, -1000, 42613, -1000, -1000, -1000,
	642, 642, -1000, -1000, 1635, -1000, 722, 956, 20991, 20991,
	-1000, 183, -1000, 764, 596, 1001, 1001, -1000, -1000, -1000,
	1001, -198, 1001, -205, 1001, -1000, -1000, 596, 596, 776,
	792, -398, -1000, 884, 20180, 1161, 1106, 956, -1000, 20180,
	956, 956, 956, -1000, 884, 905, 1105, 782, -1000, -1000,
	-1000, -1000, 756, 956, 1028, -606, 596, 891, 891, 891,
	891, 891, 818, 818, 818, 818, -1000, -1000, 596, -1000,
	-1000, 1689, 1689, 1689, 43413, -96, -1000, 533, -1000, -96,
	-1000, 995, 195, -1000, 42613, -1000, -1000, -1000, 1792, 753,
	-1000, -1000, -1000, -1000, -1000, 884, 349, -1000, 42613, 20180,
	764, -1000, 285, 42613, 764, 42613, 1057, 1335, 1090, 1142,
	1580, -1000, -1000, -1000, -1000, 1169, -1000, 1160, -1000, -1000,
	281, -1000, -1000, 1150, 596, 964, 1788, 28991, 1025, 1025,
	-1000, 80, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 409,
	6008, 1830, -1000, 529, -1000, 538, 136, 437, -1000, -1000,
	-1000, 348, 346, -1000, 42613, 990, -1000, -1000, -1000, -1000,
	-7, 525, -7, -1000, -1000, -1000, 281, -1000, -1000, 42613,
	42613, 42613, -71, 42613, -1000, -1000, -1000, 808, -1000, 20180,
	-1000, -1000, -1000, 516, 516, -1000, -1000, -1000, 1695, -454,
	42613, 42613, 42613, 42613, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 183, 20991, -1000, -1000, -7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 20180, -1000, 20180,
	-1000, 1729, 524, 884, 20180, 20180, -1000, 956, -1000, -1000,
	-1000, 596, 21791, -1000, 21791, -1000, 20180, 145, 154, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	764, 1547, 764, 764, -1000, 1788, -1000, -1000, 195, 784,
	-1000, 520, 394, 523, 514, 485, -103, 484, 482, 281,
	281, 281, 215, 476, 434, -1000, 1782, 1750, 1825, -1000,
	884, -1000, 764, -1000, 77, 708, -1000, 1778, -1000, -1000,
	20180, 985, -1000, 20180, -1000, -1000, -1000, -1000, -1000, -1000,
	1172, 1778, 1025, -1000, -1000, 208, -1000, 20180, -1000, -1000,
	-1000, 3436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 975, 20180, -1000, -1000, -1000, 1693, -1000, -1000,
	-1000, 1387, 733, -89, 956, -1000, -1000, 244, -1000, 19369,
	-1000, -1000, 971, 1112, -1000, 48, -1000, 956, 956, 596,
	-1000, 956, 956, -1000, -1000, 782, -1000, 773, -1000, 145,
	596, 1141, -1000, -1000, 1172, -1000, 28191, -1000, 1742, 1741,
	32191, 32191, -1000, 760, -1000, 195, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 20180, 20180, 42613, 708, 42613, 1729,
	884, 42613, 884, -267, 1729, -1000, 956, -1000, 764, 764,
	764, 764, 764, 42613, 830, 244, -75, -1000, -1000, -453,
	702, -1000, 258, 42613, 42613, 596, -62, -465, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20180, -1000, 596, 1140, -1000,
	-559, -1000, 735, -1000, -1000, -1000, -1000, -1000, 735, 735,
	-1000, -1000, 884, 699, 691, -1000, -1000, 720, 596, 764,
	-1000, -1000, 693, -1000, -453, -112, -1000, -346, 19369, 10224,
	688, -1000, -1000, 1204, -448, -477, 905, -1000, -647, -1000,
	-1000, 31391, -1000, -1000, -1000, -1000, 30591, 41813, -431, -81,
	-1000, 1493, -44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1084, -1000, 1191, -1000, 596, -1000, -1000, -1000, 600, -1000,
	2372, -561, 1139, -1000, -411, -1000, -1000, -1000, 408, 472,
	-1000, -1000, -1000, -1000, -1000, 431, -146, -454, -459, -1000,
	-1000, 41813, -554, 182, 1172, -1000, 1129, 1126, 1798, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -466, -1000,
	-1000, 1680, -267, -1000, 1821, -1000, 1816, 406, 406, -480,
	-576, -1000, -1000, -1000, -1000, -1000, -47, 758, -1000, -1000,
	1172, -1000, -1000, -1000, 146, 146, -1000, -1000,
}

var psqPgo = [...]int{
	0, 2228, 41, 75, 203, 17, 230, 104, 2227, 2226,
	2219, 2218, 2214, 2213, 2212, 375, 362, 352, 2211, 2210,
	2208, 2203, 2202, 2200, 2197, 2196, 2195, 2194, 2193, 2192,
	354, 148, 202, 141, 2191, 2190, 2189, 2188, 2187, 1573,
	2186, 2185, 91, 156, 158, 2184, 2182, 2180, 2179, 2178,
	155, 154, 152, 1569, 2177, 150, 88, 2176, 2171, 2170,
	2169, 2168, 2167, 2166, 2165, 2164, 2163, 2162, 2161, 2159,
	2158, 2157, 170, 1579, 2154, 21, 2150, 63, 2149, 2146,
	2145, 2144, 2142, 2141, 2140, 2139, 125, 2138, 2136, 2133,
	236, 2130, 2129, 2127, 234, 87, 95, 2126, 2125, 83,
	2124, 136, 2123, 2122, 2120, 153, 2118, 4968, 2115, 48,
	47, 2112, 109, 57, 46, 39, 65, 30, 2110, 2108,
	38, 60, 2107, 2106, 50, 2104, 76, 93, 2103, 2102,
	12, 3, 2099, 1, 8, 9, 51, 2097, 2094, 90,
	2091, 2090, 2087, 78, 2084, 2081, 5301, 2078, 74, 112,
	86, 53, 2077, 2069, 31, 36, 2068, 2067, 2066, 2060,
	25, 2059, 2058, 2057, 123, 35, 151, 27, 28, 52,
	129, 2055, 40, 70, 2054, 122, 114, 2053, 2052, 2050,
	45, 2045, 34, 111, 101, 29, 178, 2044, 2042, 1665,
	229, 2039, 26, 2037, 54, 33, 2033, 81, 19, 2032,
	138, 2031, 49, 145, 107, 142, 2020, 2014, 2013, 2012,
	165, 2009, 2008, 2004, 64, 127, 133, 72, 2002, 379,
	2001, 2000, 80, 2306, 1134, 3243, 24, 140, 1998, 1996,
	96, 1988, 3794, 117, 110, 15, 1987, 210, 1984, 1983,
	1979, 221, 143, 89, 1978, 1577, 37, 1977, 1976, 10,
	1974, 1973, 1971, 1969, 1968, 1963, 98, 1961, 366, 43,
	5, 84, 149, 58, 1960, 1955, 102, 73, 1954, 137,
	134, 106, 85, 1953, 146, 130, 105, 1952, 180, 1951,
	1950, 1948, 1947, 79, 1945, 1944, 1943, 1940, 135, 128,
	99, 68, 1938, 71, 97, 132, 131, 16, 1607, 1934,
	7, 66, 44, 18, 94, 121, 1931, 0, 1928, 11,
	147, 407, 1678, 1924, 1923, 2, 4, 6, 1920, 1900,
	1899, 1898, 113, 1897, 1896, 1889, 1887, 14, 23, 13,
	22, 1884, 82, 32, 55, 20, 1867, 1866, 1855, 5273,
	1092, 103, 1853, 1847, 305,
}

//line psql.y:6429
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	sequenceIdent     ast.SequenceIdent
	sequenceName      ast.SequenceName
	copyFromSource    ast.CopyFromSource
	copyToTarget      ast.CopyToTarget
	copyOptions       ast.CopyOptions
	copyOption        ast.CopyOption
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterSchemaUnion() *ast.AlterSchema {
	v, _ := st.union.(*ast.AlterSchema)
	return v
}

func (st *psqSymType) alterSequenceUnion() *ast.AlterSequence {
	v, _ := st.union.(*ast.AlterSequence)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createSequenceUnion() *ast.CreateSequence {
	v, _ := st.union.(*ast.CreateSequence)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) sequenceSpecUnion() *ast.SequenceSpec {
	v, _ := st.union.(*ast.SequenceSpec)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 337, 338, 338, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 307,
	307, 307, 310, 310, 26, 68, 30, 30, 29, 29,
	32, 32, 31, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 5,
	5, 5, 5, 7, 7, 7, 13, 14, 6, 28,
	28, 28, 331, 331, 331, 332, 332, 332, 334, 334,
	334, 333, 333, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 336, 336,
	336, 15, 15, 80, 80, 16, 17, 17, 17, 17,
	341, 341, 141, 141, 139, 139, 140, 140, 18, 19,
	19, 205, 205, 204, 204, 204, 206, 206, 206, 206,
	245, 245, 20, 20, 20, 20, 20, 20, 91, 91,
	309, 309, 308, 300, 300, 299, 299, 297, 306, 306,
	305, 305, 304, 34, 40, 41, 47, 47, 47, 47,
	35, 36, 48, 49, 311, 279, 54, 54, 53, 53,
	53, 53, 53, 53, 55, 55, 51, 51, 50, 50,
	52, 52, 281, 281, 268, 268, 280, 280, 280, 280,
	280, 280, 280, 267, 267, 102, 102, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 326, 326, 326, 325, 325, 188, 188, 188,
	188, 188, 188, 188, 188, 111, 111, 120, 120, 120,
	120, 120, 298, 109, 109, 110, 108, 108, 108, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 119, 119, 115, 115, 115, 116, 116,
	116, 117, 117, 327, 327, 327, 327, 249, 249, 249,
	249, 252, 252, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 251, 251, 251, 251, 251, 253, 253, 253,
	253, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 255, 255, 255, 255, 255, 255, 255, 255, 266,
	266, 256, 256, 257, 257, 262, 263, 264, 264, 264,
	265, 265, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 261, 261, 260, 260, 260, 269, 293, 293, 292,
	292, 290, 290, 290, 290, 290, 278, 278, 287, 287,
	287, 287, 287, 277, 277, 273, 273, 273, 274, 274,
	275, 275, 272, 272, 276, 276, 289, 289, 288, 288,
	270, 270, 271, 271, 295, 328, 328, 328, 328, 328,
	329, 329, 296, 318, 320, 320, 320, 319, 319, 316,
	317, 315, 315, 315, 315, 315, 77, 77, 77, 217,
	217, 218, 218, 285, 285, 284, 284, 284, 286, 286,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 213, 213, 213, 314, 314,
	314, 314, 314, 314, 313, 313, 313, 282, 282, 282,
	312, 312, 56, 56, 173, 173, 38, 45, 45, 45,
	45, 45, 45, 44, 44, 44, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 46, 46, 43, 43,
	43, 43, 43, 43, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 129, 131, 132,
	132, 130, 130, 130, 130, 130, 130, 58, 58, 57,
	57, 134, 133, 135, 135, 135, 22, 37, 37, 23,
	23, 23, 23, 24, 24, 59, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 212, 212, 220, 220,
	211, 211, 237, 237, 237, 214, 214, 214, 324, 324,
	324, 208, 208, 61, 61, 61, 63, 63, 64, 65,
	65, 239, 239, 240, 240, 66, 67, 78, 78, 78,
	78, 78, 78, 81, 81, 81, 9, 9, 9, 9,
	74, 74, 74, 8, 8, 62, 62, 69, 321, 321,
	322, 323, 323, 323, 323, 70, 25, 25, 25, 25,
	25, 25, 98, 98, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 92, 92, 92, 87, 87,
	342, 27, 343, 72, 73, 73, 93, 93, 90, 90,
	90, 84, 84, 84, 89, 89, 89, 10, 10, 11,
	196, 196, 12, 12, 95, 95, 97, 97, 97, 97,
	97, 99, 99, 99, 99, 99, 99, 99, 94, 94,
	96, 96, 96, 96, 228, 228, 228, 227, 227, 123,
	123, 125, 124, 124, 126, 126, 127, 127, 127, 127,
	171, 171, 149, 194, 194, 194, 192, 192, 193, 193,
	195, 195, 195, 195, 128, 128, 128, 128, 136, 136,
	137, 137, 138, 138, 33, 238, 238, 235, 235, 235,
	234, 234, 142, 142, 142, 144, 143, 143, 143, 143,
	145, 145, 147, 147, 146, 146, 148, 153, 153, 152,
	152, 150, 150, 150, 150, 151, 151, 151, 151, 39,
	39, 154, 154, 107, 107, 107, 107, 107, 107, 118,
	118, 118, 118, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 79, 79, 79, 209, 209, 155, 155, 163, 163,
	163, 163, 156, 156, 156, 156, 156, 156, 156, 164,
	164, 164, 170, 165, 165, 161, 161, 161, 161, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 247, 247, 303,
	303, 302, 302, 301, 301, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 344, 344, 258, 258,
	258, 162, 162, 162, 162, 162, 88, 88, 88, 88,
	88, 243, 243, 243, 248, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 176,
	176, 85, 85, 174, 174, 175, 177, 177, 172, 172,
	172, 158, 158, 178, 178, 179, 179, 180, 180, 182,
	181, 181, 183, 184, 184, 184, 185, 185, 186, 186,
	186, 101, 101, 100, 100, 75, 75, 76, 76, 76,
	105, 105, 106, 106, 106, 103, 103, 104, 104, 189,
	189, 190, 157, 157, 157, 157, 157, 191, 191, 191,
	191, 197, 197, 167, 167, 169, 169, 168, 122, 198,
	198, 202, 199, 199, 203, 203, 203, 203, 203, 200,
	200, 201, 201, 231, 231, 231, 207, 207, 219, 219,
	215, 215, 216, 216, 210, 210, 221, 221, 221, 71,
	166, 166, 294, 294, 291, 225, 225, 225, 226, 226,
	229, 230, 232, 232, 232, 236, 236, 233, 233, 244,
	244, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 339, 340,
	241, 242, 242, 242,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 2, 3, 2, 3, 0, 1,
	3, 1, 4, 3, 3, 4, 3, 2, 3, 4,
	3, 4, 2, 7, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 3, 2, 2, 5, 7, 8, 8,
	7, 6, 1, 2, 1, 1, 2, 1, 0, 4,
	3, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 1,
	1, 6, 7, 1, 1, 10, 10, 9, 8, 8,
	1, 1, 1, 3, 1, 3, 1, 3, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 5, 11, 2, 2, 0, 2,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 1,
	1, 3, 3, 3, 6, 5, 7, 8, 8, 8,
	3, 3, 6, 3, 1, 4, 0, 1, 1, 1,
	1, 2, 2, 2, 0, 1, 4, 4, 4, 4,
	4, 4, 2, 4, 1, 3, 1, 1, 3, 4,
	3, 3, 3, 5, 10, 0, 2, 0, 2, 3,
	5, 3, 4, 2, 3, 2, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 1, 2, 2, 2,
	2, 2, 12, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 3, 3, 4, 3, 2, 2, 2, 1, 5,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 1, 0, 0, 0, 1, 1,
	0, 1, 0, 3, 3, 2, 2, 2, 1, 2,
	2, 0, 1, 0, 2, 2, 5, 0, 1, 1,
	2, 1, 2, 1, 1, 3, 0, 1, 4, 3,
	3, 4, 2, 0, 2, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 1, 1, 3, 3, 4,
	3, 1, 3, 1, 7, 6, 7, 7, 8, 8,
	0, 1, 5, 2, 1, 1, 1, 0, 1, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 1, 1,
	2, 0, 1, 0, 1, 1, 3, 2, 1, 2,
	4, 4, 3, 3, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 4, 5, 0, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 2, 3, 0, 1, 5,
	1, 3, 7, 1, 3, 3, 1, 2, 2, 2,
	5, 5, 5, 6, 8, 5, 5, 4, 4, 4,
	6, 5, 5, 2, 2, 2, 2, 3, 3, 3,
	4, 3, 3, 1, 3, 5, 1, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 10, 3, 8,
	6, 6, 6, 13, 8, 6, 10, 8, 4, 1,
	3, 3, 6, 7, 7, 8, 4, 0, 1, 0,
	1, 3, 3, 1, 1, 2, 3, 3, 5, 7,
	6, 6, 5, 3, 2, 3, 3, 3, 7, 3,
	3, 3, 4, 7, 5, 2, 4, 4, 4, 4,
	4, 5, 5, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 4, 4, 3, 3, 5, 2, 3, 4,
	4, 4, 4, 4, 5, 3, 0, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 1, 1, 2, 1, 3, 1, 2, 1, 1,
	5, 0, 1, 0, 1, 2, 3, 0, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 3, 3, 6, 4,
	7, 6, 1, 3, 2, 2, 2, 1, 1, 1,
	3, 2, 1, 1, 1, 0, 1, 1, 0, 3,
	0, 7, 0, 2, 0, 2, 0, 1, 1, 2,
	2, 0, 1, 1, 0, 1, 1, 5, 5, 4,
	0, 2, 4, 4, 0, 1, 0, 1, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 3, 1, 1, 1, 4, 3, 1,
	3, 4, 3, 0, 3, 1, 1, 3, 1, 3,
	1, 1, 3, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 1, 1,
	2, 6, 5, 6, 6, 0, 2, 3, 3, 2,
	4, 0, 2, 3, 3, 2, 3, 1, 6, 3,
	4, 3, 1, 3, 4, 5, 6, 3, 4, 5,
	6, 3, 4, 1, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 3, 1, 1, 2, 2, 2, 2, 1,
	1, 2, 9, 6, 6, 6, 2, 2, 3, 3,
	3, 1, 1, 1, 0, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 5, 5, 6, 4,
	4, 8, 6, 8, 6, 8, 5, 4, 2, 2,
	1, 2, 2, 2, 8, 8, 6, 5, 4, 4,
	4, 4, 4, 7, 4, 6, 6, 6, 4, 4,
	4, 7, 8, 6, 5, 6, 8, 11, 7, 8,
	8, 9, 4, 4, 4, 4, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 4, 0, 2, 0,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 2,
	3, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 1, 0, 2, 3, 1, 2, 1,
	2, 1, 2, 2, 1, 2, 2, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 2, 0, 3, 0, 2, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 0, 1, 2, 4,
	4, 0, 3, 1, 1, 0, 4, 0, 1, 1,
	0, 3, 1, 3, 2, 1, 1, 0, 1, 2,
	4, 2, 2, 1, 5, 4, 4, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 0, 3, 0, 1, 0, 1, 1, 5,
	0, 1, 0, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -337, -1, -5, -27, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -59, -60, -61,
	-63, -64, -65, -66, -67, -8, -62, -25, -26, -68,
	-69, -70, -71, -10, -11, -12, -28, -3, -2, -7,
	-342, 9, 10, -80, -29, 32, -40, -47, 485, -48,
	-35, -41, -34, -36, 486, -49, 488, 487, 524, 489,
	518, 343, 569, 570, 572, 573, 574, 575, -81, 522,
	523, 492, 36, 173, 33, 34, 37, 530, 531, 495,
	348, -4, -30, 8, -339, 11, 686, 520, 519, 28,
	-6, 720, 354, -338, 852, -189, -190, 22, 33, 29,
	-186, -182, -90, -190, 20, 18, 7, 38, -72, -343,
	-72, -72, 12, 13, -72, -279, -281, 354, 422, 354,
	-72, -54, -53, -51, -50, -52, -55, 31, -298, 570,
	-45, -44, -46, -42, -43, -286, 491, 486, 493, 494,
	687, 390, 389, 387, 388, 487, 344, 488, 33, 720,
	723, -283, -55, 369, 371, 831, 499, 834, 835, 838,
	839, 845, 846, 847, 391, 7, -38, 203, -298, -72,
	-236, -232, -307, -223, -224, 357, 358, 359, 69, 70,
	71, 72, 511, 491, 752, 559, 73, 74, 486, 42,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 569,
	408, 583, 577, 718, 84, 19, 85, 37, 86, 512,
	547, 87, 88, 594, 597, 89, 90, 91, 92, 93,
	525, 623, 94, 572, 652, 371, 95, 96, 97, 831,
	98, 99, 100, 101, 348, 102, 112, 113, 114, 115,
	116, 117, 656, 666, 495, 118, 365, 119, 120, 121,
	548, 13, 122, 123, 124, 125, 126, 127, 390, 387,
	128, 129, 586, 487, 130, 731, 389, 131, 132, 604,
	821, 521, 626, 761, 133, 352, 531, 26, 520, 134,
	135, 136, 382, 137, 138, 139, 558, 364, 762, 344,
	814, 140, 630, 141, 41, 644, 142, 143, 734, 735,
	144, 111, 145, 671, 146, 503, 147, 148, 149, 388,
	150, 151, 152, 153, 499, 510, 154, 155, 156, 157,
	158, 159, 11, 160, 581, 582, 593, 556, 646, 601,
	699, 161, 162, 700, 163, 164, 165, 166, 736, 381,
	167, 401, 35, 168, 719, 169, 560, 170, 171, 647,
	172, 173, 817, 174, 33, 769, 175, 176, 716, 177,
	178, 532, 553, 179, 180, 676, 181, 331, 679, 182,
	542, 643, 183, 599, 774, 184, 328, 185, 186, 187,
	188, 515, 350, 189, 190, 191, 192, 776, 193, 777,
	589, 194, 743, 386, 195, 779, 196, 197, 549, 198,
	781, 783, 199, 744, 200, 201, 202, 203, 204, 205,
	40, 784, 533, 206, 839, 785, 207, 208, 209, 210,
	788, 211, 530, 212, 213, 214, 635, 215, 537, 216,
	217, 218, 219, 220, 221, 648, 585, 222, 223, 747,
	224, 225, 226, 227, 228, 575, 488, 651, 686, 229,
	230, 796, 517, 231, 232, 233, 799, 573, 234, 235,
	236, 237, 238, 239, 574, 240, 497, 637, 241, 242,
	681, 557, 552, 243, 654, 244, 645, 32, 245, 246,
	330, 518, 805, 806, 579, 247, 248, 550, 249, 250,
	570, 251, 252, 253, 254, 849, 393, 255, 361, 256,
	257, 690, 258, 259, 749, 638, 391, 260, 261, 262,
	554, 600, 809, 590, 591, 592, 571, 263, 264, 538,
	698, 524, 265, 266, 267, 268, 810, 653, 269, 270,
	271, 272, 273, 274, 12, 275, 276, 277, 278, 329,
	326, 595, 279, 280, 500, 281, 282, 283, 284, 723,
	576, 285, 649, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 685, 298, 299, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 498, -72,
	498, -146, -232, 498, -200, 622, -220, 624, 637, 632,
	630, -212, 633, 635, 537, -324, 644, 498, 639, 485,
	634, 642, 546, -307, 439, 849, 399, 597, 629, 627,
	645, 817, -232, 571, -239, 576, -225, -307, -223, -224,
	574, -146, -78, 814, 490, 489, -241, -241, -92, 817,
	819, -165, -107, 406, -118, -121, -112, -113, -159, -160,
	-161, -162, -119, -172, 428, 429, 436, 407, -170, -122,
	26, 716, 688, 687, 439, 31, 593, 337, 338, 690,
	691, 409, 326, 662, 663, -120, 657, 664, 659, 693,
	694, 382, 695, 372, 374, 373, 696, 697, 698, 602,
	603, 699, 700, 701, 375, 376, 377, 378, 379, 380,
	381, 702, 705, 703, 704, 706, 707, 708, 713, 714,
	709, 710, 711, 712, 715, -225, -232, 503, 656, 497,
	434, 686, -114, -110, -2, -168, 655, 660, 661, 665,
	658, -307, -223, -224, -116, -115, -155, 360, 366, 370,
	367, -330, 383, -339, 365, 364, 361, 362, 363, 384,
	385, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 117, 638, 638, -146, -72, -72, -72,
	-72, -180, -90, -182, -4, -2, -339, 8, -72, -2,
	-3, -7, -30, -32, 747, -31, -232, 12, 424, -146,
	-185, -186, -6, -2, -107, 19, 23, 24, -73, -96,
	430, -107, -232, -73, -96, -210, 502, -72, -72, -199,
	-245, 571, -203, 645, 644, -226, -201, -225, -222, -200,
	643, 23, 490, 489, 405, 43, 726, 25, 27, 44,
	45, 439, 394, 409, 688, 509, 438, 622, 505, 38,
	46, 513, 485, 341, 47, 657, 48, 49, 659, 655,
	662, 31, 50, 28, 24, 36, 412, 413, 732, 385,
	51, 305, 304, 303, 514, 52, 14, 629, 53, 16,
	17, 54, 424, 55, 339, 56, 29, 421, 57, 335,
	739, 395, 337, 422, 20, 660, 661, 301, 342, 406,
	58, 383, 21, 345, 302, 650, 403, 18, 340, 59,
	60, 504, 516, 813, 338, 8, 61, 62, 63, 300,
	64, 65, 498, 66, 411, 501, 396, 384, 7, 400,
	640, 346, 67, 68, 410, 15, 750, 720, 597, -280,
	422, -267, -271, -225, 513, -296, 509, -146, -289, -288,
	-225, -339, -91, -219, 499, 507, 506, 400, -39, -311,
	403, 554, 552, 656, -50, -51, -52, -200, 438, 834,
	720, 355, 355, -283, -271, -270, -269, -312, 513, -295,
	-287, 505, 514, -277, 506, 507, -272, 499, 401, -312,
	509, 499, -312, -312, 501, 35, 35, 391, 391, -312,
	-272, 504, 514, 509, 513, -221, -272, 501, 25, -278,
	414, 724, 724, -200, 438, -278, -278, -278, 541, -278,
	-278, -278, -278, -278, -278, -278, -278, -278, 501, -33,
	498, -39, -311, -105, 642, 497, 548, -53, -37, -146,
	-219, 499, 500, -311, 530, -146, 482, -146, -214, 422,
	15, -214, -211, 638, 636, 623, 628, -214, -214, -214,
	544, 621, -273, 499, 35, 510, 638, 544, 621, 544,
	545, 544, 545, 631, 641, 544, -237, 14, 424, 656,
	626, 630, 537, 498, 538, 500, 640, 638, 540, -242,
	-339, -226, -307, 820, -242, 32, 358, 501, -225, -74,
	-225, 361, -9, -5, -16, -15, -17, 414, -98, 638,
	-86, 439, 821, 822, 823, 820, 635, 828, 826, 824,
	544, 825, 355, 403, 405, 4, -107, 421, -156, 414,
	415, 416, 417, 418, 419, 420, 424, 406, 408, 422,
	423, 414, 404, 425, 426, 427, 428, 429, 430, 431,
	433, 432, 434, 435, 438, 483, 484, -113, -113, -113,
	-113, -170, -339, -339, -339, -113, -209, -339, -113, -339,
	-339, -339, -339, -176, -107, -339, -344, -339, -344, -344,
	-258, -339, -258, -339, -339, -339, -339, -339, -339, -339,
	-339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	-339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	-339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	482, -339, -339, -339, -339, -339, -258, -258, -258, -258,
	-258, 370, 366, 360, -172, 367, 361, -225, -232, -2,
	-3, -165, -241, -321, -322, -149, -146, -339, -225, -225,
	530, -146, -3, -2, -185, -6, -2, -180, -186, -182,
	-2, -72, -84, -97, 332, 333, -99, 24, 39, 336,
	334, 23, -340, 356, -340, -189, -340, 355, -32, -194,
	354, 430, 330, 355, 21, -181, -183, -107, 345, 38,
	14, -228, -227, 25, -225, 361, 482, 14, -147, 29,
	-146, -210, -210, 355, 571, -203, -245, -205, -204, 646,
	648, 414, -231, -225, 361, 31, 356, 355, -146, -249,
	-252, -254, -253, -255, -250, -251, 594, 597, 595, 439,
	598, 600, 601, 604, 32, 590, 591, 592, 593, 605,
	606, 607, 608, 609, 610, 611, 612, 577, 596, 718,
	578, 579, 580, 581, 582, 583, 585, 586, 587, 588,
	589, -310, -307, 354, 356, 355, -256, 354, -107, -105,
	498, -307, 499, 499, 499, -72, 686, -230, -307, -278,
	-278, -278, 363, 18, -42, -43, -44, -43, 354, -267,
	-276, -310, -307, 354, 401, 504, 400, -275, -272, -275,
	-276, -307, -172, -307, -307, -172, -267, -200, -172, -307,
	401, 401, -307, -307, -146, -307, 31, 350, 351, 352,
	-278, -278, 361, 361, 361, -278, 361, -313, 515, 558,
	560, 31, 361, -314, 31, 841, 840, 842, 843, 844,
	31, 31, -225, 354, 357, -93, 650, -101, 550, 485,
	487, 491, 345, -229, -307, 414, 355, 501, 498, -307,
	-215, 503, -215, -225, -233, -232, -222, 361, -107, -274,
	14, 424, -237, -237, -214, -146, -274, -237, -214, -146,
	-214, -214, -214, -214, -237, -237, -237, -214, -232, -232,
	-146, -146, -146, -146, -146, -146, -146, -242, -208, 14,
	345, -242, -242, -240, 574, 601, 815, 816, 355, 720,
	-139, -146, 820, 820, 820, 820, 820, -107, -107, -107,
	743, -163, 383, 406, 384, 385, -121, -164, -168, -170,
	368, 424, 408, 422, 423, -112, -113, -112, 43, -112,
	-112, -112, -112, -112, -112, -112, -112, -112, -112, -112,
	-112, -243, -225, 361, 439, -117, -116, 367, 361, -330,
	-117, -94, -96, -107, -107, -307, -225, -94, -94, -107,
	-89, 24, 39, -174, -175, 410, -172, -340, -340, 367,
	-225, -225, -83, -82, 667, 668, 669, 670, 672, 673,
	674, 677, 678, 682, 683, 666, 684, 671, 676, 679,
	680, 681, 675, 685, -107, -107, -107, -107, -107, -107,
	-79, -107, 394, 395, 396, -107, -107, -166, -165, -306,
	-305, -304, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -95, 24, 39, -94, -226,
	-233, -222, -94, -95, -95, -94, -94, 482, -340, 355,
	-323, 648, 649, 818, -235, -234, 25, -232, 361, -166,
	14, -196, 346, -225, -194, 501, -185, -185, 332, 333,
	328, -94, -99, -340, -31, 25, -192, -225, 331, -107,
	-107, 355, -184, 27, 28, -33, -146, -227, 430, -233,
	-146, -157, 32, 326, -5, -339, -146, -124, -126, -127,
	-128, -149, -171, -339, -129, 739, 736, 14, -139, -140,
	-148, -232, -203, -205, 355, 647, 649, 650, 345, 386,
	-107, -260, 438, -285, -284, -283, -267, -269, -270, -271,
	499, 401, 356, -260, -264, 619, 618, -256, -256, -257,
	279, -256, -256, -256, -259, -200, 613, 614, 439, 354,
	354, -256, -256, -256, -262, -262, -262, -263, -263, -296,
	-107, -293, -292, -290, -291, 369, 812, 768, 720, 346,
	-288, -184, 363, -340, -101, -216, 503, -294, -291, -307,
	-307, -307, -216, 482, -307, 361, -307, 361, -307, 361,
	152, 19, 355, -268, -267, -56, 558, -295, -289, -276,
	401, -275, -276, -276, 487, 32, -217, 759, 406, 812,
	768, -267, -56, -243, -307, 501, -243, -243, 361, -213,
	849, -139, -146, 500, 557, 539, 539, 498, 498, 552,
	-146, -106, 662, -103, 361, 357, -146, -146, -215, 345,
	-141, -146, 26, -232, -146, -214, -214, -146, -214, -214,
	-146, -225, -86, 648, 355, 720, 22, -87, 22, -339,
	383, 384, 385, -164, -112, -113, -112, 405, 521, -164,
	361, 355, -340, 25, 355, 346, -340, -340, -340, 355,
	14, -94, -177, -175, 412, -107, -340, -340, 355, 355,
	14, -248, -340, -340, -340, -340, -340, -176, -340, 14,
	355, 355, -340, -340, 355, 355, -340, 355, 355, 355,
	-303, 355, 355, 355, 355, -340, -340, -340, -340, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, -340,
	-340, -94, -94, -339, 482, -340, -340, -340, -340, -340,
	-226, -322, 817, 649, -153, -152, -150, 343, 502, 344,
	-234, -340, -117, 358, -193, 358, -192, 14, 501, -332,
	361, 217, 254, -158, -225, 367, -123, -125, 14, -99,
	-170, 356, 355, -183, 421, 482, -154, 15, -197, 345,
	-198, -202, -172, -167, -169, -168, -339, -191, -340, -225,
	32, 355, -142, -144, -143, -145, 335, 339, 341, 336,
	337, 338, 342, -238, 25, -124, -3, -339, -339, -339,
	-146, -139, -341, 14, 346, -341, 355, 482, -204, -206,
	651, 648, 654, -307, 361, 355, -283, -271, -187, -102,
	41, -265, 620, -259, 727, -256, -259, -225, 361, 439,
	-261, 439, -261, 613, 614, -266, 361, -266, 356, -290,
	361, 40, -225, 356, -184, 500, -146, 406, 345, -294,
	-294, -294, -232, -244, -230, -222, 19, -192, 18, 355,
	356, -173, 559, 356, 354, -276, -276, 31, 31, 812,
	768, 759, -56, -173, -260, -307, 851, 850, 356, -146,
	-100, 548, 556, -146, -146, -146, -146, -146, 491, 487,
	354, -104, 358, 501, -139, -146, 355, -77, 517, 512,
	-237, -237, 33, -146, 648, 829, 827, -107, 405, 521,
	-121, -113, -96, 717, -246, 439, 594, 590, 588, 601,
	599, 618, 591, 619, 587, 586, 585, -246, -243, -107,
	-107, -180, 413, -107, 411, -107, -107, -107, -340, 14,
	-107, -107, -107, -304, -107, -107, -107, -302, -301, -117,
	-172, -340, -302, -107, -107, -301, -301, -305, -305, -305,
	-305, -305, -165, -165, -165, -165, -340, -340, -95, -226,
	-150, -272, -272, -272, 355, -331, 361, 217, 253, -332,
	-334, 720, 354, 361, -207, 22, 14, 326, -154, -124,
	-99, -225, -117, 430, -185, -107, 30, -197, 355, 414,
	355, -340, -340, 355, 326, 482, -198, -126, -127, -127,
	-126, -127, 335, 335, 335, 340, 335, 340, 335, -143,
	-232, -340, -340, -3, -3, -107, -235, 346, -124, -124,
	-148, -232, 430, 648, 652, 653, -283, -329, 383, 406,
	31, 345, 616, 369, -327, 438, 756, 807, 812, 768,
	-328, 504, 400, 401, 516, 25, 42, -259, -261, -261,
	356, 355, 356, -218, -217, -307, -146, 26, -146, 345,
	345, 345, 363, 19, -267, -172, -293, -192, -109, -339,
	-108, -110, -114, 428, 429, 364, 365, -173, -194, -309,
	346, 539, 616, 539, 356, -146, -77, -146, -214, -214,
	33, -307, -340, -121, -113, -339, -340, -256, -256, -263,
	-256, 582, -256, 582, -256, -340, -340, 355, -340, 22,
	-340, -85, 692, -107, 355, 355, -340, -107, -340, -340,
	-340, -303, 355, -340, 355, -340, 355, -247, 813, -340,
	-340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
	-151, 22, -151, -151, 358, -334, 361, -334, 354, -333,
	-335, 814, 52, 122, 383, 31, 111, 219, 521, 305,
	304, 303, 302, 131, 301, -146, -178, 16, 401, -202,
	-107, -169, 326, -5, -225, -167, -225, -154, -137, -136,
	345, 346, -138, 345, -136, 335, 335, -194, -340, -340,
	355, -154, -124, -154, -154, 482, 383, -339, -111, -120,
	-109, 12, 361, 361, -307, -326, 840, 841, 31, 363,
	401, 401, -146, 354, -259, 361, -259, -194, -146, -146,
	-146, 515, -192, 356, -107, -115, -115, 25, -300, 720,
	-308, -225, -225, -225, -225, -112, -259, -107, -107, -185,
	361, -107, -107, -340, -340, -302, -301, -107, -340, -134,
	-133, -135, 821, 383, 31, -246, -339, 335, 18, 16,
	-339, -339, -154, -333, 356, 355, 357, -155, 361, 361,
	361, -155, 716, 361, 361, -194, -194, -194, -336, 300,
	502, 361, 363, -179, 17, 19, 12, -167, 482, -180,
	-107, 354, -107, -117, -180, -154, -107, -160, 382, 698,
	699, 700, 381, 354, -107, 25, 181, -328, -340, -5,
	-299, -297, -226, 354, 346, -88, 424, 720, -340, -340,
	-340, -340, -340, -340, -340, 355, -340, -133, -135, -340,
	345, -117, -195, -340, -225, 504, 19, 19, -195, -195,
	356, -335, -107, -165, -198, -225, -185, -192, -131, 623,
	-185, -340, -192, 356, -5, 515, -75, 720, 355, 414,
	-192, -146, -340, 718, 342, 721, -107, -340, 345, 731,
	821, 355, -340, -340, -340, 356, -340, -339, 356, -188,
	-75, 532, -76, 547, 817, -297, -282, -226, 361, 363,
	356, 331, 719, 722, -303, -225, 504, -235, -132, -130,
	-225, 774, -319, -318, 716, -329, -325, 383, 406, 369,
	-327, 812, 768, 392, 393, 85, 509, -309, 331, -340,
	-340, 355, 22, -249, -58, 785, -316, -317, 345, -320,
	629, 784, 805, 383, 361, 363, 549, -300, 720, -130,
	781, -260, -117, -317, 345, -316, 345, 13, 12, 721,
	-57, 26, -131, -315, 517, 512, 515, 32, -315, 722,
	785, 511, 31, 383, -117, -134, -133, -133,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 69, 71, 72,
	0, 712, 712, 712, 0, 712, 0, 0, 712, -2,
	0, -2, 0, 0, 712, 1155, 0, 712, 0, 0,
	-2, 644, 646, 0, 648, -2, 0, 0, 657, 1680,
	1680, 705, 0, 0, 0, 0, 0, 712, 712, 712,
	712, 1057, 49, 712, 0, 113, 114, 663, 664, 665,
	64, 0, 1678, 1, 3, 70, 74, 0, 0, 0,
	57, 1066, 0, 75, 0, 0, 718, 714, 0, 714,
	0, 1134, 712, 712, 0, 142, 143, 0, 0, 0,
	-2, 146, -2, 178, 179, 180, 0, 185, 147, 0,
	544, 498, 500, 503, 536, -2, -2, 490, 490, 490,
	0, 0, 0, 0, 0, 490, 533, 1136, 396, 0,
	0, 458, 0, 396, 396, 396, 0, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 545, 0, 546, 1080,
	184, 1156, 1152, 1153, 1154, 39, 40, 41, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 0, 1128,
	0, 584, 814, 0, 635, 635, 0, 635, 635, 635,
	0, 0, 0, 595, 0, 0, 0, 0, 632, 0,
	611, 0, 617, 1681, 0, 1681, 1119, 0, 629, 627,
	639, 640, 643, 647, 0, 652, 655, 1145, 1146, 1147,
	0, 670, 48, 1380, 661, 662, 675, 676, 0, 706,
	707, 44, 913, 0, 837, 842, 853, 867, 868, 869,
	870, 871, 873, 874, 0, 0, 0, 0, 879, 880,
	1367, 1448, 0, 0, 0, 894, 1416, 0, 0, 1591,
	0, 1039, 1630, 1006, 1006, 930, 1006, 1008, 1008, 0,
	0, 1372, 0, 0, 0, 0, 0, 0, 1610, 0,
	0, 1420, 1423, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 1395, 1332, 1556,
	0, 1538, 303, 304, 912, 1108, 1008, 1008, 1008, 1008,
	1008, -2, -2, -2, 249, 250, 251, 252, 253, 254,
	255, 0, 245, 0, -2, -2, -2, 309, 305, 896,
	897, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 1680, 0, 685, 0, 0, 0, 0,
	0, 1066, 0, 1058, 1057, 62, 0, 712, -2, 0,
	0, 0, 0, 46, 1529, 51, 773, 1089, 0, 1091,
	58, 1067, 66, 68, 1068, 0, 719, 720, 0, 0,
	750, 754, 0, 713, 0, 0, 1135, 1134, 1134, 128,
	0, 1606, 1112, -2, -2, 0, 0, 1148, 1149, 1121,
	-2, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1304, 0,
	0, 196, 197, 0, 42, 423, 0, 192, 0, 416,
	361, 0, 1080, 0, 0, 0, 0, 0, 170, 712,
	0, 1129, 0, 174, 181, 182, 183, 396, 396, 396,
	0, 184, 184, 459, 507, 508, 509, 0, -2, 421,
	0, 491, 0, 0, 410, 410, 414, 412, 413, 0,
	0, 0, 0, 0, 0, 523, 524, 525, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 1137, 1138, 0,
	397, 542, 543, 396, 396, 0, 0, 0, 396, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	716, 171, 173, 1071, 0, 0, 0, -2, 576, 0,
	0, 0, 1130, 1130, 0, 583, 0, 585, 586, 0,
	0, 587, 0, 632, 632, 630, 631, 589, 590, 591,
	635, 0, 0, 405, 406, 407, 632, 635, 0, 635,
	635, 635, 635, 632, 632, 632, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1681, 614, 615, 618,
	1682, 1683, 1681, 1681, 625, 1120, 645, 653, 656, 673,
	671, 672, 674, 666, 667, 668, 669, 0, 686, 687,
	692, 0, 0, 0, 697, 698, 699, 0, 0, 702,
	703, 704, 0, 0, 0, 0, 835, 0, 0, 902,
	903, 904, 905, 906, 907, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 876, 877,
	878, 881, 0, 0, 0, 886, 887, 0, 0, 0,
	0, 0, 724, 0, 1040, 0, 928, 0, 929, 931,
	932, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 734, 734, 0, 0, 237, 238, 239, 240,
	241, 256, 257, 258, 259, 260, -2, 1048, 0, 912,
	0, 0, 45, 677, 678, 0, 797, 1140, 0, 730,
	0, 773, 0, 0, 56, 65, 67, 1066, 60, 1066,
	0, 736, 0, 0, -2, -2, 737, 743, 744, 745,
	746, 747, 53, 1679, 54, 0, 73, 0, 47, 0,
	0, 775, 0, 0, 0, 1059, 1060, 1063, 0, 715,
	0, 751, 755, 0, 757, 758, 0, 0, 0, 0,
	813, 0, 0, 0, 1606, 1118, 0, 130, 131, 0,
	0, 0, 383, 1123, 1124, 1125, -2, 403, 0, 383,
	367, 318, 319, 320, 361, 322, 361, 363, 361, 361,
	361, 372, 348, 0, 0, 337, 361, 361, 361, 351,
	352, 353, 354, 355, 356, 357, 358, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 365, 365, 365, 366,
	366, 0, 43, 0, 387, 0, 1063, 0, 0, 1071,
	1132, 1142, 0, 0, 0, 1132, 149, 829, 1151, 0,
	0, 0, 0, 0, 504, 505, 501, 537, 0, 492,
	404, 0, -2, 0, 414, 0, 410, 414, 411, 414,
	402, 415, 0, 0, 0, 0, 492, 0, 527, 528,
	529, 0, 531, 532, 534, 0, 538, 539, 540, 541,
	0, 0, 462, 463, 464, 0, 466, 467, 484, 485,
	486, 468, 469, 470, 478, 479, 480, 481, 482, 483,
	471, 472, 475, 0, 496, 0, 717, 0, 0, 0,
	0, 0, 0, 794, 1150, 0, 0, 0, 1130, 0,
	0, 0, 0, 733, 815, 1157, 1158, 636, 637, 0,
	408, 409, 635, 635, 592, 622, 0, 635, 596, 623,
	597, 599, 598, 600, 612, 613, 635, 603, 633, 634,
	604, 605, 606, 607, 608, 609, 610, 619, 0, 641,
	642, 620, 621, 0, 654, 658, 659, 660, 0, 0,
	689, 124, 694, 695, 696, 708, 701, 914, 833, 834,
	0, 836, 839, 0, 898, 900, 841, 843, 909, 910,
	911, 0, 0, 0, 0, 0, 847, 851, 0, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 872, 1021, 1022, 1023, 889, 311, 312, 308, 0,
	890, 0, 748, 0, 0, 0, 888, 0, 0, 0,
	0, 725, 726, 1046, 1043, 0, 0, 1007, 1009, 0,
	0, 0, 0, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1024, 0, 0, 0, 0, 0,
	1039, 0, 891, 892, 893, 0, 0, 0, 1141, 0,
	159, 160, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 1049,
	0, -2, 0, 0, 0, 0, 0, 0, 1107, 0,
	680, 681, 683, 0, 817, 798, 0, 800, 801, 0,
	0, 729, 0, 732, 0, 0, 59, 61, 741, 742,
	0, 759, 738, 55, 50, 0, 0, 776, 1090, 1069,
	1070, 0, 1062, 1064, 1065, 0, 76, 756, 752, 0,
	831, 1101, 0, 0, 1093, 0, 812, 0, 762, 764,
	765, 766, 795, 0, 769, 0, 1428, 0, 0, 0,
	126, 814, 1113, 129, 0, 0, 134, 135, 1114, -2,
	1116, 1117, 0, 175, -2, 455, 198, 200, 201, 202,
	-2, -2, 193, -2, 370, 368, 369, 321, 372, 361,
	364, 372, 345, 346, 347, 0, 381, 381, 378, 0,
	0, 338, 339, 340, 332, 333, 334, 335, 336, 422,
	0, 144, 388, 389, 391, 0, 393, 394, 0, 0,
	417, 418, 0, 1063, 0, 0, 0, 0, 1143, 1142,
	1142, 1142, 0, 0, 186, 187, 188, 189, 190, 191,
	0, 0, 184, 0, 194, 494, 493, 420, 0, 0,
	414, 414, 399, 400, 0, 0, 517, 449, 0, 518,
	519, 492, 494, 383, 530, 0, 460, 461, 465, 473,
	0, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1087, 1085, 1086, 0, 577, 0, 0,
	446, 122, 1131, 582, 632, 602, 624, 632, 594, 601,
	616, 650, 693, 0, 0, 0, 0, 700, 0, 0,
	840, 899, 901, 844, 0, 848, 852, 0, 0, 854,
	310, 0, 0, 0, 0, 0, 895, 919, 920, 0,
	0, 1057, 0, 1044, 0, 0, 927, 1010, 0, 0,
	0, 0, 938, 939, 940, 941, 942, 0, 944, 0,
	0, 0, 948, 949, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 963, 964, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	915, 0, 0, 734, 0, 1011, 1012, 1013, 1014, 1015,
	1049, 679, 682, 684, 772, 818, 819, 0, 0, 0,
	799, 1139, 727, 728, 731, -2, 0, 0, 0, 88,
	85, 0, 87, 0, 1051, 0, 831, 760, 0, 739,
	52, 774, 0, 1061, 0, 0, 1066, 0, 111, 0,
	1101, 1109, 0, 1092, 1103, 1105, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 802, 0, 0, 805,
	0, 0, 0, 0, 796, 0, 0, 0, 0, 0,
	-2, 0, 0, 120, 121, 0, 0, 0, 132, 133,
	0, 0, 139, 384, 385, 184, 457, 199, 430, 0,
	0, 317, 371, 341, 342, 372, 344, 381, 381, 375,
	376, 382, 377, 379, 380, 0, 359, 0, 451, 390,
	392, 0, 1144, 362, 419, 0, 164, 0, 0, 0,
	0, 0, 172, 830, 1159, 1160, 0, 499, 0, 0,
	510, 511, 0, 387, 0, 398, 401, 512, 0, 515,
	516, 450, 494, 521, 522, 535, 476, 477, 474, 773,
	1072, 1073, 1074, 150, 550, 552, 551, 555, 0, 0,
	0, 1084, 1088, 0, 446, 580, 0, 581, 447, 448,
	635, 635, 688, 125, 0, 691, 0, 0, 0, 0,
	845, 849, 749, 0, 0, 361, 361, 1027, 366, 1029,
	361, 1031, 361, 1034, 361, 1037, 1038, 0, 0, 0,
	0, 1041, 926, 1047, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 161, 162, 979, 0, 0, 981, 983,
	984, 954, 980, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 916, 917, 0, 1050,
	820, 825, 825, 825, 0, 88, 82, 0, 84, 88,
	81, 0, 0, 86, 0, 1126, 1127, 1052, 1053, 761,
	740, 777, 711, 753, 77, 832, 0, 112, 0, 0,
	0, 1106, 0, 0, 0, 0, 831, 763, 790, 792,
	0, 787, 803, 804, 806, 0, 808, 0, 810, 811,
	773, 768, 770, 0, 0, 0, 831, 0, 831, 831,
	127, 0, 816, 136, 137, 138, 456, 203, 208, 0,
	0, 0, 213, 0, 215, 0, 0, 0, 220, 221,
	431, 0, 314, 316, 0, 0, 206, 343, 373, 374,
	372, 0, 372, 432, 452, 395, 773, 1133, 166, 0,
	0, 0, 0, 0, 195, 495, 386, 0, 513, 0,
	243, 244, 246, 0, 0, 306, 307, 520, 0, 153,
	0, 0, 0, 0, 1083, 578, 579, 123, 588, 593,
	690, 709, 838, 846, 850, 0, 883, 1025, 372, 1028,
	1030, 1032, 1033, 1035, 1036, 884, 885, 0, 922, 0,
	924, 1066, 0, 1045, 0, 0, 936, 0, 945, 946,
	947, 0, 0, 953, 0, 955, 0, 0, 0, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 918,
	0, 0, 0, 0, -2, 831, 83, 80, 0, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 773,
	773, 773, 108, 0, 0, 63, 1055, 0, 0, 1110,
	1111, 1104, 0, 1096, 1099, 1095, 1098, 1057, 784, 791,
	0, 0, 785, 0, 786, 807, 809, 767, -2, 771,
	0, 1057, 831, 118, 119, 0, 209, 0, 211, 235,
	236, 0, 214, 216, 217, 218, 222, 223, 224, 219,
	313, 315, 0, 0, 349, 360, 350, 0, 167, 168,
	169, 0, 502, 0, 0, 247, 248, 0, 549, 0,
	151, 152, 0, 0, 554, 1016, 1026, 0, 0, 0,
	1042, 0, 0, 943, 951, 0, 982, 0, 958, 0,
	0, 0, 573, 574, 0, 978, 0, 826, 0, 0,
	0, 0, 79, 0, 90, 0, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 109,
	110, 106, 107, 78, 0, 0, 0, 1094, 0, 1066,
	788, 0, 793, 0, 1066, 117, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 424, 514, 1075,
	154, 155, 0, 0, 0, 0, 0, 0, 921, 923,
	925, 934, 935, 952, 956, 0, 959, 0, 0, 960,
	0, 575, 0, 822, 780, 781, 827, 828, 0, 0,
	89, 92, 1056, 1054, 1102, 1100, 115, 0, 0, 0,
	116, 210, 0, 227, 1075, 0, 547, 1077, 0, 0,
	0, 556, 882, 0, 0, 0, 979, 961, 0, 571,
	572, 0, 821, 823, 824, 789, 797, 0, 437, 430,
	145, 0, 0, 1078, 1079, 156, 157, 487, 488, 489,
	150, 1017, 0, 1020, 0, 782, 783, 557, 0, 559,
	0, -2, 425, 438, 0, 204, 228, 229, 0, 0,
	232, 233, 234, 225, 226, 0, 0, 153, 1018, 957,
	558, 0, 0, 383, 0, 568, 426, 427, 0, 433,
	434, 435, 436, 230, 231, 242, 1076, 553, 0, 560,
	561, 569, 0, 428, 0, 429, 0, 0, 0, 0,
	0, 570, 566, 439, 441, 442, 0, 0, 440, 1019,
	0, 443, 444, 445, 562, 563, 564, 565,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 407, 3, 3, 3, 433, 425, 3,
	354, 356, 430, 428, 355, 429, 482, 431, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 852,
	415, 414, 416, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 435, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 404, 3, 436,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 398, 57738, 399, 57739, 400,
	57740, 401, 57741, 402, 57742, 403, 57743, 405, 57744, 406,
	57745, 408, 57746, 409, 57747, 410, 57748, 411, 57749, 412,
	57750, 413, 57751, 417, 57752, 418, 57753, 419, 57754, 420,
	57755, 421, 57756, 422, 57757, 423, 57758, 424, 57759, 426,
	57760, 427, 57761, 432, 57762, 434, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 477, 57804, 478,
	57805, 479, 57806, 480, 57807, 481, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	psqDebug        = 0
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if psqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", psqTokname(token), uint(char), token)
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state-%d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:585
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:590
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:591
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:595
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 5:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:599
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 38:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:635
		{
			setParseTree(psqlex, nil)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:641
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:645
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:649
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 42:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:654
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 43:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:658
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 44:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:664
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:670
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:676
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:680
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:685
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:689
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 50:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:695
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 51:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:699
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:705
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:711
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:715
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:719
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:742
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:748
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:753
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:759
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:766
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:772
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 62:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:779
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 63:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:783
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:789
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:793
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:797
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:801
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:805
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:811
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:815
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:820
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:824
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:830
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:834
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:839
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:846
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:852
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:860
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:866
		{
			psqLOCAL = &ast.CopyFrom{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[3].tableName, Columns: psqDollar[4].columnsUnion(), From: psqDollar[6].copyFromSource, With: psqDollar[7].copyOptions, Where: psqDollar[8].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:870
		{
			psqLOCAL = &ast.CopyTo{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[3].tableName, Columns: psqDollar[4].columnsUnion(), To: psqDollar[6].copyToTarget, With: psqDollar[7].copyOptions}
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:874
		{
			psqLOCAL = &ast.CopyTo{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Query: psqDollar[3].selStmtUnion(), To: psqDollar[5].copyToTarget, With: psqDollar[6].copyOptions}
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:880
		{
			psqVAL.copyFromSource = ast.CopyFromSource{Type: ast.CopyFromFile, V: psqDollar[1].str}
		}
	case 83:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:884
		{
			psqVAL.copyFromSource = ast.CopyFromSource{Type: ast.CopyFromProgram, V: psqDollar[1].str}
		}
	case 84:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:888
		{
			psqVAL.copyFromSource = ast.CopyFromSource{Type: ast.CopyFromStdin}
		}
	case 85:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:894
		{
			psqVAL.copyToTarget = ast.CopyToTarget{Type: ast.CopyToFile, V: psqDollar[1].str}
		}
	case 86:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:898
		{
			psqVAL.copyToTarget = ast.CopyToTarget{Type: ast.CopyToProgram, V: psqDollar[1].str}
		}
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:902
		{
			psqVAL.copyToTarget = ast.CopyToTarget{Type: ast.CopyToStdout}
		}
	case 88:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:907
		{
			psqVAL.copyOptions = nil
		}
	case 89:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:911
		{
			psqVAL.copyOptions = psqDollar[3].copyOptions
		}
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:915
		{
			psqVAL.copyOptions = psqDollar[2].copyOptions
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:921
		{
			psqVAL.copyOptions = []ast.CopyOption{psqDollar[1].copyOption}
		}
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:925
		{
			psqVAL.copyOptions = append(psqVAL.copyOptions, psqDollar[3].copyOption)
		}
	case 93:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:931
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionFormat, Value: psqDollar[2].str}
		}
	case 94:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:935
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionFreeze, Value: psqDollar[2].boolValUnion().String()}
		}
	case 95:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:939
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionDelimiter, Value: psqDollar[2].str}
		}
	case 96:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:943
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionNull, Value: psqDollar[2].str}
		}
	case 97:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:947
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionDefault, Value: psqDollar[2].str}
		}
	case 98:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:951
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionHeader, Value: psqDollar[2].boolValUnion().String()}
		}
	case 99:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:955
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionHeaderMatch}
		}
	case 100:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:959
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionQuote, Value: psqDollar[2].str}
		}
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:963
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionEscape, Value: psqDollar[2].str}
		}
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:967
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionForceQuote}
		}
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:971
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionForceNotNull}
		}
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:975
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionForceNull}
		}
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:979
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionOnError, Value: psqDollar[2].str}
		}
	case 106:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:983
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionEncoding, Value: psqDollar[2].str}
		}
	case 107:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:987
		{
			psqVAL.copyOption = ast.CopyOption{Type: ast.CopyOptionHeaderLogVerbosity, Value: psqDollar[2].str}
		}
	case 108:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:992
		{
			psqVAL.str = "stop"
		}
	case 109:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:996
		{
			psqVAL.str = "stop"
		}
	case 110:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1000
		{
			psqVAL.str = "ignore"
		}
	case 111:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1006
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1017
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:1029
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:1033
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1039
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1045
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 117:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1049
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 118:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1053
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 119:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1057
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1062
		{
		}
	case 121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1063
		{
		}
	case 122:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:1067
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1071
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:1077
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1081
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:1087
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1091
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1097
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 129:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1103
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1107
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:1113
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1117
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 133:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:1123
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:1127
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:1131
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1137
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 137:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1141
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 138:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1145
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:1149
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:1155
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:1159
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1165
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1171
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1178
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1186
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1190
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 147:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1196
		{
			psqDollar[1].createSequenceUnion().SequenceSpec = psqDollar[2].sequenceSpecUnion()
			psqDollar[1].createSequenceUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createSequenceUnion()
		}
		psqVAL.union = psqLOCAL
	case 148:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1203
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1207
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 150:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1212
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 151:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1216
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 152:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1222
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 153:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1227
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 154:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1232
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 155:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1238
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 156:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1243
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 157:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1249
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 158:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1254
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 159:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1258
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1264
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1268
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1274
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 163:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSchema
//line psql.y:1280
		{
			psqLOCAL = &ast.AlterSchema{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Schema: psqDollar[3].schemaName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 164:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1287
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 165:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1294
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Only: psqDollar[4].booleanUnion(), Table: psqDollar[5].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 166:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1301
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 167:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1306
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1311
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 169:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1316
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 170:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.CreateSequence
//line psql.y:1323
		{
			psqLOCAL = &ast.CreateSequence{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Sequence: psqDollar[3].sequenceName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 171:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterSequence
//line psql.y:1330
		{
			psqLOCAL = &ast.AlterSequence{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Sequence: psqDollar[3].sequenceName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1337
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1344
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1354
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1360
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1364
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1370
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1374
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1378
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 181:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1382
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 182:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1386
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 183:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1390
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 184:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1396
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1400
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1406
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 187:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1410
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 188:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1416
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 189:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1420
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 190:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1426
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 191:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1430
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1436
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1440
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1446
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1450
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 196:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1456
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1461
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1466
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 199:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1470
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 200:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1475
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 201:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1479
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 202:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1483
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 203:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1494
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1503
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1512
		{
			psqVAL.str = ""
		}
	case 206:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1516
		{
			psqVAL.str = ""
		}
	case 207:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1525
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1529
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 209:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1535
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1541
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1546
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1551
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1556
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1561
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1566
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1571
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 217:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1575
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1580
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 219:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1584
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1589
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1595
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1603
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1607
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1611
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1617
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1621
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 227:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1626
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 228:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1630
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 229:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1635
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 230:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1641
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 231:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1647
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 232:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1652
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 233:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1657
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 234:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1663
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1671
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 237:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1678
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 238:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1682
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 239:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1686
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 240:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1690
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 241:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1694
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 242:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL *ast.SequenceSpec
//line psql.y:1700
		{
			psqLOCAL = &ast.SequenceSpec{StartWith: ast.IntRef(psqDollar[3].str), IncrementBy: ast.IntRef(psqDollar[6].str)}
		}
		psqVAL.union = psqLOCAL
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1710
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 247:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1717
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 248:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1721
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1727
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1731
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1735
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1739
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1743
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1747
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1751
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 256:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1756
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 257:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1760
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 258:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1764
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 259:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1768
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 260:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1772
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1779
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1783
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1787
		{
			psqVAL.str = ast.Big5Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1791
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1795
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 266:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1799
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 267:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1803
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1807
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1811
		{
			psqVAL.str = ast.Cp850Str
		}
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1815
		{
			psqVAL.str = ast.Cp852Str
		}
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1819
		{
			psqVAL.str = ast.Cp866Str
		}
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1823
		{
			psqVAL.str = ast.Cp932Str
		}
	case 273:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1827
		{
			psqVAL.str = ast.Dec8Str
		}
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1831
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1835
		{
			psqVAL.str = ast.EuckrStr
		}
	case 276:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1839
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 277:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1843
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 278:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1847
		{
			psqVAL.str = ast.GbkStr
		}
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1851
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 280:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1855
		{
			psqVAL.str = ast.GreekStr
		}
	case 281:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1859
		{
			psqVAL.str = ast.HebrewStr
		}
	case 282:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1863
		{
			psqVAL.str = ast.Hp8Str
		}
	case 283:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1867
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 284:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1871
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1875
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1879
		{
			psqVAL.str = ast.Latin1Str
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1883
		{
			psqVAL.str = ast.Latin2Str
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1887
		{
			psqVAL.str = ast.Latin5Str
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1891
		{
			psqVAL.str = ast.Latin7Str
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1895
		{
			psqVAL.str = ast.MacceStr
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1899
		{
			psqVAL.str = ast.MacromanStr
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1903
		{
			psqVAL.str = ast.SjisStr
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1907
		{
			psqVAL.str = ast.Swe7Str
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1911
		{
			psqVAL.str = ast.Tis620Str
		}
	case 295:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1915
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 296:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1919
		{
			psqVAL.str = ast.UjisStr
		}
	case 297:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1923
		{
			psqVAL.str = ast.Utf16Str
		}
	case 298:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1927
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 299:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1931
		{
			psqVAL.str = ast.Utf32Str
		}
	case 300:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1935
		{
			psqVAL.str = ast.Utf8Str
		}
	case 301:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1939
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 302:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1943
		{
			psqVAL.str = ast.Utf8Str
		}
	case 305:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1953
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 306:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1957
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 307:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1961
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 308:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1967
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 309:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1971
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1975
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 311:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1981
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 312:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1985
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1992
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1996
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 315:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:2000
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:2004
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 317:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2010
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 321:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2021
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2026
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2032
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2036
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2040
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2044
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2048
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2052
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2056
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 330:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2060
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 331:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2064
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 332:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2070
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 333:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2076
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 334:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2082
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 335:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2088
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 336:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2094
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 337:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2102
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 338:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2106
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 339:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2110
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 340:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2114
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2120
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 342:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2124
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 343:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:2130
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[3].literalUnion(), Charset: psqDollar[4].columnCharset}
		}
	case 344:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2134
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 345:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2138
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 346:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2142
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2146
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 348:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2150
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 349:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2154
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 350:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2159
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 351:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2165
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 352:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2169
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 353:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2173
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 354:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2177
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 355:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2181
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2185
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 357:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2189
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 358:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2193
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 359:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2199
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 360:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2204
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 361:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2209
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2213
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2218
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 364:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2222
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 365:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2227
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 366:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2232
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 367:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2237
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2241
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2245
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2250
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 371:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2254
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 372:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2259
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 373:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2263
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 374:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2267
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 375:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2271
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 376:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2275
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 377:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2280
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 378:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2285
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 379:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2290
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 380:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2295
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 381:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2301
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 382:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2305
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 383:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2310
		{
			psqVAL.str = ""
		}
	case 384:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2314
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 385:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2318
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 386:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2325
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2330
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2334
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2340
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2344
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 391:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2350
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2354
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2358
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2362
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2366
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2372
		{
			psqVAL.str = ""
		}
	case 397:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2376
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 398:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2382
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2386
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2390
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2394
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2398
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2403
		{
			psqVAL.str = ""
		}
	case 404:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2407
		{
			psqVAL.str = psqDollar[2].str
		}
	case 405:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2413
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 406:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2417
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 407:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2421
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 408:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2428
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2432
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 410:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2437
		{
			psqVAL.str = "key"
		}
	case 411:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2441
		{
			psqVAL.str = psqDollar[1].str
		}
	case 412:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2447
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 413:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2451
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 414:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2456
		{
			psqVAL.str = ""
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2460
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2466
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 417:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2470
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 418:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2476
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2480
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2486
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2490
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2496
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2500
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2506
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 425:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2512
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 426:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2516
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2520
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 428:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2524
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2528
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2533
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2537
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2543
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2549
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2555
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2559
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2563
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2568
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2572
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2578
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2584
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2590
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2594
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2598
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2602
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 445:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2606
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 446:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2611
		{
			psqVAL.str = ""
		}
	case 447:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2615
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 448:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2619
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 449:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2625
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 450:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2629
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 451:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2634
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 452:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2638
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 453:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2643
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 454:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2647
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2653
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 456:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2657
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 457:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2661
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 458:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2667
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 459:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2671
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 460:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2677
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2681
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2685
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2689
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2693
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2697
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 466:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2701
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 467:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2705
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 468:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2709
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 469:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2713
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2717
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 471:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2721
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 472:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2725
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 473:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2729
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2733
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2738
		{
			psqVAL.str = ""
		}
	case 476:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2742
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 477:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2746
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 487:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2765
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 488:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2769
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 489:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2773
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 490:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2778
		{
			psqVAL.str = ""
		}
	case 492:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2784
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2788
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2793
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2797
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2803
		{
			psqLOCAL = []ast.AlterOption{&ast.AlterOwner{Owner: &ast.RoleName{Name: ast.RoleIdent{V: psqDollar[3].str}}}}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2808
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2812
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2816
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 500:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2820
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2824
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 502:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2828
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2834
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2838
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2842
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 506:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2848
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2852
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2856
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2860
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2864
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2868
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2872
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2876
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2880
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2884
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2889
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2894
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2898
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2902
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2906
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2910
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2914
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2918
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2922
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2926
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2930
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2934
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2938
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2942
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 530:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2946
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2950
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2954
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2958
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2962
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2966
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2972
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2976
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 538:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2982
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2986
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2990
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2994
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2998
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:3002
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3008
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3014
		{
			psqDollar[1].alterSchemaUnion().FullyParsed = true
			psqDollar[1].alterSchemaUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterSchemaUnion()
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3020
		{
			psqDollar[1].alterSequenceUnion().SequenceSpec = psqDollar[2].sequenceSpecUnion()
			psqDollar[1].alterSequenceUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterSequenceUnion()
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3026
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[6].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Definer: psqDollar[3].definerUnion(), Security: psqDollar[4].str, Columns: psqDollar[7].columnsUnion(), Select: psqDollar[9].selStmtUnion(), CheckOption: psqDollar[10].str}
		}
		psqVAL.union = psqLOCAL
	case 548:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3036
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3043
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3055
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3065
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3069
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3073
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3086
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3096
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3100
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3113
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:3119
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:3125
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3129
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 561:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3135
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3139
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3145
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3151
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3157
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:3163
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3169
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3173
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3177
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3181
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3187
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3193
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3199
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3203
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3207
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3213
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3219
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3223
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 579:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3229
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3233
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}})}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}})}
			}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3242
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3246
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3252
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3256
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3261
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3267
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3271
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3275
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3279
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3283
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3287
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3291
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3295
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3299
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 595:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3303
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 596:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3307
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 597:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3311
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3315
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 599:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3319
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 600:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3323
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 601:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3327
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 602:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3331
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 603:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3335
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 604:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3339
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3343
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3347
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 607:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3351
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 608:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3355
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 609:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3359
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 610:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3363
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 611:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3367
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 612:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3371
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3375
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3379
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3383
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3387
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3391
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3398
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3402
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 620:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3406
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 621:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3410
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 622:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3414
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 623:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3418
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 624:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3422
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3426
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3432
		{
			psqVAL.str = ""
		}
	case 627:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3436
		{
			psqVAL.str = "extended "
		}
	case 628:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3442
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3446
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3452
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 631:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3456
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 632:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3462
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 633:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3466
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 634:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3470
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 635:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3476
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3480
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3484
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 638:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3490
		{
			psqVAL.empty = struct{}{}
		}
	case 639:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3494
		{
			psqVAL.empty = struct{}{}
		}
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3498
		{
			psqVAL.empty = struct{}{}
		}
	case 641:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3504
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 642:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3508
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 643:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3514
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3518
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3522
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3528
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3532
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 648:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3538
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 649:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3544
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3548
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3553
		{
			psqVAL.empty = struct{}{}
		}
	case 652:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3555
		{
			psqVAL.empty = struct{}{}
		}
	case 653:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3558
		{
			psqVAL.empty = struct{}{}
		}
	case 654:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3560
		{
			psqVAL.empty = struct{}{}
		}
	case 655:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3565
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3571
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3576
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3580
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3584
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3588
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 661:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3592
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 662:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3596
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 663:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3602
		{
			psqVAL.str = psqDollar[1].str
		}
	case 664:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3606
		{
			psqVAL.str = psqDollar[1].str
		}
	case 665:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3610
		{
			psqVAL.str = psqDollar[1].str
		}
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3616
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 667:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3620
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 668:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3624
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 669:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3628
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 670:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3633
		{
			psqVAL.str = ""
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3637
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 672:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3641
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 673:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3647
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 674:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3651
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3657
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3661
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 677:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3667
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 678:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3673
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 679:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3677
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 680:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3683
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 681:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3689
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 682:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3693
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 683:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3697
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 684:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3701
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 685:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3707
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 686:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3713
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 687:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3717
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 688:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3721
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 689:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3725
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 690:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3729
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 691:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3733
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3739
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 693:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3743
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 694:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3749
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 695:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3753
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 696:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3757
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 697:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3761
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 698:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3765
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 699:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3769
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 700:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3773
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 701:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3777
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 702:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3781
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 703:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3785
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 704:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3789
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 705:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3794
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 706:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3798
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 707:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3802
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 708:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3807
		{
			psqVAL.str = ""
		}
	case 709:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3811
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 710:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3816
		{
			setAllowComments(psqlex, true)
		}
	case 711:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3820
		{
			// Strange argumets shift
			psqLOCAL = &ast.CommentOnSchema{Comments: ast.Comments{psqDollar[2].str}.Parsed(), Schema: psqDollar[5].schemaName.Name, Value: psqDollar[7].exprUnion()}
			setAllowComments(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 712:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3828
		{
			setAllowComments(psqlex, true)
		}
	case 713:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3832
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 714:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3838
		{
			psqVAL.strs = nil
		}
	case 715:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3842
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 716:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3847
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 717:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3851
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 718:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3857
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 719:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3861
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 720:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3865
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 721:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3870
		{
			psqVAL.str = ""
		}
	case 722:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3874
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 723:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3878
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 724:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3883
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 725:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3887
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 726:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3891
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3897
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 728:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3901
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 729:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3913
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 730:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3918
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 731:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3922
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 732:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3928
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 733:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3932
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3937
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3941
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3946
		{
			psqVAL.strs = nil
		}
	case 737:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3950
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 738:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3954
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 739:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3958
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 740:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3962
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 741:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3968
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 742:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3972
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 743:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3976
		{
			psqVAL.str = ast.DistinctStr
		}
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3980
		{
			psqVAL.str = ast.DistinctStr
		}
	case 745:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3984
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 746:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3988
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 747:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3992
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 748:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3998
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 749:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4002
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 750:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4008
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 751:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4012
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 752:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4016
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 753:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:4020
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 754:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4025
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 755:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4029
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 756:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4033
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 758:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4040
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 759:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4045
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 760:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4049
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 761:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4055
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 762:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:4061
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 763:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4065
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 766:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4075
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 767:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4079
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 768:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4083
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4087
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:4093
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:4097
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:4103
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 773:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4108
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4112
		{
			setIgnoreCommentKeyword(psqlex, true)
			psqLOCAL = psqDollar[2].columnsUnion()
			setIgnoreCommentKeyword(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 775:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4118
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4124
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 777:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4128
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 778:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4134
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 779:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4138
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 780:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4144
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 781:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:4148
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 782:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4152
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 783:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4156
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 784:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4169
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 785:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4173
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4177
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 787:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:4181
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 788:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4187
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 789:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4189
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 790:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4193
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 791:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4195
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 792:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4199
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 793:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4201
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 794:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4205
		{
			psqVAL.schemaName = ast.SchemaName{Name: psqDollar[2].schemaIdent}
		}
	case 795:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4210
		{
			psqVAL.empty = struct{}{}
		}
	case 796:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4212
		{
			psqVAL.empty = struct{}{}
		}
	case 797:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4215
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 798:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4219
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 799:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4223
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 801:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4230
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 802:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4236
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4240
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4244
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4250
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4256
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4260
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4264
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4268
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4274
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4278
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4288
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 813:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4292
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 814:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4298
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 815:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4302
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 816:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4308
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 817:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4313
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4317
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4323
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4327
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 821:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4333
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4337
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4341
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4345
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4350
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4354
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4358
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4362
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4368
		{
			psqVAL.sequenceName = ast.SequenceName{Name: psqDollar[2].sequenceIdent}
		}
	case 830:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:4372
		{
			psqVAL.sequenceName = ast.SequenceName{Qualifier: psqDollar[2].sequenceIdent, Name: psqDollar[4].sequenceIdent}
		}
	case 831:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4378
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4382
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4389
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4393
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4397
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4401
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4405
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4409
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4416
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4420
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4424
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4428
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4434
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4438
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4442
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4446
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4450
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4454
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4458
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4462
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4466
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4470
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4474
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4478
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4484
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4488
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4492
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4496
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 859:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4500
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 860:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4504
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4508
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4512
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4516
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4520
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4524
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4528
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4532
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4538
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4542
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4546
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4550
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4554
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4558
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4562
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4566
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4570
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4574
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4578
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 879:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4582
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4586
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4590
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4594
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4598
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4602
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4606
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4610
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4618
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4622
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4630
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4634
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4640
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4644
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4648
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4654
		{
			psqVAL.str = ""
		}
	case 895:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4658
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 896:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4664
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4668
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4675
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4679
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4683
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4687
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4693
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4697
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4701
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4705
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4709
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4713
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4717
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4723
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4727
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4731
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4738
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4744
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4748
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 915:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4758
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4762
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4766
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4770
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4780
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4784
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4788
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4792
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4796
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4800
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4804
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4808
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4812
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4816
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4827
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4831
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4837
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4841
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4846
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4850
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4854
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4858
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4862
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4866
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4870
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4874
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4878
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4882
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4886
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4890
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 945:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4894
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 946:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4898
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 947:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4902
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 948:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4906
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 949:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4910
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 950:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4914
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4918
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4922
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4926
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4930
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4934
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4938
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4942
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4946
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4950
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4954
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4958
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4962
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4966
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4970
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4974
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4978
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4982
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4986
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4990
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 970:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4994
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 971:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4998
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5002
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5006
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5010
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5014
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5018
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5023
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5027
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:5032
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:5036
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:5042
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5046
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 983:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5052
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 984:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5056
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 985:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5062
		{
		}
	case 986:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5064
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 987:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5068
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 988:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5072
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5076
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5080
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5084
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5088
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5092
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5096
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5100
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5104
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5110
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5114
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5118
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5122
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5126
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5130
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5134
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5138
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:5142
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 1008:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5152
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5156
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1010:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5160
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5171
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5175
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5179
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1014:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5183
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5187
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5193
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5197
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5201
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5205
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5209
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5215
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 1022:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5219
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1023:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5223
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1024:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5229
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5235
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5239
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 1027:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5243
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5247
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5253
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5257
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5261
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5265
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5269
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5273
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5277
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5281
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5285
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5289
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5295
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5299
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5304
		{
			psqVAL.str = string("")
		}
	case 1042:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5308
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1043:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5314
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5318
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1045:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5324
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1046:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5329
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1047:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5333
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1048:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5339
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1049:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5343
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1050:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5347
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1051:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5353
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1052:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5362
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1053:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5368
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1054:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5372
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1055:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5377
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1056:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5381
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1057:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5386
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1058:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5390
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1059:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5396
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5402
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1061:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5406
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1062:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5412
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5417
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1064:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5421
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5425
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5430
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5434
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1068:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5440
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1069:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5444
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1070:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5448
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1071:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5453
		{
			psqVAL.str = ""
		}
	case 1072:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5457
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1073:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5463
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1074:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5467
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1075:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5472
		{
			psqVAL.str = ""
		}
	case 1076:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5476
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1077:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5481
		{
			psqVAL.str = "cascaded"
		}
	case 1078:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5485
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1079:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5489
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1080:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5494
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5498
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1082:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5504
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1083:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5510
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1084:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5516
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1085:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5525
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1086:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5529
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1087:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5534
		{
			psqVAL.str = ""
		}
	case 1088:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5538
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1089:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5544
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5548
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5554
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5567
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1093:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5571
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1094:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5575
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5579
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1096:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5583
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1097:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5589
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5593
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1099:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5597
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1100:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5601
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1101:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5606
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5610
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1103:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5616
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1104:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5620
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1105:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5626
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5630
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5636
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5641
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1109:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5651
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1110:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5655
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1111:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5661
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1112:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5667
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5671
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1114:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5677
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1115:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5681
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1116:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5685
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1117:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5689
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1118:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5693
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1120:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5701
		{
			psqVAL.str = "charset"
		}
	case 1123:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5711
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1124:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5715
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5719
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1128:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5728
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1129:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5730
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1130:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5733
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1131:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5735
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1132:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5738
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1133:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5740
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1134:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5743
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1135:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5745
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1136:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5748
		{
			psqVAL.empty = struct{}{}
		}
	case 1137:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5750
		{
			psqVAL.empty = struct{}{}
		}
	case 1138:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5752
		{
			psqVAL.empty = struct{}{}
		}
	case 1139:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5756
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1140:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5761
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5765
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1142:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5770
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5772
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1144:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5776
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1145:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5782
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1146:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5786
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1147:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5790
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1149:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5797
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1150:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5803
		{
			psqVAL.schemaIdent = ast.NewSchemaIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1151:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5809
		{
			psqVAL.sequenceIdent = ast.NewSequenceIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1152:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5815
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1153:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5819
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1154:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5823
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1155:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5829
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1156:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5833
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1158:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5840
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5847
		{
			psqVAL.sequenceIdent = ast.NewSequenceIdent(string(psqDollar[1].str))
		}
	case 1678:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6399
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1679:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6408
		{
			decNesting(psqlex)
		}
	case 1680:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6413
		{
			skipToEnd(psqlex)
		}
	case 1681:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6418
		{
			skipToEnd(psqlex)
		}
	case 1682:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6422
		{
			skipToEnd(psqlex)
		}
	case 1683:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6426
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
