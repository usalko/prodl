// Code generated by goyacc -v y.output -fast-append -p psq -o psql.go psql.y. DO NOT EDIT.

//line psql.y:18
package psql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line psql.y:18

import (
	"github.com/usalko/prodl/internal/sql_parser/ast"
	"github.com/usalko/prodl/internal/sql_parser/tokenizer"
	"github.com/usalko/prodl/internal/sql_types"
)

func setParseTree(psqlex psqLexer, stmt ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetParseTree(stmt)
}

func setAllowComments(psqlex psqLexer, allow bool) {
	psqlex.(tokenizer.Tokenizer).SetAllowComments(allow)
}

func setDDL(psqlex psqLexer, node ast.Statement) {
	psqlex.(tokenizer.Tokenizer).SetPartialDDL(node)
}

func incNesting(psqlex psqLexer) bool {
	psqlex.(tokenizer.Tokenizer).IncNesting()
	if psqlex.(tokenizer.Tokenizer).GetNesting() == 200 {
		return true
	}
	return false
}

func decNesting(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).DecNesting()
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(psqlex psqLexer) {
	psqlex.(tokenizer.Tokenizer).SetSkipToEnd(true)
}

func bindVariable(psqlex psqLexer, bvar string) {
	psqlex.(tokenizer.Tokenizer).BindVar(bvar, struct{}{})
}

const MEMBER = 57346
const FUNCTION_CALL_NON_KEYWORD = 57347
const LEX_ERROR = 57348
const UNION = 57349
const SELECT = 57350
const STREAM = 57351
const VSTREAM = 57352
const INSERT = 57353
const UPDATE = 57354
const DELETE = 57355
const FROM = 57356
const WHERE = 57357
const GROUP = 57358
const HAVING = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const FOR = 57364
const ALL = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const UNLOCK = 57376
const KEYS = 57377
const DO = 57378
const CALL = 57379
const COMMENT = 57380
const DISTINCTROW = 57381
const PARSER = 57382
const GENERATED = 57383
const ALWAYS = 57384
const ANY = 57385
const ASYMMETRIC = 57386
const AUTHORIZATION = 57387
const CONCURRENTLY = 57388
const CURRENT_CATALOG = 57389
const CURRENT_ROLE = 57390
const CURRENT_SCHEMA = 57391
const DEFERRABLE = 57392
const FETCH = 57393
const FREEZE = 57394
const GRANT = 57395
const ILIKE = 57396
const INITIALLY = 57397
const INTERSECT = 57398
const ISNULL = 57399
const NOTNULL = 57400
const OVERLAPS = 57401
const PLACING = 57402
const SESSION_USER = 57403
const SIMILAR = 57404
const SOME = 57405
const SYMMETRIC = 57406
const SYSTEM_USER = 57407
const TABLESAMPLE = 57408
const VARIADIC = 57409
const VERBOSE = 57410
const ABORT = 57411
const ABSENT = 57412
const ABSOLUTE = 57413
const ACCESS = 57414
const AGGREGATE = 57415
const ALSO = 57416
const ASENSITIVE = 57417
const ASSERTION = 57418
const ASSIGNMENT = 57419
const AT = 57420
const ATOMIC = 57421
const ATTACH = 57422
const ATTRIBUTE = 57423
const BACKWARD = 57424
const BEFORE = 57425
const BREADTH = 57426
const CACHE = 57427
const CALLED = 57428
const CATALOG = 57429
const CHAIN = 57430
const CHARACTERISTICS = 57431
const CHECKPOINT = 57432
const CLASS = 57433
const CLOSE = 57434
const CLUSTER = 57435
const COMMENTS = 57436
const CONDITIONAL = 57437
const CONFIGURATION = 57438
const CONFLICT = 57439
const CONSTRAINTS = 57440
const CONTENT = 57441
const CONTINUE = 57442
const CONVERSION = 57443
const COST = 57444
const OPTIONALLY = 57445
const ESCAPED = 57446
const ENCLOSED = 57447
const TERMINATED = 57448
const STARTING = 57449
const LINES = 57450
const OVERWRITE = 57451
const MANIFEST = 57452
const HEADER = 57453
const CSV = 57454
const CUBE = 57455
const CURRENT = 57456
const CURSOR = 57457
const CYCLE = 57458
const DATA = 57459
const DEC = 57460
const DECLARE = 57461
const DEFAULTS = 57462
const DEFERRED = 57463
const DELIMITER = 57464
const DELIMITERS = 57465
const DEPENDS = 57466
const DEPTH = 57467
const DETACH = 57468
const DICTIONARY = 57469
const DOCUMENT = 57470
const DOMAIN = 57471
const EACH = 57472
const ENCODING = 57473
const ENCRYPTED = 57474
const EXCLUDING = 57475
const EXPRESSION = 57476
const EXTENSION = 57477
const EXTERNAL = 57478
const FAMILY = 57479
const FILTER = 57480
const FINALIZE = 57481
const FORWARD = 57482
const FUNCTIONS = 57483
const GRANTED = 57484
const GREATEST = 57485
const HANDLER = 57486
const HOLD = 57487
const IDENTITY = 57488
const IMMEDIATE = 57489
const IMMUTABLE = 57490
const IMPLICIT = 57491
const INCLUDE = 57492
const INCLUDING = 57493
const INCREMENT = 57494
const INDENT = 57495
const INHERIT = 57496
const INHERITS = 57497
const INLINE = 57498
const INOUT = 57499
const INPUT = 57500
const INSENSITIVE = 57501
const INSTEAD = 57502
const JSON_ARRAYAGG = 57503
const JSON_EXISTS = 57504
const JSON_OBJECTAGG = 57505
const JSON_QUERY = 57506
const JSON_SCALAR = 57507
const JSON_SERIALIZE = 57508
const KEEP = 57509
const LABEL = 57510
const LARGE = 57511
const LEAKPROOF = 57512
const LEAST = 57513
const LISTEN = 57514
const LOAD = 57515
const LOCATION = 57516
const LOGGED = 57517
const MAPPING = 57518
const MATCHED = 57519
const MATERIALIZED = 57520
const MERGE_ACTION = 57521
const METHOD = 57522
const MINVALUE = 57523
const MOVE = 57524
const NATIONAL = 57525
const NEW = 57526
const NFC = 57527
const NFD = 57528
const NFKC = 57529
const NFKD = 57530
const NORMALIZE = 57531
const NORMALIZED = 57532
const NOTHING = 57533
const NOTIFY = 57534
const NULLIF = 57535
const OBJECT = 57536
const OIDS = 57537
const OMIT = 57538
const OPERATOR = 57539
const OPTIONS = 57540
const OUT = 57541
const OVERLAY = 57542
const OVERRIDING = 57543
const OWNED = 57544
const OWNER = 57545
const PARALLEL = 57546
const PARAMETER = 57547
const PASSING = 57548
const PLAN = 57549
const PLANS = 57550
const POLICY = 57551
const POSITION = 57552
const PRECISION = 57553
const PREPARED = 57554
const PRESERVE = 57555
const PRIOR = 57556
const PROCEDURAL = 57557
const PROCEDURES = 57558
const PROGRAM = 57559
const PUBLICATION = 57560
const QUOTE = 57561
const QUOTES = 57562
const RANGE = 57563
const REASSIGN = 57564
const RECHECK = 57565
const REF = 57566
const REFERENCING = 57567
const REFRESH = 57568
const REINDEX = 57569
const RELATIVE = 57570
const REPLICA = 57571
const RESET = 57572
const RETURN = 57573
const RETURNS = 57574
const REVOKE = 57575
const ROLLUP = 57576
const ROUTINE = 57577
const ROUTINES = 57578
const ROW = 57579
const ROWS = 57580
const RULE = 57581
const SCALAR = 57582
const SCROLL = 57583
const SEARCH = 57584
const SEQUENCES = 57585
const SERVER = 57586
const SETOF = 57587
const SETS = 57588
const SNAPSHOT = 57589
const SOURCE = 57590
const STABLE = 57591
const STANDALONE = 57592
const STATEMENT = 57593
const STATISTICS = 57594
const STDIN = 57595
const STDOUT = 57596
const STRICT = 57597
const STRIP = 57598
const SUBSCRIPTION = 57599
const SUPPORT = 57600
const SYSID = 57601
const TARGET = 57602
const TEMP = 57603
const TEMPLATE = 57604
const TRANSFORM = 57605
const TREAT = 57606
const TRUSTED = 57607
const TYPE = 57608
const TYPES = 57609
const UESCAPE = 57610
const UNCONDITIONAL = 57611
const UNENCRYPTED = 57612
const UNKNOWN = 57613
const UNLISTEN = 57614
const UNLOGGED = 57615
const UNTIL = 57616
const VACUUM = 57617
const VALID = 57618
const VALIDATE = 57619
const VALIDATOR = 57620
const VARYING = 57621
const VERSION = 57622
const VIEWS = 57623
const VOLATILE = 57624
const WHITESPACE = 57625
const WITHIN = 57626
const WRAPPER = 57627
const XML = 57628
const XMLATTRIBUTES = 57629
const XMLCONCAT = 57630
const XMLELEMENT = 57631
const XMLEXISTS = 57632
const XMLFOREST = 57633
const XMLNAMESPACES = 57634
const XMLPARSE = 57635
const XMLPI = 57636
const XMLROOT = 57637
const XMLSERIALIZE = 57638
const XMLTABLE = 57639
const YES = 57640
const ZONE = 57641
const ARRAY_MAX_CARDINALITY = 57642
const CHARACTER_SET_CATALOG = 57643
const COMMAND_FUNCTION_CODE = 57644
const CURRENT_DEFAULT_TRANSFORM_GROUP = 57645
const CURRENT_TRANSFORM_GROUP_FOR_TYPE = 57646
const DATETIME_INTERVAL_CODE = 57647
const DATETIME_INTERVAL_PRECISION = 57648
const DYNAMIC_FUNCTION_CODE = 57649
const END_EXEC = 57650
const PARAMETER_ORDINAL_POSITION = 57651
const PARAMETER_SPECIFIC_CATALOG = 57652
const PARAMETER_SPECIFIC_NAME = 57653
const PARAMETER_SPECIFIC_SCHEMA = 57654
const RETURNED_OCTET_LENGTH = 57655
const TRANSACTIONS_COMMITTED = 57656
const TRANSACTIONS_ROLLED_BACK = 57657
const USER_DEFINED_TYPE_CATALOG = 57658
const USER_DEFINED_TYPE_CODE = 57659
const USER_DEFINED_TYPE_NAME = 57660
const USER_DEFINED_TYPE_SCHEMA = 57661
const VALUES = 57662
const LAST_INSERT_ID = 57663
const NEXT = 57664
const VALUE = 57665
const SHARE = 57666
const MODE = 57667
const SQL_NO_CACHE = 57668
const SQL_CACHE = 57669
const SQL_CALC_FOUND_ROWS = 57670
const JOIN = 57671
const STRAIGHT_JOIN = 57672
const LEFT = 57673
const RIGHT = 57674
const INNER = 57675
const OUTER = 57676
const CROSS = 57677
const NATURAL = 57678
const USE = 57679
const FORCE = 57680
const ON = 57681
const USING = 57682
const INPLACE = 57683
const COPY = 57684
const INSTANT = 57685
const ALGORITHM = 57686
const NONE = 57687
const SHARED = 57688
const EXCLUSIVE = 57689
const SUBQUERY_AS_EXPR = 57690
const ID = 57691
const AT_ID = 57692
const AT_AT_ID = 57693
const HEX = 57694
const STRING = 57695
const NCHAR_STRING = 57696
const INTEGRAL = 57697
const FLOAT = 57698
const DECIMAL = 57699
const HEXNUM = 57700
const VALUE_ARG = 57701
const LIST_ARG = 57702
const COMMENT_KEYWORD = 57703
const BIT_LITERAL = 57704
const COMPRESSION = 57705
const JSON_PRETTY = 57706
const JSON_STORAGE_SIZE = 57707
const JSON_STORAGE_FREE = 57708
const JSON_CONTAINS = 57709
const JSON_CONTAINS_PATH = 57710
const JSON_EXTRACT = 57711
const JSON_KEYS = 57712
const JSON_OVERLAPS = 57713
const JSON_SEARCH = 57714
const JSON_VALUE = 57715
const EXTRACT = 57716
const NULL = 57717
const TRUE = 57718
const FALSE = 57719
const OFF = 57720
const DISCARD = 57721
const IMPORT = 57722
const ENABLE = 57723
const DISABLE = 57724
const TABLESPACE = 57725
const VIRTUAL = 57726
const STORED = 57727
const BOTH = 57728
const LEADING = 57729
const TRAILING = 57730
const EMPTY_FROM_CLAUSE = 57731
const LOWER_THAN_CHARSET = 57732
const CHARSET = 57733
const UNIQUE = 57734
const KEY = 57735
const EXPRESSION_PREC_SETTER = 57736
const OR = 57737
const AND = 57738
const NOT = 57739
const BETWEEN = 57740
const CASE = 57741
const WHEN = 57742
const THEN = 57743
const ELSE = 57744
const END = 57745
const LE = 57746
const GE = 57747
const NE = 57748
const NULL_SAFE_EQUAL = 57749
const IS = 57750
const LIKE = 57751
const REGEXP = 57752
const IN = 57753
const SHIFT_LEFT = 57754
const SHIFT_RIGHT = 57755
const DIV = 57756
const MOD = 57757
const UNARY = 57758
const COLLATE = 57759
const BINARY = 57760
const UNDERSCORE_ARMSCII8 = 57761
const UNDERSCORE_ASCII = 57762
const UNDERSCORE_BIG5 = 57763
const UNDERSCORE_BINARY = 57764
const UNDERSCORE_CP1250 = 57765
const UNDERSCORE_CP1251 = 57766
const UNDERSCORE_CP1256 = 57767
const UNDERSCORE_CP1257 = 57768
const UNDERSCORE_CP850 = 57769
const UNDERSCORE_CP852 = 57770
const UNDERSCORE_CP866 = 57771
const UNDERSCORE_CP932 = 57772
const UNDERSCORE_DEC8 = 57773
const UNDERSCORE_EUCJPMS = 57774
const UNDERSCORE_EUCKR = 57775
const UNDERSCORE_GB18030 = 57776
const UNDERSCORE_GB2312 = 57777
const UNDERSCORE_GBK = 57778
const UNDERSCORE_GEOSTD8 = 57779
const UNDERSCORE_GREEK = 57780
const UNDERSCORE_HEBREW = 57781
const UNDERSCORE_HP8 = 57782
const UNDERSCORE_KEYBCS2 = 57783
const UNDERSCORE_KOI8R = 57784
const UNDERSCORE_KOI8U = 57785
const UNDERSCORE_LATIN1 = 57786
const UNDERSCORE_LATIN2 = 57787
const UNDERSCORE_LATIN5 = 57788
const UNDERSCORE_LATIN7 = 57789
const UNDERSCORE_MACCE = 57790
const UNDERSCORE_MACROMAN = 57791
const UNDERSCORE_SJIS = 57792
const UNDERSCORE_SWE7 = 57793
const UNDERSCORE_TIS620 = 57794
const UNDERSCORE_UCS2 = 57795
const UNDERSCORE_UJIS = 57796
const UNDERSCORE_UTF16 = 57797
const UNDERSCORE_UTF16LE = 57798
const UNDERSCORE_UTF32 = 57799
const UNDERSCORE_UTF8 = 57800
const UNDERSCORE_UTF8MB4 = 57801
const UNDERSCORE_UTF8MB3 = 57802
const INTERVAL = 57803
const JSON_EXTRACT_OP = 57804
const JSON_UNQUOTE_EXTRACT_OP = 57805
const CREATE = 57806
const ALTER = 57807
const DROP = 57808
const RENAME = 57809
const ANALYZE = 57810
const ANALYSE = 57811
const ADD = 57812
const FLUSH = 57813
const CHANGE = 57814
const MODIFY = 57815
const DEALLOCATE = 57816
const REVERT = 57817
const SCHEMA = 57818
const TABLE = 57819
const INDEX = 57820
const VIEW = 57821
const TO = 57822
const IGNORE = 57823
const IF = 57824
const PRIMARY = 57825
const COLUMN = 57826
const SPATIAL = 57827
const FULLTEXT = 57828
const KEY_BLOCK_SIZE = 57829
const CHECK = 57830
const INDEXES = 57831
const ACTION = 57832
const CASCADE = 57833
const CONSTRAINT = 57834
const FOREIGN = 57835
const NO = 57836
const REFERENCES = 57837
const RESTRICT = 57838
const SHOW = 57839
const DESCRIBE = 57840
const EXPLAIN = 57841
const DATE = 57842
const ESCAPE = 57843
const REPAIR = 57844
const OPTIMIZE = 57845
const TRUNCATE = 57846
const COALESCE = 57847
const EXCHANGE = 57848
const REBUILD = 57849
const PARTITIONING = 57850
const REMOVE = 57851
const PREPARE = 57852
const EXECUTE = 57853
const MAXVALUE = 57854
const PARTITION = 57855
const REORGANIZE = 57856
const LESS = 57857
const THAN = 57858
const PROCEDURE = 57859
const TRIGGER = 57860
const VINDEX = 57861
const VINDEXES = 57862
const DIRECTORY = 57863
const NAME = 57864
const UPGRADE = 57865
const STATUS = 57866
const VARIABLES = 57867
const WARNINGS = 57868
const CASCADED = 57869
const DEFINER = 57870
const OPTION = 57871
const SQL = 57872
const UNDEFINED = 57873
const SEQUENCE = 57874
const MERGE = 57875
const TEMPORARY = 57876
const TEMPTABLE = 57877
const INVOKER = 57878
const SECURITY = 57879
const FIRST = 57880
const AFTER = 57881
const LAST = 57882
const CANCEL = 57883
const RETRY = 57884
const COMPLETE = 57885
const CLEANUP = 57886
const THROTTLE = 57887
const UNTHROTTLE = 57888
const EXPIRE = 57889
const RATIO = 57890
const BEGIN = 57891
const START = 57892
const TRANSACTION = 57893
const COMMIT = 57894
const ROLLBACK = 57895
const SAVEPOINT = 57896
const RELEASE = 57897
const WORK = 57898
const BIT = 57899
const TINYINT = 57900
const SMALLINT = 57901
const MEDIUMINT = 57902
const INT = 57903
const INTEGER = 57904
const BIGINT = 57905
const INTNUM = 57906
const REAL = 57907
const DOUBLE = 57908
const FLOAT_TYPE = 57909
const DECIMAL_TYPE = 57910
const NUMERIC = 57911
const TIME = 57912
const TIMESTAMP = 57913
const DATETIME = 57914
const YEAR = 57915
const CHAR = 57916
const VARCHAR = 57917
const BOOL = 57918
const CHARACTER = 57919
const VARBINARY = 57920
const NCHAR = 57921
const TEXT = 57922
const TINYTEXT = 57923
const MEDIUMTEXT = 57924
const LONGTEXT = 57925
const BLOB = 57926
const TINYBLOB = 57927
const MEDIUMBLOB = 57928
const LONGBLOB = 57929
const JSON = 57930
const JSON_SCHEMA_VALID = 57931
const JSON_SCHEMA_VALIDATION_REPORT = 57932
const ENUM = 57933
const GEOMETRY = 57934
const POINT = 57935
const LINESTRING = 57936
const POLYGON = 57937
const GEOMETRYCOLLECTION = 57938
const MULTIPOINT = 57939
const MULTILINESTRING = 57940
const MULTIPOLYGON = 57941
const ASCII = 57942
const UNICODE = 57943
const NULLX = 57944
const AUTO_INCREMENT = 57945
const APPROXNUM = 57946
const SIGNED = 57947
const UNSIGNED = 57948
const ZEROFILL = 57949
const CODE = 57950
const COLLATION = 57951
const COLUMNS = 57952
const DATABASES = 57953
const ENGINES = 57954
const EVENT = 57955
const EXTENDED = 57956
const FIELDS = 57957
const FULL = 57958
const FUNCTION = 57959
const GTID_EXECUTED = 57960
const KEYSPACES = 57961
const OPEN = 57962
const PLUGINS = 57963
const PRIVILEGES = 57964
const PROCESSLIST = 57965
const SCHEMAS = 57966
const TABLES = 57967
const TRIGGERS = 57968
const USER = 57969
const VGTID_EXECUTED = 57970
const VSCHEMA = 57971
const NAMES = 57972
const GLOBAL = 57973
const SESSION = 57974
const ISOLATION = 57975
const LEVEL = 57976
const READ = 57977
const WRITE = 57978
const ONLY = 57979
const REPEATABLE = 57980
const COMMITTED = 57981
const UNCOMMITTED = 57982
const SERIALIZABLE = 57983
const CURRENT_TIMESTAMP = 57984
const DATABASE = 57985
const CURRENT_DATE = 57986
const NOW = 57987
const CURRENT_TIME = 57988
const LOCALTIME = 57989
const LOCALTIMESTAMP = 57990
const CURRENT_USER = 57991
const UTC_DATE = 57992
const UTC_TIME = 57993
const UTC_TIMESTAMP = 57994
const DAY = 57995
const DAY_HOUR = 57996
const DAY_MICROSECOND = 57997
const DAY_MINUTE = 57998
const DAY_SECOND = 57999
const HOUR = 58000
const HOUR_MICROSECOND = 58001
const HOUR_MINUTE = 58002
const HOUR_SECOND = 58003
const MICROSECOND = 58004
const MINUTE = 58005
const MINUTE_MICROSECOND = 58006
const MINUTE_SECOND = 58007
const MONTH = 58008
const QUARTER = 58009
const SECOND = 58010
const SECOND_MICROSECOND = 58011
const YEAR_MONTH = 58012
const WEEK = 58013
const REPLACE = 58014
const CONVERT = 58015
const CAST = 58016
const SUBSTR = 58017
const SUBSTRING = 58018
const GROUP_CONCAT = 58019
const SEPARATOR = 58020
const TIMESTAMPADD = 58021
const TIMESTAMPDIFF = 58022
const WEIGHT_STRING = 58023
const LTRIM = 58024
const RTRIM = 58025
const TRIM = 58026
const JSON_ARRAY = 58027
const JSON_OBJECT = 58028
const JSON_QUOTE = 58029
const JSON_DEPTH = 58030
const JSON_TYPE = 58031
const JSON_LENGTH = 58032
const JSON_VALID = 58033
const JSON_ARRAY_APPEND = 58034
const JSON_ARRAY_INSERT = 58035
const JSON_INSERT = 58036
const JSON_MERGE = 58037
const JSON_MERGE_PATCH = 58038
const JSON_MERGE_PRESERVE = 58039
const JSON_REMOVE = 58040
const JSON_REPLACE = 58041
const JSON_SET = 58042
const JSON_UNQUOTE = 58043
const MATCH = 58044
const AGAINST = 58045
const BOOLEAN = 58046
const LANGUAGE = 58047
const WITH = 58048
const QUERY = 58049
const EXPANSION = 58050
const WITHOUT = 58051
const VALIDATION = 58052
const UNUSED = 58053
const ARRAY = 58054
const BYTE = 58055
const CUME_DIST = 58056
const DESCRIPTION = 58057
const DENSE_RANK = 58058
const EMPTY = 58059
const EXCEPT = 58060
const FIRST_VALUE = 58061
const GROUPING = 58062
const GROUPS = 58063
const JSON_TABLE = 58064
const LAG = 58065
const LAST_VALUE = 58066
const LATERAL = 58067
const LEAD = 58068
const NTH_VALUE = 58069
const NTILE = 58070
const OF = 58071
const OVER = 58072
const PERCENT_RANK = 58073
const RANK = 58074
const RECURSIVE = 58075
const ROW_NUMBER = 58076
const SYSTEM = 58077
const WINDOW = 58078
const ACTIVE = 58079
const ADMIN = 58080
const AUTOEXTEND_SIZE = 58081
const BUCKETS = 58082
const CLONE = 58083
const COLUMN_FORMAT = 58084
const COMPONENT = 58085
const DEFINITION = 58086
const ENFORCED = 58087
const ENGINE_ATTRIBUTE = 58088
const EXCLUDE = 58089
const FOLLOWING = 58090
const GEOMCOLLECTION = 58091
const GET_MASTER_PUBLIC_KEY = 58092
const HISTOGRAM = 58093
const HISTORY = 58094
const INACTIVE = 58095
const INVISIBLE = 58096
const LOCKED = 58097
const MASTER_COMPRESSION_ALGORITHMS = 58098
const MASTER_PUBLIC_KEY_PATH = 58099
const MASTER_TLS_CIPHERSUITES = 58100
const MASTER_ZSTD_COMPRESSION_LEVEL = 58101
const NESTED = 58102
const NETWORK_NAMESPACE = 58103
const NOWAIT = 58104
const NULLS = 58105
const OJ = 58106
const OLD = 58107
const OPTIONAL = 58108
const ORDINALITY = 58109
const ORGANIZATION = 58110
const OTHERS = 58111
const PARTIAL = 58112
const PATH = 58113
const PERSIST = 58114
const PERSIST_ONLY = 58115
const PRECEDING = 58116
const PRIVILEGE_CHECKS_USER = 58117
const PROCESS = 58118
const RANDOM = 58119
const REFERENCE = 58120
const REQUIRE_ROW_FORMAT = 58121
const RESOURCE = 58122
const RESPECT = 58123
const RESTART = 58124
const RETAIN = 58125
const REUSE = 58126
const ROLE = 58127
const SECONDARY = 58128
const SECONDARY_ENGINE = 58129
const SECONDARY_ENGINE_ATTRIBUTE = 58130
const SECONDARY_LOAD = 58131
const SECONDARY_UNLOAD = 58132
const SIMPLE = 58133
const SKIP = 58134
const SRID = 58135
const THREAD_PRIORITY = 58136
const TIES = 58137
const UNBOUNDED = 58138
const VCPU = 58139
const VISIBLE = 58140
const RETURNING = 58141
const FORMAT = 58142
const TREE = 58143
const TRADITIONAL = 58144
const LOCAL = 58145
const LOW_PRIORITY = 58146
const NO_WRITE_TO_BINLOG = 58147
const LOGS = 58148
const ERROR = 58149
const GENERAL = 58150
const HOSTS = 58151
const OPTIMIZER_COSTS = 58152
const USER_RESOURCES = 58153
const SLOW = 58154
const CHANNEL = 58155
const RELAY = 58156
const EXPORT = 58157
const AVG_ROW_LENGTH = 58158
const CONNECTION = 58159
const CHECKSUM = 58160
const DELAY_KEY_WRITE = 58161
const ENCRYPTION = 58162
const INSERT_METHOD = 58163
const MAX_ROWS = 58164
const MIN_ROWS = 58165
const PACK_KEYS = 58166
const PASSWORD = 58167
const FIXED = 58168
const DYNAMIC = 58169
const COMPRESSED = 58170
const REDUNDANT = 58171
const COMPACT = 58172
const ROW_FORMAT = 58173
const STATS_AUTO_RECALC = 58174
const STATS_PERSISTENT = 58175
const STATS_SAMPLE_PAGES = 58176
const STORAGE = 58177
const MEMORY = 58178
const DISK = 58179

var psqToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MEMBER",
	"FUNCTION_CALL_NON_KEYWORD",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"COMMENT",
	"DISTINCTROW",
	"PARSER",
	"GENERATED",
	"ALWAYS",
	"ANY",
	"ASYMMETRIC",
	"AUTHORIZATION",
	"CONCURRENTLY",
	"CURRENT_CATALOG",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"DEFERRABLE",
	"FETCH",
	"FREEZE",
	"GRANT",
	"ILIKE",
	"INITIALLY",
	"INTERSECT",
	"ISNULL",
	"NOTNULL",
	"OVERLAPS",
	"PLACING",
	"SESSION_USER",
	"SIMILAR",
	"SOME",
	"SYMMETRIC",
	"SYSTEM_USER",
	"TABLESAMPLE",
	"VARIADIC",
	"VERBOSE",
	"ABORT",
	"ABSENT",
	"ABSOLUTE",
	"ACCESS",
	"AGGREGATE",
	"ALSO",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"AT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"BACKWARD",
	"BEFORE",
	"BREADTH",
	"CACHE",
	"CALLED",
	"CATALOG",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COMMENTS",
	"CONDITIONAL",
	"CONFIGURATION",
	"CONFLICT",
	"CONSTRAINTS",
	"CONTENT",
	"CONTINUE",
	"CONVERSION",
	"COST",
	"OPTIONALLY",
	"ESCAPED",
	"ENCLOSED",
	"TERMINATED",
	"STARTING",
	"LINES",
	"OVERWRITE",
	"MANIFEST",
	"HEADER",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURSOR",
	"CYCLE",
	"DATA",
	"DEC",
	"DECLARE",
	"DEFAULTS",
	"DEFERRED",
	"DELIMITER",
	"DELIMITERS",
	"DEPENDS",
	"DEPTH",
	"DETACH",
	"DICTIONARY",
	"DOCUMENT",
	"DOMAIN",
	"EACH",
	"ENCODING",
	"ENCRYPTED",
	"EXCLUDING",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"FAMILY",
	"FILTER",
	"FINALIZE",
	"FORWARD",
	"FUNCTIONS",
	"GRANTED",
	"GREATEST",
	"HANDLER",
	"HOLD",
	"IDENTITY",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INHERIT",
	"INHERITS",
	"INLINE",
	"INOUT",
	"INPUT",
	"INSENSITIVE",
	"INSTEAD",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_OBJECTAGG",
	"JSON_QUERY",
	"JSON_SCALAR",
	"JSON_SERIALIZE",
	"KEEP",
	"LABEL",
	"LARGE",
	"LEAKPROOF",
	"LEAST",
	"LISTEN",
	"LOAD",
	"LOCATION",
	"LOGGED",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE_ACTION",
	"METHOD",
	"MINVALUE",
	"MOVE",
	"NATIONAL",
	"NEW",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NORMALIZE",
	"NORMALIZED",
	"NOTHING",
	"NOTIFY",
	"NULLIF",
	"OBJECT",
	"OIDS",
	"OMIT",
	"OPERATOR",
	"OPTIONS",
	"OUT",
	"OVERLAY",
	"OVERRIDING",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PASSING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECISION",
	"PREPARED",
	"PRESERVE",
	"PRIOR",
	"PROCEDURAL",
	"PROCEDURES",
	"PROGRAM",
	"PUBLICATION",
	"QUOTE",
	"QUOTES",
	"RANGE",
	"REASSIGN",
	"RECHECK",
	"REF",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE",
	"REPLICA",
	"RESET",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"ROWS",
	"RULE",
	"SCALAR",
	"SCROLL",
	"SEARCH",
	"SEQUENCES",
	"SERVER",
	"SETOF",
	"SETS",
	"SNAPSHOT",
	"SOURCE",
	"STABLE",
	"STANDALONE",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STRICT",
	"STRIP",
	"SUBSCRIPTION",
	"SUPPORT",
	"SYSID",
	"TARGET",
	"TEMP",
	"TEMPLATE",
	"TRANSFORM",
	"TREAT",
	"TRUSTED",
	"TYPE",
	"TYPES",
	"UESCAPE",
	"UNCONDITIONAL",
	"UNENCRYPTED",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VARYING",
	"VERSION",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE",
	"WITHIN",
	"WRAPPER",
	"XML",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLNAMESPACES",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"XMLTABLE",
	"YES",
	"ZONE",
	"ARRAY_MAX_CARDINALITY",
	"CHARACTER_SET_CATALOG",
	"COMMAND_FUNCTION_CODE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP",
	"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
	"DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION",
	"DYNAMIC_FUNCTION_CODE",
	"END_EXEC",
	"PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG",
	"PARAMETER_SPECIFIC_NAME",
	"PARAMETER_SPECIFIC_SCHEMA",
	"RETURNED_OCTET_LENGTH",
	"TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK",
	"USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE",
	"USER_DEFINED_TYPE_NAME",
	"USER_DEFINED_TYPE_SCHEMA",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"INSTANT",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"NCHAR_STRING",
	"INTEGRAL",
	"FLOAT",
	"DECIMAL",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"COMPRESSION",
	"JSON_PRETTY",
	"JSON_STORAGE_SIZE",
	"JSON_STORAGE_FREE",
	"JSON_CONTAINS",
	"JSON_CONTAINS_PATH",
	"JSON_EXTRACT",
	"JSON_KEYS",
	"JSON_OVERLAPS",
	"JSON_SEARCH",
	"JSON_VALUE",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"DISCARD",
	"IMPORT",
	"ENABLE",
	"DISABLE",
	"TABLESPACE",
	"VIRTUAL",
	"STORED",
	"BOTH",
	"LEADING",
	"TRAILING",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"EXPRESSION_PREC_SETTER",
	"OR",
	"'|'",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8MB3",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ANALYSE",
	"ADD",
	"FLUSH",
	"CHANGE",
	"MODIFY",
	"DEALLOCATE",
	"REVERT",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"COALESCE",
	"EXCHANGE",
	"REBUILD",
	"PARTITIONING",
	"REMOVE",
	"PREPARE",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPORARY",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"FIRST",
	"AFTER",
	"LAST",
	"CANCEL",
	"RETRY",
	"COMPLETE",
	"CLEANUP",
	"THROTTLE",
	"UNTHROTTLE",
	"EXPIRE",
	"RATIO",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL_TYPE",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ASCII",
	"UNICODE",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"CODE",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"ENGINES",
	"EVENT",
	"EXTENDED",
	"FIELDS",
	"FULL",
	"FUNCTION",
	"GTID_EXECUTED",
	"KEYSPACES",
	"OPEN",
	"PLUGINS",
	"PRIVILEGES",
	"PROCESSLIST",
	"SCHEMAS",
	"TABLES",
	"TRIGGERS",
	"USER",
	"VGTID_EXECUTED",
	"VSCHEMA",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"WEIGHT_STRING",
	"LTRIM",
	"RTRIM",
	"TRIM",
	"JSON_ARRAY",
	"JSON_OBJECT",
	"JSON_QUOTE",
	"JSON_DEPTH",
	"JSON_TYPE",
	"JSON_LENGTH",
	"JSON_VALID",
	"JSON_ARRAY_APPEND",
	"JSON_ARRAY_INSERT",
	"JSON_INSERT",
	"JSON_MERGE",
	"JSON_MERGE_PATCH",
	"JSON_MERGE_PRESERVE",
	"JSON_REMOVE",
	"JSON_REPLACE",
	"JSON_SET",
	"JSON_UNQUOTE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UNUSED",
	"ARRAY",
	"BYTE",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"AUTOEXTEND_SIZE",
	"BUCKETS",
	"CLONE",
	"COLUMN_FORMAT",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"ENGINE_ATTRIBUTE",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PARTIAL",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SIMPLE",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"RETURNING",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"NO_WRITE_TO_BINLOG",
	"LOGS",
	"ERROR",
	"GENERAL",
	"HOSTS",
	"OPTIMIZER_COSTS",
	"USER_RESOURCES",
	"SLOW",
	"CHANNEL",
	"RELAY",
	"EXPORT",
	"AVG_ROW_LENGTH",
	"CONNECTION",
	"CHECKSUM",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"FIXED",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"MEMORY",
	"DISK",
	"';'",
}

var psqStatenames = [...]string{}

const psqEofCode = 1
const psqErrCode = 2
const psqInitialStackSize = 16

//line yacctab:1
var psqExca = [...]int{
	-1, 0,
	12, 47,
	13, 47,
	38, 679,
	-2, 37,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	1, 140,
	855, 140,
	-2, 148,
	-1, 49,
	1, 464,
	855, 464,
	-2, 148,
	-1, 56,
	35, 595,
	495, 595,
	506, 595,
	541, 607,
	542, 607,
	-2, 597,
	-1, 61,
	497, 620,
	-2, 618,
	-1, 115,
	494, 1110,
	-2, 114,
	-1, 117,
	1, 141,
	855, 141,
	-2, 148,
	-1, 128,
	394, 148,
	433, 148,
	594, 148,
	-2, 473,
	-1, 129,
	395, 371,
	500, 371,
	-2, 458,
	-1, 721,
	478, 1133,
	-2, 1127,
	-1, 722,
	478, 1134,
	-2, 1128,
	-1, 723,
	478, 1135,
	-2, 1129,
	-1, 734,
	349, 1310,
	478, 1310,
	479, 1310,
	480, 1310,
	-2, 270,
	-1, 735,
	349, 1351,
	478, 1351,
	479, 1351,
	480, 1351,
	-2, 269,
	-1, 736,
	349, 1562,
	478, 1562,
	479, 1562,
	480, 1562,
	-2, 271,
	-1, 797,
	322, 688,
	-2, 703,
	-1, 832,
	409, 1540,
	-2, 107,
	-1, 833,
	409, 1359,
	-2, 108,
	-1, 839,
	409, 1435,
	-2, 1104,
	-1, 980,
	505, 41,
	510, 41,
	-2, 382,
	-1, 1036,
	1, 517,
	855, 517,
	-2, 148,
	-1, 1235,
	478, 1562,
	-2, 273,
	-1, 1260,
	322, 689,
	-2, 708,
	-1, 1261,
	322, 690,
	-2, 709,
	-1, 1311,
	1, 421,
	855, 421,
	-2, 148,
	-1, 1391,
	505, 42,
	510, 42,
	-2, 383,
	-1, 1650,
	478, 1139,
	-2, 1131,
	-1, 1727,
	1, 1097,
	350, 1097,
	855, 1097,
	-2, 1457,
	-1, 1732,
	1, 422,
	855, 422,
	-2, 148,
	-1, 1738,
	349, 380,
	352, 380,
	353, 380,
	354, 380,
	-2, 1378,
	-1, 1739,
	349, 381,
	352, 381,
	353, 381,
	354, 381,
	-2, 1405,
	-1, 1741,
	25, 169,
	-2, 171,
	-1, 1961,
	350, 39,
	-2, 744,
	-1, 2013,
	340, 91,
	350, 91,
	-2, 763,
	-1, 2368,
	350, 39,
	-2, 745,
	-1, 2392,
	7, 53,
	18, 53,
	20, 53,
	351, 53,
	-2, 737,
	-1, 2585,
	22, 1438,
	32, 1438,
	434, 1438,
	517, 1438,
	574, 1438,
	575, 1438,
	576, 1438,
	577, 1438,
	578, 1438,
	579, 1438,
	580, 1438,
	582, 1438,
	583, 1438,
	584, 1438,
	585, 1438,
	586, 1438,
	587, 1438,
	588, 1438,
	589, 1438,
	590, 1438,
	591, 1438,
	592, 1438,
	593, 1438,
	595, 1438,
	597, 1438,
	598, 1438,
	599, 1438,
	600, 1438,
	601, 1438,
	602, 1438,
	603, 1438,
	604, 1438,
	605, 1438,
	608, 1438,
	609, 1438,
	610, 1438,
	611, 1438,
	612, 1438,
	613, 1438,
	614, 1438,
	615, 1438,
	616, 1438,
	721, 1438,
	-2, 536,
}

const psqPrivate = 57344

const psqLast = 48830

var psqAct = [...]int{
	721, 731, 2462, 2463, 2639, 724, 2461, 2536, 2612, 2163,
	2613, 1729, 1314, 2440, 2302, 2567, 2583, 2242, 2249, 1240,
	1916, 2501, 714, 37, 1663, 1090, 3, 2522, 1275, 1982,
	639, 2255, 96, 2383, 1978, 715, 2162, 790, 1985, 725,
	2161, 712, 713, 1750, 665, 2285, 1983, 1683, 2127, 636,
	809, 2364, 163, 1986, 2051, 163, 2110, 603, 163, 1767,
	635, 643, 2074, 617, 637, 163, 1788, 1245, 1771, 2053,
	2007, 2042, 2052, 163, 145, 1718, 1814, 945, 1368, 1011,
	810, 837, 1996, 1550, 1707, 36, 1980, 163, 631, 1952,
	1561, 1706, 1262, 1620, 1803, 163, 1619, 126, 1389, 1787,
	794, 1689, 798, 1830, 1773, 2047, 1644, 1303, 2015, 792,
	617, 1509, 38, 617, 163, 617, 1397, 946, 95, 1281,
	812, 1664, 581, 648, 1573, 1709, 1243, 1526, 1109, 1172,
	1459, 1463, 621, 1396, 981, 834, 977, 952, 1785, 1448,
	786, 949, 953, 1751, 1302, 978, 1287, 804, 1047, 1300,
	1468, 1363, 1764, 146, 1033, 1088, 1384, 1616, 124, 2090,
	2089, 1828, 808, 89, 2412, 799, 103, 120, 118, 119,
	1437, 2118, 2119, 824, 606, 2556, 166, 167, 168, 2466,
	2555, 951, 2466, 2245, 1660, 1661, 159, 1515, 1514, 1075,
	1513, 1512, 800, 1511, 818, 2601, 823, 2071, 1504, 1110,
	584, 1948, 121, 975, 2081, 629, 127, 630, 105, 106,
	122, 109, 142, 971, 115, 2352, 1818, 160, 606, 1110,
	579, 802, 1013, 166, 167, 168, 85, 1018, 1019, 1020,
	2616, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	787, 788, 789, 76, 91, 797, 988, 976, 1779, 2646,
	2611, 2625, 626, 838, 97, 1002, 2084, 1008, 604, 831,
	1817, 1519, 1816, 1015, 606, 970, 1014, 2645, 2577, 2635,
	2556, 121, 1775, 1862, 826, 827, 2551, 2593, 2623, 2441,
	2568, 2576, 98, 78, 78, 969, 968, 967, 2550, 78,
	1016, 2591, 80, 2126, 2588, 78, 2336, 1378, 1949, 1175,
	2597, 2598, 2239, 2240, 1754, 599, 1119, 1700, 2257, 2258,
	1724, 1725, 2098, 1141, 2592, 121, 2097, 2024, 597, 627,
	2023, 793, 2238, 2025, 811, 966, 1119, 1040, 1041, 2117,
	1304, 791, 1305, 2506, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1150, 1149, 1151, 1152, 1859, 1602, 1723, 1087, 1054,
	1065, 785, 784, 1662, 1055, 2537, 1035, 2035, 594, 1043,
	606, 1082, 1053, 1084, 1052, 1744, 1743, 602, 961, 9,
	1066, 963, 1059, 606, 607, 1070, 1071, 2045, 2046, 801,
	77, 962, 8, 964, 2617, 1647, 1179, 2327, 7, 957,
	2304, 2325, 615, 1503, 620, 613, 159, 2075, 1804, 1017,
	2297, 1081, 1083, 1431, 1115, 2618, 2093, 1108, 2298, 1831,
	2634, 1505, 1506, 2256, 1449, 1068, 1069, 1074, 607, 606,
	122, 1021, 1836, 2306, 1115, 2259, 1594, 1583, 1584, 1585,
	1586, 1596, 1587, 1588, 1589, 1601, 1597, 1590, 1591, 1598,
	1599, 1600, 1592, 1593, 1595, 1833, 1249, 1432, 1835, 1433,
	585, 1153, 587, 1086, 1067, 609, 1060, 608, 590, 1754,
	589, 592, 600, 593, 607, 588, 966, 598, 958, 1072,
	601, 2602, 596, 610, 2305, 960, 959, 1837, 2647, 1073,
	159, 1839, 1153, 1840, 2259, 1841, 1063, 1752, 1753, 950,
	1834, 2246, 965, 2621, 984, 950, 1860, 1079, 950, 1269,
	983, 1080, 948, 993, 122, 966, 1031, 2109, 1460, 983,
	1395, 1085, 1786, 992, 825, 2274, 2248, 139, 2106, 1953,
	1955, 1823, 2092, 141, 964, 1010, 2465, 1078, 1456, 2465,
	2243, 1096, 996, 990, 1376, 1375, 2122, 1374, 1457, 1372,
	583, 578, 1032, 147, 1693, 148, 2105, 2257, 2258, 2479,
	2104, 1154, 1155, 2244, 2399, 2210, 2020, 1977, 2643, 1940,
	607, 136, 137, 135, 134, 158, 1656, 1874, 1813, 1291,
	1219, 1045, 1453, 607, 2043, 1730, 990, 1153, 2237, 163,
	1152, 163, 1076, 807, 163, 2250, 1469, 990, 1114, 1111,
	1112, 1113, 1118, 1120, 1117, 1701, 1116, 1974, 2545, 112,
	2037, 1860, 1012, 2204, 617, 1091, 617, 2376, 1114, 1111,
	1112, 1113, 1118, 1120, 1117, 1394, 1116, 972, 1832, 607,
	1049, 617, 617, 1815, 87, 87, 2095, 1454, 1306, 1106,
	87, 1778, 989, 965, 2146, 1574, 87, 2507, 2064, 1124,
	1123, 1531, 1752, 1753, 611, 37, 1038, 1000, 1044, 1102,
	2415, 1046, 2256, 1124, 2112, 1532, 1533, 1530, 1034, 2111,
	1879, 130, 138, 140, 2259, 2112, 129, 113, 131, 132,
	2111, 999, 965, 2549, 150, 989, 605, 2619, 1124, 1777,
	1954, 983, 986, 987, 2596, 950, 989, 2414, 1886, 980,
	984, 1003, 983, 1574, 1092, 1890, 1005, 2372, 1808, 2128,
	1006, 1004, 1147, 1148, 1150, 1149, 1151, 1152, 1410, 1156,
	1157, 1158, 1159, 1409, 1450, 1393, 1451, 2648, 1124, 1164,
	1452, 1167, 1124, 1776, 1866, 1867, 1868, 2400, 2595, 2301,
	1124, 2413, 1905, 1782, 1050, 1095, 1056, 1057, 1058, 2028,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1149, 1151,
	1152, 2620, 1269, 147, 2452, 148, 1238, 1521, 1523, 1524,
	2419, 1093, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1149,
	1151, 1152, 2247, 87, 1160, 158, 1124, 2406, 2057, 1269,
	1522, 2048, 2130, 1876, 1124, 163, 1826, 1529, 617, 617,
	1578, 1466, 1435, 1233, 1145, 1146, 1147, 1148, 1150, 1149,
	1151, 1152, 1429, 1427, 163, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1126, 1426, 1252, 1124, 1425, 2439, 1256, 1239,
	2060, 617, 2607, 1269, 794, 163, 792, 1255, 2232, 92,
	617, 1253, 1740, 2333, 1979, 1992, 617, 147, 1860, 148,
	93, 1250, 738, 2292, 2293, 100, 92, 2140, 2139, 2138,
	2132, 2203, 2136, 94, 2131, 834, 2129, 93, 1121, 158,
	1124, 2134, 1972, 2574, 1124, 2544, 166, 167, 168, 133,
	2133, 1124, 101, 1972, 2564, 1254, 1124, 1972, 2561, 95,
	2205, 1239, 1124, 100, 150, 99, 1124, 2135, 2137, 1124,
	2557, 1269, 1295, 1279, 1690, 1691, 990, 87, 1124, 166,
	167, 168, 143, 2407, 1968, 144, 2348, 1269, 1972, 2434,
	1244, 2251, 1141, 1981, 1136, 2503, 1137, 166, 167, 168,
	1972, 2027, 1140, 2254, 2203, 166, 167, 168, 1993, 1798,
	1138, 1139, 1135, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1150, 1149, 1151, 1152, 2083, 163, 1062, 1121, 1269, 1364,
	166, 167, 168, 2348, 1796, 796, 1124, 1064, 2188, 1373,
	1722, 1042, 2252, 1257, 1177, 1124, 1178, 2253, 150, 1039,
	81, 1877, 2464, 838, 1861, 2464, 2410, 2411, 1910, 1269,
	617, 1391, 1439, 1438, 1440, 1441, 1442, 1077, 2082, 1400,
	1979, 1470, 1105, 1402, 1403, 989, 617, 1009, 86, 86,
	1296, 1297, 77, 1408, 86, 1103, 1411, 1412, 163, 1414,
	86, 1104, 1313, 149, 2265, 2266, 151, 152, 1251, 1812,
	153, 154, 1048, 1910, 1885, 1274, 1895, 155, 156, 157,
	617, 1894, 163, 1122, 2641, 1123, 1241, 2642, 1124, 2640,
	1800, 1458, 2421, 98, 617, 793, 163, 1122, 791, 1123,
	1379, 1380, 1381, 1401, 1688, 1181, 1404, 1388, 166, 167,
	168, 163, 1794, 1407, 2649, 1273, 1881, 1124, 163, 1269,
	2016, 1383, 1122, 1405, 1123, 1413, 1880, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 617, 1399, 2265, 2264,
	1658, 1124, 617, 617, 1993, 1269, 1423, 1424, 1507, 1447,
	2016, 1428, 1455, 1225, 1226, 1227, 1228, 1229, 1298, 163,
	974, 1371, 1122, 973, 1123, 1276, 1122, 2494, 1123, 2482,
	2148, 1398, 2515, 1269, 1122, 1419, 1123, 1465, 1474, 1377,
	1917, 1386, 1390, 1385, 2417, 1478, 2208, 1269, 1877, 1269,
	1406, 1860, 2091, 1367, 2076, 1369, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1993, 617, 1124, 1558, 1558, 1269, 2299,
	1555, 1555, 1269, 1124, 1554, 1559, 2077, 1564, 617, 1993,
	1122, 1527, 1123, 1461, 1124, 1269, 1510, 1877, 1122, 1759,
	1123, 1758, 1124, 617, 617, 2072, 2073, 1534, 1525, 1536,
	121, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1535, 969, 968, 967, 2541, 1473, 1122,
	2394, 1123, 1475, 1446, 1617, 1477, 1269, 1479, 1480, 1481,
	1482, 1124, 1278, 149, 1486, 1392, 151, 152, 2331, 1269,
	153, 154, 1925, 1269, 1124, 2350, 1575, 155, 156, 157,
	1877, 1496, 1471, 1472, 2346, 1648, 163, 1500, 1501, 1365,
	617, 114, 1124, 1124, 1122, 1476, 1123, 1124, 1122, 1528,
	1123, 1124, 1483, 1484, 1485, 1122, 1617, 1123, 101, 2055,
	1122, 2054, 1123, 1124, 163, 2425, 1122, 617, 1123, 100,
	1122, 99, 1123, 1122, 1035, 1123, 163, 1972, 1971, 617,
	94, 2303, 1122, 163, 1123, 163, 87, 163, 163, 617,
	2504, 1650, 617, 1269, 1673, 1779, 1674, 149, 1367, 1366,
	151, 152, 2050, 617, 153, 154, 37, 1648, 1141, 95,
	1702, 155, 156, 157, 834, 2203, 1741, 834, 1652, 1653,
	1415, 1124, 1312, 1311, 1124, 2384, 2385, 95, 1671, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1150, 1149, 1151, 1152,
	1122, 1649, 1123, 1694, 2631, 1679, 2422, 2423, 2424, 1122,
	1698, 1123, 1704, 1124, 1124, 1510, 2629, 1705, 617, 1124,
	1755, 1756, 1757, 1650, 2614, 1789, 1790, 1791, 1498, 2554,
	1793, 1795, 1797, 1124, 2339, 2520, 1733, 2387, 617, 2279,
	1734, 2278, 2277, 617, 1400, 1284, 2017, 1400, 1745, 1400,
	1746, 1747, 1748, 1749, 1668, 617, 2019, 617, 2065, 1716,
	1981, 1822, 1845, 2338, 2390, 2604, 1760, 1761, 1762, 1763,
	2389, 1681, 1768, 1697, 617, 617, 2017, 2218, 2217, 988,
	1737, 723, 1122, 1774, 1123, 1695, 1860, 1934, 2221, 1420,
	1421, 1422, 838, 2222, 1721, 838, 2219, 163, 1720, 1736,
	2223, 2220, 2002, 2003, 163, 2575, 163, 163, 1735, 1685,
	163, 1122, 163, 1123, 1277, 1802, 1677, 2209, 2192, 163,
	1781, 1998, 2001, 2002, 2003, 1999, 163, 2000, 2004, 2471,
	783, 2470, 1819, 165, 1301, 1122, 165, 1123, 117, 165,
	1821, 817, 1807, 1537, 619, 1810, 165, 1811, 163, 2261,
	1820, 1933, 2033, 617, 165, 1769, 2058, 1824, 1825, 1932,
	1780, 1784, 1765, 1766, 1510, 1284, 1792, 102, 165, 1570,
	1931, 1838, 998, 1842, 1843, 1805, 165, 1847, 1930, 1809,
	1806, 997, 1769, 2313, 1571, 1271, 1850, 1267, 1263, 2054,
	2115, 619, 1094, 1853, 619, 165, 619, 1560, 2080, 1122,
	122, 1123, 1444, 1264, 1566, 1567, 1443, 1122, 1829, 1123,
	1434, 2201, 2637, 1267, 1263, 1856, 1527, 1929, 1122, 979,
	1123, 2275, 90, 1527, 1690, 1691, 1122, 1848, 1123, 1264,
	1928, 1870, 2055, 1872, 92, 2426, 2427, 2428, 1844, 101,
	2542, 94, 2499, 2260, 829, 93, 822, 1871, 1927, 1926,
	100, 2006, 99, 1920, 1682, 2365, 1651, 1919, 2191, 1654,
	1655, 94, 1269, 815, 816, 1122, 2190, 1123, 101, 1918,
	1851, 1852, 1864, 99, 2527, 1854, 2526, 2476, 1122, 100,
	1123, 99, 2280, 1799, 1855, 814, 1858, 100, 2475, 2371,
	1416, 1417, 1418, 1979, 2153, 1678, 1122, 1122, 1123, 1123,
	1036, 1122, 1896, 1123, 1528, 1122, 1669, 1123, 1869, 163,
	1292, 1528, 1141, 2121, 1285, 1875, 163, 1122, 2632, 1123,
	101, 1558, 617, 2633, 2632, 1555, 2633, 1915, 617, 1958,
	1914, 100, 1946, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1150, 1149, 1151, 1152, 1976, 2477, 1283, 1889, 107, 108,
	991, 994, 995, 1499, 617, 2405, 806, 104, 1001, 1913,
	1911, 39, 163, 88, 1, 1907, 163, 2409, 2590, 1962,
	1141, 1873, 595, 1659, 1242, 1122, 798, 1123, 1122, 1906,
	1123, 2026, 2615, 2586, 2009, 2587, 1436, 1987, 1650, 1903,
	1430, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1149,
	1151, 1152, 617, 2442, 1618, 2500, 1772, 1122, 1122, 1123,
	1123, 982, 1984, 1122, 128, 1123, 1731, 1732, 2570, 111,
	943, 110, 1969, 985, 1061, 1801, 2034, 1122, 1742, 1123,
	617, 1318, 1316, 2013, 1244, 1947, 163, 1956, 1649, 799,
	2036, 2038, 2469, 163, 1317, 1315, 1320, 2008, 1319, 1897,
	617, 2351, 1502, 614, 2005, 161, 1970, 2029, 1973, 1400,
	1400, 1998, 2001, 2002, 2003, 1999, 800, 2000, 2004, 1307,
	1975, 2384, 2385, 1286, 2088, 2044, 2018, 2014, 1007, 586,
	2021, 2267, 1827, 2087, 163, 163, 163, 163, 163, 1774,
	1675, 1676, 1266, 591, 1265, 163, 163, 2070, 1051, 1165,
	1497, 2189, 2030, 2063, 2022, 835, 828, 1670, 1960, 1989,
	2565, 163, 2031, 1280, 2474, 2049, 1260, 1261, 1266, 2370,
	1265, 1888, 1572, 1710, 1520, 641, 640, 2056, 638, 1963,
	1699, 1127, 617, 2086, 726, 2061, 1950, 1951, 2062, 2066,
	2067, 2068, 1293, 1997, 1995, 1994, 1846, 1717, 1383, 2386,
	2382, 2099, 2100, 2101, 2102, 2103, 2582, 2078, 2079, 1712,
	1708, 1967, 1510, 2108, 2085, 1966, 649, 1558, 642, 1558,
	792, 1555, 1558, 1555, 634, 2145, 1555, 1558, 2116, 2141,
	2402, 1555, 2287, 2094, 2123, 2300, 2096, 2032, 2296, 2124,
	1107, 617, 1259, 628, 956, 1569, 2505, 1863, 2335, 1258,
	1581, 2176, 2177, 2178, 2179, 1887, 2107, 2169, 2166, 1582,
	64, 42, 2170, 1609, 622, 2142, 2183, 2600, 2125, 163,
	1098, 32, 31, 617, 30, 29, 1558, 2164, 617, 2164,
	1555, 24, 2164, 23, 2197, 22, 21, 2164, 20, 26,
	19, 18, 17, 2610, 163, 163, 163, 163, 163, 2636,
	116, 2193, 51, 2183, 2157, 48, 163, 46, 125, 123,
	165, 163, 165, 49, 163, 165, 163, 45, 1037, 163,
	163, 163, 2211, 2171, 2172, 2173, 2174, 2175, 1692, 2199,
	43, 1937, 1938, 1256, 2009, 619, 4, 619, 2231, 2194,
	2113, 2184, 28, 2114, 27, 16, 2182, 15, 14, 13,
	12, 11, 619, 619, 1984, 10, 6, 5, 35, 2273,
	34, 33, 2195, 1101, 25, 2, 163, 0, 0, 2202,
	2185, 2186, 2187, 617, 0, 0, 0, 0, 617, 2213,
	2214, 0, 2216, 0, 0, 2212, 2233, 2224, 2215, 2234,
	95, 0, 0, 163, 0, 2235, 2228, 2229, 0, 0,
	0, 0, 1465, 2241, 0, 0, 0, 163, 0, 0,
	163, 2262, 2263, 0, 0, 0, 0, 0, 0, 0,
	2314, 0, 2269, 2289, 2288, 2284, 2270, 2268, 0, 0,
	0, 0, 0, 2276, 2271, 2272, 0, 2282, 0, 0,
	0, 0, 0, 1774, 0, 2283, 0, 0, 2294, 0,
	2281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2295, 0, 0, 2309, 2308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2307, 0, 0, 2310, 0, 0,
	2345, 0, 2316, 0, 0, 0, 0, 2317, 0, 617,
	163, 0, 2323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2320, 2321, 617,
	2322, 617, 0, 2324, 0, 2326, 165, 2328, 0, 619,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	37, 0, 0, 163, 2377, 165, 0, 0, 2366, 2367,
	0, 1987, 0, 0, 0, 1987, 2381, 0, 2379, 2388,
	2373, 2408, 619, 0, 2391, 0, 165, 2369, 0, 2375,
	163, 619, 2311, 2312, 0, 1984, 2395, 619, 2397, 2398,
	0, 0, 0, 0, 0, 163, 0, 0, 163, 163,
	163, 617, 0, 0, 0, 0, 0, 2289, 2288, 0,
	2403, 2404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2396, 617, 617, 617, 617, 2418, 0,
	2420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2438, 0, 0, 2416, 2433, 0,
	2436, 2437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2429, 0, 0, 2430, 2431, 2432, 1558, 0,
	1558, 0, 1555, 0, 1555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2448, 0, 0, 2447, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 2458, 2451, 2457, 0, 0,
	0, 0, 0, 0, 0, 0, 1558, 0, 0, 0,
	1555, 2467, 0, 0, 2484, 0, 0, 0, 2164, 0,
	2164, 619, 1987, 0, 792, 2478, 0, 0, 0, 2480,
	0, 0, 0, 0, 0, 0, 0, 619, 792, 159,
	0, 2486, 0, 2485, 0, 0, 2488, 0, 0, 165,
	1382, 0, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 142, 0, 0, 2496, 0,
	0, 619, 0, 165, 2517, 2518, 2497, 2502, 1558, 617,
	0, 2608, 1555, 617, 617, 619, 2521, 165, 0, 0,
	617, 1335, 0, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 617, 2531, 0, 0, 165,
	2528, 2529, 0, 0, 617, 163, 0, 2532, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 619, 0, 0,
	0, 0, 37, 619, 619, 0, 2543, 0, 0, 0,
	2535, 2534, 0, 0, 0, 0, 2538, 0, 0, 1984,
	165, 0, 2540, 0, 0, 617, 617, 0, 0, 0,
	0, 2546, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 0, 163, 617, 37, 2569, 0, 0, 2566,
	2502, 2571, 2547, 2578, 0, 0, 0, 0, 0, 0,
	0, 0, 2599, 2589, 2594, 619, 0, 2581, 0, 2603,
	0, 0, 0, 0, 0, 0, 0, 2609, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 1558, 0, 619, 619, 1555, 2622, 0, 0,
	2627, 2626, 2630, 2628, 2624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2638, 0, 0, 2644, 0,
	0, 0, 159, 0, 0, 0, 0, 0, 1558, 0,
	0, 0, 1555, 2652, 2653, 2518, 2650, 2651, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 619, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	619, 0, 0, 0, 165, 0, 165, 0, 165, 165,
	619, 0, 0, 619, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 148, 0,
	164, 0, 0, 164, 0, 0, 164, 0, 0, 619,
	0, 618, 0, 164, 136, 137, 135, 134, 158, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 619, 164, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 619, 0, 619, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 618, 164, 618, 0, 619, 619, 0, 0, 673,
	675, 674, 684, 685, 686, 687, 688, 689, 2493, 2489,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 1323, 0, 165, 0, 165, 165, 0,
	0, 165, 0, 165, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 130, 138, 140, 165, 0, 129,
	0, 131, 132, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 137, 135,
	134, 158, 0, 1349, 1352, 1353, 1354, 1355, 1356, 1357,
	0, 1358, 1359, 1360, 1361, 1362, 1337, 1338, 1339, 1340,
	1321, 1322, 1350, 0, 1324, 0, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 0, 0, 1334, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 165, 679, 680,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 619,
	0, 0, 133, 0, 0, 0, 0, 130, 138, 140,
	0, 0, 129, 0, 131, 132, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 143, 0, 165, 144, 0,
	0, 716, 0, 666, 720, 668, 717, 718, 0, 664,
	667, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 669, 670,
	672, 676, 677, 2490, 2491, 2492, 683, 691, 693, 694,
	692, 695, 696, 697, 700, 701, 702, 703, 698, 699,
	704, 619, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 0, 149, 0, 0, 151,
	152, 0, 0, 153, 154, 165, 165, 165, 165, 165,
	155, 156, 157, 0, 0, 0, 165, 165, 0, 0,
	0, 78, 40, 41, 80, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 44, 70, 71, 0, 68,
	72, 0, 0, 619, 0, 0, 616, 164, 0, 164,
	0, 0, 164, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 618,
	618, 144, 0, 836, 0, 0, 947, 0, 954, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 619, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 165, 165, 165, 165,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 165, 0, 0, 165, 69, 165, 0, 0,
	165, 165, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 151, 152, 0, 0, 153, 154, 0, 0,
	0, 0, 0, 155, 156, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 0, 618, 618, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 165, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 164, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 165, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 0, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 165,
	165, 165, 619, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 619, 619, 619, 619, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 47, 50, 53, 52, 55, 0,
	0, 67, 0, 0, 75, 0, 0, 0, 618, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 164, 0, 0, 56, 83, 82,
	0, 0, 65, 66, 54, 0, 0, 0, 0, 164,
	73, 74, 0, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 618, 0, 0, 0, 0, 0,
	618, 618, 0, 0, 0, 0, 0, 0, 0, 58,
	59, 0, 60, 61, 62, 63, 0, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 1097, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 0, 0, 0, 0, 0, 0,
	619, 0, 0, 0, 619, 619, 618, 0, 0, 0,
	0, 619, 0, 0, 619, 0, 0, 0, 0, 0,
	0, 618, 618, 0, 0, 0, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 619, 619, 0, 0,
	0, 0, 0, 0, 164, 1236, 0, 0, 618, 619,
	0, 0, 0, 0, 165, 619, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 0, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 618, 0, 0,
	0, 164, 0, 164, 0, 164, 164, 618, 0, 619,
	618, 1247, 1248, 0, 0, 0, 0, 0, 0, 0,
	0, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 0, 0, 0,
	0, 0, 164, 0, 164, 164, 0, 0, 164, 0,
	164, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 164, 0, 0, 0,
	0, 618, 0, 0, 0, 1236, 0, 0, 1236, 947,
	0, 0, 0, 0, 0, 1236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 836, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	582, 0, 0, 612, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 164, 582, 0,
	0, 0, 0, 0, 164, 0, 0, 1551, 0, 0,
	618, 0, 805, 0, 0, 0, 618, 0, 0, 0,
	582, 1565, 0, 0, 0, 0, 0, 0, 1236, 821,
	0, 821, 0, 0, 0, 0, 1579, 1580, 0, 582,
	0, 0, 618, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	1684, 164, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 1289, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 0,
	0, 0, 164, 164, 164, 164, 164, 0, 0, 0,
	0, 0, 0, 164, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	618, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 0,
	1551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1551, 1551, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 1323,
	0, 618, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 164, 164, 164, 164, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 164,
	0, 0, 164, 0, 164, 0, 1857, 164, 164, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 618, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 0, 164, 1349,
	1352, 1353, 1354, 1355, 1356, 1357, 0, 1358, 1359, 1360,
	1361, 1362, 1337, 1338, 1339, 1340, 1321, 1322, 1350, 0,
	1324, 0, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 0, 0, 1334, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 582, 0, 0, 582,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1684, 0, 618, 164, 0,
	0, 1964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 0, 618,
	0, 0, 0, 0, 1236, 0, 0, 1991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1351, 0, 164, 0,
	0, 0, 0, 0, 0, 2039, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 164, 164, 164, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2059, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 618, 618, 618, 0, 0, 0, 0,
	0, 0, 0, 1684, 0, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 0, 1551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1236,
	0, 1236, 0, 0, 1236, 0, 0, 0, 0, 1236,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 0, 0,
	0, 618, 618, 0, 0, 0, 0, 0, 618, 0,
	0, 618, 0, 0, 0, 0, 2196, 0, 0, 0,
	0, 836, 0, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 164, 0, 0, 1236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 164, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 0, 0,
	1237, 0, 0, 0, 0, 0, 947, 1237, 0, 1236,
	0, 1684, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 582, 0, 733, 79, 0, 0, 0,
	0, 0, 1487, 1488, 582, 582, 582, 582, 582, 582,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 2196, 0, 0, 0, 0, 0, 1576, 0,
	0, 0, 1577, 0, 0, 0, 0, 1236, 0, 0,
	0, 0, 2378, 0, 2380, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 0, 795, 821, 821, 0, 0, 0, 0,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 1270, 1657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1684, 0, 0, 0, 0, 0,
	0, 0, 0, 1680, 821, 1464, 821, 821, 821, 821,
	821, 0, 0, 0, 0, 0, 0, 2443, 2444, 2445,
	2446, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 1666, 727, 1557, 737, 738, 2292, 2293, 728, 730,
	0, 0, 729, 0, 0, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 739, 740, 0, 805,
	1236, 0, 1236, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 0, 0, 0, 0, 0, 1464, 582, 0,
	582, 0, 582, 1719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2290, 2291, 1783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2524, 0, 0, 0, 2524, 2524, 0, 0,
	0, 1236, 0, 2533, 0, 0, 1684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1684, 0,
	0, 0, 0, 0, 0, 0, 0, 1684, 0, 0,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 582,
	0, 582, 582, 0, 0, 582, 0, 1849, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 836, 836,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2579, 0, 0, 0, 0, 0, 2584, 0, 0,
	0, 0, 0, 582, 0, 0, 0, 0, 0, 632,
	0, 0, 1878, 0, 0, 0, 1882, 0, 1883, 1884,
	0, 0, 0, 0, 0, 0, 0, 1892, 0, 0,
	1893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	813, 2584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1898, 1899, 1900, 1901,
	1902, 0, 1904, 0, 0, 0, 0, 0, 1908, 0,
	1909, 0, 0, 0, 1912, 821, 0, 0, 0, 0,
	0, 0, 1921, 1922, 1923, 1924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1935, 1936, 0, 0, 0,
	0, 0, 0, 1941, 1942, 1943, 1944, 1945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 821, 821, 0, 0, 1990, 0, 0, 0, 0,
	0, 0, 1464, 0, 582, 0, 0, 0, 0, 0,
	0, 1666, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 1237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 582, 0, 0, 0, 0, 795, 1161, 1162, 1163,
	0, 1166, 0, 1168, 1169, 1170, 1171, 0, 1174, 1176,
	1176, 0, 1176, 1180, 1180, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 0, 1220, 1221, 1222, 1223, 1224, 0, 0,
	0, 582, 1180, 1180, 1180, 1180, 1180, 0, 2069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	582, 582, 582, 582, 0, 0, 0, 0, 0, 2152,
	582, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1246, 0, 0, 0, 582, 795, 2165, 0,
	0, 795, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 0, 2180,
	2181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1237, 0, 1237, 0, 0, 1237, 0, 0, 0,
	0, 1237, 0, 0, 0, 0, 0, 0, 0, 0,
	2206, 2207, 0, 0, 0, 821, 1959, 0, 0, 1557,
	737, 0, 0, 0, 0, 1556, 0, 0, 0, 2226,
	2227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1237, 582,
	582, 582, 582, 582, 0, 0, 0, 0, 0, 0,
	0, 2225, 0, 0, 0, 0, 582, 0, 0, 1666,
	0, 582, 0, 0, 582, 2236, 1464, 0, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	0, 582, 2315, 0, 1125, 0, 0, 0, 0, 2319,
	0, 1237, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2329, 2330, 2332, 2334, 0, 582, 0,
	0, 0, 1173, 2340, 0, 0, 2342, 2343, 2344, 0,
	0, 0, 582, 2347, 0, 582, 0, 0, 0, 2349,
	0, 0, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360,
	2361, 2362, 0, 0, 2363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 1089, 1089, 0,
	0, 0, 0, 0, 632, 0, 0, 0, 0, 0,
	2392, 2393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1557, 737, 0, 0, 0,
	0, 1556, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 582, 582, 582, 0, 0, 0, 0,
	0, 0, 0, 2455, 0, 0, 0, 2456, 0, 0,
	0, 0, 0, 2460, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 0, 0, 0, 0,
	0, 0, 1237, 0, 1237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1703,
	0, 0, 1711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2498, 0, 0,
	0, 0, 0, 0, 0, 0, 1370, 0, 0, 0,
	0, 2508, 2509, 2510, 0, 2511, 2512, 0, 0, 2513,
	0, 2514, 0, 2516, 2519, 0, 0, 0, 0, 0,
	2523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2539,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 2553,
	0, 0, 0, 0, 2558, 0, 0, 0, 0, 0,
	2559, 2560, 0, 1237, 0, 0, 0, 0, 2562, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2605, 0, 0, 0, 2606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 1517, 1518, 0, 0, 0, 1666, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1865, 0, 0, 0, 0,
	0, 0, 0, 1562, 1563, 0, 0, 0, 0, 0,
	0, 1568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1603, 1604, 1605, 1606,
	1607, 1608, 1610, 1614, 1615, 632, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1686,
	1687, 87, 0, 0, 1939, 0, 0, 727, 1557, 737,
	738, 2292, 2293, 728, 730, 0, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1728, 0, 0,
	732, 739, 740, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1988, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 2010, 0, 2011,
	2012, 0, 0, 0, 0, 2290, 2291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1770, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 720, 0, 717, 718, 0, 0,
	0, 719, 0, 0, 1711, 0, 0, 0, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1711,
	1711, 1711, 1711, 1711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2010, 795, 0, 0,
	0, 1711, 0, 0, 1711, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1988, 0, 79, 0, 1988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2120, 0, 1711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2401, 0, 0, 0, 0, 2143, 2144, 0, 0,
	0, 2147, 0, 0, 0, 2149, 2150, 2151, 0, 0,
	0, 0, 0, 0, 0, 0, 2154, 2155, 2156, 0,
	0, 1621, 2158, 0, 2159, 2160, 0, 0, 0, 2167,
	2168, 0, 0, 0, 0, 0, 0, 1621, 1621, 1621,
	1621, 1621, 632, 632, 632, 632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2200, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2468, 0, 2472, 2473, 0, 0, 0, 0, 0, 0,
	0, 0, 1988, 2230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1184, 1191, 1194, 1195, 1203,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2337,
	0, 0, 0, 0, 2341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2563, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2449, 0, 2450, 0, 0, 0, 0, 2453,
	2454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2481, 0, 0, 2483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2495, 0,
	313, 524, 242, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 1645, 0, 650, 0, 0, 0, 0,
	655, 468, 345, 0, 333, 0, 198, 0, 1646, 401,
	285, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2530, 632, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 2552, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 662,
	0, 367, 529, 471, 358, 0, 0, 0, 0, 0,
	657, 658, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 225, 0, 0, 373, 0, 266, 0, 87, 0,
	0, 166, 167, 168, 727, 736, 737, 738, 735, 734,
	728, 730, 0, 0, 729, 216, 673, 675, 674, 684,
	685, 686, 687, 688, 689, 690, 671, 732, 739, 740,
	384, 250, 300, 257, 249, 497, 0, 487, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	633, 647, 191, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 645, 819, 0, 0, 0, 710, 0,
	646, 0, 0, 654, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 656, 0, 0, 0,
	0, 179, 254, 437, 0, 0, 174, 0, 0, 0,
	235, 0, 709, 0, 305, 534, 0, 0, 707, 0,
	0, 0, 0, 0, 0, 306, 173, 200, 0, 0,
	372, 0, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 679, 680, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 263,
	0, 0, 0, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 0, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 0, 438, 215, 517, 465, 716, 708,
	666, 720, 668, 717, 718, 663, 664, 667, 719, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 711, 653,
	652, 0, 659, 660, 0, 669, 670, 672, 676, 677,
	678, 681, 682, 683, 691, 693, 694, 692, 695, 696,
	697, 700, 701, 702, 703, 698, 699, 704, 651, 0,
	194, 335, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 289, 290, 329, 0,
	0, 0, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 0, 0, 0, 281, 0, 0, 343,
	0, 0, 0, 261, 313, 524, 242, 0, 0, 0,
	0, 0, 196, 220, 0, 0, 0, 0, 0, 650,
	0, 405, 0, 0, 655, 468, 345, 0, 333, 0,
	198, 486, 0, 401, 285, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 662, 0, 367, 529, 471, 358, 0,
	0, 0, 0, 0, 657, 658, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 225, 0, 0, 373, 0,
	266, 0, 87, 0, 0, 166, 167, 168, 727, 736,
	737, 738, 735, 734, 728, 730, 0, 0, 729, 216,
	673, 675, 674, 684, 685, 686, 687, 688, 689, 690,
	671, 732, 739, 740, 384, 250, 300, 257, 249, 497,
	0, 487, 1611, 1612, 1613, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 633, 647, 191, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 645, 0, 0,
	0, 0, 710, 0, 646, 0, 0, 654, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	656, 0, 0, 0, 0, 179, 254, 437, 0, 0,
	174, 0, 0, 0, 235, 0, 709, 0, 305, 534,
	0, 0, 707, 0, 0, 0, 0, 0, 0, 306,
	173, 200, 0, 0, 372, 0, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 506, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 205, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 679,
	680, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 263, 0, 0, 0, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 0, 0, 0,
	362, 286, 467, 319, 340, 426, 542, 0, 438, 215,
	517, 465, 716, 708, 666, 720, 668, 717, 718, 663,
	664, 667, 719, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 711, 653, 652, 0, 659, 660, 0, 669,
	670, 672, 676, 677, 678, 681, 682, 683, 691, 693,
	694, 692, 695, 696, 697, 700, 701, 702, 703, 698,
	699, 704, 651, 0, 194, 335, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	289, 290, 329, 0, 0, 0, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 0, 0, 0,
	281, 0, 0, 343, 0, 78, 0, 261, 313, 524,
	242, 0, 0, 0, 0, 0, 196, 220, 0, 0,
	0, 0, 0, 650, 0, 405, 0, 0, 655, 468,
	345, 0, 333, 0, 198, 486, 0, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 662, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 657, 658,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 87, 0, 0, 166,
	167, 168, 727, 736, 737, 738, 735, 734, 728, 730,
	0, 0, 729, 216, 673, 675, 674, 684, 685, 686,
	687, 688, 689, 690, 671, 732, 739, 740, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 633, 647,
	191, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	644, 645, 0, 0, 0, 0, 710, 0, 646, 0,
	0, 654, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 656, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	709, 0, 305, 534, 0, 0, 707, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 679, 680, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 716, 708, 666, 720,
	668, 717, 718, 663, 664, 667, 719, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 711, 653, 652, 0,
	659, 660, 0, 669, 670, 672, 676, 677, 678, 681,
	682, 683, 691, 693, 694, 692, 695, 696, 697, 700,
	701, 702, 703, 698, 699, 704, 651, 0, 194, 335,
	86, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 0, 0, 0, 281, 0, 0, 343, 0, 0,
	0, 261, 313, 524, 242, 0, 0, 0, 0, 0,
	196, 220, 0, 0, 0, 0, 0, 650, 0, 405,
	0, 0, 655, 468, 345, 0, 333, 0, 198, 486,
	0, 401, 285, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 170, 171, 172, 177, 178, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 195, 197, 199, 202, 203,
	206, 207, 208, 209, 210, 213, 217, 218, 219, 221,
	222, 223, 224, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 227, 228, 229, 230, 231, 232, 236,
	238, 239, 240, 243, 244, 245, 246, 247, 248, 251,
	252, 255, 258, 259, 265, 270, 271, 272, 274, 275,
	276, 282, 284, 287, 288, 291, 293, 295, 297, 298,
	299, 301, 302, 303, 304, 307, 308, 309, 310, 311,
	312, 314, 322, 323, 325, 326, 327, 328, 331, 334,
	336, 338, 339, 341, 342, 344, 347, 348, 350, 351,
	354, 355, 357, 360, 363, 366, 368, 369, 370, 371,
	374, 375, 376, 377, 379, 382, 385, 387, 388, 390,
	393, 395, 396, 397, 398, 399, 400, 404, 407, 408,
	409, 410, 412, 414, 415, 416, 418, 420, 421, 422,
	423, 424, 425, 428, 429, 431, 432, 433, 434, 435,
	440, 441, 444, 445, 446, 449, 450, 451, 452, 453,
	454, 456, 459, 460, 464, 466, 469, 470, 476, 477,
	479, 480, 482, 483, 484, 485, 488, 490, 491, 493,
	494, 498, 499, 500, 507, 508, 512, 513, 514, 515,
	518, 519, 520, 521, 522, 523, 525, 526, 527, 528,
	532, 533, 535, 536, 537, 538, 541, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 662, 0, 367, 529, 471, 358, 0, 0, 0,
	0, 0, 657, 658, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 225, 0, 0, 373, 0, 266, 0,
	87, 0, 1269, 166, 167, 168, 727, 736, 737, 738,
	735, 734, 728, 730, 0, 0, 729, 216, 673, 675,
	674, 684, 685, 686, 687, 688, 689, 690, 671, 732,
	739, 740, 384, 250, 300, 257, 249, 497, 0, 487,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 633, 647, 191, 661, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 645, 0, 0, 0, 0,
	710, 0, 646, 0, 0, 654, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 656, 0,
	0, 0, 0, 179, 254, 437, 0, 0, 174, 0,
	0, 0, 235, 0, 709, 0, 305, 534, 0, 0,
	707, 0, 0, 0, 0, 0, 0, 306, 173, 200,
	0, 0, 372, 0, 443, 472, 0, 269, 0, 262,
	0, 0, 511, 211, 0, 0, 0, 0, 413, 267,
	352, 403, 0, 0, 0, 419, 509, 0, 0, 0,
	361, 0, 0, 0, 0, 201, 241, 389, 478, 0,
	463, 353, 501, 0, 318, 462, 277, 176, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 481, 506,
	214, 448, 455, 436, 540, 193, 0, 475, 0, 315,
	316, 192, 0, 427, 253, 0, 0, 381, 504, 505,
	0, 555, 204, 531, 0, 205, 0, 364, 502, 0,
	0, 0, 0, 0, 0, 0, 320, 679, 680, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 263, 0, 0, 0, 283, 0, 0, 0, 0,
	417, 0, 458, 496, 0, 0, 0, 0, 362, 286,
	467, 319, 340, 426, 542, 0, 438, 215, 517, 465,
	716, 708, 666, 720, 668, 717, 718, 663, 664, 667,
	719, 234, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 356, 0, 0, 359, 0, 461, 0, 0, 0,
	711, 653, 652, 0, 659, 660, 0, 669, 670, 672,
	676, 677, 678, 681, 682, 683, 691, 693, 694, 692,
	695, 696, 697, 700, 701, 702, 703, 698, 699, 704,
	651, 0, 194, 335, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 289, 290,
	329, 0, 0, 0, 0, 0, 0, 383, 394, 0,
	0, 430, 0, 495, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 279, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 365, 0,
	378, 380, 0, 386, 0, 391, 0, 392, 402, 406,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 447, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 503, 516, 0, 0, 0, 281, 0,
	0, 343, 0, 0, 0, 261, 313, 524, 242, 0,
	0, 0, 0, 0, 196, 220, 0, 0, 0, 0,
	0, 650, 0, 405, 0, 0, 655, 468, 345, 0,
	333, 0, 198, 486, 0, 401, 285, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 172, 177, 178,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 195,
	197, 199, 202, 203, 206, 207, 208, 209, 210, 213,
	217, 218, 219, 221, 222, 223, 224, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 227, 228, 229,
	230, 231, 232, 236, 238, 239, 240, 243, 244, 245,
	246, 247, 248, 251, 252, 255, 258, 259, 265, 270,
	271, 272, 274, 275, 276, 282, 284, 287, 288, 291,
	293, 295, 297, 298, 299, 301, 302, 303, 304, 307,
	308, 309, 310, 311, 312, 314, 322, 323, 325, 326,
	327, 328, 331, 334, 336, 338, 339, 341, 342, 344,
	347, 348, 350, 351, 354, 355, 357, 360, 363, 366,
	368, 369, 370, 371, 374, 375, 376, 377, 379, 382,
	385, 387, 388, 390, 393, 395, 396, 397, 398, 399,
	400, 404, 407, 408, 409, 410, 412, 414, 415, 416,
	418, 420, 421, 422, 423, 424, 425, 428, 429, 431,
	432, 433, 434, 435, 440, 441, 444, 445, 446, 449,
	450, 451, 452, 453, 454, 456, 459, 460, 464, 466,
	469, 470, 476, 477, 479, 480, 482, 483, 484, 485,
	488, 490, 491, 493, 494, 498, 499, 500, 507, 508,
	512, 513, 514, 515, 518, 519, 520, 521, 522, 523,
	525, 526, 527, 528, 532, 533, 535, 536, 537, 538,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 662, 0, 367, 529, 471,
	358, 0, 0, 0, 0, 0, 657, 658, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 225, 0, 0,
	373, 0, 266, 0, 87, 0, 0, 166, 167, 168,
	727, 736, 737, 738, 735, 734, 728, 730, 0, 0,
	729, 216, 673, 675, 674, 684, 685, 686, 687, 688,
	689, 690, 671, 732, 739, 740, 384, 250, 300, 257,
	249, 497, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 633, 647, 191, 661,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 644, 645,
	819, 0, 0, 0, 710, 0, 646, 0, 0, 654,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 656, 0, 0, 0, 0, 179, 254, 437,
	0, 0, 174, 0, 0, 0, 235, 0, 709, 0,
	305, 534, 0, 0, 707, 0, 0, 0, 0, 0,
	0, 306, 173, 200, 0, 0, 372, 0, 443, 472,
	0, 269, 0, 262, 0, 0, 511, 211, 0, 0,
	0, 0, 413, 267, 352, 403, 0, 0, 0, 419,
	509, 0, 0, 0, 361, 0, 0, 0, 0, 201,
	241, 389, 478, 0, 463, 353, 501, 0, 318, 462,
	277, 176, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 481, 506, 214, 448, 455, 436, 540, 193,
	0, 475, 0, 315, 316, 192, 0, 427, 253, 0,
	0, 381, 504, 505, 0, 555, 204, 531, 0, 205,
	0, 364, 502, 0, 0, 0, 0, 0, 0, 0,
	320, 679, 680, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 263, 0, 0, 0, 283,
	0, 0, 0, 0, 417, 0, 458, 496, 0, 0,
	0, 0, 362, 286, 467, 319, 340, 426, 542, 0,
	438, 215, 517, 465, 716, 708, 666, 720, 668, 717,
	718, 663, 664, 667, 719, 234, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 356, 0, 0, 359, 0,
	461, 0, 0, 0, 711, 653, 652, 0, 659, 660,
	0, 669, 670, 672, 676, 677, 678, 681, 682, 683,
	691, 693, 694, 692, 695, 696, 697, 700, 701, 702,
	703, 698, 699, 704, 651, 0, 194, 335, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 289, 290, 329, 0, 0, 0, 0, 0,
	0, 383, 394, 0, 0, 430, 0, 495, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	279, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 365, 0, 378, 380, 0, 386, 0, 391,
	0, 392, 402, 406, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 447, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 503, 516, 0,
	0, 0, 281, 0, 0, 343, 0, 0, 0, 261,
	313, 524, 242, 0, 0, 0, 0, 0, 196, 220,
	0, 0, 0, 0, 0, 650, 0, 405, 0, 0,
	655, 468, 345, 0, 333, 0, 198, 486, 0, 401,
	285, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 662,
	0, 367, 529, 471, 358, 0, 0, 0, 0, 0,
	657, 658, 0, 0, 0, 0, 0, 280, 1726, 0,
	0, 225, 0, 0, 373, 0, 266, 0, 87, 0,
	0, 166, 167, 168, 727, 736, 737, 738, 735, 734,
	728, 730, 0, 0, 729, 216, 673, 675, 674, 684,
	685, 686, 687, 688, 689, 690, 671, 732, 739, 740,
	1727, 250, 300, 257, 249, 497, 0, 487, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	633, 647, 191, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 645, 0, 0, 0, 0, 710, 0,
	646, 0, 0, 654, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 656, 0, 0, 0,
	0, 179, 254, 437, 0, 0, 174, 0, 0, 0,
	235, 0, 709, 0, 305, 534, 0, 0, 707, 0,
	0, 0, 0, 0, 0, 306, 173, 200, 0, 0,
	372, 0, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 679, 680, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 263,
	0, 0, 0, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 0, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 0, 438, 215, 517, 465, 716, 708,
	666, 720, 668, 717, 718, 663, 664, 667, 719, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 711, 653,
	652, 0, 659, 660, 0, 669, 670, 672, 676, 677,
	678, 681, 682, 683, 691, 693, 694, 692, 695, 696,
	697, 700, 701, 702, 703, 698, 699, 704, 651, 0,
	194, 335, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 289, 290, 329, 0,
	0, 0, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 0, 0, 0, 281, 0, 0, 343,
	0, 0, 0, 261, 313, 524, 242, 0, 0, 0,
	0, 0, 196, 220, 0, 0, 0, 0, 0, 650,
	0, 405, 0, 0, 655, 468, 345, 0, 333, 0,
	198, 486, 0, 401, 285, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 662, 0, 367, 529, 471, 358, 0,
	0, 0, 0, 0, 657, 658, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 225, 0, 0, 373, 0,
	266, 0, 87, 0, 0, 166, 167, 168, 727, 736,
	737, 738, 735, 734, 728, 730, 0, 0, 729, 216,
	673, 675, 674, 684, 685, 686, 687, 688, 689, 690,
	671, 732, 739, 740, 384, 250, 300, 257, 249, 497,
	0, 487, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 633, 647, 191, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 645, 0, 0,
	0, 0, 710, 0, 646, 0, 0, 654, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	656, 0, 0, 0, 0, 179, 254, 437, 0, 0,
	174, 0, 0, 0, 235, 0, 709, 0, 305, 534,
	0, 0, 707, 0, 0, 0, 0, 0, 0, 306,
	173, 200, 0, 0, 372, 0, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 506, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 205, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 679,
	680, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 263, 0, 0, 0, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 0, 0, 0,
	362, 286, 467, 319, 340, 426, 542, 0, 438, 215,
	517, 465, 716, 708, 666, 720, 668, 717, 718, 663,
	664, 667, 719, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 711, 653, 652, 0, 659, 660, 0, 669,
	670, 672, 676, 677, 678, 681, 682, 683, 691, 693,
	694, 692, 695, 696, 697, 700, 701, 702, 703, 698,
	699, 704, 651, 0, 194, 335, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	289, 290, 329, 0, 0, 0, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 0, 0, 0,
	281, 0, 0, 343, 0, 0, 0, 261, 313, 524,
	242, 0, 0, 0, 0, 0, 196, 220, 0, 0,
	0, 0, 0, 650, 0, 405, 0, 0, 655, 468,
	345, 0, 333, 0, 198, 486, 0, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 662, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 657, 658,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 87, 0, 0, 166,
	167, 168, 727, 736, 737, 738, 735, 734, 728, 730,
	0, 0, 729, 216, 673, 675, 674, 684, 685, 686,
	687, 688, 689, 690, 671, 732, 739, 740, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 647,
	191, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	644, 645, 0, 0, 0, 0, 710, 0, 646, 0,
	0, 654, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 656, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	709, 0, 305, 534, 0, 0, 707, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 679, 680, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 716, 708, 666, 720,
	668, 717, 718, 663, 664, 667, 719, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 711, 653, 652, 0,
	659, 660, 0, 669, 670, 672, 676, 677, 678, 681,
	682, 683, 691, 693, 694, 692, 695, 696, 697, 700,
	701, 702, 703, 698, 699, 704, 651, 0, 194, 335,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 0, 0, 0, 281, 0, 0, 343, 0, 0,
	0, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 0, 0, 0, 0, 932, 920, 0, 486,
	313, 524, 242, 883, 939, 886, 887, 912, 196, 901,
	908, 880, 840, 873, 846, 268, 847, 872, 893, 0,
	870, 468, 345, 0, 333, 874, 198, 858, 0, 401,
	285, 180, 844, 848, 849, 859, 863, 865, 866, 871,
	879, 882, 885, 888, 890, 892, 895, 906, 914, 915,
	921, 922, 923, 924, 925, 927, 936, 937, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 530,
	0, 367, 529, 471, 358, 0, 0, 0, 896, 0,
	899, 919, 891, 913, 862, 904, 0, 280, 909, 935,
	0, 225, 0, 0, 373, 0, 266, 0, 0, 0,
	0, 166, 167, 168, 0, 2572, 0, 2573, 278, 237,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 273, 907, 931, 878,
	384, 250, 300, 257, 249, 497, 0, 487, 851, 898,
	930, 0, 0, 0, 933, 332, 0, 911, 0, 843,
	905, 0, 191, 852, 938, 928, 875, 876, 0, 0,
	0, 0, 0, 0, 0, 894, 900, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 855, 850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	861, 179, 254, 437, 842, 841, 174, 0, 0, 0,
	235, 0, 457, 926, 305, 534, 929, 0, 296, 916,
	857, 0, 0, 0, 854, 306, 173, 200, 860, 881,
	372, 917, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 0, 0, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 212, 0, 0, 263,
	0, 0, 884, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 934, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 910, 438, 215, 517, 465, 868, 233,
	864, 0, 867, 902, 903, 869, 0, 0, 0, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 439, 0,
	853, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	510, 321, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	194, 335, 941, 0, 0, 539, 0, 0, 845, 0,
	0, 0, 0, 256, 877, 0, 289, 290, 329, 0,
	0, 897, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 940, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 0, 0, 918, 281, 0, 0, 343,
	0, 0, 0, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 0, 0, 0, 0, 932, 920,
	0, 486, 313, 524, 242, 883, 939, 886, 887, 912,
	196, 901, 908, 880, 840, 873, 846, 268, 847, 872,
	893, 0, 870, 468, 345, 0, 333, 874, 198, 858,
	0, 401, 285, 180, 844, 848, 849, 859, 863, 865,
	866, 871, 879, 882, 885, 888, 890, 892, 895, 906,
	914, 915, 921, 922, 923, 924, 925, 927, 936, 937,
	169, 170, 171, 172, 177, 178, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 195, 197, 199, 202, 203,
	206, 207, 208, 209, 210, 213, 217, 218, 219, 221,
	222, 223, 224, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 227, 228, 229, 230, 231, 232, 236,
	238, 239, 240, 243, 244, 245, 246, 247, 248, 251,
	252, 255, 258, 259, 265, 270, 271, 272, 274, 275,
	276, 282, 284, 287, 288, 291, 293, 295, 297, 298,
	299, 301, 302, 303, 304, 307, 308, 309, 310, 311,
	312, 314, 322, 323, 325, 326, 327, 328, 331, 334,
	336, 338, 339, 341, 342, 344, 347, 348, 350, 351,
	354, 355, 357, 360, 363, 366, 368, 369, 370, 371,
	374, 375, 376, 377, 379, 382, 385, 387, 388, 390,
	393, 395, 396, 397, 398, 399, 400, 404, 407, 408,
	409, 410, 412, 414, 415, 416, 418, 420, 421, 422,
	423, 424, 425, 428, 429, 431, 432, 433, 434, 435,
	440, 441, 444, 445, 446, 449, 450, 451, 452, 453,
	454, 456, 459, 460, 464, 466, 469, 470, 476, 477,
	479, 480, 482, 483, 484, 485, 488, 490, 491, 493,
	494, 498, 499, 500, 507, 508, 512, 513, 514, 515,
	518, 519, 520, 521, 522, 523, 525, 526, 527, 528,
	532, 533, 535, 536, 537, 538, 541, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 530, 0, 367, 529, 471, 358, 0, 0, 0,
	896, 0, 899, 919, 891, 913, 862, 904, 0, 280,
	909, 935, 0, 225, 0, 0, 373, 0, 266, 0,
	0, 0, 0, 166, 167, 168, 0, 489, 0, 0,
	278, 237, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 273, 907,
	931, 878, 384, 250, 300, 257, 249, 497, 0, 487,
	851, 898, 930, 0, 0, 0, 933, 332, 0, 911,
	0, 843, 905, 0, 191, 852, 938, 928, 875, 876,
	0, 0, 0, 0, 0, 0, 0, 894, 900, 0,
	889, 0, 0, 0, 0, 0, 2237, 0, 0, 0,
	0, 0, 0, 0, 855, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 861, 179, 254, 437, 842, 841, 174, 0,
	0, 0, 235, 0, 457, 926, 305, 534, 929, 0,
	296, 916, 857, 0, 0, 0, 854, 306, 173, 200,
	860, 881, 372, 917, 443, 472, 0, 269, 0, 262,
	0, 0, 511, 211, 0, 0, 0, 0, 413, 267,
	352, 403, 0, 0, 0, 419, 509, 0, 0, 0,
	361, 0, 0, 0, 0, 201, 241, 389, 478, 0,
	463, 353, 501, 0, 318, 462, 277, 176, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 481, 506,
	214, 448, 455, 436, 540, 193, 0, 475, 0, 315,
	316, 192, 0, 427, 253, 0, 0, 381, 504, 505,
	0, 555, 204, 531, 0, 205, 0, 364, 502, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 0, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 212, 0,
	0, 263, 0, 0, 884, 283, 0, 0, 0, 0,
	417, 0, 458, 496, 0, 934, 0, 0, 362, 286,
	467, 319, 340, 426, 542, 910, 438, 215, 517, 465,
	868, 233, 864, 0, 867, 902, 903, 869, 0, 0,
	0, 234, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 356, 0, 0, 359, 0, 461, 0, 0, 0,
	439, 0, 853, 0, 492, 0, 0, 0, 0, 0,
	0, 0, 510, 321, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 194, 335, 941, 0, 0, 539, 0, 0,
	845, 0, 0, 0, 0, 256, 877, 0, 289, 290,
	329, 0, 0, 897, 0, 0, 0, 383, 394, 0,
	0, 430, 0, 495, 940, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 279, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 365, 0,
	378, 380, 0, 386, 0, 391, 0, 392, 402, 406,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 447, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 503, 516, 0, 0, 918, 281, 0,
	0, 343, 0, 0, 0, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 0, 0, 0, 0,
	932, 920, 0, 486, 313, 524, 242, 883, 939, 886,
	887, 912, 196, 901, 908, 880, 840, 873, 846, 268,
	847, 872, 893, 0, 870, 468, 345, 0, 333, 874,
	198, 858, 0, 401, 285, 180, 844, 848, 849, 859,
	863, 865, 866, 871, 879, 882, 885, 888, 890, 892,
	895, 906, 914, 915, 921, 922, 923, 924, 925, 927,
	936, 937, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 530, 0, 367, 529, 471, 358, 0,
	0, 0, 896, 0, 899, 919, 891, 913, 862, 904,
	0, 280, 909, 935, 0, 225, 0, 0, 373, 0,
	266, 0, 0, 0, 0, 166, 167, 168, 0, 489,
	0, 0, 278, 237, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	273, 907, 931, 878, 384, 250, 300, 257, 249, 497,
	0, 487, 851, 898, 930, 0, 0, 0, 933, 332,
	0, 911, 0, 843, 905, 0, 191, 852, 938, 928,
	875, 876, 0, 0, 0, 0, 0, 0, 0, 894,
	900, 0, 889, 0, 0, 0, 0, 0, 2198, 0,
	0, 0, 0, 0, 0, 0, 855, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 861, 179, 254, 437, 842, 841,
	174, 0, 0, 0, 235, 0, 457, 926, 305, 534,
	929, 0, 296, 916, 857, 0, 0, 0, 854, 306,
	173, 200, 860, 881, 372, 917, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 506, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 205, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	212, 0, 0, 263, 0, 0, 884, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 934, 0, 0,
	362, 286, 467, 319, 340, 426, 542, 910, 438, 215,
	517, 465, 868, 233, 864, 0, 867, 902, 903, 869,
	0, 0, 0, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 439, 0, 853, 0, 492, 0, 0, 0,
	0, 0, 0, 0, 510, 321, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 194, 335, 941, 0, 0, 539,
	0, 0, 845, 0, 0, 0, 0, 256, 877, 0,
	289, 290, 329, 0, 0, 897, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 940, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 0, 0, 918,
	281, 0, 0, 343, 0, 0, 0, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 0, 0,
	0, 0, 932, 920, 0, 486, 313, 524, 242, 883,
	939, 886, 887, 912, 196, 901, 908, 880, 840, 873,
	846, 268, 847, 872, 893, 0, 870, 468, 345, 0,
	333, 874, 198, 858, 0, 401, 285, 180, 844, 848,
	849, 859, 863, 865, 866, 871, 879, 882, 885, 888,
	890, 892, 895, 906, 914, 915, 921, 922, 923, 924,
	925, 927, 936, 937, 169, 170, 171, 172, 177, 178,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 195,
	197, 199, 202, 203, 206, 207, 208, 209, 210, 213,
	217, 218, 219, 221, 222, 223, 224, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 227, 228, 229,
	230, 231, 232, 236, 238, 239, 240, 243, 244, 245,
	246, 247, 248, 251, 252, 255, 258, 259, 265, 270,
	271, 272, 274, 275, 276, 282, 284, 287, 288, 291,
	293, 295, 297, 298, 299, 301, 302, 303, 304, 307,
	308, 309, 310, 311, 312, 314, 322, 323, 325, 326,
	327, 328, 331, 334, 336, 338, 339, 341, 342, 344,
	347, 348, 350, 351, 354, 355, 357, 360, 363, 366,
	368, 369, 370, 371, 374, 375, 376, 377, 379, 382,
	385, 387, 388, 390, 393, 395, 396, 397, 398, 399,
	400, 404, 407, 408, 409, 410, 412, 414, 415, 416,
	418, 420, 421, 422, 423, 424, 425, 428, 429, 431,
	432, 433, 434, 435, 440, 441, 444, 445, 446, 449,
	450, 451, 452, 453, 454, 456, 459, 460, 464, 466,
	469, 470, 476, 477, 479, 480, 482, 483, 484, 485,
	488, 490, 491, 493, 494, 498, 499, 500, 507, 508,
	512, 513, 514, 515, 518, 519, 520, 521, 522, 523,
	525, 526, 527, 528, 532, 533, 535, 536, 537, 538,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 530, 0, 367, 529, 471,
	358, 0, 0, 0, 896, 0, 899, 919, 891, 913,
	862, 904, 0, 280, 909, 935, 0, 225, 0, 0,
	373, 0, 266, 0, 0, 0, 0, 166, 167, 168,
	0, 489, 0, 0, 278, 237, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 273, 907, 931, 878, 384, 250, 300, 257,
	249, 497, 0, 487, 851, 898, 930, 0, 0, 606,
	933, 332, 0, 911, 0, 843, 905, 0, 191, 852,
	938, 928, 875, 876, 0, 0, 0, 0, 0, 0,
	0, 894, 900, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 861, 179, 254, 437,
	842, 841, 174, 0, 0, 0, 235, 0, 457, 926,
	305, 534, 929, 0, 296, 916, 857, 0, 0, 0,
	854, 306, 173, 200, 860, 881, 372, 917, 443, 472,
	0, 269, 0, 262, 0, 0, 511, 211, 0, 0,
	0, 0, 413, 267, 352, 403, 0, 0, 0, 419,
	509, 0, 0, 0, 361, 0, 0, 0, 0, 201,
	241, 389, 478, 0, 463, 353, 501, 0, 318, 462,
	277, 176, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 481, 506, 214, 448, 455, 436, 540, 193,
	0, 475, 0, 315, 316, 192, 0, 427, 253, 0,
	0, 381, 504, 505, 0, 555, 204, 531, 0, 942,
	0, 364, 502, 0, 0, 0, 0, 0, 0, 0,
	320, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 212, 0, 0, 263, 0, 0, 884, 283,
	0, 0, 0, 0, 417, 0, 458, 496, 0, 934,
	0, 0, 839, 833, 832, 319, 340, 426, 542, 910,
	438, 215, 517, 465, 868, 233, 864, 0, 867, 902,
	903, 869, 0, 0, 0, 234, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 356, 0, 0, 359, 0,
	461, 0, 0, 0, 439, 0, 853, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 510, 321, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 0, 194, 335, 941, 0,
	0, 539, 0, 0, 845, 0, 0, 0, 0, 256,
	877, 0, 289, 290, 329, 0, 0, 897, 0, 0,
	0, 383, 394, 0, 0, 430, 0, 495, 940, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	279, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 365, 0, 378, 380, 0, 386, 0, 391,
	0, 392, 402, 406, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 447, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 503, 516, 0,
	0, 918, 281, 0, 0, 343, 0, 0, 0, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	0, 0, 0, 0, 932, 920, 0, 486, 313, 524,
	242, 883, 939, 886, 887, 912, 196, 901, 908, 880,
	840, 873, 846, 268, 847, 872, 893, 0, 870, 468,
	345, 0, 333, 874, 198, 858, 0, 401, 285, 180,
	844, 848, 849, 859, 863, 865, 866, 871, 879, 882,
	885, 888, 890, 892, 895, 906, 914, 915, 921, 922,
	923, 924, 925, 927, 936, 937, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 530, 0, 367,
	529, 471, 358, 0, 0, 0, 896, 0, 899, 919,
	891, 913, 862, 904, 0, 280, 909, 935, 0, 225,
	0, 0, 373, 0, 266, 0, 0, 0, 0, 166,
	167, 168, 0, 489, 0, 0, 278, 237, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 273, 907, 931, 878, 384, 250,
	300, 257, 249, 497, 0, 487, 851, 898, 930, 0,
	0, 0, 933, 332, 0, 911, 0, 843, 905, 0,
	191, 852, 938, 928, 875, 876, 0, 0, 0, 0,
	0, 0, 0, 894, 900, 0, 889, 0, 0, 0,
	0, 0, 1696, 0, 0, 0, 0, 0, 0, 0,
	855, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 861, 179,
	254, 437, 842, 841, 174, 0, 0, 0, 235, 0,
	457, 926, 305, 534, 929, 0, 296, 916, 857, 0,
	0, 0, 854, 306, 173, 200, 860, 881, 372, 917,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 212, 0, 0, 263, 0, 0,
	884, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 934, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 910, 438, 215, 517, 465, 868, 233, 864, 0,
	867, 902, 903, 869, 0, 0, 0, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 439, 0, 853, 0,
	492, 0, 0, 0, 0, 0, 0, 0, 510, 321,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 194, 335,
	941, 0, 0, 539, 0, 0, 845, 0, 0, 0,
	0, 256, 877, 0, 289, 290, 329, 0, 0, 897,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	940, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 0, 0, 918, 281, 0, 0, 343, 0, 0,
	0, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 0, 0, 0, 0, 932, 920, 0, 486,
	313, 524, 242, 883, 939, 886, 887, 912, 196, 901,
	908, 880, 840, 873, 846, 268, 847, 872, 893, 0,
	870, 468, 345, 0, 333, 874, 198, 858, 0, 401,
	285, 180, 844, 848, 849, 859, 863, 865, 866, 871,
	879, 882, 885, 888, 890, 892, 895, 906, 914, 915,
	921, 922, 923, 924, 925, 927, 936, 937, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 530,
	0, 367, 529, 471, 358, 0, 0, 0, 896, 0,
	899, 919, 891, 913, 862, 904, 0, 280, 909, 935,
	0, 225, 0, 0, 373, 0, 266, 0, 87, 0,
	0, 166, 167, 168, 0, 489, 0, 0, 278, 237,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 273, 907, 931, 878,
	384, 250, 300, 257, 249, 497, 0, 487, 851, 898,
	930, 0, 0, 0, 933, 332, 0, 911, 0, 843,
	905, 0, 191, 852, 938, 928, 875, 876, 0, 0,
	0, 0, 0, 0, 0, 894, 900, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 855, 850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	861, 179, 254, 437, 842, 841, 174, 0, 0, 0,
	235, 0, 457, 926, 305, 534, 929, 0, 296, 916,
	857, 0, 0, 0, 854, 306, 173, 200, 860, 881,
	372, 917, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 0, 0, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 212, 0, 0, 263,
	0, 0, 884, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 934, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 910, 438, 215, 517, 465, 868, 233,
	864, 0, 867, 902, 903, 869, 0, 0, 0, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 439, 0,
	853, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	510, 321, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	194, 335, 941, 0, 0, 539, 0, 0, 845, 0,
	0, 0, 0, 256, 877, 0, 289, 290, 329, 0,
	0, 897, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 940, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 0, 0, 918, 281, 0, 0, 343,
	0, 0, 0, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 0, 0, 0, 0, 932, 920,
	0, 486, 313, 524, 242, 883, 939, 886, 887, 912,
	196, 901, 908, 880, 840, 873, 846, 268, 847, 872,
	893, 0, 870, 468, 345, 0, 333, 874, 198, 858,
	0, 401, 285, 180, 844, 848, 849, 859, 863, 865,
	866, 871, 879, 882, 885, 888, 890, 892, 895, 906,
	914, 915, 921, 922, 923, 924, 925, 927, 936, 937,
	169, 170, 171, 172, 177, 178, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 195, 197, 199, 202, 203,
	206, 207, 208, 209, 210, 213, 217, 218, 219, 221,
	222, 223, 224, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 227, 228, 229, 230, 231, 232, 236,
	238, 239, 240, 243, 244, 245, 246, 247, 248, 251,
	252, 255, 258, 259, 265, 270, 271, 272, 274, 275,
	276, 282, 284, 287, 288, 291, 293, 295, 297, 298,
	299, 301, 302, 303, 304, 307, 308, 309, 310, 311,
	312, 314, 322, 323, 325, 326, 327, 328, 331, 334,
	336, 338, 339, 341, 342, 344, 347, 348, 350, 351,
	354, 355, 357, 360, 363, 366, 368, 369, 370, 371,
	374, 375, 376, 377, 379, 382, 385, 387, 388, 390,
	393, 395, 396, 397, 398, 399, 400, 404, 407, 408,
	409, 410, 412, 414, 415, 416, 418, 420, 421, 422,
	423, 424, 425, 428, 429, 431, 432, 433, 434, 435,
	440, 441, 444, 445, 446, 449, 450, 451, 452, 453,
	454, 456, 459, 460, 464, 466, 469, 470, 476, 477,
	479, 480, 482, 483, 484, 485, 488, 490, 491, 493,
	494, 498, 499, 500, 507, 508, 512, 513, 514, 515,
	518, 519, 520, 521, 522, 523, 525, 526, 527, 528,
	532, 533, 535, 536, 537, 538, 541, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 530, 0, 367, 529, 471, 358, 0, 0, 0,
	896, 0, 899, 919, 891, 913, 862, 904, 0, 280,
	909, 935, 0, 225, 0, 0, 373, 0, 266, 0,
	0, 0, 0, 166, 167, 168, 0, 489, 0, 0,
	278, 237, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 273, 907,
	931, 878, 384, 250, 300, 257, 249, 497, 0, 487,
	851, 898, 930, 0, 0, 606, 933, 332, 0, 911,
	0, 843, 905, 0, 191, 852, 938, 928, 875, 876,
	0, 0, 0, 0, 0, 0, 0, 894, 900, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 855, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 861, 179, 254, 437, 842, 841, 174, 0,
	0, 0, 235, 0, 457, 926, 305, 534, 929, 0,
	296, 916, 857, 0, 0, 0, 854, 306, 173, 200,
	860, 881, 372, 917, 443, 472, 0, 269, 0, 262,
	0, 0, 511, 211, 0, 0, 0, 0, 413, 267,
	352, 403, 0, 0, 0, 419, 509, 0, 0, 0,
	361, 0, 0, 0, 0, 201, 241, 389, 478, 0,
	463, 353, 501, 0, 318, 462, 277, 176, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 481, 1299,
	214, 448, 455, 436, 540, 193, 0, 475, 0, 315,
	316, 192, 0, 427, 253, 0, 0, 381, 504, 505,
	0, 555, 204, 531, 0, 942, 0, 364, 502, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 0, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 212, 0,
	0, 263, 0, 0, 884, 283, 0, 0, 0, 0,
	417, 0, 458, 496, 0, 934, 0, 0, 839, 833,
	832, 319, 340, 426, 542, 910, 438, 215, 517, 465,
	868, 233, 864, 0, 867, 902, 903, 869, 0, 0,
	0, 234, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 356, 0, 0, 359, 0, 461, 0, 0, 0,
	439, 0, 853, 0, 492, 0, 0, 0, 0, 0,
	0, 0, 510, 321, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 194, 335, 941, 0, 0, 539, 0, 0,
	845, 0, 0, 0, 0, 256, 877, 0, 289, 290,
	329, 0, 0, 897, 0, 0, 0, 383, 394, 0,
	0, 430, 0, 495, 940, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 279, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 365, 0,
	378, 380, 0, 386, 0, 391, 0, 392, 402, 406,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 447, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 503, 516, 0, 0, 918, 281, 0,
	0, 343, 0, 0, 0, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 0, 0, 0, 0,
	932, 920, 0, 486, 313, 524, 242, 883, 939, 886,
	887, 912, 196, 901, 908, 880, 840, 873, 846, 268,
	847, 872, 893, 0, 870, 468, 345, 0, 333, 874,
	198, 858, 0, 401, 285, 180, 844, 848, 849, 859,
	863, 865, 866, 871, 879, 882, 885, 888, 890, 892,
	895, 906, 914, 915, 921, 922, 923, 924, 925, 927,
	936, 937, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 530, 0, 367, 529, 471, 358, 0,
	0, 0, 896, 0, 899, 919, 891, 913, 862, 904,
	0, 280, 909, 935, 0, 225, 0, 0, 373, 0,
	266, 0, 0, 0, 0, 166, 167, 168, 0, 489,
	0, 0, 278, 237, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	273, 907, 931, 878, 384, 250, 300, 257, 249, 497,
	0, 487, 851, 898, 930, 0, 0, 606, 933, 332,
	0, 911, 0, 843, 905, 0, 191, 852, 938, 928,
	875, 876, 0, 0, 0, 0, 0, 0, 0, 894,
	900, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 855, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 861, 179, 254, 437, 842, 841,
	174, 0, 0, 0, 235, 0, 457, 926, 305, 534,
	929, 0, 296, 916, 857, 0, 0, 0, 854, 306,
	173, 200, 860, 881, 372, 917, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 830, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 942, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	212, 0, 0, 263, 0, 0, 884, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 934, 0, 0,
	839, 833, 832, 319, 340, 426, 542, 910, 438, 215,
	517, 465, 868, 233, 864, 0, 867, 902, 903, 869,
	0, 0, 0, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 439, 0, 853, 0, 492, 0, 0, 0,
	0, 0, 0, 0, 510, 321, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 194, 335, 941, 0, 0, 539,
	0, 0, 845, 0, 0, 0, 0, 256, 877, 0,
	289, 290, 329, 0, 0, 897, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 940, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 0, 0, 918,
	281, 0, 0, 343, 0, 0, 0, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 0, 0,
	0, 0, 932, 920, 0, 486, 313, 524, 242, 883,
	939, 886, 887, 912, 196, 901, 908, 880, 840, 873,
	846, 268, 847, 872, 893, 0, 870, 468, 345, 0,
	333, 874, 198, 858, 0, 401, 285, 180, 844, 848,
	849, 859, 863, 865, 866, 871, 879, 882, 885, 888,
	890, 892, 895, 906, 914, 915, 921, 922, 923, 924,
	925, 927, 936, 937, 169, 170, 171, 172, 177, 178,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 195,
	197, 199, 202, 203, 206, 207, 208, 209, 210, 213,
	217, 218, 219, 221, 222, 223, 224, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 227, 228, 229,
	230, 231, 232, 236, 238, 239, 240, 243, 244, 245,
	246, 247, 248, 251, 252, 255, 258, 259, 265, 270,
	271, 272, 274, 275, 276, 282, 284, 287, 288, 291,
	293, 295, 297, 298, 299, 301, 302, 303, 304, 307,
	308, 309, 310, 311, 312, 314, 322, 323, 325, 326,
	327, 328, 331, 334, 336, 338, 339, 341, 342, 344,
	347, 348, 350, 351, 354, 355, 357, 360, 363, 366,
	368, 369, 370, 371, 374, 375, 376, 377, 379, 382,
	385, 387, 388, 390, 393, 395, 396, 397, 398, 399,
	400, 404, 407, 408, 409, 410, 412, 414, 415, 416,
	418, 420, 421, 422, 423, 424, 425, 428, 429, 431,
	432, 433, 434, 435, 440, 441, 444, 445, 446, 449,
	450, 451, 452, 453, 454, 456, 459, 460, 464, 466,
	469, 470, 476, 477, 479, 480, 482, 483, 484, 485,
	488, 490, 491, 493, 494, 498, 499, 500, 507, 508,
	512, 513, 514, 515, 518, 519, 520, 521, 522, 523,
	525, 526, 527, 528, 532, 533, 535, 536, 537, 538,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 530, 0, 367, 529, 471,
	358, 0, 0, 0, 896, 0, 899, 919, 891, 913,
	862, 904, 0, 280, 909, 935, 0, 225, 0, 0,
	373, 0, 266, 0, 0, 0, 0, 166, 167, 168,
	0, 489, 0, 0, 278, 237, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 273, 907, 931, 878, 384, 250, 300, 257,
	249, 497, 0, 487, 851, 898, 930, 0, 0, 0,
	933, 332, 0, 911, 0, 843, 905, 0, 191, 852,
	938, 928, 875, 876, 0, 0, 0, 0, 0, 0,
	0, 894, 900, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 861, 179, 254, 437,
	842, 841, 174, 0, 0, 0, 235, 0, 457, 926,
	305, 534, 929, 0, 296, 916, 857, 0, 0, 0,
	854, 306, 173, 200, 860, 881, 372, 917, 443, 472,
	0, 269, 0, 262, 0, 0, 511, 211, 0, 0,
	0, 0, 413, 267, 352, 403, 0, 0, 0, 419,
	509, 0, 0, 0, 361, 0, 0, 0, 0, 201,
	241, 389, 478, 0, 463, 353, 501, 0, 318, 462,
	277, 176, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 481, 506, 214, 448, 455, 436, 540, 193,
	0, 475, 0, 315, 316, 192, 0, 427, 253, 0,
	0, 381, 504, 505, 0, 555, 204, 531, 0, 205,
	0, 364, 502, 0, 0, 0, 0, 0, 0, 0,
	320, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 212, 0, 0, 263, 0, 0, 884, 283,
	0, 0, 0, 0, 417, 0, 458, 496, 0, 934,
	0, 0, 362, 286, 467, 319, 340, 426, 542, 910,
	438, 215, 517, 465, 868, 233, 864, 0, 867, 902,
	903, 869, 0, 0, 0, 234, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 356, 0, 0, 359, 0,
	461, 0, 0, 0, 439, 0, 853, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 510, 321, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 0, 194, 335, 941, 0,
	0, 539, 0, 0, 845, 0, 0, 0, 0, 256,
	877, 0, 289, 290, 329, 0, 0, 897, 0, 0,
	0, 383, 394, 0, 0, 430, 0, 495, 940, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	279, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 365, 0, 378, 380, 0, 386, 0, 391,
	0, 392, 402, 406, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 447, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 503, 516, 0,
	0, 918, 281, 0, 0, 343, 0, 0, 0, 261,
	313, 524, 242, 0, 0, 0, 0, 0, 196, 220,
	0, 0, 0, 0, 0, 650, 0, 405, 0, 0,
	655, 468, 345, 0, 333, 0, 198, 486, 0, 401,
	285, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 662,
	0, 367, 529, 471, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 168, 727, 736, 737, 738, 735, 734,
	728, 730, 0, 0, 729, 216, 673, 675, 674, 684,
	685, 686, 687, 688, 689, 690, 671, 732, 739, 740,
	384, 250, 300, 257, 249, 497, 0, 487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 0, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 0, 0, 654, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 656, 0, 0, 0,
	0, 179, 254, 437, 0, 0, 174, 0, 0, 0,
	235, 0, 709, 0, 305, 534, 0, 0, 707, 0,
	0, 0, 0, 0, 0, 306, 173, 200, 0, 0,
	372, 0, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 679, 680, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 263,
	0, 0, 0, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 0, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 0, 438, 215, 517, 465, 716, 708,
	666, 720, 668, 717, 718, 663, 664, 667, 719, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 711, 653,
	652, 0, 659, 660, 0, 669, 670, 672, 676, 677,
	678, 681, 682, 683, 691, 693, 694, 692, 695, 696,
	697, 700, 701, 702, 703, 698, 699, 704, 651, 0,
	194, 335, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 289, 290, 329, 0,
	0, 0, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 313, 524, 242, 281, 0, 0, 343,
	0, 196, 0, 261, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 220, 468, 345, 0, 333, 0, 198,
	0, 405, 401, 285, 180, 0, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 170, 171, 172, 177, 178, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 195, 197, 199, 202,
	203, 206, 207, 208, 209, 210, 213, 217, 218, 219,
	221, 222, 223, 224, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 227, 228, 229, 230, 231, 232,
	236, 238, 239, 240, 243, 244, 245, 246, 247, 248,
	251, 252, 255, 258, 259, 265, 270, 271, 272, 274,
	275, 276, 282, 284, 287, 288, 291, 293, 295, 297,
	298, 299, 301, 302, 303, 304, 307, 308, 309, 310,
	311, 312, 314, 322, 323, 325, 326, 327, 328, 331,
	334, 336, 338, 339, 341, 342, 344, 347, 348, 350,
	351, 354, 355, 357, 360, 363, 366, 368, 369, 370,
	371, 374, 375, 376, 377, 379, 382, 385, 387, 388,
	390, 393, 395, 396, 397, 398, 399, 400, 404, 407,
	408, 409, 410, 412, 414, 415, 416, 418, 420, 421,
	422, 423, 424, 425, 428, 429, 431, 432, 433, 434,
	435, 440, 441, 444, 445, 446, 449, 450, 451, 452,
	453, 454, 456, 459, 460, 464, 466, 469, 470, 476,
	477, 479, 480, 482, 483, 484, 485, 488, 490, 491,
	493, 494, 498, 499, 500, 507, 508, 512, 513, 514,
	515, 518, 519, 520, 521, 522, 523, 525, 526, 527,
	528, 532, 533, 535, 536, 537, 538, 541, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 530, 0, 367, 529, 471, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 225, 0, 0, 373, 0, 266,
	0, 0, 0, 0, 166, 167, 168, 0, 736, 737,
	0, 278, 237, 0, 1556, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 273,
	0, 0, 0, 384, 250, 300, 257, 249, 497, 0,
	487, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 317,
	0, 0, 0, 0, 179, 254, 437, 0, 0, 174,
	0, 0, 0, 235, 0, 457, 0, 305, 534, 0,
	0, 296, 0, 0, 0, 0, 0, 0, 306, 173,
	200, 0, 0, 372, 0, 443, 472, 0, 269, 0,
	262, 0, 0, 511, 211, 0, 0, 0, 0, 413,
	267, 352, 403, 0, 0, 0, 419, 509, 0, 0,
	0, 361, 0, 0, 0, 0, 201, 241, 389, 478,
	0, 463, 353, 501, 0, 318, 462, 277, 176, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 481,
	506, 214, 448, 455, 436, 540, 193, 0, 475, 0,
	315, 316, 192, 0, 427, 253, 0, 0, 381, 504,
	505, 0, 555, 204, 531, 0, 205, 0, 364, 502,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 263, 0, 0, 0, 283, 0, 0, 0,
	0, 417, 0, 458, 496, 0, 0, 0, 0, 362,
	286, 467, 319, 340, 426, 542, 0, 438, 215, 517,
	465, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 356, 0, 0, 359, 0, 461, 0, 0,
	0, 439, 0, 0, 0, 492, 0, 0, 0, 0,
	0, 0, 0, 510, 321, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 194, 335, 0, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 289,
	290, 329, 0, 0, 0, 0, 0, 0, 383, 394,
	0, 0, 430, 0, 495, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 279, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 365,
	0, 378, 380, 0, 386, 0, 391, 0, 392, 402,
	406, 0, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 447, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 503, 516, 313, 524, 242, 281,
	0, 0, 343, 0, 196, 0, 261, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 220, 468, 345, 0,
	333, 0, 198, 0, 405, 401, 285, 180, 0, 0,
	0, 0, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 172, 177, 178,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 195,
	197, 199, 202, 203, 206, 207, 208, 209, 210, 213,
	217, 218, 219, 221, 222, 223, 224, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 227, 228, 229,
	230, 231, 232, 236, 238, 239, 240, 243, 244, 245,
	246, 247, 248, 251, 252, 255, 258, 259, 265, 270,
	271, 272, 274, 275, 276, 282, 284, 287, 288, 291,
	293, 295, 297, 298, 299, 301, 302, 303, 304, 307,
	308, 309, 310, 311, 312, 314, 322, 323, 325, 326,
	327, 328, 331, 334, 336, 338, 339, 341, 342, 344,
	347, 348, 350, 351, 354, 355, 357, 360, 363, 366,
	368, 369, 370, 371, 374, 375, 376, 377, 379, 382,
	385, 387, 388, 390, 393, 395, 396, 397, 398, 399,
	400, 404, 407, 408, 409, 410, 412, 414, 415, 416,
	418, 420, 421, 422, 423, 424, 425, 428, 429, 431,
	432, 433, 434, 435, 440, 441, 444, 445, 446, 449,
	450, 451, 452, 453, 454, 456, 459, 460, 464, 466,
	469, 470, 476, 477, 479, 480, 482, 483, 484, 485,
	488, 490, 491, 493, 494, 498, 499, 500, 507, 508,
	512, 513, 514, 515, 518, 519, 520, 521, 522, 523,
	525, 526, 527, 528, 532, 533, 535, 536, 537, 538,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 530, 0, 367, 529, 471,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 225, 0, 0,
	373, 0, 266, 0, 0, 0, 0, 166, 167, 168,
	0, 489, 0, 0, 278, 237, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 273, 0, 0, 0, 384, 250, 300, 257,
	249, 497, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 1739, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 179, 254, 437,
	0, 0, 174, 0, 0, 0, 235, 0, 457, 0,
	1738, 534, 0, 0, 296, 0, 0, 986, 987, 0,
	950, 306, 173, 200, 980, 984, 372, 0, 443, 472,
	0, 269, 0, 262, 0, 0, 511, 211, 0, 0,
	0, 0, 413, 267, 352, 403, 0, 0, 0, 419,
	509, 0, 0, 0, 361, 0, 0, 0, 0, 201,
	241, 389, 478, 0, 463, 353, 501, 0, 318, 462,
	277, 176, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 481, 506, 214, 448, 455, 436, 540, 193,
	0, 475, 0, 315, 316, 192, 0, 427, 253, 0,
	0, 381, 504, 505, 0, 555, 204, 531, 0, 205,
	0, 364, 502, 0, 0, 0, 0, 0, 0, 0,
	320, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 263, 0, 0, 0, 283,
	0, 0, 0, 0, 417, 0, 458, 496, 0, 0,
	0, 0, 362, 286, 467, 319, 340, 426, 542, 0,
	438, 215, 517, 465, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 356, 0, 0, 359, 0,
	461, 0, 0, 0, 439, 0, 0, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 510, 321, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 0, 194, 335, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 289, 290, 329, 0, 0, 0, 0, 0,
	0, 383, 394, 0, 0, 430, 0, 495, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	279, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 365, 0, 378, 380, 0, 386, 0, 391,
	0, 392, 402, 406, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 447, 0, 0,
	0, 0, 0, 473, 474, 0, 78, 503, 516, 313,
	524, 242, 281, 0, 0, 343, 0, 196, 0, 261,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 220,
	468, 345, 0, 333, 0, 198, 0, 405, 401, 285,
	180, 0, 0, 0, 0, 0, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 170, 171,
	172, 177, 178, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 195, 197, 199, 202, 203, 206, 207, 208,
	209, 210, 213, 217, 218, 219, 221, 222, 223, 224,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	227, 228, 229, 230, 231, 232, 236, 238, 239, 240,
	243, 244, 245, 246, 247, 248, 251, 252, 255, 258,
	259, 265, 270, 271, 272, 274, 275, 276, 282, 284,
	287, 288, 291, 293, 295, 297, 298, 299, 301, 302,
	303, 304, 307, 308, 309, 310, 311, 312, 314, 322,
	323, 325, 326, 327, 328, 331, 334, 336, 338, 339,
	341, 342, 344, 347, 348, 350, 351, 354, 355, 357,
	360, 363, 366, 368, 369, 370, 371, 374, 375, 376,
	377, 379, 382, 385, 387, 388, 390, 393, 395, 396,
	397, 398, 399, 400, 404, 407, 408, 409, 410, 412,
	414, 415, 416, 418, 420, 421, 422, 423, 424, 425,
	428, 429, 431, 432, 433, 434, 435, 440, 441, 444,
	445, 446, 449, 450, 451, 452, 453, 454, 456, 459,
	460, 464, 466, 469, 470, 476, 477, 479, 480, 482,
	483, 484, 485, 488, 490, 491, 493, 494, 498, 499,
	500, 507, 508, 512, 513, 514, 515, 518, 519, 520,
	521, 522, 523, 525, 526, 527, 528, 532, 533, 535,
	536, 537, 538, 541, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 530, 0,
	367, 529, 471, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	225, 0, 0, 373, 0, 266, 0, 87, 0, 0,
	166, 167, 168, 0, 489, 0, 0, 278, 237, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 273, 0, 0, 0, 384,
	250, 300, 257, 249, 497, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
	179, 254, 437, 0, 0, 174, 0, 0, 0, 235,
	0, 457, 0, 305, 534, 0, 0, 296, 0, 0,
	0, 0, 0, 0, 306, 173, 200, 0, 0, 372,
	0, 443, 472, 0, 269, 0, 262, 0, 0, 511,
	211, 0, 0, 0, 0, 413, 267, 352, 403, 0,
	0, 0, 419, 509, 0, 0, 0, 361, 0, 0,
	0, 0, 201, 241, 389, 478, 0, 463, 353, 501,
	0, 318, 462, 277, 176, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 481, 506, 214, 448, 455,
	436, 540, 193, 0, 475, 0, 315, 316, 192, 0,
	427, 253, 0, 0, 381, 504, 505, 0, 555, 204,
	531, 0, 205, 0, 364, 502, 0, 0, 0, 0,
	0, 0, 0, 320, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 263, 0,
	0, 0, 283, 0, 0, 0, 0, 417, 0, 458,
	496, 0, 0, 0, 0, 362, 286, 467, 319, 340,
	426, 542, 0, 438, 215, 517, 465, 0, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 356, 0,
	0, 359, 0, 461, 0, 0, 0, 439, 0, 0,
	0, 492, 0, 0, 0, 0, 0, 0, 0, 510,
	321, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 194,
	335, 86, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 289, 290, 1714, 0, 0,
	1713, 0, 0, 0, 383, 394, 0, 0, 430, 0,
	495, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 279, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 365, 0, 378, 380, 0,
	386, 0, 391, 0, 392, 402, 406, 0, 0, 411,
	0, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	447, 0, 0, 0, 0, 0, 473, 474, 0, 78,
	503, 516, 313, 524, 242, 281, 0, 0, 343, 0,
	196, 0, 261, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 220, 468, 345, 0, 333, 0, 198, 0,
	405, 401, 285, 180, 0, 0, 0, 0, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 170, 171, 172, 177, 178, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 195, 197, 199, 202, 203,
	206, 207, 208, 209, 210, 213, 217, 218, 219, 221,
	222, 223, 224, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 227, 228, 229, 230, 231, 232, 236,
	238, 239, 240, 243, 244, 245, 246, 247, 248, 251,
	252, 255, 258, 259, 265, 270, 271, 272, 274, 275,
	276, 282, 284, 287, 288, 291, 293, 295, 297, 298,
	299, 301, 302, 303, 304, 307, 308, 309, 310, 311,
	312, 314, 322, 323, 325, 326, 327, 328, 331, 334,
	336, 338, 339, 341, 342, 344, 347, 348, 350, 351,
	354, 355, 357, 360, 363, 366, 368, 369, 370, 371,
	374, 375, 376, 377, 379, 382, 385, 387, 388, 390,
	393, 395, 396, 397, 398, 399, 400, 404, 407, 408,
	409, 410, 412, 414, 415, 416, 418, 420, 421, 422,
	423, 424, 425, 428, 429, 431, 432, 433, 434, 435,
	440, 441, 444, 445, 446, 449, 450, 451, 452, 453,
	454, 456, 459, 460, 464, 466, 469, 470, 476, 477,
	479, 480, 482, 483, 484, 485, 488, 490, 491, 493,
	494, 498, 499, 500, 507, 508, 512, 513, 514, 515,
	518, 519, 520, 521, 522, 523, 525, 526, 527, 528,
	532, 533, 535, 536, 537, 538, 541, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 530, 0, 367, 529, 471, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 225, 0, 0, 373, 0, 266, 0,
	87, 0, 1269, 166, 167, 168, 0, 489, 0, 0,
	278, 237, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 273, 0,
	0, 0, 384, 250, 300, 257, 249, 497, 0, 487,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 0, 179, 254, 437, 0, 0, 174, 0,
	0, 0, 235, 0, 457, 0, 305, 534, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 306, 173, 200,
	0, 0, 372, 0, 443, 472, 0, 269, 0, 262,
	0, 0, 511, 211, 0, 0, 0, 0, 413, 267,
	352, 403, 0, 0, 0, 419, 509, 0, 0, 0,
	361, 0, 0, 0, 0, 201, 241, 389, 478, 0,
	463, 353, 501, 0, 318, 462, 277, 176, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 481, 506,
	214, 448, 455, 436, 540, 193, 0, 475, 0, 315,
	316, 192, 0, 427, 253, 0, 0, 381, 504, 505,
	0, 555, 204, 531, 0, 205, 0, 364, 502, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 0, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 263, 0, 0, 0, 283, 0, 0, 0, 0,
	417, 0, 458, 496, 0, 0, 0, 0, 362, 286,
	467, 319, 340, 426, 542, 0, 438, 215, 517, 465,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 356, 0, 0, 359, 0, 461, 0, 0, 0,
	439, 0, 0, 0, 492, 0, 0, 0, 0, 0,
	0, 0, 510, 321, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 194, 335, 86, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 289, 290,
	329, 0, 0, 0, 0, 0, 0, 383, 394, 0,
	0, 430, 0, 495, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 279, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 365, 0,
	378, 380, 0, 386, 0, 391, 0, 392, 402, 406,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 447, 0, 0, 0, 0, 1124, 473,
	474, 0, 0, 503, 516, 313, 524, 242, 281, 0,
	0, 343, 0, 196, 0, 261, 0, 0, 0, 1288,
	268, 0, 0, 0, 0, 220, 468, 345, 0, 333,
	0, 198, 0, 405, 401, 285, 180, 0, 0, 0,
	0, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 170, 171, 172, 177, 178, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 195, 197,
	199, 202, 203, 206, 207, 208, 209, 210, 213, 217,
	218, 219, 221, 222, 223, 224, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 227, 228, 229, 230,
	231, 232, 236, 238, 239, 240, 243, 244, 245, 246,
	247, 248, 251, 252, 255, 258, 259, 265, 270, 271,
	272, 274, 275, 276, 282, 284, 287, 288, 291, 293,
	295, 297, 298, 299, 301, 302, 303, 304, 307, 308,
	309, 310, 311, 312, 314, 322, 323, 325, 326, 327,
	328, 331, 334, 336, 338, 339, 341, 342, 344, 347,
	348, 350, 351, 354, 355, 357, 360, 363, 366, 368,
	369, 370, 371, 374, 375, 376, 377, 379, 382, 385,
	387, 388, 390, 393, 395, 396, 397, 398, 399, 400,
	404, 407, 408, 409, 410, 412, 414, 415, 416, 418,
	420, 421, 422, 423, 424, 425, 428, 429, 431, 432,
	433, 434, 435, 440, 441, 444, 445, 446, 449, 450,
	451, 452, 453, 454, 456, 459, 460, 464, 466, 469,
	470, 476, 477, 479, 480, 482, 483, 484, 485, 488,
	490, 491, 493, 494, 498, 499, 500, 507, 508, 512,
	513, 514, 515, 518, 519, 520, 521, 522, 523, 525,
	526, 527, 528, 532, 533, 535, 536, 537, 538, 541,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 530, 0, 367, 529, 471, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 225, 0, 0, 373,
	0, 266, 0, 0, 0, 0, 166, 167, 168, 0,
	1290, 0, 0, 278, 237, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 273, 0, 0, 0, 384, 250, 300, 257, 249,
	497, 0, 487, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 1122, 0, 1123, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 179, 254, 437, 0,
	0, 174, 0, 0, 0, 235, 0, 457, 0, 305,
	534, 0, 0, 296, 0, 0, 0, 0, 0, 0,
	306, 173, 200, 0, 0, 372, 0, 443, 472, 0,
	269, 0, 262, 0, 0, 511, 211, 0, 0, 0,
	0, 413, 267, 352, 403, 0, 0, 0, 419, 509,
	0, 0, 0, 361, 0, 0, 0, 0, 201, 241,
	389, 478, 0, 463, 353, 501, 0, 318, 462, 277,
	176, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 481, 506, 214, 448, 455, 436, 540, 193, 0,
	475, 0, 315, 316, 192, 0, 427, 253, 0, 0,
	381, 504, 505, 0, 555, 204, 531, 0, 205, 0,
	364, 502, 0, 0, 0, 0, 0, 0, 0, 320,
	0, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 263, 0, 0, 0, 283, 0,
	0, 0, 0, 417, 0, 458, 496, 0, 0, 0,
	0, 362, 286, 467, 319, 340, 426, 542, 0, 438,
	215, 517, 465, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 356, 0, 0, 359, 0, 461,
	0, 0, 0, 439, 0, 0, 0, 492, 0, 0,
	0, 0, 0, 0, 0, 510, 321, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 194, 335, 0, 0, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 289, 290, 329, 0, 0, 0, 0, 0, 0,
	383, 394, 0, 0, 430, 0, 495, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 279,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 365, 0, 378, 380, 0, 386, 0, 391, 0,
	392, 402, 406, 0, 0, 411, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 447, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 503, 516, 313, 524,
	242, 281, 0, 0, 343, 0, 196, 0, 261, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 220, 468,
	345, 0, 333, 0, 198, 0, 405, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 530, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 0, 0, 0, 166,
	167, 168, 1232, 1235, 0, 0, 278, 237, 1231, 1234,
	0, 0, 1230, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 273, 0, 0, 0, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	457, 0, 305, 534, 0, 0, 296, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 439, 0, 0, 0,
	492, 0, 0, 0, 0, 0, 0, 0, 510, 321,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 194, 335,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 313, 524, 242, 281, 0, 0, 343, 0, 196,
	0, 261, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 220, 468, 345, 0, 333, 0, 198, 0, 405,
	401, 285, 180, 0, 0, 0, 0, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	170, 171, 172, 177, 178, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 195, 197, 199, 202, 203, 206,
	207, 208, 209, 210, 213, 217, 218, 219, 221, 222,
	223, 224, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 227, 228, 229, 230, 231, 232, 236, 238,
	239, 240, 243, 244, 245, 246, 247, 248, 251, 252,
	255, 258, 259, 265, 270, 271, 272, 274, 275, 276,
	282, 284, 287, 288, 291, 293, 295, 297, 298, 299,
	301, 302, 303, 304, 307, 308, 309, 310, 311, 312,
	314, 322, 323, 325, 326, 327, 328, 331, 334, 336,
	338, 339, 341, 342, 344, 347, 348, 350, 351, 354,
	355, 357, 360, 363, 366, 368, 369, 370, 371, 374,
	375, 376, 377, 379, 382, 385, 387, 388, 390, 393,
	395, 396, 397, 398, 399, 400, 404, 407, 408, 409,
	410, 412, 414, 415, 416, 418, 420, 421, 422, 423,
	424, 425, 428, 429, 431, 432, 433, 434, 435, 440,
	441, 444, 445, 446, 449, 450, 451, 452, 453, 454,
	456, 459, 460, 464, 466, 469, 470, 476, 477, 479,
	480, 482, 483, 484, 485, 488, 490, 491, 493, 494,
	498, 499, 500, 507, 508, 512, 513, 514, 515, 518,
	519, 520, 521, 522, 523, 525, 526, 527, 528, 532,
	533, 535, 536, 537, 538, 541, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	530, 0, 367, 529, 471, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 225, 0, 0, 373, 0, 266, 0, 0,
	0, 0, 166, 167, 168, 0, 489, 0, 0, 278,
	237, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 273, 0, 0,
	0, 384, 250, 300, 257, 249, 497, 0, 487, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 179, 254, 437, 0, 0, 174, 0, 0,
	0, 235, 0, 457, 0, 305, 534, 0, 0, 296,
	0, 0, 0, 0, 0, 950, 306, 173, 200, 948,
	0, 372, 0, 443, 472, 0, 269, 0, 262, 0,
	0, 511, 211, 0, 0, 0, 0, 413, 267, 352,
	403, 0, 0, 0, 419, 509, 0, 0, 0, 361,
	0, 0, 0, 0, 201, 241, 389, 478, 0, 463,
	353, 501, 0, 318, 462, 277, 176, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 481, 506, 214,
	448, 455, 436, 540, 193, 0, 475, 0, 315, 316,
	192, 0, 427, 253, 0, 0, 381, 504, 505, 0,
	555, 204, 531, 0, 205, 0, 364, 502, 0, 0,
	0, 0, 0, 0, 0, 320, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	263, 0, 0, 0, 283, 0, 0, 0, 0, 417,
	0, 458, 496, 0, 0, 0, 0, 362, 286, 467,
	319, 340, 426, 542, 0, 438, 215, 517, 465, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	356, 0, 0, 359, 0, 461, 0, 0, 0, 439,
	0, 0, 0, 492, 0, 0, 0, 0, 0, 0,
	0, 510, 321, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 194, 335, 0, 0, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 289, 290, 329,
	0, 0, 0, 0, 0, 0, 383, 394, 0, 0,
	430, 0, 495, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 279, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 365, 0, 378,
	380, 0, 386, 0, 391, 0, 392, 402, 406, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 447, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 503, 516, 313, 524, 242, 281, 0, 0,
	343, 0, 196, 0, 261, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 220, 468, 345, 0, 333, 0,
	198, 0, 405, 401, 285, 180, 0, 0, 0, 0,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 530, 0, 367, 529, 471, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 225, 0, 0, 373, 0,
	266, 0, 0, 0, 1269, 166, 167, 168, 0, 489,
	0, 0, 278, 237, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	273, 0, 0, 0, 384, 250, 300, 257, 249, 497,
	0, 487, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 179, 254, 437, 0, 0,
	174, 0, 0, 0, 235, 0, 457, 0, 305, 534,
	0, 0, 296, 2525, 0, 0, 0, 0, 0, 306,
	173, 200, 0, 0, 372, 0, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 506, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 205, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 263, 0, 0, 0, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 0, 0, 0,
	362, 286, 467, 319, 340, 426, 542, 0, 438, 215,
	517, 465, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 439, 0, 0, 0, 492, 0, 0, 0,
	0, 0, 0, 0, 510, 321, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 194, 335, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	289, 290, 329, 0, 0, 0, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 313, 524, 242,
	281, 0, 0, 343, 0, 196, 0, 261, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 220, 468, 345,
	0, 333, 0, 198, 0, 405, 401, 285, 180, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 170, 171, 172, 177,
	178, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	195, 197, 199, 202, 203, 206, 207, 208, 209, 210,
	213, 217, 218, 219, 221, 222, 223, 224, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 227, 228,
	229, 230, 231, 232, 236, 238, 239, 240, 243, 244,
	245, 246, 247, 248, 251, 252, 255, 258, 259, 265,
	270, 271, 272, 274, 275, 276, 282, 284, 287, 288,
	291, 293, 295, 297, 298, 299, 301, 302, 303, 304,
	307, 308, 309, 310, 311, 312, 314, 322, 323, 325,
	326, 327, 328, 331, 334, 336, 338, 339, 341, 342,
	344, 347, 348, 350, 351, 354, 355, 357, 360, 363,
	366, 368, 369, 370, 371, 374, 375, 376, 377, 379,
	382, 385, 387, 388, 390, 393, 395, 396, 397, 398,
	399, 400, 404, 407, 408, 409, 410, 412, 414, 415,
	416, 418, 420, 421, 422, 423, 424, 425, 428, 429,
	431, 432, 433, 434, 435, 440, 441, 444, 445, 446,
	449, 450, 451, 452, 453, 454, 456, 459, 460, 464,
	466, 469, 470, 476, 477, 479, 480, 482, 483, 484,
	485, 488, 490, 491, 493, 494, 498, 499, 500, 507,
	508, 512, 513, 514, 515, 518, 519, 520, 521, 522,
	523, 525, 526, 527, 528, 532, 533, 535, 536, 537,
	538, 541, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 530, 0, 367, 529,
	471, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 225, 0,
	0, 373, 0, 266, 0, 87, 0, 0, 166, 167,
	168, 0, 489, 0, 0, 278, 237, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 273, 0, 0, 0, 384, 250, 300,
	257, 249, 497, 0, 487, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 0, 0, 179, 254,
	437, 0, 0, 174, 0, 0, 0, 235, 0, 457,
	0, 305, 534, 0, 0, 296, 0, 0, 0, 0,
	0, 0, 306, 173, 200, 0, 0, 372, 0, 443,
	472, 0, 269, 0, 262, 0, 0, 511, 211, 0,
	0, 0, 0, 413, 267, 352, 403, 0, 0, 0,
	419, 509, 0, 0, 0, 361, 0, 0, 0, 0,
	201, 241, 389, 478, 0, 463, 353, 501, 0, 318,
	462, 277, 176, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 481, 506, 214, 448, 455, 436, 540,
	193, 0, 475, 0, 315, 316, 192, 0, 427, 253,
	0, 0, 381, 504, 505, 0, 555, 204, 531, 0,
	205, 0, 364, 502, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 263, 0, 0, 0,
	283, 0, 0, 0, 0, 417, 0, 458, 496, 0,
	0, 0, 0, 362, 286, 467, 319, 340, 426, 542,
	0, 438, 215, 517, 465, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 356, 0, 0, 359,
	0, 461, 0, 0, 0, 439, 0, 0, 0, 492,
	0, 0, 0, 0, 0, 0, 0, 510, 321, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 194, 335, 0,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 289, 290, 1714, 0, 0, 1713, 0,
	0, 0, 383, 394, 0, 0, 430, 0, 495, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 279, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 365, 0, 378, 380, 0, 386, 0,
	391, 0, 392, 402, 406, 0, 0, 411, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 447, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 503, 516,
	313, 524, 242, 281, 0, 0, 343, 0, 196, 0,
	261, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	220, 468, 345, 0, 333, 0, 198, 0, 405, 401,
	285, 180, 0, 0, 0, 0, 0, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 530,
	0, 367, 529, 471, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 225, 0, 0, 373, 0, 266, 0, 0, 0,
	0, 166, 167, 168, 0, 489, 0, 0, 278, 237,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 273, 0, 0, 0,
	384, 250, 300, 257, 249, 497, 0, 487, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	0, 179, 254, 437, 625, 624, 174, 0, 0, 0,
	235, 0, 457, 0, 305, 534, 0, 0, 296, 0,
	0, 0, 0, 0, 0, 306, 173, 200, 0, 0,
	372, 0, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 0, 0, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 263,
	0, 0, 0, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 0, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 0, 438, 215, 517, 465, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 439, 0,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	510, 321, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	194, 335, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 289, 290, 329, 0,
	0, 0, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 313, 524, 242, 623, 0, 0, 343,
	0, 196, 0, 261, 0, 0, 0, 1665, 268, 0,
	0, 0, 0, 220, 468, 345, 0, 333, 0, 198,
	0, 405, 401, 285, 180, 0, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 170, 171, 172, 177, 178, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 195, 197, 199, 202,
	203, 206, 207, 208, 209, 210, 213, 217, 218, 219,
	221, 222, 223, 224, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 227, 228, 229, 230, 231, 232,
	236, 238, 239, 240, 243, 244, 245, 246, 247, 248,
	251, 252, 255, 258, 259, 265, 270, 271, 272, 274,
	275, 276, 282, 284, 287, 288, 291, 293, 295, 297,
	298, 299, 301, 302, 303, 304, 307, 308, 309, 310,
	311, 312, 314, 322, 323, 325, 326, 327, 328, 331,
	334, 336, 338, 339, 341, 342, 344, 347, 348, 350,
	351, 354, 355, 357, 360, 363, 366, 368, 369, 370,
	371, 374, 375, 376, 377, 379, 382, 385, 387, 388,
	390, 393, 395, 396, 397, 398, 399, 400, 404, 407,
	408, 409, 410, 412, 414, 415, 416, 418, 420, 421,
	422, 423, 424, 425, 428, 429, 431, 432, 433, 434,
	435, 440, 441, 444, 445, 446, 449, 450, 451, 452,
	453, 454, 456, 459, 460, 464, 466, 469, 470, 476,
	477, 479, 480, 482, 483, 484, 485, 488, 490, 491,
	493, 494, 498, 499, 500, 507, 508, 512, 513, 514,
	515, 518, 519, 520, 521, 522, 523, 525, 526, 527,
	528, 532, 533, 535, 536, 537, 538, 541, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 530, 0, 367, 529, 471, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 225, 0, 0, 373, 0, 266,
	0, 0, 0, 0, 166, 167, 168, 0, 1667, 0,
	0, 278, 237, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 273,
	0, 0, 0, 384, 250, 300, 257, 249, 497, 0,
	487, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 179, 254, 437, 0, 0, 174,
	0, 0, 0, 235, 0, 457, 0, 305, 534, 0,
	0, 296, 0, 0, 0, 0, 0, 0, 306, 173,
	200, 0, 0, 372, 0, 443, 472, 0, 269, 0,
	262, 0, 0, 511, 211, 0, 0, 0, 0, 413,
	267, 352, 403, 0, 0, 0, 419, 509, 0, 0,
	0, 361, 0, 0, 0, 0, 201, 241, 389, 478,
	0, 463, 353, 501, 0, 318, 462, 277, 176, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 481,
	506, 214, 448, 455, 436, 540, 193, 0, 475, 0,
	315, 316, 192, 0, 427, 253, 0, 0, 381, 504,
	505, 0, 555, 204, 531, 0, 205, 0, 364, 502,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 263, 0, 0, 0, 283, 0, 0, 0,
	0, 417, 0, 458, 496, 0, 0, 0, 0, 362,
	286, 467, 319, 340, 426, 542, 0, 438, 215, 517,
	465, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 356, 0, 0, 359, 0, 461, 0, 0,
	0, 439, 0, 0, 0, 492, 0, 0, 0, 0,
	0, 0, 0, 510, 321, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 194, 335, 0, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 289,
	290, 329, 0, 0, 0, 0, 0, 0, 383, 394,
	0, 0, 430, 0, 495, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 279, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 365,
	0, 378, 380, 0, 386, 0, 391, 0, 392, 402,
	406, 0, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 447, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 503, 516, 313, 524, 242, 281,
	0, 0, 343, 0, 196, 0, 261, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 220, 468, 345, 0,
	333, 0, 198, 0, 405, 401, 285, 180, 0, 0,
	0, 0, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 172, 177, 178,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 195,
	197, 199, 202, 203, 206, 207, 208, 209, 210, 213,
	217, 218, 219, 221, 222, 223, 224, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 227, 228, 229,
	230, 231, 232, 236, 238, 239, 240, 243, 244, 245,
	246, 247, 248, 251, 252, 255, 258, 259, 265, 270,
	271, 272, 274, 275, 276, 282, 284, 287, 288, 291,
	293, 295, 297, 298, 299, 301, 302, 303, 304, 307,
	308, 309, 310, 311, 312, 314, 322, 323, 325, 326,
	327, 328, 331, 334, 336, 338, 339, 341, 342, 344,
	347, 348, 350, 351, 354, 355, 357, 360, 363, 366,
	368, 369, 370, 371, 374, 375, 376, 377, 379, 382,
	385, 387, 388, 390, 393, 395, 396, 397, 398, 399,
	400, 404, 407, 408, 409, 410, 412, 414, 415, 416,
	418, 420, 421, 422, 423, 424, 425, 428, 429, 431,
	432, 433, 434, 435, 440, 441, 444, 445, 446, 449,
	450, 451, 452, 453, 454, 456, 459, 460, 464, 466,
	469, 470, 476, 477, 479, 480, 482, 483, 484, 485,
	488, 490, 491, 493, 494, 498, 499, 500, 507, 508,
	512, 513, 514, 515, 518, 519, 520, 521, 522, 523,
	525, 526, 527, 528, 532, 533, 535, 536, 537, 538,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 530, 0, 367, 529, 471,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 225, 0, 0,
	373, 0, 266, 0, 0, 0, 0, 166, 167, 168,
	0, 489, 0, 0, 278, 237, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 273, 0, 0, 0, 384, 250, 300, 257,
	249, 497, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 179, 254, 437,
	0, 0, 174, 0, 0, 0, 235, 0, 457, 0,
	305, 534, 0, 0, 296, 2580, 0, 0, 0, 0,
	0, 306, 173, 200, 0, 0, 372, 0, 443, 472,
	0, 269, 0, 262, 0, 0, 511, 211, 0, 0,
	0, 0, 413, 267, 352, 403, 0, 0, 0, 419,
	509, 0, 0, 0, 361, 0, 0, 0, 0, 201,
	241, 389, 478, 0, 463, 353, 501, 0, 318, 462,
	277, 176, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 481, 506, 214, 448, 455, 436, 540, 193,
	0, 475, 0, 315, 316, 192, 0, 427, 253, 0,
	0, 381, 504, 505, 0, 555, 204, 531, 0, 205,
	0, 364, 502, 0, 0, 0, 0, 0, 0, 0,
	320, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 263, 0, 0, 0, 283,
	0, 0, 0, 0, 417, 0, 458, 496, 0, 0,
	0, 0, 362, 286, 467, 319, 340, 426, 542, 0,
	438, 215, 517, 465, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 356, 0, 0, 359, 0,
	461, 0, 0, 0, 439, 0, 0, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 510, 321, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 0, 194, 335, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 289, 290, 329, 0, 0, 0, 0, 0,
	0, 383, 394, 0, 0, 430, 0, 495, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	279, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 365, 0, 378, 380, 0, 386, 0, 391,
	0, 392, 402, 406, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 447, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 503, 516, 313,
	524, 242, 281, 0, 0, 343, 0, 196, 0, 261,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 220,
	468, 345, 0, 333, 0, 198, 0, 405, 401, 285,
	180, 0, 0, 0, 0, 0, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 170, 171,
	172, 177, 178, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 195, 197, 199, 202, 203, 206, 207, 208,
	209, 210, 213, 217, 218, 219, 221, 222, 223, 224,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	227, 228, 229, 230, 231, 232, 236, 238, 239, 240,
	243, 244, 245, 246, 247, 248, 251, 252, 255, 258,
	259, 265, 270, 271, 272, 274, 275, 276, 282, 284,
	287, 288, 291, 293, 295, 297, 298, 299, 301, 302,
	303, 304, 307, 308, 309, 310, 311, 312, 314, 322,
	323, 325, 326, 327, 328, 331, 334, 336, 338, 339,
	341, 342, 344, 347, 348, 350, 351, 354, 355, 357,
	360, 363, 366, 368, 369, 370, 371, 374, 375, 376,
	377, 379, 382, 385, 387, 388, 390, 393, 395, 396,
	397, 398, 399, 400, 404, 407, 408, 409, 410, 412,
	414, 415, 416, 418, 420, 421, 422, 423, 424, 425,
	428, 429, 431, 432, 433, 434, 435, 440, 441, 444,
	445, 446, 449, 450, 451, 452, 453, 454, 456, 459,
	460, 464, 466, 469, 470, 476, 477, 479, 480, 482,
	483, 484, 485, 488, 490, 491, 493, 494, 498, 499,
	500, 507, 508, 512, 513, 514, 515, 518, 519, 520,
	521, 522, 523, 525, 526, 527, 528, 532, 533, 535,
	536, 537, 538, 541, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 530, 0,
	367, 529, 471, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	225, 0, 0, 373, 0, 266, 0, 0, 0, 0,
	166, 167, 168, 0, 489, 0, 0, 278, 237, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 273, 0, 0, 0, 384,
	250, 300, 257, 249, 497, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
	179, 254, 437, 0, 0, 174, 0, 0, 0, 235,
	0, 457, 0, 305, 534, 0, 0, 296, 2525, 0,
	0, 0, 0, 0, 306, 173, 200, 0, 0, 372,
	0, 443, 472, 0, 269, 0, 262, 0, 0, 511,
	211, 0, 0, 0, 0, 413, 267, 352, 403, 0,
	0, 0, 419, 509, 0, 0, 0, 361, 0, 0,
	0, 0, 201, 241, 389, 478, 0, 463, 353, 501,
	0, 318, 462, 277, 176, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 481, 506, 214, 448, 455,
	436, 540, 193, 0, 475, 0, 315, 316, 192, 0,
	427, 253, 0, 0, 381, 504, 505, 0, 555, 204,
	531, 0, 205, 0, 364, 502, 0, 0, 0, 0,
	0, 0, 0, 320, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 263, 0,
	0, 0, 283, 0, 0, 0, 0, 417, 0, 458,
	496, 0, 0, 0, 0, 362, 286, 467, 319, 340,
	426, 542, 0, 438, 215, 517, 465, 0, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 356, 0,
	0, 359, 0, 461, 0, 0, 0, 439, 0, 0,
	0, 492, 0, 0, 0, 0, 0, 0, 0, 510,
	321, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 194,
	335, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 289, 290, 329, 0, 0,
	0, 0, 0, 0, 383, 394, 0, 0, 430, 0,
	495, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 279, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 365, 0, 378, 380, 0,
	386, 0, 391, 0, 392, 402, 406, 0, 0, 411,
	0, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	447, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	503, 516, 313, 524, 242, 281, 0, 0, 343, 0,
	196, 0, 261, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 220, 468, 345, 0, 333, 0, 198, 0,
	405, 401, 285, 180, 0, 0, 0, 0, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 170, 171, 172, 177, 178, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 195, 197, 199, 202, 203,
	206, 207, 208, 209, 210, 213, 217, 218, 219, 221,
	222, 223, 224, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 227, 228, 229, 230, 231, 232, 236,
	238, 239, 240, 243, 244, 245, 246, 247, 248, 251,
	252, 255, 258, 259, 265, 270, 271, 272, 274, 275,
	276, 282, 284, 287, 288, 291, 293, 295, 297, 298,
	299, 301, 302, 303, 304, 307, 308, 309, 310, 311,
	312, 314, 322, 323, 325, 326, 327, 328, 331, 334,
	336, 338, 339, 341, 342, 344, 347, 348, 350, 351,
	354, 355, 357, 360, 363, 366, 368, 369, 370, 371,
	374, 375, 376, 377, 379, 382, 385, 387, 388, 390,
	393, 395, 396, 397, 398, 399, 400, 404, 407, 408,
	409, 410, 412, 414, 415, 416, 418, 420, 421, 422,
	423, 424, 425, 428, 429, 431, 432, 433, 434, 435,
	440, 441, 444, 445, 446, 449, 450, 451, 452, 453,
	454, 456, 459, 460, 464, 466, 469, 470, 476, 477,
	479, 480, 482, 483, 484, 485, 488, 490, 491, 493,
	494, 498, 499, 500, 507, 508, 512, 513, 514, 515,
	518, 519, 520, 521, 522, 523, 525, 526, 527, 528,
	532, 533, 535, 536, 537, 538, 541, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 530, 0, 367, 529, 471, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 225, 0, 0, 373, 0, 266, 0,
	0, 0, 0, 166, 167, 168, 0, 1552, 0, 0,
	278, 237, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 273, 0,
	0, 0, 384, 250, 300, 257, 249, 497, 0, 487,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 0, 179, 254, 437, 0, 0, 174, 0,
	0, 0, 235, 0, 457, 0, 305, 534, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 306, 173, 200,
	0, 0, 372, 0, 443, 472, 0, 269, 0, 262,
	0, 0, 511, 211, 0, 0, 0, 0, 413, 267,
	352, 403, 0, 0, 0, 419, 509, 0, 0, 0,
	361, 0, 0, 0, 0, 201, 241, 389, 478, 0,
	463, 353, 501, 0, 318, 462, 277, 176, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 481, 506,
	214, 448, 455, 436, 540, 193, 0, 475, 0, 315,
	316, 192, 0, 427, 253, 0, 0, 381, 504, 505,
	0, 555, 204, 531, 0, 205, 0, 364, 502, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 0, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 263, 0, 0, 0, 283, 0, 0, 0, 0,
	417, 0, 458, 496, 0, 0, 0, 0, 362, 286,
	467, 319, 340, 426, 542, 0, 438, 215, 517, 465,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 356, 0, 0, 359, 0, 461, 0, 0, 0,
	439, 0, 0, 0, 492, 0, 0, 0, 0, 0,
	0, 0, 510, 321, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 194, 335, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 289, 290,
	329, 0, 0, 0, 0, 0, 0, 383, 394, 0,
	0, 430, 0, 495, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 279, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 365, 0,
	378, 380, 0, 386, 0, 391, 0, 392, 402, 406,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 447, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 503, 516, 313, 524, 242, 281, 0,
	0, 343, 0, 196, 0, 261, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 220, 468, 345, 0, 333,
	0, 198, 0, 405, 401, 285, 180, 0, 0, 0,
	0, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 170, 171, 172, 177, 178, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 195, 197,
	199, 202, 203, 206, 207, 208, 209, 210, 213, 217,
	218, 219, 221, 222, 223, 224, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 227, 228, 229, 230,
	231, 232, 236, 238, 239, 240, 243, 244, 245, 246,
	247, 248, 251, 252, 255, 258, 259, 265, 270, 271,
	272, 274, 275, 276, 282, 284, 287, 288, 291, 293,
	295, 297, 298, 299, 301, 302, 303, 304, 307, 308,
	309, 310, 311, 312, 314, 322, 323, 325, 326, 327,
	328, 331, 334, 336, 338, 339, 341, 342, 344, 347,
	348, 350, 351, 354, 355, 357, 360, 363, 366, 368,
	369, 370, 371, 374, 375, 376, 377, 379, 382, 385,
	387, 388, 390, 393, 395, 396, 397, 398, 399, 400,
	404, 407, 408, 409, 410, 412, 414, 415, 416, 418,
	420, 421, 422, 423, 424, 425, 428, 429, 431, 432,
	433, 434, 435, 440, 441, 444, 445, 446, 449, 450,
	451, 452, 453, 454, 456, 459, 460, 464, 466, 469,
	470, 476, 477, 479, 480, 482, 483, 484, 485, 488,
	490, 491, 493, 494, 498, 499, 500, 507, 508, 512,
	513, 514, 515, 518, 519, 520, 521, 522, 523, 525,
	526, 527, 528, 532, 533, 535, 536, 537, 538, 541,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 530, 0, 367, 529, 471, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 225, 0, 0, 373,
	0, 266, 0, 0, 0, 0, 166, 167, 168, 0,
	2040, 0, 0, 278, 237, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 273, 0, 0, 0, 384, 250, 300, 257, 249,
	497, 0, 487, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 179, 254, 437, 0,
	0, 174, 0, 0, 0, 235, 0, 457, 0, 305,
	534, 0, 0, 296, 0, 0, 0, 0, 0, 0,
	306, 173, 200, 0, 0, 372, 0, 443, 472, 0,
	269, 0, 262, 0, 0, 511, 211, 0, 0, 0,
	0, 413, 267, 352, 403, 0, 0, 0, 419, 509,
	0, 0, 0, 361, 0, 0, 0, 0, 201, 241,
	389, 478, 0, 463, 353, 501, 0, 318, 462, 277,
	176, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 481, 506, 214, 448, 455, 436, 540, 193, 0,
	475, 0, 315, 316, 192, 0, 427, 253, 0, 0,
	381, 504, 505, 0, 555, 204, 531, 0, 205, 0,
	364, 502, 0, 0, 0, 0, 0, 0, 0, 320,
	0, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 263, 0, 0, 0, 283, 0,
	0, 0, 0, 417, 0, 458, 496, 0, 0, 0,
	0, 362, 286, 467, 319, 340, 426, 542, 0, 438,
	215, 517, 465, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 356, 0, 0, 359, 0, 461,
	0, 0, 0, 439, 0, 0, 0, 492, 0, 0,
	0, 0, 0, 0, 0, 510, 321, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 194, 335, 0, 0, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 289, 290, 329, 0, 0, 0, 0, 0, 0,
	383, 394, 0, 0, 430, 0, 495, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 279,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 365, 0, 378, 380, 0, 386, 0, 391, 0,
	392, 402, 406, 0, 0, 411, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 447, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 503, 516, 313, 524,
	242, 281, 0, 0, 343, 0, 196, 0, 261, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 220, 468,
	345, 0, 333, 0, 198, 0, 405, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 530, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 0, 0, 0, 166,
	167, 168, 0, 489, 0, 0, 278, 237, 0, 1965,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 273, 0, 0, 0, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	457, 0, 305, 534, 0, 0, 296, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 439, 0, 0, 0,
	492, 0, 0, 0, 0, 0, 0, 0, 510, 321,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 194, 335,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 313, 524, 242, 281, 0, 0, 343, 0, 196,
	0, 261, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 220, 468, 345, 0, 333, 0, 198, 0, 405,
	401, 285, 180, 0, 0, 0, 0, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	170, 171, 172, 177, 178, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 195, 197, 199, 202, 203, 206,
	207, 208, 209, 210, 213, 217, 218, 219, 221, 222,
	223, 224, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 227, 228, 229, 230, 231, 232, 236, 238,
	239, 240, 243, 244, 245, 246, 247, 248, 251, 252,
	255, 258, 259, 265, 270, 271, 272, 274, 275, 276,
	282, 284, 287, 288, 291, 293, 295, 297, 298, 299,
	301, 302, 303, 304, 307, 308, 309, 310, 311, 312,
	314, 322, 323, 325, 326, 327, 328, 331, 334, 336,
	338, 339, 341, 342, 344, 347, 348, 350, 351, 354,
	355, 357, 360, 363, 366, 368, 369, 370, 371, 374,
	375, 376, 377, 379, 382, 385, 387, 388, 390, 393,
	395, 396, 397, 398, 399, 400, 404, 407, 408, 409,
	410, 412, 414, 415, 416, 418, 420, 421, 422, 423,
	424, 425, 428, 429, 431, 432, 433, 434, 435, 440,
	441, 444, 445, 446, 449, 450, 451, 452, 453, 454,
	456, 459, 460, 464, 466, 469, 470, 476, 477, 479,
	480, 482, 483, 484, 485, 488, 490, 491, 493, 494,
	498, 499, 500, 507, 508, 512, 513, 514, 515, 518,
	519, 520, 521, 522, 523, 525, 526, 527, 528, 532,
	533, 535, 536, 537, 538, 541, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	530, 0, 367, 529, 471, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 225, 0, 0, 373, 0, 266, 0, 87,
	0, 0, 166, 167, 168, 0, 489, 0, 0, 278,
	237, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 273, 0, 0,
	0, 384, 250, 300, 257, 249, 497, 0, 487, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 179, 254, 437, 0, 0, 174, 0, 0,
	0, 235, 0, 457, 0, 305, 534, 0, 0, 296,
	0, 0, 0, 0, 0, 0, 306, 173, 200, 0,
	0, 372, 0, 443, 472, 0, 269, 0, 262, 0,
	0, 511, 211, 0, 0, 0, 0, 413, 267, 352,
	403, 0, 0, 0, 419, 509, 0, 0, 0, 361,
	0, 0, 0, 0, 201, 241, 389, 478, 0, 463,
	353, 501, 0, 318, 462, 277, 176, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 481, 506, 214,
	448, 455, 436, 540, 193, 0, 475, 0, 315, 316,
	192, 0, 427, 253, 0, 0, 381, 504, 505, 0,
	555, 204, 531, 0, 205, 0, 364, 502, 0, 0,
	0, 0, 0, 0, 0, 320, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	263, 0, 0, 0, 283, 0, 0, 0, 0, 417,
	0, 458, 496, 0, 0, 0, 0, 362, 286, 467,
	319, 340, 426, 542, 0, 438, 215, 517, 465, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	356, 0, 0, 359, 0, 461, 0, 0, 0, 439,
	0, 0, 0, 492, 0, 0, 0, 0, 0, 0,
	0, 510, 321, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 194, 335, 0, 0, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 289, 290, 329,
	0, 0, 0, 0, 0, 0, 383, 394, 0, 0,
	430, 0, 495, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 279, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 365, 0, 378,
	380, 0, 386, 0, 391, 0, 392, 402, 406, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 447, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 503, 516, 0, 0, 0, 281, 0, 0,
	343, 0, 0, 0, 261, 313, 524, 242, 1715, 0,
	0, 0, 0, 196, 220, 0, 0, 0, 0, 0,
	268, 0, 405, 0, 0, 0, 468, 345, 0, 333,
	0, 198, 486, 0, 401, 285, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 170, 171, 172, 177, 178, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 195, 197,
	199, 202, 203, 206, 207, 208, 209, 210, 213, 217,
	218, 219, 221, 222, 223, 224, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 227, 228, 229, 230,
	231, 232, 236, 238, 239, 240, 243, 244, 245, 246,
	247, 248, 251, 252, 255, 258, 259, 265, 270, 271,
	272, 274, 275, 276, 282, 284, 287, 288, 291, 293,
	295, 297, 298, 299, 301, 302, 303, 304, 307, 308,
	309, 310, 311, 312, 314, 322, 323, 325, 326, 327,
	328, 331, 334, 336, 338, 339, 341, 342, 344, 347,
	348, 350, 351, 354, 355, 357, 360, 363, 366, 368,
	369, 370, 371, 374, 375, 376, 377, 379, 382, 385,
	387, 388, 390, 393, 395, 396, 397, 398, 399, 400,
	404, 407, 408, 409, 410, 412, 414, 415, 416, 418,
	420, 421, 422, 423, 424, 425, 428, 429, 431, 432,
	433, 434, 435, 440, 441, 444, 445, 446, 449, 450,
	451, 452, 453, 454, 456, 459, 460, 464, 466, 469,
	470, 476, 477, 479, 480, 482, 483, 484, 485, 488,
	490, 491, 493, 494, 498, 499, 500, 507, 508, 512,
	513, 514, 515, 518, 519, 520, 521, 522, 523, 525,
	526, 527, 528, 532, 533, 535, 536, 537, 538, 541,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 530, 0, 367, 529, 471, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 225, 0, 0, 373,
	0, 266, 0, 0, 0, 0, 166, 167, 168, 0,
	489, 0, 0, 278, 237, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 273, 0, 0, 0, 384, 250, 300, 257, 249,
	497, 0, 487, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 179, 254, 437, 0,
	0, 174, 0, 0, 0, 235, 0, 457, 0, 305,
	534, 0, 0, 296, 0, 0, 0, 0, 0, 0,
	306, 173, 200, 0, 0, 372, 0, 443, 472, 0,
	269, 0, 262, 0, 0, 511, 211, 0, 0, 0,
	0, 413, 267, 352, 403, 0, 0, 0, 419, 509,
	0, 0, 0, 361, 0, 0, 0, 0, 201, 241,
	389, 478, 0, 463, 353, 501, 0, 318, 462, 277,
	176, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 481, 506, 214, 448, 455, 436, 540, 193, 0,
	475, 0, 315, 316, 192, 0, 427, 253, 0, 0,
	381, 504, 505, 0, 555, 204, 531, 0, 205, 0,
	364, 502, 0, 0, 0, 0, 0, 0, 0, 320,
	0, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 263, 0, 0, 0, 283, 0,
	0, 0, 0, 417, 0, 458, 496, 0, 0, 0,
	0, 362, 286, 467, 319, 340, 426, 542, 0, 438,
	215, 517, 465, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 356, 0, 0, 359, 0, 461,
	0, 0, 0, 439, 0, 0, 0, 492, 0, 0,
	0, 0, 0, 0, 0, 510, 321, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 194, 335, 0, 0, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 289, 290, 329, 0, 0, 0, 0, 0, 0,
	383, 394, 0, 0, 430, 0, 495, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 279,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 365, 0, 378, 380, 0, 386, 0, 391, 0,
	392, 402, 406, 0, 0, 411, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 447, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 503, 516, 313, 524,
	242, 281, 0, 0, 343, 0, 196, 0, 261, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 220, 468,
	345, 0, 333, 0, 198, 0, 405, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 530, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 0, 0, 0, 166,
	167, 168, 0, 489, 0, 0, 278, 237, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 273, 0, 0, 0, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	457, 0, 305, 534, 0, 0, 296, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 439, 0, 0, 0,
	492, 0, 0, 0, 0, 0, 0, 0, 510, 321,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 194, 335,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 313, 524, 242, 281, 0, 0, 343, 0, 196,
	0, 261, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 220, 468, 345, 0, 333, 0, 198, 0, 405,
	401, 285, 180, 0, 0, 0, 0, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	170, 171, 172, 177, 178, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 195, 197, 199, 202, 203, 206,
	207, 208, 209, 210, 213, 217, 218, 219, 221, 222,
	223, 224, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 227, 228, 229, 230, 231, 232, 236, 238,
	239, 240, 243, 244, 245, 246, 247, 248, 251, 252,
	255, 258, 259, 265, 270, 271, 272, 274, 275, 276,
	282, 284, 287, 288, 291, 293, 295, 297, 298, 299,
	301, 302, 303, 304, 307, 308, 309, 310, 311, 312,
	314, 322, 323, 325, 326, 327, 328, 331, 334, 336,
	338, 339, 341, 342, 344, 347, 348, 350, 351, 354,
	355, 357, 360, 363, 366, 368, 369, 370, 371, 374,
	375, 376, 377, 379, 382, 385, 387, 388, 390, 393,
	395, 396, 397, 398, 399, 400, 404, 407, 408, 409,
	410, 412, 414, 415, 416, 418, 420, 421, 422, 423,
	424, 425, 428, 429, 431, 432, 433, 434, 435, 440,
	441, 444, 445, 446, 449, 450, 451, 452, 453, 454,
	456, 459, 460, 464, 466, 469, 470, 476, 477, 479,
	480, 482, 483, 484, 485, 488, 490, 491, 493, 494,
	498, 499, 500, 507, 508, 512, 513, 514, 515, 518,
	519, 520, 521, 522, 523, 525, 526, 527, 528, 532,
	533, 535, 536, 537, 538, 541, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	530, 0, 367, 529, 471, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 225, 0, 0, 373, 0, 266, 0, 0,
	0, 0, 166, 167, 168, 0, 489, 0, 0, 278,
	237, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 273, 0, 0,
	0, 384, 250, 300, 257, 249, 497, 0, 487, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 179, 254, 437, 0, 0, 174, 0, 0,
	0, 235, 0, 457, 0, 305, 534, 0, 0, 296,
	0, 0, 0, 0, 0, 0, 306, 173, 200, 0,
	0, 372, 0, 443, 472, 0, 269, 0, 262, 0,
	0, 511, 211, 0, 0, 0, 0, 413, 267, 352,
	403, 0, 0, 0, 419, 509, 0, 0, 0, 361,
	0, 0, 0, 0, 201, 241, 389, 478, 0, 463,
	353, 501, 0, 318, 462, 277, 176, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 481, 506, 214,
	448, 455, 436, 540, 193, 0, 475, 0, 315, 316,
	192, 0, 427, 253, 0, 0, 381, 504, 505, 0,
	555, 204, 531, 0, 205, 0, 364, 502, 0, 0,
	0, 0, 0, 0, 0, 320, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	263, 0, 0, 0, 283, 0, 0, 0, 0, 417,
	0, 458, 496, 0, 0, 0, 0, 362, 286, 467,
	319, 340, 426, 542, 0, 438, 215, 517, 465, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	356, 0, 0, 359, 0, 461, 0, 0, 0, 439,
	0, 0, 0, 492, 0, 0, 0, 0, 0, 0,
	0, 510, 321, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 194, 335, 1508, 0, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 289, 290, 329,
	0, 0, 0, 0, 0, 0, 383, 394, 0, 0,
	430, 0, 495, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 279, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 365, 0, 378,
	380, 0, 386, 0, 391, 0, 392, 402, 406, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 447, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 503, 516, 313, 524, 242, 281, 0, 0,
	343, 0, 196, 0, 261, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 220, 468, 345, 0, 333, 0,
	198, 0, 405, 401, 285, 180, 0, 0, 0, 0,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 530, 0, 367, 529, 471, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 225, 0, 0, 373, 0,
	266, 0, 1387, 0, 0, 166, 167, 168, 0, 489,
	0, 0, 278, 237, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	273, 0, 0, 0, 384, 250, 300, 257, 249, 497,
	0, 487, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 179, 254, 437, 0, 0,
	174, 0, 0, 0, 235, 0, 457, 0, 305, 534,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 306,
	173, 200, 0, 0, 372, 0, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 506, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 205, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 263, 0, 0, 0, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 0, 0, 0,
	362, 286, 467, 319, 340, 426, 542, 0, 438, 215,
	517, 465, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 439, 0, 0, 0, 492, 0, 0, 0,
	0, 0, 0, 0, 510, 321, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 194, 335, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	289, 290, 329, 0, 0, 0, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 0, 0, 0,
	281, 0, 0, 343, 0, 0, 0, 261, 313, 524,
	242, 0, 0, 0, 0, 0, 196, 220, 0, 0,
	0, 0, 0, 268, 0, 405, 0, 0, 1310, 468,
	345, 0, 333, 0, 198, 486, 0, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 530, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 0, 0, 0, 166,
	167, 168, 0, 1309, 0, 0, 278, 237, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 273, 0, 0, 0, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	457, 0, 305, 534, 0, 0, 296, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 439, 0, 0, 0,
	492, 0, 0, 0, 0, 0, 0, 0, 510, 321,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 194, 335,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 430, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 313, 524, 242, 281, 0, 0, 343, 0, 196,
	0, 261, 0, 0, 0, 0, 268, 0, 0, 1294,
	0, 220, 468, 345, 0, 333, 0, 198, 0, 405,
	401, 285, 180, 0, 0, 0, 0, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	170, 171, 172, 177, 178, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 195, 197, 199, 202, 203, 206,
	207, 208, 209, 210, 213, 217, 218, 219, 221, 222,
	223, 224, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 227, 228, 229, 230, 231, 232, 236, 238,
	239, 240, 243, 244, 245, 246, 247, 248, 251, 252,
	255, 258, 259, 265, 270, 271, 272, 274, 275, 276,
	282, 284, 287, 288, 291, 293, 295, 297, 298, 299,
	301, 302, 303, 304, 307, 308, 309, 310, 311, 312,
	314, 322, 323, 325, 326, 327, 328, 331, 334, 336,
	338, 339, 341, 342, 344, 347, 348, 350, 351, 354,
	355, 357, 360, 363, 366, 368, 369, 370, 371, 374,
	375, 376, 377, 379, 382, 385, 387, 388, 390, 393,
	395, 396, 397, 398, 399, 400, 404, 407, 408, 409,
	410, 412, 414, 415, 416, 418, 420, 421, 422, 423,
	424, 425, 428, 429, 431, 432, 433, 434, 435, 440,
	441, 444, 445, 446, 449, 450, 451, 452, 453, 454,
	456, 459, 460, 464, 466, 469, 470, 476, 477, 479,
	480, 482, 483, 484, 485, 488, 490, 491, 493, 494,
	498, 499, 500, 507, 508, 512, 513, 514, 515, 518,
	519, 520, 521, 522, 523, 525, 526, 527, 528, 532,
	533, 535, 536, 537, 538, 541, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	530, 0, 367, 529, 471, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 225, 0, 0, 373, 0, 266, 0, 0,
	0, 0, 166, 167, 168, 0, 489, 0, 0, 278,
	237, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 273, 0, 0,
	0, 384, 250, 300, 257, 249, 497, 0, 487, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 179, 254, 437, 0, 0, 174, 0, 0,
	0, 235, 0, 457, 0, 305, 534, 0, 0, 296,
	0, 0, 0, 0, 0, 0, 306, 173, 200, 0,
	0, 372, 0, 443, 472, 0, 269, 0, 262, 0,
	0, 511, 211, 0, 0, 0, 0, 413, 267, 352,
	403, 0, 0, 0, 419, 509, 0, 0, 0, 361,
	0, 0, 0, 0, 201, 241, 389, 478, 0, 463,
	353, 501, 0, 318, 462, 277, 176, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 481, 506, 214,
	448, 455, 436, 540, 193, 0, 475, 0, 315, 316,
	192, 0, 427, 253, 0, 0, 381, 504, 505, 0,
	555, 204, 531, 0, 205, 0, 364, 502, 0, 0,
	0, 0, 0, 0, 0, 320, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	263, 0, 0, 0, 283, 0, 0, 0, 0, 417,
	0, 458, 496, 0, 0, 0, 0, 362, 286, 467,
	319, 340, 426, 542, 0, 438, 215, 517, 465, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	356, 0, 0, 359, 0, 461, 0, 0, 0, 439,
	0, 0, 0, 492, 0, 0, 0, 0, 0, 0,
	0, 510, 321, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 194, 335, 0, 0, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 289, 290, 329,
	0, 0, 0, 0, 0, 0, 383, 394, 0, 0,
	430, 0, 495, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 279, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 365, 0, 378,
	380, 0, 386, 0, 391, 0, 392, 402, 406, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 447, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 503, 516, 313, 524, 242, 281, 0, 0,
	343, 0, 196, 0, 261, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 220, 468, 345, 0, 333, 0,
	198, 0, 405, 401, 285, 180, 0, 0, 0, 0,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 177, 178, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 195, 197, 199,
	202, 203, 206, 207, 208, 209, 210, 213, 217, 218,
	219, 221, 222, 223, 224, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 227, 228, 229, 230, 231,
	232, 236, 238, 239, 240, 243, 244, 245, 246, 247,
	248, 251, 252, 255, 258, 259, 265, 270, 271, 272,
	274, 275, 276, 282, 284, 287, 288, 291, 293, 295,
	297, 298, 299, 301, 302, 303, 304, 307, 308, 309,
	310, 311, 312, 314, 322, 323, 325, 326, 327, 328,
	331, 334, 336, 338, 339, 341, 342, 344, 347, 348,
	350, 351, 354, 355, 357, 360, 363, 366, 368, 369,
	370, 371, 374, 375, 376, 377, 379, 382, 385, 387,
	388, 390, 393, 395, 396, 397, 398, 399, 400, 404,
	407, 408, 409, 410, 412, 414, 415, 416, 418, 420,
	421, 422, 423, 424, 425, 428, 429, 431, 432, 433,
	434, 435, 440, 441, 444, 445, 446, 449, 450, 451,
	452, 453, 454, 456, 459, 460, 464, 466, 469, 470,
	476, 477, 479, 480, 482, 483, 484, 485, 488, 490,
	491, 493, 494, 498, 499, 500, 507, 508, 512, 513,
	514, 515, 518, 519, 520, 521, 522, 523, 525, 526,
	527, 528, 532, 533, 535, 536, 537, 538, 541, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 530, 0, 367, 529, 471, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 225, 0, 0, 373, 0,
	266, 0, 0, 0, 0, 166, 167, 168, 0, 489,
	0, 0, 278, 237, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	273, 0, 0, 0, 384, 250, 300, 257, 249, 497,
	0, 487, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 179, 254, 437, 0, 0,
	174, 0, 0, 0, 235, 0, 457, 580, 305, 534,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 306,
	173, 200, 0, 0, 372, 0, 443, 472, 0, 269,
	0, 262, 0, 0, 511, 211, 0, 0, 0, 0,
	413, 267, 352, 403, 0, 0, 0, 419, 509, 0,
	0, 0, 361, 0, 0, 0, 0, 201, 241, 389,
	478, 0, 463, 353, 501, 0, 318, 462, 277, 176,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	481, 506, 214, 448, 455, 436, 540, 193, 0, 475,
	0, 315, 316, 192, 0, 427, 253, 0, 0, 381,
	504, 505, 0, 555, 204, 531, 0, 205, 0, 364,
	502, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 263, 0, 0, 0, 283, 0, 0,
	0, 0, 417, 0, 458, 496, 0, 0, 0, 0,
	362, 286, 467, 319, 340, 426, 542, 0, 438, 215,
	517, 465, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 356, 0, 0, 359, 0, 461, 0,
	0, 0, 439, 0, 0, 0, 492, 0, 0, 0,
	0, 0, 0, 0, 510, 321, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 194, 335, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	289, 290, 329, 0, 0, 0, 0, 0, 0, 383,
	394, 0, 0, 430, 0, 495, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 279, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	365, 0, 378, 380, 0, 386, 0, 391, 0, 392,
	402, 406, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 447, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 503, 516, 313, 524, 242,
	281, 0, 0, 343, 0, 196, 0, 261, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 220, 468, 345,
	0, 333, 0, 198, 0, 405, 401, 285, 180, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 170, 171, 172, 177,
	178, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	195, 197, 199, 202, 203, 206, 207, 208, 209, 210,
	213, 217, 218, 219, 221, 222, 223, 224, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 227, 228,
	229, 230, 231, 232, 236, 238, 239, 240, 243, 244,
	245, 246, 247, 248, 251, 252, 255, 258, 259, 265,
	270, 271, 272, 274, 275, 276, 282, 284, 287, 288,
	291, 293, 295, 297, 298, 299, 301, 302, 303, 304,
	307, 308, 309, 310, 311, 312, 314, 322, 323, 325,
	326, 327, 328, 331, 334, 336, 338, 339, 341, 342,
	344, 347, 348, 350, 351, 354, 355, 357, 360, 363,
	366, 368, 369, 370, 371, 374, 375, 376, 377, 379,
	382, 385, 387, 388, 390, 393, 395, 396, 397, 398,
	399, 400, 404, 407, 408, 409, 410, 412, 414, 415,
	416, 418, 420, 421, 422, 423, 424, 425, 428, 429,
	431, 432, 433, 434, 435, 440, 441, 444, 445, 446,
	449, 450, 451, 452, 453, 454, 456, 459, 460, 464,
	466, 469, 470, 476, 477, 479, 480, 482, 483, 484,
	485, 488, 490, 491, 493, 494, 498, 499, 500, 507,
	508, 512, 513, 514, 515, 518, 519, 520, 521, 522,
	523, 525, 526, 527, 528, 532, 533, 535, 536, 537,
	538, 541, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 530, 0, 367, 529,
	471, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 225, 0,
	0, 373, 0, 266, 0, 0, 0, 0, 166, 167,
	168, 0, 489, 0, 0, 278, 237, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 273, 0, 0, 0, 384, 250, 300,
	257, 249, 497, 0, 487, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 0, 0, 179, 254,
	437, 0, 0, 174, 0, 0, 0, 235, 0, 457,
	0, 305, 534, 0, 0, 296, 0, 0, 0, 0,
	0, 0, 306, 173, 200, 0, 0, 372, 0, 443,
	472, 0, 269, 0, 262, 0, 0, 511, 211, 0,
	0, 0, 0, 413, 267, 352, 403, 0, 0, 0,
	419, 509, 0, 0, 0, 361, 0, 0, 0, 0,
	201, 241, 389, 478, 0, 463, 353, 501, 0, 318,
	462, 277, 176, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 481, 506, 214, 448, 455, 436, 540,
	193, 0, 475, 0, 315, 316, 192, 0, 427, 253,
	0, 0, 381, 504, 505, 0, 555, 204, 531, 0,
	205, 0, 364, 502, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 263, 0, 0, 0,
	283, 0, 0, 0, 0, 417, 0, 458, 496, 0,
	0, 0, 0, 362, 286, 467, 319, 340, 426, 542,
	0, 438, 215, 517, 465, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 356, 0, 0, 359,
	0, 461, 0, 0, 0, 439, 0, 0, 0, 492,
	0, 0, 0, 0, 0, 0, 0, 510, 321, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 194, 335, 0,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 289, 290, 329, 0, 0, 0, 0,
	0, 0, 383, 394, 0, 0, 430, 0, 495, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 279, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 2585, 0, 378, 380, 0, 386, 0,
	391, 0, 392, 402, 406, 0, 0, 411, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 447, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 503, 516,
	313, 524, 242, 281, 0, 0, 343, 0, 196, 0,
	261, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	220, 468, 345, 0, 333, 0, 198, 0, 405, 401,
	285, 180, 0, 0, 0, 0, 0, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 170,
	171, 172, 177, 178, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 195, 197, 199, 202, 203, 206, 207,
	208, 209, 210, 213, 217, 218, 219, 221, 222, 223,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 227, 228, 229, 230, 231, 232, 236, 238, 239,
	240, 243, 244, 245, 246, 247, 248, 251, 252, 255,
	258, 259, 265, 270, 271, 272, 274, 275, 276, 282,
	284, 287, 288, 291, 293, 295, 297, 298, 299, 301,
	302, 303, 304, 307, 308, 309, 310, 311, 312, 314,
	322, 323, 325, 326, 327, 328, 331, 334, 336, 338,
	339, 341, 342, 344, 347, 348, 350, 351, 354, 355,
	357, 360, 363, 366, 368, 369, 370, 371, 374, 375,
	376, 377, 379, 382, 385, 387, 388, 390, 393, 395,
	396, 397, 398, 399, 400, 404, 407, 408, 409, 410,
	412, 414, 415, 416, 418, 420, 421, 422, 423, 424,
	425, 428, 429, 431, 432, 433, 434, 435, 440, 441,
	444, 445, 446, 449, 450, 451, 452, 453, 454, 456,
	459, 460, 464, 466, 469, 470, 476, 477, 479, 480,
	482, 483, 484, 485, 488, 490, 491, 493, 494, 498,
	499, 500, 507, 508, 512, 513, 514, 515, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 532, 533,
	535, 536, 537, 538, 541, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 530,
	0, 367, 529, 471, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 225, 0, 0, 373, 0, 266, 0, 0, 0,
	0, 166, 167, 168, 0, 489, 0, 0, 278, 237,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 273, 0, 0, 0,
	384, 250, 300, 257, 249, 497, 0, 487, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	0, 179, 254, 437, 0, 0, 174, 0, 0, 0,
	235, 0, 457, 0, 305, 534, 0, 0, 296, 0,
	0, 0, 0, 0, 0, 306, 173, 200, 0, 0,
	372, 0, 443, 472, 0, 269, 0, 262, 0, 0,
	511, 211, 0, 0, 0, 0, 413, 267, 352, 403,
	0, 0, 0, 419, 509, 0, 0, 0, 361, 0,
	0, 0, 0, 201, 241, 389, 478, 0, 463, 353,
	501, 0, 318, 462, 277, 176, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 481, 506, 214, 448,
	455, 436, 540, 193, 0, 475, 0, 315, 316, 192,
	0, 427, 253, 0, 0, 381, 504, 505, 0, 555,
	204, 531, 0, 205, 0, 364, 502, 0, 0, 0,
	0, 0, 0, 0, 320, 0, 0, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 263,
	0, 0, 0, 283, 0, 0, 0, 0, 417, 0,
	458, 496, 0, 0, 0, 0, 362, 286, 467, 319,
	340, 426, 542, 0, 438, 215, 517, 465, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 356,
	0, 0, 359, 0, 461, 0, 0, 0, 439, 0,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	510, 321, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	194, 335, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 289, 290, 329, 0,
	0, 0, 0, 0, 0, 383, 394, 0, 0, 430,
	0, 495, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 279, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 365, 0, 378, 380,
	0, 386, 0, 391, 0, 392, 402, 406, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 447, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 503, 516, 313, 524, 242, 281, 0, 0, 343,
	0, 196, 0, 261, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 220, 468, 345, 0, 333, 0, 198,
	0, 405, 401, 285, 180, 0, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 170, 171, 172, 177, 178, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 195, 197, 199, 202,
	203, 206, 207, 208, 209, 210, 213, 217, 218, 219,
	221, 222, 223, 224, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 227, 228, 229, 230, 231, 232,
	236, 238, 239, 240, 243, 244, 245, 246, 247, 248,
	251, 252, 255, 258, 259, 265, 270, 271, 272, 274,
	275, 276, 282, 284, 287, 288, 291, 293, 295, 297,
	298, 299, 301, 302, 303, 304, 307, 308, 309, 310,
	311, 312, 314, 322, 323, 325, 326, 327, 328, 331,
	334, 336, 338, 339, 341, 342, 344, 347, 348, 350,
	351, 354, 355, 357, 360, 363, 366, 368, 369, 370,
	371, 374, 375, 376, 377, 379, 382, 385, 387, 388,
	390, 393, 395, 396, 397, 398, 399, 400, 404, 407,
	408, 409, 410, 412, 414, 415, 416, 418, 420, 421,
	422, 423, 424, 425, 428, 429, 431, 432, 433, 434,
	435, 440, 441, 444, 445, 446, 449, 450, 451, 452,
	453, 454, 456, 459, 460, 464, 466, 469, 470, 476,
	477, 479, 480, 482, 483, 484, 485, 488, 490, 491,
	493, 494, 498, 499, 500, 507, 508, 512, 513, 514,
	515, 518, 519, 520, 521, 522, 523, 525, 526, 527,
	528, 532, 533, 535, 536, 537, 538, 541, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 530, 0, 367, 529, 471, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 225, 0, 0, 373, 0, 266,
	0, 0, 0, 0, 166, 2368, 168, 0, 489, 0,
	0, 278, 237, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 273,
	0, 0, 0, 384, 250, 300, 257, 249, 497, 0,
	487, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 179, 254, 437, 0, 0, 174,
	0, 0, 0, 235, 0, 457, 0, 305, 534, 0,
	0, 296, 0, 0, 0, 0, 0, 0, 306, 173,
	200, 0, 0, 372, 0, 443, 472, 0, 269, 0,
	262, 0, 0, 511, 211, 0, 0, 0, 0, 413,
	267, 352, 403, 0, 0, 0, 419, 509, 0, 0,
	0, 361, 0, 0, 0, 0, 201, 241, 389, 478,
	0, 463, 353, 501, 0, 318, 462, 277, 176, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 481,
	506, 214, 448, 455, 436, 540, 193, 0, 475, 0,
	315, 316, 192, 0, 427, 253, 0, 0, 381, 504,
	505, 0, 555, 204, 531, 0, 205, 0, 364, 502,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 263, 0, 0, 0, 283, 0, 0, 0,
	0, 417, 0, 458, 496, 0, 0, 0, 0, 362,
	286, 467, 319, 340, 426, 542, 0, 438, 215, 517,
	465, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 356, 0, 0, 359, 0, 461, 0, 0,
	0, 439, 0, 0, 0, 492, 0, 0, 0, 0,
	0, 0, 0, 510, 321, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 194, 335, 0, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 289,
	290, 329, 0, 0, 0, 0, 0, 0, 383, 394,
	0, 0, 430, 0, 495, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 279, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 365,
	0, 378, 380, 0, 386, 0, 391, 0, 392, 402,
	406, 0, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 447, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 503, 516, 313, 524, 242, 281,
	0, 0, 343, 0, 196, 0, 261, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 220, 468, 345, 0,
	333, 0, 198, 0, 405, 401, 285, 180, 0, 0,
	0, 0, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 172, 177, 178,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 195,
	197, 199, 202, 203, 206, 207, 208, 209, 210, 213,
	217, 218, 219, 221, 222, 223, 224, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 227, 228, 229,
	230, 231, 232, 236, 238, 239, 240, 243, 244, 245,
	246, 247, 248, 251, 252, 255, 258, 259, 265, 270,
	271, 272, 274, 275, 276, 282, 284, 287, 288, 291,
	293, 295, 297, 298, 299, 301, 302, 303, 304, 307,
	308, 309, 310, 311, 312, 314, 322, 323, 325, 326,
	327, 328, 331, 334, 336, 338, 339, 341, 342, 344,
	347, 348, 350, 351, 354, 355, 357, 360, 363, 366,
	368, 369, 370, 371, 374, 375, 376, 377, 379, 382,
	385, 387, 388, 390, 393, 395, 396, 397, 398, 399,
	400, 404, 407, 408, 409, 410, 412, 414, 415, 416,
	418, 420, 421, 422, 423, 424, 425, 428, 429, 431,
	432, 433, 434, 435, 440, 441, 444, 445, 446, 449,
	450, 451, 452, 453, 454, 456, 459, 460, 464, 466,
	469, 470, 476, 477, 479, 480, 482, 483, 484, 485,
	488, 490, 491, 493, 494, 498, 499, 500, 507, 508,
	512, 513, 514, 515, 518, 519, 520, 521, 522, 523,
	525, 526, 527, 528, 532, 533, 535, 536, 537, 538,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 530, 0, 367, 529, 471,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 225, 0, 0,
	373, 0, 266, 0, 0, 0, 0, 166, 1961, 168,
	0, 489, 0, 0, 278, 237, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 273, 0, 0, 0, 384, 250, 300, 257,
	249, 497, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 179, 254, 437,
	0, 0, 174, 0, 0, 0, 235, 0, 457, 0,
	305, 534, 0, 0, 296, 0, 0, 0, 0, 0,
	0, 306, 173, 200, 0, 0, 372, 0, 443, 472,
	0, 269, 0, 262, 0, 0, 511, 211, 0, 0,
	0, 0, 413, 267, 352, 403, 0, 0, 0, 419,
	509, 0, 0, 0, 361, 0, 0, 0, 0, 201,
	241, 389, 478, 0, 463, 353, 501, 0, 318, 462,
	277, 176, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 481, 506, 214, 448, 455, 436, 540, 193,
	0, 475, 0, 315, 316, 192, 0, 427, 253, 0,
	0, 381, 504, 505, 0, 555, 204, 531, 0, 205,
	0, 364, 502, 0, 0, 0, 0, 0, 0, 0,
	320, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 263, 0, 0, 0, 283,
	0, 0, 0, 0, 417, 0, 458, 496, 0, 0,
	0, 0, 362, 286, 467, 319, 340, 426, 542, 0,
	438, 215, 517, 465, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 356, 0, 0, 359, 0,
	461, 0, 0, 0, 439, 0, 0, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 510, 321, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 0, 194, 335, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 289, 290, 329, 0, 0, 0, 0, 0,
	0, 383, 394, 0, 0, 430, 0, 495, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	279, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 365, 0, 378, 380, 0, 386, 0, 391,
	0, 392, 402, 406, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 447, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 503, 516, 313,
	524, 242, 281, 0, 0, 343, 0, 196, 0, 261,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 220,
	468, 345, 0, 333, 0, 198, 0, 405, 401, 285,
	180, 0, 0, 0, 0, 0, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 170, 171,
	172, 177, 178, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 195, 197, 199, 202, 203, 206, 207, 208,
	209, 210, 213, 217, 218, 219, 221, 222, 223, 224,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	227, 228, 229, 230, 231, 232, 236, 238, 239, 240,
	243, 244, 245, 246, 247, 248, 251, 252, 255, 258,
	259, 265, 270, 271, 272, 274, 275, 276, 282, 284,
	287, 288, 291, 293, 295, 297, 298, 299, 301, 302,
	303, 304, 307, 308, 309, 310, 311, 312, 314, 322,
	323, 325, 326, 327, 328, 331, 334, 336, 338, 339,
	341, 342, 344, 347, 348, 350, 351, 354, 355, 357,
	360, 363, 366, 368, 369, 370, 371, 374, 375, 376,
	377, 379, 382, 385, 387, 388, 390, 393, 395, 396,
	397, 398, 399, 400, 404, 407, 408, 409, 410, 412,
	414, 415, 416, 418, 420, 421, 422, 423, 424, 425,
	428, 429, 431, 432, 433, 434, 435, 440, 441, 444,
	445, 446, 449, 450, 451, 452, 453, 454, 456, 459,
	460, 464, 466, 469, 470, 476, 477, 479, 480, 482,
	483, 484, 485, 488, 490, 491, 493, 494, 498, 499,
	500, 507, 508, 512, 513, 514, 515, 518, 519, 520,
	521, 522, 523, 525, 526, 527, 528, 532, 533, 535,
	536, 537, 538, 541, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 530, 0,
	367, 529, 471, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	225, 0, 0, 373, 0, 266, 0, 0, 0, 0,
	166, 167, 168, 0, 1667, 0, 0, 278, 237, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 273, 0, 0, 0, 384,
	250, 300, 257, 249, 497, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
	179, 254, 437, 0, 0, 174, 0, 0, 0, 235,
	0, 457, 0, 305, 534, 0, 0, 296, 0, 0,
	0, 0, 0, 0, 306, 173, 200, 0, 0, 372,
	0, 443, 472, 0, 269, 0, 262, 0, 0, 511,
	211, 0, 0, 0, 0, 413, 267, 352, 403, 0,
	0, 0, 419, 509, 0, 0, 0, 361, 0, 0,
	0, 0, 201, 241, 389, 478, 0, 463, 353, 501,
	0, 318, 462, 277, 176, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 481, 506, 214, 448, 455,
	436, 540, 193, 0, 475, 0, 315, 316, 192, 0,
	427, 253, 0, 0, 381, 504, 505, 0, 555, 204,
	531, 0, 205, 0, 364, 502, 0, 0, 0, 0,
	0, 0, 0, 320, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 263, 0,
	0, 0, 283, 0, 0, 0, 0, 417, 0, 458,
	496, 0, 0, 0, 0, 362, 286, 467, 319, 340,
	426, 542, 0, 438, 215, 517, 465, 0, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 356, 0,
	0, 359, 0, 461, 0, 0, 0, 439, 0, 0,
	0, 492, 0, 0, 0, 0, 0, 0, 0, 510,
	321, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 194,
	335, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 289, 290, 329, 0, 0,
	0, 0, 0, 0, 383, 394, 0, 0, 430, 0,
	495, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 279, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 365, 0, 378, 380, 0,
	386, 0, 391, 0, 392, 402, 406, 0, 0, 411,
	0, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	447, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	503, 516, 313, 524, 242, 281, 0, 0, 343, 0,
	196, 0, 261, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 220, 468, 345, 0, 333, 0, 198, 0,
	405, 401, 285, 180, 0, 0, 0, 0, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 170, 171, 172, 177, 178, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 195, 197, 199, 202, 203,
	206, 207, 208, 209, 210, 213, 217, 218, 219, 221,
	222, 223, 224, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 227, 228, 229, 230, 231, 232, 236,
	238, 239, 240, 243, 244, 245, 246, 247, 248, 251,
	252, 255, 258, 259, 265, 270, 271, 272, 274, 275,
	276, 282, 284, 287, 288, 291, 293, 295, 297, 298,
	299, 301, 302, 303, 304, 307, 308, 309, 310, 311,
	312, 314, 322, 323, 325, 326, 327, 328, 331, 334,
	336, 338, 339, 341, 342, 344, 347, 348, 350, 351,
	354, 355, 357, 360, 363, 366, 368, 369, 370, 371,
	374, 375, 376, 377, 379, 382, 385, 387, 388, 390,
	393, 395, 396, 397, 398, 399, 400, 404, 407, 408,
	409, 410, 412, 414, 415, 416, 418, 420, 421, 422,
	423, 424, 425, 428, 429, 431, 432, 433, 434, 435,
	440, 441, 444, 445, 446, 449, 450, 451, 452, 453,
	454, 456, 459, 460, 464, 466, 469, 470, 476, 477,
	479, 480, 482, 483, 484, 485, 488, 490, 491, 493,
	494, 498, 499, 500, 507, 508, 512, 513, 514, 515,
	518, 519, 520, 521, 522, 523, 525, 526, 527, 528,
	532, 533, 535, 536, 537, 538, 541, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 530, 0, 367, 529, 471, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 225, 0, 0, 373, 0, 266, 0,
	0, 0, 0, 166, 167, 168, 0, 1290, 0, 0,
	278, 237, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 273, 0,
	0, 0, 384, 250, 300, 257, 249, 497, 0, 487,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 0, 179, 254, 437, 0, 0, 174, 0,
	0, 0, 235, 0, 457, 0, 305, 534, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 306, 173, 200,
	0, 0, 372, 0, 443, 472, 0, 269, 0, 262,
	0, 0, 511, 211, 0, 0, 0, 0, 413, 267,
	352, 403, 0, 0, 0, 419, 509, 0, 0, 0,
	361, 0, 0, 0, 0, 201, 241, 389, 478, 0,
	463, 353, 501, 0, 318, 462, 277, 176, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 481, 506,
	214, 448, 455, 436, 540, 193, 0, 475, 0, 315,
	316, 192, 0, 427, 253, 0, 0, 381, 504, 505,
	0, 555, 204, 531, 0, 205, 0, 364, 502, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 0, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 263, 0, 0, 0, 283, 0, 0, 0, 0,
	417, 0, 458, 496, 0, 0, 0, 0, 362, 286,
	467, 319, 340, 426, 542, 0, 438, 215, 517, 465,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 356, 0, 0, 359, 0, 461, 0, 0, 0,
	439, 0, 0, 0, 492, 0, 0, 0, 0, 0,
	0, 0, 510, 321, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 194, 335, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 289, 290,
	329, 0, 0, 0, 0, 0, 0, 383, 394, 0,
	0, 430, 0, 495, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 279, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 365, 0,
	378, 380, 0, 386, 0, 391, 0, 392, 402, 406,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 447, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 503, 516, 313, 524, 242, 281, 0,
	0, 343, 0, 196, 0, 261, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 220, 468, 345, 0, 333,
	0, 198, 0, 405, 401, 285, 180, 0, 0, 0,
	0, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 170, 171, 172, 177, 178, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 195, 197,
	199, 202, 203, 206, 207, 208, 209, 210, 213, 217,
	218, 219, 221, 222, 223, 224, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 227, 228, 229, 230,
	231, 232, 236, 238, 239, 240, 243, 244, 245, 246,
	247, 248, 251, 252, 255, 258, 259, 265, 270, 271,
	272, 274, 275, 276, 282, 284, 287, 288, 291, 293,
	295, 297, 298, 299, 301, 302, 303, 304, 307, 308,
	309, 310, 311, 312, 314, 322, 323, 325, 326, 327,
	328, 331, 334, 336, 338, 339, 341, 342, 344, 347,
	348, 350, 351, 354, 355, 357, 360, 363, 366, 368,
	369, 370, 371, 374, 375, 376, 377, 379, 382, 385,
	387, 388, 390, 393, 395, 396, 397, 398, 399, 400,
	404, 407, 408, 409, 410, 412, 414, 415, 416, 418,
	420, 421, 422, 423, 424, 425, 428, 429, 431, 432,
	433, 434, 435, 440, 441, 444, 445, 446, 449, 450,
	451, 452, 453, 454, 456, 459, 460, 464, 466, 469,
	470, 476, 477, 479, 480, 482, 483, 484, 485, 488,
	490, 491, 493, 494, 498, 499, 500, 507, 508, 512,
	513, 514, 515, 518, 519, 520, 521, 522, 523, 525,
	526, 527, 528, 532, 533, 535, 536, 537, 538, 541,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 530, 0, 367, 529, 471, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 225, 0, 0, 373,
	0, 266, 0, 0, 0, 0, 166, 167, 168, 0,
	1100, 0, 0, 278, 237, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 273, 0, 0, 0, 384, 250, 300, 257, 249,
	497, 0, 487, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 179, 254, 437, 0,
	0, 174, 0, 0, 0, 235, 0, 457, 0, 305,
	534, 0, 0, 296, 0, 0, 0, 0, 0, 0,
	306, 173, 200, 0, 0, 372, 0, 443, 472, 0,
	269, 0, 262, 0, 0, 511, 211, 0, 0, 0,
	0, 413, 267, 352, 403, 0, 0, 0, 419, 509,
	0, 0, 0, 361, 0, 0, 0, 0, 201, 241,
	389, 478, 0, 463, 353, 501, 0, 318, 462, 277,
	176, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 481, 506, 214, 448, 455, 436, 540, 193, 0,
	475, 0, 315, 316, 192, 0, 427, 253, 0, 0,
	381, 504, 505, 0, 555, 204, 531, 0, 205, 0,
	364, 502, 0, 0, 0, 0, 0, 0, 0, 320,
	0, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 263, 0, 0, 0, 283, 0,
	0, 0, 0, 417, 0, 458, 496, 0, 0, 0,
	0, 362, 286, 467, 319, 340, 426, 542, 0, 438,
	215, 517, 465, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 356, 0, 0, 359, 0, 461,
	0, 0, 0, 439, 0, 0, 0, 492, 0, 0,
	0, 0, 0, 0, 0, 510, 321, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 194, 335, 0, 0, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 289, 290, 329, 0, 0, 0, 0, 0, 0,
	383, 394, 0, 0, 430, 0, 495, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 279,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 365, 0, 378, 380, 0, 386, 0, 391, 0,
	392, 402, 406, 0, 0, 411, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 447, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 503, 516, 313, 524,
	242, 281, 0, 0, 343, 0, 196, 0, 261, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 220, 468,
	345, 0, 333, 0, 198, 0, 405, 401, 285, 180,
	0, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 170, 171, 172,
	177, 178, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 195, 197, 199, 202, 203, 206, 207, 208, 209,
	210, 213, 217, 218, 219, 221, 222, 223, 224, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 227,
	228, 229, 230, 231, 232, 236, 238, 239, 240, 243,
	244, 245, 246, 247, 248, 251, 252, 255, 258, 259,
	265, 270, 271, 272, 274, 275, 276, 282, 284, 287,
	288, 291, 293, 295, 297, 298, 299, 301, 302, 303,
	304, 307, 308, 309, 310, 311, 312, 314, 322, 323,
	325, 326, 327, 328, 331, 334, 336, 338, 339, 341,
	342, 344, 347, 348, 350, 351, 354, 355, 357, 360,
	363, 366, 368, 369, 370, 371, 374, 375, 376, 377,
	379, 382, 385, 387, 388, 390, 393, 395, 396, 397,
	398, 399, 400, 404, 407, 408, 409, 410, 412, 414,
	415, 416, 418, 420, 421, 422, 423, 424, 425, 428,
	429, 431, 432, 433, 434, 435, 440, 441, 444, 445,
	446, 449, 450, 451, 452, 453, 454, 456, 459, 460,
	464, 466, 469, 470, 476, 477, 479, 480, 482, 483,
	484, 485, 488, 490, 491, 493, 494, 498, 499, 500,
	507, 508, 512, 513, 514, 515, 518, 519, 520, 521,
	522, 523, 525, 526, 527, 528, 532, 533, 535, 536,
	537, 538, 541, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 530, 0, 367,
	529, 471, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 225,
	0, 0, 373, 0, 266, 0, 0, 0, 0, 166,
	167, 168, 0, 489, 0, 0, 278, 237, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 273, 0, 0, 0, 384, 250,
	300, 257, 249, 497, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 179,
	254, 437, 0, 0, 174, 0, 0, 0, 235, 0,
	457, 0, 305, 534, 0, 0, 296, 0, 0, 0,
	0, 0, 0, 306, 173, 200, 0, 0, 372, 0,
	443, 472, 0, 269, 0, 262, 0, 0, 511, 211,
	0, 0, 0, 0, 413, 267, 352, 403, 0, 0,
	0, 419, 509, 0, 0, 0, 361, 0, 0, 0,
	0, 201, 241, 389, 478, 0, 463, 353, 501, 0,
	318, 462, 277, 176, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 481, 506, 214, 448, 455, 436,
	540, 193, 0, 475, 0, 315, 316, 192, 0, 427,
	253, 0, 0, 381, 504, 505, 0, 555, 204, 531,
	0, 205, 0, 364, 502, 0, 0, 0, 0, 0,
	0, 0, 320, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 263, 0, 0,
	0, 283, 0, 0, 0, 0, 417, 0, 458, 496,
	0, 0, 0, 0, 362, 286, 467, 319, 340, 426,
	542, 0, 438, 215, 517, 465, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 356, 0, 0,
	359, 0, 461, 0, 0, 0, 439, 0, 0, 0,
	492, 0, 0, 0, 0, 0, 0, 0, 510, 321,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 194, 335,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 289, 290, 329, 0, 0, 0,
	0, 0, 0, 383, 394, 0, 0, 803, 0, 495,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 279, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 365, 0, 378, 380, 0, 386,
	0, 391, 0, 392, 402, 406, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 447,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 503,
	516, 0, 0, 0, 281, 0, 0, 343, 0, 0,
	0, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 486,
}

var psqPact = [...]int{
	3273, -1000, -692, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1562, 1582, -1000, 1479,
	-1000, -1000, -1000, 1686, -1000, 250, 902, -1000, 1519, 2635,
	-1000, 43159, 47, -1000, 41553, 46, -176, 43159, -1000, -173,
	-1000, -181, 43159, -177, 30289, -1000, -1000, -615, 13053, 1363,
	-290, -291, 43159, -1000, -1000, -1000, 1663, 947, -1000, 276,
	-1000, -1000, -1000, -1000, -1000, -1000, 47977, -1000, -1000, -1000,
	-1000, -1000, 1694, 164, 43159, -1000, 1603, 947, -1000, 13053,
	1616, 1590, -1000, 11425, -1000, 11425, 16, -1000, -1000, 20603,
	-1000, -1000, 27880, 43159, 35910, -27, -1000, 1519, -1000, -1000,
	-1000, -220, -1000, -1000, 763, 760, -1000, -1000, 473, 180,
	8, -1, -1, 35, 1496, 1487, 285, 261, 191, -1000,
	500, 193, 193, -461, -464, -1000, -34, 193, 193, 193,
	-117, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	12, 1519, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43159, -168,
	43159, -1000, 93, 43159, 605, 605, -278, 605, 605, 605,
	-169, 451, -292, -1000, -171, -126, -166, -124, 568, -133,
	-1000, -189, -1000, 18919, -129, 18919, -1000, 1510, -1000, -1000,
	-1000, -1000, 382, -1000, 34, -1000, -1000, -1000, -1000, -1000,
	43159, 47174, 281, 220, -1000, -1000, -1000, -1000, -235, -1000,
	-1000, 508, 649, 13053, 396, -1000, 513, 144, -1000, -1000,
	-1000, -1000, -1000, 72, 13867, 13867, 13867, 13867, -1000, -1000,
	548, 548, 548, 548, 13867, 548, 22259, 548, 548, 548,
	548, 13053, 548, 548, 548, -1000, 548, 548, 548, 548,
	548, 548, 548, 548, 548, 548, 548, 548, 548, 548,
	548, 548, 548, 548, 548, 548, 548, 548, 548, 548,
	548, 548, 548, 548, 548, 548, 548, 548, 548, 548,
	548, 548, 548, 548, 548, 548, 92, 548, 548, 548,
	548, 548, -1000, -1000, -1000, -1000, 548, 548, 548, 548,
	548, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 27077, -1000, 9797, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43159, -1000, 548, 43159, 43159, -81,
	1603, 947, -1000, 1663, 1611, 276, -1000, 1540, 1261, 824,
	401, 947, 715, 43159, -1000, 766, -1000, 1140, -1000, -1000,
	-1000, -1000, -1000, 872, 13053, -1000, -1000, 1357, 1650, -1000,
	26274, 91, 1477, 1646, 40750, -1000, 16, 16, 758, 19761,
	-320, -1000, -1000, -1000, 219, 39947, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1510, 982, 43159, -1000, -1000, 4275, 514, -1000,
	900, -1000, 958, -1000, 796, 13053, 940, 45, 514, 42,
	40, 39, -1000, -392, -1000, -1000, -1000, -1000, -1000, -1000,
	193, 193, 193, 2422, 2635, -1000, -1000, -1000, -1000, 39133,
	514, -1000, 876, -1000, 319, 115, 137, 137, 514, -1000,
	-1000, 43159, 514, 514, 43159, 43159, -21, -1000, -1000, -1000,
	-1000, 43159, 514, 317, 312, 514, 514, 43159, 514, -1000,
	-1000, 1299, -1000, 1094, -1000, -1000, 193, 193, 460, 457,
	447, 193, 446, -108, 1529, 436, 139, 1525, 1521, 43159,
	864, 43159, -1000, -131, 233, 218, 1519, 752, 31, 44,
	514, 9, 9, 43159, -1000, 21445, -1000, -1000, 435, 13053,
	-1000, 572, 568, 568, -1000, -1000, -1000, -1000, -1000, 605,
	43159, 572, -1000, -1000, -1000, 568, 605, 43159, 605, 605,
	605, 605, 568, 568, 568, 605, 43159, 43159, 43159, 43159,
	43159, 43159, 43159, 43159, 43159, 18919, -1000, 1364, -1000, -1000,
	-1000, 18919, 18919, -1000, -1000, -1000, -178, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -407, 748, 38330, -1000,
	-630, -632, -633, -1000, -1000, -1000, -635, -636, -1000, -1000,
	-1000, 13053, 13053, 13053, -485, -1000, 379, 13867, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 424, 238, 13867, 13867, 13867,
	1450, 13867, 13867, 13867, 13867, 13867, 13867, 13867, 13867, 13867,
	13867, 13867, 13867, 33501, 6189, 6189, 144, 144, 144, 144,
	-1000, 11425, 13053, 13053, 144, -1000, 514, 37527, 11425, 11425,
	13053, 1495, 230, 649, 43159, -1000, 401, -1000, -1000, -1000,
	428, -1000, 43159, 43159, -244, 13053, 13053, 13053, 13053, 13053,
	13053, 8983, 13053, 13053, 13053, 13053, 13053, 13053, 13053, 13053,
	13053, 13053, 13053, 13053, 13053, 13053, 13053, 13053, 13053, 13053,
	13053, 13053, 13053, 13053, 13053, 13053, 13053, 13053, 8169, 21445,
	11425, 11425, 11425, 11425, 11425, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 88, 865, 807,
	597, -1000, 740, -1000, -468, 31092, 13053, 1642, 998, 43159,
	-1000, -1000, -1000, 1603, -1000, 1603, 865, 1514, 1144, 11425,
	-1000, -1000, 1514, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 401, -1000, 43159, 715, 1579, 43159, 1134, 13053, 13053,
	704, -1000, 867, 51, -1000, 43159, -1000, -1000, 46371, -1000,
	-1000, 18077, 43159, 275, 43159, -1000, 29486, 36724, 17235, -320,
	-1000, 17235, 610, -1000, -304, -343, 12239, 142, -1000, -1000,
	-1000, 473, 23865, 481, 142, -257, -1000, -1000, -1000, 796,
	-1000, 796, 796, 796, 796, 25, 25, 25, 25, -1000,
	-1000, -1000, -1000, -1000, 832, 830, -1000, 796, 796, 796,
	796, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -10, -1000, 13053, -92, 35910, 1547, 375,
	952, -131, 13, 965, 514, 514, 514, 13, -1000, 706,
	598, 573, 1614, -1000, -1000, 690, -1000, 43159, -157, -1000,
	-16, -1000, 35910, 514, 302, 137, 514, -1000, 514, -1000,
	-1000, 536, -139, -555, 43159, -157, 33501, -1000, -1000, -1000,
	514, -1000, -1000, -1000, 24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 33501, 33501, -1000, -1000, -1000, 430, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -691, 43159, -1000, -138, 209,
	-91, -46, -72, 43159, -67, 43159, 43159, 9, 1073, 43159,
	1551, 43159, -1000, -1000, -1000, -1000, -1000, 649, 43159, -1000,
	-1000, 605, 605, -1000, -1000, 43159, 605, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 605, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43159, -1000, -1000,
	-1000, -1000, 43159, -1000, -1000, -1000, -1000, -215, -307, 251,
	-1000, -1000, -1000, -1000, 1600, -1000, 649, 240, -1000, 548,
	-1000, -1000, 346, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	424, 13867, 13867, 13867, 1321, 49, 919, 424, 320, 341,
	371, 371, 277, 277, 150, 150, 150, 150, 150, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 427, -1000,
	788, -1000, 635, 726, 401, -1000, 788, 788, 674, 11425,
	-1000, -1000, 288, -1000, 13053, 401, -1000, -1000, 401, 681,
	676, 1638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 649, 952, 952, 952, 952, 952, 13053,
	718, -1000, -1000, -1000, 1379, 1365, 401, 508, 401, 673,
	-1000, 1360, 952, 1359, 1330, 1327, 780, 1269, 1257, 1253,
	952, 952, 952, 882, 1249, 1248, 1230, 1217, 1178, 1170,
	1159, 1151, 1087, 952, 401, 11425, 11425, 621, 548, 81,
	-1000, 788, 401, 401, 788, 788, 21445, -1000, 43159, -1000,
	-619, -1000, -355, 182, -1000, 45568, -1000, -1000, 401, 5913,
	-1000, 44765, -1000, -1000, -1000, -1000, -1000, 35107, 890, 1514,
	-1000, -1000, 548, 937, -1000, -1000, 649, 649, 13053, -1000,
	-1000, -1000, 181, 514, -1000, -1000, -1000, 79, 1628, 1071,
	43159, 548, -1000, 25471, -1000, 803, 1142, -1000, -1000, -1000,
	1576, 24668, -1000, 548, 548, 43159, 1086, 1056, -1000, 78,
	-1000, 610, -320, -335, -1000, -1000, -1000, -1000, 649, -1000,
	565, -1000, 389, -1000, -7, -1000, -1000, -1000, -1000, -1000,
	-1000, 1461, -267, -1000, -1000, -1000, -130, 25, -1000, -1000,
	-1000, 34304, 140, 140, -240, -1000, -1000, -1000, 425, 425,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	961, 1238, -92, -1000, -1000, 422, -1000, -1000, 1466, 43159,
	-1000, -1000, 469, 1547, -138, 43159, 237, 1069, -1000, 965,
	965, 965, 43159, -1000, -1000, -1000, -1000, -1000, -1000, 43159,
	179, 835, -1000, -159, -1000, -1000, 793, 817, 514, 514,
	-1000, -1000, 1517, 173, -1000, -1000, -506, -1000, -1000, -157,
	-159, 142, -1000, 514, -1000, -1000, -1000, -1000, -694, 791,
	26, -148, -40, 43159, 43159, 43159, 43159, 43159, 63, -1000,
	-1000, -1000, 21, -1000, 43159, 43159, 157, -1000, -1000, -1000,
	568, -1000, -1000, 568, -1000, -1000, -1000, -1000, -1000, 1507,
	43159, -323, -661, -1000, -658, 13053, -1000, -1000, -1000, -1000,
	1263, 18, 919, 13867, 13867, -1000, -1000, 11425, -427, 265,
	265, 33501, -1000, -1000, -1000, 13053, 13053, 827, 226, -1000,
	13053, 714, -1000, -1000, 13053, 13053, 13053, 401, -1000, -1000,
	-1000, -1000, -1000, 1630, -1000, 13053, 13053, 13053, -1000, -1000,
	13053, 13053, -1000, 13053, 13053, 23062, 401, 23062, 13053, 13053,
	23062, -1000, -1000, -1000, -1000, 23062, 13053, 13053, 13053, 13053,
	13053, 13053, 13053, 13053, 13053, -1000, -1000, 788, 788, 11425,
	21445, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 182, -1000, 137, 137, 137, -1000, -1000, -1000, -1000,
	-1000, -1000, 608, 1594, -1000, 1148, 1628, -1000, 29486, 1514,
	-1000, -1000, 43159, -1000, 6189, -1000, -1000, 16393, 1603, 13053,
	-1000, 1531, 574, -1000, 194, 530, -1000, -1000, 10611, 786,
	1147, 77, 43159, 29486, 29486, 29486, 29486, 29486, -1000, 1099,
	1098, -1000, 1117, 1109, 1121, 43159, -1000, 744, 401, 1611,
	24668, 276, 13053, 31092, 488, 29486, -1000, -1000, 29486, 43159,
	15551, -1000, -1000, -330, -354, -1000, -1000, -1000, 473, -1000,
	-1000, 152, 1568, 1457, -1000, -1000, -1000, -1000, -1000, 140,
	140, -1000, -1000, -1000, -1000, -1000, -1000, 738, -1000, 664,
	-139, -1000, 925, 1506, 193, 193, -1000, -1000, 514, -1000,
	-1000, -1000, 19, -1000, 1545, 43159, 1053, 1052, 1050, -1000,
	570, 1613, 43159, -1000, -1000, 43159, -92, 43159, -1000, -1000,
	-1000, 5217, -1000, -1000, -1000, -159, -1000, -1000, -1000, -1000,
	-1000, -1000, 43159, -145, -1000, 810, 376, -1000, -1000, 951,
	-1000, -1000, -1000, -1000, -146, -113, 43159, 146, 1238, 43159,
	-1000, -1000, -1000, 605, 605, -1000, -1000, 1500, -1000, 514,
	952, 13867, 13867, -1000, 144, -1000, 548, 401, 796, 796,
	-1000, 796, -1000, -1000, 796, -188, 796, -192, 796, -1000,
	-1000, 401, 401, 878, 811, -399, -1000, 649, 13053, 1063,
	1034, 952, -1000, 13053, 952, 952, 952, -1000, 649, 780,
	894, 556, -1000, -1000, -1000, -1000, 603, 952, 885, -601,
	401, 628, 628, 628, 628, 628, 597, 597, 597, 597,
	-1000, -1000, 401, -1000, -1000, 1583, 1583, 1583, 43962, 43159,
	-1000, -1000, -1000, 1623, 578, -1000, -1000, -1000, -1000, -1000,
	649, 301, -1000, 43159, 13053, 548, -1000, 287, 43159, 548,
	43159, 975, 1142, 996, 1048, 1482, -1000, -1000, -1000, -1000,
	1091, -1000, 1085, -1000, -1000, 766, -1000, -1000, 807, 401,
	860, 1628, 29486, 819, 819, -1000, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 349, 6692, 1693, -1000, 421, -1000,
	547, 133, 373, -1000, -1000, -1000, 291, 254, -1000, 43159,
	785, -1000, -1000, -1000, 25, 404, 25, -1000, -1000, -1000,
	-1000, 1011, 1244, -1000, 43159, -1000, -1000, 43159, 43159, 43159,
	43159, -1000, -1000, -1000, 558, -1000, 13053, -1000, -1000, -1000,
	484, 484, -1000, -1000, -1000, 766, -1000, -1000, -1000, 466,
	-1000, -1000, -444, 43159, 43159, 43159, 43159, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 144, 13867, -1000,
	-1000, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13053, -1000, 13053, -1000, 1603, 398, 649, 13053, 13053,
	-1000, 952, -1000, -1000, -1000, 401, 23062, -1000, 23062, -1000,
	13053, 148, 265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 548, 1463, 548, 548, -1000, -1000,
	1621, 1608, 1683, -1000, 649, -1000, 548, -1000, 71, 530,
	-1000, 1619, -1000, -1000, 13053, 770, -1000, 13053, -1000, -1000,
	-1000, -1000, -1000, -1000, 6189, 1619, 819, -1000, -1000, 153,
	-1000, 13053, -1000, -1000, -1000, 2492, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 768, 13053, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 766,
	-1000, -1000, -1000, 570, -28, 952, -1000, -1000, 1567, -1000,
	-1000, 21445, -1000, -1000, 566, 960, -1000, -86, -1000, 952,
	952, 401, -1000, 952, 952, -1000, -1000, 556, -1000, 772,
	-1000, 148, 401, 1046, -1000, -1000, 6189, -1000, 28683, -1000,
	1607, 1605, 32698, 32698, -1000, 13053, 13053, 43159, 530, 43159,
	1603, 649, 43159, 649, -272, 1603, -1000, 952, -1000, 548,
	548, 548, 548, 548, 43159, 856, 1565, -1000, -1000, 276,
	515, -1000, 189, 43159, 43159, 401, -48, -448, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13053, -1000, 401, 1040, -1000,
	-554, -1000, 540, -1000, -1000, -1000, -1000, -1000, 540, 540,
	649, 508, 501, -1000, -1000, 527, 401, 548, -1000, -1000,
	523, -1000, 276, -443, 21445, 14709, 512, -1000, -1000, 1130,
	-441, -457, 780, -1000, -649, -1000, -1000, 31895, -1000, -1000,
	-1000, -1000, 31092, 42356, -425, -87, -443, -1000, -349, -1000,
	-1000, -1000, -1000, -1000, 951, -1000, 1090, -1000, 401, -1000,
	-1000, -1000, 472, -1000, 2449, -538, 1035, -1000, -403, -1000,
	-1000, -1000, 299, 395, -1000, -1000, -1000, -1000, -1000, -1000,
	-12, -1000, -1000, -444, -445, -1000, -1000, 42356, -533, 142,
	6189, -1000, 1027, 1015, 1661, -1000, -1000, -1000, -1000, -1000,
	-1000, -136, -1000, -455, -1000, -1000, 1536, -272, -1000, 1664,
	-1000, 1655, 526, 526, -1000, -458, -539, -1000, -1000, -1000,
	-1000, -1000, -29, 686, -1000, -1000, 6189, -1000, -1000, -1000,
	151, 151, -1000, -1000,
}

var psqPgo = [...]int{
	0, 2065, 22, 85, 243, 26, 226, 112, 2064, 2063,
	2061, 2060, 2058, 2057, 2056, 388, 382, 369, 2055, 2051,
	2050, 2049, 2048, 2047, 2045, 2044, 2042, 2036, 2030, 379,
	147, 221, 2028, 2018, 2017, 2013, 97, 156, 72, 69,
	158, 2009, 2008, 54, 2007, 2005, 2002, 169, 168, 167,
	1488, 2000, 153, 94, 1999, 1993, 1992, 1991, 1990, 1989,
	1988, 1986, 1985, 1983, 1981, 1975, 1974, 1972, 1971, 166,
	1491, 1970, 15, 1967, 56, 1964, 1963, 1961, 1960, 1959,
	1950, 1949, 1948, 128, 1947, 1946, 1945, 254, 1944, 1943,
	385, 106, 90, 1942, 1940, 92, 154, 1938, 103, 1937,
	1936, 1935, 139, 1933, 5760, 1932, 45, 42, 1930, 49,
	64, 41, 39, 5, 9, 1924, 1918, 44, 60, 1916,
	1915, 70, 1911, 91, 84, 1910, 1909, 16, 7, 1906,
	2, 6, 3, 33, 1900, 1899, 111, 1897, 1896, 1895,
	82, 1894, 1893, 67, 1892, 75, 125, 89, 51, 1887,
	1886, 34, 1884, 1881, 1880, 1879, 1878, 30, 1876, 1875,
	1874, 127, 19, 157, 38, 35, 53, 123, 1873, 61,
	62, 1872, 124, 129, 1871, 1869, 1864, 37, 1863, 32,
	119, 101, 50, 80, 1862, 1860, 1535, 244, 1859, 47,
	1858, 28, 27, 1857, 86, 29, 1856, 143, 1855, 46,
	149, 107, 144, 1854, 1851, 1850, 1849, 173, 1848, 1843,
	1832, 148, 130, 138, 76, 1831, 389, 1829, 1828, 81,
	2738, 1431, 3253, 25, 146, 1823, 1820, 1819, 4325, 131,
	121, 24, 1805, 189, 1804, 1803, 1802, 252, 155, 83,
	1484, 48, 1801, 1799, 12, 1798, 1796, 1795, 1794, 1782,
	1781, 78, 386, 43, 11, 71, 152, 59, 1778, 1776,
	105, 77, 1775, 145, 136, 117, 116, 1774, 150, 133,
	98, 1773, 79, 1771, 1770, 1769, 1768, 74, 1767, 1766,
	1764, 1761, 142, 137, 104, 66, 1756, 68, 99, 134,
	141, 21, 1755, 13, 36, 40, 20, 93, 96, 1754,
	0, 1753, 14, 151, 381, 1569, 1740, 1736, 4, 8,
	10, 1735, 1733, 1732, 1724, 126, 1723, 1722, 1718, 1717,
	18, 31, 17, 1, 1714, 1713, 5395, 4271, 108, 1711,
	1707, 299,
}

//line psql.y:6283
type psqSymType struct {
	union             any
	empty             struct{}
	LengthScaleOption ast.LengthScaleOption
	tableName         ast.TableName
	tableIdent        ast.TableIdent
	str               string
	strs              []string
	vindexParam       ast.VindexParam
	jsonObjectParam   *ast.JSONObjectParam
	colIdent          ast.ColIdent
	joinCondition     *ast.JoinCondition
	databaseOption    ast.DatabaseOption
	columnType        ast.ColumnType
	columnCharset     ast.ColumnCharset
	jsonPathParam     ast.JSONPathParam
	schemaIdent       ast.SchemaIdent
	schemaName        ast.SchemaName
	yys               int
}

func (st *psqSymType) JSONTableExprUnion() *ast.JSONTableExpr {
	v, _ := st.union.(*ast.JSONTableExpr)
	return v
}

func (st *psqSymType) aliasedTableNameUnion() *ast.AliasedTableExpr {
	v, _ := st.union.(*ast.AliasedTableExpr)
	return v
}

func (st *psqSymType) alterDatabaseUnion() *ast.AlterDatabase {
	v, _ := st.union.(*ast.AlterDatabase)
	return v
}

func (st *psqSymType) alterMigrationUnion() *ast.AlterMigration {
	v, _ := st.union.(*ast.AlterMigration)
	return v
}

func (st *psqSymType) alterOptionUnion() ast.AlterOption {
	v, _ := st.union.(ast.AlterOption)
	return v
}

func (st *psqSymType) alterOptionsUnion() []ast.AlterOption {
	v, _ := st.union.([]ast.AlterOption)
	return v
}

func (st *psqSymType) alterTableUnion() *ast.AlterTable {
	v, _ := st.union.(*ast.AlterTable)
	return v
}

func (st *psqSymType) boolValUnion() ast.BoolVal {
	v, _ := st.union.(ast.BoolVal)
	return v
}

func (st *psqSymType) booleanUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *psqSymType) characteristicUnion() ast.Characteristic {
	v, _ := st.union.(ast.Characteristic)
	return v
}

func (st *psqSymType) characteristicsUnion() []ast.Characteristic {
	v, _ := st.union.([]ast.Characteristic)
	return v
}

func (st *psqSymType) colKeyOptUnion() ast.ColumnKeyOption {
	v, _ := st.union.(ast.ColumnKeyOption)
	return v
}

func (st *psqSymType) colNameUnion() *ast.ColName {
	v, _ := st.union.(*ast.ColName)
	return v
}

func (st *psqSymType) colTupleUnion() ast.ColTuple {
	v, _ := st.union.(ast.ColTuple)
	return v
}

func (st *psqSymType) columnDefinitionUnion() *ast.ColumnDefinition {
	v, _ := st.union.(*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnDefinitionsUnion() []*ast.ColumnDefinition {
	v, _ := st.union.([]*ast.ColumnDefinition)
	return v
}

func (st *psqSymType) columnFormatUnion() ast.ColumnFormat {
	v, _ := st.union.(ast.ColumnFormat)
	return v
}

func (st *psqSymType) columnStorageUnion() ast.ColumnStorage {
	v, _ := st.union.(ast.ColumnStorage)
	return v
}

func (st *psqSymType) columnTypeOptionsUnion() *ast.ColumnTypeOptions {
	v, _ := st.union.(*ast.ColumnTypeOptions)
	return v
}

func (st *psqSymType) columnsUnion() ast.Columns {
	v, _ := st.union.(ast.Columns)
	return v
}

func (st *psqSymType) commentExprUnion() *ast.CommentOnSchema {
	v, _ := st.union.(*ast.CommentOnSchema)
	return v
}

func (st *psqSymType) comparisonExprOperatorUnion() ast.ComparisonExprOperator {
	v, _ := st.union.(ast.ComparisonExprOperator)
	return v
}

func (st *psqSymType) constraintDefinitionUnion() *ast.ConstraintDefinition {
	v, _ := st.union.(*ast.ConstraintDefinition)
	return v
}

func (st *psqSymType) constraintInfoUnion() ast.ConstraintInfo {
	v, _ := st.union.(ast.ConstraintInfo)
	return v
}

func (st *psqSymType) convertTypeUnion() *ast.ConvertType {
	v, _ := st.union.(*ast.ConvertType)
	return v
}

func (st *psqSymType) createDatabaseUnion() *ast.CreateDatabase {
	v, _ := st.union.(*ast.CreateDatabase)
	return v
}

func (st *psqSymType) createTableUnion() *ast.CreateTable {
	v, _ := st.union.(*ast.CreateTable)
	return v
}

func (st *psqSymType) cteUnion() *ast.CommonTableExpr {
	v, _ := st.union.(*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) ctesUnion() []*ast.CommonTableExpr {
	v, _ := st.union.([]*ast.CommonTableExpr)
	return v
}

func (st *psqSymType) databaseOptionsUnion() []ast.DatabaseOption {
	v, _ := st.union.([]ast.DatabaseOption)
	return v
}

func (st *psqSymType) definerUnion() *ast.Definer {
	v, _ := st.union.(*ast.Definer)
	return v
}

func (st *psqSymType) derivedTableUnion() *ast.DerivedTable {
	v, _ := st.union.(*ast.DerivedTable)
	return v
}

func (st *psqSymType) explainTypeUnion() ast.ExplainType {
	v, _ := st.union.(ast.ExplainType)
	return v
}

func (st *psqSymType) exprUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) exprsUnion() ast.Exprs {
	v, _ := st.union.(ast.Exprs)
	return v
}

func (st *psqSymType) ignoreUnion() ast.Ignore {
	v, _ := st.union.(ast.Ignore)
	return v
}

func (st *psqSymType) indexColumnUnion() *ast.IndexColumn {
	v, _ := st.union.(*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexColumnsUnion() []*ast.IndexColumn {
	v, _ := st.union.([]*ast.IndexColumn)
	return v
}

func (st *psqSymType) indexDefinitionUnion() *ast.IndexDefinition {
	v, _ := st.union.(*ast.IndexDefinition)
	return v
}

func (st *psqSymType) indexHintUnion() *ast.IndexHint {
	v, _ := st.union.(*ast.IndexHint)
	return v
}

func (st *psqSymType) indexHintForTypeUnion() ast.IndexHintForType {
	v, _ := st.union.(ast.IndexHintForType)
	return v
}

func (st *psqSymType) indexHintsUnion() ast.IndexHints {
	v, _ := st.union.(ast.IndexHints)
	return v
}

func (st *psqSymType) indexInfoUnion() *ast.IndexInfo {
	v, _ := st.union.(*ast.IndexInfo)
	return v
}

func (st *psqSymType) indexOptionUnion() *ast.IndexOption {
	v, _ := st.union.(*ast.IndexOption)
	return v
}

func (st *psqSymType) indexOptionsUnion() []*ast.IndexOption {
	v, _ := st.union.([]*ast.IndexOption)
	return v
}

func (st *psqSymType) insUnion() *ast.Insert {
	v, _ := st.union.(*ast.Insert)
	return v
}

func (st *psqSymType) insertActionUnion() ast.InsertAction {
	v, _ := st.union.(ast.InsertAction)
	return v
}

func (st *psqSymType) integerUnion() int {
	v, _ := st.union.(int)
	return v
}

func (st *psqSymType) intervalTypeUnion() ast.IntervalTypes {
	v, _ := st.union.(ast.IntervalTypes)
	return v
}

func (st *psqSymType) isExprOperatorUnion() ast.IsExprOperator {
	v, _ := st.union.(ast.IsExprOperator)
	return v
}

func (st *psqSymType) isolationLevelUnion() ast.IsolationLevel {
	v, _ := st.union.(ast.IsolationLevel)
	return v
}

func (st *psqSymType) joinTypeUnion() ast.JoinType {
	v, _ := st.union.(ast.JoinType)
	return v
}

func (st *psqSymType) jsonObjectParamsUnion() []*ast.JSONObjectParam {
	v, _ := st.union.([]*ast.JSONObjectParam)
	return v
}

func (st *psqSymType) jsonPathParamsUnion() []ast.JSONPathParam {
	v, _ := st.union.([]ast.JSONPathParam)
	return v
}

func (st *psqSymType) jtColumnDefinitionUnion() *ast.JtColumnDefinition {
	v, _ := st.union.(*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtColumnListUnion() []*ast.JtColumnDefinition {
	v, _ := st.union.([]*ast.JtColumnDefinition)
	return v
}

func (st *psqSymType) jtOnResponseUnion() *ast.JtOnResponse {
	v, _ := st.union.(*ast.JtOnResponse)
	return v
}

func (st *psqSymType) limitUnion() *ast.Limit {
	v, _ := st.union.(*ast.Limit)
	return v
}

func (st *psqSymType) literalUnion() *ast.Literal {
	v, _ := st.union.(*ast.Literal)
	return v
}

func (st *psqSymType) lockUnion() ast.Lock {
	v, _ := st.union.(ast.Lock)
	return v
}

func (st *psqSymType) lockTypeUnion() ast.LockType {
	v, _ := st.union.(ast.LockType)
	return v
}

func (st *psqSymType) matchActionUnion() ast.MatchAction {
	v, _ := st.union.(ast.MatchAction)
	return v
}

func (st *psqSymType) matchExprOptionUnion() ast.MatchExprOption {
	v, _ := st.union.(ast.MatchExprOption)
	return v
}

func (st *psqSymType) optLikeUnion() *ast.OptLike {
	v, _ := st.union.(*ast.OptLike)
	return v
}

func (st *psqSymType) optValUnion() ast.Expr {
	v, _ := st.union.(ast.Expr)
	return v
}

func (st *psqSymType) orderUnion() *ast.Order {
	v, _ := st.union.(*ast.Order)
	return v
}

func (st *psqSymType) orderByUnion() ast.OrderBy {
	v, _ := st.union.(ast.OrderBy)
	return v
}

func (st *psqSymType) orderDirectionUnion() ast.OrderDirection {
	v, _ := st.union.(ast.OrderDirection)
	return v
}

func (st *psqSymType) referenceActionUnion() ast.ReferenceAction {
	v, _ := st.union.(ast.ReferenceAction)
	return v
}

func (st *psqSymType) referenceDefinitionUnion() *ast.ReferenceDefinition {
	v, _ := st.union.(*ast.ReferenceDefinition)
	return v
}

func (st *psqSymType) renameTablePairsUnion() []*ast.RenameTablePair {
	v, _ := st.union.([]*ast.RenameTablePair)
	return v
}

func (st *psqSymType) revertMigrationUnion() *ast.RevertMigration {
	v, _ := st.union.(*ast.RevertMigration)
	return v
}

func (st *psqSymType) scopeUnion() ast.Scope {
	v, _ := st.union.(ast.Scope)
	return v
}

func (st *psqSymType) selStmtUnion() ast.SelectStatement {
	v, _ := st.union.(ast.SelectStatement)
	return v
}

func (st *psqSymType) selectExprUnion() ast.SelectExpr {
	v, _ := st.union.(ast.SelectExpr)
	return v
}

func (st *psqSymType) selectExprsUnion() ast.SelectExprs {
	v, _ := st.union.(ast.SelectExprs)
	return v
}

func (st *psqSymType) selectIntoUnion() *ast.SelectInto {
	v, _ := st.union.(*ast.SelectInto)
	return v
}

func (st *psqSymType) setExprUnion() *ast.SetExpr {
	v, _ := st.union.(*ast.SetExpr)
	return v
}

func (st *psqSymType) setExprsUnion() ast.SetExprs {
	v, _ := st.union.(ast.SetExprs)
	return v
}

func (st *psqSymType) showFilterUnion() *ast.ShowFilter {
	v, _ := st.union.(*ast.ShowFilter)
	return v
}

func (st *psqSymType) statementUnion() ast.Statement {
	v, _ := st.union.(ast.Statement)
	return v
}

func (st *psqSymType) subqueryUnion() *ast.Subquery {
	v, _ := st.union.(*ast.Subquery)
	return v
}

func (st *psqSymType) tableAndLockTypeUnion() *ast.TableAndLockType {
	v, _ := st.union.(*ast.TableAndLockType)
	return v
}

func (st *psqSymType) tableAndLockTypesUnion() ast.TableAndLockTypes {
	v, _ := st.union.(ast.TableAndLockTypes)
	return v
}

func (st *psqSymType) tableExprUnion() ast.TableExpr {
	v, _ := st.union.(ast.TableExpr)
	return v
}

func (st *psqSymType) tableExprsUnion() ast.TableExprs {
	v, _ := st.union.(ast.TableExprs)
	return v
}

func (st *psqSymType) tableNamesUnion() ast.TableNames {
	v, _ := st.union.(ast.TableNames)
	return v
}

func (st *psqSymType) tableOptionUnion() *ast.TableOption {
	v, _ := st.union.(*ast.TableOption)
	return v
}

func (st *psqSymType) tableOptionsUnion() ast.TableOptions {
	v, _ := st.union.(ast.TableOptions)
	return v
}

func (st *psqSymType) tableSpecUnion() *ast.TableSpec {
	v, _ := st.union.(*ast.TableSpec)
	return v
}

func (st *psqSymType) trimTypeUnion() ast.TrimType {
	v, _ := st.union.(ast.TrimType)
	return v
}

func (st *psqSymType) updateExprUnion() *ast.UpdateExpr {
	v, _ := st.union.(*ast.UpdateExpr)
	return v
}

func (st *psqSymType) updateExprsUnion() ast.UpdateExprs {
	v, _ := st.union.(ast.UpdateExprs)
	return v
}

func (st *psqSymType) valTupleUnion() ast.ValTuple {
	v, _ := st.union.(ast.ValTuple)
	return v
}

func (st *psqSymType) valuesUnion() ast.Values {
	v, _ := st.union.(ast.Values)
	return v
}

func (st *psqSymType) vindexParamsUnion() []ast.VindexParam {
	v, _ := st.union.([]ast.VindexParam)
	return v
}

func (st *psqSymType) whenUnion() *ast.When {
	v, _ := st.union.(*ast.When)
	return v
}

func (st *psqSymType) whensUnion() []*ast.When {
	v, _ := st.union.([]*ast.When)
	return v
}

func (st *psqSymType) withUnion() *ast.With {
	v, _ := st.union.(*ast.With)
	return v
}

var psqR1 = [...]int{
	0, 324, 325, 325, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 300, 300,
	300, 303, 303, 26, 65, 29, 29, 28, 28, 31,
	31, 30, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 7, 7, 7, 13, 14, 6, 15, 15,
	77, 77, 16, 17, 17, 17, 17, 328, 328, 138,
	138, 136, 136, 137, 137, 18, 19, 19, 202, 202,
	201, 201, 201, 203, 203, 203, 203, 240, 240, 20,
	20, 20, 20, 20, 88, 88, 302, 302, 301, 293,
	293, 292, 292, 291, 299, 299, 298, 298, 297, 34,
	35, 44, 44, 44, 44, 45, 46, 304, 304, 273,
	51, 51, 50, 50, 50, 50, 50, 50, 52, 52,
	48, 48, 47, 47, 49, 49, 275, 275, 262, 262,
	274, 274, 274, 274, 274, 274, 274, 261, 261, 99,
	99, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 319, 319, 319, 318,
	318, 185, 185, 185, 185, 185, 185, 185, 185, 108,
	108, 117, 117, 117, 117, 117, 106, 106, 107, 105,
	105, 105, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 116, 116, 112, 112,
	112, 113, 113, 113, 114, 114, 320, 320, 320, 320,
	244, 244, 244, 244, 247, 247, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 246, 246, 246, 246, 246,
	248, 248, 248, 248, 248, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 250, 250, 250, 250, 250, 250, 250, 250, 260,
	260, 251, 251, 256, 257, 258, 258, 258, 259, 259,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 255,
	255, 254, 254, 254, 263, 287, 287, 286, 286, 284,
	284, 284, 284, 284, 272, 272, 281, 281, 281, 281,
	281, 271, 271, 267, 267, 267, 268, 268, 269, 269,
	266, 266, 270, 270, 283, 283, 282, 282, 264, 264,
	265, 265, 289, 321, 321, 321, 321, 321, 322, 322,
	290, 311, 313, 313, 313, 312, 312, 309, 310, 308,
	308, 308, 308, 308, 74, 74, 74, 214, 214, 215,
	215, 279, 279, 278, 278, 278, 280, 280, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 210, 210, 210, 307, 307, 307, 307,
	307, 307, 306, 306, 306, 276, 276, 276, 305, 305,
	53, 53, 170, 170, 41, 41, 41, 41, 41, 41,
	40, 40, 40, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 42, 42, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 126, 128, 129, 129,
	127, 127, 127, 127, 127, 127, 55, 55, 54, 54,
	131, 130, 132, 132, 132, 22, 33, 33, 23, 23,
	23, 23, 24, 24, 56, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 209, 209, 217, 217, 208,
	208, 233, 233, 233, 211, 211, 211, 317, 317, 317,
	205, 205, 58, 58, 58, 60, 60, 61, 62, 62,
	235, 235, 236, 236, 63, 64, 75, 75, 75, 75,
	75, 75, 78, 78, 78, 9, 9, 9, 9, 71,
	71, 71, 8, 8, 59, 59, 66, 314, 314, 315,
	316, 316, 316, 316, 67, 25, 25, 25, 25, 25,
	25, 94, 94, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 89, 89, 89, 84, 84, 329,
	27, 330, 69, 70, 70, 87, 87, 87, 81, 81,
	81, 86, 86, 86, 10, 10, 11, 193, 193, 12,
	12, 91, 91, 93, 93, 93, 93, 93, 95, 95,
	95, 95, 95, 95, 95, 90, 90, 92, 92, 92,
	92, 225, 225, 225, 224, 224, 120, 120, 122, 121,
	121, 123, 123, 124, 124, 124, 124, 168, 168, 146,
	191, 191, 189, 189, 190, 190, 192, 192, 192, 192,
	125, 125, 125, 125, 133, 133, 134, 134, 135, 135,
	32, 234, 234, 231, 231, 231, 230, 230, 139, 139,
	139, 141, 140, 140, 140, 140, 142, 142, 144, 144,
	143, 143, 145, 150, 150, 149, 149, 147, 147, 147,
	147, 148, 148, 148, 148, 151, 151, 104, 104, 104,
	104, 104, 104, 115, 115, 115, 115, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 76, 76, 76, 206, 206,
	152, 152, 160, 160, 160, 160, 153, 153, 153, 153,
	153, 153, 153, 161, 161, 161, 167, 162, 162, 158,
	158, 158, 158, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 242, 242, 296, 296, 295, 295, 294, 294, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	331, 331, 252, 252, 252, 159, 159, 159, 159, 159,
	85, 85, 85, 85, 85, 239, 239, 239, 243, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 173, 173, 82, 82, 171, 171,
	172, 174, 174, 169, 169, 169, 155, 155, 175, 175,
	176, 176, 177, 177, 179, 178, 178, 180, 181, 181,
	181, 182, 182, 183, 183, 183, 43, 43, 43, 43,
	43, 38, 38, 38, 38, 39, 39, 39, 39, 96,
	96, 96, 96, 98, 98, 97, 97, 72, 72, 73,
	73, 73, 102, 102, 103, 103, 103, 100, 100, 101,
	101, 186, 186, 187, 154, 154, 154, 154, 154, 188,
	188, 188, 188, 194, 194, 164, 164, 166, 166, 165,
	119, 195, 195, 199, 196, 196, 200, 200, 200, 200,
	200, 197, 197, 198, 198, 227, 227, 227, 204, 204,
	216, 216, 212, 212, 213, 213, 207, 207, 218, 218,
	218, 68, 163, 163, 288, 288, 285, 222, 222, 222,
	223, 223, 226, 228, 228, 228, 232, 232, 229, 229,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 326, 327, 237, 238, 238, 238,
}

var psqR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 1, 2, 3, 2, 3, 0, 1, 3,
	1, 4, 3, 3, 4, 3, 2, 3, 4, 3,
	4, 2, 7, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 3, 2, 2, 5, 7, 8, 6, 7,
	1, 1, 10, 10, 9, 8, 8, 1, 1, 1,
	3, 1, 3, 1, 3, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 6, 12, 2, 0, 2, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 1, 1, 3, 3, 6,
	4, 7, 8, 8, 8, 6, 3, 1, 1, 4,
	0, 1, 1, 1, 1, 2, 2, 2, 0, 1,
	4, 4, 4, 4, 4, 4, 2, 4, 1, 3,
	1, 1, 3, 4, 3, 3, 3, 5, 10, 0,
	2, 0, 2, 3, 5, 3, 4, 2, 3, 2,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 5,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 0, 0, 1, 1, 0, 1,
	0, 3, 3, 2, 2, 2, 1, 2, 2, 0,
	1, 0, 2, 2, 5, 0, 1, 1, 2, 1,
	2, 1, 1, 3, 0, 1, 4, 3, 3, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 1, 3, 3, 4, 3, 1,
	3, 1, 7, 6, 7, 7, 8, 8, 0, 1,
	5, 2, 1, 1, 1, 0, 1, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 1, 1, 2, 0,
	1, 0, 1, 1, 3, 2, 1, 2, 4, 4,
	3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 2, 0, 1, 5, 1, 3, 7,
	1, 3, 3, 1, 2, 2, 2, 5, 5, 5,
	6, 8, 5, 5, 4, 4, 4, 6, 5, 5,
	2, 2, 2, 2, 3, 3, 3, 4, 3, 3,
	1, 3, 5, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 11, 3, 8, 6,
	6, 6, 13, 8, 6, 10, 8, 4, 1, 3,
	3, 6, 7, 7, 8, 4, 0, 1, 0, 1,
	3, 3, 1, 1, 2, 3, 3, 5, 7, 7,
	6, 5, 3, 2, 3, 3, 3, 7, 3, 3,
	3, 4, 7, 5, 2, 4, 4, 4, 4, 4,
	5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 4, 4,
	4, 4, 4, 5, 3, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	1, 1, 2, 1, 3, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 3, 3, 6, 4, 7,
	6, 1, 3, 2, 2, 2, 1, 1, 1, 3,
	2, 1, 1, 1, 0, 1, 1, 0, 3, 0,
	7, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 5, 5, 4, 0, 2, 4,
	4, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 3, 1, 3, 4, 3,
	0, 3, 1, 3, 1, 3, 1, 1, 3, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 1, 1, 2, 6, 5, 6,
	6, 0, 2, 3, 3, 0, 2, 3, 3, 2,
	3, 1, 6, 3, 4, 3, 1, 3, 4, 5,
	6, 3, 4, 5, 6, 3, 4, 1, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 3, 1, 1, 2,
	2, 2, 2, 1, 1, 2, 9, 6, 6, 6,
	2, 2, 3, 3, 3, 1, 1, 1, 0, 3,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	5, 5, 6, 4, 4, 8, 6, 8, 6, 8,
	5, 4, 2, 2, 1, 2, 2, 2, 8, 8,
	6, 5, 4, 4, 4, 4, 4, 7, 4, 6,
	6, 6, 4, 4, 4, 7, 8, 6, 5, 6,
	8, 11, 7, 8, 8, 9, 4, 4, 4, 4,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	4, 0, 2, 0, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 2, 3, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 1, 0, 2,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 2, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 2, 0, 3,
	0, 2, 0, 1, 3, 1, 3, 2, 0, 1,
	1, 0, 1, 2, 4, 4, 0, 2, 2, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	3, 3, 3, 0, 3, 1, 1, 0, 4, 0,
	1, 1, 0, 3, 1, 3, 2, 1, 1, 0,
	1, 2, 4, 2, 2, 1, 5, 4, 4, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 0, 3, 0, 1, 0, 1,
	1, 5, 0, 1, 0, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var psqChk = [...]int{
	-1000, -324, -1, -5, -27, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -56, -57, -58,
	-60, -61, -62, -63, -64, -8, -59, -25, -26, -65,
	-66, -67, -68, -10, -11, -12, -3, -2, -7, -329,
	9, 10, -77, -28, 32, -34, -44, 481, -45, -35,
	482, -46, 484, 483, 521, 485, 514, 337, 566, 567,
	569, 570, 571, 572, -78, 519, 520, 488, 36, 173,
	33, 34, 37, 527, 528, 491, -4, -29, 8, -326,
	11, 689, 516, 515, 28, -6, 723, 349, -325, 855,
	-186, -187, 22, 33, 29, -183, -179, -87, -187, 20,
	18, 7, 38, -69, -330, -69, -69, 12, 13, -69,
	-273, -275, 349, 417, 349, -69, -51, -50, -48, -47,
	-49, -52, 31, -41, -40, -42, -36, -37, -280, 487,
	482, 489, 490, 690, 385, 384, 382, 383, 483, 338,
	484, 344, 33, 723, 726, -277, -52, 364, 366, 834,
	495, 837, 838, 841, 842, 848, 849, 850, 386, 7,
	-69, -232, -228, -300, -220, -221, 352, 353, 354, 69,
	70, 71, 72, 507, 487, 755, 556, 73, 74, 482,
	42, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	566, 403, 580, 574, 721, 84, 19, 85, 37, 86,
	508, 544, 87, 88, 591, 594, 89, 90, 91, 92,
	93, 522, 627, 94, 569, 656, 366, 95, 96, 97,
	834, 98, 99, 100, 101, 342, 102, 112, 113, 114,
	115, 116, 117, 660, 670, 491, 118, 360, 119, 120,
	121, 545, 13, 122, 123, 124, 125, 126, 127, 385,
	382, 128, 129, 583, 483, 130, 734, 384, 131, 132,
	608, 824, 518, 630, 764, 133, 347, 528, 26, 516,
	134, 135, 136, 377, 137, 138, 139, 555, 359, 765,
	338, 817, 140, 634, 141, 41, 648, 142, 143, 737,
	738, 144, 111, 145, 675, 146, 499, 147, 148, 149,
	383, 150, 151, 152, 153, 495, 506, 154, 155, 156,
	157, 158, 159, 11, 160, 578, 579, 477, 553, 650,
	605, 702, 161, 162, 703, 163, 164, 165, 166, 739,
	376, 167, 396, 35, 168, 722, 169, 557, 170, 171,
	651, 172, 173, 820, 174, 33, 772, 175, 176, 719,
	177, 178, 529, 550, 179, 180, 680, 181, 325, 683,
	182, 539, 647, 183, 596, 777, 184, 322, 185, 186,
	187, 188, 511, 345, 189, 190, 191, 192, 779, 193,
	780, 586, 194, 746, 381, 195, 782, 196, 197, 546,
	198, 784, 786, 199, 747, 200, 201, 202, 203, 204,
	205, 40, 787, 530, 206, 842, 788, 207, 208, 209,
	210, 791, 211, 527, 212, 213, 214, 639, 215, 534,
	216, 217, 218, 219, 220, 221, 652, 582, 222, 223,
	750, 224, 225, 226, 227, 228, 572, 484, 655, 689,
	229, 230, 799, 513, 231, 232, 233, 802, 570, 234,
	235, 236, 237, 238, 239, 571, 240, 493, 641, 241,
	242, 685, 554, 549, 243, 658, 244, 649, 32, 245,
	246, 324, 514, 808, 809, 576, 247, 248, 547, 249,
	250, 567, 251, 252, 253, 254, 852, 388, 255, 356,
	256, 257, 693, 258, 259, 752, 642, 386, 260, 261,
	262, 551, 597, 812, 587, 588, 568, 263, 264, 535,
	701, 521, 265, 266, 267, 268, 813, 657, 269, 270,
	271, 272, 273, 274, 12, 275, 276, 277, 278, 323,
	320, 592, 279, 280, 496, 281, 282, 283, 284, 726,
	573, 285, 653, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 590, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 494, -69,
	494, -143, -228, 494, -197, 626, -217, 628, 641, 636,
	634, -209, 637, 639, 534, -317, 648, 494, 643, 481,
	638, 646, 543, -300, 434, 852, 394, 594, 633, 631,
	649, 820, -228, 568, -235, 573, -222, -300, -220, -221,
	571, -143, -75, 817, 486, 485, -237, -237, -89, 820,
	822, -162, -104, 401, -115, -118, -109, -110, -156, -157,
	-158, -159, -116, -169, 423, 424, 431, 402, -167, -119,
	26, 719, 691, 690, 434, 31, 477, 331, 332, 693,
	694, 404, 320, 666, 667, -117, 661, 668, 663, 696,
	697, 377, 698, 367, 369, 368, 699, 700, 701, 606,
	607, 702, 703, 704, 370, 371, 372, 373, 374, 375,
	376, 705, 708, 706, 707, 709, 710, 711, 716, 717,
	712, 713, 714, 715, 718, -222, -228, 499, 660, 493,
	429, 689, -111, -107, -2, -165, 659, 664, 665, 669,
	662, -300, -220, -221, -113, -112, -152, 355, 361, 365,
	362, -323, 378, -326, 360, 359, 356, 357, 358, 379,
	380, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 470, 471, 472, 473,
	474, 475, 476, 117, 642, 642, -143, -69, -69, -69,
	-177, -87, -179, -4, -2, -326, 8, -69, -2, -3,
	-7, -29, -31, 750, -30, -228, 12, 419, -143, -182,
	-183, -6, -2, -104, 19, 23, 24, -70, -92, 425,
	-104, -228, -70, -92, -207, 498, -69, -69, -196, -240,
	568, -200, 649, 648, -223, -198, -222, -219, -197, 647,
	23, 486, 485, 400, 43, 729, 25, 27, 44, 45,
	434, 389, 404, 691, 505, 433, 626, 501, 38, 46,
	509, 481, 335, 47, 661, 48, 49, 663, 659, 666,
	31, 50, 28, 24, 36, 407, 408, 735, 380, 51,
	22, 510, 52, 14, 633, 53, 16, 17, 54, 419,
	55, 333, 56, 29, 416, 57, 329, 742, 390, 331,
	417, 20, 664, 665, 336, 401, 58, 378, 21, 339,
	654, 398, 18, 334, 59, 60, 500, 512, 816, 332,
	8, 61, 62, 63, 64, 65, 494, 66, 406, 497,
	391, 379, 7, 395, 644, 340, 67, 68, 405, 15,
	753, 723, 594, -274, 417, -261, -265, -222, 509, -290,
	505, -143, -283, -282, -222, -326, -88, -216, 495, 503,
	502, 395, -304, 398, 551, 660, 493, -47, -48, -49,
	-197, 433, 837, 350, 350, -277, -265, -264, -263, -305,
	509, -289, -281, 501, 510, -271, 502, 503, -266, 495,
	396, -305, 505, 495, -305, -305, 497, 35, 35, 386,
	386, -305, -266, 500, 510, 505, 509, -218, -266, 497,
	25, -272, 409, -272, 727, 727, -197, 433, -272, -272,
	-272, 538, -272, -272, -272, -272, -272, -272, -272, -272,
	-272, 494, -304, -96, 646, 344, -50, -33, -143, -216,
	495, 496, -304, 527, -143, 478, -143, -211, 417, 15,
	-211, -208, 642, 640, 627, 632, -211, -211, -211, 541,
	625, -267, 495, 35, 506, 642, 541, 625, 541, 542,
	541, 542, 635, 645, 541, -233, 14, 419, 660, 630,
	634, 534, 494, 535, 496, 644, 642, 537, -238, -326,
	-223, -300, 823, -238, 32, 353, 497, -222, -71, -222,
	356, -9, -5, -16, -15, -17, 409, -94, 642, -83,
	434, 824, 825, 826, 823, 639, 831, 829, 827, 541,
	828, 350, 398, 400, 4, -104, 416, -153, 409, 410,
	411, 412, 413, 414, 415, 419, 401, 403, 417, 418,
	409, 399, 420, 421, 422, 423, 424, 425, 426, 428,
	427, 429, 430, 433, 479, 480, -110, -110, -110, -110,
	-167, -326, -326, -326, -110, -206, -326, -110, -326, -326,
	-326, -326, -173, -104, -326, -331, -326, -331, -331, -252,
	-326, -252, -326, -326, -326, -326, -326, -326, -326, -326,
	-326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
	-326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
	-326, -326, -326, -326, -326, -326, -326, -326, -326, 478,
	-326, -326, -326, -326, -326, -252, -252, -252, -252, -252,
	365, 361, 355, -169, 362, 356, -222, -228, -2, -3,
	-162, -237, -314, -315, -146, -143, -326, -222, -222, 527,
	-182, -6, -2, -177, -183, -179, -2, -69, -81, -93,
	326, 327, -95, 24, 39, 330, 328, 23, -327, 351,
	-327, -186, -327, 350, -31, -191, 349, 324, 350, 21,
	-178, -180, -104, 339, 38, 14, -225, -224, 25, -222,
	356, 478, 14, -144, 29, -143, -207, -207, 350, 568,
	-200, -240, -202, -201, 650, 652, 409, -227, -222, 356,
	31, 351, 350, -143, -244, -247, -249, -248, -250, -245,
	-246, 591, 592, 434, 595, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 608, 32, 517, 587, 588, 589,
	590, 609, 610, 611, 612, 613, 614, 615, 616, 574,
	593, 721, 575, 576, 577, 578, 579, 580, 582, 583,
	584, 585, 586, -303, -300, 349, 351, 350, -251, 349,
	-104, -96, 494, -300, 495, 495, 495, -69, 689, -272,
	-272, -272, 18, -36, -37, -40, -37, 349, -261, -270,
	-303, -300, 349, 396, 500, 395, -269, -266, -269, -270,
	-300, -169, -300, -300, -169, -261, -197, -169, -300, 396,
	396, -300, -300, -143, -300, 31, 341, 342, 343, 31,
	345, 346, 347, -272, -272, 356, 356, 356, -272, 356,
	-306, 511, 555, 557, 31, 356, -307, 31, 844, 843,
	845, 846, 847, 31, 31, -222, 349, -143, -102, 545,
	481, 483, 487, 339, 409, 350, 497, 494, -300, -212,
	499, -212, -222, -229, -228, -219, 356, -104, -268, 14,
	419, -233, -233, -211, -143, -268, -233, -211, -143, -211,
	-211, -211, -211, -233, -233, -233, -211, -228, -228, -143,
	-143, -143, -143, -143, -143, -143, -238, -205, 14, 339,
	-238, -238, -236, 571, 605, 818, 819, 350, 723, -136,
	-143, 823, 823, 823, 823, 823, -104, -104, -104, 746,
	-160, 378, 401, 379, 380, -118, -161, -165, -167, 363,
	419, 403, 417, 418, -109, -110, -109, 43, -109, -109,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-239, -222, 356, 434, -114, -113, 362, 356, -323, -114,
	-90, -92, -104, -104, -300, -222, -90, -90, -104, -86,
	24, 39, -171, -172, 405, -169, -327, -327, 362, -222,
	-222, -80, -79, 671, 672, 673, 674, 676, 677, 678,
	681, 682, 686, 687, 670, 688, 675, 680, 683, 684,
	685, 679, 590, -104, -104, -104, -104, -104, -104, -76,
	-104, 389, 390, 391, -104, -104, -163, -162, -299, -298,
	-297, -104, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
	-104, -104, -104, -104, -91, 24, 39, -90, -223, -229,
	-219, -90, -91, -91, -90, -90, 478, -327, 350, -316,
	652, 653, 821, -231, -230, 25, -228, 356, -163, 14,
	-193, 340, -222, -182, -182, 326, 327, 322, -90, -95,
	-327, -30, 25, -189, -222, 325, -104, -104, 350, -181,
	27, 28, -32, 493, -143, -224, 425, -229, -143, -154,
	32, 320, -5, -326, -143, -121, -123, -124, -125, -146,
	-168, -326, -126, 742, 739, 14, -136, -137, -145, -228,
	-200, -202, 350, 651, 653, 654, 339, 381, -104, -254,
	433, -279, -278, -277, -261, -263, -264, -265, 495, 396,
	351, -254, -258, 623, 622, -251, -251, -251, -251, -251,
	-253, -197, 617, 618, 434, -253, -253, -253, 349, 349,
	-251, -251, -251, -251, -256, -256, -256, -257, -257, -290,
	-104, -287, -286, -284, -285, 364, 815, 771, 723, 340,
	-282, -181, 358, -327, -102, -213, 499, -288, -285, -300,
	-300, -300, -213, -300, 356, -300, 356, -300, 356, 19,
	350, -262, -261, -53, 555, -289, -283, -270, 396, -269,
	-270, -270, 483, 32, -214, 762, 401, 815, 771, -261,
	-53, -239, -300, 497, -239, -239, 356, -210, 852, -136,
	-98, 547, 409, 536, 536, 494, 494, 549, -143, 548,
	550, 552, -143, -143, -212, 339, -138, -143, 26, -228,
	-143, -211, -211, -143, -211, -211, -143, -222, -83, 652,
	350, 723, 22, -84, 22, -326, 378, 379, 380, -161,
	-109, -110, -109, 400, 518, -161, 356, 350, -327, 25,
	350, 340, -327, -327, -327, 350, 14, -90, -174, -172,
	407, -104, -327, -327, 350, 350, 14, -243, -327, -327,
	-327, -327, -327, -173, -327, 14, 350, 350, -327, -327,
	350, 350, -327, 350, 350, 350, -296, 350, 350, 350,
	350, -327, -327, -327, -327, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, -327, -327, -90, -90, -326,
	478, -327, -327, -327, -327, -327, -223, -315, 820, 653,
	-150, -149, -147, 337, 498, 338, -230, -327, -114, 353,
	-190, 353, -189, -155, -222, 362, -120, -122, 14, -95,
	-167, 351, 350, -180, 416, -226, -300, 478, -151, 15,
	-194, 339, -195, -199, -169, -164, -166, -165, -326, -188,
	-327, -222, 32, 350, -139, -141, -140, -142, 329, 333,
	335, 330, 331, 332, 336, -234, 25, -121, -3, -2,
	-326, -326, -326, -143, -136, -328, 14, 340, -328, 350,
	478, -201, -203, 655, 652, 658, -300, 356, 350, -277,
	-265, -184, -99, 41, -259, 624, -253, 730, -253, -222,
	356, 434, -255, 434, -255, 617, 618, -260, 356, -260,
	351, -43, -38, -39, 33, 344, -284, 356, 40, -222,
	351, -181, -98, -143, 401, 339, -288, -288, -288, -228,
	-189, 18, 350, 351, -170, 556, 351, 349, -270, -270,
	31, 31, 815, 771, 762, -53, -170, -254, -300, 854,
	853, 351, 496, 554, -103, 666, -100, 356, 352, -143,
	-143, -143, -143, -143, 487, 483, 497, -136, -143, 350,
	-74, 513, 508, -233, -233, 33, -143, 652, 832, 830,
	-104, 400, 518, -118, -110, -92, 720, -241, 434, 591,
	517, 589, 585, 605, 596, 622, 587, 623, 584, 583,
	582, -241, -239, -104, -104, -177, 408, -104, 406, -104,
	-104, -104, -327, 14, -104, -104, -104, -297, -104, -104,
	-104, -295, -294, -114, -169, -327, -295, -104, -104, -294,
	-294, -298, -298, -298, -298, -298, -162, -162, -162, -162,
	-327, -327, -91, -223, -147, -266, -266, -266, 350, -204,
	22, 14, 320, -151, -121, -95, -222, -114, 425, -182,
	-104, 30, -194, 350, 409, 350, -327, -327, 350, 320,
	478, -195, -123, -124, -124, -123, -124, 329, 329, 329,
	334, 329, 334, 329, -140, -228, -327, -327, -3, -3,
	-104, -231, 340, -121, -121, -145, -228, 425, 652, 656,
	657, -277, -322, 378, 401, 31, 339, 620, 364, -320,
	433, 759, 810, 815, 771, -321, 500, 395, 396, 512,
	25, 42, -255, -255, 351, 350, 351, -215, -214, -39,
	-38, -272, -272, -300, 496, 26, -143, 339, 339, 339,
	19, -261, -169, -287, -189, -106, -326, -105, -107, -111,
	423, 424, 359, 360, -170, -143, -97, 545, 553, 349,
	-101, 353, -302, 340, 536, 620, 536, -143, -74, -43,
	-143, -211, -211, 33, -300, -327, -118, -110, -326, -327,
	-251, -251, -251, -257, -251, 579, -251, 579, -251, -327,
	-327, 350, -327, 22, -327, -82, 695, -104, 350, 350,
	-327, -104, -327, -327, -327, -296, 350, -327, 350, -327,
	350, -242, 816, -327, -327, -327, -327, -327, -327, -327,
	-327, -327, -327, -327, -148, 22, -148, -148, 353, -143,
	-175, 16, 396, -199, -104, -166, 320, -5, -222, -164,
	-222, -151, -134, -133, 339, 340, -135, 339, -133, 329,
	329, -191, -327, -327, 350, -151, -121, -151, -151, 478,
	378, -326, -108, -117, -106, 12, 356, 356, -300, -319,
	843, 844, 31, 358, 396, 396, -143, 349, -253, 356,
	-253, 31, 345, 346, 347, 31, 341, 342, 343, -143,
	-143, -143, -143, -189, 351, -104, -112, -112, -191, 351,
	-293, 723, -301, -222, -222, -222, -222, -109, -253, -104,
	-104, -182, 356, -104, -104, -327, -327, -295, -294, -104,
	-327, -131, -130, -132, 824, 378, 31, -241, -326, 329,
	18, 16, -326, -326, -176, 17, 19, 12, -164, 478,
	-177, -104, 349, -104, -114, -177, -151, -104, -157, 377,
	701, 702, 703, 376, 349, -104, -191, -321, -327, 25,
	-292, -291, -223, 349, 340, -85, 419, 723, -327, -327,
	-327, -327, -327, -327, -327, 350, -327, -130, -132, -327,
	339, -114, -192, -327, -222, 500, 19, 19, -192, -192,
	-104, -162, -195, -222, -182, -189, -128, 627, -182, -327,
	-189, 351, 25, -5, 350, 409, -189, -143, -327, 721,
	336, 724, -104, -327, 339, 734, 824, 350, -327, -327,
	-327, 351, -327, -326, 351, -185, -5, -72, 723, -291,
	-276, -223, 356, 358, 351, 325, 722, 725, -296, -222,
	500, -231, -129, -127, -222, 777, -312, -311, 719, -322,
	-318, 378, 401, 364, -320, 815, 771, 387, 388, -72,
	-73, 544, 820, -302, 325, -327, -327, 350, 22, -244,
	-55, 788, -309, -310, 339, -313, 633, 787, 808, 378,
	356, 505, -293, 723, -127, 784, -254, -114, -310, 339,
	-309, 339, 13, 12, 546, 724, -54, 26, -128, -308,
	513, 508, 511, 32, -308, 725, 788, 507, 31, 378,
	-114, -131, -130, -130,
}

var psqDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 68, 70, 71, 0,
	681, 681, 681, 0, 681, 0, 0, 681, -2, -2,
	681, 1136, 0, 681, 0, 0, -2, 613, 615, 0,
	617, -2, 0, 0, 626, 1653, 1653, 674, 0, 0,
	0, 0, 0, 681, 681, 681, 1022, 48, 681, 0,
	80, 81, 632, 633, 634, 63, 0, 1651, 1, 3,
	69, 73, 0, 0, 0, 56, 1031, 0, 74, 0,
	0, 685, 683, 0, 683, 0, 1116, 681, 681, 0,
	109, 110, 0, 0, 0, -2, 113, -2, 142, 143,
	144, 0, 149, 515, 465, 467, 470, 503, -2, -2,
	458, 458, 458, 0, 0, 0, 0, 0, 458, 500,
	1118, 364, 364, 0, 0, 426, 0, 364, 364, 364,
	0, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	1049, 148, 1137, 1133, 1134, 1135, 38, 39, 40, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 0, 1110,
	0, 553, 780, 0, 604, 604, 0, 604, 604, 604,
	0, 0, 0, 564, 0, 0, 0, 0, 601, 0,
	580, 0, 586, 1654, 0, 1654, 1101, 0, 598, 596,
	608, 609, 612, 616, 0, 621, 624, 1127, 1128, 1129,
	0, 639, 47, 1354, 630, 631, 644, 645, 0, 675,
	676, 43, 877, 0, 801, 806, 817, 831, 832, 833,
	834, 835, 837, 838, 0, 0, 0, 0, 843, 844,
	1341, 1422, 0, 0, 0, 858, 1390, 0, 0, 1565,
	0, 1004, 1603, 970, 970, 894, 970, 972, 972, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1583, 0,
	0, 1394, 1397, 0, 0, 0, 0, 0, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 1369, 1306, 1530,
	0, 1512, 266, 267, 876, 1090, 972, 972, 972, 972,
	972, -2, -2, -2, 212, 213, 214, 215, 216, 217,
	218, 0, 208, 0, -2, -2, -2, 272, 268, 860,
	861, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 1653, 0, 654, 0, 0, 0, 0,
	1031, 0, 1023, 1022, 61, 0, 681, -2, 0, 0,
	0, 0, 45, 1503, 50, 740, 1071, 0, 1073, 57,
	1032, 65, 67, 1033, 0, 686, 687, 0, 0, 717,
	721, 0, 682, 0, 0, 1117, 1116, 1116, 95, 0,
	1579, 1094, -2, -2, 0, 0, 1130, 1131, 1103, -2,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1278, 0, 0, 160, 161, 0, 41, 391,
	0, 156, 0, 384, 331, 0, 1049, 0, 0, 0,
	0, 0, 681, 0, 1111, 137, 138, 145, 146, 147,
	364, 364, 364, 148, 148, 427, 474, 475, 476, 0,
	-2, 389, 0, 459, 0, 0, 378, 378, 382, 380,
	381, 0, 0, 0, 0, 0, 0, 490, 491, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	1120, 0, 365, 0, 513, 514, 364, 364, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 1062, 0, 0, -2, 545, 0, 0,
	0, 1112, 1112, 0, 552, 0, 554, 555, 0, 0,
	556, 0, 601, 601, 599, 600, 558, 559, 560, 604,
	0, 0, 373, 374, 375, 601, 604, 0, 604, 604,
	604, 604, 601, 601, 601, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1654, 583, 584, 587, 1655,
	1656, 1654, 1654, 594, 1102, 614, 622, 625, 642, 640,
	641, 643, 635, 636, 637, 638, 0, 655, 656, 661,
	0, 0, 0, 666, 667, 668, 0, 0, 671, 672,
	673, 0, 0, 0, 0, 799, 0, 0, 866, 867,
	868, 869, 870, 871, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 839, 840, 841, 842,
	845, 0, 0, 0, 850, 851, 0, 0, 0, 0,
	0, 691, 0, 1005, 0, 892, 0, 893, 895, 896,
	0, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 701, 701, 0, 0, 201, 202, 203, 204, 205,
	219, 220, 221, 222, 223, -2, 1013, 0, 876, 0,
	0, 44, 646, 647, 0, 763, 1122, 0, 697, 0,
	55, 64, 66, 1031, 59, 1031, 0, 703, 0, 0,
	-2, -2, 704, 710, 711, 712, 713, 714, 52, 1652,
	53, 0, 72, 0, 46, 0, 0, 0, 0, 0,
	1024, 1025, 1028, 0, 684, 0, 718, 722, 0, 724,
	725, 0, 0, 0, 0, 779, 0, 0, 0, 1579,
	1100, 0, 97, 98, 0, 0, 0, 351, 1105, 1106,
	1107, -2, 371, 0, 351, 335, 281, 282, 283, 331,
	285, 331, 331, 331, 331, 340, 340, 340, 340, 314,
	315, 316, 317, 318, 0, 0, 300, 331, 331, 331,
	331, 321, 322, 323, 324, 325, 326, 327, 328, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 333, 333,
	333, 334, 334, 0, 42, 0, 355, 0, 1028, 0,
	0, 1062, 1114, 1124, 0, 0, 0, 1114, 115, 0,
	0, 0, 0, 471, 472, 468, 504, 0, 460, 372,
	0, -2, 0, 382, 0, 378, 382, 379, 382, 370,
	383, 0, 0, 0, 0, 460, 0, 494, 495, 496,
	0, 498, 499, 501, 0, 505, 506, 507, 508, 509,
	510, 511, 512, 0, 0, 430, 431, 432, 0, 434,
	435, 452, 453, 454, 436, 437, 438, 446, 447, 448,
	449, 450, 451, 439, 440, 443, 0, 130, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 700, 781, 1138, 1139, 605, 606, 0, 376,
	377, 604, 604, 561, 591, 0, 604, 565, 592, 566,
	568, 567, 569, 581, 582, 604, 572, 602, 603, 573,
	574, 575, 576, 577, 578, 579, 588, 0, 610, 611,
	589, 590, 0, 623, 627, 628, 629, 0, 0, 658,
	91, 663, 664, 665, 677, 670, 878, 797, 798, 0,
	800, 803, 0, 862, 864, 805, 807, 873, 874, 875,
	0, 0, 0, 0, 0, 811, 815, 0, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	836, 985, 986, 987, 853, 274, 275, 271, 0, 854,
	0, 715, 0, 0, 0, 852, 0, 0, 0, 0,
	692, 693, 1011, 1008, 0, 0, 971, 973, 0, 0,
	0, 0, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 988, 0, 0, 0, 0, 0, 1004,
	0, 855, 856, 857, 0, 0, 0, 1123, 0, 125,
	126, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 1014, 0,
	-2, 0, 0, 0, 0, 0, 0, 1089, 0, 649,
	650, 652, 0, 783, 764, 0, 766, 767, 0, 0,
	696, 0, 699, 58, 60, 708, 709, 0, 726, 705,
	54, 49, 0, 0, 742, 1072, 1034, 1035, 0, 1027,
	1029, 1030, 0, 0, 75, 723, 719, 0, 795, 1083,
	0, 0, 1075, 0, 778, 0, 729, 731, 732, 733,
	761, 0, 736, 0, 1402, 0, 0, 0, 93, 780,
	1095, 96, 0, 0, 101, 102, 1096, -2, 1098, 1099,
	0, 139, -2, 423, 162, 164, 165, 166, -2, -2,
	157, -2, 338, 336, 337, 284, 340, 340, 308, 309,
	310, 0, 349, 349, 346, 311, 312, 313, 0, 0,
	301, 302, 303, 304, 295, 296, 297, 298, 299, 390,
	0, 1036, 356, 357, 359, 0, 361, 362, 0, 0,
	385, 386, 0, 1028, 1053, 0, 0, 0, 1125, 1124,
	1124, 1124, 0, 150, 151, 152, 153, 154, 155, 0,
	148, 0, 158, 462, 461, 388, 0, 0, 382, 382,
	367, 368, 0, 0, 484, 417, 0, 485, 486, 460,
	462, 351, 497, 0, 428, 429, 433, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1051, 1052, 0, 546, 0, 0, 414, 89, 1113, 551,
	601, 571, 593, 601, 563, 570, 585, 619, 662, 0,
	0, 0, 0, 669, 0, 0, 804, 863, 865, 808,
	0, 812, 816, 0, 0, 818, 273, 0, 0, 0,
	0, 0, 859, 883, 884, 0, 0, 1022, 0, 1009,
	0, 0, 891, 974, 0, 0, 0, 0, 902, 903,
	904, 905, 906, 0, 908, 0, 0, 0, 912, 913,
	0, 0, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 927, 928, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 879, 0, 0, 701,
	0, 975, 976, 977, 978, 979, 1014, 648, 651, 653,
	739, 784, 785, 0, 0, 0, 765, 1121, 694, 695,
	698, -2, 0, 0, 1016, 0, 795, 727, 0, 706,
	51, 741, 0, 1026, 0, 760, 1132, 0, 1031, 0,
	78, 0, 1083, 1091, 0, 1074, 1085, 1087, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 771, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 87, 88, 0, 0,
	0, 99, 100, 0, 0, 106, 352, 353, 148, 425,
	163, 398, 0, 0, 280, 339, 305, 306, 307, 349,
	349, 343, 344, 350, 345, 347, 348, 0, 329, 0,
	419, 111, 1040, 1039, 364, 364, 358, 360, 0, 1126,
	332, 387, 0, 129, 0, 0, 0, 0, 0, 135,
	466, 0, 0, 477, 478, 0, 355, 0, 366, 369,
	479, 0, 482, 483, 418, 462, 488, 489, 502, 444,
	445, 442, 0, 0, 1063, 1064, 1069, 1067, 1068, 116,
	519, 521, 520, 524, 0, 0, 0, 414, 1036, 0,
	550, 415, 416, 604, 604, 657, 92, 0, 660, 0,
	0, 0, 0, 809, 813, 716, 0, 0, 331, 331,
	991, 331, 334, 994, 331, 996, 331, 999, 331, 1002,
	1003, 0, 0, 0, 0, 1006, 890, 1012, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 127, 128, 943,
	0, 0, 945, 947, 948, 918, 944, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	880, 881, 0, 1015, 786, 791, 791, 791, 0, 0,
	1108, 1109, 1017, 1018, 728, 707, 743, 680, 720, 76,
	796, 0, 79, 0, 0, 0, 1088, 0, 0, 0,
	0, 795, 730, 756, 758, 0, 753, 769, 770, 772,
	0, 774, 0, 776, 777, 740, 735, 737, 0, 0,
	0, 795, 0, 795, 795, 94, 0, 782, 103, 104,
	105, 424, 167, 172, 0, 0, 0, 177, 0, 179,
	0, 0, 0, 184, 185, 399, 0, 277, 279, 0,
	0, 170, 341, 342, 340, 0, 340, 400, 420, 1037,
	1038, 0, 0, 363, 0, 1115, 131, 0, 0, 0,
	0, 159, 463, 354, 0, 480, 0, 206, 207, 209,
	0, 0, 269, 270, 487, 740, 1054, 1055, 1056, 0,
	1066, 1070, 119, 0, 0, 0, 0, 547, 548, 549,
	90, 557, 562, 659, 678, 802, 810, 814, 0, 847,
	989, 340, 992, 993, 995, 997, 998, 1000, 1001, 848,
	849, 0, 886, 0, 888, 1031, 0, 1010, 0, 0,
	900, 0, 909, 910, 911, 0, 0, 917, 0, 919,
	0, 0, 0, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 882, 0, 0, 0, 0, -2, 62,
	1020, 0, 0, 1092, 1093, 1086, 0, 1078, 1081, 1077,
	1080, 1022, 750, 757, 0, 0, 751, 0, 752, 773,
	775, 734, -2, 738, 0, 1022, 795, 85, 86, 0,
	173, 0, 175, 199, 200, 0, 178, 180, 181, 182,
	186, 187, 188, 183, 276, 278, 0, 0, 319, 330,
	320, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 740,
	132, 133, 134, 469, 0, 0, 210, 211, 0, 1065,
	518, 0, 117, 118, 0, 0, 523, 980, 990, 0,
	0, 0, 1007, 0, 0, 907, 915, 0, 946, 0,
	922, 0, 0, 0, 542, 543, 0, 942, 0, 792,
	0, 0, 0, 0, 77, 0, 0, 0, 1076, 0,
	1031, 754, 0, 759, 0, 1031, 84, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 392, 481, 0,
	120, 121, 0, 0, 0, 0, 0, 0, 885, 887,
	889, 898, 899, 916, 920, 0, 923, 0, 0, 924,
	0, 544, 0, 788, 746, 747, 793, 794, 0, 0,
	1021, 1019, 1084, 1082, 82, 0, 0, 0, 83, 174,
	0, 191, 0, 1057, 0, 0, 0, 525, 846, 0,
	0, 0, 943, 925, 0, 540, 541, 0, 787, 789,
	790, 755, 763, 0, 405, 398, 1057, 516, 1059, 122,
	123, 455, 456, 457, 116, 981, 0, 984, 0, 748,
	749, 526, 0, 528, 0, -2, 393, 406, 0, 168,
	192, 193, 0, 0, 196, 197, 198, 189, 190, 112,
	0, 1060, 1061, 119, 982, 921, 527, 0, 0, 351,
	0, 537, 394, 395, 0, 401, 402, 403, 404, 194,
	195, 0, 522, 0, 529, 530, 538, 0, 396, 0,
	397, 0, 0, 0, 1058, 0, 0, 539, 535, 407,
	409, 410, 0, 0, 408, 983, 0, 411, 412, 413,
	531, 532, 533, 534,
}

var psqTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 402, 3, 3, 3, 428, 420, 3,
	349, 351, 425, 423, 350, 424, 478, 426, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 855,
	410, 409, 411, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 399, 3, 431,
}

var psqTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var psqTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 352, 57692, 353, 57693, 354, 57694, 355,
	57695, 356, 57696, 357, 57697, 358, 57698, 359, 57699, 360,
	57700, 361, 57701, 362, 57702, 363, 57703, 364, 57704, 365,
	57705, 366, 57706, 367, 57707, 368, 57708, 369, 57709, 370,
	57710, 371, 57711, 372, 57712, 373, 57713, 374, 57714, 375,
	57715, 376, 57716, 377, 57717, 378, 57718, 379, 57719, 380,
	57720, 381, 57721, 382, 57722, 383, 57723, 384, 57724, 385,
	57725, 386, 57726, 387, 57727, 388, 57728, 389, 57729, 390,
	57730, 391, 57731, 392, 57732, 393, 57733, 394, 57734, 395,
	57735, 396, 57736, 397, 57737, 398, 57738, 400, 57739, 401,
	57740, 403, 57741, 404, 57742, 405, 57743, 406, 57744, 407,
	57745, 408, 57746, 412, 57747, 413, 57748, 414, 57749, 415,
	57750, 416, 57751, 417, 57752, 418, 57753, 419, 57754, 421,
	57755, 422, 57756, 427, 57757, 429, 57758, 432, 57759, 433,
	57760, 434, 57761, 435, 57762, 436, 57763, 437, 57764, 438,
	57765, 439, 57766, 440, 57767, 441, 57768, 442, 57769, 443,
	57770, 444, 57771, 445, 57772, 446, 57773, 447, 57774, 448,
	57775, 449, 57776, 450, 57777, 451, 57778, 452, 57779, 453,
	57780, 454, 57781, 455, 57782, 456, 57783, 457, 57784, 458,
	57785, 459, 57786, 460, 57787, 461, 57788, 462, 57789, 463,
	57790, 464, 57791, 465, 57792, 466, 57793, 467, 57794, 468,
	57795, 469, 57796, 470, 57797, 471, 57798, 472, 57799, 473,
	57800, 474, 57801, 475, 57802, 476, 57803, 477, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 57998, 673, 57999, 674,
	58000, 675, 58001, 676, 58002, 677, 58003, 678, 58004, 679,
	58005, 680, 58006, 681, 58007, 682, 58008, 683, 58009, 684,
	58010, 685, 58011, 686, 58012, 687, 58013, 688, 58014, 689,
	58015, 690, 58016, 691, 58017, 692, 58018, 693, 58019, 694,
	58020, 695, 58021, 696, 58022, 697, 58023, 698, 58024, 699,
	58025, 700, 58026, 701, 58027, 702, 58028, 703, 58029, 704,
	58030, 705, 58031, 706, 58032, 707, 58033, 708, 58034, 709,
	58035, 710, 58036, 711, 58037, 712, 58038, 713, 58039, 714,
	58040, 715, 58041, 716, 58042, 717, 58043, 718, 58044, 719,
	58045, 720, 58046, 721, 58047, 722, 58048, 723, 58049, 724,
	58050, 725, 58051, 726, 58052, 727, 58053, 728, 58054, 729,
	58055, 730, 58056, 731, 58057, 732, 58058, 733, 58059, 734,
	58060, 735, 58061, 736, 58062, 737, 58063, 738, 58064, 739,
	58065, 740, 58066, 741, 58067, 742, 58068, 743, 58069, 744,
	58070, 745, 58071, 746, 58072, 747, 58073, 748, 58074, 749,
	58075, 750, 58076, 751, 58077, 752, 58078, 753, 58079, 754,
	58080, 755, 58081, 756, 58082, 757, 58083, 758, 58084, 759,
	58085, 760, 58086, 761, 58087, 762, 58088, 763, 58089, 764,
	58090, 765, 58091, 766, 58092, 767, 58093, 768, 58094, 769,
	58095, 770, 58096, 771, 58097, 772, 58098, 773, 58099, 774,
	58100, 775, 58101, 776, 58102, 777, 58103, 778, 58104, 779,
	58105, 780, 58106, 781, 58107, 782, 58108, 783, 58109, 784,
	58110, 785, 58111, 786, 58112, 787, 58113, 788, 58114, 789,
	58115, 790, 58116, 791, 58117, 792, 58118, 793, 58119, 794,
	58120, 795, 58121, 796, 58122, 797, 58123, 798, 58124, 799,
	58125, 800, 58126, 801, 58127, 802, 58128, 803, 58129, 804,
	58130, 805, 58131, 806, 58132, 807, 58133, 808, 58134, 809,
	58135, 810, 58136, 811, 58137, 812, 58138, 813, 58139, 814,
	58140, 815, 58141, 816, 58142, 817, 58143, 818, 58144, 819,
	58145, 820, 58146, 821, 58147, 822, 58148, 823, 58149, 824,
	58150, 825, 58151, 826, 58152, 827, 58153, 828, 58154, 829,
	58155, 830, 58156, 831, 58157, 832, 58158, 833, 58159, 834,
	58160, 835, 58161, 836, 58162, 837, 58163, 838, 58164, 839,
	58165, 840, 58166, 841, 58167, 842, 58168, 843, 58169, 844,
	58170, 845, 58171, 846, 58172, 847, 58173, 848, 58174, 849,
	58175, 850, 58176, 851, 58177, 852, 58178, 853, 58179, 854,
	0,
}

var psqErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func psqIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	/* available values are: 0, 1, 2, 3, 4 */
	psqDebug        = 0
	psqErrorVerbose = true
)

type psqLexer interface {
	Lex(lval *psqSymType) int
	Error(s string)
}

type psqParser interface {
	Parse(psqLexer) int
	Lookahead() int
}

type psqParserImpl struct {
	lval  psqSymType
	stack [psqInitialStackSize]psqSymType
	char  int
}

func (p *psqParserImpl) Lookahead() int {
	return p.char
}

func psqNewParser() psqParser {
	return &psqParserImpl{}
}

const psqFlag = -1000

func psqTokname(c int) string {
	if c >= 1 && c-1 < len(psqToknames) {
		if psqToknames[c-1] != "" {
			return psqToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func psqStatname(s int) string {
	if s >= 0 && s < len(psqStatenames) {
		if psqStatenames[s] != "" {
			return psqStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func psqErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !psqErrorVerbose {
		return "syntax error"
	}

	for _, e := range psqErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + psqTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := psqPact[state]
	for tok := TOKSTART; tok-1 < len(psqToknames); tok++ {
		if n := base + tok; n >= 0 && n < psqLast && psqChk[psqAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if psqDef[state] == -2 {
		i := 0
		for psqExca[i] != -1 || psqExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; psqExca[i] >= 0; i += 2 {
			tok := psqExca[i]
			if tok < TOKSTART || psqExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if psqExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += psqTokname(tok)
	}
	return res
}

func psqlex1(lex psqLexer, lval *psqSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if psqDebug >= 4 {
		__yyfmt__.Printf("lval is %v => ", lval)
	}
	if char <= 0 {
		token = psqTok1[0]
		goto out
	}
	if char < len(psqTok1) {
		token = psqTok1[char]
		goto out
	}
	if char >= psqPrivate {
		if char < psqPrivate+len(psqTok2) {
			token = psqTok2[char-psqPrivate]
			goto out
		}
	}
	for i := 0; i < len(psqTok3); i += 2 {
		token = psqTok3[i+0]
		if token == char {
			token = psqTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		__yyfmt__.Printf("token zero")
		token = psqTok2[1] /* unknown char */
	}
	if psqDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d) token=%d\n", psqTokname(token), uint(char), token)
	}
	return char, token
}

func psqParse(psqlex psqLexer) int {
	return psqNewParser().Parse(psqlex)
}

func (psqrcvr *psqParserImpl) Parse(psqlex psqLexer) int {
	var psqn int
	var psqVAL psqSymType
	var psqDollar []psqSymType
	_ = psqDollar // silence set and not used
	psqS := psqrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	psqstate := 0
	psqrcvr.char = -1
	psqtoken := -1 // psqrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		psqstate = -1
		psqrcvr.char = -1
		psqtoken = -1
	}()
	psqp := -1
	goto psqstack

ret0:
	return 0

ret1:
	return 1

psqstack:
	/* put a state and value onto the stack */
	if psqDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", psqTokname(psqtoken), psqStatname(psqstate))
	}

	psqp++
	if psqp >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqS[psqp] = psqVAL
	psqS[psqp].yys = psqstate

psqnewstate:
	psqn = psqPact[psqstate]
	if psqn <= psqFlag {
		goto psqdefault /* simple state */
	}
	if psqrcvr.char < 0 {
		psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
	}
	psqn += psqtoken
	if psqn < 0 || psqn >= psqLast {
		goto psqdefault
	}
	psqn = psqAct[psqn]
	if psqChk[psqn] == psqtoken { /* valid shift */
		psqrcvr.char = -1
		psqtoken = -1
		psqVAL = psqrcvr.lval
		psqstate = psqn
		if Errflag > 0 {
			Errflag--
		}
		goto psqstack
	}

psqdefault:
	/* default state action */
	psqn = psqDef[psqstate]
	if psqn == -2 {
		if psqrcvr.char < 0 {
			psqrcvr.char, psqtoken = psqlex1(psqlex, &psqrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if psqExca[xi+0] == -1 && psqExca[xi+1] == psqstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			psqn = psqExca[xi+0]
			if psqn < 0 || psqn == psqtoken {
				break
			}
		}
		psqn = psqExca[xi+1]
		if psqn < 0 {
			goto ret0
		}
	}
	if psqn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			psqlex.Error(psqErrorMessage(psqstate, psqtoken))
			Nerrs++
			if psqDebug >= 1 {
				__yyfmt__.Printf("%s", psqStatname(psqstate))
				__yyfmt__.Printf(" saw %s\n", psqTokname(psqtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for psqp >= 0 {
				psqn = psqPact[psqS[psqp].yys] + psqErrCode
				if psqn >= 0 && psqn < psqLast {
					psqstate = psqAct[psqn] /* simulate a shift of "error" */
					if psqChk[psqstate] == psqErrCode {
						goto psqstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if psqDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", psqS[psqp].yys)
				}
				psqp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if psqDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", psqTokname(psqtoken))
			}
			if psqtoken == psqEofCode {
				goto ret1
			}
			psqrcvr.char = -1
			psqtoken = -1
			goto psqnewstate /* try again in the same state */
		}
	}

	/* reduction by production psqn */
	if psqDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", psqn, psqStatname(psqstate))
	}

	psqnt := psqn
	psqpt := psqp
	_ = psqpt // guard against "declared and not used"

	psqp -= psqR2[psqn]
	// psqp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if psqp+1 >= len(psqS) {
		nyys := make([]psqSymType, len(psqS)*2)
		copy(nyys, psqS)
		psqS = nyys
	}
	psqVAL = psqS[psqp+1]

	/* consult goto table to find next state */
	psqn = psqR1[psqn]
	psqg := psqPgo[psqn]
	psqj := psqg + psqS[psqp].yys + 1

	if psqj >= psqLast {
		psqstate = psqAct[psqg]
	} else {
		psqstate = psqAct[psqj]
		if psqChk[psqstate] != -psqn {
			psqstate = psqAct[psqg]
		}
	}
	// dummy call; replaced with literal code
	switch psqnt {

	case 1:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:557
		{
			setParseTree(psqlex, psqDollar[1].statementUnion())
		}
	case 2:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:562
		{
		}
	case 3:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:563
		{
		}
	case 4:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:567
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 5:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:571
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 37:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:606
		{
			setParseTree(psqlex, nil)
		}
	case 38:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:612
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.NoAt)
		}
	case 39:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:616
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)
		}
	case 40:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:620
		{
			psqVAL.colIdent = ast.NewColIdentWithAt(string(psqDollar[1].str), ast.DoubleAt)
		}
	case 41:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:625
		{
			psqVAL.colIdent = ast.NewColIdentWithAt("", ast.NoAt)
		}
	case 42:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:629
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 43:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:635
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 44:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:641
		{
			psqLOCAL = &ast.Load{}
		}
		psqVAL.union = psqLOCAL
	case 45:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:647
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[2].ctesUnion(), Recursive: false}
		}
		psqVAL.union = psqLOCAL
	case 46:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:651
		{
			psqLOCAL = &ast.With{Ctes: psqDollar[3].ctesUnion(), Recursive: true}
		}
		psqVAL.union = psqLOCAL
	case 47:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:656
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 48:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.With
//line psql.y:660
		{
			psqLOCAL = psqDollar[1].withUnion()
		}
		psqVAL.union = psqLOCAL
	case 49:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:666
		{
			psqSLICE := (*[]*ast.CommonTableExpr)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].cteUnion())
		}
	case 50:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.CommonTableExpr
//line psql.y:670
		{
			psqLOCAL = []*ast.CommonTableExpr{psqDollar[1].cteUnion()}
		}
		psqVAL.union = psqLOCAL
	case 51:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.CommonTableExpr
//line psql.y:676
		{
			psqLOCAL = &ast.CommonTableExpr{TableID: psqDollar[1].tableIdent, Columns: psqDollar[2].columnsUnion(), Subquery: psqDollar[4].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 52:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:682
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 53:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:686
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 54:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:690
		{
			ast.SetLockInSelect(psqDollar[2].selStmtUnion(), psqDollar[3].lockUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 55:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:713
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 56:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:719
		{
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[2].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 57:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:724
		{
			psqDollar[1].selStmtUnion().SetOrderBy(psqDollar[2].orderByUnion())
			psqDollar[1].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 58:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:730
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 59:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:737
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[3].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 60:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:743
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
			psqDollar[2].selStmtUnion().SetOrderBy(psqDollar[3].orderByUnion())
			psqDollar[2].selStmtUnion().SetLimit(psqDollar[4].limitUnion())
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 61:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:750
		{
			psqDollar[2].selStmtUnion().SetWith(psqDollar[1].withUnion())
		}
	case 62:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:754
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), ast.SelectExprs{&ast.Nextval{Expr: psqDollar[5].exprUnion()}}, []string{psqDollar[3].str} /*options*/, nil, ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
		psqVAL.union = psqLOCAL
	case 63:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:760
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 64:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:764
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 65:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:768
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 66:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:772
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 67:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:776
		{
			psqLOCAL = &ast.Union{Left: psqDollar[1].selStmtUnion(), Distinct: psqDollar[2].booleanUnion(), Right: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 68:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:782
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 69:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:786
		{
			ast.SetLockInSelect(psqDollar[1].selStmtUnion(), psqDollar[2].lockUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 70:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:791
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 71:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:795
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 72:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:801
		{
			psqLOCAL = psqDollar[2].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 73:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:805
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 74:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:810
		{
			psqDollar[1].selStmtUnion().SetInto(psqDollar[2].selectIntoUnion())
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 75:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:817
		{
			psqLOCAL = &ast.Stream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName}
		}
		psqVAL.union = psqLOCAL
	case 76:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:823
		{
			psqLOCAL = &ast.VStream{Comments: ast.Comments(psqDollar[2].strs).Parsed(), SelectExpr: psqDollar[3].selectExprUnion(), Table: psqDollar[5].tableName, Where: ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 77:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.SelectStatement
//line psql.y:831
		{
			psqLOCAL = ast.NewSelect(ast.Comments(psqDollar[2].strs), psqDollar[4].selectExprsUnion() /*SelectExprs*/, psqDollar[3].strs /*options*/, nil, psqDollar[5].tableExprsUnion() /*from*/, ast.NewWhere(ast.WhereClause, psqDollar[6].exprUnion()), ast.GroupBy(psqDollar[7].exprsUnion()), ast.NewWhere(ast.HavingClause, psqDollar[8].exprUnion()))
		}
		psqVAL.union = psqLOCAL
	case 78:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:839
		{
			// insert_data returns a *ast.Insert pre-filled with Columns & Values
			ins := psqDollar[5].insUnion()
			ins.Action = psqDollar[1].insertActionUnion()
			ins.Comments = ast.Comments(psqDollar[2].strs).Parsed()
			ins.Ignore = psqDollar[3].ignoreUnion()
			ins.Table = psqDollar[4].tableName
			ins.OnDup = ast.OnDup(psqDollar[6].updateExprsUnion())
			psqLOCAL = ins
		}
		psqVAL.union = psqLOCAL
	case 79:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:850
		{
			cols := make(ast.Columns, 0, len(psqDollar[6].updateExprsUnion()))
			vals := make(ast.ValTuple, 0, len(psqDollar[7].updateExprsUnion()))
			for _, updateList := range psqDollar[6].updateExprsUnion() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			psqLOCAL = &ast.Insert{Action: psqDollar[1].insertActionUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Ignore: psqDollar[3].ignoreUnion(), Table: psqDollar[4].tableName, Columns: cols, Rows: ast.Values{vals}, OnDup: ast.OnDup(psqDollar[7].updateExprsUnion())}
		}
		psqVAL.union = psqLOCAL
	case 80:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:862
		{
			psqLOCAL = ast.InsertAct
		}
		psqVAL.union = psqLOCAL
	case 81:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.InsertAction
//line psql.y:866
		{
			psqLOCAL = ast.ReplaceAct
		}
		psqVAL.union = psqLOCAL
	case 82:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:872
		{
			psqLOCAL = &ast.Update{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: psqDollar[5].tableExprsUnion(), Exprs: psqDollar[7].updateExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 83:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:878
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), TableExprs: ast.TableExprs{&ast.AliasedTableExpr{Expr: psqDollar[6].tableName, As: psqDollar[7].tableIdent}}, Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion()), OrderBy: psqDollar[9].orderByUnion(), Limit: psqDollar[10].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 84:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:882
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[6].tableNamesUnion(), TableExprs: psqDollar[8].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[9].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 85:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:886
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 86:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:890
		{
			psqLOCAL = &ast.Delete{With: psqDollar[1].withUnion(), Comments: ast.Comments(psqDollar[3].strs).Parsed(), Ignore: psqDollar[4].ignoreUnion(), Targets: psqDollar[5].tableNamesUnion(), TableExprs: psqDollar[7].tableExprsUnion(), Where: ast.NewWhere(ast.WhereClause, psqDollar[8].exprUnion())}
		}
		psqVAL.union = psqLOCAL
	case 87:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:895
		{
		}
	case 88:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:896
		{
		}
	case 89:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:900
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName.ToViewName()}
		}
		psqVAL.union = psqLOCAL
	case 90:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:904
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName.ToViewName())
		}
	case 91:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:910
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 92:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:914
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 93:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableNames
//line psql.y:920
		{
			psqLOCAL = ast.TableNames{psqDollar[1].tableName}
		}
		psqVAL.union = psqLOCAL
	case 94:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:924
		{
			psqSLICE := (*ast.TableNames)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableName)
		}
	case 95:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:930
		{
			psqLOCAL = &ast.Set{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Exprs: psqDollar[3].setExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 96:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:936
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Scope: psqDollar[3].scopeUnion(), Characteristics: psqDollar[5].characteristicsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 97:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:940
		{
			psqLOCAL = &ast.SetTransaction{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Characteristics: psqDollar[4].characteristicsUnion(), Scope: ast.ImplicitScope}
		}
		psqVAL.union = psqLOCAL
	case 98:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.Characteristic
//line psql.y:946
		{
			psqLOCAL = []ast.Characteristic{psqDollar[1].characteristicUnion()}
		}
		psqVAL.union = psqLOCAL
	case 99:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:950
		{
			psqSLICE := (*[]ast.Characteristic)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].characteristicUnion())
		}
	case 100:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:956
		{
			psqLOCAL = psqDollar[3].isolationLevelUnion()
		}
		psqVAL.union = psqLOCAL
	case 101:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:960
		{
			psqLOCAL = ast.ReadWrite
		}
		psqVAL.union = psqLOCAL
	case 102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Characteristic
//line psql.y:964
		{
			psqLOCAL = ast.ReadOnly
		}
		psqVAL.union = psqLOCAL
	case 103:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:970
		{
			psqLOCAL = ast.RepeatableRead
		}
		psqVAL.union = psqLOCAL
	case 104:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:974
		{
			psqLOCAL = ast.ReadCommitted
		}
		psqVAL.union = psqLOCAL
	case 105:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:978
		{
			psqLOCAL = ast.ReadUncommitted
		}
		psqVAL.union = psqLOCAL
	case 106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsolationLevel
//line psql.y:982
		{
			psqLOCAL = ast.Serializable
		}
		psqVAL.union = psqLOCAL
	case 107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:988
		{
			psqLOCAL = ast.SessionScope
		}
		psqVAL.union = psqLOCAL
	case 108:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Scope
//line psql.y:992
		{
			psqLOCAL = ast.GlobalScope
		}
		psqVAL.union = psqLOCAL
	case 109:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:998
		{
			psqDollar[1].createTableUnion().TableSpec = psqDollar[2].tableSpecUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 110:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1004
		{
			// Create table [name] like [name]
			psqDollar[1].createTableUnion().OptLike = psqDollar[2].optLikeUnion()
			psqDollar[1].createTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].createTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 111:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1011
		{
			indexDef := psqDollar[1].alterTableUnion().AlterOptions[0].(*ast.AddIndexDefinition).IndexDefinition
			indexDef.Columns = psqDollar[3].indexColumnsUnion()
			indexDef.Options = append(indexDef.Options, psqDollar[5].indexOptionsUnion()...)
			psqDollar[1].alterTableUnion().AlterOptions = append(psqDollar[1].alterTableUnion().AlterOptions, psqDollar[6].alterOptionsUnion()...)
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 112:
		psqDollar = psqS[psqpt-12 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1020
		{
			psqLOCAL = &ast.CreateView{ViewName: psqDollar[8].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IsReplace: psqDollar[3].booleanUnion(), Algorithm: psqDollar[4].str, Definer: psqDollar[5].definerUnion(), Security: psqDollar[6].str, Columns: psqDollar[9].columnsUnion(), Select: psqDollar[11].selStmtUnion(), CheckOption: psqDollar[12].str}
		}
		psqVAL.union = psqLOCAL
	case 113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:1024
		{
			psqDollar[1].createDatabaseUnion().FullyParsed = true
			psqDollar[1].createDatabaseUnion().CreateOptions = psqDollar[2].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].createDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1031
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 115:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1035
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 116:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1040
		{
			psqVAL.colIdent = ast.NewColIdent("")
		}
	case 117:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1044
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 118:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1050
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 119:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1055
		{
			var v []ast.VindexParam
			psqLOCAL = v
		}
		psqVAL.union = psqLOCAL
	case 120:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1060
		{
			psqLOCAL = psqDollar[2].vindexParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 121:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.VindexParam
//line psql.y:1066
		{
			psqLOCAL = make([]ast.VindexParam, 0, 4)
			psqLOCAL = append(psqLOCAL, psqDollar[1].vindexParam)
		}
		psqVAL.union = psqLOCAL
	case 122:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1071
		{
			psqSLICE := (*[]ast.VindexParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].vindexParam)
		}
	case 123:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1077
		{
			psqVAL.vindexParam = ast.VindexParam{Key: psqDollar[1].colIdent, Val: psqDollar[3].str}
		}
	case 124:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1082
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1086
		{
			psqLOCAL = psqDollar[1].jsonObjectParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 126:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JSONObjectParam
//line psql.y:1092
		{
			psqLOCAL = []*ast.JSONObjectParam{psqDollar[1].jsonObjectParam}
		}
		psqVAL.union = psqLOCAL
	case 127:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1096
		{
			psqSLICE := (*[]*ast.JSONObjectParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonObjectParam)
		}
	case 128:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1102
		{
			psqVAL.jsonObjectParam = &ast.JSONObjectParam{Key: psqDollar[1].exprUnion(), Value: psqDollar[3].exprUnion()}
		}
	case 129:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateTable
//line psql.y:1108
		{
			psqLOCAL = &ast.CreateTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[6].tableName, IfNotExists: psqDollar[5].booleanUnion(), Temp: psqDollar[3].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 130:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1115
		{
			psqLOCAL = &ast.AlterTable{Comments: ast.Comments(psqDollar[2].strs).Parsed(), Table: psqDollar[4].tableName}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 131:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1122
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[7].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[4].colIdent, Type: string(psqDollar[3].str)}, Options: psqDollar[5].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 132:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1127
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Fulltext: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 133:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1132
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Spatial: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 134:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.AlterTable
//line psql.y:1137
		{
			psqLOCAL = &ast.AlterTable{Table: psqDollar[8].tableName, AlterOptions: []ast.AlterOption{&ast.AddIndexDefinition{IndexDefinition: &ast.IndexDefinition{Info: &ast.IndexInfo{Name: psqDollar[5].colIdent, Type: string(psqDollar[3].str) + " " + string(psqDollar[4].str), Unique: true}, Options: psqDollar[6].indexOptionsUnion()}}}}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 135:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.CreateDatabase
//line psql.y:1144
		{
			psqLOCAL = &ast.CreateDatabase{Comments: ast.Comments(psqDollar[4].strs).Parsed(), DBName: psqDollar[6].tableIdent, IfNotExists: psqDollar[5].booleanUnion()}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 136:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AlterDatabase
//line psql.y:1151
		{
			psqLOCAL = &ast.AlterDatabase{}
			setDDL(psqlex, psqLOCAL)
		}
		psqVAL.union = psqLOCAL
	case 139:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1162
		{
			psqLOCAL = psqDollar[2].tableSpecUnion()
			psqLOCAL.Options = psqDollar[4].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 140:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1168
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 141:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1172
		{
			psqLOCAL = psqDollar[1].databaseOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 142:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1178
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 143:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1182
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 144:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.DatabaseOption
//line psql.y:1186
		{
			psqLOCAL = []ast.DatabaseOption{psqDollar[1].databaseOption}
		}
		psqVAL.union = psqLOCAL
	case 145:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1190
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 146:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1194
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 147:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1198
		{
			psqSLICE := (*[]ast.DatabaseOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].databaseOption)
		}
	case 148:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1204
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 149:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:1208
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 150:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1214
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 151:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1218
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CharacterSetType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 152:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1224
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 153:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1228
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.CollateType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 154:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1234
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (psqDollar[4].colIdent.String()), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 155:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1238
		{
			psqVAL.databaseOption = ast.DatabaseOption{Type: ast.EncryptionType, Value: (sql_types.EncodeStringSQL(psqDollar[4].str)), IsDefault: psqDollar[1].booleanUnion()}
		}
	case 156:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1244
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 157:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.OptLike
//line psql.y:1248
		{
			psqLOCAL = &ast.OptLike{LikeTable: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 158:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.ColumnDefinition
//line psql.y:1254
		{
			psqLOCAL = []*ast.ColumnDefinition{psqDollar[1].columnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 159:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1258
		{
			psqSLICE := (*[]*ast.ColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].columnDefinitionUnion())
		}
	case 160:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1264
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddColumn(psqDollar[1].columnDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 161:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.TableSpec
//line psql.y:1269
		{
			psqLOCAL = &ast.TableSpec{}
			psqLOCAL.AddConstraint(psqDollar[1].constraintDefinitionUnion())
		}
		psqVAL.union = psqLOCAL
	case 162:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1274
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
		}
	case 163:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:1278
		{
			psqVAL.tableSpecUnion().AddColumn(psqDollar[3].columnDefinitionUnion())
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[4].constraintDefinitionUnion())
		}
	case 164:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1283
		{
			psqVAL.tableSpecUnion().AddIndex(psqDollar[3].indexDefinitionUnion())
		}
	case 165:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1287
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 166:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1291
		{
			psqVAL.tableSpecUnion().AddConstraint(psqDollar[3].constraintDefinitionUnion())
		}
	case 167:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1302
		{
			psqDollar[2].columnType.Options = psqDollar[4].columnTypeOptionsUnion()
			if psqDollar[2].columnType.Options.Collate == "" {
				psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			}
			psqDollar[2].columnType.Options.Reference = psqDollar[5].referenceDefinitionUnion()
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 168:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL *ast.ColumnDefinition
//line psql.y:1311
		{
			psqDollar[2].columnType.Options = psqDollar[9].columnTypeOptionsUnion()
			psqDollar[2].columnType.Options.As = psqDollar[7].exprUnion()
			psqDollar[2].columnType.Options.Reference = psqDollar[10].referenceDefinitionUnion()
			psqDollar[2].columnType.Options.Collate = psqDollar[3].str
			psqLOCAL = &ast.ColumnDefinition{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType}
		}
		psqVAL.union = psqLOCAL
	case 169:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:1320
		{
			psqVAL.str = ""
		}
	case 170:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1324
		{
			psqVAL.str = ""
		}
	case 171:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1333
		{
			psqLOCAL = &ast.ColumnTypeOptions{Null: nil, Default: nil, OnUpdate: nil, Autoincrement: false, KeyOpt: ast.ColKeyNone, Comment: nil, As: nil, Invisible: nil, Format: ast.UnspecifiedFormat, EngineAttribute: nil, SecondaryEngineAttribute: nil}
		}
		psqVAL.union = psqLOCAL
	case 172:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1337
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 173:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1343
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 174:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1349
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 175:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1354
		{
			psqDollar[1].columnTypeOptionsUnion().Default = psqDollar[3].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 176:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1359
		{
			psqDollar[1].columnTypeOptionsUnion().OnUpdate = psqDollar[4].exprUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 177:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1364
		{
			psqDollar[1].columnTypeOptionsUnion().Autoincrement = true
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 178:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1369
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 179:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1374
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 180:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1379
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = sql_types.EncodeStringSQL(psqDollar[3].str)
		}
	case 181:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1383
		{
			psqDollar[1].columnTypeOptionsUnion().Collate = string(psqDollar[3].colIdent.String())
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 182:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1388
		{
			psqDollar[1].columnTypeOptionsUnion().Format = psqDollar[3].columnFormatUnion()
		}
	case 183:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1392
		{
			psqDollar[1].columnTypeOptionsUnion().SRID = ast.NewIntLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 184:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1397
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 185:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1403
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 186:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1411
		{
			psqLOCAL = ast.FixedFormat
		}
		psqVAL.union = psqLOCAL
	case 187:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1415
		{
			psqLOCAL = ast.DynamicFormat
		}
		psqVAL.union = psqLOCAL
	case 188:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnFormat
//line psql.y:1419
		{
			psqLOCAL = ast.DefaultFormat
		}
		psqVAL.union = psqLOCAL
	case 189:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1425
		{
			psqLOCAL = ast.VirtualStorage
		}
		psqVAL.union = psqLOCAL
	case 190:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnStorage
//line psql.y:1429
		{
			psqLOCAL = ast.StoredStorage
		}
		psqVAL.union = psqLOCAL
	case 191:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1434
		{
			psqLOCAL = &ast.ColumnTypeOptions{}
		}
		psqVAL.union = psqLOCAL
	case 192:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1438
		{
			psqDollar[1].columnTypeOptionsUnion().Storage = psqDollar[2].columnStorageUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 193:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1443
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 194:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1449
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Null = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 195:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1455
		{
			psqDollar[1].columnTypeOptionsUnion().Comment = ast.NewStrLiteral(psqDollar[3].str)
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 196:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1460
		{
			psqDollar[1].columnTypeOptionsUnion().KeyOpt = psqDollar[2].colKeyOptUnion()
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 197:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1465
		{
			val := false
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 198:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColumnTypeOptions
//line psql.y:1471
		{
			val := true
			psqDollar[1].columnTypeOptionsUnion().Invisible = &val
			psqLOCAL = psqDollar[1].columnTypeOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 199:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1479
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 201:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1486
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 202:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1490
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtime"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 203:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1494
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("localtimestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 204:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1498
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_timestamp"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 205:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1502
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("now"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 208:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1513
		{
			psqLOCAL = &ast.NullVal{}
		}
		psqVAL.union = psqLOCAL
	case 210:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1520
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 211:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1524
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 212:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1530
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 213:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1534
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 214:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1538
		{
			psqLOCAL = psqDollar[1].boolValUnion()
		}
		psqVAL.union = psqLOCAL
	case 215:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1542
		{
			psqLOCAL = ast.NewHexLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 216:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1546
		{
			psqLOCAL = ast.NewHexNumLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 217:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1550
		{
			psqLOCAL = ast.NewBitLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 218:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1554
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 219:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1559
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewBitLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 220:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1563
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexNumLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 221:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1567
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewHexLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 222:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1571
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: psqDollar[2].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 223:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1575
		{
			bindVariable(psqlex, psqDollar[2].str[1:])
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewArgument(psqDollar[2].str[1:])}
		}
		psqVAL.union = psqLOCAL
	case 224:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1582
		{
			psqVAL.str = ast.Armscii8Str
		}
	case 225:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1586
		{
			psqVAL.str = ast.ASCIIStr
		}
	case 226:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1590
		{
			psqVAL.str = ast.Big5Str
		}
	case 227:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1594
		{
			psqVAL.str = ast.UBinaryStr
		}
	case 228:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1598
		{
			psqVAL.str = ast.Cp1250Str
		}
	case 229:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1602
		{
			psqVAL.str = ast.Cp1251Str
		}
	case 230:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1606
		{
			psqVAL.str = ast.Cp1256Str
		}
	case 231:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1610
		{
			psqVAL.str = ast.Cp1257Str
		}
	case 232:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1614
		{
			psqVAL.str = ast.Cp850Str
		}
	case 233:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1618
		{
			psqVAL.str = ast.Cp852Str
		}
	case 234:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1622
		{
			psqVAL.str = ast.Cp866Str
		}
	case 235:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1626
		{
			psqVAL.str = ast.Cp932Str
		}
	case 236:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1630
		{
			psqVAL.str = ast.Dec8Str
		}
	case 237:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1634
		{
			psqVAL.str = ast.EucjpmsStr
		}
	case 238:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1638
		{
			psqVAL.str = ast.EuckrStr
		}
	case 239:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1642
		{
			psqVAL.str = ast.Gb18030Str
		}
	case 240:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1646
		{
			psqVAL.str = ast.Gb2312Str
		}
	case 241:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1650
		{
			psqVAL.str = ast.GbkStr
		}
	case 242:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1654
		{
			psqVAL.str = ast.Geostd8Str
		}
	case 243:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1658
		{
			psqVAL.str = ast.GreekStr
		}
	case 244:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1662
		{
			psqVAL.str = ast.HebrewStr
		}
	case 245:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1666
		{
			psqVAL.str = ast.Hp8Str
		}
	case 246:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1670
		{
			psqVAL.str = ast.Keybcs2Str
		}
	case 247:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1674
		{
			psqVAL.str = ast.Koi8rStr
		}
	case 248:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1678
		{
			psqVAL.str = ast.Koi8uStr
		}
	case 249:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1682
		{
			psqVAL.str = ast.Latin1Str
		}
	case 250:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1686
		{
			psqVAL.str = ast.Latin2Str
		}
	case 251:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1690
		{
			psqVAL.str = ast.Latin5Str
		}
	case 252:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1694
		{
			psqVAL.str = ast.Latin7Str
		}
	case 253:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1698
		{
			psqVAL.str = ast.MacceStr
		}
	case 254:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1702
		{
			psqVAL.str = ast.MacromanStr
		}
	case 255:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1706
		{
			psqVAL.str = ast.SjisStr
		}
	case 256:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1710
		{
			psqVAL.str = ast.Swe7Str
		}
	case 257:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1714
		{
			psqVAL.str = ast.Tis620Str
		}
	case 258:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1718
		{
			psqVAL.str = ast.Ucs2Str
		}
	case 259:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1722
		{
			psqVAL.str = ast.UjisStr
		}
	case 260:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1726
		{
			psqVAL.str = ast.Utf16Str
		}
	case 261:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1730
		{
			psqVAL.str = ast.Utf16leStr
		}
	case 262:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1734
		{
			psqVAL.str = ast.Utf32Str
		}
	case 263:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1738
		{
			psqVAL.str = ast.Utf8Str
		}
	case 264:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1742
		{
			psqVAL.str = ast.Utf8mb4Str
		}
	case 265:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1746
		{
			psqVAL.str = ast.Utf8Str
		}
	case 268:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1756
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 269:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1760
		{
			psqLOCAL = ast.NewFloatLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 270:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1764
		{
			psqLOCAL = ast.NewDecimalLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 271:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1770
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 272:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1774
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.NStringOp, Expr: ast.NewStrLiteral(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 273:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1778
		{
			psqLOCAL = &ast.IntroducerExpr{CharacterSet: psqDollar[1].str, Expr: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 274:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1784
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 275:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:1788
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 276:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1795
		{
			psqLOCAL = ast.ColKeyPrimary
		}
		psqVAL.union = psqLOCAL
	case 277:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1799
		{
			psqLOCAL = ast.ColKeyUnique
		}
		psqVAL.union = psqLOCAL
	case 278:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1803
		{
			psqLOCAL = ast.ColKeyUniqueKey
		}
		psqVAL.union = psqLOCAL
	case 279:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColumnKeyOption
//line psql.y:1807
		{
			psqLOCAL = ast.ColKey
		}
		psqVAL.union = psqLOCAL
	case 280:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1813
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Unsigned = psqDollar[2].booleanUnion()
			psqVAL.columnType.Zerofill = psqDollar[3].booleanUnion()
		}
	case 284:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1824
		{
			psqVAL.columnType = psqDollar[1].columnType
			psqVAL.columnType.Length = psqDollar[2].literalUnion()
		}
	case 285:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1829
		{
			psqVAL.columnType = psqDollar[1].columnType
		}
	case 286:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1835
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 287:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1839
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 288:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1843
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 289:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1847
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 290:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1851
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 291:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1855
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 292:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1859
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 293:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1863
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 294:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1867
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 295:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1873
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 296:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1879
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 297:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1885
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 298:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1891
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 299:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1897
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
			psqVAL.columnType.Length = psqDollar[2].LengthScaleOption.Length
			psqVAL.columnType.Scale = psqDollar[2].LengthScaleOption.Scale
		}
	case 300:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1905
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 301:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1909
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 302:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1913
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 303:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1917
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 304:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1921
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 305:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1927
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 306:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1931
		{
			// CHAR BYTE is an alias for binary. See also:
			// https://dev.psql.com/doc/refman/8.0/en/string-type-syntax.html
			psqVAL.columnType = ast.ColumnType{Type: "binary", Length: psqDollar[2].literalUnion()}
		}
	case 307:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:1937
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
	case 308:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1941
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 309:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1945
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
	case 310:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1949
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 311:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1953
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 312:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1957
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 313:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:1961
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), Charset: psqDollar[2].columnCharset}
		}
	case 314:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1965
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 315:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1969
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 316:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1973
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 317:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1977
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 318:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1981
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 319:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1985
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 320:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:1990
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str), EnumValues: psqDollar[3].strs, Charset: psqDollar[5].columnCharset}
		}
	case 321:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:1996
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 322:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2000
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 323:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2004
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 324:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2008
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 325:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2012
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 326:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2016
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 327:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2020
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 328:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2024
		{
			psqVAL.columnType = ast.ColumnType{Type: string(psqDollar[1].str)}
		}
	case 329:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2030
		{
			psqVAL.strs = make([]string, 0, 4)
			psqVAL.strs = append(psqVAL.strs, sql_types.EncodeStringSQL(psqDollar[1].str))
		}
	case 330:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2035
		{
			psqVAL.strs = append(psqDollar[1].strs, sql_types.EncodeStringSQL(psqDollar[3].str))
		}
	case 331:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2040
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 332:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Literal
//line psql.y:2044
		{
			psqLOCAL = ast.NewIntLiteral(psqDollar[2].str)
		}
		psqVAL.union = psqLOCAL
	case 333:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2049
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 334:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2054
		{
			psqVAL.LengthScaleOption = ast.LengthScaleOption{}
		}
	case 335:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2059
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 336:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2063
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 337:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2067
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 338:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2072
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 339:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2076
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 340:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2081
		{
			psqVAL.columnCharset = ast.ColumnCharset{}
		}
	case 341:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2085
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].colIdent.String()), Binary: psqDollar[3].booleanUnion()}
		}
	case 342:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2089
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: sql_types.EncodeStringSQL(psqDollar[2].str), Binary: psqDollar[3].booleanUnion()}
		}
	case 343:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2093
		{
			psqVAL.columnCharset = ast.ColumnCharset{Name: string(psqDollar[2].str)}
		}
	case 344:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2097
		{
			// ASCII: ast.Shorthand for CHARACTER SET latin1.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: psqDollar[2].booleanUnion()}
		}
	case 345:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2102
		{
			// UNICODE: ast.Shorthand for CHARACTER SET ucs2.
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: psqDollar[2].booleanUnion()}
		}
	case 346:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2107
		{
			// BINARY: ast.Shorthand for default CHARACTER SET but with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "", Binary: true}
		}
	case 347:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2112
		{
			// BINARY ASCII: ast.Shorthand for CHARACTER SET latin1 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "latin1", Binary: true}
		}
	case 348:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2117
		{
			// BINARY UNICODE: ast.Shorthand for CHARACTER SET ucs2 with binary collation
			psqVAL.columnCharset = ast.ColumnCharset{Name: "ucs2", Binary: true}
		}
	case 349:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2123
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 350:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2127
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 351:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2132
		{
			psqVAL.str = ""
		}
	case 352:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2136
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 353:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2140
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 354:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexDefinition
//line psql.y:2147
		{
			psqLOCAL = &ast.IndexDefinition{Info: psqDollar[1].indexInfoUnion(), Columns: psqDollar[3].indexColumnsUnion(), Options: psqDollar[5].indexOptionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 355:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2152
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 356:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2156
		{
			psqLOCAL = psqDollar[1].indexOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 357:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:2162
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 358:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2166
		{
			psqSLICE := (*[]*ast.IndexOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexOptionUnion())
		}
	case 359:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2172
		{
			psqLOCAL = psqDollar[1].indexOptionUnion()
		}
		psqVAL.union = psqLOCAL
	case 360:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2176
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 361:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2180
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 362:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2184
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 363:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:2188
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str) + " " + string(psqDollar[2].str), String: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 364:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2194
		{
			psqVAL.str = ""
		}
	case 365:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2198
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 366:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2204
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 367:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2208
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Spatial: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 368:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2212
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str) + " " + string(psqDollar[2].str), Name: ast.NewColIdent(psqDollar[3].str), Fulltext: true, Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 369:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2216
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[2].str) + " " + string(psqDollar[3].str), ConstraintName: ast.NewColIdent(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[4].str), Unique: true}
		}
		psqVAL.union = psqLOCAL
	case 370:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexInfo
//line psql.y:2220
		{
			psqLOCAL = &ast.IndexInfo{Type: string(psqDollar[1].str), Name: ast.NewColIdent(psqDollar[2].str), Unique: false}
		}
		psqVAL.union = psqLOCAL
	case 371:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2225
		{
			psqVAL.str = ""
		}
	case 372:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2229
		{
			psqVAL.str = psqDollar[2].str
		}
	case 373:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2235
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 374:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2239
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 375:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2243
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 376:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2250
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 377:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2254
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 378:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2259
		{
			psqVAL.str = "key"
		}
	case 379:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2263
		{
			psqVAL.str = psqDollar[1].str
		}
	case 380:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2269
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 381:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2273
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 382:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2278
		{
			psqVAL.str = ""
		}
	case 383:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2282
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 384:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexColumn
//line psql.y:2288
		{
			psqLOCAL = []*ast.IndexColumn{psqDollar[1].indexColumnUnion()}
		}
		psqVAL.union = psqLOCAL
	case 385:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2292
		{
			psqSLICE := (*[]*ast.IndexColumn)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].indexColumnUnion())
		}
	case 386:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2298
		{
			psqLOCAL = &ast.IndexColumn{Column: psqDollar[1].colIdent, Length: psqDollar[2].literalUnion(), Direction: psqDollar[3].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 387:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.IndexColumn
//line psql.y:2302
		{
			psqLOCAL = &ast.IndexColumn{Expression: psqDollar[2].exprUnion(), Direction: psqDollar[4].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 388:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2308
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 389:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2312
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 390:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2318
		{
			psqLOCAL = &ast.ConstraintDefinition{Name: psqDollar[2].colIdent, Details: psqDollar[3].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 391:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConstraintDefinition
//line psql.y:2322
		{
			psqLOCAL = &ast.ConstraintDefinition{Details: psqDollar[1].constraintInfoUnion()}
		}
		psqVAL.union = psqLOCAL
	case 392:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2328
		{
			psqLOCAL = &ast.ForeignKeyDefinition{IndexName: ast.NewColIdent(psqDollar[3].str), Source: psqDollar[5].columnsUnion(), ReferenceDefinition: psqDollar[7].referenceDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 393:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2334
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 394:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2338
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 395:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2342
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 396:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2346
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnDelete: psqDollar[7].referenceActionUnion(), OnUpdate: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 397:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2350
		{
			psqLOCAL = &ast.ReferenceDefinition{ReferencedTable: psqDollar[2].tableName, ReferencedColumns: psqDollar[4].columnsUnion(), Match: psqDollar[6].matchActionUnion(), OnUpdate: psqDollar[7].referenceActionUnion(), OnDelete: psqDollar[8].referenceActionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 398:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2355
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 399:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ReferenceDefinition
//line psql.y:2359
		{
			psqLOCAL = psqDollar[1].referenceDefinitionUnion()
		}
		psqVAL.union = psqLOCAL
	case 400:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.ConstraintInfo
//line psql.y:2365
		{
			psqLOCAL = &ast.CheckConstraintDefinition{Expr: psqDollar[3].exprUnion(), Enforced: psqDollar[5].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 401:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2371
		{
			psqLOCAL = psqDollar[2].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 402:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2377
		{
			psqLOCAL = ast.Full
		}
		psqVAL.union = psqLOCAL
	case 403:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2381
		{
			psqLOCAL = ast.Partial
		}
		psqVAL.union = psqLOCAL
	case 404:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2385
		{
			psqLOCAL = ast.Simple
		}
		psqVAL.union = psqLOCAL
	case 405:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2390
		{
			psqLOCAL = ast.DefaultMatch
		}
		psqVAL.union = psqLOCAL
	case 406:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.MatchAction
//line psql.y:2394
		{
			psqLOCAL = psqDollar[1].matchActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 407:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2400
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 408:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2406
		{
			psqLOCAL = psqDollar[3].referenceActionUnion()
		}
		psqVAL.union = psqLOCAL
	case 409:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2412
		{
			psqLOCAL = ast.Restrict
		}
		psqVAL.union = psqLOCAL
	case 410:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2416
		{
			psqLOCAL = ast.Cascade
		}
		psqVAL.union = psqLOCAL
	case 411:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2420
		{
			psqLOCAL = ast.NoAction
		}
		psqVAL.union = psqLOCAL
	case 412:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2424
		{
			psqLOCAL = ast.SetDefault
		}
		psqVAL.union = psqLOCAL
	case 413:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ReferenceAction
//line psql.y:2428
		{
			psqLOCAL = ast.SetNull
		}
		psqVAL.union = psqLOCAL
	case 414:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2433
		{
			psqVAL.str = ""
		}
	case 415:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2437
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 416:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2441
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 417:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2447
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 418:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2451
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 419:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2456
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 420:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2460
		{
			psqLOCAL = psqDollar[1].booleanUnion()
		}
		psqVAL.union = psqLOCAL
	case 421:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2465
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 422:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2469
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 423:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2475
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 424:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2479
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableOptionUnion())
		}
	case 425:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2483
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 426:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableOptions
//line psql.y:2489
		{
			psqLOCAL = ast.TableOptions{psqDollar[1].tableOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 427:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2493
		{
			psqSLICE := (*ast.TableOptions)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].tableOptionUnion())
		}
	case 428:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2499
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[2].str)), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 429:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2503
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[2].str), String: psqDollar[4].str, CaseSensitive: true}
		}
		psqVAL.union = psqLOCAL
	case 430:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2507
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 431:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2511
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 432:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2515
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 433:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2519
		{
			psqLOCAL = &ast.TableOption{Name: (string(psqDollar[1].str) + " " + string(psqDollar[2].str)), Value: ast.NewStrLiteral(psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 434:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2523
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 435:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2527
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 436:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2531
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 437:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2535
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Value: ast.NewStrLiteral(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 438:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2539
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 439:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2543
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 440:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2547
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: string(psqDollar[3].str)}
		}
		psqVAL.union = psqLOCAL
	case 441:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2551
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), String: (psqDollar[3].colIdent.String() + psqDollar[4].str)}
		}
		psqVAL.union = psqLOCAL
	case 442:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.TableOption
//line psql.y:2555
		{
			psqLOCAL = &ast.TableOption{Name: string(psqDollar[1].str), Tables: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 443:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2560
		{
			psqVAL.str = ""
		}
	case 444:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2564
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 445:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:2568
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 455:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2587
		{
			psqVAL.str = psqDollar[1].colIdent.String()
		}
	case 456:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2591
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 457:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:2595
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 458:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:2600
		{
			psqVAL.str = ""
		}
	case 460:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2606
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 461:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2610
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 462:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2615
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 463:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:2619
		{
			psqLOCAL = psqDollar[2].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 464:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2624
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 465:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2628
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 466:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:2632
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.OrderByOption{Cols: psqDollar[5].columnsUnion()})
		}
	case 467:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2636
		{
			psqLOCAL = psqDollar[1].alterOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 468:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2640
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionsUnion()...)
		}
	case 469:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2644
		{
			psqLOCAL = append(append(psqDollar[1].alterOptionsUnion(), psqDollar[3].alterOptionsUnion()...), &ast.OrderByOption{Cols: psqDollar[7].columnsUnion()})
		}
		psqVAL.union = psqLOCAL
	case 470:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2650
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 471:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2654
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 472:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2658
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 473:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2664
		{
			psqLOCAL = psqDollar[1].tableOptionsUnion()
		}
		psqVAL.union = psqLOCAL
	case 474:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2668
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 475:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2672
		{
			psqLOCAL = &ast.AddConstraintDefinition{ConstraintDefinition: psqDollar[2].constraintDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 476:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2676
		{
			psqLOCAL = &ast.AddIndexDefinition{IndexDefinition: psqDollar[2].indexDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 477:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2680
		{
			psqLOCAL = &ast.AddColumns{Columns: psqDollar[4].columnDefinitionsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 478:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2684
		{
			psqLOCAL = &ast.AddColumns{Columns: []*ast.ColumnDefinition{psqDollar[3].columnDefinitionUnion()}, First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 479:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2688
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: true}
		}
		psqVAL.union = psqLOCAL
	case 480:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2692
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 481:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2696
		{
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), DropDefault: false, DefaultVal: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 482:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2700
		{
			val := false
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 483:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2705
		{
			val := true
			psqLOCAL = &ast.AlterColumn{Column: psqDollar[3].colNameUnion(), Invisible: &val}
		}
		psqVAL.union = psqLOCAL
	case 484:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2710
		{
			psqLOCAL = &ast.AlterCheck{Name: psqDollar[3].colIdent, Enforced: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 485:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2714
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: false}
		}
		psqVAL.union = psqLOCAL
	case 486:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2718
		{
			psqLOCAL = &ast.AlterIndex{Name: psqDollar[3].colIdent, Invisible: true}
		}
		psqVAL.union = psqLOCAL
	case 487:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2722
		{
			psqLOCAL = &ast.ChangeColumn{OldColumn: psqDollar[3].colNameUnion(), NewColDefinition: psqDollar[4].columnDefinitionUnion(), First: psqDollar[5].booleanUnion(), After: psqDollar[6].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 488:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2726
		{
			psqLOCAL = &ast.ModifyColumn{NewColDefinition: psqDollar[3].columnDefinitionUnion(), First: psqDollar[4].booleanUnion(), After: psqDollar[5].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 489:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2730
		{
			psqLOCAL = &ast.AlterCharset{CharacterSet: psqDollar[4].str, Collate: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 490:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2734
		{
			psqLOCAL = &ast.KeyState{Enable: false}
		}
		psqVAL.union = psqLOCAL
	case 491:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2738
		{
			psqLOCAL = &ast.KeyState{Enable: true}
		}
		psqVAL.union = psqLOCAL
	case 492:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2742
		{
			psqLOCAL = &ast.TablespaceOperation{Import: false}
		}
		psqVAL.union = psqLOCAL
	case 493:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2746
		{
			psqLOCAL = &ast.TablespaceOperation{Import: true}
		}
		psqVAL.union = psqLOCAL
	case 494:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2750
		{
			psqLOCAL = &ast.DropColumn{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 495:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2754
		{
			psqLOCAL = &ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 496:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2758
		{
			psqLOCAL = &ast.DropKey{Type: ast.PrimaryKeyType}
		}
		psqVAL.union = psqLOCAL
	case 497:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2762
		{
			psqLOCAL = &ast.DropKey{Type: ast.ForeignKeyType, Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 498:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2766
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 499:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2770
		{
			psqLOCAL = &ast.DropKey{Type: ast.CheckKeyType, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 500:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2774
		{
			psqLOCAL = &ast.Force{}
		}
		psqVAL.union = psqLOCAL
	case 501:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2778
		{
			psqLOCAL = &ast.RenameTableName{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 502:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2782
		{
			psqLOCAL = &ast.RenameIndex{OldName: psqDollar[3].colIdent, NewName: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 503:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:2788
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 504:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2792
		{
			psqSLICE := (*[]ast.AlterOption)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].alterOptionUnion())
		}
	case 505:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2798
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 506:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2802
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 507:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2806
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 508:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2810
		{
			psqLOCAL = ast.AlgorithmValue(string(psqDollar[3].str))
		}
		psqVAL.union = psqLOCAL
	case 509:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2814
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 510:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2818
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 511:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2822
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 512:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2826
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 513:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2830
		{
			psqLOCAL = &ast.Validation{With: true}
		}
		psqVAL.union = psqLOCAL
	case 514:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:2834
		{
			psqLOCAL = &ast.Validation{With: false}
		}
		psqVAL.union = psqLOCAL
	case 515:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2840
		{
			psqDollar[1].alterTableUnion().FullyParsed = true
			psqDollar[1].alterTableUnion().AlterOptions = psqDollar[2].alterOptionsUnion()
			psqLOCAL = psqDollar[1].alterTableUnion()
		}
		psqVAL.union = psqLOCAL
	case 516:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2846
		{
			psqLOCAL = &ast.AlterView{ViewName: psqDollar[7].tableName.ToViewName(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Algorithm: psqDollar[3].str, Definer: psqDollar[4].definerUnion(), Security: psqDollar[5].str, Columns: psqDollar[8].columnsUnion(), Select: psqDollar[10].selStmtUnion(), CheckOption: psqDollar[11].str}
		}
		psqVAL.union = psqLOCAL
	case 517:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2856
		{
			psqDollar[1].alterDatabaseUnion().FullyParsed = true
			psqDollar[1].alterDatabaseUnion().DBName = psqDollar[2].tableIdent
			psqDollar[1].alterDatabaseUnion().AlterOptions = psqDollar[3].databaseOptionsUnion()
			psqLOCAL = psqDollar[1].alterDatabaseUnion()
		}
		psqVAL.union = psqLOCAL
	case 518:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2863
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.CreateVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   ast.NewColIdent(psqDollar[6].tableName.Name.String()),
					Type:   psqDollar[7].colIdent,
					Params: psqDollar[8].vindexParamsUnion(),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 519:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2875
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropVindexDDLAction,
				Table:  psqDollar[6].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: ast.NewColIdent(psqDollar[6].tableName.Name.String()),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 520:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2885
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 521:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2889
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.DropVschemaTableDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 522:
		psqDollar = psqS[psqpt-13 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2893
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name:   psqDollar[8].colIdent,
					Type:   psqDollar[12].colIdent,
					Params: psqDollar[13].vindexParamsUnion(),
				},
				VindexCols: psqDollar[10].columnsUnion(),
			}
		}
		psqVAL.union = psqLOCAL
	case 523:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2906
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.DropColVindexDDLAction,
				Table:  psqDollar[5].tableName,
				VindexSpec: &ast.VindexSpec{
					Name: psqDollar[8].colIdent,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 524:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2916
		{
			psqLOCAL = &ast.AlterVschema{Action: ast.AddSequenceDDLAction, Table: psqDollar[6].tableName}
		}
		psqVAL.union = psqLOCAL
	case 525:
		psqDollar = psqS[psqpt-10 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:2920
		{
			psqLOCAL = &ast.AlterVschema{
				Action: ast.AddAutoIncDDLAction,
				Table:  psqDollar[5].tableName,
				AutoIncSpec: &ast.AutoIncSpec{
					Column:   psqDollar[8].colIdent,
					Sequence: psqDollar[10].tableName,
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 526:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:2933
		{
			psqLOCAL = &ast.JSONTableExpr{Expr: psqDollar[3].exprUnion(), Filter: psqDollar[5].exprUnion(), Columns: psqDollar[6].jtColumnListUnion(), Alias: psqDollar[8].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 527:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2939
		{
			psqLOCAL = psqDollar[3].jtColumnListUnion()
		}
		psqVAL.union = psqLOCAL
	case 528:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.JtColumnDefinition
//line psql.y:2945
		{
			psqLOCAL = []*ast.JtColumnDefinition{psqDollar[1].jtColumnDefinitionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 529:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:2949
		{
			psqSLICE := (*[]*ast.JtColumnDefinition)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jtColumnDefinitionUnion())
		}
	case 530:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2955
		{
			psqLOCAL = &ast.JtColumnDefinition{JtOrdinal: &ast.JtOrdinalColDef{Name: psqDollar[1].colIdent}}
		}
		psqVAL.union = psqLOCAL
	case 531:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2959
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 532:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2965
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 533:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2971
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 534:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2977
		{
			psqDollar[2].columnType.Options = &ast.ColumnTypeOptions{Collate: psqDollar[3].str}
			jtPath := &ast.JtPathColDef{Name: psqDollar[1].colIdent, Type: psqDollar[2].columnType, JtColExists: psqDollar[4].booleanUnion(), Path: psqDollar[6].exprUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtPath: jtPath}
		}
		psqVAL.union = psqLOCAL
	case 535:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.JtColumnDefinition
//line psql.y:2983
		{
			jtNestedPath := &ast.JtNestedPathColDef{Path: psqDollar[3].exprUnion(), Columns: psqDollar[4].jtColumnListUnion()}
			psqLOCAL = &ast.JtColumnDefinition{JtNestedPath: jtNestedPath}
		}
		psqVAL.union = psqLOCAL
	case 536:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2989
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 537:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2993
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 538:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:2997
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 539:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3001
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 540:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3007
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 541:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3013
		{
			psqLOCAL = psqDollar[1].jtOnResponseUnion()
		}
		psqVAL.union = psqLOCAL
	case 542:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3019
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.ErrorJSONType}
		}
		psqVAL.union = psqLOCAL
	case 543:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3023
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.NullJSONType}
		}
		psqVAL.union = psqLOCAL
	case 544:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.JtOnResponse
//line psql.y:3027
		{
			psqLOCAL = &ast.JtOnResponse{ResponseType: ast.DefaultJSONType, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 545:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3033
		{
			psqLOCAL = &ast.RenameTable{TablePairs: psqDollar[3].renameTablePairsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 546:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL []*ast.RenameTablePair
//line psql.y:3039
		{
			psqLOCAL = []*ast.RenameTablePair{{FromTable: psqDollar[1].tableName, ToTable: psqDollar[3].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 547:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:3043
		{
			psqSLICE := (*[]*ast.RenameTablePair)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, &ast.RenameTablePair{FromTable: psqDollar[3].tableName, ToTable: psqDollar[5].tableName})
		}
	case 548:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3049
		{
			psqLOCAL = &ast.DropTable{FromTables: psqDollar[6].tableNamesUnion(), IfExists: psqDollar[5].booleanUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), Temp: psqDollar[3].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 549:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3053
		{
			// Change this to an alter statement
			if psqDollar[4].colIdent.Lowered() == "primary" {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.PrimaryKeyType}}, psqDollar[7].alterOptionsUnion()...)}
			} else {
				psqLOCAL = &ast.AlterTable{FullyParsed: true, Table: psqDollar[6].tableName, AlterOptions: append([]ast.AlterOption{&ast.DropKey{Type: ast.NormalKeyType, Name: psqDollar[4].colIdent}}, psqDollar[7].alterOptionsUnion()...)}
			}
		}
		psqVAL.union = psqLOCAL
	case 550:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3062
		{
			psqLOCAL = &ast.DropView{FromTables: psqDollar[5].tableNamesUnion(), Comments: ast.Comments(psqDollar[2].strs).Parsed(), IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 551:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3066
		{
			psqLOCAL = &ast.DropDatabase{Comments: ast.Comments(psqDollar[2].strs).Parsed(), DBName: psqDollar[5].tableIdent, IfExists: psqDollar[4].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 552:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3072
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[3].tableName}
		}
		psqVAL.union = psqLOCAL
	case 553:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3076
		{
			psqLOCAL = &ast.TruncateTable{Table: psqDollar[2].tableName}
		}
		psqVAL.union = psqLOCAL
	case 554:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3081
		{
			psqLOCAL = &ast.OtherRead{}
		}
		psqVAL.union = psqLOCAL
	case 555:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3087
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Charset, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 556:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3091
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Collation, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 557:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3095
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Full: psqDollar[2].booleanUnion(), Command: ast.Column, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 558:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3099
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 559:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3103
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Database, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 560:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3107
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Keyspace, Filter: psqDollar[3].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 561:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3111
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Function, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 562:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3115
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Index, Tbl: psqDollar[5].tableName, DbName: psqDollar[6].tableIdent, Filter: psqDollar[7].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 563:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3119
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.OpenTable, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 564:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3123
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Privilege}}
		}
		psqVAL.union = psqLOCAL
	case 565:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3127
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Procedure, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 566:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3131
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 567:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3135
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.StatusGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 568:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3139
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableSession, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 569:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3143
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VariableGlobal, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 570:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3147
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.TableStatus, DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 571:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3151
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Table, Full: psqDollar[2].booleanUnion(), DbName: psqDollar[4].tableIdent, Filter: psqDollar[5].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 572:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3155
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Trigger, DbName: psqDollar[3].tableIdent, Filter: psqDollar[4].showFilterUnion()}}
		}
		psqVAL.union = psqLOCAL
	case 573:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3159
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateDb, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 574:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3163
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateE, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 575:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3167
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateF, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 576:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3171
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateProc, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 577:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3175
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTbl, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 578:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3179
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateTr, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 579:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3183
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowCreate{Command: ast.CreateV, Op: psqDollar[4].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 580:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3187
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Plugins}}
		}
		psqVAL.union = psqLOCAL
	case 581:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3191
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.GtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 582:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3195
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VGtidExecGlobal, DbName: psqDollar[4].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 583:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3199
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaTables}}
		}
		psqVAL.union = psqLOCAL
	case 584:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3203
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes}}
		}
		psqVAL.union = psqLOCAL
	case 585:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3207
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.VschemaVindexes, Tbl: psqDollar[5].tableName}}
		}
		psqVAL.union = psqLOCAL
	case 586:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3211
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowBasic{Command: ast.Warnings}}
		}
		psqVAL.union = psqLOCAL
	case 587:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3218
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].colIdent.String())}}
		}
		psqVAL.union = psqLOCAL
	case 588:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3222
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 589:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3226
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()}}
		}
		psqVAL.union = psqLOCAL
	case 590:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3230
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 591:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3234
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 592:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3238
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str) + " " + string(psqDollar[3].str) + " " + ast.String(psqDollar[4].tableName)}}
		}
		psqVAL.union = psqLOCAL
	case 593:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3242
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[3].str)}}
		}
		psqVAL.union = psqLOCAL
	case 594:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3246
		{
			psqLOCAL = &ast.Show{Internal: &ast.ShowOther{Command: string(psqDollar[2].str)}}
		}
		psqVAL.union = psqLOCAL
	case 595:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3252
		{
			psqVAL.str = ""
		}
	case 596:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3256
		{
			psqVAL.str = "extended "
		}
	case 597:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3262
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 598:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3266
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 599:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3272
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 600:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3276
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 601:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3282
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 602:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3286
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 603:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3290
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 604:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3296
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 605:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3300
		{
			psqLOCAL = &ast.ShowFilter{Like: string(psqDollar[2].str)}
		}
		psqVAL.union = psqLOCAL
	case 606:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ShowFilter
//line psql.y:3304
		{
			psqLOCAL = &ast.ShowFilter{Filter: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 607:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3310
		{
			psqVAL.empty = struct{}{}
		}
	case 608:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3314
		{
			psqVAL.empty = struct{}{}
		}
	case 609:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3318
		{
			psqVAL.empty = struct{}{}
		}
	case 610:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3324
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 611:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3328
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 612:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3334
		{
			psqLOCAL = &ast.Use{DBName: psqDollar[2].tableIdent}
		}
		psqVAL.union = psqLOCAL
	case 613:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3338
		{
			psqLOCAL = &ast.Use{DBName: ast.TableIdent{V: ""}}
		}
		psqVAL.union = psqLOCAL
	case 614:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3342
		{
			psqLOCAL = &ast.Use{DBName: ast.NewTableIdent(psqDollar[2].tableIdent.String() + "@" + string(psqDollar[3].str))}
		}
		psqVAL.union = psqLOCAL
	case 615:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3348
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 616:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3352
		{
			psqLOCAL = &ast.Begin{}
		}
		psqVAL.union = psqLOCAL
	case 617:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3358
		{
			psqLOCAL = &ast.Commit{}
		}
		psqVAL.union = psqLOCAL
	case 618:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3364
		{
			psqLOCAL = &ast.Rollback{}
		}
		psqVAL.union = psqLOCAL
	case 619:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3368
		{
			psqLOCAL = &ast.SRollback{Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 620:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3373
		{
			psqVAL.empty = struct{}{}
		}
	case 621:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3375
		{
			psqVAL.empty = struct{}{}
		}
	case 622:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3378
		{
			psqVAL.empty = struct{}{}
		}
	case 623:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3380
		{
			psqVAL.empty = struct{}{}
		}
	case 624:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3385
		{
			psqLOCAL = &ast.Savepoint{Name: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 625:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3391
		{
			psqLOCAL = &ast.Release{Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 626:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3396
		{
			psqLOCAL = ast.EmptyType
		}
		psqVAL.union = psqLOCAL
	case 627:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3400
		{
			psqLOCAL = ast.JSONType
		}
		psqVAL.union = psqLOCAL
	case 628:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3404
		{
			psqLOCAL = ast.TreeType
		}
		psqVAL.union = psqLOCAL
	case 629:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3408
		{
			psqLOCAL = ast.TraditionalType
		}
		psqVAL.union = psqLOCAL
	case 630:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3412
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 631:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ExplainType
//line psql.y:3416
		{
			psqLOCAL = ast.AnalyzeType
		}
		psqVAL.union = psqLOCAL
	case 632:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3422
		{
			psqVAL.str = psqDollar[1].str
		}
	case 633:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3426
		{
			psqVAL.str = psqDollar[1].str
		}
	case 634:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3430
		{
			psqVAL.str = psqDollar[1].str
		}
	case 635:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3436
		{
			psqLOCAL = psqDollar[1].selStmtUnion()
		}
		psqVAL.union = psqLOCAL
	case 636:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3440
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 637:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3444
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 638:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3448
		{
			psqLOCAL = psqDollar[1].statementUnion()
		}
		psqVAL.union = psqLOCAL
	case 639:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3453
		{
			psqVAL.str = ""
		}
	case 640:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3457
		{
			psqVAL.str = psqDollar[1].colIdent.Val
		}
	case 641:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3461
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 642:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3467
		{
			psqLOCAL = &ast.ExplainTab{Table: psqDollar[2].tableName, Wild: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 643:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3471
		{
			psqLOCAL = &ast.ExplainStmt{Type: psqDollar[2].explainTypeUnion(), Statement: psqDollar[3].statementUnion()}
		}
		psqVAL.union = psqLOCAL
	case 644:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3477
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 645:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3481
		{
			psqLOCAL = &ast.OtherAdmin{}
		}
		psqVAL.union = psqLOCAL
	case 646:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3487
		{
			psqLOCAL = &ast.LockTables{Tables: psqDollar[3].tableAndLockTypesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 647:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableAndLockTypes
//line psql.y:3493
		{
			psqLOCAL = ast.TableAndLockTypes{psqDollar[1].tableAndLockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 648:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3497
		{
			psqSLICE := (*ast.TableAndLockTypes)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableAndLockTypeUnion())
		}
	case 649:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.TableAndLockType
//line psql.y:3503
		{
			psqLOCAL = &ast.TableAndLockType{Table: psqDollar[1].aliasedTableNameUnion(), Lock: psqDollar[2].lockTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 650:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3509
		{
			psqLOCAL = ast.Read
		}
		psqVAL.union = psqLOCAL
	case 651:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3513
		{
			psqLOCAL = ast.ReadLocal
		}
		psqVAL.union = psqLOCAL
	case 652:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3517
		{
			psqLOCAL = ast.Write
		}
		psqVAL.union = psqLOCAL
	case 653:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.LockType
//line psql.y:3521
		{
			psqLOCAL = ast.LowPriorityWrite
		}
		psqVAL.union = psqLOCAL
	case 654:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3527
		{
			psqLOCAL = &ast.UnlockTables{}
		}
		psqVAL.union = psqLOCAL
	case 655:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3533
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), FlushOptions: psqDollar[3].strs}
		}
		psqVAL.union = psqLOCAL
	case 656:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3537
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion()}
		}
		psqVAL.union = psqLOCAL
	case 657:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3541
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 658:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3545
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 659:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3549
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), WithLock: true}
		}
		psqVAL.union = psqLOCAL
	case 660:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3553
		{
			psqLOCAL = &ast.Flush{IsLocal: psqDollar[2].booleanUnion(), TableNames: psqDollar[4].tableNamesUnion(), ForExport: true}
		}
		psqVAL.union = psqLOCAL
	case 661:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3559
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 662:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3563
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[3].str)
		}
	case 663:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3569
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 664:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3573
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 665:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3577
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 666:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3581
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 667:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3585
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 668:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3589
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 669:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3593
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str) + psqDollar[3].str
		}
	case 670:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3597
		{
			psqVAL.str = string(psqDollar[1].str) + " " + string(psqDollar[2].str)
		}
	case 671:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3601
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 672:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3605
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 673:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3609
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 674:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3614
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 675:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3618
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 676:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3622
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 677:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3627
		{
			psqVAL.str = ""
		}
	case 678:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3631
		{
			psqVAL.str = " " + string(psqDollar[1].str) + " " + string(psqDollar[2].str) + " " + psqDollar[3].colIdent.String()
		}
	case 679:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3636
		{
			setAllowComments(psqlex, true)
		}
	case 680:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3640
		{
			// Strange argumets shift
			psqLOCAL = &ast.CommentOnSchema{Comments: ast.Comments{psqDollar[2].str}.Parsed(), Schema: psqDollar[5].schemaName.Name, Value: psqDollar[7].exprUnion()}
			setAllowComments(psqlex, false)
		}
		psqVAL.union = psqLOCAL
	case 681:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3648
		{
			setAllowComments(psqlex, true)
		}
	case 682:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3652
		{
			psqVAL.strs = psqDollar[2].strs
			setAllowComments(psqlex, false)
		}
	case 683:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3658
		{
			psqVAL.strs = nil
		}
	case 684:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3662
		{
			psqVAL.strs = append(psqDollar[1].strs, psqDollar[2].str)
		}
	case 685:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3668
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 686:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3672
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 687:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3676
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 688:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3681
		{
			psqVAL.str = ""
		}
	case 689:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3685
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 690:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3689
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 691:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3694
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 692:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3698
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 693:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:3702
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 694:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3708
		{
			psqLOCAL = &ast.PrepareStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Statement: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 695:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3712
		{
			psqLOCAL = &ast.PrepareStmt{
				Name:     psqDollar[3].colIdent,
				Comments: ast.Comments(psqDollar[2].strs).Parsed(),
				Statement: &ast.ColName{
					Name: ast.NewColIdentWithAt(string(psqDollar[5].str), ast.SingleAt),
				},
			}
		}
		psqVAL.union = psqLOCAL
	case 696:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3724
		{
			psqLOCAL = &ast.ExecuteStmt{Name: psqDollar[3].colIdent, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Arguments: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 697:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3729
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 698:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3733
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 699:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3739
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DeallocateType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 700:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:3743
		{
			psqLOCAL = &ast.DeallocateStmt{Type: ast.DropType, Comments: ast.Comments(psqDollar[2].strs).Parsed(), Name: psqDollar[4].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 701:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3748
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 702:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3752
		{
			psqLOCAL = psqDollar[1].selectExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 703:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3757
		{
			psqVAL.strs = nil
		}
	case 704:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3761
		{
			psqVAL.strs = []string{psqDollar[1].str}
		}
	case 705:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3765
		{ // TODO: ast.This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str}
		}
	case 706:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3769
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str}
		}
	case 707:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3773
		{
			psqVAL.strs = []string{psqDollar[1].str, psqDollar[2].str, psqDollar[3].str, psqDollar[4].str}
		}
	case 708:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3779
		{
			psqVAL.str = ast.SQLNoCacheStr
		}
	case 709:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3783
		{
			psqVAL.str = ast.SQLCacheStr
		}
	case 710:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3787
		{
			psqVAL.str = ast.DistinctStr
		}
	case 711:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3791
		{
			psqVAL.str = ast.DistinctStr
		}
	case 712:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3795
		{
			psqVAL.str = ast.StraightJoinHint
		}
	case 713:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3799
		{
			psqVAL.str = ast.SQLCalcFoundRowsStr
		}
	case 714:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3803
		{
			psqVAL.str = ast.AllStr // These are not picked up by NewSelect, and so ALL will be dropped. But this is OK, since it's redundant anyway
		}
	case 715:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExprs
//line psql.y:3809
		{
			psqLOCAL = ast.SelectExprs{psqDollar[1].selectExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 716:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3813
		{
			psqSLICE := (*ast.SelectExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].selectExprUnion())
		}
	case 717:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3819
		{
			psqLOCAL = &ast.StarExpr{}
		}
		psqVAL.union = psqLOCAL
	case 718:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3823
		{
			psqLOCAL = &ast.AliasedExpr{Expr: psqDollar[1].exprUnion(), As: psqDollar[2].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 719:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3827
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Name: psqDollar[1].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 720:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.SelectExpr
//line psql.y:3831
		{
			psqLOCAL = &ast.StarExpr{TableName: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}}
		}
		psqVAL.union = psqLOCAL
	case 721:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3836
		{
			psqVAL.colIdent = ast.ColIdent{}
		}
	case 722:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3840
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 723:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3844
		{
			psqVAL.colIdent = psqDollar[2].colIdent
		}
	case 725:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:3851
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 726:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3856
		{
			psqLOCAL = ast.TableExprs{&ast.AliasedTableExpr{Expr: ast.TableName{Name: ast.NewTableIdent("dual")}}}
		}
		psqVAL.union = psqLOCAL
	case 727:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3860
		{
			psqLOCAL = psqDollar[1].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 728:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3866
		{
			psqLOCAL = psqDollar[2].tableExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 729:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExprs
//line psql.y:3872
		{
			psqLOCAL = ast.TableExprs{psqDollar[1].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 730:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3876
		{
			psqSLICE := (*ast.TableExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].tableExprUnion())
		}
	case 733:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3886
		{
			psqLOCAL = psqDollar[1].aliasedTableNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 734:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3890
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].derivedTableUnion(), As: psqDollar[3].tableIdent, Columns: psqDollar[4].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 735:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3894
		{
			psqLOCAL = &ast.ParenTableExpr{Exprs: psqDollar[2].tableExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 736:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3898
		{
			psqLOCAL = psqDollar[1].tableExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 737:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3904
		{
			psqLOCAL = &ast.DerivedTable{Lateral: false, Select: psqDollar[2].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 738:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.DerivedTable
//line psql.y:3908
		{
			psqLOCAL = &ast.DerivedTable{Lateral: true, Select: psqDollar[3].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 739:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.AliasedTableExpr
//line psql.y:3914
		{
			psqLOCAL = &ast.AliasedTableExpr{Expr: psqDollar[1].tableName, As: psqDollar[2].tableIdent, Hints: psqDollar[3].indexHintsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 740:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3919
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 741:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3923
		{
			psqLOCAL = psqDollar[2].columnsUnion()
		}
		psqVAL.union = psqLOCAL
	case 742:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3929
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 743:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3933
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 744:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3939
		{
			psqLOCAL = ast.Columns{ast.NewColIdentWithAt(string(psqDollar[1].str), ast.SingleAt)}
		}
		psqVAL.union = psqLOCAL
	case 745:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3943
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdentWithAt(string(psqDollar[3].str), ast.SingleAt))
		}
	case 746:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3949
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 747:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:3953
		{
			psqLOCAL = ast.Columns{ast.NewColIdent(string(psqDollar[1].str))}
		}
		psqVAL.union = psqLOCAL
	case 748:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3957
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 749:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:3961
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, ast.NewColIdent(string(psqDollar[3].str)))
		}
	case 750:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3974
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 751:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3978
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 752:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3982
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion(), Condition: psqDollar[4].joinCondition}
		}
		psqVAL.union = psqLOCAL
	case 753:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.TableExpr
//line psql.y:3986
		{
			psqLOCAL = &ast.JoinTableExpr{LeftExpr: psqDollar[1].tableExprUnion(), Join: psqDollar[2].joinTypeUnion(), RightExpr: psqDollar[3].tableExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 754:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:3992
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 755:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:3994
		{
			psqVAL.joinCondition = &ast.JoinCondition{Using: psqDollar[3].columnsUnion()}
		}
	case 756:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:3998
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 757:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4000
		{
			psqVAL.joinCondition = psqDollar[1].joinCondition
		}
	case 758:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4004
		{
			psqVAL.joinCondition = &ast.JoinCondition{}
		}
	case 759:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4006
		{
			psqVAL.joinCondition = &ast.JoinCondition{On: psqDollar[2].exprUnion()}
		}
	case 760:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4010
		{
			psqVAL.schemaName = ast.SchemaName{Name: psqDollar[2].schemaIdent}
		}
	case 761:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4015
		{
			psqVAL.empty = struct{}{}
		}
	case 762:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4017
		{
			psqVAL.empty = struct{}{}
		}
	case 763:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4020
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 764:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4024
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 765:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4028
		{
			psqVAL.tableIdent = psqDollar[2].tableIdent
		}
	case 767:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4035
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 768:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4041
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 769:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4045
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 770:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4049
		{
			psqLOCAL = ast.NormalJoinType
		}
		psqVAL.union = psqLOCAL
	case 771:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4055
		{
			psqLOCAL = ast.StraightJoinType
		}
		psqVAL.union = psqLOCAL
	case 772:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4061
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 773:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4065
		{
			psqLOCAL = ast.LeftJoinType
		}
		psqVAL.union = psqLOCAL
	case 774:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4069
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 775:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4073
		{
			psqLOCAL = ast.RightJoinType
		}
		psqVAL.union = psqLOCAL
	case 776:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4079
		{
			psqLOCAL = ast.NaturalJoinType
		}
		psqVAL.union = psqLOCAL
	case 777:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.JoinType
//line psql.y:4083
		{
			if psqDollar[2].joinTypeUnion() == ast.LeftJoinType {
				psqLOCAL = ast.NaturalLeftJoinType
			} else {
				psqLOCAL = ast.NaturalRightJoinType
			}
		}
		psqVAL.union = psqLOCAL
	case 778:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4093
		{
			psqVAL.tableName = psqDollar[2].tableName
		}
	case 779:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4097
		{
			psqVAL.tableName = psqDollar[1].tableName
		}
	case 780:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4103
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 781:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4107
		{
			psqVAL.tableName = ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}
		}
	case 782:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4113
		{
			psqVAL.tableName = ast.TableName{Name: psqDollar[1].tableIdent}
		}
	case 783:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4118
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 784:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4122
		{
			psqLOCAL = psqDollar[1].indexHintsUnion()
		}
		psqVAL.union = psqLOCAL
	case 785:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IndexHints
//line psql.y:4128
		{
			psqLOCAL = ast.IndexHints{psqDollar[1].indexHintUnion()}
		}
		psqVAL.union = psqLOCAL
	case 786:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:4132
		{
			psqSLICE := (*ast.IndexHints)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].indexHintUnion())
		}
	case 787:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4138
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 788:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4142
		{
			psqLOCAL = &ast.IndexHint{Type: ast.UseOp, ForType: psqDollar[3].indexHintForTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 789:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4146
		{
			psqLOCAL = &ast.IndexHint{Type: ast.IgnoreOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 790:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL *ast.IndexHint
//line psql.y:4150
		{
			psqLOCAL = &ast.IndexHint{Type: ast.ForceOp, ForType: psqDollar[3].indexHintForTypeUnion(), Indexes: psqDollar[5].columnsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 791:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4155
		{
			psqLOCAL = ast.NoForType
		}
		psqVAL.union = psqLOCAL
	case 792:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4159
		{
			psqLOCAL = ast.JoinForType
		}
		psqVAL.union = psqLOCAL
	case 793:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4163
		{
			psqLOCAL = ast.OrderByForType
		}
		psqVAL.union = psqLOCAL
	case 794:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.IndexHintForType
//line psql.y:4167
		{
			psqLOCAL = ast.GroupByForType
		}
		psqVAL.union = psqLOCAL
	case 795:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4173
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 796:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4177
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 797:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4184
		{
			psqLOCAL = &ast.OrExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 798:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4188
		{
			psqLOCAL = &ast.AndExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 799:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4192
		{
			psqLOCAL = &ast.NotExpr{Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 800:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4196
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: psqDollar[3].isExprOperatorUnion()}
		}
		psqVAL.union = psqLOCAL
	case 801:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4200
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 802:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4204
		{
			psqLOCAL = &ast.MemberOfExpr{Value: psqDollar[1].exprUnion(), JSONArr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 803:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4211
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNullOp}
		}
		psqVAL.union = psqLOCAL
	case 804:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4215
		{
			psqLOCAL = &ast.IsExpr{Left: psqDollar[1].exprUnion(), Right: ast.IsNotNullOp}
		}
		psqVAL.union = psqLOCAL
	case 805:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4219
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: psqDollar[2].comparisonExprOperatorUnion(), Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 806:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4223
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 807:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4229
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[3].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 808:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4233
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotInOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 809:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4237
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: true, From: psqDollar[3].exprUnion(), To: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 810:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4241
		{
			psqLOCAL = &ast.BetweenExpr{Left: psqDollar[1].exprUnion(), IsBetween: false, From: psqDollar[4].exprUnion(), To: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 811:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4245
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 812:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4249
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 813:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4253
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.LikeOp, Right: psqDollar[3].exprUnion(), Escape: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 814:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4257
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotLikeOp, Right: psqDollar[4].exprUnion(), Escape: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 815:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4261
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.RegexpOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 816:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4265
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.NotRegexpOp, Right: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 817:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4269
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 818:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4273
		{
			psqLOCAL = &ast.ComparisonExpr{Left: psqDollar[1].exprUnion(), Operator: ast.InOp, Right: psqDollar[4].colTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 819:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4279
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitOrOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 820:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4283
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitAndOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 821:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4287
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftLeftOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 822:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4291
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ShiftRightOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 823:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4295
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.PlusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 824:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4299
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MinusOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 825:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4303
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.MultOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 826:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4307
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.DivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 827:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4311
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 828:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4315
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.IntDivOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 829:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4319
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.ModOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 830:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4323
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].exprUnion(), Operator: ast.BitXorOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 831:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4327
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 832:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4333
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 833:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4337
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 834:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4341
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 835:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4345
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 836:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4349
		{
			psqLOCAL = &ast.CollateExpr{Expr: psqDollar[1].exprUnion(), Collation: psqDollar[3].str}
		}
		psqVAL.union = psqLOCAL
	case 837:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4353
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 838:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4357
		{
			psqLOCAL = psqDollar[1].colNameUnion()
		}
		psqVAL.union = psqLOCAL
	case 839:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4361
		{
			psqLOCAL = psqDollar[2].exprUnion() // TODO: do we really want to ignore unary '+' before any kind of literals?
		}
		psqVAL.union = psqLOCAL
	case 840:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4365
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.UMinusOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 841:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4369
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.TildaOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 842:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4373
		{
			psqLOCAL = &ast.UnaryExpr{Operator: ast.BangOp, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 843:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4377
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 844:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4381
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 845:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4385
		{
			psqLOCAL = &ast.ExistsExpr{Subquery: psqDollar[2].subqueryUnion()}
		}
		psqVAL.union = psqLOCAL
	case 846:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4389
		{
			psqLOCAL = &ast.MatchExpr{Columns: psqDollar[3].selectExprsUnion(), Expr: psqDollar[7].exprUnion(), Option: psqDollar[8].matchExprOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 847:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4393
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 848:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4397
		{
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 849:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4401
		{
			psqLOCAL = &ast.ConvertUsingExpr{Expr: psqDollar[3].exprUnion(), Type: psqDollar[5].str}
		}
		psqVAL.union = psqLOCAL
	case 850:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4405
		{
			// From: https://dev.psql.com/doc/refman/8.0/en/cast-functions.html#operator_binary
			// To convert a string expression to a binary string, these constructs are equivalent:
			//    CAST(expr AS BINARY)
			//    BINARY expr
			psqLOCAL = &ast.ConvertExpr{Expr: psqDollar[2].exprUnion(), Type: &ast.ConvertType{Type: psqDollar[1].str}}
		}
		psqVAL.union = psqLOCAL
	case 851:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4413
		{
			psqLOCAL = &ast.Default{ColName: psqDollar[2].str}
		}
		psqVAL.union = psqLOCAL
	case 852:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4417
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			psqLOCAL = &ast.IntervalExpr{Expr: psqDollar[2].exprUnion(), Unit: psqDollar[3].colIdent.String()}
		}
		psqVAL.union = psqLOCAL
	case 853:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4425
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 854:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4429
		{
			psqLOCAL = &ast.BinaryExpr{Left: psqDollar[1].colNameUnion(), Operator: ast.JSONUnquoteExtractOp, Right: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 855:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4435
		{
			psqLOCAL = ast.BothTrimType
		}
		psqVAL.union = psqLOCAL
	case 856:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4439
		{
			psqLOCAL = ast.LeadingTrimType
		}
		psqVAL.union = psqLOCAL
	case 857:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.TrimType
//line psql.y:4443
		{
			psqLOCAL = ast.TrailingTrimType
		}
		psqVAL.union = psqLOCAL
	case 858:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:4449
		{
			psqVAL.str = ""
		}
	case 859:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4453
		{
			psqVAL.str = string(psqDollar[2].colIdent.String())
		}
	case 860:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4459
		{
			psqLOCAL = ast.BoolVal(true)
		}
		psqVAL.union = psqLOCAL
	case 861:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.BoolVal
//line psql.y:4463
		{
			psqLOCAL = ast.BoolVal(false)
		}
		psqVAL.union = psqLOCAL
	case 862:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4470
		{
			psqLOCAL = ast.IsTrueOp
		}
		psqVAL.union = psqLOCAL
	case 863:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4474
		{
			psqLOCAL = ast.IsNotTrueOp
		}
		psqVAL.union = psqLOCAL
	case 864:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4478
		{
			psqLOCAL = ast.IsFalseOp
		}
		psqVAL.union = psqLOCAL
	case 865:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.IsExprOperator
//line psql.y:4482
		{
			psqLOCAL = ast.IsNotFalseOp
		}
		psqVAL.union = psqLOCAL
	case 866:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4488
		{
			psqLOCAL = ast.EqualOp
		}
		psqVAL.union = psqLOCAL
	case 867:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4492
		{
			psqLOCAL = ast.LessThanOp
		}
		psqVAL.union = psqLOCAL
	case 868:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4496
		{
			psqLOCAL = ast.GreaterThanOp
		}
		psqVAL.union = psqLOCAL
	case 869:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4500
		{
			psqLOCAL = ast.LessEqualOp
		}
		psqVAL.union = psqLOCAL
	case 870:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4504
		{
			psqLOCAL = ast.GreaterEqualOp
		}
		psqVAL.union = psqLOCAL
	case 871:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4508
		{
			psqLOCAL = ast.NotEqualOp
		}
		psqVAL.union = psqLOCAL
	case 872:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ComparisonExprOperator
//line psql.y:4512
		{
			psqLOCAL = ast.NullSafeEqualOp
		}
		psqVAL.union = psqLOCAL
	case 873:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4518
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 874:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4522
		{
			psqLOCAL = psqDollar[1].subqueryUnion()
		}
		psqVAL.union = psqLOCAL
	case 875:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ColTuple
//line psql.y:4526
		{
			psqLOCAL = ast.ListArg(psqDollar[1].str[2:])
			bindVariable(psqlex, psqDollar[1].str[2:])
		}
		psqVAL.union = psqLOCAL
	case 876:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Subquery
//line psql.y:4533
		{
			psqLOCAL = &ast.Subquery{psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 877:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:4539
		{
			psqLOCAL = ast.Exprs{psqDollar[1].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 878:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4543
		{
			psqSLICE := (*ast.Exprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].exprUnion())
		}
	case 879:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4553
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 880:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4557
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 881:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4561
		{
			psqLOCAL = &ast.FuncExpr{Name: psqDollar[1].colIdent, Distinct: true, Exprs: psqDollar[4].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 882:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4565
		{
			psqLOCAL = &ast.FuncExpr{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].colIdent, Exprs: psqDollar[5].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 883:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4575
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("left"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 884:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4579
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("right"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 885:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4583
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 886:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4587
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 887:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4591
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion(), To: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 888:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4595
		{
			psqLOCAL = &ast.SubstrExpr{Name: psqDollar[3].exprUnion(), From: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 889:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4599
		{
			psqLOCAL = &ast.GroupConcatExpr{Distinct: psqDollar[3].booleanUnion(), Exprs: psqDollar[4].selectExprsUnion(), OrderBy: psqDollar[5].orderByUnion(), Separator: psqDollar[6].str, Limit: psqDollar[7].limitUnion()}
		}
		psqVAL.union = psqLOCAL
	case 890:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4603
		{
			psqLOCAL = &ast.CaseExpr{Expr: psqDollar[2].exprUnion(), Whens: psqDollar[3].whensUnion(), Else: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 891:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4607
		{
			psqLOCAL = &ast.ValuesFuncExpr{Name: psqDollar[3].colNameUnion()}
		}
		psqVAL.union = psqLOCAL
	case 892:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4611
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 893:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4622
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("utc_date")}
		}
		psqVAL.union = psqLOCAL
	case 894:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4626
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 895:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4632
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("current_date")}
		}
		psqVAL.union = psqLOCAL
	case 896:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4636
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("utc_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 897:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4641
		{
			psqLOCAL = &ast.CurTimeFuncExpr{Name: ast.NewColIdent("current_time"), Fsp: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 898:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4645
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampadd"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 899:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4649
		{
			psqLOCAL = &ast.TimestampFuncExpr{Name: string("timestampdiff"), Unit: psqDollar[3].colIdent.String(), Expr1: psqDollar[5].exprUnion(), Expr2: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 900:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4653
		{
			psqLOCAL = &ast.ExtractFuncExpr{IntervalTypes: psqDollar[3].intervalTypeUnion(), Expr: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 901:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4657
		{
			psqLOCAL = &ast.WeightStringFuncExpr{Expr: psqDollar[3].exprUnion(), As: psqDollar[4].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 902:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4661
		{
			psqLOCAL = &ast.JSONPrettyExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 903:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4665
		{
			psqLOCAL = &ast.JSONStorageFreeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 904:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4669
		{
			psqLOCAL = &ast.JSONStorageSizeExpr{JSONVal: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 905:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4673
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.LTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 906:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4677
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimFuncType: ast.RTrimType, StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 907:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4681
		{
			psqLOCAL = &ast.TrimFuncExpr{Type: psqDollar[3].trimTypeUnion(), TrimArg: psqDollar[4].exprUnion(), StringArg: psqDollar[6].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 908:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4685
		{
			psqLOCAL = &ast.TrimFuncExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 909:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4689
		{
			psqLOCAL = &ast.TrimFuncExpr{TrimArg: psqDollar[3].exprUnion(), StringArg: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 910:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4693
		{
			psqLOCAL = &ast.JSONSchemaValidFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 911:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4697
		{
			psqLOCAL = &ast.JSONSchemaValidationReportFuncExpr{Schema: psqDollar[3].exprUnion(), Document: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 912:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4701
		{
			psqLOCAL = &ast.JSONArrayExpr{Params: psqDollar[3].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 913:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4705
		{
			psqLOCAL = &ast.JSONObjectExpr{Params: psqDollar[3].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 914:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4709
		{
			psqLOCAL = &ast.JSONQuoteExpr{StringArg: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 915:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4713
		{
			psqLOCAL = &ast.JSONContainsExpr{Target: psqDollar[3].exprUnion(), Candidate: psqDollar[5].exprUnion(), PathList: psqDollar[6].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 916:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4717
		{
			psqLOCAL = &ast.JSONContainsPathExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), PathList: psqDollar[7].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 917:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4721
		{
			psqLOCAL = &ast.JSONExtractExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 918:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4725
		{
			psqLOCAL = &ast.JSONKeysExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[4].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 919:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4729
		{
			psqLOCAL = &ast.JSONOverlapsExpr{JSONDoc1: psqDollar[3].exprUnion(), JSONDoc2: psqDollar[5].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 920:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4733
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 921:
		psqDollar = psqS[psqpt-11 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4737
		{
			psqLOCAL = &ast.JSONSearchExpr{JSONDoc: psqDollar[3].exprUnion(), OneOrAll: psqDollar[5].exprUnion(), SearchStr: psqDollar[7].exprUnion(), EscapeChar: psqDollar[9].exprUnion(), PathList: psqDollar[10].jsonPathParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 922:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4741
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion()}
		}
		psqVAL.union = psqLOCAL
	case 923:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4745
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 924:
		psqDollar = psqS[psqpt-8 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4749
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), ErrorOnResponse: psqDollar[7].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 925:
		psqDollar = psqS[psqpt-9 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4753
		{
			psqLOCAL = &ast.JSONValueExpr{JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam, ReturningType: psqDollar[6].convertTypeUnion(), EmptyOnResponse: psqDollar[7].jtOnResponseUnion(), ErrorOnResponse: psqDollar[8].jtOnResponseUnion()}
		}
		psqVAL.union = psqLOCAL
	case 926:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4757
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.DepthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 927:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4761
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.ValidAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 928:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4765
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.TypeAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 929:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4769
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 930:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4773
		{
			psqLOCAL = &ast.JSONAttributesExpr{Type: ast.LengthAttributeType, JSONDoc: psqDollar[3].exprUnion(), Path: psqDollar[5].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 931:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4777
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayAppendType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 932:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4781
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONArrayInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 933:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4785
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONInsertType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 934:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4789
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONReplaceType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 935:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4793
		{
			psqLOCAL = &ast.JSONValueModifierExpr{Type: ast.JSONSetType, JSONDoc: psqDollar[3].exprUnion(), Params: psqDollar[5].jsonObjectParamsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 936:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4797
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergeType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 937:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4801
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePatchType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 938:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4805
		{
			psqLOCAL = &ast.JSONValueMergeExpr{Type: ast.JSONMergePreserveType, JSONDoc: psqDollar[3].exprUnion(), JSONDocList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 939:
		psqDollar = psqS[psqpt-6 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4809
		{
			psqLOCAL = &ast.JSONRemoveExpr{JSONDoc: psqDollar[3].exprUnion(), PathList: psqDollar[5].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 940:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4813
		{
			psqLOCAL = &ast.JSONUnquoteExpr{JSONValue: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 941:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4818
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 942:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:4822
		{
			psqLOCAL = psqDollar[2].convertTypeUnion()
		}
		psqVAL.union = psqLOCAL
	case 943:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4827
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 944:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4831
		{
			psqLOCAL = psqDollar[2].jsonPathParamsUnion()
		}
		psqVAL.union = psqLOCAL
	case 945:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.JSONPathParam
//line psql.y:4837
		{
			psqLOCAL = []ast.JSONPathParam{psqDollar[1].jsonPathParam}
		}
		psqVAL.union = psqLOCAL
	case 946:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:4841
		{
			psqSLICE := (*[]ast.JSONPathParam)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].jsonPathParam)
		}
	case 947:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4847
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].exprUnion())
		}
	case 948:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4851
		{
			psqVAL.jsonPathParam = ast.JSONPathParam(psqDollar[1].colNameUnion())
		}
	case 949:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:4857
		{
		}
	case 950:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4859
		{
			psqLOCAL = ast.IntervalDayHour
		}
		psqVAL.union = psqLOCAL
	case 951:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4863
		{
			psqLOCAL = ast.IntervalDayMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 952:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4867
		{
			psqLOCAL = ast.IntervalDayMinute
		}
		psqVAL.union = psqLOCAL
	case 953:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4871
		{
			psqLOCAL = ast.IntervalDaySecond
		}
		psqVAL.union = psqLOCAL
	case 954:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4875
		{
			psqLOCAL = ast.IntervalHourMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 955:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4879
		{
			psqLOCAL = ast.IntervalHourMinute
		}
		psqVAL.union = psqLOCAL
	case 956:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4883
		{
			psqLOCAL = ast.IntervalHourSecond
		}
		psqVAL.union = psqLOCAL
	case 957:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4887
		{
			psqLOCAL = ast.IntervalMinuteMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 958:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4891
		{
			psqLOCAL = ast.IntervalMinuteSecond
		}
		psqVAL.union = psqLOCAL
	case 959:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4895
		{
			psqLOCAL = ast.IntervalSecondMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 960:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4899
		{
			psqLOCAL = ast.IntervalYearMonth
		}
		psqVAL.union = psqLOCAL
	case 961:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4905
		{
			psqLOCAL = ast.IntervalDay
		}
		psqVAL.union = psqLOCAL
	case 962:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4909
		{
			psqLOCAL = ast.IntervalWeek
		}
		psqVAL.union = psqLOCAL
	case 963:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4913
		{
			psqLOCAL = ast.IntervalHour
		}
		psqVAL.union = psqLOCAL
	case 964:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4917
		{
			psqLOCAL = ast.IntervalMinute
		}
		psqVAL.union = psqLOCAL
	case 965:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4921
		{
			psqLOCAL = ast.IntervalMonth
		}
		psqVAL.union = psqLOCAL
	case 966:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4925
		{
			psqLOCAL = ast.IntervalQuarter
		}
		psqVAL.union = psqLOCAL
	case 967:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4929
		{
			psqLOCAL = ast.IntervalSecond
		}
		psqVAL.union = psqLOCAL
	case 968:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4933
		{
			psqLOCAL = ast.IntervalMicrosecond
		}
		psqVAL.union = psqLOCAL
	case 969:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.IntervalTypes
//line psql.y:4937
		{
			psqLOCAL = ast.IntervalYear
		}
		psqVAL.union = psqLOCAL
	case 972:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4947
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 973:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4951
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 974:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4955
		{
			psqLOCAL = ast.NewArgument(psqDollar[2].str[1:])
			bindVariable(psqlex, psqDollar[2].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 975:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4966
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("if"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 976:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4970
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("database"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 977:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4974
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("schema"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 978:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4978
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("mod"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 979:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:4982
		{
			psqLOCAL = &ast.FuncExpr{Name: ast.NewColIdent("replace"), Exprs: psqDollar[3].selectExprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 980:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4988
		{
			psqLOCAL = ast.NoOption
		}
		psqVAL.union = psqLOCAL
	case 981:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4992
		{
			psqLOCAL = ast.BooleanModeOpt
		}
		psqVAL.union = psqLOCAL
	case 982:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:4996
		{
			psqLOCAL = ast.NaturalLanguageModeOpt
		}
		psqVAL.union = psqLOCAL
	case 983:
		psqDollar = psqS[psqpt-7 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5000
		{
			psqLOCAL = ast.NaturalLanguageModeWithQueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 984:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.MatchExprOption
//line psql.y:5004
		{
			psqLOCAL = ast.QueryExpansionOpt
		}
		psqVAL.union = psqLOCAL
	case 985:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5010
		{
			psqVAL.str = string(psqDollar[1].colIdent.String())
		}
	case 986:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5014
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 987:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5018
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 988:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5024
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 989:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5030
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 990:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5034
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion(), Charset: psqDollar[3].columnCharset}
		}
		psqVAL.union = psqLOCAL
	case 991:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5038
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 992:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5042
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 993:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5046
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
			psqLOCAL.Length = psqDollar[2].LengthScaleOption.Length
			psqLOCAL.Scale = psqDollar[2].LengthScaleOption.Scale
		}
		psqVAL.union = psqLOCAL
	case 994:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5052
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 995:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5056
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 996:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5060
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 997:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5064
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 998:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5068
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 999:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5072
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1000:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5076
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1001:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5080
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str), Length: psqDollar[2].literalUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1002:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5084
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1003:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ConvertType
//line psql.y:5088
		{
			psqLOCAL = &ast.ConvertType{Type: string(psqDollar[1].str)}
		}
		psqVAL.union = psqLOCAL
	case 1004:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5094
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1005:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5098
		{
			psqLOCAL = psqDollar[1].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1006:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5103
		{
			psqVAL.str = string("")
		}
	case 1007:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5107
		{
			psqVAL.str = " separator " + sql_types.EncodeStringSQL(psqDollar[2].str)
		}
	case 1008:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.When
//line psql.y:5113
		{
			psqLOCAL = []*ast.When{psqDollar[1].whenUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1009:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5117
		{
			psqSLICE := (*[]*ast.When)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[2].whenUnion())
		}
	case 1010:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.When
//line psql.y:5123
		{
			psqLOCAL = &ast.When{Cond: psqDollar[2].exprUnion(), Val: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1011:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5128
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1012:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5132
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1013:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5138
		{
			psqLOCAL = &ast.ColName{Name: psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1014:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5142
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Name: psqDollar[1].tableIdent}, Name: psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1015:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.ColName
//line psql.y:5146
		{
			psqLOCAL = &ast.ColName{Qualifier: ast.TableName{Qualifier: psqDollar[1].tableIdent, Name: psqDollar[3].tableIdent}, Name: psqDollar[5].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1016:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5152
		{
			// TODO(sougou): ast.Deprecate this construct.
			if psqDollar[1].colIdent.Lowered() != "value" {
				psqlex.Error("expecting value after next")
				return 1
			}
			psqLOCAL = ast.NewIntLiteral("1")
		}
		psqVAL.union = psqLOCAL
	case 1017:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5161
		{
			psqLOCAL = ast.NewArgument(psqDollar[1].str[1:])
			bindVariable(psqlex, psqDollar[1].str[1:])
		}
		psqVAL.union = psqLOCAL
	case 1018:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5167
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1019:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5171
		{
			psqLOCAL = psqDollar[3].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1020:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5176
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1021:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5180
		{
			psqLOCAL = psqDollar[2].exprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1022:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5185
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1023:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5189
		{
			psqLOCAL = psqDollar[1].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1024:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5195
		{
			psqLOCAL = psqDollar[3].orderByUnion()
		}
		psqVAL.union = psqLOCAL
	case 1025:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderBy
//line psql.y:5201
		{
			psqLOCAL = ast.OrderBy{psqDollar[1].orderUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1026:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5205
		{
			psqSLICE := (*ast.OrderBy)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].orderUnion())
		}
	case 1027:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Order
//line psql.y:5211
		{
			psqLOCAL = &ast.Order{Expr: psqDollar[1].exprUnion(), Direction: psqDollar[2].orderDirectionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1028:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5216
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1029:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5220
		{
			psqLOCAL = ast.AscOrder
		}
		psqVAL.union = psqLOCAL
	case 1030:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.OrderDirection
//line psql.y:5224
		{
			psqLOCAL = ast.DescOrder
		}
		psqVAL.union = psqLOCAL
	case 1031:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5229
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1032:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5233
		{
			psqLOCAL = psqDollar[1].limitUnion()
		}
		psqVAL.union = psqLOCAL
	case 1033:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5239
		{
			psqLOCAL = &ast.Limit{Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1034:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5243
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[2].exprUnion(), Rowcount: psqDollar[4].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1035:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Limit
//line psql.y:5247
		{
			psqLOCAL = &ast.Limit{Offset: psqDollar[4].exprUnion(), Rowcount: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1036:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5252
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1037:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5256
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1038:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5260
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion(), psqDollar[2].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1039:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5264
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1040:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []ast.AlterOption
//line psql.y:5268
		{
			psqLOCAL = []ast.AlterOption{psqDollar[1].alterOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1041:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5275
		{
			psqLOCAL = &ast.LockOption{Type: ast.DefaultType}
		}
		psqVAL.union = psqLOCAL
	case 1042:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5279
		{
			psqLOCAL = &ast.LockOption{Type: ast.NoneType}
		}
		psqVAL.union = psqLOCAL
	case 1043:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5283
		{
			psqLOCAL = &ast.LockOption{Type: ast.SharedType}
		}
		psqVAL.union = psqLOCAL
	case 1044:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5287
		{
			psqLOCAL = &ast.LockOption{Type: ast.ExclusiveType}
		}
		psqVAL.union = psqLOCAL
	case 1045:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5293
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1046:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5297
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1047:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5301
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1048:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.AlterOption
//line psql.y:5305
		{
			psqLOCAL = ast.AlgorithmValue(psqDollar[3].str)
		}
		psqVAL.union = psqLOCAL
	case 1049:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5310
		{
			psqVAL.str = ""
		}
	case 1050:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5314
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1051:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5318
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1052:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5322
		{
			psqVAL.str = string(psqDollar[3].str)
		}
	case 1053:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5327
		{
			psqVAL.str = ""
		}
	case 1054:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5331
		{
			psqVAL.str = psqDollar[3].str
		}
	case 1055:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5337
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1056:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5341
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1057:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5346
		{
			psqVAL.str = ""
		}
	case 1058:
		psqDollar = psqS[psqpt-4 : psqpt+1]
//line psql.y:5350
		{
			psqVAL.str = psqDollar[2].str
		}
	case 1059:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5355
		{
			psqVAL.str = "cascaded"
		}
	case 1060:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5359
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1061:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5363
		{
			psqVAL.str = string(psqDollar[1].str)
		}
	case 1062:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5368
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1063:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5372
		{
			psqLOCAL = psqDollar[3].definerUnion()
		}
		psqVAL.union = psqLOCAL
	case 1064:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5378
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1065:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5384
		{
			psqLOCAL = &ast.Definer{
				Name: string(psqDollar[1].str),
			}
		}
		psqVAL.union = psqLOCAL
	case 1066:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Definer
//line psql.y:5390
		{
			psqLOCAL = &ast.Definer{
				Name:    psqDollar[1].str,
				Address: psqDollar[2].str,
			}
		}
		psqVAL.union = psqLOCAL
	case 1067:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5399
		{
			psqVAL.str = sql_types.EncodeStringSQL(psqDollar[1].str)
		}
	case 1068:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5403
		{
			psqVAL.str = ast.FormatIdentifier(psqDollar[1].str)
		}
	case 1069:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5408
		{
			psqVAL.str = ""
		}
	case 1070:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5412
		{
			psqVAL.str = ast.FormatAddress(psqDollar[1].str)
		}
	case 1071:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5418
		{
			psqLOCAL = ast.ForUpdateLock
		}
		psqVAL.union = psqLOCAL
	case 1072:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL ast.Lock
//line psql.y:5422
		{
			psqLOCAL = ast.ShareModeLock
		}
		psqVAL.union = psqLOCAL
	case 1073:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SelectInto
//line psql.y:5428
		{
			psqLOCAL = &ast.SelectInto{ExportOption: sql_types.EncodeStringSQL(psqDollar[2].tableName.Name.V)}
		}
		psqVAL.union = psqLOCAL
	case 1074:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5441
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[2].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1075:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5445
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[1].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1076:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5449
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[5].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1077:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5453
		{
			psqLOCAL = &ast.Insert{Rows: psqDollar[4].valuesUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1078:
		psqDollar = psqS[psqpt-4 : psqpt+1]
		var psqLOCAL *ast.Insert
//line psql.y:5457
		{
			psqLOCAL = &ast.Insert{Columns: psqDollar[2].columnsUnion(), Rows: psqDollar[4].selStmtUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1079:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5463
		{
			psqLOCAL = ast.Columns{psqDollar[1].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1080:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.Columns
//line psql.y:5467
		{
			psqLOCAL = ast.Columns{psqDollar[3].colIdent}
		}
		psqVAL.union = psqLOCAL
	case 1081:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5471
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].colIdent)
		}
	case 1082:
		psqDollar = psqS[psqpt-5 : psqpt+1]
//line psql.y:5475
		{
			psqSLICE := (*ast.Columns)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[5].colIdent)
		}
	case 1083:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5480
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1084:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5484
		{
			psqLOCAL = psqDollar[5].updateExprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1085:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Values
//line psql.y:5490
		{
			psqLOCAL = ast.Values{psqDollar[1].valTupleUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1086:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5494
		{
			psqSLICE := (*ast.Values)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].valTupleUnion())
		}
	case 1087:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5500
		{
			psqLOCAL = psqDollar[1].valTupleUnion()
		}
		psqVAL.union = psqLOCAL
	case 1088:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5504
		{
			psqLOCAL = ast.ValTuple{}
		}
		psqVAL.union = psqLOCAL
	case 1089:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL ast.ValTuple
//line psql.y:5510
		{
			psqLOCAL = ast.ValTuple(psqDollar[2].exprsUnion())
		}
		psqVAL.union = psqLOCAL
	case 1090:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5515
		{
			if len(psqDollar[1].valTupleUnion()) == 1 {
				psqLOCAL = psqDollar[1].valTupleUnion()[0]
			} else {
				psqLOCAL = psqDollar[1].valTupleUnion()
			}
		}
		psqVAL.union = psqLOCAL
	case 1091:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.UpdateExprs
//line psql.y:5525
		{
			psqLOCAL = ast.UpdateExprs{psqDollar[1].updateExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1092:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5529
		{
			psqSLICE := (*ast.UpdateExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].updateExprUnion())
		}
	case 1093:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.UpdateExpr
//line psql.y:5535
		{
			psqLOCAL = &ast.UpdateExpr{Name: psqDollar[1].colNameUnion(), Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1094:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.SetExprs
//line psql.y:5541
		{
			psqLOCAL = ast.SetExprs{psqDollar[1].setExprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1095:
		psqDollar = psqS[psqpt-3 : psqpt+1]
//line psql.y:5545
		{
			psqSLICE := (*ast.SetExprs)(psqIaddr(psqVAL.union))
			*psqSLICE = append(*psqSLICE, psqDollar[3].setExprUnion())
		}
	case 1096:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5551
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("on")}
		}
		psqVAL.union = psqLOCAL
	case 1097:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5555
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: ast.NewStrLiteral("off")}
		}
		psqVAL.union = psqLOCAL
	case 1098:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5559
		{
			psqLOCAL = &ast.SetExpr{Name: psqDollar[1].colIdent, Scope: ast.ImplicitScope, Expr: psqDollar[3].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1099:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5563
		{
			psqLOCAL = &ast.SetExpr{Name: ast.NewColIdent(string(psqDollar[1].str)), Scope: ast.ImplicitScope, Expr: psqDollar[2].exprUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1100:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.SetExpr
//line psql.y:5567
		{
			psqDollar[2].setExprUnion().Scope = psqDollar[1].scopeUnion()
			psqLOCAL = psqDollar[2].setExprUnion()
		}
		psqVAL.union = psqLOCAL
	case 1102:
		psqDollar = psqS[psqpt-2 : psqpt+1]
//line psql.y:5575
		{
			psqVAL.str = "charset"
		}
	case 1105:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5585
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].colIdent.String())
		}
		psqVAL.union = psqLOCAL
	case 1106:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5589
		{
			psqLOCAL = ast.NewStrLiteral(psqDollar[1].str)
		}
		psqVAL.union = psqLOCAL
	case 1107:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Expr
//line psql.y:5593
		{
			psqLOCAL = &ast.Default{}
		}
		psqVAL.union = psqLOCAL
	case 1110:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5602
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1111:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5604
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1112:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5607
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1113:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5609
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1114:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5612
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1115:
		psqDollar = psqS[psqpt-3 : psqpt+1]
		var psqLOCAL bool
//line psql.y:5614
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1116:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5617
		{
			psqLOCAL = false
		}
		psqVAL.union = psqLOCAL
	case 1117:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Ignore
//line psql.y:5619
		{
			psqLOCAL = true
		}
		psqVAL.union = psqLOCAL
	case 1118:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5622
		{
			psqVAL.empty = struct{}{}
		}
	case 1119:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5624
		{
			psqVAL.empty = struct{}{}
		}
	case 1120:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5626
		{
			psqVAL.empty = struct{}{}
		}
	case 1121:
		psqDollar = psqS[psqpt-5 : psqpt+1]
		var psqLOCAL ast.Statement
//line psql.y:5630
		{
			psqLOCAL = &ast.CallProc{Name: psqDollar[2].tableName, Params: psqDollar[4].exprsUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1122:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5635
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1123:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL ast.Exprs
//line psql.y:5639
		{
			psqLOCAL = psqDollar[1].exprsUnion()
		}
		psqVAL.union = psqLOCAL
	case 1124:
		psqDollar = psqS[psqpt-0 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5644
		{
			psqLOCAL = nil
		}
		psqVAL.union = psqLOCAL
	case 1125:
		psqDollar = psqS[psqpt-1 : psqpt+1]
		var psqLOCAL []*ast.IndexOption
//line psql.y:5646
		{
			psqLOCAL = []*ast.IndexOption{psqDollar[1].indexOptionUnion()}
		}
		psqVAL.union = psqLOCAL
	case 1126:
		psqDollar = psqS[psqpt-2 : psqpt+1]
		var psqLOCAL *ast.IndexOption
//line psql.y:5650
		{
			psqLOCAL = &ast.IndexOption{Name: string(psqDollar[1].str), String: string(psqDollar[2].colIdent.String())}
		}
		psqVAL.union = psqLOCAL
	case 1127:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5656
		{
			psqVAL.colIdent = psqDollar[1].colIdent
		}
	case 1128:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5660
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1129:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5664
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1131:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5671
		{
			psqVAL.colIdent = ast.NewColIdent(string(psqDollar[1].str))
		}
	case 1132:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5677
		{
			psqVAL.schemaIdent = ast.NewSchemaIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1133:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5683
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].colIdent.String()))
		}
	case 1134:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5687
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1135:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5691
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1136:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:5697
		{
			psqVAL.tableIdent = ast.NewTableIdent("")
		}
	case 1137:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5701
		{
			psqVAL.tableIdent = psqDollar[1].tableIdent
		}
	case 1139:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:5708
		{
			psqVAL.tableIdent = ast.NewTableIdent(string(psqDollar[1].str))
		}
	case 1651:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6253
		{
			if incNesting(psqlex) {
				psqlex.Error("max nesting level reached")
				return 1
			}
		}
	case 1652:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6262
		{
			decNesting(psqlex)
		}
	case 1653:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6267
		{
			skipToEnd(psqlex)
		}
	case 1654:
		psqDollar = psqS[psqpt-0 : psqpt+1]
//line psql.y:6272
		{
			skipToEnd(psqlex)
		}
	case 1655:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6276
		{
			skipToEnd(psqlex)
		}
	case 1656:
		psqDollar = psqS[psqpt-1 : psqpt+1]
//line psql.y:6280
		{
			skipToEnd(psqlex)
		}
	}
	goto psqstack /* stack new state and value */
}
