/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package psql

import (
	"fmt"
	"strings"

	"github.com/usalko/sent/internal/sql_parser/cache"
	"github.com/usalko/sent/internal/sql_parser/dialect"
)

// keywords is a table of psql keywords that fall into two categories:
// 1) keywords considered reserved by PostgresQL
// 2) keywords for us to handle specially in psql.y
//
// Those marked as UNUSED are likely reserved keywords. We add them here so that
// when rewriting queries we can properly backtick quote them so they don't cause issues
//
// NOTE: If you add new keywords, add them also to the reserved_keywords or
// non_reserved_keywords grammar in sql.y -- this will allow the keyword to be used
// in identifiers. See the docs for each grammar to determine which one to put it into.
var keywords = []cache.Keyword{
	{Name: "abort", Id: ABORT},
	{Name: "absent", Id: ABSENT},
	{Name: "absolute", Id: ABSOLUTE},
	{Name: "access", Id: ACCESS},
	{Name: "action", Id: ACTION},
	{Name: "add", Id: ADD},
	{Name: "admin", Id: ADMIN},
	{Name: "after", Id: AFTER},
	{Name: "aggregate", Id: AGGREGATE},
	{Name: "all", Id: ALL},
	{Name: "also", Id: ALSO},
	{Name: "alter", Id: ALTER},
	{Name: "always", Id: ALWAYS},
	{Name: "analyse", Id: ANALYSE},
	{Name: "analyze", Id: ANALYZE},
	{Name: "and", Id: AND},
	{Name: "any", Id: ANY},
	{Name: "array", Id: ARRAY},
	{Name: "as", Id: AS},
	{Name: "asc", Id: ASC},
	{Name: "asensitive", Id: ASENSITIVE},
	{Name: "assertion", Id: ASSERTION},
	{Name: "assignment", Id: ASSIGNMENT},
	{Name: "asymmetric", Id: ASYMMETRIC},
	{Name: "at", Id: AT},
	{Name: "atomic", Id: ATOMIC},
	{Name: "attach", Id: ATTACH},
	{Name: "attribute", Id: ATTRIBUTE},
	{Name: "authorization", Id: AUTHORIZATION},
	{Name: "backward", Id: BACKWARD},
	{Name: "before", Id: BEFORE},
	{Name: "begin", Id: BEGIN},
	{Name: "between", Id: BETWEEN},
	{Name: "bigint", Id: BIGINT},
	{Name: "binary", Id: BINARY},
	{Name: "bit", Id: BIT},
	{Name: "boolean", Id: BOOLEAN},
	{Name: "both", Id: BOTH},
	{Name: "breadth", Id: BREADTH},
	{Name: "by", Id: BY},
	{Name: "cache", Id: CACHE},
	{Name: "call", Id: CALL},
	{Name: "called", Id: CALLED},
	{Name: "cascade", Id: CASCADE},
	{Name: "cascaded", Id: CASCADED},
	{Name: "case", Id: CASE},
	{Name: "cast", Id: CAST},
	{Name: "catalog", Id: CATALOG},
	{Name: "chain", Id: CHAIN},
	{Name: "char", Id: CHAR},
	{Name: "character", Id: CHARACTER},
	{Name: "characteristics", Id: CHARACTERISTICS},
	{Name: "check", Id: CHECK},
	{Name: "checkpoint", Id: CHECKPOINT},
	{Name: "class", Id: CLASS},
	{Name: "close", Id: CLOSE},
	{Name: "cluster", Id: CLUSTER},
	{Name: "coalesce", Id: COALESCE},
	{Name: "collate", Id: COLLATE},
	{Name: "collation", Id: COLLATION},
	{Name: "column", Id: COLUMN},
	{Name: "columns", Id: COLUMNS},
	{Name: "comment", Id: COMMENT},
	{Name: "comments", Id: COMMENTS},
	{Name: "commit", Id: COMMIT},
	{Name: "committed", Id: COMMITTED},
	{Name: "compression", Id: COMPRESSION},
	{Name: "concurrently", Id: CONCURRENTLY},
	{Name: "conditional", Id: CONDITIONAL},
	{Name: "configuration", Id: CONFIGURATION},
	{Name: "conflict", Id: CONFLICT},
	{Name: "connection", Id: CONNECTION},
	{Name: "constraint", Id: CONSTRAINT},
	{Name: "constraints", Id: CONSTRAINTS},
	{Name: "content", Id: CONTENT},
	{Name: "continue", Id: CONTINUE},
	{Name: "conversion", Id: CONVERSION},
	{Name: "copy", Id: COPY},
	{Name: "cost", Id: COST},
	{Name: "create", Id: CREATE},
	{Name: "cross", Id: CROSS},
	{Name: "csv", Id: CSV},
	{Name: "cube", Id: CUBE},
	{Name: "current", Id: CURRENT},
	{Name: "current_catalog", Id: CURRENT_CATALOG},
	{Name: "current_date", Id: CURRENT_DATE},
	{Name: "current_role", Id: CURRENT_ROLE},
	{Name: "current_schema", Id: CURRENT_SCHEMA},
	{Name: "current_time", Id: CURRENT_TIME},
	{Name: "current_timestamp", Id: CURRENT_TIMESTAMP},
	{Name: "current_user", Id: CURRENT_USER},
	{Name: "cursor", Id: CURSOR},
	{Name: "cycle", Id: CYCLE},
	{Name: "data", Id: DATA},
	{Name: "database", Id: DATABASE},
	{Name: "day", Id: DAY},
	{Name: "deallocate", Id: DEALLOCATE},
	{Name: "dec", Id: DEC},
	{Name: "decimal", Id: DECIMAL},
	{Name: "declare", Id: DECLARE},
	{Name: "default", Id: DEFAULT},
	{Name: "defaults", Id: DEFAULTS},
	{Name: "deferrable", Id: DEFERRABLE},
	{Name: "deferred", Id: DEFERRED},
	{Name: "definer", Id: DEFINER},
	{Name: "delete", Id: DELETE},
	{Name: "delimiter", Id: DELIMITER},
	{Name: "delimiters", Id: DELIMITERS},
	{Name: "depends", Id: DEPENDS},
	{Name: "depth", Id: DEPTH},
	{Name: "desc", Id: DESC},
	{Name: "detach", Id: DETACH},
	{Name: "dictionary", Id: DICTIONARY},
	{Name: "disable", Id: DISABLE},
	{Name: "discard", Id: DISCARD},
	{Name: "distinct", Id: DISTINCT},
	{Name: "do", Id: DO},
	{Name: "document", Id: DOCUMENT},
	{Name: "domain", Id: DOMAIN},
	{Name: "double", Id: DOUBLE},
	{Name: "drop", Id: DROP},
	{Name: "each", Id: EACH},
	{Name: "else", Id: ELSE},
	{Name: "empty", Id: EMPTY},
	{Name: "enable", Id: ENABLE},
	{Name: "encoding", Id: ENCODING},
	{Name: "encrypted", Id: ENCRYPTED},
	{Name: "end", Id: END},
	{Name: "enum", Id: ENUM},
	{Name: "error", Id: ERROR},
	{Name: "escape", Id: ESCAPE},
	{Name: "event", Id: EVENT},
	{Name: "except", Id: EXCEPT},
	{Name: "exclude", Id: EXCLUDE},
	{Name: "excluding", Id: EXCLUDING},
	{Name: "exclusive", Id: EXCLUSIVE},
	{Name: "execute", Id: EXECUTE},
	{Name: "exists", Id: EXISTS},
	{Name: "explain", Id: EXPLAIN},
	{Name: "expression", Id: EXPRESSION},
	{Name: "extension", Id: EXTENSION},
	{Name: "external", Id: EXTERNAL},
	{Name: "extract", Id: EXTRACT},
	{Name: "false", Id: FALSE},
	{Name: "family", Id: FAMILY},
	{Name: "fetch", Id: FETCH},
	{Name: "filter", Id: FILTER},
	{Name: "finalize", Id: FINALIZE},
	{Name: "first", Id: FIRST},
	{Name: "float", Id: FLOAT},
	{Name: "following", Id: FOLLOWING},
	{Name: "for", Id: FOR},
	{Name: "force", Id: FORCE},
	{Name: "foreign", Id: FOREIGN},
	{Name: "format", Id: FORMAT},
	{Name: "forward", Id: FORWARD},
	{Name: "freeze", Id: FREEZE},
	{Name: "from", Id: FROM},
	{Name: "full", Id: FULL},
	{Name: "function", Id: FUNCTION},
	{Name: "functions", Id: FUNCTIONS},
	{Name: "generated", Id: GENERATED},
	{Name: "global", Id: GLOBAL},
	{Name: "grant", Id: GRANT},
	{Name: "granted", Id: GRANTED},
	{Name: "greatest", Id: GREATEST},
	{Name: "group", Id: GROUP},
	{Name: "grouping", Id: GROUPING},
	{Name: "groups", Id: GROUPS},
	{Name: "handler", Id: HANDLER},
	{Name: "having", Id: HAVING},
	{Name: "header", Id: HEADER},
	{Name: "hold", Id: HOLD},
	{Name: "hour", Id: HOUR},
	{Name: "identity", Id: IDENTITY},
	{Name: "if", Id: IF},
	{Name: "ilike", Id: ILIKE},
	{Name: "immediate", Id: IMMEDIATE},
	{Name: "immutable", Id: IMMUTABLE},
	{Name: "implicit", Id: IMPLICIT},
	{Name: "import", Id: IMPORT},
	{Name: "in", Id: IN},
	{Name: "include", Id: INCLUDE},
	{Name: "including", Id: INCLUDING},
	{Name: "increment", Id: INCREMENT},
	{Name: "indent", Id: INDENT},
	{Name: "index", Id: INDEX},
	{Name: "indexes", Id: INDEXES},
	{Name: "inherit", Id: INHERIT},
	{Name: "inherits", Id: INHERITS},
	{Name: "initially", Id: INITIALLY},
	{Name: "inline", Id: INLINE},
	{Name: "inner", Id: INNER},
	{Name: "inout", Id: INOUT},
	{Name: "input", Id: INPUT},
	{Name: "insensitive", Id: INSENSITIVE},
	{Name: "insert", Id: INSERT},
	{Name: "instead", Id: INSTEAD},
	{Name: "int", Id: INT},
	{Name: "integer", Id: INTEGER},
	{Name: "intersect", Id: INTERSECT},
	{Name: "interval", Id: INTERVAL},
	{Name: "into", Id: INTO},
	{Name: "invoker", Id: INVOKER},
	{Name: "is", Id: IS},
	{Name: "isnull", Id: ISNULL},
	{Name: "isolation", Id: ISOLATION},
	{Name: "join", Id: JOIN},
	{Name: "json", Id: JSON},
	{Name: "json_array", Id: JSON_ARRAY},
	{Name: "json_arrayagg", Id: JSON_ARRAYAGG},
	{Name: "json_exists", Id: JSON_EXISTS},
	{Name: "json_object", Id: JSON_OBJECT},
	{Name: "json_objectagg", Id: JSON_OBJECTAGG},
	{Name: "json_query", Id: JSON_QUERY},
	{Name: "json_scalar", Id: JSON_SCALAR},
	{Name: "json_serialize", Id: JSON_SERIALIZE},
	{Name: "json_table", Id: JSON_TABLE},
	{Name: "json_value", Id: JSON_VALUE},
	{Name: "keep", Id: KEEP},
	{Name: "key", Id: KEY},
	{Name: "keys", Id: KEYS},
	{Name: "label", Id: LABEL},
	{Name: "language", Id: LANGUAGE},
	{Name: "large", Id: LARGE},
	{Name: "last", Id: LAST},
	{Name: "lateral", Id: LATERAL},
	{Name: "leading", Id: LEADING},
	{Name: "leakproof", Id: LEAKPROOF},
	{Name: "least", Id: LEAST},
	{Name: "left", Id: LEFT},
	{Name: "level", Id: LEVEL},
	{Name: "like", Id: LIKE},
	{Name: "limit", Id: LIMIT},
	{Name: "listen", Id: LISTEN},
	{Name: "load", Id: LOAD},
	{Name: "local", Id: LOCAL},
	{Name: "localtime", Id: LOCALTIME},
	{Name: "localtimestamp", Id: LOCALTIMESTAMP},
	{Name: "location", Id: LOCATION},
	{Name: "lock", Id: LOCK},
	{Name: "locked", Id: LOCKED},
	{Name: "logged", Id: LOGGED},
	{Name: "mapping", Id: MAPPING},
	{Name: "match", Id: MATCH},
	{Name: "matched", Id: MATCHED},
	{Name: "materialized", Id: MATERIALIZED},
	{Name: "maxvalue", Id: MAXVALUE},
	{Name: "merge", Id: MERGE},
	{Name: "merge_action", Id: MERGE_ACTION},
	{Name: "method", Id: METHOD},
	{Name: "minute", Id: MINUTE},
	{Name: "minvalue", Id: MINVALUE},
	{Name: "mode", Id: MODE},
	{Name: "month", Id: MONTH},
	{Name: "move", Id: MOVE},
	{Name: "name", Id: NAME},
	{Name: "names", Id: NAMES},
	{Name: "national", Id: NATIONAL},
	{Name: "natural", Id: NATURAL},
	{Name: "nchar", Id: NCHAR},
	{Name: "nested", Id: NESTED},
	{Name: "new", Id: NEW},
	{Name: "next", Id: NEXT},
	{Name: "nfc", Id: NFC},
	{Name: "nfd", Id: NFD},
	{Name: "nfkc", Id: NFKC},
	{Name: "nfkd", Id: NFKD},
	{Name: "no", Id: NO},
	{Name: "none", Id: NONE},
	{Name: "normalize", Id: NORMALIZE},
	{Name: "normalized", Id: NORMALIZED},
	{Name: "not", Id: NOT},
	{Name: "nothing", Id: NOTHING},
	{Name: "notify", Id: NOTIFY},
	{Name: "notnull", Id: NOTNULL},
	{Name: "nowait", Id: NOWAIT},
	{Name: "null", Id: NULL},
	{Name: "nullif", Id: NULLIF},
	{Name: "nulls", Id: NULLS},
	{Name: "numeric", Id: NUMERIC},
	{Name: "object", Id: OBJECT},
	{Name: "of", Id: OF},
	{Name: "off", Id: OFF},
	{Name: "offset", Id: OFFSET},
	{Name: "oids", Id: OIDS},
	{Name: "old", Id: OLD},
	{Name: "omit", Id: OMIT},
	{Name: "on", Id: ON},
	{Name: "only", Id: ONLY},
	{Name: "operator", Id: OPERATOR},
	{Name: "option", Id: OPTION},
	{Name: "options", Id: OPTIONS},
	{Name: "or", Id: OR},
	{Name: "order", Id: ORDER},
	{Name: "ordinality", Id: ORDINALITY},
	{Name: "others", Id: OTHERS},
	{Name: "out", Id: OUT},
	{Name: "outer", Id: OUTER},
	{Name: "over", Id: OVER},
	{Name: "overlaps", Id: OVERLAPS},
	{Name: "overlay", Id: OVERLAY},
	{Name: "overriding", Id: OVERRIDING},
	{Name: "owned", Id: OWNED},
	{Name: "owner", Id: OWNER},
	{Name: "parallel", Id: PARALLEL},
	{Name: "parameter", Id: PARAMETER},
	{Name: "parser", Id: PARSER},
	{Name: "partial", Id: PARTIAL},
	{Name: "partition", Id: PARTITION},
	{Name: "passing", Id: PASSING},
	{Name: "password", Id: PASSWORD},
	{Name: "path", Id: PATH},
	{Name: "placing", Id: PLACING},
	{Name: "plan", Id: PLAN},
	{Name: "plans", Id: PLANS},
	{Name: "policy", Id: POLICY},
	{Name: "position", Id: POSITION},
	{Name: "preceding", Id: PRECEDING},
	{Name: "precision", Id: PRECISION},
	{Name: "prepare", Id: PREPARE},
	{Name: "prepared", Id: PREPARED},
	{Name: "preserve", Id: PRESERVE},
	{Name: "primary", Id: PRIMARY},
	{Name: "prior", Id: PRIOR},
	{Name: "privileges", Id: PRIVILEGES},
	{Name: "procedural", Id: PROCEDURAL},
	{Name: "procedure", Id: PROCEDURE},
	{Name: "procedures", Id: PROCEDURES},
	{Name: "program", Id: PROGRAM},
	{Name: "publication", Id: PUBLICATION},
	{Name: "quote", Id: QUOTE},
	{Name: "quotes", Id: QUOTES},
	{Name: "range", Id: RANGE},
	{Name: "read", Id: READ},
	{Name: "real", Id: REAL},
	{Name: "reassign", Id: REASSIGN},
	{Name: "recheck", Id: RECHECK},
	{Name: "recursive", Id: RECURSIVE},
	{Name: "ref", Id: REF},
	{Name: "references", Id: REFERENCES},
	{Name: "referencing", Id: REFERENCING},
	{Name: "refresh", Id: REFRESH},
	{Name: "reindex", Id: REINDEX},
	{Name: "relative", Id: RELATIVE},
	{Name: "release", Id: RELEASE},
	{Name: "rename", Id: RENAME},
	{Name: "repeatable", Id: REPEATABLE},
	{Name: "replace", Id: REPLACE},
	{Name: "replica", Id: REPLICA},
	{Name: "reset", Id: RESET},
	{Name: "restart", Id: RESTART},
	{Name: "restrict", Id: RESTRICT},
	{Name: "return", Id: RETURN},
	{Name: "returning", Id: RETURNING},
	{Name: "returns", Id: RETURNS},
	{Name: "revoke", Id: REVOKE},
	{Name: "right", Id: RIGHT},
	{Name: "role", Id: ROLE},
	{Name: "rollback", Id: ROLLBACK},
	{Name: "rollup", Id: ROLLUP},
	{Name: "routine", Id: ROUTINE},
	{Name: "routines", Id: ROUTINES},
	{Name: "row", Id: ROW},
	{Name: "rows", Id: ROWS},
	{Name: "rule", Id: RULE},
	{Name: "savepoint", Id: SAVEPOINT},
	{Name: "scalar", Id: SCALAR},
	{Name: "schema", Id: SCHEMA},
	{Name: "schemas", Id: SCHEMAS},
	{Name: "scroll", Id: SCROLL},
	{Name: "search", Id: SEARCH},
	{Name: "second", Id: SECOND},
	{Name: "security", Id: SECURITY},
	{Name: "select", Id: SELECT},
	{Name: "sequence", Id: SEQUENCE},
	{Name: "sequences", Id: SEQUENCES},
	{Name: "serializable", Id: SERIALIZABLE},
	{Name: "server", Id: SERVER},
	{Name: "session", Id: SESSION},
	{Name: "session_user", Id: SESSION_USER},
	{Name: "set", Id: SET},
	{Name: "setof", Id: SETOF},
	{Name: "sets", Id: SETS},
	{Name: "share", Id: SHARE},
	{Name: "show", Id: SHOW},
	{Name: "similar", Id: SIMILAR},
	{Name: "simple", Id: SIMPLE},
	{Name: "skip", Id: SKIP},
	{Name: "smallint", Id: SMALLINT},
	{Name: "snapshot", Id: SNAPSHOT},
	{Name: "some", Id: SOME},
	{Name: "source", Id: SOURCE},
	{Name: "sql", Id: SQL},
	{Name: "stable", Id: STABLE},
	{Name: "standalone", Id: STANDALONE},
	{Name: "start", Id: START},
	{Name: "statement", Id: STATEMENT},
	{Name: "statistics", Id: STATISTICS},
	{Name: "stdin", Id: STDIN},
	{Name: "stdout", Id: STDOUT},
	{Name: "storage", Id: STORAGE},
	{Name: "stored", Id: STORED},
	{Name: "strict", Id: STRICT},
	{Name: "string", Id: STRING},
	{Name: "strip", Id: STRIP},
	{Name: "subscription", Id: SUBSCRIPTION},
	{Name: "substring", Id: SUBSTRING},
	{Name: "support", Id: SUPPORT},
	{Name: "symmetric", Id: SYMMETRIC},
	{Name: "sysid", Id: SYSID},
	{Name: "system", Id: SYSTEM},
	{Name: "system_user", Id: SYSTEM_USER},
	{Name: "table", Id: TABLE},
	{Name: "tables", Id: TABLES},
	{Name: "tablesample", Id: TABLESAMPLE},
	{Name: "tablespace", Id: TABLESPACE},
	{Name: "target", Id: TARGET},
	{Name: "temp", Id: TEMP},
	{Name: "template", Id: TEMPLATE},
	{Name: "temporary", Id: TEMPORARY},
	{Name: "text", Id: TEXT},
	{Name: "then", Id: THEN},
	{Name: "ties", Id: TIES},
	{Name: "time", Id: TIME},
	{Name: "timestamp", Id: TIMESTAMP},
	{Name: "to", Id: TO},
	{Name: "trailing", Id: TRAILING},
	{Name: "transaction", Id: TRANSACTION},
	{Name: "transform", Id: TRANSFORM},
	{Name: "treat", Id: TREAT},
	{Name: "trigger", Id: TRIGGER},
	{Name: "trim", Id: TRIM},
	{Name: "true", Id: TRUE},
	{Name: "truncate", Id: TRUNCATE},
	{Name: "trusted", Id: TRUSTED},
	{Name: "type", Id: TYPE},
	{Name: "types", Id: TYPES},
	{Name: "uescape", Id: UESCAPE},
	{Name: "unbounded", Id: UNBOUNDED},
	{Name: "uncommitted", Id: UNCOMMITTED},
	{Name: "unconditional", Id: UNCONDITIONAL},
	{Name: "unencrypted", Id: UNENCRYPTED},
	{Name: "union", Id: UNION},
	{Name: "unique", Id: UNIQUE},
	{Name: "unknown", Id: UNKNOWN},
	{Name: "unlisten", Id: UNLISTEN},
	{Name: "unlogged", Id: UNLOGGED},
	{Name: "until", Id: UNTIL},
	{Name: "update", Id: UPDATE},
	{Name: "user", Id: USER},
	{Name: "using", Id: USING},
	{Name: "vacuum", Id: VACUUM},
	{Name: "valid", Id: VALID},
	{Name: "validate", Id: VALIDATE},
	{Name: "validator", Id: VALIDATOR},
	{Name: "value", Id: VALUE},
	{Name: "values", Id: VALUES},
	{Name: "varchar", Id: VARCHAR},
	{Name: "variadic", Id: VARIADIC},
	{Name: "varying", Id: VARYING},
	{Name: "verbose", Id: VERBOSE},
	{Name: "version", Id: VERSION},
	{Name: "view", Id: VIEW},
	{Name: "views", Id: VIEWS},
	{Name: "volatile", Id: VOLATILE},
	{Name: "when", Id: WHEN},
	{Name: "where", Id: WHERE},
	{Name: "whitespace", Id: WHITESPACE},
	{Name: "window", Id: WINDOW},
	{Name: "with", Id: WITH},
	{Name: "within", Id: WITHIN},
	{Name: "without", Id: WITHOUT},
	{Name: "work", Id: WORK},
	{Name: "wrapper", Id: WRAPPER},
	{Name: "write", Id: WRITE},
	{Name: "xml", Id: XML},
	{Name: "xmlattributes", Id: XMLATTRIBUTES},
	{Name: "xmlconcat", Id: XMLCONCAT},
	{Name: "xmlelement", Id: XMLELEMENT},
	{Name: "xmlexists", Id: XMLEXISTS},
	{Name: "xmlforest", Id: XMLFOREST},
	{Name: "xmlnamespaces", Id: XMLNAMESPACES},
	{Name: "xmlparse", Id: XMLPARSE},
	{Name: "xmlpi", Id: XMLPI},
	{Name: "xmlroot", Id: XMLROOT},
	{Name: "xmlserialize", Id: XMLSERIALIZE},
	{Name: "xmltable", Id: XMLTABLE},
	{Name: "year", Id: YEAR},
	{Name: "yes", Id: YES},
	{Name: "zone", Id: ZONE},
}

func GetKeywords() []cache.Keyword {
	result := make([]cache.Keyword, len(keywords))
	for i, keyword := range keywords {
		result[i] = cache.Keyword(keyword)
	}
	return result
}

// keywordStrings contains the reverse mapping of token to keyword strings
var keywordStrings = map[int]string{}

func buildCaseInsensitiveTable(keywords []cache.Keyword) *cache.CaseInsensitiveTable {
	table := &cache.CaseInsensitiveTable{
		Hashes: make(map[uint64]cache.Keyword, len(keywords)),
	}

	for _, kw := range keywords {
		hash := cache.Fnv1aIstr(cache.Offset64, kw.Name)
		if _, exists := table.Hashes[hash]; exists {
			panic("collision in caseInsensitiveTable")
		}
		table.Hashes[hash] = kw
	}
	return table
}

func init() {
	for _, kw := range keywords {
		if kw.Id == UNUSED {
			continue
		}
		if kw.Name != strings.ToLower(kw.Name) {
			panic(fmt.Sprintf("keyword %q must be lowercase in table", kw.Name))
		}
		keywordStrings[kw.Id] = kw.Name
	}

	cache.KeywordLookupTables[dialect.PSQL] = buildCaseInsensitiveTable(keywords)
}

// KeywordString returns the string corresponding to the given keyword
func KeywordString(id int) string {
	str, ok := keywordStrings[id]
	if !ok {
		return ""
	}
	return str
}
